Search.setIndex({"alltitles": {"(Generalized) linear models": [[213, "generalized-linear-models"]], "1-way partial dependence with different models": [[187, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[102, "newsgroups-dataset"]], "2D interaction plots": [[187, "d-interaction-plots"]], "3D representation": [[187, "d-representation"]], "A constant prediction baseline": [[213, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[91, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[81, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[96, null]], "A more flexible plotting API": [[323, "a-more-flexible-plotting-api"]], "A note on shuffling": [[414, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[384, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[377, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[1000, "aic-and-bic-criteria"]], "API Interface": [[401, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1042, "api-changes"]], "API changes summary": [[1035, "api-changes-summary"], [1035, "id4"], [1035, "id7"], [1035, "id10"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1041, "id6"], [1042, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[380, "apis-of-scikit-learn-objects"]], "ARDRegression": [[647, null]], "ARFF parser": [[372, "arff-parser"]], "AWeber": [[1028, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[176, null]], "Ablation study": [[250, "ablation-study"]], "About the project": [[390, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[411, "access-pipeline-steps"]], "Access to nested parameters": [[411, "access-to-nested-parameters"]], "Accuracy of the Model": [[188, "accuracy-of-the-model"]], "Accuracy score": [[1004, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[356, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[417, "adaboost"]], "AdaBoostClassifier": [[556, null]], "AdaBoostRegressor": [[557, null]], "Add support for monotonic constraints in tree-based models": [[327, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[410, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[996, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[641, null]], "Addressing the problem with a business metric": [[265, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[251, null]], "Advantages:": [[410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null]], "Affinity Propagation": [[410, "affinity-propagation"]], "AffinityPropagation": [[442, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[443, null]], "Aggressive elimination of candidates": [[993, "aggressive-elimination-of-candidates"]], "Algorithms": [[1008, "algorithms"]], "Alpine Linux": [[396, "alpine-linux"]], "Alternatives to brute force parameter search": [[993, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[250, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[132, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[92, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[396, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[134, "analysis"]], "Analysis of a bag-of-words document classifier": [[352, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[146, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[187, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[993, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[418, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[291, null]], "Arch Linux": [[396, "arch-linux"]], "Architectural / general goals": [[1024, "architectural-general-goals"]], "Array API support (experimental)": [[406, null]], "Artwork": [[0, "artwork"]], "Attributes": [[392, "attributes"]], "Authors": [[1035, "authors"], [1035, "id20"]], "Automated Contributions Policy": [[378, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[198, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[1000, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[391, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1032, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1031, null]], "BIRCH": [[410, "birch"]], "BNP Paribas Cardif": [[1028, "id29"]], "Bagging meta-estimator": [[417, "bagging-meta-estimator"]], "BaggingClassifier": [[558, null]], "BaggingRegressor": [[559, null]], "Balance model complexity and cross-validated score": [[270, null]], "Balanced accuracy score": [[1004, "balanced-accuracy-score"]], "Ball Tree": [[1007, "ball-tree"]], "BallTree": [[847, null]], "BaseEstimator": [[424, null]], "BaseEstimator and mixins:": [[380, null]], "Basic kernels": [[420, "basic-kernels"]], "Basic shrinkage": [[412, "basic-shrinkage"]], "Bayesian Regression": [[1000, "bayesian-regression"]], "Bayesian Ridge Regression": [[1000, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[193, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[800, null]], "BayesianRidge": [[648, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[352, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1006, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1009, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[842, null]], "BernoulliRBM": [[863, null]], "Bestofmedia Group": [[1028, "id13"]], "BiclusterMixin": [[425, null]], "Biclustering": [[56, null], [183, "biclustering"], [374, "biclustering"], [407, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[407, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[187, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[870, null]], "Binary Case": [[1000, "binary-case"]], "Binary case": [[1004, "binary-case"]], "Binary classification": [[1004, "binary-classification"]], "Birch": [[444, null]], "Birchbox": [[1028, "id12"]], "Bisecting K-Means": [[410, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[445, null]], "BisectingKMeans: divide and cluster": [[324, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[121, null]], "Boil down your script to something as small as possible": [[383, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[159, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1028, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[375, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1004, "brier-score-loss"]], "Brute Force": [[1007, "brute-force"]], "Bug Tracker": [[1027, "bug-tracker"]], "Bug fixes": [[1038, "bug-fixes"], [1038, "id1"], [1038, "id3"], [1039, "bug-fixes"], [1039, "id3"], [1040, "bug-fixes"], [1040, "id3"], [1041, "bug-fixes"], [1041, "id5"], [1042, "bug-fixes"], [1042, "id4"]], "Bug triaging and issue curation": [[377, null]], "Build a pipeline": [[411, "build-a-pipeline"]], "Build dependencies": [[376, "build-dependencies"]], "Build the dataset": [[175, "build-the-dataset"]], "Building a specific version from a tag": [[376, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[386, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[376, "building-from-source"]], "Building the documentation": [[378, "building-the-documentation"]], "Bulk versus Atomic mode": [[365, "bulk-versus-atomic-mode"]], "Bunch": [[922, null]], "CCA": [[484, null]], "CCA (PLS mode B with symmetric deflation)": [[115, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[361, "cv-splitters"], [361, "id3"]], "Caching nearest neighbors": [[293, null]], "Caching transformers within a Pipeline": [[104, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[411, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[439, null]], "Calibrating a classifier": [[408, "calibrating-a-classifier"]], "Calibration": [[60, null], [183, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [408, "calibration-curves"]], "Calibration of the confidence interval": [[146, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[440, null]], "California Housing dataset": [[373, "california-housing-dataset"]], "Calinski-Harabasz Index": [[410, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[115, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[413, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[250, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[143, null]], "Categorical Features Support": [[417, "categorical-features-support"]], "Categorical Naive Bayes": [[1006, "categorical-naive-bayes"]], "CategoricalNB": [[843, null]], "Centering kernel matrices": [[1014, "centering-kernel-matrices"]], "Chain of binary classifiers": [[290, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[378, "change-the-default-value-of-a-parameter"]], "Change.org": [[1028, "id14"]], "Changed displays": [[1051, "changed-displays"]], "Changed models": [[1042, "changed-models"], [1043, "changed-models"], [1043, "id9"], [1043, "id22"], [1044, "changed-models"], [1044, "id6"], [1045, "changed-models"], [1046, "changed-models"], [1046, "id3"], [1047, "changed-models"], [1048, "changed-models"], [1049, "changed-models"], [1049, "id6"], [1050, "changed-models"], [1050, "id7"], [1051, "changed-models"], [1051, "id4"], [1052, "changed-models"], [1052, "id1"], [1053, "changed-models"]], "Changelog": [[1035, "changelog"], [1035, "id1"], [1035, "id3"], [1035, "id6"], [1035, "id9"], [1035, "id12"], [1035, "id14"], [1035, "id16"], [1035, "id18"], [1035, "id19"], [1036, "changelog"], [1036, "id2"], [1037, "changelog"], [1038, "changelog"], [1039, "changelog"], [1039, "id2"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1041, "id1"], [1041, "id3"], [1042, "changelog"], [1042, "id2"], [1043, "changelog"], [1043, "id1"], [1043, "id5"], [1043, "id10"], [1043, "id23"], [1044, "changelog"], [1044, "id1"], [1044, "id2"], [1044, "id7"], [1045, "changelog"], [1045, "id1"], [1045, "id4"], [1046, "changelog"], [1046, "id1"], [1046, "id4"], [1047, "changelog"], [1047, "id1"], [1047, "id4"], [1048, "changelog"], [1048, "id6"], [1049, "changelog"], [1049, "id1"], [1049, "id7"], [1050, "changelog"], [1050, "id1"], [1050, "id9"], [1051, "changelog"], [1051, "id1"], [1051, "id6"], [1052, "changelog"], [1052, "id3"], [1053, "changelog"], [1053, "id2"], [1053, "id6"]], "Changes impacting all modules": [[1050, "changes-impacting-all-modules"], [1050, "id8"], [1051, "changes-impacting-all-modules"], [1051, "id5"], [1052, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1052, "changes-impacting-many-modules"], [1053, "changes-impacting-many-modules"], [1053, "id1"], [1053, "id5"]], "Changes to estimator checks": [[1043, "changes-to-estimator-checks"], [1044, "changes-to-estimator-checks"], [1045, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[386, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[320, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[186, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1002, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[415, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[398, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[392, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[274, null]], "Class likelihood ratios": [[1004, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[426, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [178, "classification"], [183, "classification"], [1000, "classification"], [1007, "id4"], [1008, "classification"], [1018, "classification"], [1019, "classification"], [1020, "classification"]], "Classification and ROC analysis": [[281, "classification-and-roc-analysis"]], "Classification criteria": [[1020, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [1004, "classification-metrics"]], "Classification of text documents using sparse features": [[352, null]], "Classification pipeline": [[102, "classification-pipeline"]], "Classification report": [[1004, "classification-report"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[838, null], [1005, "classifierchain"]], "ClassifierMixin": [[427, null]], "ClassifierTags": [[923, null]], "Clear definition of the public API": [[1045, "clear-definition-of-the-public-api"]], "Cloning": [[380, "cloning"]], "Closing issues: a tough call": [[377, null]], "Cluster centers - MiniBatchKMeans": [[120, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[428, null]], "Clustering": [[71, null], [183, "clustering"], [410, null]], "Clustering evaluation summary": [[353, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[415, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [1004, "clustering-metrics"]], "Clustering performance evaluation": [[410, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[353, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[353, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1039, "code-contributors"], [1040, "code-contributors"], [1041, "code-contributors"], [1041, "id7"]], "Code Review Guidelines": [[378, "code-review-guidelines"]], "Code and Documentation Contributors": [[1042, "code-and-documentation-contributors"], [1042, "id10"], [1043, "code-and-documentation-contributors"], [1043, "id8"], [1043, "id21"], [1043, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[380, "coding-guidelines"]], "Coefficients comparison": [[284, "coefficients-comparison"]], "Cohen\u2019s kappa": [[1004, "cohen-s-kappa"]], "Column Transformer with Heterogeneous Data Sources": [[102, null]], "Column Transformer with Mixed Types": [[103, null]], "ColumnTransformer": [[466, null]], "ColumnTransformer for heterogeneous data": [[411, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[328, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[154, null]], "Combining the display objects into a single plot": [[241, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[378, "commit-message-markers"]], "Common Vectorizer usage": [[418, "common-vectorizer-usage"]], "Common cases: predefined values": [[1004, "common-cases-predefined-values"]], "Common estimator checks": [[406, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[361, null]], "Common pitfalls and subtleties": [[361, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[186, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[242, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare Stochastic learning strategies for MLPClassifier": [[307, null]], "Compare cross decomposition methods": [[115, null]], "Compare different approaches to setting the regularization parameter": [[109, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[311, null]], "Compare times of SVR and Kernel Ridge Regression": [[246, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[164, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[193, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[299, null]], "Comparing QuantileRegressor and LinearRegression": [[215, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[140, null]], "Comparing Target Encoder with Other Encoders": [[317, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[240, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[95, null]], "Comparing random forests and the multi-output meta estimator": [[153, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[279, null]], "Comparing the results": [[191, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[199, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[199, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[271, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[271, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[220, null]], "Comparison between grid search and successive halving": [[282, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[163, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[128, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[233, null]], "Comparison of kernel ridge and Gaussian process regression": [[170, null]], "Comparison of kernel ridge regression and SVR": [[246, null]], "Comparison of results": [[111, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[97, null]], "Comparison with special purpose text vectorizers": [[354, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[1000, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1006, "complement-naive-bayes"]], "ComplementNB": [[844, null]], "Complexity": [[1007, "complexity"], [1008, "complexity"], [1018, "complexity"], [1019, "complexity"], [1020, "complexity"]], "Complexity analysis": [[273, "complexity-analysis"]], "Composite estimators and parameter spaces": [[993, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[615, null]], "Compression via vector quantization": [[86, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1011, "computation-methods"]], "Computation times": [[1025, null]], "Computational Performance": [[365, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[82, "compute-dbscan"]], "Compute clustering": [[81, "compute-clustering"], [100, "compute-clustering"], [100, "id1"]], "Compute clustering with KMeans": [[97, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[96, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[97, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[218, "compute-paths"]], "Compute regularization path": [[206, "compute-regularization-path"]], "Compute score and computation times": [[140, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[109, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[414, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[364, null]], "Concatenating multiple feature extraction methods": [[106, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[256, null]], "Concluding remarks": [[43, "concluding-remarks"], [237, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [202, "conclusion"], [288, "conclusion"], [294, "conclusion"], [318, "conclusion"], [345, "conclusion"]], "Conclusions": [[198, "conclusions"]], "Configuration switches": [[366, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[365, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[264, null], [1004, "confusion-matrix"]], "ConfusionMatrixDisplay": [[700, null]], "Connectivity graph of an image": [[418, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[265, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[616, null]], "Construct the kernel-based regression models": [[246, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[247, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[247, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[410, "contingency-matrix"]], "Continuous Integration (CI)": [[378, "continuous-integration-ci"]], "Contributing": [[378, null], [390, "contributing"]], "Contributing code": [[378, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[393, "contributors"]], "Controlling randomness": [[361, "controlling-randomness"]], "Controlling the tree size": [[417, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[134, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[574, null]], "Core Contributors": [[393, "core-contributors"]], "Cosine similarity": [[1002, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[265, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[265, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[591, null]], "Covariance estimation": [[108, null], [183, "covariance-estimation"], [412, null]], "Coverage error": [[1004, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[383, null]], "Create ConfusionMatrixDisplay": [[241, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[241, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[241, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[318, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[278, "create-multi-label-data-fit-and-predict"]], "Create the data": [[127, "create-the-data"]], "Create the pipeline": [[344, "create-the-pipeline"]], "Creating a dataset": [[345, "creating-a-dataset"]], "Creating a non-noisy data set": [[217, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[134, "creating-the-dataset"]], "Creating transformers": [[102, "creating-transformers"]], "Cross decomposition": [[114, null], [183, "cross-decomposition"], [413, null]], "Cross validation and model selection": [[414, "cross-validation-and-model-selection"]], "Cross validation iterators": [[414, "cross-validation-iterators"]], "Cross validation of time series data": [[414, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[414, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[414, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[414, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[274, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[159, null]], "Cross-validation: evaluating estimator performance": [[414, null]], "Curve Fitting with Bayesian Ridge Regression": [[194, null]], "Custom Kernels": [[1019, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[328, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[269, null]], "Custom transformers": [[1014, "custom-transformers"]], "Customizing the vectorizer classes": [[418, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[379, null]], "DBSCAN": [[410, "dbscan"], [446, null]], "DO NOT report your data unless it is extremely necessary": [[383, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[188, "data-loading-and-feature-engineering"]], "Data Preparation": [[144, "data-preparation"]], "Data Publica": [[1028, "id21"]], "Data and sample properties": [[392, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [82, "data-generation"], [90, "data-generation"], [150, "data-generation"], [167, "data-generation"], [176, "data-generation"], [261, "data-generation"], [330, "data-generation"], [348, "data-generation"]], "Data generation and model fitting": [[141, "data-generation-and-model-fitting"]], "Data leakage": [[361, "data-leakage"]], "Data leakage during pre-processing": [[361, "data-leakage-during-pre-processing"]], "Data loading": [[272, "data-loading"]], "Data preprocessing": [[147, "data-preprocessing"]], "DataConversionWarning": [[575, null]], "DataDimensionalityWarning": [[576, null]], "DataFrame Support": [[1052, "dataframe-support"]], "DataRobot": [[1028, "id18"]], "Dataiku": [[1028, "id25"]], "Dataset": [[62, "dataset"], [202, "dataset"], [277, "dataset"]], "Dataset Versions": [[372, "dataset-versions"]], "Dataset and Gaussian process generation": [[179, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[278, "dataset-and-model"]], "Dataset based latent variables model": [[115, "dataset-based-latent-variables-model"]], "Dataset examples": [[117, null], [183, "dataset-examples"]], "Dataset generation": [[177, "dataset-generation"], [215, "dataset-generation"]], "Dataset loading utilities": [[371, null], [383, "dataset-loading-utilities"]], "Dataset preparation": [[120, "dataset-preparation"], [233, "dataset-preparation"]], "Dataset preprocessing and model training": [[250, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[370, null]], "Datasets in svmlight / libsvm format": [[372, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[410, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[396, "debian-ubuntu"]], "Debugging CI issues": [[386, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[386, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[393, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[245, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[358, null]], "Decision Tree Regression with AdaBoost": [[135, null]], "Decision Trees": [[183, "decision-trees"], [355, null], [1020, null]], "Decision boundary": [[294, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[335, null]], "Decision path": [[360, "decision-path"]], "DecisionBoundaryDisplay": [[634, null]], "DecisionTreeClassifier": [[915, null]], "DecisionTreeRegressor": [[916, null]], "Decoding text files": [[418, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[415, null]], "Decomposition": [[119, null], [120, "decomposition"], [183, "decomposition"]], "Decomposition: Dictionary learning": [[120, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[266, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[233, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[91, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[269, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[354, "define-preprocessing-functions"]], "Define structure of the data": [[81, "define-structure-of-the-data"]], "Define the classifiers": [[268, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1004, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[82, null]], "Demo of HDBSCAN clustering algorithm": [[88, null]], "Demo of OPTICS clustering algorithm": [[98, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[314, null]], "Demonstration of k-means assumptions": [[90, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[275, null]], "Density Estimation": [[416, null]], "Density Estimation for a Gaussian mixture": [[260, null]], "Density Estimation: Histograms": [[416, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1019, "density-estimation-novelty-detection"]], "DensityMixin": [[429, null]], "Dependencies": [[376, "dependencies"]], "Deprecation": [[378, "deprecation"]], "Deprecation / Default Value Change": [[247, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1045, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[185, "description-of-the-simulated-data"]], "Design the proper kernel": [[175, "design-the-proper-kernel"]], "DetCurveDisplay": [[701, null]], "Detection error tradeoff (DET)": [[1004, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[268, null]], "Developer API for HTML representation": [[380, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[380, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[380, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[386, null]], "Developer\u2019s Guide": [[381, null]], "Developing Estimators": [[131, null], [183, "developing-estimators"]], "Developing scikit-learn estimators": [[380, null]], "Developing with the Plotting API": [[385, null]], "Diabetes dataset": [[375, "diabetes-dataset"]], "DictVectorizer": [[354, "dictvectorizer"], [584, null]], "Dictionary Learning": [[415, "dictionary-learning"]], "Dictionary learning": [[120, "dictionary-learning"]], "Dictionary learning - positive code": [[120, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[120, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[120, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[534, null]], "Differences between solvers": [[1000, "differences-between-solvers"]], "Different label assignment strategies": [[410, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[410, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[380, "different-objects"]], "Different scenario and useful concepts": [[1000, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[401, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[160, null]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[300, null]], "Dimensionality reduction": [[1007, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[998, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1014, "discretization"]], "Dispatching": [[388, null]], "Display Objects": [[1032, "display-objects"]], "Display code coverage in pull requests": [[386, "display-code-coverage-in-pull-requests"]], "Display results": [[218, "display-results"]], "Display the distorted image": [[123, "display-the-distorted-image"]], "Displaying Pipelines": [[252, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[252, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[252, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[252, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[252, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[252, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[242, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[702, null]], "Do you plan to implement transform for target y in a pipeline?": [[390, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[390, "do-you-support-pypy"]], "Documentation": [[378, "documentation"], [1035, "documentation"]], "Documentation Resources": [[1027, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1038, "documentation-improvements"], [1039, "documentation-improvements"]], "Does scikit-learn work natively with various types of dataframes?": [[390, "does-scikit-learn-work-natively-with-various-types-of-dataframes"]], "Domain specific packages": [[1023, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[420, "dot-product-kernel"]], "Dot-product kernel": [[179, "dot-product-kernel"]], "DotProduct": [[617, null]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[182, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[154, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[372, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null]], "Dummy estimators": [[1004, "dummy-estimators"]], "DummyClassifier": [[554, null]], "DummyRegressor": [[555, null]], "D\u00b2 score": [[1004, "d2-score"]], "D\u00b2 score for classification": [[1004, "d2-score-for-classification"]], "Earlier versions": [[1035, "earlier-versions"]], "Early stopping in Gradient Boosting": [[144, null]], "Early stopping of Stochastic Gradient Descent": [[221, null]], "Effect of model regularization on training and test error": [[284, null]], "Effect of number of trees and early stopping": [[149, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[316, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[316, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[316, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[107, null]], "Effect of varying threshold for self-training": [[333, null]], "EfficiencyWarning": [[577, null]], "Efficient Linear Algebra & Array Operations": [[387, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[387, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[387, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[120, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[1000, "elastic-net"]], "ElasticNet": [[198, "elasticnet"], [649, null]], "ElasticNetCV": [[650, null]], "EllipticEnvelope": [[471, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[234, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[412, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[94, null]], "Empirical validation": [[244, "empirical-validation"]], "EmpiricalCovariance": [[472, null]], "Encoding categorical features": [[1014, "encoding-categorical-features"]], "Encoding strategy": [[86, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1046, "enforcing-keyword-only-arguments"], [1048, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[393, "enhancement-proposals-sleps"]], "Enhancements": [[1038, "enhancements"], [1039, "enhancements"], [1040, "enhancements"], [1041, "enhancements"], [1041, "id4"], [1042, "enhancements"], [1042, "id3"]], "Enriched estimator displays": [[327, "enriched-estimator-displays"]], "Ensemble methods": [[133, null], [183, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[417, null]], "Environment variables": [[366, "environment-variables"]], "Error Calculation": [[144, "error-calculation"]], "Error caused by file path length limit on Windows": [[396, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[134, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[191, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[97, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[191, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[191, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[113, "estimate-the-covariance"]], "Estimate the score": [[182, "estimate-the-score"]], "Estimated Attributes": [[380, "estimated-attributes"]], "Estimation algorithms": [[998, "estimation-algorithms"]], "Estimator Tags": [[380, "estimator-tags"]], "Estimator types": [[380, "estimator-types"]], "Estimators": [[361, "estimators"], [361, "id2"], [380, "estimators"], [406, "estimators"]], "Estimators that handle NaN values": [[994, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[284, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[112, "evaluation"], [309, "evaluation"]], "Evaluation metrics": [[265, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[250, null]], "Evaluation of the calibration of predictions": [[213, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[213, "evaluation-of-the-ranking-power"]], "Evernote": [[1028, "id6"]], "Exact Kernel PCA": [[415, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[415, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[406, "example-usage"]], "Example with noise-free target": [[177, "example-with-noise-free-target"]], "Example with noisy targets": [[177, "example-with-noisy-targets"]], "Examples": [[183, null], [367, "examples"], [409, "examples"], [1035, "examples"]], "Examples based on real world datasets": [[42, null], [183, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[993, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[179, "exp-sine-squared-kernel"], [420, "exp-sine-squared-kernel"]], "ExpSineSquared": [[618, null]], "Experimental / Under Development": [[1051, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[325, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[382, "experimental-features"]], "Explained variance score": [[1004, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[245, null]], "Exponentiation": [[619, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1022, null]], "External Tutorials": [[1022, "external-tutorials"]], "External dependencies": [[1035, "external-dependencies"]], "ExtraTreeClassifier": [[917, null]], "ExtraTreeRegressor": [[918, null]], "ExtraTreesClassifier": [[560, null]], "ExtraTreesRegressor": [[561, null]], "Extract noisy patches and reconstruct them using the dictionary": [[123, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[123, "extract-reference-patches"]], "Extracting features": [[367, "extracting-features"]], "Extremely Randomized Trees": [[417, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[249, null]], "Faces dataset decompositions": [[120, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[415, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[130, null]], "Factor Analysis components - FA": [[120, "factor-analysis-components-fa"]], "FactorAnalysis": [[535, null]], "Failure of Machine Learning to infer causal effects": [[185, null]], "FastICA": [[536, null]], "FastICA on 2D point clouds": [[122, null]], "Faster parser in fetch_openml": [[325, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[365, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[353, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[323, "feature-names-support"]], "Feature Selection": [[162, null], [183, "feature-selection"]], "Feature agglomeration": [[84, null], [1021, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[87, null]], "Feature binarization": [[1014, "feature-binarization"]], "Feature discretization": [[313, null]], "Feature extraction": [[418, null]], "Feature hashing": [[418, "feature-hashing"]], "Feature importance based on feature permutation": [[141, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[141, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance evaluation": [[417, "feature-importance-evaluation"]], "Feature importance from coefficients": [[168, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[141, null]], "Feature normalization": [[191, "feature-normalization"]], "Feature scaling": [[1021, null]], "Feature selection": [[419, null]], "Feature selection as part of a pipeline": [[419, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[419, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[419, null]], "Feature transformations with ensembles of trees": [[139, null]], "FeatureAgglomeration": [[410, null], [447, null]], "FeatureHasher": [[354, "featurehasher"], [585, null]], "FeatureHasher and DictVectorizer Comparison": [[354, null]], "FeatureUnion": [[866, null]], "FeatureUnion: composite feature spaces": [[411, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[149, null]], "Fedora": [[396, "fedora"]], "Final conclusion": [[170, "final-conclusion"]], "Final remarks": [[90, "final-remarks"]], "Finding the Nearest Neighbors": [[1007, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[121, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[194, "fit-by-cubic-polynomial"]], "Fit models": [[207, "fit-models"], [290, "fit-models"]], "Fit models and plot results": [[90, "fit-models-and-plot-results"]], "Fit regression model": [[147, "fit-regression-model"], [303, "fit-regression-model"], [347, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[298, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[127, "fit-the-models"]], "Fit the regressors": [[193, "fit-the-regressors"], [193, "id2"]], "FitFailedWarning": [[578, null]], "Fitting": [[380, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[215, "fitting-a-quantileregressor"]], "Fitting additional trees": [[417, "fitting-additional-trees"]], "Fitting additional weak-learners": [[417, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[195, null]], "Fitting an elliptic envelope": [[1010, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[391, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[146, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1048, "fixed-models"]], "FixedThresholdClassifier": [[802, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[328, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1035, "fixes"]], "Flexibility of IterativeImputer": [[994, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[386, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[175, null]], "Forest covertypes": [[373, "forest-covertypes"]], "Forest covertypes dataset": [[250, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[410, "fowlkes-mallows-scores"]], "FreeBSD": [[376, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[231, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[390, null]], "From binary to multiclass and multilabel": [[1004, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[377, null]], "FunctionTransformer": [[871, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[259, null]], "GMM covariances": [[258, null]], "GPC examples": [[420, "gpc-examples"]], "Gallery examples": [[424, "gallery-examples"], [427, "gallery-examples"], [430, "gallery-examples"], [433, "gallery-examples"], [434, "gallery-examples"], [439, "gallery-examples"], [440, "gallery-examples"], [442, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [457, "gallery-examples"], [460, "gallery-examples"], [462, "gallery-examples"], [464, "gallery-examples"], [466, "gallery-examples"], [467, "gallery-examples"], [468, "gallery-examples"], [469, "gallery-examples"], [470, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [477, "gallery-examples"], [478, "gallery-examples"], [479, "gallery-examples"], [481, "gallery-examples"], [484, "gallery-examples"], [485, "gallery-examples"], [486, "gallery-examples"], [490, "gallery-examples"], [491, "gallery-examples"], [492, "gallery-examples"], [493, "gallery-examples"], [494, "gallery-examples"], [495, "gallery-examples"], [497, "gallery-examples"], [498, "gallery-examples"], [499, "gallery-examples"], [501, "gallery-examples"], [502, "gallery-examples"], [503, "gallery-examples"], [504, "gallery-examples"], [505, "gallery-examples"], [507, "gallery-examples"], [513, "gallery-examples"], [514, "gallery-examples"], [515, "gallery-examples"], [516, "gallery-examples"], [517, "gallery-examples"], [518, "gallery-examples"], [522, "gallery-examples"], [523, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [530, "gallery-examples"], [533, "gallery-examples"], [535, "gallery-examples"], [536, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [547, "gallery-examples"], [552, "gallery-examples"], [553, "gallery-examples"], [554, "gallery-examples"], [555, "gallery-examples"], [556, "gallery-examples"], [557, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [573, "gallery-examples"], [584, "gallery-examples"], [585, "gallery-examples"], [587, "gallery-examples"], [590, "gallery-examples"], [591, "gallery-examples"], [592, "gallery-examples"], [593, "gallery-examples"], [594, "gallery-examples"], [596, "gallery-examples"], [597, "gallery-examples"], [600, "gallery-examples"], [602, "gallery-examples"], [603, "gallery-examples"], [605, "gallery-examples"], [607, "gallery-examples"], [608, "gallery-examples"], [609, "gallery-examples"], [610, "gallery-examples"], [611, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [616, "gallery-examples"], [617, "gallery-examples"], [618, "gallery-examples"], [620, "gallery-examples"], [621, "gallery-examples"], [622, "gallery-examples"], [625, "gallery-examples"], [626, "gallery-examples"], [628, "gallery-examples"], [630, "gallery-examples"], [631, "gallery-examples"], [633, "gallery-examples"], [634, "gallery-examples"], [635, "gallery-examples"], [636, "gallery-examples"], [637, "gallery-examples"], [638, "gallery-examples"], [642, "gallery-examples"], [643, "gallery-examples"], [644, "gallery-examples"], [646, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [655, "gallery-examples"], [656, "gallery-examples"], [658, "gallery-examples"], [659, "gallery-examples"], [660, "gallery-examples"], [661, "gallery-examples"], [662, "gallery-examples"], [665, "gallery-examples"], [667, "gallery-examples"], [668, "gallery-examples"], [669, "gallery-examples"], [671, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [687, "gallery-examples"], [691, "gallery-examples"], [692, "gallery-examples"], [693, "gallery-examples"], [694, "gallery-examples"], [695, "gallery-examples"], [696, "gallery-examples"], [700, "gallery-examples"], [701, "gallery-examples"], [703, "gallery-examples"], [704, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [712, "gallery-examples"], [715, "gallery-examples"], [716, "gallery-examples"], [720, "gallery-examples"], [721, "gallery-examples"], [722, "gallery-examples"], [730, "gallery-examples"], [732, "gallery-examples"], [735, "gallery-examples"], [737, "gallery-examples"], [738, "gallery-examples"], [740, "gallery-examples"], [741, "gallery-examples"], [744, "gallery-examples"], [745, "gallery-examples"], [748, "gallery-examples"], [749, "gallery-examples"], [751, "gallery-examples"], [752, "gallery-examples"], [753, "gallery-examples"], [755, "gallery-examples"], [756, "gallery-examples"], [758, "gallery-examples"], [760, "gallery-examples"], [764, "gallery-examples"], [781, "gallery-examples"], [782, "gallery-examples"], [785, "gallery-examples"], [787, "gallery-examples"], [788, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [791, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [795, "gallery-examples"], [796, "gallery-examples"], [798, "gallery-examples"], [800, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [817, "gallery-examples"], [818, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [840, "gallery-examples"], [842, "gallery-examples"], [844, "gallery-examples"], [845, "gallery-examples"], [846, "gallery-examples"], [849, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [860, "gallery-examples"], [863, "gallery-examples"], [864, "gallery-examples"], [865, "gallery-examples"], [866, "gallery-examples"], [867, "gallery-examples"], [868, "gallery-examples"], [871, "gallery-examples"], [872, "gallery-examples"], [874, "gallery-examples"], [876, "gallery-examples"], [877, "gallery-examples"], [879, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [891, "gallery-examples"], [893, "gallery-examples"], [896, "gallery-examples"], [900, "gallery-examples"], [901, "gallery-examples"], [903, "gallery-examples"], [904, "gallery-examples"], [905, "gallery-examples"], [907, "gallery-examples"], [910, "gallery-examples"], [911, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [914, "gallery-examples"], [915, "gallery-examples"], [916, "gallery-examples"], [921, "gallery-examples"], [922, "gallery-examples"], [936, "gallery-examples"], [946, "gallery-examples"], [948, "gallery-examples"], [955, "gallery-examples"], [960, "gallery-examples"], [961, "gallery-examples"], [962, "gallery-examples"], [963, "gallery-examples"], [964, "gallery-examples"], [977, "gallery-examples"], [987, "gallery-examples"]], "Gamma loss for gradient boosting": [[326, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[651, null]], "Gaussian Mixture": [[1003, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[257, null]], "Gaussian Mixture Model Selection": [[261, null]], "Gaussian Mixture Model Sine Curve": [[262, null]], "Gaussian Mixture Models": [[183, "gaussian-mixture-models"], [255, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1006, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[420, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[420, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[169, null], [183, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[420, null]], "Gaussian Processes regression: basic introductory example": [[177, null]], "Gaussian mixture models": [[1003, null]], "Gaussian process classification (GPC) on iris dataset": [[172, null], [420, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[170, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[178, null]], "Gaussian random projection": [[1016, "gaussian-random-projection"]], "GaussianMixture": [[801, null]], "GaussianNB": [[845, null]], "GaussianProcessClassifier": [[613, null]], "GaussianProcessRegressor": [[614, null]], "GaussianRandomProjection": [[899, null]], "General Concepts": [[392, "general-concepts"]], "General recommendations": [[361, "general-recommendations"]], "Generalized Linear Models": [[183, "generalized-linear-models"], [192, null], [1000, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[321, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[81, "generate-data"], [100, "generate-data"], [111, "generate-data"], [207, "generate-data"], [309, "generate-data"]], "Generate data with outliers": [[298, "generate-data-with-outliers"]], "Generate distorted image": [[123, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [88, "generate-sample-data"], [96, "generate-sample-data"], [109, "generate-sample-data"], [121, "generate-sample-data"], [122, "generate-sample-data"], [164, "generate-sample-data"], [246, "generate-sample-data"], [284, "generate-sample-data"], [303, "generate-sample-data"], [347, "generate-sample-data"]], "Generate sinusoidal data with noise": [[194, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[268, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [193, "generate-synthetic-dataset"], [193, "id1"], [198, "generate-synthetic-dataset"]], "Generate the data": [[97, "generate-the-data"], [99, "generate-the-data"], [113, "generate-the-data"]], "Generated datasets": [[374, null]], "Generated documentation on GitHub Actions": [[378, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[170, "generating-a-dataset"]], "Generating polynomial features": [[1014, "generating-polynomial-features"]], "Generators for classification and clustering": [[374, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[374, "generators-for-decomposition"]], "Generators for manifold learning": [[374, "generators-for-manifold-learning"]], "Generators for regression": [[374, "generators-for-regression"]], "Generic dictionary learning": [[415, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[595, null]], "Getting Started": [[391, null]], "Getting reproducible results across multiple executions": [[361, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1027, "gitter"]], "Glossary of Common Terms and API Elements": [[392, null]], "Good practices": [[383, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[393, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[145, null]], "Gradient Boosting Regression Trees for Poisson regression": [[213, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[147, null]], "Gradient Boosting regularization": [[148, null]], "Gradient boosting": [[187, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[143, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[143, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[143, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[143, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[417, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[562, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[417, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[417, null]], "GradientBoostingRegressor": [[563, null]], "Graph Routines": [[387, "graph-routines"]], "Graphical model and parametrization": [[1009, "graphical-model-and-parametrization"]], "GraphicalLasso": [[473, null]], "GraphicalLassoCV": [[474, null]], "GridSearchCV": [[803, null]], "Group Shuffle Split": [[414, "group-shuffle-split"]], "Group k-fold": [[414, "group-k-fold"]], "GroupKFold": [[804, null]], "GroupShuffleSplit": [[805, null]], "Grouping infrequent categories in OneHotEncoder": [[324, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[326, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[410, "hdbscan"], [448, null]], "HDBSCAN: hierarchical density-based clustering": [[326, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[806, null]], "HalvingRandomSearchCV": [[807, null]], "Hamming loss": [[1004, "hamming-loss"]], "Handling Multicollinear Features": [[189, "handling-multicollinear-features"]], "Hash Functions": [[387, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[152, null]], "HashingVectorizer": [[353, "hashingvectorizer"], [592, null]], "Helper Functions": [[387, "helper-functions"]], "Helper function": [[179, "helper-function"]], "Helper function to plot embedding": [[234, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[1001, "hessian-eigenmapping"]], "Hierarchical Clustering": [[410, "id11"]], "Hierarchical clustering": [[410, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[100, null]], "Higher-level parallelism with joblib": [[366, "higher-level-parallelism-with-joblib"]], "Highlights": [[1035, "highlights"], [1038, "highlights"], [1039, "highlights"], [1042, "highlights"], [1043, "highlights"]], "Hinge loss": [[1004, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[327, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[564, null]], "HistGradientBoostingRegressor": [[565, null]], "Histogram-Based Gradient Boosting": [[417, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[323, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[410, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[390, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[390, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[390, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[390, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[390, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[390, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[390, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[390, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[361, "how-to-avoid-data-leakage"]], "How to contribute": [[378, "how-to-contribute"]], "How to make a good bug report": [[378, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[384, null]], "HowAboutWe": [[1028, "id16"]], "Huber Regression": [[1000, "huber-regression"]], "HuberRegressor": [[652, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[196, null]], "Hugging Face": [[1028, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[620, null]], "Hyperparameter Robustness": [[88, "hyperparameter-robustness"]], "ICE vs. PDP": [[187, "ice-vs-pdp"]], "INFONEA": [[1028, "id24"]], "Illustration of GPC on the XOR dataset": [[420, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[174, null]], "Illustration of Pipeline and GridSearchCV": [[104, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[179, null]], "Image denoising using dictionary learning": [[123, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[418, "image-feature-extraction"]], "Implementation": [[1007, "implementation"]], "Implementation decisions": [[390, "implementation-decisions"]], "Implementation details": [[1018, "implementation-details"], [1019, "implementation-details"]], "Implementing your own scoring object": [[1004, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[316, null]], "Important notes regarding the internal cross-validation": [[409, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[325, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[327, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[322, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[321, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[994, null], [1014, "imputation-of-missing-values"]], "Impute missing values with mean": [[182, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[182, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[182, null]], "Imputing missing values with variants of IterativeImputer": [[181, null]], "In binary classification settings": [[278, "in-binary-classification-settings"]], "In multi-label settings": [[278, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[185, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[185, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[361, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[579, null]], "Incremental PCA": [[124, null], [415, "incremental-pca"]], "Incremental learning": [[367, "incremental-learning"]], "IncrementalPCA": [[537, null]], "Independent component analysis (ICA)": [[415, "independent-component-analysis-ica"]], "Independent components - FastICA": [[120, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[322, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1011, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[89, null]], "Influence of the Input Data Representation": [[365, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[365, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[365, "influence-of-the-number-of-features"]], "Information Criterion": [[993, "information-criterion"]], "Information-criteria based model selection": [[1000, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1014, "infrequent-categories"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[410, null]], "Input validation": [[380, "input-validation"]], "InputTags": [[924, null]], "Inria": [[1028, "id3"]], "Inspection": [[183, "inspection"], [184, null], [395, null]], "Installing nightly builds": [[376, "installing-nightly-builds"]], "Installing scikit-learn": [[396, null]], "Installing the development version of scikit-learn": [[376, null]], "Installing the latest release": [[396, "installing-the-latest-release"]], "Instantiation": [[380, "instantiation"]], "Intel Extension for Scikit-learn": [[396, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[417, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[325, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1023, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[175, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[417, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[186, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[186, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[217, "interpreting-the-plots"]], "Introducing the set_output API": [[254, null]], "Introduction": [[1001, "introduction"]], "Invariance with respect to prevalence": [[274, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1016, "inverse-transform"]], "Iris plants dataset": [[375, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[173, null]], "Isolation Forest": [[1010, "isolation-forest"]], "IsolationForest": [[566, null]], "IsolationForest example": [[150, null]], "Isomap": [[691, null], [1001, "isomap"]], "Isomap Embedding": [[233, "isomap-embedding"]], "Isotonic": [[408, "isotonic"]], "Isotonic Regression": [[243, null]], "Isotonic regression": [[995, null]], "IsotonicRegression": [[638, null]], "Issue Tracker Tags": [[378, "issue-tracker-tags"]], "Issues for New Contributors": [[378, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[182, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[630, null]], "J.P.Morgan": [[1028, "id1"]], "Jaccard similarity coefficient score": [[1004, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[207, null]], "K-D Tree": [[1007, "k-d-tree"]], "K-bins discretization": [[1014, "k-bins-discretization"]], "K-fold": [[414, "k-fold"]], "K-means": [[410, "k-means"]], "K-means clustering on text features": [[353, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[294, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[872, null]], "KDDCup99 - SA dataset": [[250, "kddcup99-sa-dataset"]], "KDTree": [[848, null]], "KDTree and BallTree Classes": [[1007, "kdtree-and-balltree-classes"]], "KFold": [[808, null]], "KMeans": [[449, null]], "KNN Based Imputation": [[320, "knn-based-imputation"]], "KNNImputer": [[631, null]], "KNeighborsClassifier": [[849, null]], "KNeighborsRegressor": [[850, null]], "KNeighborsTransformer": [[851, null]], "Kddcup 99 dataset": [[373, "kddcup-99-dataset"]], "Keeping the number of features constant": [[994, "keeping-the-number-of-features-constant"]], "Kernel": [[621, null]], "Kernel Approximation": [[183, "kernel-approximation"], [190, null], [996, null]], "Kernel Density Estimate of Species Distributions": [[304, null]], "Kernel Density Estimation": [[295, null], [416, "kernel-density-estimation"]], "Kernel PCA": [[125, null]], "Kernel Principal Component Analysis (kPCA)": [[415, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[179, "kernel-cookbook"]], "Kernel functions": [[1019, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[170, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[420, "kernel-operators"]], "Kernel ridge": [[170, "kernel-ridge"]], "Kernel ridge regression": [[997, null]], "KernelCenterer": [[873, null]], "KernelDensity": [[852, null]], "KernelPCA": [[538, null]], "KernelRidge": [[646, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[420, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[323, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1043, "known-major-bugs"], [1044, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[204, null]], "L1-based feature selection": [[419, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[198, null]], "L1-penalty case": [[348, "l1-penalty-case"]], "L2-penalty case": [[348, "l2-penalty-case"]], "LARS Lasso": [[1000, "lars-lasso"]], "LDA": [[998, "lda"]], "Label Propagation": [[1017, "label-propagation"]], "Label Propagation digits active learning": [[331, null]], "Label Propagation digits: Demonstrating performance": [[330, null]], "Label Propagation learning a complex structure": [[332, null]], "Label binarization": [[1015, "label-binarization"]], "Label encoding": [[1015, "label-encoding"]], "Label ranking average precision": [[1004, "label-ranking-average-precision"]], "LabelBinarizer": [[874, null], [1015, "labelbinarizer"]], "LabelEncoder": [[875, null]], "LabelPropagation": [[902, null]], "LabelSpreading": [[903, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[1002, "laplacian-kernel"]], "Lars": [[653, null]], "LarsCV": [[654, null]], "Lasso": [[198, "lasso"], [655, null], [1000, "lasso"]], "Lasso model selection via information criteria": [[200, null]], "Lasso model selection: AIC-BIC / cross-validation": [[202, null]], "Lasso on dense and sparse data": [[199, null]], "Lasso via coordinate descent": [[202, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[202, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[201, null]], "LassoCV": [[656, null]], "LassoLars": [[657, null]], "LassoLarsCV": [[658, null]], "LassoLarsIC": [[659, null]], "Latent Dirichlet Allocation (LDA)": [[415, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[539, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[123, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[83, "learn-the-dictionary-of-images"]], "Learning Curve": [[273, "learning-curve"]], "Learning Git": [[378, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[301, "learning-an-embedding"]], "Learning curve": [[999, "learning-curve"]], "LearningCurveDisplay": [[809, null]], "Least Angle Regression": [[1000, "least-angle-regression"]], "Leave One Group Out": [[414, "leave-one-group-out"]], "Leave One Out (LOO)": [[414, "leave-one-out-loo"]], "Leave P Groups Out": [[414, "leave-p-groups-out"]], "Leave P Out (LPO)": [[414, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[810, null]], "LeaveOneOut": [[811, null]], "LeavePGroupsOut": [[812, null]], "LeavePOut": [[813, null]], "Ledoit-Wolf shrinkage": [[412, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[110, null]], "LedoitWolf": [[475, null]], "Lessons learned": [[185, "lessons-learned"], [186, "lessons-learned"]], "Limitations of a simple linear model": [[170, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[418, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[365, "limiting-working-memory"]], "Limiting the number of splits": [[143, "limiting-the-number-of-splits"]], "Linear Models": [[1000, null]], "Linear Regression Example": [[209, null]], "Linear algebra libraries": [[365, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[998, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[345, "linear-kernel"], [1002, "linear-kernel"]], "Linear models with regularization": [[186, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[186, "linear-models-with-sparse-coefficients"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[552, null]], "LinearRegression": [[660, null]], "LinearSVC": [[907, null]], "LinearSVR": [[908, null]], "Link to R\u00b2 score, the coefficient of determination": [[1004, null]], "Links": [[365, "links"]], "Linnerrud dataset": [[375, "linnerrud-dataset"]], "Linux": [[376, "linux"]], "Linux compilers from conda-forge": [[376, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[376, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[143, "load-ames-housing-dataset"]], "Load Data": [[354, "load-data"]], "Load Data and Train a SVC": [[253, "load-data-and-train-a-svc"]], "Load Data and train model": [[241, "load-data-and-train-model"]], "Load and prepare data": [[280, "load-and-prepare-data"], [281, "load-and-prepare-data"], [316, "load-and-prepare-data"]], "Load and prepare data set": [[341, "load-and-prepare-data-set"]], "Load data": [[206, "load-data"]], "Load dataset": [[140, "load-dataset"]], "Load dataset and apply GridSearchCV": [[159, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[234, "load-digits-dataset"]], "Load some data to play with": [[344, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [83, "load-the-data"], [147, "load-the-data"], [294, "load-the-data"]], "Load the dataset": [[91, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[317, "loading-data-from-openml"]], "Loading a dataset": [[290, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[352, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[231, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[418, "loading-features-from-dicts"]], "Loading from external datasets": [[372, "loading-from-external-datasets"]], "Loading other datasets": [[372, null]], "Loading text data": [[353, "loading-text-data"]], "Loading the Iris dataset": [[126, "loading-the-iris-dataset"]], "Loading the data": [[168, "loading-the-data"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1010, "local-outlier-factor"]], "Local Tangent Space Alignment": [[1001, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[853, null]], "Locally Linear Embedding": [[1001, "locally-linear-embedding"]], "Locally Linear Embeddings": [[233, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[692, null]], "Lock files": [[378, "lock-files"]], "Log loss": [[1004, "log-loss"]], "Logistic Regression 3-class Classifier": [[197, null]], "Logistic function": [[203, null]], "Logistic regression": [[1000, "logistic-regression"]], "LogisticRegression": [[661, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[290, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[662, null]], "Look at the results": [[246, "look-at-the-results"], [347, "look-at-the-results"]], "Loss Functions": [[417, "loss-functions"]], "Lovely": [[1028, "id20"]], "Low-level parallelism": [[410, "low-level-parallelism"], [417, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[366, "lower-level-parallelism-with-openmp"]], "MARS": [[1028, "id28"]], "MDS": [[693, null]], "MLPClassifier": [[864, null]], "MLPRegressor": [[865, null]], "MNIST classification using multinomial logistic + L1": [[229, null]], "MacPorts for Mac OSX": [[396, "macports-for-mac-osx"]], "Machinalis": [[1028, "id22"]], "Mailing Lists": [[1027, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[213, "main-takeaways"]], "Maintainer Information": [[382, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[378, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[417, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[154, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[157, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[235, null]], "Manifold learning": [[183, "manifold-learning"], [232, null], [1001, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[234, null]], "Manually setting the decision threshold": [[409, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[265, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[315, null]], "Mapping to a Gaussian distribution": [[1014, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1014, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[994, "marking-imputed-values"]], "Matern": [[622, null]], "Mathematical Definition": [[1011, "mathematical-definition"]], "Mathematical Details": [[996, "mathematical-details"]], "Mathematical formulation": [[407, "mathematical-formulation"], [407, "id3"], [417, "mathematical-formulation"], [1007, "mathematical-formulation"], [1018, "mathematical-formulation"], [1019, "mathematical-formulation"], [1020, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[998, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[998, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1004, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[179, "matern-kernel"], [420, "matern-kernel"]], "Max error": [[1004, "max-error"]], "MaxAbsScaler": [[311, "maxabsscaler"], [876, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1004, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[410, "mean-shift"]], "Mean absolute error": [[1004, "mean-absolute-error"]], "Mean absolute percentage error": [[1004, "mean-absolute-percentage-error"]], "Mean squared error": [[1004, "mean-squared-error"]], "Mean squared logarithmic error": [[1004, "mean-squared-logarithmic-error"]], "MeanShift": [[450, null]], "Measure and plot the results": [[154, "measure-and-plot-the-results"]], "Median absolute error": [[1004, "median-absolute-error"]], "Memory footprint": [[86, "memory-footprint"]], "Memory usage profiling": [[384, "memory-usage-profiling"]], "Merging Pull Requests": [[382, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [406, "meta-estimators"]], "MetaEstimatorMixin": [[430, null]], "Metadata Routing": [[247, null], [326, "metadata-routing"], [392, "metadata-routing"], [401, null], [1052, "metadata-routing"], [1052, "id2"], [1053, "metadata-routing"]], "Metadata Routing Support": [[327, "metadata-routing-support"]], "Metadata Routing Support Status": [[401, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[959, null]], "MetadataRouter": [[960, null]], "MethodMapping": [[961, null]], "Methods": [[392, "methods"]], "Metrics": [[406, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1004, null]], "MinCovDet": [[476, null]], "MinMaxScaler": [[311, "minmaxscaler"], [877, null]], "Mini Batch K-Means": [[410, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[415, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[415, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[540, null]], "MiniBatchKMeans": [[451, null]], "MiniBatchNMF": [[541, null]], "MiniBatchNMF: an online version of NMF": [[324, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[542, null]], "Minimal Cost-Complexity Pruning": [[1020, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1048, "minimal-dependencies"], [1049, "minimal-dependencies"]], "Minimum Covariance Determinant": [[412, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[112, "minimum-covariance-determinant-estimator"]], "Misc": [[1035, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [183, "miscellaneous"], [239, null], [1043, "miscellaneous"], [1043, "id40"], [1044, "miscellaneous"], [1045, "miscellaneous"], [1046, "miscellaneous"], [1046, "id13"], [1047, "miscellaneous"], [1048, "miscellaneous"], [1051, "miscellaneous"]], "Misleading values on strongly correlated features": [[1012, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[180, null], [183, "missing-value-imputation"]], "Missing Values Support": [[1020, "missing-values-support"]], "Missing information": [[182, "missing-information"]], "Missing value support for Random Forest": [[327, "missing-value-support-for-random-forest"]], "Missing values support": [[417, "missing-values-support"]], "Missing values support in decision trees": [[326, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[632, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[365, "model-compression"]], "Model Reshaping": [[365, "model-reshaping"]], "Model Selection": [[183, "model-selection"], [263, null]], "Model Selection Enhancements and API Changes": [[1041, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[144, "model-training-and-comparison"]], "Model comparison": [[143, "model-comparison"]], "Model definition": [[284, "model-definition"]], "Model evaluation": [[391, "model-evaluation"]], "Model fitting and extrapolation": [[175, "model-fitting-and-extrapolation"]], "Model persistence": [[404, null]], "Model selection and evaluation": [[405, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[127, null]], "Model selection: development and evaluation": [[993, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[993, "model-specific-cross-validation"]], "Model training and selection": [[167, "model-training-and-selection"], [261, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[352, "model-with-metadata-stripping"]], "Model without metadata stripping": [[352, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[168, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[309, "models-definition"]], "Models robustness to recover the ground truth weights": [[193, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[1001, "modified-locally-linear-embedding"]], "Monitoring performance": [[378, "monitoring-performance"]], "Monotonic Constraints": [[151, null], [417, "monotonic-constraints"]], "Monotonic constraints": [[149, "monotonic-constraints"]], "More control with warm_start": [[1008, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[88, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[134, null]], "Multi-class case": [[1004, "multi-class-case"]], "Multi-class classification": [[1019, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[384, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[1001, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[236, null]], "Multi-label case": [[1004, "multi-label-case"]], "Multi-label confusion matrix": [[1004, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1008, "multi-layer-perceptron"]], "Multi-layer perceptron": [[187, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[359, null]], "Multi-output problems": [[1020, "multi-output-problems"]], "Multi-task Elastic-Net": [[1000, "multi-task-elastic-net"]], "Multi-task Lasso": [[1000, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[878, null], [1015, "multilabelbinarizer"]], "MultiOutputClassifier": [[839, null], [1005, "multioutputclassifier"]], "MultiOutputRegressor": [[840, null], [1005, "multioutputregressor"]], "MultiTaskElasticNet": [[663, null]], "MultiTaskElasticNetCV": [[664, null]], "MultiTaskLasso": [[665, null]], "MultiTaskLassoCV": [[666, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[280, null]], "Multiclass and multilabel classification": [[1004, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[387, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1005, null]], "Multiclass classification": [[1005, "multiclass-classification"]], "Multiclass methods": [[183, "multiclass-methods"], [287, null]], "Multiclass sparse logistic regression on 20newgroups": [[228, null]], "Multiclass support": [[408, "multiclass-support"]], "Multiclass-multioutput classification": [[1005, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[233, "multidimensional-scaling"]], "Multilabel": [[374, "multilabel"]], "Multilabel classification": [[248, null], [1005, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[290, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [1004, "multilabel-ranking-metrics"]], "Multinomial Case": [[1000, "multinomial-case"]], "Multinomial Naive Bayes": [[1006, "multinomial-naive-bayes"]], "MultinomialNB": [[846, null]], "Multioutput methods": [[183, "multioutput-methods"], [289, null]], "Multioutput regression": [[1005, "multioutput-regression"]], "Multiple modules": [[1043, "multiple-modules"], [1044, "multiple-modules"]], "Multiple vs. Single Imputation": [[994, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[994, "multivariate-feature-imputation"]], "Mutual Information based scores": [[410, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[410, "mutual-reachability-graph"]], "NMF": [[543, null]], "NMF with a beta-divergence": [[415, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[415, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1006, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[317, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[322, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[320, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[302, null]], "Nearest Centroid Classifier": [[1007, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1007, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[183, "nearest-neighbors"], [292, null], [1007, null]], "Nearest Neighbors Classification": [[294, null], [1007, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1007, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1007, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[303, null]], "Nearest Shrunken Centroid": [[1007, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[994, "nearest-neighbors-imputation"]], "NearestCentroid": [[854, null]], "NearestNeighbors": [[855, null]], "Neighborhood Components Analysis": [[1007, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[301, null]], "NeighborhoodComponentsAnalysis": [[856, null]], "Nested versus non-nested cross-validation": [[276, null]], "NetBSD": [[396, "netbsd"]], "Neural Networks": [[183, "neural-networks"], [305, null]], "Neural network models (supervised)": [[1008, null]], "Neural network models (unsupervised)": [[1009, null]], "New Estimator Classes": [[1036, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[322, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[322, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[322, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[325, "new-and-enhanced-displays"]], "New classes": [[1035, "new-classes"]], "New display ValidationCurveDisplay": [[326, "new-display-validationcurvedisplay"]], "New documentation improvements": [[322, "new-documentation-improvements"], [323, "new-documentation-improvements"]], "New features": [[1038, "new-features"], [1039, "new-features"], [1040, "new-features"], [1041, "new-features"], [1042, "new-features"]], "New plotting API": [[320, "new-plotting-api"]], "New self-training meta-estimator": [[322, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1022, "new-to-scientific-python"]], "Next steps": [[391, "next-steps"]], "Non-Negative Least Squares": [[1000, "non-negative-least-squares"]], "Non-linear transformation": [[1014, "non-linear-transformation"]], "Non-negative components - NMF": [[120, "non-negative-components-nmf"]], "Non-negative least squares": [[208, null]], "Non-negative matrix factorization (NMF or NNMF)": [[415, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1014, "normalization"]], "Normalized Discounted Cumulative Gain": [[1004, "normalized-discounted-cumulative-gain"]], "Normalizer": [[311, "normalizer"], [879, null]], "NotFittedError": [[580, null]], "Note on MPS device support": [[406, "note-on-mps-device-support"]], "Note on device support for float64": [[406, "note-on-device-support-for-float64"]], "Notes": [[367, "notes"]], "Novelty Detection": [[1010, "novelty-detection"]], "Novelty and Outlier Detection": [[1010, null]], "Novelty detection with Local Outlier Factor": [[1010, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[297, null]], "NuSVC": [[909, null]], "NuSVR": [[910, null]], "NumPy": [[383, "numpy"]], "Number of candidates and amount of resource at each iteration": [[283, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[380, "numerical-assertions-in-tests"]], "Nystroem": [[642, null]], "Nystroem Method for Kernel Approximation": [[996, "nystroem-method-for-kernel-approximation"]], "OAS": [[477, null]], "ONNX": [[404, "onnx"]], "OOB Errors for Random Forests": [[138, null]], "OPTICS": [[410, "optics"], [452, null]], "Obtaining predictions by cross-validation": [[414, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1028, "id19"]], "Older Versions": [[1035, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[227, null]], "One-class SVM with non-linear kernel (RBF)": [[340, null]], "One-vs-One multiclass ROC": [[280, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[280, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[911, null]], "OneHotEncoder": [[880, null]], "OneToOneFeatureMixin": [[431, null]], "OneVsOneClassifier": [[835, null], [1005, "onevsoneclassifier"]], "OneVsRestClassifier": [[836, null], [1005, "onevsrestclassifier"]], "Online One-Class SVM": [[323, "online-one-class-svm"], [1018, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[83, null]], "Optical recognition of handwritten digits dataset": [[375, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[176, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[380, "optional-arguments"]], "Options to tune the decision threshold": [[409, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[412, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[881, null]], "Ordinary Least Squares": [[1000, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[1000, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[211, null]], "Original data": [[277, "original-data"], [311, "original-data"]], "Original image": [[86, "original-image"]], "Original points": [[301, "original-points"]], "Orthogonal Matching Pursuit": [[212, null]], "Orthogonal Matching Pursuit (OMP)": [[1000, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[667, null]], "OrthogonalMatchingPursuitCV": [[668, null]], "Other changes": [[1035, "other-changes"]], "Other estimators and tasks": [[1023, "other-estimators-and-tasks"]], "Otto Group": [[1028, "id26"]], "Our community, our values": [[378, null]], "Our vanilla classifier": [[285, "our-vanilla-classifier"]], "Out of Bag Estimates": [[993, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1006, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1010, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[298, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[432, null]], "Outliers in the X direction": [[230, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[230, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1012, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[837, null], [1005, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[366, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[410, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[288, null]], "Overview of outlier detection methods": [[1010, "overview-of-outlier-detection-methods"]], "PCA": [[544, null]], "PCA using randomized SVD": [[415, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1021, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1028, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[115, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[115, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[413, "plscanonical"], [485, null]], "PLSRegression": [[413, "plsregression"], [486, null]], "PLSSVD": [[413, "plssvd"], [487, null]], "Packaging": [[1047, "packaging"]], "Pair Confusion Matrix": [[410, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[271, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[271, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[328, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1002, null]], "PairwiseKernel": [[623, null]], "Pandas": [[383, "pandas"]], "Pandas output with set_output API": [[325, "pandas-output-with-set-output-api"]], "Parallel": [[969, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[366, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[366, "parallelism"], [993, "parallelism"]], "Parallelism, resource management, and configuration": [[366, null]], "Parallelization": [[417, "parallelization"]], "ParameterGrid": [[814, null]], "ParameterSampler": [[815, null]], "Parameters": [[392, "parameters"], [417, "parameters"]], "Parameters and init": [[380, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1019, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[187, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1011, null]], "Partial dependence plots": [[1011, "partial-dependence-plots"]], "PartialDependenceDisplay": [[635, null]], "Partitioning the data": [[191, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[1000, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[669, null]], "PassiveAggressiveRegressor": [[670, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[418, "patch-extraction"]], "PatchExtractor": [[586, null]], "PeerIndex": [[1028, "id17"]], "People": [[1035, "people"], [1035, "id2"], [1035, "id5"], [1035, "id8"], [1035, "id11"], [1035, "id13"], [1035, "id15"], [1035, "id17"], [1036, "people"], [1036, "id3"], [1037, "people"], [1038, "people"]], "Perceptron": [[671, null], [1000, "perceptron"]], "Performance improvements": [[324, "performance-improvements"]], "Performance improvements in PCA": [[328, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[353, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[214, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[188, null]], "Permutation Importance with Multicollinear or Correlated Features": [[189, null]], "Permutation feature importance": [[1012, null]], "Permutation test score": [[277, "permutation-test-score"], [414, "permutation-test-score"]], "Permutation-based feature importance": [[320, "permutation-based-feature-importance"]], "Pinball loss": [[1004, "pinball-loss"]], "Pipeline": [[867, null]], "Pipeline ANOVA SVM": [[165, null]], "Pipeline compatibility": [[380, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[272, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[411, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[101, null], [183, "pipelines-and-composite-estimators"], [411, null]], "Pipelines: chaining pre-processors and estimators": [[391, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1021, null]], "Pipelining: chaining a PCA and a logistic regression": [[105, null]], "Platform-specific instructions": [[376, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[278, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[268, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[218, null]], "Plot a PCA representation": [[126, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[352, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[280, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[280, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[198, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[250, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[156, null]], "Plot classification boundaries with different SVM Kernels": [[345, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[338, null]], "Plot discrete decision boundary": [[150, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[159, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[147, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[157, null]], "Plot multi-class SGD on the iris dataset": [[222, null]], "Plot multinomial and One-vs-Rest Logistic Regression": [[205, null]], "Plot number of features VS. cross-validation scores": [[167, "plot-number-of-features-vs-cross-validation-scores"]], "Plot of pairs of features of the Iris dataset": [[126, "plot-of-pairs-of-features-of-the-iris-dataset"]], "Plot path length decision boundary": [[150, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[118, null]], "Plot regularization path": [[206, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [96, "plot-result"], [100, "plot-result"], [100, "id2"]], "Plot results": [[47, "plot-results"], [82, "plot-results"], [109, "plot-results"], [121, "plot-results"], [122, "plot-results"], [140, "plot-results"], [290, "plot-results"], [298, "plot-results"]], "Plot support and time series": [[207, "plot-support-and-time-series"]], "Plot the BIC scores": [[261, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[278, "plot-the-precision-recall-curve"]], "Plot the best model": [[261, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[344, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[155, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[357, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[142, null]], "Plot the marginal log-likelihood": [[193, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[278, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[330, "plot-the-most-uncertain-predictions"]], "Plot the results": [[83, "plot-the-results"], [113, "plot-the-results"], [157, "plot-the-results"], [182, "plot-the-results"]], "Plot the results on an image": [[81, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[339, null]], "Plot the true and estimated coefficients": [[193, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[194, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[147, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [309, "plotting"]], "Plotting API Overview": [[385, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[267, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[273, null]], "Plotting four circles": [[99, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[251, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[251, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[251, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[193, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[253, "plotting-the-roc-curve"]], "Plotting the Results": [[317, "plotting-the-results"]], "Plotting the result": [[275, "plotting-the-result"]], "Plotting the results": [[97, "plotting-the-results"], [135, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[217, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[99, "plotting-two-circles"]], "Plotting with Multiple Axes": [[385, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[213, null]], "PoissonRegressor": [[672, null]], "Polars output in set_output": [[327, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[996, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[214, null]], "Polynomial features": [[1014, "polynomial-features"]], "Polynomial kernel": [[345, "polynomial-kernel"], [1002, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[1000, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[643, null]], "PolynomialFeatures": [[882, null]], "Possible solutions": [[90, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[356, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[285, null]], "Post-tuning the decision threshold": [[409, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[265, null]], "PowerTransformer": [[311, "powertransformer"], [883, null]], "Pre-test vs. post-test analysis": [[274, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1004, "precision-recall-and-f-measures"]], "Precision-Recall": [[278, null]], "PrecisionRecallDisplay": [[703, null]], "Precomputed sparse nearest neighbors graph": [[320, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[414, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[816, null]], "Prediction Intervals for Gradient Boosting Regression": [[146, null]], "Prediction Latency": [[49, null], [365, "prediction-latency"]], "Prediction Throughput": [[365, "prediction-throughput"]], "PredictionErrorDisplay": [[704, null]], "Preparing the data": [[135, "preparing-the-data"], [149, "preparing-the-data"], [191, "preparing-the-data"]], "Preprocessing": [[183, "preprocessing"], [310, null]], "Preprocessing data": [[1014, null]], "Preprocessing numerical variables": [[186, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[187, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[187, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[187, "preprocessor-for-the-neural-network-model"]], "Principal Component Analysis (PCA) on Iris Dataset": [[126, null]], "Principal Component Regression vs Partial Least Squares Regression": [[116, null]], "Principal component analysis (PCA)": [[415, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1052, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[420, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[171, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[408, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[186, "processing-the-dataset"]], "Product": [[624, null]], "Productivity and sanity-preserving tips": [[386, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[384, "profiling-python-code"]], "Profiling compiled extensions": [[384, "profiling-compiled-extensions"]], "Project template:": [[380, null]], "Projecting data: PCA vs. KernelPCA": [[125, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[125, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[116, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[383, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[378, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[231, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1024, "purpose-of-this-document"]], "Purpose of this example": [[217, "purpose-of-this-example"]], "PyTorch Support": [[406, "pytorch-support"]], "Python API": [[366, "python-api"]], "Python package and dataset imports, load dataset": [[245, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[384, "python-cython-or-c-c"]], "QDA": [[998, "qda"]], "QuadraticDiscriminantAnalysis": [[553, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[353, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[1000, "quantile-regression"]], "Quantile Regressor": [[323, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[324, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[215, null]], "QuantileRegressor": [[673, null]], "QuantileTransformer": [[884, null]], "QuantileTransformer (Gaussian output)": [[311, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[311, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[1000, "ransac-random-sample-consensus"]], "RANSACRegressor": [[674, null]], "RBF": [[625, null]], "RBF SVM parameters": [[341, null]], "RBF kernel": [[345, "rbf-kernel"], [1002, "rbf-kernel"]], "RBFSampler": [[644, null]], "RCV1 dataset": [[373, "rcv1-dataset"]], "RFE": [[596, null]], "RFECV": [[597, null]], "ROC AUC now supports multiclass classification": [[320, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[253, null]], "ROC curve showing a specific class": [[280, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[280, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[280, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[280, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[996, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[179, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[420, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[857, null]], "RadiusNeighborsRegressor": [[858, null]], "RadiusNeighborsTransformer": [[859, null]], "Rand index": [[410, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[189, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[417, "random-forests"]], "Random Numbers": [[380, "random-numbers"]], "Random Projection": [[1016, null]], "Random data": [[277, "random-data"]], "Random forests and other randomized tree ensembles": [[417, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[414, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1021, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[567, null]], "RandomForestRegressor": [[568, null]], "RandomTreesEmbedding": [[569, null]], "Randomized Parameter Optimization": [[993, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[817, null]], "Rangespan": [[1028, "id11"]], "Ranking loss": [[1004, "ranking-loss"]], "Rational Quadratic kernel": [[179, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[420, "rational-quadratic-kernel"]], "RationalQuadratic": [[626, null]], "Reading the existing code base": [[378, "reading-the-existing-code-base"]], "Real world datasets": [[373, null]], "Real-world data set": [[107, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[281, null]], "Receiver operating characteristic (ROC)": [[1004, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1023, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[166, null], [419, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[167, null]], "Reference Steps": [[382, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [112, "references"], [137, "references"], [191, "references"], [198, "references"], [288, "references"], [304, "references"], [420, "references"], [994, "references"]], "Region of Practical Equivalence": [[271, "region-of-practical-equivalence"]], "Regression": [[178, "regression"], [1000, "regression"], [1008, "regression"], [1018, "regression"], [1019, "regression"], [1020, "regression"]], "Regression criteria": [[1020, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [1004, "regression-metrics"]], "RegressorChain": [[841, null], [1005, "regressorchain"]], "RegressorMixin": [[433, null]], "RegressorTags": [[925, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1008, "regularization"]], "Regularization path of L1- Logistic Regression": [[206, null]], "Related Projects": [[1023, null]], "Related changes": [[1042, "related-changes"]], "Relation to impurity-based importance in trees": [[1012, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[183, "release-highlights"], [319, null]], "Release Highlights for scikit-learn 0.22": [[320, null]], "Release Highlights for scikit-learn 0.23": [[321, null]], "Release Highlights for scikit-learn 0.24": [[322, null]], "Release Highlights for scikit-learn 1.0": [[323, null]], "Release Highlights for scikit-learn 1.1": [[324, null]], "Release Highlights for scikit-learn 1.2": [[325, null]], "Release Highlights for scikit-learn 1.3": [[326, null]], "Release Highlights for scikit-learn 1.4": [[327, null]], "Release Highlights for scikit-learn 1.5": [[328, null]], "Release History": [[1033, null]], "Releasing": [[382, "releasing"]], "Remarks": [[244, "remarks"]], "Removed modules": [[1035, "removed-modules"]], "Removing features with low variance": [[419, "removing-features-with-low-variance"]], "Repeated K-Fold": [[414, "repeated-k-fold"]], "RepeatedKFold": [[818, null]], "RepeatedStratifiedKFold": [[819, null]], "Replace missing values by 0": [[182, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[404, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[309, null]], "Restricted Boltzmann machines": [[1009, "restricted-boltzmann-machines"]], "Results interpretation": [[290, "results-interpretation"]], "Retrieve dataframes from OpenML": [[320, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[242, "rich-html-representation"]], "Rich visual representation of estimators": [[321, "rich-visual-representation-of-estimators"]], "Ridge": [[675, null]], "Ridge Complexity": [[1000, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[217, null]], "Ridge regression and classification": [[1000, "ridge-regression-and-classification"]], "RidgeCV": [[676, null]], "RidgeClassifier": [[677, null]], "RidgeClassifierCV": [[678, null]], "Roadmap": [[1024, null]], "Robust Covariance Estimation": [[412, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[111, null]], "Robust linear estimator fitting": [[219, null]], "Robust linear model estimation using RANSAC": [[216, null]], "Robust vs Empirical covariance estimate": [[112, null]], "RobustScaler": [[311, "robustscaler"], [885, null]], "Robustness of cross-validation results": [[361, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[1000, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[993, "robustness-to-failure"]], "RocCurveDisplay": [[705, null]], "Roles And Responsibilities": [[393, "roles-and-responsibilities"]], "Rolling your own estimator": [[380, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[247, "routing-meta-estimator"]], "Run the benchmark": [[91, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[275, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[376, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1004, "r2-score-the-coefficient-of-determination"]], "SGD": [[1018, "id5"]], "SGD: Maximum margin separating hyperplane": [[225, null]], "SGD: Penalties": [[224, null]], "SGD: Weighted samples": [[226, null]], "SGD: convex loss functions": [[223, null]], "SGDClassifier": [[679, null]], "SGDOneClassSVM": [[680, null]], "SGDRegressor": [[681, null]], "SKLEARN_ASSUME_FINITE": [[366, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[366, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[366, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[366, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[366, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[366, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[366, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[366, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[366, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[366, "sklearn-working-memory"]], "SVC": [[912, null], [1019, "svc"]], "SVM Exercise": [[161, null]], "SVM Margins Example": [[346, null]], "SVM Tie Breaking Example": [[349, null]], "SVM with custom kernel": [[337, null]], "SVM-Anova: SVM with univariate feature selection": [[344, null]], "SVM: Maximum margin separating hyperplane": [[342, null]], "SVM: Separating hyperplane for unbalanced classes": [[343, null]], "SVM: Weighted samples": [[350, null]], "SVR": [[913, null], [1019, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[372, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[272, null]], "Sample weight support": [[417, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[321, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[321, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[191, null]], "Scale Invariance": [[88, "scale-invariance"]], "Scaling data with outliers": [[1014, "scaling-data-with-outliers"]], "Scaling features to a range": [[1014, "scaling-features-to-a-range"]], "Scaling sparse data": [[1014, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[348, null]], "Scaling up the One-Class SVM": [[1010, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[367, "scaling-with-instances-using-out-of-core-learning"]], "Scatter plot of scores": [[115, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[393, null]], "Scores and probabilities": [[1019, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[993, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1053, "security"]], "Security & Maintainability Limitations": [[404, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[80, null]], "SelectFdr": [[598, null]], "SelectFpr": [[599, null]], "SelectFromModel": [[600, null]], "SelectFwe": [[601, null]], "SelectKBest": [[602, null]], "SelectPercentile": [[603, null]], "Selecting Lasso via an information criterion": [[202, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[202, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[104, null]], "Selecting features based on importance": [[168, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[168, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[93, null]], "SelectorMixin": [[604, null]], "Self Training": [[1017, "self-training"]], "SelfTrainingClassifier": [[904, null]], "Semi Supervised Classification": [[183, "semi-supervised-classification"], [329, null]], "Semi-supervised Classification on a Text Dataset": [[334, null]], "Semi-supervised learning": [[330, "semi-supervised-learning"], [1017, null]], "Sequence similarity matrix under the kernel": [[178, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[419, "sequential-feature-selection"]], "SequentialFeatureSelector": [[605, null]], "Serving the model artifact": [[404, "serving-the-model-artifact"]], "Setting regularization parameter": [[1000, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[1000, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[231, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[998, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[109, null]], "Shrinkage via learning rate": [[417, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[412, "shrunk-covariance"]], "ShrunkCovariance": [[478, null]], "ShuffleSplit": [[820, null]], "Sigmoid": [[408, "sigmoid"]], "Sigmoid kernel": [[345, "sigmoid-kernel"], [1002, "sigmoid-kernel"]], "Silhouette Coefficient": [[410, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[296, null]], "Simple Pipeline": [[247, "simple-pipeline"]], "SimpleImputer": [[633, null]], "Single estimator versus bagging: bias-variance decomposition": [[137, null]], "Single label": [[374, "single-label"]], "Skewed Chi Squared Kernel": [[996, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[645, null]], "Social Media": [[1027, "social-media"]], "Solvers": [[1000, "solvers"]], "Sparse coding with a precomputed dictionary": [[129, null], [415, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[120, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1014, null]], "Sparse inverse covariance": [[412, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[113, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[415, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1016, "sparse-random-projection"]], "SparseCoder": [[545, null]], "SparsePCA": [[546, null]], "SparseRandomProjection": [[900, null]], "Sparsity": [[418, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[210, null]], "Species distribution dataset": [[373, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specific models": [[380, "specific-models"]], "Specifying an objective metric": [[993, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[993, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[407, "spectral-biclustering"]], "Spectral Clustering Graphs": [[410, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[407, "spectral-co-clustering"]], "Spectral Embedding": [[1001, "spectral-embedding"]], "Spectral clustering": [[410, "spectral-clustering"]], "Spectral clustering for image segmentation": [[99, null]], "Spectral embedding for non-linear dimensionality reduction": [[233, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[453, null]], "SpectralClustering": [[454, null]], "SpectralCoclustering": [[455, null]], "SpectralEmbedding": [[694, null]], "Sphinx version": [[378, null]], "Spline Transformers": [[323, "spline-transformers"]], "Spline transformer": [[1014, "spline-transformer"]], "SplineTransformer": [[886, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1028, "id2"]], "Stack of predictors on a single data set": [[154, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[417, "stacked-generalization"]], "Stacking Classifier and Regressor": [[320, "stacking-classifier-and-regressor"]], "StackingClassifier": [[570, null]], "StackingRegressor": [[571, null]], "Stalled and Unclaimed Issues": [[378, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[378, "stalled-pull-requests"]], "Standard replies for reviewing": [[386, "standard-replies-for-reviewing"]], "StandardScaler": [[311, "standardscaler"], [887, null]], "Standardization, or mean removal and variance scaling": [[1014, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1024, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[271, null]], "Statistical learning with Python": [[1023, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1018, null]], "Stochastic Gradient Descent - SGD": [[1000, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1018, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1009, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1018, "stopping-criterion"]], "Strategies comparison": [[288, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[367, null]], "Stratified Shuffle Split": [[414, "stratified-shuffle-split"]], "Stratified k-fold": [[414, "stratified-k-fold"]], "StratifiedGroupKFold": [[414, "stratifiedgroupkfold"], [821, null]], "StratifiedKFold": [[822, null]], "StratifiedShuffleSplit": [[823, null]], "Streaming instances": [[367, "streaming-instances"]], "Submitting a bug report or a feature request": [[378, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1024, "subpackage-specific-goals"]], "Subsampling": [[417, "subsampling"]], "Successive Halving Iterations": [[283, null]], "Successive Halving estimators for tuning hyper-parameters": [[322, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[627, null]], "Summarizing the key points": [[404, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [144, "summary"], [354, "summary"]], "Summary of cross-validation approach": [[202, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[404, "id2"]], "Supervised learning": [[1026, null]], "Support": [[1027, null]], "Support Vector Machines": [[183, "support-vector-machines"], [336, null], [1019, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[347, null]], "Support for Array API": [[1052, "support-for-array-api"], [1053, "support-for-array-api"]], "Support for Array API-compatible inputs": [[406, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1052, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1053, "support-for-building-with-meson"]], "Support for missing values": [[149, "support-for-missing-values"]], "Support for quantile loss": [[149, "support-for-quantile-loss"]], "Swiss Roll": [[237, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[237, null]], "Swiss-Hole": [[237, "swiss-hole"]], "Synthetic dataset": [[383, "synthetic-dataset"]], "Synthetic example": [[107, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[233, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[695, null]], "Table of Contents": [[390, "table-of-contents"]], "Tags": [[926, null]], "Take-home messages": [[271, "take-home-messages"]], "Target Encoder": [[1014, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[318, null]], "Target Types": [[392, "target-types"]], "Target format": [[1005, "target-format"], [1005, "id5"], [1005, "id8"], [1005, "id10"]], "TargetEncoder": [[888, null]], "TargetEncoder: a new category encoding strategy": [[326, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[927, null]], "Technical Committee": [[393, "technical-committee"]], "Test dependencies": [[376, "test-dependencies"]], "Test with permutations the significance of a classification score": [[277, null]], "Testing Functions": [[387, "testing-functions"]], "Testing and improving test coverage": [[378, "testing-and-improving-test-coverage"]], "Text feature extraction": [[418, "text-feature-extraction"]], "TfidfTransformer": [[593, null]], "TfidfVectorizer": [[354, "tfidfvectorizer"], [594, null]], "Tf\u2013idf term weighting": [[418, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[373, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[418, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1003, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[213, "the-french-motor-third-party-liability-claims-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[244, null]], "The Johnson-Lindenstrauss lemma": [[1016, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[373, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[386, "the-meson-build-backend"]], "The Olivetti faces dataset": [[373, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[288, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[278, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[265, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[414, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[116, "the-data"]], "The dataset": [[269, "the-dataset"]], "The dataset: simulated hourly wages": [[185, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[186, "the-dataset-wages"]], "The diabetes dataset": [[285, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[288, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[186, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[186, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[382, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1004, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[230, null]], "Theil-Sen estimator: generalized-median-based estimator": [[1000, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[682, null]], "Theoretical bounds": [[244, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[247, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[396, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[414, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[824, null]], "Timing and accuracy plots": [[245, "timing-and-accuracy-plots"]], "Tips and Tricks": [[365, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[379, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[993, "tips-for-parameter-search"]], "Tips for performance": [[379, "tips-for-performance"]], "Tips on Practical Use": [[1008, "tips-on-practical-use"], [1018, "tips-on-practical-use"], [1019, "tips-on-practical-use"]], "Tips on practical use": [[1001, "tips-on-practical-use"], [1020, "tips-on-practical-use"]], "Tips to ease development": [[379, "tips-to-ease-development"]], "Tools": [[406, "tools"]], "Top terms per cluster": [[353, "top-terms-per-cluster"]], "Top-k accuracy score": [[1004, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[356, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[417, "totally-random-trees-embedding"]], "Toy datasets": [[375, null]], "Tracking feature names in a pipeline": [[411, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[1000, null]], "Train and Persist the Model": [[404, "train-and-persist-the-model"]], "Train classifiers": [[341, "train-classifiers"]], "Train models on the diabetes dataset": [[251, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[360, "train-tree-classifier"]], "Training": [[309, "training"], [1007, "training"]], "Training SVC model and plotting decision boundaries": [[345, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[253, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[318, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[317, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[135, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[157, "training-classifiers"]], "Training of the model": [[150, "training-of-the-model"]], "Training the AdaBoostClassifier": [[134, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[217, "training-the-ridge-regressor"]], "Transform": [[1007, "transform"]], "Transform data": [[115, "transform-data"]], "TransformedTargetRegressor": [[467, null]], "TransformerMixin": [[434, null]], "TransformerTags": [[928, null]], "Transformers and pre-processors": [[391, "transformers-and-pre-processors"]], "Transforming target in regression": [[411, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1015, null]], "Translations of scikit-learn documentation": [[1023, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1020, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[320, "tree-pruning"]], "Tree structure": [[360, "tree-structure"]], "Tree-based feature selection": [[419, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[188, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[377, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[396, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[415, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[547, null]], "TunedThresholdClassifierCV": [[825, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[328, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[269, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[265, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[265, "tuning-the-decision-threshold"], [285, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[409, null]], "Tuning the hyper-parameters of an estimator": [[993, null]], "Tuning the hyper-parameters of the quantile regressors": [[146, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[158, null], [183, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[231, null]], "TweedieRegressor": [[683, null]], "Two-class AdaBoost": [[136, null]], "Type of return values and fitted attributes": [[406, "type-of-return-values-and-fitted-attributes"]], "Types": [[379, "types"]], "T\u00e9l\u00e9com ParisTech": [[1028, "id7"]], "Unbalanced problems": [[1019, "unbalanced-problems"]], "UndefinedMetricWarning": [[581, null]], "Under Development": [[1030, "under-development"]], "Underfitting vs. Overfitting": [[286, null]], "Understanding the decision tree structure": [[360, null]], "Univariate Feature Selection": [[164, null]], "Univariate feature imputation": [[994, "univariate-feature-imputation"]], "Univariate feature selection": [[164, "id1"], [419, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[994, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[380, "universal-attributes"]], "Unlabeled entries in y": [[1017, null]], "Unsupervised Nearest Neighbors": [[1007, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1021, null]], "Unsupervised learning": [[1029, null]], "Unweighted feature selection": [[401, "unweighted-feature-selection"]], "Updating Authors List": [[382, "updating-authors-list"]], "Usage": [[408, "usage"], [411, "usage"], [411, "id1"], [417, "usage"], [417, "id24"], [417, "id25"], [417, "id27"], [417, "id35"], [1000, "usage"]], "Usage Examples": [[401, "usage-examples"]], "Use markdown formatting": [[383, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[386, "useful-pytest-aliases-and-flags"]], "User Guide": [[1030, null]], "User Questions": [[1027, "user-questions"]], "Using Cython": [[384, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[312, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[361, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[379, "using-openmp"]], "Using a debugger, gdb": [[384, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[386, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[1000, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[414, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[151, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[384, "using-gprof"]], "Using multiple metric evaluation": [[1004, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[168, "using-negative-tolerance-values"]], "Using scikit-learn": [[390, "using-scikit-learn"]], "Using stop words": [[418, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[384, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[384, "using-yep-and-gperftools"]], "Utilities for Developers": [[387, null]], "Validation Tools": [[387, "validation-tools"]], "Validation curve": [[999, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[999, null]], "ValidationCurveDisplay": [[826, null]], "Vanilla predictive model": [[265, "vanilla-predictive-model"]], "VarianceThreshold": [[606, null]], "Variational Bayesian Gaussian Mixture": [[1003, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[85, null]], "Varying regularization in Multi-layer Perceptron": [[306, null]], "Varying the metric": [[410, "varying-the-metric"]], "Vector Quantization Example": [[86, null]], "Vectorizing a large text corpus with the hashing trick": [[418, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1035, "version-0-10"]], "Version 0.11": [[1035, "version-0-11"]], "Version 0.12": [[1035, "version-0-12"]], "Version 0.12.1": [[1035, "version-0-12-1"]], "Version 0.13": [[1036, null], [1036, "changes-0-13"]], "Version 0.13.1": [[1036, "version-0-13-1"]], "Version 0.14": [[1037, null], [1037, "changes-0-14"]], "Version 0.15": [[1038, null], [1038, "changes-0-15"]], "Version 0.15.1": [[1038, "version-0-15-1"]], "Version 0.15.2": [[1038, "version-0-15-2"]], "Version 0.16": [[1039, null], [1039, "changes-0-16"]], "Version 0.16.1": [[1039, "version-0-16-1"]], "Version 0.17": [[1040, null], [1040, "changes-0-17"]], "Version 0.17.1": [[1040, "version-0-17-1"]], "Version 0.18": [[1041, null], [1041, "changes-0-18"]], "Version 0.18.1": [[1041, "version-0-18-1"]], "Version 0.18.2": [[1041, "version-0-18-2"]], "Version 0.19": [[1042, null], [1042, "id1"]], "Version 0.19.1": [[1042, "version-0-19-1"]], "Version 0.19.2": [[1042, "version-0-19-2"]], "Version 0.20": [[1043, null]], "Version 0.20.0": [[1043, "version-0-20-0"]], "Version 0.20.1": [[1043, "version-0-20-1"]], "Version 0.20.2": [[1043, "version-0-20-2"]], "Version 0.20.3": [[1043, "version-0-20-3"]], "Version 0.20.4": [[1043, "version-0-20-4"]], "Version 0.21": [[1044, null]], "Version 0.21.0": [[1044, "version-0-21-0"]], "Version 0.21.1": [[1044, "version-0-21-1"]], "Version 0.21.2": [[1044, "version-0-21-2"]], "Version 0.21.3": [[1044, "version-0-21-3"]], "Version 0.22": [[1045, null]], "Version 0.22.0": [[1045, "version-0-22-0"]], "Version 0.22.1": [[1045, "version-0-22-1"]], "Version 0.22.2.post1": [[1045, "version-0-22-2-post1"]], "Version 0.23": [[1046, null]], "Version 0.23.0": [[1046, "version-0-23-0"]], "Version 0.23.1": [[1046, "version-0-23-1"]], "Version 0.23.2": [[1046, "version-0-23-2"]], "Version 0.24": [[1047, null]], "Version 0.24.0": [[1047, "version-0-24-0"]], "Version 0.24.1": [[1047, "version-0-24-1"]], "Version 0.24.2": [[1047, "version-0-24-2"]], "Version 0.4": [[1035, "version-0-4"]], "Version 0.5": [[1035, "version-0-5"]], "Version 0.6": [[1035, "version-0-6"]], "Version 0.7": [[1035, "version-0-7"]], "Version 0.8": [[1035, "version-0-8"]], "Version 0.9": [[1035, "version-0-9"]], "Version 1.0": [[1048, null]], "Version 1.0.0": [[1048, "version-1-0-0"]], "Version 1.0.1": [[1048, "version-1-0-1"]], "Version 1.0.2": [[1048, "version-1-0-2"]], "Version 1.1": [[1049, null]], "Version 1.1.0": [[1049, "version-1-1-0"]], "Version 1.1.1": [[1049, "version-1-1-1"]], "Version 1.1.2": [[1049, "version-1-1-2"]], "Version 1.1.3": [[1049, "version-1-1-3"]], "Version 1.2": [[1050, null]], "Version 1.2.0": [[1050, "version-1-2-0"]], "Version 1.2.1": [[1050, "version-1-2-1"]], "Version 1.2.2": [[1050, "version-1-2-2"]], "Version 1.3": [[1051, null]], "Version 1.3.0": [[1051, "version-1-3-0"]], "Version 1.3.1": [[1051, "version-1-3-1"]], "Version 1.3.2": [[1051, "version-1-3-2"]], "Version 1.4": [[1052, null]], "Version 1.4.0": [[1052, "version-1-4-0"]], "Version 1.4.1": [[1052, "version-1-4-1"]], "Version 1.4.2": [[1052, "version-1-4-2"]], "Version 1.5": [[1053, null]], "Version 1.5.0": [[1053, "version-1-5-0"]], "Version 1.5.1": [[1053, "version-1-5-1"]], "Version 1.5.2": [[1053, "version-1-5-2"]], "Version 1.6": [[1054, null]], "Video resources": [[378, "video-resources"]], "Videos": [[1022, "videos"]], "Visual evaluation of regression models": [[1004, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [29, "visualization"], [51, "visualization"], [341, "visualization"]], "Visualization of MLP weights on MNIST": [[308, null]], "Visualization of cluster hierarchy": [[410, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1032, null]], "Visualizations with Display Objects": [[241, null]], "Visualize Comparison": [[144, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[266, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[266, "visualize-our-data"]], "Visualize the learning curves": [[246, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[91, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[246, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[411, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[266, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[417, "voting-classifier"]], "Voting Regressor": [[417, "voting-regressor"]], "VotingClassifier": [[572, null]], "VotingRegressor": [[573, null]], "Warnings and Exceptions": [[387, "warnings-and-exceptions"]], "Ways to contribute": [[378, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[100, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1045, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[417, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[401, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[401, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[390, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[390, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[360, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[390, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[628, null]], "Who is using scikit-learn?": [[1028, null]], "Why are there so many different estimators for linear models?": [[390, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[390, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[390, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[390, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[390, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[390, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why is my pull request not getting any attention?": [[390, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[390, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[417, "why-it-s-faster"]], "Why scikit?": [[390, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[390, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[390, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[396, "winpython-for-windows"]], "Windows": [[376, "windows"]], "Wine recognition dataset": [[375, "wine-recognition-dataset"]], "Workflow Overview": [[404, "workflow-overview"]], "Working on PRs to help review": [[377, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[377, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[183, "working-with-text-documents"], [351, null]], "Wrong causal interpretation": [[186, "wrong-causal-interpretation"]], "XOR dataset": [[345, "xor-dataset"]], "Yhat": [[1028, "id10"]], "Zero one loss": [[1004, "zero-one-loss"]], "Zopa": [[1028, "id27"]], "__sklearn_is_fitted__ as Developer API": [[132, null]], "_safe_indexing": [[929, null]], "accuracy_score": [[706, null]], "add_dummy_feature": [[889, null]], "additive_chi2_kernel": [[761, null]], "adjusted_mutual_info_score": [[707, null]], "adjusted_rand_score": [[708, null]], "affinity_propagation": [[456, null]], "all_displays": [[942, null]], "all_estimators": [[943, null]], "all_functions": [[944, null]], "as_float_array": [[931, null]], "assert_all_finite": [[932, null]], "auc": [[709, null]], "available_if": [[964, null]], "average_precision_score": [[710, null]], "balanced_accuracy_score": [[711, null]], "betaworks": [[1028, "id4"]], "binarize": [[890, null]], "brier_score_loss": [[712, null]], "calibration_curve": [[441, null]], "calinski_harabasz_score": [[713, null]], "check_X_y": [[933, null]], "check_array": [[934, null]], "check_consistent_length": [[935, null]], "check_cv": [[827, null]], "check_estimator": [[945, null]], "check_increasing": [[639, null]], "check_is_fitted": [[987, null]], "check_memory": [[988, null]], "check_random_state": [[936, null]], "check_scalar": [[937, null]], "check_scoring": [[714, null]], "check_symmetric": [[989, null]], "chi2": [[607, null]], "chi2_kernel": [[762, null]], "class_likelihood_ratios": [[715, null]], "classification_report": [[716, null]], "clear_data_home": [[488, null]], "clone": [[435, null]], "cluster_optics_dbscan": [[457, null]], "cluster_optics_xi": [[458, null]], "cohen_kappa_score": [[719, null]], "column_or_1d": [[990, null]], "completeness_score": [[720, null]], "compute_class_weight": [[938, null]], "compute_optics_graph": [[459, null]], "compute_sample_weight": [[939, null]], "config_context": [[470, null]], "confusion_matrix": [[721, null]], "consensus_score": [[722, null]], "contingency_matrix": [[717, null]], "cosine_distances": [[763, null]], "cosine_similarity": [[764, null]], "coverage_error": [[723, null]], "cross_val_predict": [[828, null]], "cross_val_score": [[829, null]], "cross_validate": [[830, null]], "d2_absolute_error_score": [[724, null]], "d2_log_loss_score": [[725, null]], "d2_pinball_score": [[726, null]], "d2_tweedie_score": [[727, null]], "davies_bouldin_score": [[728, null]], "dbscan": [[421, null]], "dbscan_clustering": [[88, "dbscan-clustering"]], "dcg_score": [[729, null]], "default_tags": [[940, null]], "delayed": [[970, null]], "density": [[948, null]], "deprecated": [[941, null]], "det_curve": [[730, null]], "dict_learning": [[548, null]], "dict_learning_online": [[549, null]], "distance_metrics": [[765, null]], "dump_svmlight_file": [[489, null]], "empirical_covariance": [[479, null]], "enable_halving_search_cv": [[582, null]], "enable_iterative_imputer": [[583, null]], "enet_path": [[684, null]], "estimate_bandwidth": [[460, null]], "estimator_html_repr": [[947, null]], "euclidean_distances": [[766, null]], "explained_variance_score": [[731, null]], "export_graphviz": [[919, null]], "export_text": [[920, null]], "extract_patches_2d": [[587, null]], "f1_score": [[732, null]], "f_classif": [[608, null]], "f_regression": [[609, null]], "fast_logdet": [[949, null]], "fastica": [[422, null]], "fbeta_score": [[733, null]], "fetch_20newsgroups": [[490, null]], "fetch_20newsgroups_vectorized": [[491, null]], "fetch_california_housing": [[492, null]], "fetch_covtype": [[493, null]], "fetch_file": [[494, null]], "fetch_kddcup99": [[495, null]], "fetch_lfw_pairs": [[496, null]], "fetch_lfw_people": [[497, null]], "fetch_olivetti_faces": [[498, null]], "fetch_openml": [[499, null]], "fetch_rcv1": [[500, null]], "fetch_species_distributions": [[501, null]], "fowlkes_mallows_score": [[734, null]], "gen_batches": [[954, null]], "gen_even_slices": [[955, null]], "get_config": [[629, null]], "get_data_home": [[502, null]], "get_feature_names_out Available in all Transformers": [[324, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[380, "get-params-and-set-params"]], "get_routing_for_object": [[962, null]], "get_scorer": [[735, null]], "get_scorer_names": [[736, null]], "get_tags": [[956, null]], "graphical_lasso": [[480, null]], "grid_to_graph": [[588, null]], "hamming_loss": [[737, null]], "has_fit_parameter": [[991, null]], "haversine_distances": [[767, null]], "hinge_loss": [[738, null]], "homogeneity_completeness_v_measure": [[739, null]], "homogeneity_score": [[740, null]], "img_to_graph": [[589, null]], "incr_mean_variance_axis": [[978, null]], "indexable": [[958, null]], "inplace_column_scale": [[979, null]], "inplace_csr_column_scale": [[980, null]], "inplace_csr_row_normalize_l1": [[985, null]], "inplace_csr_row_normalize_l2": [[986, null]], "inplace_row_scale": [[981, null]], "inplace_swap_column": [[982, null]], "inplace_swap_row": [[983, null]], "is_classifier": [[436, null]], "is_clusterer": [[437, null]], "is_multilabel": [[965, null]], "is_regressor": [[438, null]], "isotonic_regression": [[640, null]], "jaccard_score": [[741, null]], "johnson_lindenstrauss_min_dim": [[901, null]], "kNN-imputation of the missing values": [[182, "knn-imputation-of-the-missing-values"]], "k_means": [[461, null]], "kcachegrind": [[384, "kcachegrind"]], "kernel_metrics": [[768, null]], "kmeans_plusplus": [[462, null]], "kneighbors_graph": [[860, null]], "l1_min_c": [[914, null]], "label_binarize": [[891, null]], "label_ranking_average_precision_score": [[742, null]], "label_ranking_loss": [[743, null]], "laplacian_kernel": [[769, null]], "lars_path": [[685, null]], "lars_path_gram": [[686, null]], "lasso_path": [[687, null]], "learning_curve": [[831, null]], "ledoit_wolf": [[481, null]], "ledoit_wolf_shrinkage": [[482, null]], "linear_kernel": [[770, null]], "load_breast_cancer": [[503, null]], "load_diabetes": [[504, null]], "load_digits": [[505, null]], "load_files": [[506, null]], "load_iris": [[507, null]], "load_linnerud": [[508, null]], "load_sample_image": [[509, null]], "load_sample_images": [[510, null]], "load_svmlight_file": [[511, null]], "load_svmlight_files": [[512, null]], "load_wine": [[513, null]], "locally_linear_embedding": [[696, null]], "log_loss": [[744, null]], "macOS": [[376, "macos"]], "macOS compilers from Homebrew": [[376, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[376, "macos-compilers-from-conda-forge"]], "make_biclusters": [[514, null]], "make_blobs": [[383, "make-blobs"], [515, null]], "make_checkerboard": [[516, null]], "make_circles": [[517, null]], "make_classification": [[383, "make-classification"], [518, null]], "make_column_selector": [[468, null]], "make_column_transformer": [[469, null]], "make_friedman1": [[519, null]], "make_friedman2": [[520, null]], "make_friedman3": [[521, null]], "make_gaussian_quantiles": [[522, null]], "make_hastie_10_2": [[523, null]], "make_low_rank_matrix": [[524, null]], "make_moons": [[525, null]], "make_multilabel_classification": [[526, null]], "make_pipeline": [[868, null]], "make_regression": [[383, "make-regression"], [527, null]], "make_s_curve": [[528, null]], "make_scorer": [[745, null]], "make_sparse_coded_signal": [[529, null]], "make_sparse_spd_matrix": [[530, null]], "make_sparse_uncorrelated": [[531, null]], "make_spd_matrix": [[532, null]], "make_swiss_roll": [[533, null]], "make_union": [[869, null]], "manhattan_distances": [[771, null]], "matthews_corrcoef": [[746, null]], "max_error": [[747, null]], "maxabs_scale": [[892, null]], "mean_absolute_error": [[748, null]], "mean_absolute_percentage_error": [[749, null]], "mean_gamma_deviance": [[750, null]], "mean_pinball_loss": [[751, null]], "mean_poisson_deviance": [[752, null]], "mean_shift": [[463, null]], "mean_squared_error": [[753, null]], "mean_squared_log_error": [[754, null]], "mean_tweedie_deviance": [[755, null]], "mean_variance_axis": [[984, null]], "median_absolute_error": [[756, null]], "min_cluster_size": [[88, "min-cluster-size"]], "min_pos": [[930, null]], "min_samples": [[88, "min-samples"]], "minmax_scale": [[893, null]], "multilabel_confusion_matrix": [[757, null]], "murmurhash3_32": [[968, null]], "mutual_info_classif": [[610, null]], "mutual_info_regression": [[611, null]], "mutual_info_score": [[758, null]], "nan_euclidean_distances": [[772, null]], "ndcg_score": [[759, null]], "non_negative_factorization": [[550, null]], "normalize": [[894, null]], "normalized_mutual_info_score": [[760, null]], "oas": [[423, null]], "orthogonal_mp": [[688, null]], "orthogonal_mp_gram": [[689, null]], "pair_confusion_matrix": [[718, null]], "paired_cosine_distances": [[773, null]], "paired_distances": [[774, null]], "paired_euclidean_distances": [[775, null]], "paired_manhattan_distances": [[776, null]], "pairwise_distances": [[781, null]], "pairwise_distances_argmin": [[782, null]], "pairwise_distances_argmin_min": [[783, null]], "pairwise_distances_chunked": [[784, null]], "pairwise_kernels": [[777, null]], "parallel_backend": [[971, null]], "parametrize_with_checks": [[946, null]], "partial_dependence": [[636, null]], "permutation_importance": [[637, null]], "permutation_test_score": [[832, null]], "pickle, joblib, and cloudpickle": [[404, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[921, null]], "polynomial_kernel": [[778, null]], "power_transform": [[895, null]], "precision_recall_curve": [[785, null]], "precision_recall_fscore_support": [[786, null]], "precision_score": [[787, null]], "process_routing": [[963, null]], "quantile_transform": [[896, null]], "r2_score": [[788, null]], "r_regression": [[612, null]], "radius_neighbors_graph": [[861, null]], "rand_score": [[789, null]], "randomized_range_finder": [[950, null]], "randomized_svd": [[951, null]], "rbf_kernel": [[779, null]], "recall_score": [[790, null]], "reconstruct_from_patches_2d": [[590, null]], "register_parallel_backend": [[973, null]], "resample": [[974, null]], "ridge_regression": [[690, null]], "robust_scale": [[897, null]], "roc_auc_score": [[791, null]], "roc_curve": [[792, null]], "root_mean_squared_error": [[793, null]], "root_mean_squared_log_error": [[794, null]], "safe_mask": [[975, null]], "safe_sparse_dot": [[952, null]], "safe_sqr": [[976, null]], "sample_without_replacement": [[972, null]], "scale": [[898, null]], "set_config": [[905, null]], "show_versions": [[906, null]], "shrunk_covariance": [[483, null]], "shuffle": [[977, null]], "sigmoid_kernel": [[780, null]], "silhouette_samples": [[795, null]], "silhouette_score": [[796, null]], "single_source_shortest_path_length": [[957, null]], "sklearn": [[3, null], [1051, "sklearn"]], "sklearn.base": [[4, null], [1044, "sklearn-base"], [1045, "sklearn-base"], [1047, "sklearn-base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1050, "sklearn-base"], [1050, "id2"], [1050, "id10"], [1051, "sklearn-base"], [1052, "sklearn-base"]], "sklearn.calibration": [[5, null], [1044, "sklearn-calibration"], [1045, "sklearn-calibration"], [1047, "sklearn-calibration"], [1048, "sklearn-calibration"], [1048, "id7"], [1049, "sklearn-calibration"], [1050, "sklearn-calibration"], [1050, "id11"], [1051, "sklearn-calibration"], [1051, "id7"], [1052, "sklearn-calibration"], [1052, "id4"], [1053, "sklearn-calibration"], [1053, "id7"]], "sklearn.cluster": [[6, null], [1043, "sklearn-cluster"], [1043, "id2"], [1043, "id11"], [1043, "id24"], [1044, "sklearn-cluster"], [1044, "id8"], [1045, "sklearn-cluster"], [1045, "id5"], [1046, "sklearn-cluster"], [1046, "id2"], [1046, "id5"], [1047, "sklearn-cluster"], [1048, "sklearn-cluster"], [1048, "id1"], [1048, "id8"], [1049, "sklearn-cluster"], [1049, "id8"], [1050, "sklearn-cluster"], [1050, "id12"], [1051, "sklearn-cluster"], [1051, "id8"], [1052, "sklearn-cluster"], [1052, "id5"], [1053, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1043, "sklearn-compose"], [1043, "id3"], [1043, "id6"], [1043, "id12"], [1043, "id25"], [1044, "sklearn-compose"], [1044, "id9"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1047, "id5"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1052, "id6"], [1053, "sklearn-compose"], [1053, "id3"], [1053, "id8"]], "sklearn.covariance": [[8, null], [1043, "sklearn-covariance"], [1043, "id26"], [1047, "sklearn-covariance"], [1048, "sklearn-covariance"], [1049, "sklearn-covariance"], [1051, "sklearn-covariance"], [1052, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1045, "sklearn-cross-decomposition"], [1047, "sklearn-cross-decomposition"], [1047, "id6"], [1049, "sklearn-cross-decomposition"], [1051, "sklearn-cross-decomposition"], [1053, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1043, "sklearn-datasets"], [1043, "id13"], [1043, "id27"], [1044, "sklearn-datasets"], [1044, "id10"], [1045, "sklearn-datasets"], [1046, "sklearn-datasets"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"], [1048, "id9"], [1049, "sklearn-datasets"], [1049, "id9"], [1050, "sklearn-datasets"], [1050, "id13"], [1051, "sklearn-datasets"], [1051, "id9"], [1052, "sklearn-datasets"], [1053, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1043, "sklearn-decomposition"], [1043, "id4"], [1043, "id14"], [1043, "id28"], [1044, "sklearn-decomposition"], [1044, "id11"], [1045, "sklearn-decomposition"], [1046, "sklearn-decomposition"], [1046, "id6"], [1047, "sklearn-decomposition"], [1047, "id7"], [1048, "sklearn-decomposition"], [1048, "id10"], [1049, "sklearn-decomposition"], [1049, "id10"], [1050, "sklearn-decomposition"], [1050, "id14"], [1051, "sklearn-decomposition"], [1051, "id10"], [1052, "sklearn-decomposition"], [1053, "sklearn-decomposition"], [1053, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1043, "sklearn-discriminant-analysis"], [1044, "sklearn-discriminant-analysis"], [1047, "sklearn-discriminant-analysis"], [1049, "sklearn-discriminant-analysis"], [1050, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1043, "sklearn-dummy"], [1044, "sklearn-dummy"], [1045, "sklearn-dummy"], [1048, "sklearn-dummy"], [1049, "sklearn-dummy"], [1053, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1043, "sklearn-ensemble"], [1043, "id29"], [1044, "sklearn-ensemble"], [1044, "id12"], [1045, "sklearn-ensemble"], [1046, "sklearn-ensemble"], [1046, "id7"], [1047, "sklearn-ensemble"], [1047, "id8"], [1048, "sklearn-ensemble"], [1048, "id2"], [1048, "id11"], [1049, "sklearn-ensemble"], [1050, "sklearn-ensemble"], [1050, "id3"], [1050, "id15"], [1051, "sklearn-ensemble"], [1051, "id11"], [1052, "sklearn-ensemble"], [1052, "id7"], [1053, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1047, "sklearn-exceptions"], [1051, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1044, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1043, "sklearn-feature-extraction"], [1043, "id15"], [1043, "id30"], [1044, "sklearn-feature-extraction"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1046, "id8"], [1047, "sklearn-feature-extraction"], [1047, "id9"], [1048, "sklearn-feature-extraction"], [1048, "id12"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1053, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[18, null], [1043, "sklearn-feature-selection"], [1045, "sklearn-feature-selection"], [1046, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1048, "sklearn-feature-selection"], [1048, "id13"], [1049, "sklearn-feature-selection"], [1049, "id2"], [1049, "id11"], [1050, "sklearn-feature-selection"], [1050, "id16"], [1051, "sklearn-feature-selection"], [1051, "id12"], [1052, "sklearn-feature-selection"], [1053, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, null], [1043, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1047, "id10"], [1048, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1043, "sklearn-impute"], [1043, "id31"], [1044, "sklearn-impute"], [1044, "id13"], [1045, "sklearn-impute"], [1045, "id6"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1048, "sklearn-impute"], [1049, "sklearn-impute"], [1049, "id12"], [1050, "sklearn-impute"], [1051, "sklearn-impute"], [1051, "id13"], [1052, "sklearn-impute"], [1053, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1044, "sklearn-inspection"], [1044, "id3"], [1044, "id14"], [1045, "sklearn-inspection"], [1045, "id7"], [1046, "sklearn-inspection"], [1046, "id11"], [1047, "sklearn-inspection"], [1048, "sklearn-inspection"], [1049, "sklearn-inspection"], [1050, "sklearn-inspection"], [1050, "id17"], [1051, "sklearn-inspection"], [1052, "sklearn-inspection"], [1052, "id8"], [1053, "sklearn-inspection"]], "sklearn.isotonic": [[22, null], [1043, "sklearn-isotonic"], [1044, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1047, "sklearn-isotonic"], [1049, "sklearn-isotonic"], [1050, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1045, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"], [1050, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1052, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1043, "sklearn-linear-model"], [1043, "id16"], [1043, "id32"], [1044, "sklearn-linear-model"], [1044, "id15"], [1045, "sklearn-linear-model"], [1046, "sklearn-linear-model"], [1046, "id9"], [1047, "sklearn-linear-model"], [1047, "id11"], [1048, "sklearn-linear-model"], [1048, "id3"], [1048, "id14"], [1049, "sklearn-linear-model"], [1049, "id13"], [1050, "sklearn-linear-model"], [1050, "id18"], [1051, "sklearn-linear-model"], [1052, "sklearn-linear-model"], [1052, "id9"], [1053, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1048, "id15"], [1049, "sklearn-manifold"], [1049, "id14"], [1050, "sklearn-manifold"], [1050, "id19"], [1051, "sklearn-manifold"], [1053, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1043, "sklearn-metrics"], [1043, "id17"], [1043, "id33"], [1044, "sklearn-metrics"], [1044, "id4"], [1044, "id16"], [1045, "sklearn-metrics"], [1045, "id2"], [1045, "id8"], [1046, "sklearn-metrics"], [1046, "id10"], [1047, "sklearn-metrics"], [1047, "id2"], [1047, "id12"], [1048, "sklearn-metrics"], [1048, "id16"], [1049, "sklearn-metrics"], [1049, "id3"], [1049, "id15"], [1050, "sklearn-metrics"], [1051, "sklearn-metrics"], [1051, "id2"], [1051, "id14"], [1052, "sklearn-metrics"], [1053, "sklearn-metrics"], [1053, "id4"], [1053, "id10"]], "sklearn.mixture": [[28, null], [1043, "sklearn-mixture"], [1043, "id34"], [1044, "sklearn-mixture"], [1048, "sklearn-mixture"], [1049, "sklearn-mixture"], [1051, "sklearn-mixture"], [1051, "id15"], [1053, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1043, "sklearn-model-selection"], [1043, "id35"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"], [1045, "id9"], [1045, "id13"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1047, "id13"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1050, "id20"], [1051, "sklearn-model-selection"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"], [1053, "id11"]], "sklearn.multiclass": [[30, null], [1044, "sklearn-multiclass"], [1047, "sklearn-multiclass"], [1048, "sklearn-multiclass"], [1049, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1047, "id14"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"], [1053, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1043, "sklearn-naive-bayes"], [1045, "sklearn-naive-bayes"], [1045, "id10"], [1046, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"], [1048, "sklearn-naive-bayes"], [1050, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1043, "sklearn-neighbors"], [1043, "id7"], [1043, "id18"], [1043, "id36"], [1044, "sklearn-neighbors"], [1044, "id5"], [1044, "id17"], [1045, "sklearn-neighbors"], [1045, "id11"], [1047, "sklearn-neighbors"], [1048, "sklearn-neighbors"], [1048, "id4"], [1048, "id17"], [1049, "sklearn-neighbors"], [1050, "sklearn-neighbors"], [1051, "sklearn-neighbors"], [1051, "id16"], [1052, "sklearn-neighbors"], [1053, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1050, "id21"], [1051, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1048, "id18"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1053, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1043, "sklearn-preprocessing"], [1043, "id19"], [1043, "id37"], [1044, "sklearn-preprocessing"], [1044, "id18"], [1045, "sklearn-preprocessing"], [1045, "id12"], [1046, "sklearn-preprocessing"], [1047, "sklearn-preprocessing"], [1047, "id15"], [1048, "sklearn-preprocessing"], [1048, "id19"], [1049, "sklearn-preprocessing"], [1049, "id4"], [1049, "id16"], [1050, "sklearn-preprocessing"], [1050, "id4"], [1050, "id22"], [1051, "sklearn-preprocessing"], [1051, "id17"], [1052, "sklearn-preprocessing"], [1052, "id10"], [1053, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1049, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1045, "sklearn-semi-supervised"], [1046, "sklearn-semi-supervised"], [1047, "sklearn-semi-supervised"], [1047, "id3"], [1047, "id16"], [1051, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1043, "sklearn-svm"], [1043, "id38"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1048, "id20"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1051, "sklearn-svm"], [1053, "sklearn-svm"]], "sklearn.tree": [[40, null], [1043, "sklearn-tree"], [1044, "sklearn-tree"], [1044, "id19"], [1045, "sklearn-tree"], [1046, "sklearn-tree"], [1047, "sklearn-tree"], [1047, "id17"], [1048, "sklearn-tree"], [1048, "id21"], [1049, "sklearn-tree"], [1049, "id5"], [1049, "id17"], [1050, "sklearn-tree"], [1050, "id5"], [1050, "id23"], [1051, "sklearn-tree"], [1051, "id3"], [1051, "id18"], [1052, "sklearn-tree"], [1052, "id11"], [1053, "sklearn-tree"], [1053, "id12"]], "sklearn.utils": [[41, null], [1043, "sklearn-utils"], [1043, "id20"], [1043, "id39"], [1044, "sklearn-utils"], [1045, "sklearn-utils"], [1045, "id14"], [1046, "sklearn-utils"], [1046, "id12"], [1047, "sklearn-utils"], [1047, "id18"], [1048, "sklearn-utils"], [1048, "id5"], [1048, "id22"], [1049, "sklearn-utils"], [1049, "id18"], [1050, "sklearn-utils"], [1050, "id6"], [1050, "id24"], [1051, "sklearn-utils"], [1052, "sklearn-utils"], [1052, "id12"], [1053, "sklearn-utils"], [1053, "id13"]], "sklearn.utils.sparsefuncs": [[1044, "sklearn-utils-sparsefuncs"]], "skops.io": [[404, "skops-io"]], "smacof": [[697, null]], "solido": [[1028, "id23"]], "sort_graph_by_row_values": [[862, null]], "sparse_encode": [[551, null]], "spectral_clustering": [[464, null]], "spectral_embedding": [[698, null]], "t-SNE: The effect of various perplexity values on the shape": [[238, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[1001, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[797, null]], "train_test_split": [[833, null]], "trustworthiness": [[699, null]], "type_of_target": [[966, null]], "unique_labels": [[967, null]], "v_measure_score": [[798, null]], "validate_data": [[992, null]], "validation_curve": [[834, null]], "ward_tree": [[465, null]], "weighted_mode": [[953, null]], "zero_one_loss": [[799, null]], "\u201cStatlog\u201d German credit dataset": [[265, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.default_tags", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.default_tags.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[392, "term-1d", true]], "1d array": [[392, "term-1d-array", true]], "2d": [[392, "term-2d", true]], "2d array": [[392, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[468, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[941, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[392, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[929, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[556, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[557, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[961, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[456, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[442, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[443, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[942, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[943, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[944, "sklearn.utils.discovery.all_functions", false]], "api": [[392, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[647, "sklearn.linear_model.ARDRegression", false]], "array-like": [[392, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[931, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[932, "sklearn.utils.assert_all_finite", false]], "attribute": [[392, "term-attribute", true]], "attributes": [[392, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[709, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[964, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[392, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[847, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[424, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[800, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[648, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[842, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[863, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[425, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[425, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[453, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[455, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.Binarizer", false]], "binary": [[392, "term-binary", true]], "birch (class in sklearn.cluster)": [[444, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[445, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[712, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[922, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[439, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[441, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[440, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[392, "term-callable", true]], "categorical feature": [[392, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[934, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[935, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[945, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[639, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[987, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[988, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[936, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[937, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[714, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[989, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[933, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[715, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[392, "term-class_weight", true]], "classes_": [[392, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[596, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[597, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[677, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[678, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[802, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[803, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[806, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[817, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[867, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[716, "sklearn.metrics.classification_report", false]], "classifier": [[392, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[838, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[427, "sklearn.base.ClassifierMixin", false]], "classifiers": [[392, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[923, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[426, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[488, "sklearn.datasets.clear_data_home", false]], "clone": [[392, "term-clone", true]], "clone() (in module sklearn.base)": [[435, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[392, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[457, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[458, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[392, "term-clusterer", true]], "clusterers": [[392, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[428, "sklearn.base.ClusterMixin", false]], "coef_": [[392, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[909, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[910, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[911, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[912, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[913, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[990, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[466, "sklearn.compose.ColumnTransformer", false]], "common tests": [[392, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[844, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.completeness_score", false]], "components_": [[392, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[938, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[459, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[939, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[470, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[721, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[392, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[959, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[717, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[392, "term-continuous", true]], "continuous multi-output": [[392, "term-continuous-multi-output", true]], "continuous multioutput": [[392, "term-continuous-multioutput", true]], "convergencewarning": [[574, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[591, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[723, "sklearn.metrics.coverage_error", false]], "cross fitting": [[392, "term-0", true]], "cross validation": [[392, "term-1", true]], "cross-fitting": [[392, "term-cross-fitting", true]], "cross-validation": [[392, "term-cross-validation", true]], "cross-validation estimator": [[392, "term-cross-validation-estimator", true]], "cross-validation generator": [[392, "term-cross-validation-generator", true]], "cross-validation splitter": [[392, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.cross_validate", false]], "cv": [[392, "term-cv", true]], "cv splitter": [[392, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[392, "term-data-leakage", true]], "data type": [[392, "term-data-type", true]], "dataconversionwarning": [[575, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[576, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[446, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[421, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[448, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.dcg_score", false]], "decision_function": [[392, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[634, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[915, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[916, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "default_tags() (in module sklearn.utils)": [[940, "sklearn.utils.default_tags", false]], "delayed() (in module sklearn.utils.parallel)": [[970, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[392, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[948, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[429, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[941, "sklearn.utils.deprecated", false]], "deprecation": [[392, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[730, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[548, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[549, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[534, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[584, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[392, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[702, "sklearn.metrics.DistanceMetric", false]], "docstring": [[392, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[392, "term-double-underscore", true]], "double underscore notation": [[392, "term-double-underscore-notation", true]], "dtype": [[392, "term-dtype", true]], "duck typing": [[392, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[554, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[555, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[489, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[392, "term-early-stopping", true]], "efficiencywarning": [[577, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[649, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[471, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[392, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[479, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[472, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[460, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[392, "term-estimator", true]], "estimator instance": [[392, "term-estimator-instance", true]], "estimator tags": [[392, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[947, "sklearn.utils.estimator_html_repr", false]], "estimators": [[392, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[558, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[559, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[560, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[561, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[566, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[567, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[568, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[569, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[392, "term-evaluation-metric", true]], "evaluation metrics": [[392, "term-evaluation-metrics", true]], "examples": [[392, "term-examples", true]], "experimental": [[392, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[919, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[920, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[917, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[918, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[535, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[949, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[536, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[422, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.fbeta_score", false]], "feature": [[392, "term-feature", true]], "feature extractor": [[392, "term-feature-extractor", true]], "feature extractors": [[392, "term-feature-extractors", true]], "feature vector": [[392, "term-feature-vector", true]], "feature_importances_": [[392, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[556, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[557, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[560, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[561, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[562, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[563, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[567, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[568, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[569, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[915, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[916, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[917, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[918, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[866, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[867, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[447, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[585, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[392, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[866, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[501, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[392, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[442, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[443, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[446, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[448, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[450, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[452, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[453, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[454, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[455, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[466, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[467, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[487, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[534, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[545, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[559, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[392, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[447, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[428, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[432, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[442, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[443, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[446, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[448, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[450, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[452, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[454, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[392, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[434, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[466, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[487, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[534, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[545, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[578, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[392, "term-fitted", true]], "fitting": [[392, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[802, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[440, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[634, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[635, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[700, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[701, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[703, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[704, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[705, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[809, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[826, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[440, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[700, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[701, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[703, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[704, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[705, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.fromkeys", false]], "function": [[392, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[392, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[651, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[801, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[845, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[899, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[954, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[955, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[629, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[502, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[392, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[426, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[431, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[466, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[487, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[534, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[545, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[425, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[453, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[455, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[424, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[442, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[443, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[446, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[448, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[450, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[452, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[453, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[454, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[455, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[466, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[467, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[487, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[534, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[545, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[559, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[702, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[392, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[392, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[424, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[442, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[443, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[446, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[448, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[450, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[452, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[453, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[454, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[455, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[466, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[467, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[487, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[534, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[545, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[559, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[962, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[735, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[736, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[425, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[453, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[455, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[425, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[453, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[455, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[956, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[480, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[473, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[474, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[588, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[803, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[804, "sklearn.model_selection.GroupKFold", false]], "groups": [[392, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[805, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[806, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[807, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[737, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[991, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[592, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[448, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[739, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[740, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[652, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[392, "term-hyper-parameter", true]], "hyperparameter": [[392, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[589, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[392, "term-imputation", true]], "impute": [[392, "term-impute", true]], "inconsistentversionwarning": [[579, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[978, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[537, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[392, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[958, "sklearn.utils.indexable", false]], "induction": [[392, "term-induction", true]], "inductive": [[392, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[880, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[881, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[888, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[979, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[980, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[985, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[986, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[981, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[982, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[983, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[924, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[436, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[437, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[965, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[438, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[566, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[691, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[640, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[638, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[630, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.jaccard_score", false]], "joblib": [[392, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[901, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[461, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[848, "sklearn.neighbors.KDTree", false]], "kernel": [[392, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[852, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[538, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[646, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[808, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[449, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[462, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[860, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[850, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[851, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[631, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[914, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[392, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[743, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[902, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[392, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[903, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[653, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[655, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[539, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[392, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[809, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[811, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[812, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[813, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[481, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[482, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[475, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[907, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[908, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[513, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[696, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[692, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[853, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[744, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[468, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[469, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[868, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[745, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[533, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[869, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[746, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[747, "sklearn.metrics.max_error", false]], "max_iter": [[392, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[693, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[463, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[984, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[450, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[756, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[392, "term-memmapping", true]], "memory": [[392, "term-memory", true]], "memory map": [[392, "term-memory-map", true]], "memory mapping": [[392, "term-memory-mapping", true]], "meta-estimator": [[392, "term-meta-estimator", true]], "meta-estimators": [[392, "term-meta-estimators", true]], "metadata": [[392, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[959, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[960, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[392, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[430, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[392, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[961, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[392, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[930, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[476, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[451, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[541, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[542, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[392, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[632, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[864, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[865, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [582, "module-sklearn.experimental.enable_halving_search_cv", false], [583, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[392, "term-multi-class", true]], "multi-class multi-output": [[392, "term-multi-class-multi-output", true]], "multi-label": [[392, "term-multi-label", true]], "multi-output": [[392, "term-multi-output", true]], "multi-output continuous": [[392, "term-multi-output-continuous", true]], "multi-output multi-class": [[392, "term-multi-output-multi-class", true]], "multiclass": [[392, "term-multiclass", true]], "multiclass multioutput": [[392, "term-multiclass-multioutput", true]], "multilabel": [[392, "term-multilabel", true]], "multilabel indicator matrices": [[392, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[392, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[836, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[757, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[846, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[392, "term-multioutput", true]], "multioutput continuous": [[392, "term-multioutput-continuous", true]], "multioutput multiclass": [[392, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[839, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[840, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[663, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[665, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[968, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[611, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[758, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[835, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[836, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[392, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[545, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[392, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[467, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[545, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[570, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[571, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[572, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[573, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[600, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[803, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[806, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[817, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[866, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[867, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[392, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[392, "term-n_iter_no_change", true]], "n_jobs": [[392, "term-n_jobs", true]], "n_outputs": [[392, "term-n_outputs", true]], "n_samples": [[392, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[909, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[910, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[911, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[912, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[913, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[392, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[570, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[571, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[572, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[573, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[867, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[466, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[392, "term-narrative-docs", true]], "narrative documentation": [[392, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[759, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[854, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[855, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[543, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[550, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[760, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[580, "sklearn.exceptions.NotFittedError", false]], "np": [[392, "term-np", true]], "nusvc (class in sklearn.svm)": [[909, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[910, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[477, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[423, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[911, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[431, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[835, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[836, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[392, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[452, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[392, "term-out-of-core", true]], "outlier detector": [[392, "term-outlier-detector", true]], "outlier detectors": [[392, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[432, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[837, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[392, "term-outputs", true]], "pair": [[392, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[718, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[392, "term-pairwise-metric", true]], "pairwise metrics": [[392, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[781, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[782, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[783, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[784, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[969, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[971, "sklearn.utils.parallel_backend", false]], "param": [[392, "term-param", true]], "parameter": [[392, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[814, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[392, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[815, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[946, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[392, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[636, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[392, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[635, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[649, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[650, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[655, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[656, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[665, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[544, "sklearn.decomposition.PCA", false]], "pd": [[392, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[671, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[637, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[867, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[440, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[634, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[635, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[700, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[701, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[703, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[704, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[705, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[809, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[826, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[921, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[485, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[486, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[487, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[672, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[392, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[882, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[785, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[786, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[787, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[703, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[392, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[816, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[392, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[442, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[450, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[467, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[559, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[392, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[392, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[704, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[392, "term-predictor", true]], "predictors": [[392, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[909, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[912, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[909, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[912, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[963, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[673, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[612, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[861, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.rand_score", false]], "random_state": [[392, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[950, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[951, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[817, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[569, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[644, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[590, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[392, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[973, "sklearn.utils.register_parallel_backend", false]], "regressor": [[392, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[841, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[433, "sklearn.base.RegressorMixin", false]], "regressors": [[392, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[925, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[818, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[974, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[675, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[677, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[678, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[676, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[792, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[705, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[793, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[794, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[392, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[975, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[952, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[976, "sklearn.utils.safe_sqr", false]], "sample": [[392, "term-sample", true]], "sample properties": [[392, "term-sample-properties", true]], "sample property": [[392, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[392, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[972, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[392, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[392, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[392, "term-scikit-learn-contrib", true]], "score": [[392, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[427, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[429, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[433, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[467, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[559, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[392, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[392, "term-scorer", true]], "scoring": [[392, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[392, "term-semi-supervised", true]], "semi-supervised learning": [[392, "term-semi-supervised-learning", true]], "semisupervised": [[392, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[905, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[446, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[559, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[434, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[466, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[487, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[534, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[545, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[392, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[424, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[442, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[443, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[446, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[448, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[450, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[452, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[453, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[454, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[455, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[466, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[467, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[487, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[534, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[545, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[559, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[566, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[439, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[467, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[471, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[472, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[473, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[474, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[475, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[476, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[477, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[478, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[553, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[554, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[555, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[558, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[559, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[560, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[561, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[567, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[568, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[679, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[680, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[681, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[906, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[483, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[478, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[977, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[820, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[795, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[796, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[633, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[957, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[582, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[583, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[392, "term-SLEP", true]], "sleps": [[392, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[697, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[862, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[392, "term-sparse-graph", true]], "sparse matrix": [[392, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[649, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[655, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[663, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[665, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[551, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[545, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[546, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[900, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[464, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[698, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[453, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[454, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[455, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[694, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.SplineTransformer", false]], "split": [[392, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[570, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[571, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[563, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[565, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[562, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[564, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[556, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[557, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[392, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[821, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[822, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[823, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[392, "term-supervised", true]], "supervised learning": [[392, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[912, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[913, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[926, "sklearn.utils.Tags", false]], "target": [[392, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[392, "term-targets", true]], "targettags (class in sklearn.utils)": [[927, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[593, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[682, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[600, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[824, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[797, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.train_test_split", false]], "transduction": [[392, "term-transduction", true]], "transductive": [[392, "term-transductive", true]], "transform": [[392, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[444, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[445, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[447, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[449, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[451, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[466, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[484, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[485, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[486, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[487, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[534, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[535, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[536, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[537, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[538, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[539, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[540, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[541, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[542, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[543, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[544, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[545, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[546, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[547, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[552, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[569, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[570, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[571, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[572, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[573, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[584, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[585, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[586, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[591, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[592, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[593, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[594, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[595, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[596, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[597, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[598, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[599, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[600, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[601, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[602, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[604, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[603, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[605, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[606, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[467, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[392, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[434, "sklearn.base.TransformerMixin", false]], "transformers": [[392, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[928, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[547, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[699, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[695, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[683, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[966, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[581, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[967, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[392, "term-unlabeled", true]], "unlabeled data": [[392, "term-unlabeled-data", true]], "unsupervised": [[392, "term-unsupervised", true]], "unsupervised learning": [[392, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[798, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[992, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[826, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[392, "term-vectorizer", true]], "vectorizers": [[392, "term-vectorizers", true]], "verbose": [[392, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[572, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[573, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[465, "sklearn.cluster.ward_tree", false]], "warm_start": [[392, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[953, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[392, "term-X", true]], "xt": [[392, "term-Xt", true]], "y": [[392, "term-Y", true], [392, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[799, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [470, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [629, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [905, 4, 1, "", "set_config"], [906, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[424, 1, 1, "", "BaseEstimator"], [425, 1, 1, "", "BiclusterMixin"], [426, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [427, 1, 1, "", "ClassifierMixin"], [428, 1, 1, "", "ClusterMixin"], [429, 1, 1, "", "DensityMixin"], [430, 1, 1, "", "MetaEstimatorMixin"], [431, 1, 1, "", "OneToOneFeatureMixin"], [432, 1, 1, "", "OutlierMixin"], [433, 1, 1, "", "RegressorMixin"], [434, 1, 1, "", "TransformerMixin"], [435, 4, 1, "", "clone"], [436, 4, 1, "", "is_classifier"], [437, 4, 1, "", "is_clusterer"], [438, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[424, 2, 1, "", "get_metadata_routing"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[425, 3, 1, "", "biclusters_"], [425, 2, 1, "", "get_indices"], [425, 2, 1, "", "get_shape"], [425, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[426, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[427, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[428, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[429, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[431, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[432, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[433, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[434, 2, 1, "", "fit_transform"], [434, 2, 1, "", "set_output"]], "sklearn.calibration": [[439, 1, 1, "", "CalibratedClassifierCV"], [440, 1, 1, "", "CalibrationDisplay"], [441, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "predict"], [439, 2, 1, "", "predict_proba"], [439, 2, 1, "", "score"], [439, 2, 1, "", "set_fit_request"], [439, 2, 1, "", "set_params"], [439, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[440, 2, 1, "", "from_estimator"], [440, 2, 1, "", "from_predictions"], [440, 2, 1, "", "plot"]], "sklearn.cluster": [[442, 1, 1, "", "AffinityPropagation"], [443, 1, 1, "", "AgglomerativeClustering"], [444, 1, 1, "", "Birch"], [445, 1, 1, "", "BisectingKMeans"], [446, 1, 1, "", "DBSCAN"], [447, 1, 1, "", "FeatureAgglomeration"], [448, 1, 1, "", "HDBSCAN"], [449, 1, 1, "", "KMeans"], [450, 1, 1, "", "MeanShift"], [451, 1, 1, "", "MiniBatchKMeans"], [452, 1, 1, "", "OPTICS"], [453, 1, 1, "", "SpectralBiclustering"], [454, 1, 1, "", "SpectralClustering"], [455, 1, 1, "", "SpectralCoclustering"], [456, 4, 1, "", "affinity_propagation"], [457, 4, 1, "", "cluster_optics_dbscan"], [458, 4, 1, "", "cluster_optics_xi"], [459, 4, 1, "", "compute_optics_graph"], [421, 4, 1, "", "dbscan"], [460, 4, 1, "", "estimate_bandwidth"], [461, 4, 1, "", "k_means"], [462, 4, 1, "", "kmeans_plusplus"], [463, 4, 1, "", "mean_shift"], [464, 4, 1, "", "spectral_clustering"], [465, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_feature_names_out"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "partial_fit"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "score"], [445, 2, 1, "", "set_fit_request"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "set_score_request"], [445, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "set_fit_request"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[447, 2, 1, "", "fit"], [447, 3, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "inverse_transform"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[448, 2, 1, "", "dbscan_clustering"], [448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_score_request"], [449, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "predict"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "fit_transform"], [451, 2, 1, "", "get_feature_names_out"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "partial_fit"], [451, 2, 1, "", "predict"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_fit_request"], [451, 2, 1, "", "set_output"], [451, 2, 1, "", "set_params"], [451, 2, 1, "", "set_partial_fit_request"], [451, 2, 1, "", "set_score_request"], [451, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[453, 3, 1, "", "biclusters_"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_indices"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_shape"], [453, 2, 1, "", "get_submatrix"], [453, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[455, 3, 1, "", "biclusters_"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "get_indices"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "get_shape"], [455, 2, 1, "", "get_submatrix"], [455, 2, 1, "", "set_params"]], "sklearn.compose": [[466, 1, 1, "", "ColumnTransformer"], [467, 1, 1, "", "TransformedTargetRegressor"], [468, 1, 1, "", "make_column_selector"], [469, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[466, 2, 1, "", "fit"], [466, 2, 1, "", "fit_transform"], [466, 2, 1, "", "get_feature_names_out"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 3, 1, "", "named_transformers_"], [466, 2, 1, "", "set_output"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[467, 2, 1, "", "fit"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 3, 1, "", "n_features_in_"], [467, 2, 1, "", "predict"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[468, 2, 1, "", "__call__"]], "sklearn.covariance": [[471, 1, 1, "", "EllipticEnvelope"], [472, 1, 1, "", "EmpiricalCovariance"], [473, 1, 1, "", "GraphicalLasso"], [474, 1, 1, "", "GraphicalLassoCV"], [475, 1, 1, "", "LedoitWolf"], [476, 1, 1, "", "MinCovDet"], [477, 1, 1, "", "OAS"], [478, 1, 1, "", "ShrunkCovariance"], [479, 4, 1, "", "empirical_covariance"], [480, 4, 1, "", "graphical_lasso"], [481, 4, 1, "", "ledoit_wolf"], [482, 4, 1, "", "ledoit_wolf_shrinkage"], [423, 4, 1, "", "oas"], [483, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[471, 2, 1, "", "correct_covariance"], [471, 2, 1, "", "decision_function"], [471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "fit_predict"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "predict"], [471, 2, 1, "", "reweight_covariance"], [471, 2, 1, "", "score"], [471, 2, 1, "", "score_samples"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[476, 2, 1, "", "correct_covariance"], [476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "reweight_covariance"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[478, 2, 1, "", "error_norm"], [478, 2, 1, "", "fit"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "get_precision"], [478, 2, 1, "", "mahalanobis"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[484, 1, 1, "", "CCA"], [485, 1, 1, "", "PLSCanonical"], [486, 1, 1, "", "PLSRegression"], [487, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "predict"], [484, 2, 1, "", "score"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "set_predict_request"], [484, 2, 1, "", "set_score_request"], [484, 2, 1, "", "set_transform_request"], [484, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_metadata_routing"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "inverse_transform"], [485, 2, 1, "", "predict"], [485, 2, 1, "", "score"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "set_predict_request"], [485, 2, 1, "", "set_score_request"], [485, 2, 1, "", "set_transform_request"], [485, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[486, 2, 1, "", "fit"], [486, 2, 1, "", "fit_transform"], [486, 2, 1, "", "get_feature_names_out"], [486, 2, 1, "", "get_metadata_routing"], [486, 2, 1, "", "get_params"], [486, 2, 1, "", "inverse_transform"], [486, 2, 1, "", "predict"], [486, 2, 1, "", "score"], [486, 2, 1, "", "set_output"], [486, 2, 1, "", "set_params"], [486, 2, 1, "", "set_predict_request"], [486, 2, 1, "", "set_score_request"], [486, 2, 1, "", "set_transform_request"], [486, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[487, 2, 1, "", "fit"], [487, 2, 1, "", "fit_transform"], [487, 2, 1, "", "get_feature_names_out"], [487, 2, 1, "", "get_metadata_routing"], [487, 2, 1, "", "get_params"], [487, 2, 1, "", "set_output"], [487, 2, 1, "", "set_params"], [487, 2, 1, "", "transform"]], "sklearn.datasets": [[488, 4, 1, "", "clear_data_home"], [489, 4, 1, "", "dump_svmlight_file"], [490, 4, 1, "", "fetch_20newsgroups"], [491, 4, 1, "", "fetch_20newsgroups_vectorized"], [492, 4, 1, "", "fetch_california_housing"], [493, 4, 1, "", "fetch_covtype"], [494, 4, 1, "", "fetch_file"], [495, 4, 1, "", "fetch_kddcup99"], [496, 4, 1, "", "fetch_lfw_pairs"], [497, 4, 1, "", "fetch_lfw_people"], [498, 4, 1, "", "fetch_olivetti_faces"], [499, 4, 1, "", "fetch_openml"], [500, 4, 1, "", "fetch_rcv1"], [501, 4, 1, "", "fetch_species_distributions"], [502, 4, 1, "", "get_data_home"], [503, 4, 1, "", "load_breast_cancer"], [504, 4, 1, "", "load_diabetes"], [505, 4, 1, "", "load_digits"], [506, 4, 1, "", "load_files"], [507, 4, 1, "", "load_iris"], [508, 4, 1, "", "load_linnerud"], [509, 4, 1, "", "load_sample_image"], [510, 4, 1, "", "load_sample_images"], [511, 4, 1, "", "load_svmlight_file"], [512, 4, 1, "", "load_svmlight_files"], [513, 4, 1, "", "load_wine"], [514, 4, 1, "", "make_biclusters"], [515, 4, 1, "", "make_blobs"], [516, 4, 1, "", "make_checkerboard"], [517, 4, 1, "", "make_circles"], [518, 4, 1, "", "make_classification"], [519, 4, 1, "", "make_friedman1"], [520, 4, 1, "", "make_friedman2"], [521, 4, 1, "", "make_friedman3"], [522, 4, 1, "", "make_gaussian_quantiles"], [523, 4, 1, "", "make_hastie_10_2"], [524, 4, 1, "", "make_low_rank_matrix"], [525, 4, 1, "", "make_moons"], [526, 4, 1, "", "make_multilabel_classification"], [527, 4, 1, "", "make_regression"], [528, 4, 1, "", "make_s_curve"], [529, 4, 1, "", "make_sparse_coded_signal"], [530, 4, 1, "", "make_sparse_spd_matrix"], [531, 4, 1, "", "make_sparse_uncorrelated"], [532, 4, 1, "", "make_spd_matrix"], [533, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[534, 1, 1, "", "DictionaryLearning"], [535, 1, 1, "", "FactorAnalysis"], [536, 1, 1, "", "FastICA"], [537, 1, 1, "", "IncrementalPCA"], [538, 1, 1, "", "KernelPCA"], [539, 1, 1, "", "LatentDirichletAllocation"], [540, 1, 1, "", "MiniBatchDictionaryLearning"], [541, 1, 1, "", "MiniBatchNMF"], [542, 1, 1, "", "MiniBatchSparsePCA"], [543, 1, 1, "", "NMF"], [544, 1, 1, "", "PCA"], [545, 1, 1, "", "SparseCoder"], [546, 1, 1, "", "SparsePCA"], [547, 1, 1, "", "TruncatedSVD"], [548, 4, 1, "", "dict_learning"], [549, 4, 1, "", "dict_learning_online"], [422, 4, 1, "", "fastica"], [550, 4, 1, "", "non_negative_factorization"], [551, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_covariance"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "get_precision"], [535, 2, 1, "", "score"], [535, 2, 1, "", "score_samples"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "set_inverse_transform_request"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "set_transform_request"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_covariance"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "get_precision"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "partial_fit"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "set_partial_fit_request"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "partial_fit"], [539, 2, 1, "", "perplexity"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "partial_fit"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "partial_fit"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_covariance"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "get_precision"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "score"], [544, 2, 1, "", "score_samples"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 3, 1, "", "n_components_"], [545, 3, 1, "", "n_features_in_"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "inverse_transform"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[552, 1, 1, "", "LinearDiscriminantAnalysis"], [553, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[552, 2, 1, "", "decision_function"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_log_proba"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_output"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"], [552, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[553, 2, 1, "", "decision_function"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[554, 1, 1, "", "DummyClassifier"], [555, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_predict_request"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[556, 1, 1, "", "AdaBoostClassifier"], [557, 1, 1, "", "AdaBoostRegressor"], [558, 1, 1, "", "BaggingClassifier"], [559, 1, 1, "", "BaggingRegressor"], [560, 1, 1, "", "ExtraTreesClassifier"], [561, 1, 1, "", "ExtraTreesRegressor"], [562, 1, 1, "", "GradientBoostingClassifier"], [563, 1, 1, "", "GradientBoostingRegressor"], [564, 1, 1, "", "HistGradientBoostingClassifier"], [565, 1, 1, "", "HistGradientBoostingRegressor"], [566, 1, 1, "", "IsolationForest"], [567, 1, 1, "", "RandomForestClassifier"], [568, 1, 1, "", "RandomForestRegressor"], [569, 1, 1, "", "RandomTreesEmbedding"], [570, 1, 1, "", "StackingClassifier"], [571, 1, 1, "", "StackingRegressor"], [572, 1, 1, "", "VotingClassifier"], [573, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[556, 2, 1, "", "decision_function"], [556, 3, 1, "", "feature_importances_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"], [556, 2, 1, "", "staged_decision_function"], [556, 2, 1, "", "staged_predict"], [556, 2, 1, "", "staged_predict_proba"], [556, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "staged_predict"], [557, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[558, 2, 1, "", "decision_function"], [558, 3, 1, "", "estimators_samples_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[559, 3, 1, "", "estimators_samples_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[560, 2, 1, "", "apply"], [560, 2, 1, "", "decision_path"], [560, 3, 1, "", "estimators_samples_"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[561, 2, 1, "", "apply"], [561, 2, 1, "", "decision_path"], [561, 3, 1, "", "estimators_samples_"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[562, 2, 1, "", "apply"], [562, 2, 1, "", "decision_function"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_log_proba"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_decision_function"], [562, 2, 1, "", "staged_predict"], [562, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[563, 2, 1, "", "apply"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[564, 2, 1, "", "decision_function"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 3, 1, "", "n_iter_"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"], [564, 2, 1, "", "staged_decision_function"], [564, 2, 1, "", "staged_predict"], [564, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "n_iter_"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[566, 2, 1, "", "decision_function"], [566, 3, 1, "", "estimators_samples_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_predict"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score_samples"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[567, 2, 1, "", "apply"], [567, 2, 1, "", "decision_path"], [567, 3, 1, "", "estimators_samples_"], [567, 3, 1, "", "feature_importances_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_log_proba"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[568, 2, 1, "", "apply"], [568, 2, 1, "", "decision_path"], [568, 3, 1, "", "estimators_samples_"], [568, 3, 1, "", "feature_importances_"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[569, 2, 1, "", "apply"], [569, 2, 1, "", "decision_path"], [569, 3, 1, "", "estimators_samples_"], [569, 3, 1, "", "feature_importances_"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[570, 2, 1, "", "decision_function"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_features_in_"], [570, 3, 1, "", "named_estimators"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "predict_proba"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "n_features_in_"], [571, 3, 1, "", "named_estimators"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"], [571, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 3, 1, "", "n_features_in_"], [572, 3, 1, "", "named_estimators"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "predict_proba"], [572, 2, 1, "", "score"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "set_score_request"], [572, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 3, 1, "", "n_features_in_"], [573, 3, 1, "", "named_estimators"], [573, 2, 1, "", "predict"], [573, 2, 1, "", "score"], [573, 2, 1, "", "set_fit_request"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "set_score_request"], [573, 2, 1, "", "transform"]], "sklearn.exceptions": [[574, 5, 1, "", "ConvergenceWarning"], [575, 5, 1, "", "DataConversionWarning"], [576, 5, 1, "", "DataDimensionalityWarning"], [577, 5, 1, "", "EfficiencyWarning"], [578, 5, 1, "", "FitFailedWarning"], [579, 5, 1, "", "InconsistentVersionWarning"], [580, 5, 1, "", "NotFittedError"], [581, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[582, 0, 0, "-", "enable_halving_search_cv"], [583, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[584, 1, 1, "", "DictVectorizer"], [585, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "restrict"], [584, 2, 1, "", "set_inverse_transform_request"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "set_transform_request"], [585, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[586, 1, 1, "", "PatchExtractor"], [587, 4, 1, "", "extract_patches_2d"], [588, 4, 1, "", "grid_to_graph"], [589, 4, 1, "", "img_to_graph"], [590, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[591, 1, 1, "", "CountVectorizer"], [592, 1, 1, "", "HashingVectorizer"], [593, 1, 1, "", "TfidfTransformer"], [594, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[591, 2, 1, "", "build_analyzer"], [591, 2, 1, "", "build_preprocessor"], [591, 2, 1, "", "build_tokenizer"], [591, 2, 1, "", "decode"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_stop_words"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_fit_request"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "set_transform_request"], [591, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[592, 2, 1, "", "build_analyzer"], [592, 2, 1, "", "build_preprocessor"], [592, 2, 1, "", "build_tokenizer"], [592, 2, 1, "", "decode"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_stop_words"], [592, 2, 1, "", "partial_fit"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "set_transform_request"], [593, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[594, 2, 1, "", "build_analyzer"], [594, 2, 1, "", "build_preprocessor"], [594, 2, 1, "", "build_tokenizer"], [594, 2, 1, "", "decode"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_stop_words"], [594, 3, 1, "", "idf_"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_fit_request"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "set_transform_request"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection": [[595, 1, 1, "", "GenericUnivariateSelect"], [596, 1, 1, "", "RFE"], [597, 1, 1, "", "RFECV"], [598, 1, 1, "", "SelectFdr"], [599, 1, 1, "", "SelectFpr"], [600, 1, 1, "", "SelectFromModel"], [601, 1, 1, "", "SelectFwe"], [602, 1, 1, "", "SelectKBest"], [603, 1, 1, "", "SelectPercentile"], [604, 1, 1, "", "SelectorMixin"], [605, 1, 1, "", "SequentialFeatureSelector"], [606, 1, 1, "", "VarianceThreshold"], [607, 4, 1, "", "chi2"], [608, 4, 1, "", "f_classif"], [609, 4, 1, "", "f_regression"], [610, 4, 1, "", "mutual_info_classif"], [611, 4, 1, "", "mutual_info_regression"], [612, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[596, 3, 1, "", "classes_"], [596, 2, 1, "", "decision_function"], [596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "predict"], [596, 2, 1, "", "predict_log_proba"], [596, 2, 1, "", "predict_proba"], [596, 2, 1, "", "score"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[597, 3, 1, "", "classes_"], [597, 2, 1, "", "decision_function"], [597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "predict"], [597, 2, 1, "", "predict_log_proba"], [597, 2, 1, "", "predict_proba"], [597, 2, 1, "", "score"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 3, 1, "", "n_features_in_"], [600, 2, 1, "", "partial_fit"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "threshold_"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[613, 1, 1, "", "GaussianProcessClassifier"], [614, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "get_metadata_routing"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "kernel_"], [613, 2, 1, "", "log_marginal_likelihood"], [613, 2, 1, "", "predict"], [613, 2, 1, "", "predict_proba"], [613, 2, 1, "", "score"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "get_metadata_routing"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "log_marginal_likelihood"], [614, 2, 1, "", "predict"], [614, 2, 1, "", "sample_y"], [614, 2, 1, "", "score"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "set_predict_request"], [614, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[615, 1, 1, "", "CompoundKernel"], [616, 1, 1, "", "ConstantKernel"], [617, 1, 1, "", "DotProduct"], [618, 1, 1, "", "ExpSineSquared"], [619, 1, 1, "", "Exponentiation"], [620, 1, 1, "", "Hyperparameter"], [621, 1, 1, "", "Kernel"], [622, 1, 1, "", "Matern"], [623, 1, 1, "", "PairwiseKernel"], [624, 1, 1, "", "Product"], [625, 1, 1, "", "RBF"], [626, 1, 1, "", "RationalQuadratic"], [627, 1, 1, "", "Sum"], [628, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameter_length_scale"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[620, 6, 1, "", "bounds"], [620, 2, 1, "", "count"], [620, 6, 1, "", "fixed"], [620, 2, 1, "", "index"], [620, 6, 1, "", "n_elements"], [620, 6, 1, "", "name"], [620, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.impute": [[630, 1, 1, "", "IterativeImputer"], [631, 1, 1, "", "KNNImputer"], [632, 1, 1, "", "MissingIndicator"], [633, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "inverse_transform"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.inspection": [[634, 1, 1, "", "DecisionBoundaryDisplay"], [635, 1, 1, "", "PartialDependenceDisplay"], [636, 4, 1, "", "partial_dependence"], [637, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[634, 2, 1, "", "from_estimator"], [634, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[635, 2, 1, "", "from_estimator"], [635, 2, 1, "", "plot"]], "sklearn.isotonic": [[638, 1, 1, "", "IsotonicRegression"], [639, 4, 1, "", "check_increasing"], [640, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_fit_request"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "set_predict_request"], [638, 2, 1, "", "set_score_request"], [638, 2, 1, "", "set_transform_request"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[641, 1, 1, "", "AdditiveChi2Sampler"], [642, 1, 1, "", "Nystroem"], [643, 1, 1, "", "PolynomialCountSketch"], [644, 1, 1, "", "RBFSampler"], [645, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "fit_transform"], [644, 2, 1, "", "get_feature_names_out"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "set_output"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "fit_transform"], [645, 2, 1, "", "get_feature_names_out"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "set_output"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[646, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[647, 1, 1, "", "ARDRegression"], [648, 1, 1, "", "BayesianRidge"], [649, 1, 1, "", "ElasticNet"], [650, 1, 1, "", "ElasticNetCV"], [651, 1, 1, "", "GammaRegressor"], [652, 1, 1, "", "HuberRegressor"], [653, 1, 1, "", "Lars"], [654, 1, 1, "", "LarsCV"], [655, 1, 1, "", "Lasso"], [656, 1, 1, "", "LassoCV"], [657, 1, 1, "", "LassoLars"], [658, 1, 1, "", "LassoLarsCV"], [659, 1, 1, "", "LassoLarsIC"], [660, 1, 1, "", "LinearRegression"], [661, 1, 1, "", "LogisticRegression"], [662, 1, 1, "", "LogisticRegressionCV"], [663, 1, 1, "", "MultiTaskElasticNet"], [664, 1, 1, "", "MultiTaskElasticNetCV"], [665, 1, 1, "", "MultiTaskLasso"], [666, 1, 1, "", "MultiTaskLassoCV"], [667, 1, 1, "", "OrthogonalMatchingPursuit"], [668, 1, 1, "", "OrthogonalMatchingPursuitCV"], [669, 1, 1, "", "PassiveAggressiveClassifier"], [670, 1, 1, "", "PassiveAggressiveRegressor"], [671, 1, 1, "", "Perceptron"], [672, 1, 1, "", "PoissonRegressor"], [673, 1, 1, "", "QuantileRegressor"], [674, 1, 1, "", "RANSACRegressor"], [675, 1, 1, "", "Ridge"], [676, 1, 1, "", "RidgeCV"], [677, 1, 1, "", "RidgeClassifier"], [678, 1, 1, "", "RidgeClassifierCV"], [679, 1, 1, "", "SGDClassifier"], [680, 1, 1, "", "SGDOneClassSVM"], [681, 1, 1, "", "SGDRegressor"], [682, 1, 1, "", "TheilSenRegressor"], [683, 1, 1, "", "TweedieRegressor"], [684, 4, 1, "", "enet_path"], [685, 4, 1, "", "lars_path"], [686, 4, 1, "", "lars_path_gram"], [687, 4, 1, "", "lasso_path"], [688, 4, 1, "", "orthogonal_mp"], [689, 4, 1, "", "orthogonal_mp_gram"], [690, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_predict_request"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_predict_request"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "path"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"], [649, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "path"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "path"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"], [655, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "path"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[661, 2, 1, "", "decision_function"], [661, 2, 1, "", "densify"], [661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "predict_log_proba"], [661, 2, 1, "", "predict_proba"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"], [661, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[662, 2, 1, "", "decision_function"], [662, 2, 1, "", "densify"], [662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "predict_log_proba"], [662, 2, 1, "", "predict_proba"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"], [662, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "path"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"], [663, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "path"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "path"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"], [665, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "path"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[669, 2, 1, "", "decision_function"], [669, 2, 1, "", "densify"], [669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "partial_fit"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_partial_fit_request"], [669, 2, 1, "", "set_score_request"], [669, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[670, 2, 1, "", "densify"], [670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "partial_fit"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_partial_fit_request"], [670, 2, 1, "", "set_score_request"], [670, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[671, 2, 1, "", "decision_function"], [671, 2, 1, "", "densify"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "partial_fit"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_partial_fit_request"], [671, 2, 1, "", "set_score_request"], [671, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[677, 3, 1, "", "classes_"], [677, 2, 1, "", "decision_function"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[678, 3, 1, "", "classes_"], [678, 2, 1, "", "decision_function"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[679, 2, 1, "", "decision_function"], [679, 2, 1, "", "densify"], [679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "partial_fit"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "predict_log_proba"], [679, 2, 1, "", "predict_proba"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_partial_fit_request"], [679, 2, 1, "", "set_score_request"], [679, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[680, 2, 1, "", "decision_function"], [680, 2, 1, "", "densify"], [680, 2, 1, "", "fit"], [680, 2, 1, "", "fit_predict"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "partial_fit"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score_samples"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_partial_fit_request"], [680, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[681, 2, 1, "", "densify"], [681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "partial_fit"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_partial_fit_request"], [681, 2, 1, "", "set_score_request"], [681, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[682, 2, 1, "", "fit"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[691, 1, 1, "", "Isomap"], [692, 1, 1, "", "LocallyLinearEmbedding"], [693, 1, 1, "", "MDS"], [694, 1, 1, "", "SpectralEmbedding"], [695, 1, 1, "", "TSNE"], [696, 4, 1, "", "locally_linear_embedding"], [697, 4, 1, "", "smacof"], [698, 4, 1, "", "spectral_embedding"], [699, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_feature_names_out"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "reconstruction_error"], [691, 2, 1, "", "set_output"], [691, 2, 1, "", "set_params"], [691, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_feature_names_out"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "set_output"], [692, 2, 1, "", "set_params"], [692, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[693, 2, 1, "", "fit"], [693, 2, 1, "", "fit_transform"], [693, 2, 1, "", "get_metadata_routing"], [693, 2, 1, "", "get_params"], [693, 2, 1, "", "set_fit_request"], [693, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[694, 2, 1, "", "fit"], [694, 2, 1, "", "fit_transform"], [694, 2, 1, "", "get_metadata_routing"], [694, 2, 1, "", "get_params"], [694, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[695, 2, 1, "", "fit"], [695, 2, 1, "", "fit_transform"], [695, 2, 1, "", "get_feature_names_out"], [695, 2, 1, "", "get_metadata_routing"], [695, 2, 1, "", "get_params"], [695, 2, 1, "", "set_output"], [695, 2, 1, "", "set_params"]], "sklearn.metrics": [[700, 1, 1, "", "ConfusionMatrixDisplay"], [701, 1, 1, "", "DetCurveDisplay"], [702, 1, 1, "", "DistanceMetric"], [703, 1, 1, "", "PrecisionRecallDisplay"], [704, 1, 1, "", "PredictionErrorDisplay"], [705, 1, 1, "", "RocCurveDisplay"], [706, 4, 1, "", "accuracy_score"], [707, 4, 1, "", "adjusted_mutual_info_score"], [708, 4, 1, "", "adjusted_rand_score"], [709, 4, 1, "", "auc"], [710, 4, 1, "", "average_precision_score"], [711, 4, 1, "", "balanced_accuracy_score"], [712, 4, 1, "", "brier_score_loss"], [713, 4, 1, "", "calinski_harabasz_score"], [714, 4, 1, "", "check_scoring"], [715, 4, 1, "", "class_likelihood_ratios"], [716, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [719, 4, 1, "", "cohen_kappa_score"], [720, 4, 1, "", "completeness_score"], [721, 4, 1, "", "confusion_matrix"], [722, 4, 1, "", "consensus_score"], [723, 4, 1, "", "coverage_error"], [724, 4, 1, "", "d2_absolute_error_score"], [725, 4, 1, "", "d2_log_loss_score"], [726, 4, 1, "", "d2_pinball_score"], [727, 4, 1, "", "d2_tweedie_score"], [728, 4, 1, "", "davies_bouldin_score"], [729, 4, 1, "", "dcg_score"], [730, 4, 1, "", "det_curve"], [731, 4, 1, "", "explained_variance_score"], [732, 4, 1, "", "f1_score"], [733, 4, 1, "", "fbeta_score"], [734, 4, 1, "", "fowlkes_mallows_score"], [735, 4, 1, "", "get_scorer"], [736, 4, 1, "", "get_scorer_names"], [737, 4, 1, "", "hamming_loss"], [738, 4, 1, "", "hinge_loss"], [739, 4, 1, "", "homogeneity_completeness_v_measure"], [740, 4, 1, "", "homogeneity_score"], [741, 4, 1, "", "jaccard_score"], [742, 4, 1, "", "label_ranking_average_precision_score"], [743, 4, 1, "", "label_ranking_loss"], [744, 4, 1, "", "log_loss"], [745, 4, 1, "", "make_scorer"], [746, 4, 1, "", "matthews_corrcoef"], [747, 4, 1, "", "max_error"], [748, 4, 1, "", "mean_absolute_error"], [749, 4, 1, "", "mean_absolute_percentage_error"], [750, 4, 1, "", "mean_gamma_deviance"], [751, 4, 1, "", "mean_pinball_loss"], [752, 4, 1, "", "mean_poisson_deviance"], [753, 4, 1, "", "mean_squared_error"], [754, 4, 1, "", "mean_squared_log_error"], [755, 4, 1, "", "mean_tweedie_deviance"], [756, 4, 1, "", "median_absolute_error"], [757, 4, 1, "", "multilabel_confusion_matrix"], [758, 4, 1, "", "mutual_info_score"], [759, 4, 1, "", "ndcg_score"], [760, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [781, 4, 1, "", "pairwise_distances"], [782, 4, 1, "", "pairwise_distances_argmin"], [783, 4, 1, "", "pairwise_distances_argmin_min"], [784, 4, 1, "", "pairwise_distances_chunked"], [785, 4, 1, "", "precision_recall_curve"], [786, 4, 1, "", "precision_recall_fscore_support"], [787, 4, 1, "", "precision_score"], [788, 4, 1, "", "r2_score"], [789, 4, 1, "", "rand_score"], [790, 4, 1, "", "recall_score"], [791, 4, 1, "", "roc_auc_score"], [792, 4, 1, "", "roc_curve"], [793, 4, 1, "", "root_mean_squared_error"], [794, 4, 1, "", "root_mean_squared_log_error"], [795, 4, 1, "", "silhouette_samples"], [796, 4, 1, "", "silhouette_score"], [797, 4, 1, "", "top_k_accuracy_score"], [798, 4, 1, "", "v_measure_score"], [799, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[702, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[703, 2, 1, "", "from_estimator"], [703, 2, 1, "", "from_predictions"], [703, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[704, 2, 1, "", "from_estimator"], [704, 2, 1, "", "from_predictions"], [704, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[705, 2, 1, "", "from_estimator"], [705, 2, 1, "", "from_predictions"], [705, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[717, 4, 1, "", "contingency_matrix"], [718, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[761, 4, 1, "", "additive_chi2_kernel"], [762, 4, 1, "", "chi2_kernel"], [763, 4, 1, "", "cosine_distances"], [764, 4, 1, "", "cosine_similarity"], [765, 4, 1, "", "distance_metrics"], [766, 4, 1, "", "euclidean_distances"], [767, 4, 1, "", "haversine_distances"], [768, 4, 1, "", "kernel_metrics"], [769, 4, 1, "", "laplacian_kernel"], [770, 4, 1, "", "linear_kernel"], [771, 4, 1, "", "manhattan_distances"], [772, 4, 1, "", "nan_euclidean_distances"], [773, 4, 1, "", "paired_cosine_distances"], [774, 4, 1, "", "paired_distances"], [775, 4, 1, "", "paired_euclidean_distances"], [776, 4, 1, "", "paired_manhattan_distances"], [777, 4, 1, "", "pairwise_kernels"], [778, 4, 1, "", "polynomial_kernel"], [779, 4, 1, "", "rbf_kernel"], [780, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[800, 1, 1, "", "BayesianGaussianMixture"], [801, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[800, 2, 1, "", "fit"], [800, 2, 1, "", "fit_predict"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "sample"], [800, 2, 1, "", "score"], [800, 2, 1, "", "score_samples"], [800, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[801, 2, 1, "", "aic"], [801, 2, 1, "", "bic"], [801, 2, 1, "", "fit"], [801, 2, 1, "", "fit_predict"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "sample"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"]], "sklearn.model_selection": [[802, 1, 1, "", "FixedThresholdClassifier"], [803, 1, 1, "", "GridSearchCV"], [804, 1, 1, "", "GroupKFold"], [805, 1, 1, "", "GroupShuffleSplit"], [806, 1, 1, "", "HalvingGridSearchCV"], [807, 1, 1, "", "HalvingRandomSearchCV"], [808, 1, 1, "", "KFold"], [809, 1, 1, "", "LearningCurveDisplay"], [810, 1, 1, "", "LeaveOneGroupOut"], [811, 1, 1, "", "LeaveOneOut"], [812, 1, 1, "", "LeavePGroupsOut"], [813, 1, 1, "", "LeavePOut"], [814, 1, 1, "", "ParameterGrid"], [815, 1, 1, "", "ParameterSampler"], [816, 1, 1, "", "PredefinedSplit"], [817, 1, 1, "", "RandomizedSearchCV"], [818, 1, 1, "", "RepeatedKFold"], [819, 1, 1, "", "RepeatedStratifiedKFold"], [820, 1, 1, "", "ShuffleSplit"], [821, 1, 1, "", "StratifiedGroupKFold"], [822, 1, 1, "", "StratifiedKFold"], [823, 1, 1, "", "StratifiedShuffleSplit"], [824, 1, 1, "", "TimeSeriesSplit"], [825, 1, 1, "", "TunedThresholdClassifierCV"], [826, 1, 1, "", "ValidationCurveDisplay"], [827, 4, 1, "", "check_cv"], [828, 4, 1, "", "cross_val_predict"], [829, 4, 1, "", "cross_val_score"], [830, 4, 1, "", "cross_validate"], [831, 4, 1, "", "learning_curve"], [832, 4, 1, "", "permutation_test_score"], [833, 4, 1, "", "train_test_split"], [834, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[802, 3, 1, "", "classes_"], [802, 2, 1, "", "decision_function"], [802, 2, 1, "", "fit"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_log_proba"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "score"], [802, 2, 1, "", "set_params"], [802, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[803, 3, 1, "", "classes_"], [803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "inverse_transform"], [803, 3, 1, "", "n_features_in_"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "set_split_request"], [804, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[806, 3, 1, "", "classes_"], [806, 2, 1, "", "decision_function"], [806, 2, 1, "", "fit"], [806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "inverse_transform"], [806, 3, 1, "", "n_features_in_"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_log_proba"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "score"], [806, 2, 1, "", "score_samples"], [806, 2, 1, "", "set_params"], [806, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[807, 3, 1, "", "classes_"], [807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "inverse_transform"], [807, 3, 1, "", "n_features_in_"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_log_proba"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "score_samples"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[809, 2, 1, "", "from_estimator"], [809, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "set_split_request"], [810, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "set_split_request"], [812, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[817, 3, 1, "", "classes_"], [817, 2, 1, "", "decision_function"], [817, 2, 1, "", "fit"], [817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "inverse_transform"], [817, 3, 1, "", "n_features_in_"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "predict_log_proba"], [817, 2, 1, "", "predict_proba"], [817, 2, 1, "", "score"], [817, 2, 1, "", "score_samples"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "set_split_request"], [821, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[825, 3, 1, "", "classes_"], [825, 2, 1, "", "decision_function"], [825, 2, 1, "", "fit"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "predict_log_proba"], [825, 2, 1, "", "predict_proba"], [825, 2, 1, "", "score"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[826, 2, 1, "", "from_estimator"], [826, 2, 1, "", "plot"]], "sklearn.multiclass": [[835, 1, 1, "", "OneVsOneClassifier"], [836, 1, 1, "", "OneVsRestClassifier"], [837, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[835, 2, 1, "", "decision_function"], [835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 3, 1, "", "n_classes_"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_partial_fit_request"], [835, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[836, 2, 1, "", "decision_function"], [836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 3, 1, "", "multilabel_"], [836, 3, 1, "", "n_classes_"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[838, 1, 1, "", "ClassifierChain"], [839, 1, 1, "", "MultiOutputClassifier"], [840, 1, 1, "", "MultiOutputRegressor"], [841, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[838, 2, 1, "", "decision_function"], [838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_log_proba"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_fit_request"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[842, 1, 1, "", "BernoulliNB"], [843, 1, 1, "", "CategoricalNB"], [844, 1, 1, "", "ComplementNB"], [845, 1, 1, "", "GaussianNB"], [846, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_joint_log_proba"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_joint_log_proba"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_joint_log_proba"], [845, 2, 1, "", "predict_log_proba"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_joint_log_proba"], [846, 2, 1, "", "predict_log_proba"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[847, 1, 1, "", "BallTree"], [848, 1, 1, "", "KDTree"], [849, 1, 1, "", "KNeighborsClassifier"], [850, 1, 1, "", "KNeighborsRegressor"], [851, 1, 1, "", "KNeighborsTransformer"], [852, 1, 1, "", "KernelDensity"], [853, 1, 1, "", "LocalOutlierFactor"], [854, 1, 1, "", "NearestCentroid"], [855, 1, 1, "", "NearestNeighbors"], [856, 1, 1, "", "NeighborhoodComponentsAnalysis"], [857, 1, 1, "", "RadiusNeighborsClassifier"], [858, 1, 1, "", "RadiusNeighborsRegressor"], [859, 1, 1, "", "RadiusNeighborsTransformer"], [860, 4, 1, "", "kneighbors_graph"], [861, 4, 1, "", "radius_neighbors_graph"], [862, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[847, 2, 1, "", "get_arrays"], [847, 2, 1, "", "get_n_calls"], [847, 2, 1, "", "get_tree_stats"], [847, 2, 1, "", "kernel_density"], [847, 2, 1, "", "query"], [847, 2, 1, "", "query_radius"], [847, 2, 1, "", "reset_n_calls"], [847, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[848, 2, 1, "", "get_arrays"], [848, 2, 1, "", "get_n_calls"], [848, 2, 1, "", "get_tree_stats"], [848, 2, 1, "", "kernel_density"], [848, 2, 1, "", "query"], [848, 2, 1, "", "query_radius"], [848, 2, 1, "", "reset_n_calls"], [848, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "kneighbors"], [849, 2, 1, "", "kneighbors_graph"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "kneighbors"], [850, 2, 1, "", "kneighbors_graph"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "kneighbors"], [851, 2, 1, "", "kneighbors_graph"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "sample"], [852, 2, 1, "", "score"], [852, 2, 1, "", "score_samples"], [852, 2, 1, "", "set_fit_request"], [852, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[853, 2, 1, "", "decision_function"], [853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_predict"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "kneighbors"], [853, 2, 1, "", "kneighbors_graph"], [853, 2, 1, "", "predict"], [853, 2, 1, "", "score_samples"], [853, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "kneighbors"], [855, 2, 1, "", "kneighbors_graph"], [855, 2, 1, "", "radius_neighbors"], [855, 2, 1, "", "radius_neighbors_graph"], [855, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "predict_proba"], [857, 2, 1, "", "radius_neighbors"], [857, 2, 1, "", "radius_neighbors_graph"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "radius_neighbors"], [858, 2, 1, "", "radius_neighbors_graph"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "radius_neighbors"], [859, 2, 1, "", "radius_neighbors_graph"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.neural_network": [[863, 1, 1, "", "BernoulliRBM"], [864, 1, 1, "", "MLPClassifier"], [865, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "gibbs"], [863, 2, 1, "", "partial_fit"], [863, 2, 1, "", "score_samples"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "partial_fit"], [864, 2, 1, "", "predict"], [864, 2, 1, "", "predict_log_proba"], [864, 2, 1, "", "predict_proba"], [864, 2, 1, "", "score"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_partial_fit_request"], [864, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "partial_fit"], [865, 2, 1, "", "predict"], [865, 2, 1, "", "score"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[866, 1, 1, "", "FeatureUnion"], [867, 1, 1, "", "Pipeline"], [868, 4, 1, "", "make_pipeline"], [869, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[866, 3, 1, "", "feature_names_in_"], [866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 3, 1, "", "n_features_in_"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[867, 3, 1, "", "classes_"], [867, 2, 1, "", "decision_function"], [867, 3, 1, "", "feature_names_in_"], [867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_predict"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 3, 1, "", "n_features_in_"], [867, 3, 1, "", "named_steps"], [867, 2, 1, "", "predict"], [867, 2, 1, "", "predict_log_proba"], [867, 2, 1, "", "predict_proba"], [867, 2, 1, "", "score"], [867, 2, 1, "", "score_samples"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_score_request"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing": [[870, 1, 1, "", "Binarizer"], [871, 1, 1, "", "FunctionTransformer"], [872, 1, 1, "", "KBinsDiscretizer"], [873, 1, 1, "", "KernelCenterer"], [874, 1, 1, "", "LabelBinarizer"], [875, 1, 1, "", "LabelEncoder"], [876, 1, 1, "", "MaxAbsScaler"], [877, 1, 1, "", "MinMaxScaler"], [878, 1, 1, "", "MultiLabelBinarizer"], [879, 1, 1, "", "Normalizer"], [880, 1, 1, "", "OneHotEncoder"], [881, 1, 1, "", "OrdinalEncoder"], [882, 1, 1, "", "PolynomialFeatures"], [883, 1, 1, "", "PowerTransformer"], [884, 1, 1, "", "QuantileTransformer"], [885, 1, 1, "", "RobustScaler"], [886, 1, 1, "", "SplineTransformer"], [887, 1, 1, "", "StandardScaler"], [888, 1, 1, "", "TargetEncoder"], [889, 4, 1, "", "add_dummy_feature"], [890, 4, 1, "", "binarize"], [891, 4, 1, "", "label_binarize"], [892, 4, 1, "", "maxabs_scale"], [893, 4, 1, "", "minmax_scale"], [894, 4, 1, "", "normalize"], [895, 4, 1, "", "power_transform"], [896, 4, 1, "", "quantile_transform"], [897, 4, 1, "", "robust_scale"], [898, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_transform_request"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_fit_request"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "set_fit_request"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "set_transform_request"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_inverse_transform_request"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "partial_fit"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "partial_fit"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "set_transform_request"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "infrequent_categories_"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "infrequent_categories_"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 3, 1, "", "powers_"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "set_fit_request"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "inverse_transform"], [887, 2, 1, "", "partial_fit"], [887, 2, 1, "", "set_fit_request"], [887, 2, 1, "", "set_inverse_transform_request"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "set_partial_fit_request"], [887, 2, 1, "", "set_transform_request"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 3, 1, "", "infrequent_categories_"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "transform"]], "sklearn.random_projection": [[899, 1, 1, "", "GaussianRandomProjection"], [900, 1, 1, "", "SparseRandomProjection"], [901, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[899, 2, 1, "", "fit"], [899, 2, 1, "", "fit_transform"], [899, 2, 1, "", "get_feature_names_out"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "inverse_transform"], [899, 2, 1, "", "set_output"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "fit_transform"], [900, 2, 1, "", "get_feature_names_out"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "inverse_transform"], [900, 2, 1, "", "set_output"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[902, 1, 1, "", "LabelPropagation"], [903, 1, 1, "", "LabelSpreading"], [904, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "predict_proba"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "predict_proba"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[904, 2, 1, "", "decision_function"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "predict_log_proba"], [904, 2, 1, "", "predict_proba"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_params"]], "sklearn.svm": [[907, 1, 1, "", "LinearSVC"], [908, 1, 1, "", "LinearSVR"], [909, 1, 1, "", "NuSVC"], [910, 1, 1, "", "NuSVR"], [911, 1, 1, "", "OneClassSVM"], [912, 1, 1, "", "SVC"], [913, 1, 1, "", "SVR"], [914, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[907, 2, 1, "", "decision_function"], [907, 2, 1, "", "densify"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"], [907, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[909, 3, 1, "", "coef_"], [909, 2, 1, "", "decision_function"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 3, 1, "", "n_support_"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 3, 1, "", "probA_"], [909, 3, 1, "", "probB_"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[911, 3, 1, "", "coef_"], [911, 2, 1, "", "decision_function"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "fit_predict"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 3, 1, "", "n_support_"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score_samples"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[912, 3, 1, "", "coef_"], [912, 2, 1, "", "decision_function"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 3, 1, "", "n_support_"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "predict_log_proba"], [912, 2, 1, "", "predict_proba"], [912, 3, 1, "", "probA_"], [912, 3, 1, "", "probB_"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[913, 3, 1, "", "coef_"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 3, 1, "", "n_support_"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"]], "sklearn.tree": [[915, 1, 1, "", "DecisionTreeClassifier"], [916, 1, 1, "", "DecisionTreeRegressor"], [917, 1, 1, "", "ExtraTreeClassifier"], [918, 1, 1, "", "ExtraTreeRegressor"], [919, 4, 1, "", "export_graphviz"], [920, 4, 1, "", "export_text"], [921, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[915, 2, 1, "", "apply"], [915, 2, 1, "", "cost_complexity_pruning_path"], [915, 2, 1, "", "decision_path"], [915, 3, 1, "", "feature_importances_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_depth"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_n_leaves"], [915, 2, 1, "", "get_params"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "predict_log_proba"], [915, 2, 1, "", "predict_proba"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_predict_proba_request"], [915, 2, 1, "", "set_predict_request"], [915, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[916, 2, 1, "", "apply"], [916, 2, 1, "", "cost_complexity_pruning_path"], [916, 2, 1, "", "decision_path"], [916, 3, 1, "", "feature_importances_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_depth"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_n_leaves"], [916, 2, 1, "", "get_params"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_predict_request"], [916, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[917, 2, 1, "", "apply"], [917, 2, 1, "", "cost_complexity_pruning_path"], [917, 2, 1, "", "decision_path"], [917, 3, 1, "", "feature_importances_"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "get_depth"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_n_leaves"], [917, 2, 1, "", "get_params"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "predict_log_proba"], [917, 2, 1, "", "predict_proba"], [917, 2, 1, "", "score"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"], [917, 2, 1, "", "set_predict_proba_request"], [917, 2, 1, "", "set_predict_request"], [917, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[918, 2, 1, "", "apply"], [918, 2, 1, "", "cost_complexity_pruning_path"], [918, 2, 1, "", "decision_path"], [918, 3, 1, "", "feature_importances_"], [918, 2, 1, "", "fit"], [918, 2, 1, "", "get_depth"], [918, 2, 1, "", "get_metadata_routing"], [918, 2, 1, "", "get_n_leaves"], [918, 2, 1, "", "get_params"], [918, 2, 1, "", "predict"], [918, 2, 1, "", "score"], [918, 2, 1, "", "set_fit_request"], [918, 2, 1, "", "set_params"], [918, 2, 1, "", "set_predict_request"], [918, 2, 1, "", "set_score_request"]], "sklearn.utils": [[922, 1, 1, "", "Bunch"], [923, 1, 1, "", "ClassifierTags"], [924, 1, 1, "", "InputTags"], [925, 1, 1, "", "RegressorTags"], [926, 1, 1, "", "Tags"], [927, 1, 1, "", "TargetTags"], [928, 1, 1, "", "TransformerTags"], [929, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [931, 4, 1, "", "as_float_array"], [932, 4, 1, "", "assert_all_finite"], [933, 4, 1, "", "check_X_y"], [934, 4, 1, "", "check_array"], [935, 4, 1, "", "check_consistent_length"], [936, 4, 1, "", "check_random_state"], [937, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [940, 4, 1, "", "default_tags"], [941, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [947, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [954, 4, 1, "", "gen_batches"], [955, 4, 1, "", "gen_even_slices"], [956, 4, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [958, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [968, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [971, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [973, 4, 1, "", "register_parallel_backend"], [974, 4, 1, "", "resample"], [975, 4, 1, "", "safe_mask"], [976, 4, 1, "", "safe_sqr"], [977, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[922, 2, 1, "", "clear"], [922, 2, 1, "", "copy"], [922, 2, 1, "", "fromkeys"], [922, 2, 1, "", "get"], [922, 2, 1, "", "items"], [922, 2, 1, "", "keys"], [922, 2, 1, "", "pop"], [922, 2, 1, "", "popitem"], [922, 2, 1, "", "setdefault"], [922, 2, 1, "", "update"], [922, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[930, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[938, 4, 1, "", "compute_class_weight"], [939, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[941, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[942, 4, 1, "", "all_displays"], [943, 4, 1, "", "all_estimators"], [944, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[945, 4, 1, "", "check_estimator"], [946, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[948, 4, 1, "", "density"], [949, 4, 1, "", "fast_logdet"], [950, 4, 1, "", "randomized_range_finder"], [951, 4, 1, "", "randomized_svd"], [952, 4, 1, "", "safe_sparse_dot"], [953, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[957, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[959, 1, 1, "", "MetadataRequest"], [960, 1, 1, "", "MetadataRouter"], [961, 1, 1, "", "MethodMapping"], [962, 4, 1, "", "get_routing_for_object"], [963, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[959, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[960, 2, 1, "", "add"], [960, 2, 1, "", "add_self_request"], [960, 2, 1, "", "consumes"], [960, 2, 1, "", "route_params"], [960, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[961, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[964, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[965, 4, 1, "", "is_multilabel"], [966, 4, 1, "", "type_of_target"], [967, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[969, 1, 1, "", "Parallel"], [970, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[969, 2, 1, "", "__call__"], [969, 2, 1, "", "dispatch_next"], [969, 2, 1, "", "dispatch_one_batch"], [969, 2, 1, "", "format"], [969, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[972, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[978, 4, 1, "", "incr_mean_variance_axis"], [979, 4, 1, "", "inplace_column_scale"], [980, 4, 1, "", "inplace_csr_column_scale"], [981, 4, 1, "", "inplace_row_scale"], [982, 4, 1, "", "inplace_swap_column"], [983, 4, 1, "", "inplace_swap_row"], [984, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[985, 4, 1, "", "inplace_csr_row_normalize_l1"], [986, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[987, 4, 1, "", "check_is_fitted"], [988, 4, 1, "", "check_memory"], [989, 4, 1, "", "check_symmetric"], [990, 4, 1, "", "column_or_1d"], [991, 4, 1, "", "has_fit_parameter"], [992, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 58, 61, 64, 70, 73, 74, 75, 77, 78, 79, 80, 81, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 109, 110, 113, 115, 118, 120, 121, 122, 125, 126, 128, 129, 130, 132, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 161, 163, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 186, 187, 189, 191, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 211, 213, 215, 217, 219, 220, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 244, 246, 247, 248, 250, 256, 258, 259, 261, 265, 266, 271, 272, 273, 274, 275, 278, 282, 284, 286, 291, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 309, 310, 311, 314, 317, 320, 322, 323, 324, 325, 326, 327, 328, 331, 332, 338, 339, 340, 341, 342, 345, 346, 347, 350, 352, 353, 354, 357, 358, 359, 360, 361, 365, 366, 367, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 392, 393, 395, 396, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 422, 424, 431, 435, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 462, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 491, 493, 499, 501, 503, 507, 513, 514, 522, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 691, 692, 693, 694, 695, 696, 703, 704, 705, 711, 714, 719, 723, 725, 738, 744, 761, 762, 782, 783, 800, 801, 802, 803, 805, 806, 807, 812, 817, 821, 822, 825, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 931, 933, 934, 937, 951, 953, 960, 961, 963, 987, 991, 992, 993, 995, 996, 998, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "0": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 396, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 433, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 929, 930, 931, 933, 934, 938, 939, 942, 943, 944, 945, 946, 948, 950, 951, 953, 954, 955, 957, 964, 965, 966, 968, 969, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1024, 1025, 1026, 1030, 1031, 1032, 1033], "00": [47, 52, 68, 111, 123, 186, 187, 204, 231, 244, 265, 269, 272, 309, 327, 330, 331, 353, 372, 375, 384, 410, 417, 418, 608, 609, 716, 718, 791, 803, 817, 831, 916, 1000, 1004, 1014, 1016, 1018, 1025], "000": [43, 44, 59, 62, 64, 77, 106, 171, 188, 191, 244, 265, 269, 271, 273, 316, 323, 352, 353, 361, 373, 384, 417, 418, 492, 564, 565, 647, 680, 1018, 1025, 1046], "0000": [43, 325], "000000": [79, 186, 202, 231, 271, 315, 740], "00000000": 173, "000000e": 231, "000024": 365, "000045": 186, "00005": 54, "0000ff": [67, 299, 306], "0001": [49, 159, 168, 221, 269, 380, 422, 445, 449, 461, 473, 474, 480, 536, 541, 543, 550, 552, 553, 562, 563, 649, 650, 651, 652, 655, 656, 661, 662, 663, 664, 665, 666, 671, 672, 675, 677, 679, 681, 683, 690, 692, 696, 864, 865, 907, 908, 993], "000198": 186, "000216": 46, "000217": 46, "000256": 46, "000278": 46, "0003": 137, "000321": 46, "000353": 46, "000368": 46, "0004": [52, 137, 316, 607], "000436": 46, "000511": 352, "000679": 352, "000708": 352, "000724": 352, "000731": 352, "0008": 386, "000894": 46, "000920": 46, "000977": 271, "00099547": 173, "000e": 418, "001": [46, 53, 68, 79, 95, 144, 168, 170, 186, 198, 222, 240, 250, 256, 269, 271, 273, 333, 353, 375, 384, 414, 539, 540, 542, 549, 630, 647, 648, 649, 650, 655, 656, 663, 664, 665, 666, 669, 670, 671, 679, 680, 681, 682, 684, 687, 692, 693, 696, 697, 800, 801, 864, 865, 902, 903, 909, 910, 911, 912, 913, 993], "00105": 352, "0012": [43, 697], "0013": 43, "0014": 43, "0015": 43, "001540": 52, "00166409": 664, "00171412": [761, 762, 1002], "001727": 265, "001882": [200, 202], "00191": 352, "002": [43, 51, 168, 170, 375], "00215": 352, "002592": [200, 202], "00274": 213, "0028": 43, "002861": [200, 202], "00289": 352, "003": 43, "0032": 43, "0034189458230957995": 45, "003533": 202, "003586": 539, "00360392": 539, "0036211": 539, "00362644": 539, "00364": 324, "00393284e": 195, "003935": [200, 202], "003e": 418, "004": [43, 353], "0044": 914, "004577621581492997": 318, "00462428": 754, "0049896314219659565": 318, "005": [43, 271, 275, 296, 311, 353, 384], "005027": 274, "005383": [200, 202], "005422": 271, "005622": 269, "005670": [200, 202], "005840": 274, "005861": 274, "006": [43, 45, 54, 279, 384], "006360": 274, "007": [141, 256, 279, 291, 353], "0072b2": 256, "0075": [475, 544], "00755": 544, "007581": 276, "00768662e": 195, "007822": 285, "007833": 276, "008": [168, 375, 384], "008142": [200, 202], "0083899664": 767, "008449": [200, 202], "00860051": 661, "008915": 274, "009": [43, 353, 384], "009077": 186, "00911944e": 195, "0092": 137, "009362": [200, 202], "009747": 285, "009778": 274, "009788": 285, "0098": 137, "00ff00": 299, "01": [45, 47, 49, 52, 53, 75, 79, 84, 95, 120, 122, 123, 137, 145, 147, 149, 151, 152, 168, 175, 179, 186, 187, 195, 198, 204, 220, 225, 226, 231, 233, 234, 240, 244, 245, 246, 250, 251, 258, 262, 264, 265, 270, 271, 272, 276, 278, 279, 280, 296, 307, 309, 311, 321, 327, 343, 358, 359, 373, 375, 383, 410, 419, 451, 473, 518, 524, 535, 542, 546, 548, 598, 599, 601, 608, 645, 649, 657, 661, 681, 699, 718, 803, 817, 901, 972, 1000, 1004, 1008, 1014, 1016, 1018, 1025], "010": [353, 384, 832, 1012], "0106": 652, "010877306503748912": 279, "011": [43, 279, 291, 353, 384], "011595": [200, 202], "0116": 607, "011e": 418, "012": [52, 189, 191], "012191": [200, 202], "012521": 202, "012831": 202, "0129126": 372, "013": [43, 52, 91, 165, 279, 353, 1025], "01327": 373, "013520": 186, "014": [43, 279, 384], "0144": 618, "015": [324, 356, 1012, 1025], "0152": 137, "015347e": 231, "015414e": 231, "015579": 285, "015587e": 231, "015596": [200, 202], "0157": 547, "015716e": 231, "01621459": 410, "016445": 271, "017": [323, 353, 384, 473, 474, 1025], "017379": 52, "017646": [200, 202], "018": [52, 271, 474], "0182": 900, "018727": 186, "0188ff": 315, "018900": 202, "019": [168, 198, 375, 384, 473], "019023": 271, "019069": 202, "01915283": 130, "019163": [200, 202], "0193": [472, 478], "0195": [423, 477], "0196": 137, "0198e1": 118, "019907": [200, 202], "01e": 199, "02": [43, 51, 52, 66, 79, 83, 85, 91, 95, 97, 113, 115, 120, 123, 136, 142, 168, 172, 177, 185, 186, 195, 231, 240, 248, 250, 265, 266, 272, 278, 296, 306, 309, 311, 313, 335, 337, 353, 357, 372, 375, 383, 409, 414, 443, 447, 600, 608, 661, 679, 803, 817, 886, 902, 916, 1000, 1025], "020": [43, 52, 1012], "02069427": 86, "021": 353, "021849": 325, "021872": [200, 202], "022": 1012, "022593": 186, "0226": 652, "022688": [200, 202], "023": [52, 279, 353, 908, 1012], "02306214": 670, "02449161": 130, "02456369": 198, "024991": [200, 202], "025": [67, 215, 250, 268, 693, 697], "025102": 186, "025422": 271, "0255": 137, "0256": 173, "025930": [200, 202], "026": [116, 242, 353, 360, 1025], "026328": [200, 202], "026711": 87, "027": [52, 141, 168, 375, 1025], "027400": 365, "028": [269, 353], "02818216": 115, "02891072": 1005, "029": [170, 353, 1012], "02d": 202, "03": [51, 52, 85, 111, 120, 149, 168, 175, 186, 195, 231, 244, 256, 262, 265, 272, 331, 375, 418, 751, 803, 1000, 1004, 1025], "030": [149, 353], "030462": 103, "030498": 103, "030585": 285, "0306": 352, "030677e": 231, "030867": 186, "031": [168, 334, 375, 1025], "031020": 103, "031026": 186, "031255": 186, "031555": 202, "03162278": 51, "031988": [200, 202], "0321": 838, "032179": 202, "03228": 625, "03228706": 613, "032356": [200, 202], "03237920e": 195, "032405": 186, "03260883": 1005, "033": 1012, "0333": 352, "033764e": 231, "033823": 186, "034": [149, 473], "034077": 202, "034194": [200, 202], "034278": 274, "034309": [200, 202], "03433306457": 45, "034821": [200, 202], "03498585": 1005, "035005": 186, "03531816": [829, 830], "035445": [46, 285], "0358": 46, "035914": 285, "036": [91, 384, 474], "036038": [200, 202], "036385": [200, 202], "036445": 271, "036592": 285, "036656": [200, 202], "0367": 175, "0368": 622, "037": 712, "0370": 853, "037600e": 231, "038": [199, 473, 474, 864], "038076": [200, 202], "03812219": 1005, "038159": 815, "03823144": 173, "038689": 261, "0387": 607, "039": [269, 348, 754, 784, 1004, 1025], "039493": [200, 202], "039497": 254, "039857": 46, "03f": 269, "04": [52, 66, 75, 77, 87, 100, 115, 122, 129, 168, 175, 186, 195, 212, 231, 248, 256, 262, 265, 271, 272, 304, 328, 347, 375, 417, 419, 473, 474, 649, 650, 655, 663, 664, 665, 684, 791, 803, 817, 1000, 1004, 1008, 1018, 1025], "040530e": 231, "041": 52, "041297": 307, "0416": 409, "042": [75, 247, 384, 1025], "0427": [231, 471, 476], "042898": 307, "043": [353, 384], "043401": [200, 202], "044": [43, 209, 269, 352, 754, 1004, 1025], "044223": [200, 202], "044451": [200, 202], "044642": [200, 202], "0448": 231, "045": 726, "04520": 159, "0453": 547, "045311": 307, "045390e": 231, "045599": [200, 202], "045934": 307, "046": [235, 353], "046010e": 231, "046636": 186, "046641": [200, 202], "047": 384, "0479": 547, "048": 1012, "049": [45, 473], "049492": 46, "049530": 307, "049540": 307, "0499": 547, "04995982": 115, "05": [46, 47, 52, 54, 61, 63, 72, 79, 85, 93, 95, 97, 98, 100, 107, 115, 125, 137, 140, 146, 149, 152, 164, 168, 178, 179, 186, 194, 195, 212, 215, 227, 237, 238, 240, 250, 256, 258, 259, 262, 265, 271, 272, 280, 282, 296, 299, 304, 311, 313, 320, 324, 331, 333, 346, 353, 375, 419, 452, 458, 480, 528, 533, 534, 549, 595, 598, 599, 601, 616, 617, 618, 622, 623, 625, 626, 628, 635, 636, 652, 693, 697, 759, 803, 856, 907, 908, 1000, 1008, 1014, 1025], "050": [52, 1012], "05063247886572012": 279, "050680": [200, 202], "051": [112, 474, 1025], "0512": 547, "051474": [200, 202], "0517578125e": 46, "052": 540, "05216586": 115, "052506": 325, "053": [43, 54, 168, 235, 375, 384], "05306648": 128, "05317": 175, "0538": 352, "054": [197, 1025], "054045": 274, "054699": 186, "0547": 911, "055": [168, 375, 1004], "05518": 626, "05532": 623, "05534985": 308, "0556": 911, "056": [52, 758, 1012], "0561": 911, "0566": 626, "05663": 623, "0568": 750, "057": [384, 832], "057122": 202, "05752333": 130, "057711": 202, "058": [168, 269, 375], "05840206": 130, "0595": 475, "05968": 159, "05994843": 51, "06": [52, 85, 186, 204, 212, 213, 250, 265, 271, 272, 309, 313, 347, 384, 409, 484, 485, 486, 647, 648, 692, 696, 800, 801, 803, 817, 916, 1000, 1014, 1016, 1025], "060": [43, 52, 754], "0602": 46, "061": 269, "0614": 626, "06165": 623, "061696": [200, 202], "062": [92, 1025], "0622": [472, 478], "0626": 838, "063": [269, 271, 439], "0631": 52, "063184": 269, "064": [384, 1012], "065": [269, 384], "06506307": 308, "0652": 625, "06525643": 613, "066": [269, 651], "06686804": 228, "06694199": 130, "06695631e": 111, "067": [171, 179, 1025], "067109": 202, "067528": 202, "067854": 46, "068": [43, 52, 208, 271, 342, 1025], "068332": [200, 202], "06880943": 115, "06896552": 451, "069": [269, 346, 1025], "0693": 622, "07": [52, 85, 115, 129, 186, 209, 231, 265, 280, 361, 373, 410, 564, 565, 695, 697, 1004, 1018, 1025], "070": [160, 1025], "0707": 626, "07073": 623, "071": [168, 328, 375, 439], "071964": 186, "072": [439, 651], "073": [269, 473, 474], "074": [225, 269, 1025], "0741": 352, "074412": [200, 202], "075": [123, 246], "07582983e": 195, "075887": 202, "076": [43, 54, 895], "077": 291, "077846": 271, "0779": 46, "078": 43, "07846529": 308, "07880": 159, "079": [168, 375], "079297": 271, "07963978e": 195, "07993421": 228, "08": [43, 79, 83, 123, 179, 186, 187, 198, 279, 309, 375, 480, 534, 546, 548, 566, 644, 661, 803, 864, 865, 886, 1010, 1025], "080": [311, 353, 1025], "08022103": [829, 830], "080295": 202, "081": [298, 1012, 1025], "0813": [471, 476], "082": [43, 54], "0825": 316, "083": [269, 360], "08377444": 754, "084": 61, "085": 45, "085299": [200, 202], "08533159": 216, "085711": 87, "086": [226, 1025], "08604995": 115, "086944": 254, "08699432": 217, "0872422": 663, "088": [360, 672, 1012, 1025], "089": [237, 353, 1025], "089063": [200, 202], "08d": 55, "08t16": 372, "09": [122, 129, 186, 244, 248, 309, 410, 532, 610, 738, 845, 1004, 1014, 1018, 1025], "09000": 213, "090528": 186, "090808": 186, "091053": 186, "091621": 87, "092204": [200, 202], "093": [337, 354, 473, 1025], "094": [252, 358, 474, 1025], "09443967": 308, "09541846": 539, "09684337": 228, "096950": 307, "097": [43, 168, 375], "098": 353, "098332": 62, "0986": [418, 871], "09861229": [615, 1014], "098758": 62, "098776": 271, "098932": 62, "099": 43, "099820": 62, "0d": 1036, "0e": [282, 552, 553], "0e4": 220, "0f": [57, 91], "0min": 87, "0rc1": 382, "0rcn": 382, "0x": 936, "0x7fc6b65fab80": 330, "0x7fc6b7bf6250": 103, "0x7fc6b7bf68e0": 103, "0x7fc6c8313040": 283, "0x7fc6c8313440": 283, "0x7fc6c8559670": 251, "0x7fc6c8665c10": 269, "0x7fc6c8897190": 213, "0x7fc6ca0944c0": 154, "0x7fc6ca094970": 154, "0x7fc6ca5e7f70": 139, "0x7fc6ca5e8940": 139, "0x7fc6cac5cd30": 283, "0x7fc6cad3a550": 261, "0x7fc6cb100340": 278, "0x7fc6d921f430": 283, "0x7fc6dab45ca0": 103, "0x7fc6dabc8ee0": 104, "1": [0, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 391, 392, 393, 396, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 945, 946, 948, 949, 950, 951, 952, 953, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1031, 1033, 1037], "10": [2, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 103, 104, 106, 109, 110, 111, 112, 113, 115, 116, 118, 122, 123, 124, 125, 129, 130, 134, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 155, 157, 161, 165, 168, 171, 172, 174, 176, 177, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 198, 203, 204, 206, 207, 211, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 229, 230, 231, 234, 235, 240, 243, 244, 245, 246, 247, 249, 250, 251, 253, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 282, 284, 285, 286, 288, 290, 296, 306, 307, 308, 309, 311, 312, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 334, 339, 340, 341, 343, 344, 346, 347, 348, 350, 352, 353, 361, 365, 372, 373, 374, 375, 376, 378, 383, 384, 390, 391, 392, 396, 401, 402, 403, 407, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 440, 445, 449, 451, 453, 454, 455, 461, 462, 464, 477, 490, 495, 496, 499, 503, 504, 505, 507, 513, 514, 515, 516, 519, 523, 524, 527, 529, 531, 534, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 551, 555, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 571, 573, 585, 586, 590, 596, 597, 602, 603, 608, 610, 614, 620, 622, 630, 633, 635, 637, 638, 639, 640, 643, 645, 646, 647, 649, 650, 652, 655, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 675, 676, 678, 679, 680, 681, 684, 688, 689, 694, 695, 698, 699, 702, 708, 718, 729, 745, 759, 772, 800, 801, 803, 804, 805, 806, 807, 814, 817, 818, 819, 820, 821, 823, 824, 826, 831, 833, 834, 835, 836, 842, 843, 844, 846, 847, 848, 854, 863, 864, 865, 867, 873, 877, 880, 881, 884, 896, 904, 910, 913, 915, 916, 920, 925, 937, 948, 951, 955, 967, 972, 973, 979, 980, 989, 993, 994, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1025, 1032, 1033, 1036, 1037, 1038, 1043, 1045, 1046, 1047, 1049, 1050], "100": [43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 72, 76, 77, 83, 86, 90, 94, 99, 103, 104, 107, 110, 111, 120, 122, 123, 129, 135, 140, 149, 150, 153, 156, 171, 175, 178, 179, 186, 187, 189, 191, 193, 194, 196, 198, 199, 203, 204, 205, 207, 212, 213, 214, 215, 217, 222, 223, 224, 226, 228, 229, 231, 235, 236, 238, 243, 244, 245, 246, 247, 251, 256, 258, 262, 265, 266, 267, 269, 271, 274, 276, 281, 282, 286, 296, 297, 298, 309, 312, 313, 315, 317, 318, 323, 327, 328, 334, 335, 339, 340, 342, 343, 344, 347, 348, 350, 352, 353, 356, 359, 360, 365, 367, 373, 375, 378, 380, 383, 384, 401, 407, 410, 411, 414, 415, 416, 417, 418, 439, 443, 447, 451, 473, 474, 480, 492, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 533, 537, 539, 547, 548, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 608, 610, 613, 634, 635, 636, 642, 643, 644, 645, 649, 650, 651, 652, 655, 656, 661, 662, 663, 664, 665, 666, 668, 670, 672, 674, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 749, 800, 801, 805, 825, 831, 832, 837, 842, 843, 844, 846, 847, 848, 852, 864, 865, 883, 885, 888, 897, 914, 993, 994, 997, 1001, 1004, 1005, 1011, 1014, 1016, 1025, 1043, 1044, 1045, 1048, 1049], "1000": [43, 46, 47, 54, 63, 67, 72, 83, 104, 107, 115, 129, 137, 139, 141, 144, 145, 146, 151, 156, 160, 163, 176, 191, 199, 205, 216, 235, 243, 244, 246, 256, 260, 265, 269, 271, 277, 280, 282, 296, 298, 312, 315, 321, 322, 324, 326, 327, 342, 343, 349, 352, 353, 383, 384, 391, 408, 418, 439, 475, 481, 482, 534, 535, 540, 542, 544, 545, 546, 548, 549, 551, 556, 566, 567, 635, 649, 650, 654, 655, 656, 658, 663, 664, 665, 666, 669, 670, 671, 675, 679, 680, 681, 690, 695, 701, 704, 767, 884, 896, 902, 907, 908, 993, 997, 1019, 1042, 1044, 1053], "10000": [43, 50, 52, 66, 78, 96, 104, 105, 147, 159, 199, 206, 213, 221, 229, 244, 246, 322, 338, 340, 361, 367, 417, 418, 564, 565, 647, 682, 884, 913, 1016], "100000": [174, 246, 256, 378, 616, 617, 618, 622, 623, 625, 626, 628, 896, 997], "1000000": [55, 539], "10005": 1043, "1000x": 1041, "1001": [224, 254], "10027": 1048, "10045": 1043, "1005": 1019, "10058": 1044, "10059": 1043, "10065": 250, "1007": 708, "10070308464041304": 213, "10071": 1043, "10093": 1043, "10095": 1043, "10096": 1048, "100_000": [62, 64, 186], "100k": [244, 398], "100ksampl": 398, "100x": [1035, 1038, 1052], "101": [64, 168, 200, 288, 375, 853, 1025, 1036], "10101": 1043, "10112": 1043, "1013": 1012, "10142": 1043, "10153": 1043, "10168": 1050, "10181": 1043, "10192": 1043, "10195": 1043, "101alexmartin": [1052, 1053], "102": [216, 384, 1025, 1037], "10210": 1043, "10229": 1043, "1024": [86, 129, 451, 470, 541, 905, 1048], "10280": 1043, "10297": 1043, "103": [149, 290, 291, 373, 417, 500, 558, 559, 1035], "10306": 1043, "10325": 1043, "10336": 1043, "10346": 1043, "10377": 1043, "1038": 410, "10397": 1043, "104": [43, 61], "10403": 231, "10412": 1043, "10428": 1043, "10437": 1043, "10440": 1044, "10441": 1043, "1045": 103, "10452": 1043, "10458": 1043, "1046": [103, 261], "10463": 1024, "10468": 1050, "10469096": 173, "1047": 103, "10471": 1043, "10474": 1043, "10478008": 410, "10482": 1045, "1048576": [418, 585, 592], "10493": 1047, "105": 315, "10500": 1043, "10521": 1043, "10526": 410, "10536": 1043, "10580": 1044, "10581": 1043, "10584743": 173, "10587": 1043, "10591": 1047, "10593": 1043, "106": [168, 196, 254, 375, 883, 998, 1025, 1036], "10606655": 228, "10610": 1043, "10655": 1043, "10663": 1043, "10677": 1043, "10687": 1043, "107": [149, 325, 410, 902, 1005, 1037], "10708": 1047, "10711": 1047, "10723": [1042, 1043], "10727": 1044, "1073": [373, 490], "10733": 1024, "10740": 1043, "1076": 334, "10774": 1043, "10795": 1043, "108": [0, 47, 223, 1025, 1036], "1080": [372, 410], "10805": 1049, "10811": 1043, "10815": 1045, "10827": 1043, "10829": 1043, "10834": 231, "10836": 1043, "1084": 261, "10845": 1043, "10869": 1043, "1088": 254, "10881": 1043, "108843": 274, "10887": 1043, "108880": 62, "10898": 1043, "10899": 1043, "109": [61, 86, 1005, 1037], "10908": 1043, "10913": 1043, "10914094": 228, "10928": 1043, "10933": 1043, "10982": 1043, "10992": 1043, "10998": 1043, "10999": 1043, "10_000": [46, 62, 107, 139, 146, 185, 191, 244, 274, 284, 291, 328, 562, 563, 567, 568, 884], "10_fold": [373, 496], "10e": [193, 198], "10k": [321, 398, 449], "10ksampl": 398, "10x": 1035, "10x10": 218, "10\u2079": 1043, "11": [43, 57, 100, 106, 112, 122, 123, 168, 173, 186, 187, 198, 213, 214, 215, 218, 250, 265, 268, 276, 277, 283, 294, 295, 297, 315, 322, 325, 326, 340, 344, 348, 352, 354, 372, 375, 376, 384, 391, 410, 413, 414, 417, 452, 459, 484, 485, 486, 487, 499, 504, 520, 521, 615, 653, 659, 673, 718, 724, 726, 727, 781, 782, 783, 804, 807, 821, 824, 832, 859, 916, 952, 967, 996, 1000, 1002, 1014, 1018, 1019, 1033, 1037, 1041, 1043, 1044, 1046, 1049, 1050], "110": [126, 193, 210, 220, 243, 317, 327, 439, 998, 999], "1100": 83, "11000": 1044, "11005": 1043, "11006": 1043, "11010": 1043, "11011": 1043, "11021": 149, "11042": 1043, "11047": [1024, 1045], "11064": 1047, "11082": 1043, "110923": 202, "11099": 767, "111": [43, 46, 47, 100, 126, 149, 199, 210, 228, 234, 237, 271, 291, 859, 1025, 1038], "1111": [653, 659], "1111111111111111": 279, "11124": 1043, "1112658": [901, 1016], "11135": 1043, "11136": 1043, "1114": 261, "11144": [1043, 1044], "11144673": 228, "11160": 1043, "11166": 1043, "1117": 622, "11176": 1043, "11179": 1044, "1118": 103, "112": [87, 168, 270, 373, 375, 1025, 1037], "11206": 1043, "11211": 1043, "112141": 384, "11232": 1045, "11235": 1043, "112589990684262": 749, "11272": 1043, "11293": 1043, "11295": 1043, "11296": 1046, "113": [246, 288, 384, 1038], "11306": 1043, "11308": 1043, "11310": 1043, "11314": 373, "11315": 1043, "11327": 1043, "113516": 274, "11353": 1043, "11354": 1044, "11364": 1044, "11364637": 51, "113781": 325, "11378556": 308, "114": [325, 713, 1035], "1140": 373, "11413": 43, "11420": 1043, "1145": [191, 410, 679], "11452112": 228, "11458": 1044, "11464": 1043, "11466": 1043, "11467": 1043, "1148": 261, "115": [187, 317, 1012, 1025], "11505": 1043, "11514": 1046, "11520": 1043, "11526": 1044, "11528972": 228, "11542": 1043, "11553": 1043, "11556": 1043, "11557": 1043, "11558": 1043, "11576": 1043, "11585": 1043, "11596": 1043, "116": 1035, "1162": 410, "11635": 1045, "11646": 1044, "11650": 1044, "11679": 1043, "11680": 47, "11682": 1047, "11682692": 228, "11693539": 115, "11699": 1044, "117": [104, 1025, 1036], "11705": 1044, "117154": 186, "11724": 1043, "11727": 1044, "11741": 1043, "11754": 1044, "11756": [1043, 1044], "117608": 62, "11774": 1043, "1179": 261, "118": [222, 593, 1025], "11805": 1024, "11841": [901, 1016], "1185": 384, "11860": 1050, "1189": 417, "119": [998, 1038], "11901": 1043, "11905": 1043, "11912": 1043, "11915045": 361, "11924": 1043, "11931": 213, "11932": 213, "11933": 213, "11935": 213, "11950": 1046, "11951": 1043, "11958": 175, "11973": 1044, "11977": 1024, "12": [0, 43, 45, 52, 58, 70, 75, 77, 78, 80, 86, 88, 89, 90, 105, 106, 115, 142, 143, 144, 147, 149, 168, 173, 174, 175, 182, 186, 187, 189, 194, 198, 199, 213, 221, 231, 233, 236, 237, 238, 240, 241, 243, 251, 254, 258, 259, 265, 270, 271, 273, 274, 277, 283, 284, 285, 294, 309, 315, 316, 317, 325, 328, 348, 354, 374, 375, 376, 383, 391, 393, 396, 402, 403, 404, 410, 414, 418, 445, 449, 451, 459, 484, 485, 486, 487, 499, 535, 537, 544, 573, 649, 650, 655, 663, 664, 665, 667, 672, 674, 684, 688, 689, 692, 695, 696, 728, 733, 800, 801, 804, 821, 824, 838, 859, 875, 984, 993, 994, 996, 1000, 1002, 1004, 1005, 1014, 1018, 1019, 1025, 1033, 1036, 1038, 1042, 1043, 1045, 1046, 1051, 1052], "120": [150, 221, 234, 327, 419, 593, 1025, 1035], "1200": [83, 145, 311, 417], "12000": 523, "12068": 1045, "12069": 1048, "121": [100, 136, 182, 245, 621, 672, 1014], "12105": 1043, "12116": 1044, "1212": 501, "12122": 1043, "121351": 202, "12143": 1044, "12145": 1045, "12147": 1024, "12159": 1043, "12165": 1043, "12165031": 1005, "1217": 213, "12171": 1043, "12174": 1044, "12177": 1044, "12190903": 115, "12196": 213, "12197": 1044, "122": [0, 136, 175, 182, 187, 206, 245, 384, 1005, 1025], "1220": 622, "12211": 1043, "12222": 1044, "12232": 1044, "12234": 1043, "12246": 1043, "12251": 1044, "12258": 1045, "12274212": 1005, "12279": 1044, "12285": 1050, "1229": 520, "123": [138, 156, 260, 288, 361, 417, 519, 520, 521, 558, 559, 840, 1005, 1012, 1025], "12300": 1044, "12303": 1045, "12304": 1043, "12317": [175, 1043], "1232": 417, "12326": 43, "12327": 43, "12328": [43, 1044], "12329": 43, "12330": [43, 1043], "12334": 1044, "12338": 1043, "12339": 1043, "1234": [194, 259, 274, 378], "12344": 1044, "12345": 1043, "12350": 1043, "1236": 317, "12360": 1043, "12365": 1043, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 274, "12383": 43, "12388": 1043, "12393": 1043, "124": [46, 203, 417, 1025, 1037], "124225": 202, "12436": 1044, "12441": 1043, "12451": 1043, "12462": 1043, "12467": 1043, "12471": 1043, "12481": 1043, "125": [43, 86, 111, 123, 187, 323, 537, 993, 1004, 1014], "12513": 1044, "12514": 1043, "125140": 274, "12517": 1043, "12518": 1043, "12522": 1043, "125247168": 52, "12543": 1044, "12557": 1045, "12568": 1044, "12569": 1045, "12582": 1044, "12583": 1044, "1259": 57, "12599": 1044, "126": 417, "12612": 1043, "12613": 1044, "12625": 1043, "1263": 384, "12638": 1047, "12650": 1045, "126502": 202, "12669": 1044, "1268187": 228, "12685": 1043, "12699": 1043, "127": [145, 1035], "12701": 1043, "12704": 1043, "127128": 146, "12715": 1044, "12732": 1044, "1276": 47, "12789": 1045, "128": [53, 54, 213, 365, 539], "12800": 1024, "12807": 1044, "12821": 1044, "12834": 1044, "12852": [1024, 1045], "12855": 1044, "12860": [231, 1044], "12861": 1044, "12866": 1024, "1288": [45, 373], "12881": 1043, "12883823": 414, "12887": 1045, "129": [215, 1035], "12908": 1044, "12914884": 1005, "12916": 1044, "12927": 1045, "12946": 1043, "12949": 1043, "12955": 1044, "12972": 1044, "12983": 1044, "12988": 1044, "1299": [873, 1014], "12th": 1016, "13": [43, 45, 49, 50, 52, 79, 106, 125, 129, 142, 145, 147, 181, 186, 191, 199, 222, 238, 264, 265, 272, 275, 277, 309, 311, 315, 328, 341, 373, 375, 378, 384, 391, 414, 422, 499, 513, 516, 535, 536, 554, 555, 585, 609, 638, 642, 737, 762, 821, 851, 866, 873, 899, 900, 1000, 1004, 1005, 1010, 1011, 1014, 1019, 1025, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1047], "130": 384, "1300": 83, "13003": 1047, "13005": 1043, "13007": 1044, "130107": [228, 244, 491], "13013": 1045, "13042": 1050, "13046": 1043, "13077794": 361, "13086": 1044, "131": [43, 53, 89, 353, 384, 1004, 1036], "13124": [1043, 1044], "13134": 1043, "13142": 1044, "13146": [1024, 1045], "13151": 1044, "13157": 1044, "13164": 1044, "13165": 1043, "13174": 1044, "1319": [873, 1014], "131900": 102, "13193": 1044, "132": [43, 47, 53, 89, 166, 417, 1025], "13204": 1047, "13213": 1045, "1322": 625, "13221": 1043, "13222543": 613, "13227": 1024, "1323": 213, "13231": 1045, "13233": [373, 496, 497], "13240": 1044, "13241": 1044, "13250": 1044, "13251": 1044, "13253": 1044, "13260": 1044, "13266": 1044, "13276": 1043, "13279": 1044, "13283": 1044, "13286": 994, "13290": 1045, "133": [46, 53, 89, 1025], "13312": 1043, "13317": 1044, "13328": 1044, "13333": 1044, "13336": 1044, "13350": 1044, "13363": 1044, "13366": 1044, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": 266, "13382": 1044, "13389": 1044, "13392": 1045, "13393": 1045, "13397": 1044, "134": [86, 145, 265, 271, 1038], "13422": 1044, "13427": 1044, "13439": 1044, "13447": 1044, "13459": 1044, "13467": 1045, "13485": 1044, "13486": 1044, "13496": 1044, "135": [168, 325, 375], "13511": 1046, "13524": 1044, "1353": 352, "13531": 1044, "13545": 1044, "13549": 1044, "13554": 1044, "13562": 1044, "13575": 1045, "1358": 47, "13601": 1044, "13607": 1044, "13609": 1045, "13618": 1045, "13620": 1044, "13628": 1044, "13636": [1000, 1044], "13641": 1044, "13649": 1052, "1365": 47, "13651": 1044, "137": [118, 250, 384, 1025, 1036], "13704": 1045, "13707": 1045, "1371": 537, "13726": 1045, "1373": 1001, "1374": 537, "13741": 1044, "13769": 1045, "13772": [1043, 1044], "13773": 1045, "13779": 1044, "1378": 231, "13780": 1044, "1379": 231, "138": [384, 417, 1004], "13806": 1045, "1382": 527, "13822072286080167": 279, "1383": 47, "13835": 1044, "1385": 476, "13864": 1044, "13875": 1045, "13877": 1044, "13894": 1044, "13896": 1045, "139": [231, 291, 340, 384, 417, 454, 464, 694, 698, 1005, 1025], "1390": 47, "13900": 1047, "13902": [1024, 1045], "13903": [1043, 1044], "13910": 1044, "13911": [1024, 1045], "13925": 1045, "13933": 1045, "13938": 1045, "13947": 1044, "1396": 1001, "13960": 1045, "1397": 384, "13974": 1044, "13983521": 308, "13987": 1045, "13988486": 228, "13995": 1045, "13th": 64, "14": [43, 50, 52, 73, 82, 88, 93, 95, 96, 99, 106, 112, 125, 163, 186, 187, 198, 202, 204, 231, 235, 240, 245, 250, 265, 270, 276, 277, 286, 290, 291, 314, 315, 325, 347, 350, 366, 373, 375, 376, 391, 396, 402, 403, 410, 414, 499, 501, 513, 556, 557, 638, 646, 695, 817, 821, 873, 997, 1000, 1004, 1014, 1019, 1025, 1033, 1035, 1036, 1038, 1039, 1043, 1048], "140": [86, 327, 417, 513, 519, 520, 521, 558, 559, 1005], "1400": [83, 476], "14012": 1045, "14024": 1044, "14028": 1045, "14035": 1045, "14048": 1046, "14053": 1044, "14067": 1044, "14075": 1046, "14087": 1044, "14092": 1044, "141": [84, 288, 504, 537, 907, 1005, 1025], "14108": 1045, "14114": 1045, "14156": 231, "14170": 1045, "14180": [1024, 1046], "1419": 43, "14194": 1045, "14197": 1044, "142": [43, 417], "1422": 43, "14228": 366, "14237": [1043, 1044], "14259": 1045, "14264": 1046, "142857": 231, "14286": 1045, "14287": 1045, "14294": 1045, "14296": 1045, "143": [168, 375, 473, 474, 1016, 1035, 1036], "14300": 1046, "14302": 250, "14305": 1045, "14309": 1044, "14336": 1045, "14338": 994, "14356": 1045, "14357": 1045, "1436": 147, "14378": 1045, "14381": 1045, "14393": 1044, "144": [254, 271, 384, 1025, 1035], "1440": 43, "14406": 1045, "1441": 625, "14410151": 613, "14417": 1045, "144204": 146, "1443": 1010, "14430": 1045, "14446": 1047, "14458": 1045, "14464": 1045, "14475": 1045, "144943": 62, "14496": [384, 1044], "145": [52, 410], "14510": 1045, "14516": 1046, "14520": 1045, "14538": 1045, "14544": 1045, "14549": 1045, "1456": 231, "14582": 1024, "14591": 1045, "14593": 1045, "14595": 1045, "145957": 146, "146": [45, 49, 173, 243, 417, 1025], "1460": [143, 154], "14602": 1045, "14603365": 228, "14623": 1045, "14625": 47, "14629": 1045, "1464": 241, "14646": 1045, "14647": 1045, "14680": 1045, "14682": 1045, "14696": 1046, "147": [93, 1005, 1025], "14702": 1045, "147022": 202, "14704": 1045, "14706": 1045, "1471": 1010, "14710": 1045, "14732": 1045, "14736": 1050, "1474": 384, "14740": 1045, "14764": 1045, "148": [284, 1025, 1038], "14800": 1047, "14810": 317, "14848": 1046, "14849": 1045, "14862": 1050, "14864": 1045, "14865": 1045, "14869": 1045, "14872": 1045, "14884": 1045, "14890": 1045, "14894": 1045, "14898": 1045, "149": [1005, 1035], "14900": 1045, "14902": 1045, "14907": 1045, "14908": 1045, "14933": 1045, "14936": 1045, "14971": 1045, "14975": 1049, "14982": 1047, "1499": 47, "15": [43, 45, 46, 51, 52, 53, 54, 66, 67, 70, 75, 79, 86, 87, 94, 95, 99, 105, 106, 111, 113, 118, 129, 138, 140, 142, 143, 146, 149, 163, 165, 167, 170, 174, 181, 185, 186, 187, 202, 210, 215, 227, 231, 235, 238, 240, 258, 259, 265, 266, 274, 276, 279, 282, 283, 286, 295, 299, 306, 307, 311, 313, 315, 322, 326, 331, 339, 341, 344, 347, 350, 357, 372, 373, 376, 378, 391, 396, 402, 403, 414, 417, 418, 442, 456, 492, 499, 500, 501, 534, 540, 548, 549, 558, 559, 601, 607, 612, 647, 655, 664, 666, 671, 679, 681, 695, 821, 836, 859, 888, 993, 999, 1000, 1001, 1004, 1007, 1008, 1014, 1019, 1025, 1031, 1033, 1037, 1047, 1049, 1050], "150": [43, 45, 118, 126, 138, 146, 159, 234, 238, 240, 284, 327, 345, 348, 375, 414, 419, 507, 604, 605, 828, 829, 830, 1004], "1500": [74, 83, 90, 95, 100, 118, 233, 237, 256], "15000": [675, 690, 864, 865], "15005": [1046, 1048], "15007": 1047, "15010": 1045, "15028": 1045, "15038": 1045, "150407": 384, "15044": 1045, "15049": 1045, "150527": 307, "15053": 1045, "15057": 1045, "1506": 386, "15080": 1045, "15082": 1045, "15083": 1045, "15084": 1045, "15086": 1045, "15094": 1045, "15096": 1045, "15099": 1045, "151": [325, 384, 417, 504, 1016], "15100": 1045, "1511007": 254, "151101": 254, "15119": 1045, "15120": 1045, "15126": 1047, "15138": 1045, "15160": 1045, "15179": 1046, "152": [91, 384], "15257": 1045, "1527": 863, "15274": 1045, "15297572": 539, "153": [301, 332, 666, 1025], "15304": 1045, "15319": 1024, "153244303321897735": 410, "15361": 1047, "15375": 1045, "15380": 1046, "15382": 1045, "15393": 1045, "154": [309, 654, 1005], "1542": 384, "15427": 1047, "15429": 1045, "15436": 1046, "154453": 307, "15463": 1045, "15488": 1045, "15490": 1045, "15503": 1046, "15521": 159, "15524": 1045, "1553374": 410, "1553511": 410, "1554": 863, "15550": 1024, "15557": 1045, "15558": 1046, "15582": 1046, "156": [168, 186, 375], "15611": 994, "15622": 1046, "15625": 1045, "156252": 202, "15636": 1047, "15652": 1046, "15655": 1046, "15661": 1045, "15669": 1046, "15699552": 1005, "157": [253, 384, 1025], "15707": 1046, "15709": 1046, "15730": 1046, "157334": 307, "15751": 1045, "15760": 1045, "15762": 1046, "15763": 1047, "15773": 1046, "15782": 1046, "15785": 1046, "15797": 1045, "158": [77, 417, 672], "15806": 1046, "15810": 1045, "15834": 1046, "15863": 1045, "15864": 1046, "15868": 1045, "15879": 1045, "15888": 1045, "15898": 1045, "159": [86, 373, 1035], "1590": 309, "15918": 1046, "1592": 501, "15926": 1046, "15930": 1045, "15933": 1045, "15936": 1045, "15937": 1045, "159419": 254, "15946": 1046, "15947": 1045, "15948": 1049, "15950": 1046, "15953": 1046, "15959": 1046, "15963": 1046, "1597": 265, "15980": 1046, "15984": 1049, "15996": 1045, "15e": 120, "16": [43, 44, 52, 57, 64, 78, 83, 84, 87, 99, 106, 111, 120, 123, 163, 187, 206, 212, 213, 214, 231, 233, 234, 238, 245, 249, 265, 273, 274, 275, 295, 309, 311, 315, 320, 345, 353, 358, 373, 375, 376, 384, 391, 396, 402, 403, 414, 415, 418, 444, 459, 461, 473, 474, 480, 481, 500, 501, 505, 519, 537, 538, 573, 592, 598, 599, 610, 611, 642, 653, 654, 657, 658, 659, 660, 685, 686, 816, 821, 833, 882, 908, 916, 979, 980, 981, 993, 1000, 1004, 1014, 1019, 1031, 1033, 1035, 1036, 1040, 1041, 1043, 1044], "160": [248, 993], "1600": 83, "160030": 202, "16006": 1046, "1600x1600": 87, "16018": 1049, "16021": 1046, "16052385": 130, "16061": 1049, "16066": 1047, "16069": 1046, "16075": 1046, "16076": 1045, "16084": 1046, "16090": 1046, "161": 81, "16103": 1046, "16111": 1046, "16112": 1046, "16117": 1046, "161245": 87, "16132": 1046, "16144": 384, "16147": 375, "16149": 1046, "16159": [384, 1046], "1616": 475, "16182": 1046, "16183": 1046, "162": [91, 375], "16224": 1046, "1623": 57, "1624": 501, "16245": 1046, "16257": 1046, "1626": 1024, "16261": 1046, "16266": 1046, "16280": 1046, "16289": 1047, "163": [105, 168, 288, 302, 343, 375, 1012, 1025], "163224": 202, "16323": 1046, "16326": [43, 1047], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1046, "16335": 1047, "16352": 1047, "16362": 1046, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1047, "16397": [1045, 1046], "164": 417, "164009": 274, "16401": 1046, "16403": 1046, "16431": 1046, "16437": 1046, "16442": 1046, "16443186": 1005, "16449": 1048, "16451": 1046, "16466": 1046, "16484": 1046, "16493": 1047, "165": 1005, "16500": 1045, "16505": 1045, "16508": 1046, "16530": 1047, "16531": 149, "16539": 1046, "16585": 1046, "166": [43, 309, 384, 1004, 1035], "16605": 1049, "16619": 1047, "16622": 1046, "16625": 1047, "16632": 1046, "16655": 1046, "16663": 1046, "166667315173": 52, "16692": 1046, "16695": 1050, "167": [384, 1035], "16718": 1046, "16726": 1046, "16728": 1046, "16747": 1050, "16748": 1049, "168": 1035, "1680": 375, "16801": 1046, "16837": 1046, "16841": 1046, "16849": 1046, "1689": 353, "169": [91, 309], "16906": 1047, "1691": 1000, "169106": 271, "1693": 907, "16935": 1047, "16948": 1049, "16950": 1046, "169504": 231, "16979946": 1005, "1698": 652, "16981": 1046, "16985": 1047, "16993": 1046, "17": [52, 57, 74, 85, 106, 111, 149, 171, 186, 212, 233, 237, 244, 265, 274, 306, 315, 348, 373, 376, 383, 396, 402, 403, 410, 414, 446, 463, 489, 500, 501, 503, 526, 534, 539, 543, 550, 552, 553, 558, 562, 563, 572, 573, 600, 631, 652, 660, 661, 662, 669, 672, 675, 677, 690, 695, 732, 733, 743, 764, 769, 786, 787, 790, 792, 821, 845, 856, 871, 876, 877, 885, 887, 893, 909, 912, 915, 916, 917, 918, 952, 993, 994, 1005, 1007, 1014, 1025, 1031, 1033, 1035, 1036, 1037, 1038, 1041, 1044, 1049], "170": [79, 90, 91, 95, 384], "1700": 83, "170087": 307, "17021": 1046, "17032": 1046, "17036": 1048, "17038": 1047, "170388": 1005, "1706": 334, "17061": 1046, "17090": 1047, "17095": 1047, "171": [86, 168, 375, 384, 791, 1004], "17107": 1047, "1714": 1000, "17148": 1047, "17159": 1047, "17169": 1048, "17187": 1047, "17192": 1047, "17193": 1047, "172": [384, 496, 497, 652, 1000], "17204": 1046, "17205": 1046, "17210": [52, 1046], "17225": 1047, "17226834": 86, "1723": 46, "17233": 1047, "17235": 1046, "17236387": 216, "17266": 1049, "17289014": 173, "1729": 187, "173": [82, 384, 587, 1025], "17309": 1046, "17317": 1047, "17357": 1046, "17360": [47, 1046], "17367": 1047, "17370318": 228, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1047], "1738": 1004, "17386": 1047, "17388": 1051, "17396": 1047, "174": [145, 241, 309, 384, 587], "17406": 1047, "17412": 1047, "17414": 1047, "17427": 1047, "17433": 1046, "17443": 1048, "17448": 1047, "1747": 187, "17474": 231, "17478": 1047, "17491": 1047, "17499": 1047, "175": [384, 1014], "17526": 1047, "175298": 274, "17546": 1047, "17569": 1047, "17578": 1047, "17598": 1047, "176": [265, 384, 840, 1005, 1012, 1025], "17603": 1047, "17604": 1047, "17606": 1047, "17608": 1047, "17609": 1047, "17610": 1047, "17612": 1047, "17614": 1047, "17616": 1047, "17622": 1048, "17633": 1047, "17644": 1047, "17651": 1047, "17661": 1047, "17662": 1047, "17679": 1047, "17694": 1046, "177": 384, "17702": 1047, "1771": 353, "17742": 1046, "17743": 1048, "17746": 1048, "17750": 1048, "17759": 1047, "17769": 1048, "17772": 1048, "17777": 1047, "17785": 1048, "178": [46, 375, 384, 513, 851], "178000": 313, "17804": 1047, "17812": 1046, "17819": 1049, "17826": 1047, "17833": 1047, "17848": 1046, "1785": 353, "17856": 1047, "17864": 1047, "17876": 1047, "17878": 1047, "179": [352, 375, 384, 417, 1035], "17914": 1046, "17928620": 372, "17932": 1047, "17935": 1047, "17937": 1047, "17959": 1046, "1797": [91, 269, 309, 330, 375, 422, 447, 505, 535, 536, 537, 538, 602, 603, 691, 692, 693, 694, 696, 1007], "17984": 1047, "17985": 1046, "17985197": 228, "17987": 1047, "17992": 1047, "17995": 1046, "17997": 1047, "17_760": 149, "17t14": 372, "18": [43, 46, 47, 49, 57, 75, 79, 82, 86, 93, 95, 106, 127, 146, 179, 186, 224, 238, 240, 245, 265, 271, 309, 315, 317, 331, 352, 353, 354, 378, 384, 414, 415, 418, 449, 461, 495, 503, 504, 505, 507, 508, 513, 538, 539, 541, 543, 544, 560, 561, 562, 563, 566, 567, 568, 569, 572, 574, 575, 576, 577, 578, 580, 581, 592, 597, 602, 603, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 649, 652, 661, 662, 674, 717, 721, 734, 737, 738, 744, 746, 763, 773, 800, 801, 824, 840, 863, 864, 865, 871, 877, 885, 886, 897, 907, 908, 915, 916, 917, 918, 919, 950, 951, 993, 1002, 1004, 1014, 1025, 1031, 1033, 1035, 1036, 1039, 1040, 1042, 1043, 1045, 1046], "180": [70, 97, 256, 257, 258, 261, 262, 264, 281, 300, 304, 384, 505, 1025], "1800": 83, "18000": [354, 373], "18010": 1048, "18016": 1046, "18020": 1050, "1804243": 372, "18052": 1047, "18094": 1050, "181": [288, 309, 384], "18108182014": 179, "18114": 1047, "18121": 1047, "18124": 1047, "18149": 1047, "18167": 1047, "18170": 1049, "18176": 1047, "18197458": 361, "182": [170, 236, 309, 384, 417, 1025], "18222": 1047, "18256": 1047, "18266": 1047, "18269": 1047, "18278": 1047, "18280": 1047, "18293": 1047, "18298": 1050, "183": [331, 339, 384, 1005, 1025, 1035], "18302": 1047, "18310": 1049, "18326": 1047, "18328": 1048, "18334": 1047, "18341": 1047, "18343": 1047, "18368": 1048, "18370": 1047, "18393": 1048, "18394": 1047, "184": [43, 213, 309, 384, 802], "18405": 1047, "18406": 1047, "18410": 1047, "18429": 1047, "18433": 1048, "18444": 1048, "18447": 1047, "18459": 1048, "1847": 46, "18482": 1049, "18488": 1051, "185": [86, 168, 179, 375, 384, 864, 865], "1850": [45, 373], "18508": 1047, "18510": 1047, "18525": 1047, "18527": 1047, "18528": 1047, "18543": 1048, "18545": 1047, "18555": 1053, "185654": 274, "185659": 202, "18595": 1047, "186": [213, 309, 384, 791, 1004], "18607": 1047, "18612": 1047, "18622": 1047, "18639": 1047, "18649": 1048, "1865": 47, "18682": 1047, "18689": 1052, "18691": 1047, "187": [268, 271, 384, 587, 1005, 1025, 1037], "1871": 1019, "18723": 1051, "18736": 1048, "1874": 1019, "18746": 1047, "1875": 984, "18768": 1047, "188": [168, 175, 219, 375, 384, 587, 1025], "1880": 384, "18805": 1050, "18815268": 254, "188153": 254, "18818427": 670, "18832": 1049, "18842": 1048, "18843": 1053, "18846": [373, 490, 491], "1887": 353, "18898": 1048, "189": [213, 384, 904, 1017], "18925": 1048, "189267": 274, "18959": 1048, "189631": 202, "18964": 1048, "18975": 1049, "189830": 325, "18987": 1047, "19": [43, 52, 175, 186, 217, 235, 261, 265, 288, 315, 316, 331, 375, 376, 392, 396, 402, 403, 410, 418, 421, 446, 495, 519, 520, 521, 539, 543, 544, 550, 552, 553, 560, 561, 562, 563, 567, 568, 569, 585, 592, 610, 651, 661, 662, 669, 670, 671, 674, 675, 677, 679, 681, 690, 710, 784, 788, 802, 803, 817, 830, 835, 836, 838, 839, 853, 854, 873, 884, 905, 909, 912, 915, 916, 917, 918, 993, 1004, 1014, 1025, 1031, 1033, 1035, 1036, 1037, 1038, 1040, 1043, 1052], "190": [50, 145, 164, 231, 248, 280, 304, 373, 384, 501, 1025], "1900": 83, "19002": 1048, "19004": 1048, "19011": 1048, "19024": 1048, "19035": 1048, "1903908407869": 216, "19041": 1048, "19046": 1048, "19047631514961908949361222113": 52, "1905": [168, 375], "19052": 1048, "19055": 1048, "19069": 1048, "19075": 1050, "19085": 1049, "191": [137, 250, 384, 1005, 1025], "19112072e": 195, "19126": 1047, "19145": 354, "19158": 1049, "19159": 1048, "19162": 1048, "19172": 1048, "19174891": 308, "19179": 1047, "19182": 1047, "19198": 1048, "192": [145, 384, 1035], "19210": 1048, "19211": 1047, "19234": 1047, "19244": 1048, "19263": 1048, "19271": 1047, "19278": 1048, "192913": 274, "192938": 52, "19296": 1048, "19297": 1048, "193": [267, 338, 384, 417, 718, 789, 1017, 1025], "19308": 1047, "1931": 111, "19310": 1048, "19317": 175, "19336": 1048, "193548": 231, "19356": 1048, "1936": 375, "19365": 1048, "19390": 1048, "19391": 1048, "193949": 274, "194": 309, "1940": 231, "19401": 1048, "19407": 1047, "19411": 1048, "19415": 1048, "19417": 1047, "194239": 384, "19426": 1048, "19428": 1048, "19438": 1049, "19459": 1048, "19472": 1048, "19473": 1048, "1948": 57, "19483": 1048, "19490": 1049, "19491": 1048, "19499": 1048, "195": [199, 257, 496, 497, 1025], "1950": [375, 1004], "1951": 231, "195133": 384, "19520": 1048, "19522393": 228, "19527": 1048, "19564": 1048, "19568": 1048, "19571": 1048, "19579": 1047, "1958": [175, 415, 417, 535], "19580": 1047, "196": [246, 904, 1017], "1960": [630, 719], "19616": 1048, "19631": 1048, "1964": [693, 697, 883, 895, 1001], "19641": 1048, "19643": 1048, "19646": 1047, "19659": 1047, "19662693": [847, 848], "19664": 1051, "19669": 1048, "196795181": 52, "19680": 1049, "196861": 202, "19689": 1049, "19703": 1047, "1972": 375, "19721": 1047, "19727": 1047, "1973": [375, 408], "19732": 1047, "19733": 1048, "19734": 1048, "1974": [410, 418, 713], "19747": 1049, "1975": 1007, "19752": 1048, "19766": 1048, "197666": 274, "1977": 638, "1978": [231, 1000], "19784": 1048, "19788": 1048, "1979": [410, 728, 772], "19790": 1048, "19794": 1049, "19799": 1048, "198": 1035, "1980": 375, "19803308": 115, "1981": [231, 1000], "19829832": 228, "1983": [410, 734, 887], "19836": 1048, "1984": [111, 112, 412, 476, 915, 916, 1020], "19847": 1047, "1985": [186, 410, 708, 718, 789], "1986": [994, 1020], "19869": 1048, "1987": [410, 610, 611, 795, 796], "198766": 274, "19879": 1048, "1988": 375, "19883": 1048, "19888": 1047, "1989": [280, 638, 791, 864, 865, 1000, 1007], "199": [258, 277, 650, 794, 1019, 1025], "1990": 373, "19906": 1048, "19908": 1048, "1990a": 408, "1991": [519, 520, 521], "19916": 1049, "1992": [168, 373, 375, 414, 417, 570, 571, 648, 1000], "19922": 1047, "19924": 1047, "1993": [168, 375, 476, 667, 688, 689, 1020], "19934": 1048, "19939": 1047, "1993apr6": 102, "1994": [168, 373, 375, 647], "19948": 1048, "1995": [168, 271, 375, 408, 417, 556, 557, 837, 904, 1005], "1996": [64, 149, 410, 417, 421, 446, 519, 520, 521, 558, 559, 1014], "1997": [135, 373, 415, 417, 538, 557, 693, 697, 1000, 1001, 1004], "1998": [149, 271, 373, 375, 415, 417, 558, 559, 837, 842, 873, 1005, 1006, 1008, 1014, 1018], "19982": 1047, "1999": [178, 373, 408, 410, 412, 415, 417, 439, 452, 459, 471, 476, 537, 544, 558, 559, 562, 563, 726, 901, 909, 910, 912, 913, 1010, 1016], "19th": 410, "1_": 1014, "1_000": [44, 64, 70, 104, 125, 149, 170, 175, 177, 187, 244, 268, 348, 409, 540, 542, 704, 802, 825, 826, 834], "1d": [2, 135, 137, 183, 187, 214, 244, 292, 295, 304, 328, 347, 358, 378, 385, 387, 391, 392, 411, 416, 466, 469, 620, 633, 636, 656, 660, 663, 666, 687, 706, 715, 716, 722, 732, 733, 737, 741, 786, 787, 790, 799, 849, 850, 851, 852, 853, 855, 857, 858, 859, 872, 924, 927, 929, 933, 934, 966, 990, 1005, 1025, 1035, 1040, 1041, 1042, 1044, 1048, 1049, 1053], "1e": [44, 45, 46, 49, 55, 63, 80, 120, 168, 170, 173, 175, 176, 177, 178, 179, 181, 186, 194, 206, 213, 214, 220, 227, 231, 236, 240, 246, 251, 256, 259, 262, 269, 279, 282, 308, 318, 323, 326, 334, 339, 341, 348, 352, 384, 422, 445, 449, 454, 461, 464, 473, 474, 480, 484, 485, 486, 534, 535, 536, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 562, 563, 564, 565, 595, 600, 609, 611, 612, 614, 616, 617, 618, 622, 623, 625, 626, 628, 630, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 692, 693, 694, 695, 696, 697, 698, 731, 788, 800, 801, 817, 842, 843, 844, 845, 846, 847, 848, 856, 864, 865, 872, 902, 903, 907, 908, 909, 910, 911, 912, 913, 989, 993, 1004, 1008, 1012, 1014, 1018, 1043, 1048, 1049, 1050], "1e0": [170, 246, 262, 279, 993], "1e1": [170, 176, 213, 246, 341], "1e15": 179, "1e2": [49, 170, 177, 246, 262, 341], "1e3": [45, 46, 49, 170, 176, 181, 246, 282, 326, 993], "1e4": [282, 662, 682, 901, 1016], "1e5": [45, 175, 195, 197, 203, 282, 616, 617, 618, 622, 623, 625, 626, 628, 896, 901, 1016], "1e6": [47, 49, 206, 244, 328, 352, 354, 365, 539, 901, 1004, 1016], "1e7": 384, "1er": 418, "1f": [52, 58, 83, 86, 123, 194, 213, 244, 256, 258, 278, 320, 327, 353, 354], "1gb": 365, "1kastner": 1042, "1m": 969, "1mb": [366, 1040], "1mo": 175, "1nn": 375, "1or": 418, "1px": 309, "1qlettinn8oi": 352, "1st": [0, 43, 93, 126, 178, 214, 316, 885, 886], "1z": 418, "2": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 367, 372, 373, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 390, 391, 392, 396, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 487, 496, 499, 503, 504, 507, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 584, 585, 587, 588, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 706, 707, 708, 709, 710, 711, 714, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 766, 767, 770, 771, 772, 774, 776, 777, 778, 779, 781, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 922, 929, 930, 931, 933, 934, 935, 939, 943, 949, 950, 951, 952, 953, 954, 955, 957, 958, 964, 965, 966, 967, 968, 969, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1025, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1040], "20": [2, 43, 46, 47, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 78, 80, 81, 83, 87, 88, 94, 100, 109, 113, 118, 120, 127, 129, 136, 140, 142, 143, 146, 150, 154, 155, 157, 161, 163, 164, 165, 168, 176, 185, 187, 188, 196, 202, 203, 205, 209, 210, 212, 213, 214, 217, 222, 225, 226, 227, 228, 230, 236, 244, 250, 258, 260, 261, 265, 271, 272, 274, 275, 277, 282, 283, 286, 288, 291, 295, 296, 297, 298, 299, 302, 309, 315, 316, 317, 321, 322, 323, 324, 326, 330, 331, 334, 338, 340, 344, 346, 350, 353, 354, 358, 359, 371, 375, 376, 378, 383, 384, 396, 402, 403, 410, 417, 418, 443, 448, 449, 451, 466, 467, 471, 473, 474, 480, 490, 491, 492, 493, 495, 497, 499, 500, 503, 505, 507, 508, 514, 515, 518, 519, 526, 534, 539, 540, 545, 548, 549, 551, 555, 558, 559, 562, 563, 564, 565, 566, 572, 573, 585, 592, 593, 595, 597, 600, 602, 632, 633, 648, 652, 661, 669, 670, 671, 679, 681, 699, 707, 711, 716, 719, 728, 729, 742, 759, 760, 770, 795, 796, 800, 801, 802, 803, 817, 829, 830, 831, 834, 836, 839, 840, 841, 844, 845, 852, 853, 864, 865, 866, 867, 869, 871, 872, 880, 881, 882, 883, 888, 902, 903, 905, 906, 911, 914, 919, 925, 931, 933, 934, 937, 981, 993, 1000, 1004, 1007, 1010, 1011, 1014, 1017, 1025, 1027, 1028, 1030, 1031, 1033, 1035, 1041, 1044, 1047, 1049, 1050], "200": [69, 70, 79, 83, 87, 93, 107, 123, 136, 146, 153, 174, 199, 208, 214, 217, 218, 219, 225, 230, 234, 252, 256, 272, 278, 280, 281, 311, 314, 332, 340, 341, 359, 361, 373, 390, 415, 417, 422, 442, 456, 470, 473, 474, 525, 536, 537, 538, 541, 542, 543, 546, 550, 587, 652, 654, 674, 682, 695, 749, 817, 864, 865, 905, 909, 910, 911, 912, 913, 925, 1004, 1019], "2000": [54, 63, 75, 83, 107, 121, 127, 191, 259, 262, 271, 288, 306, 324, 353, 373, 375, 410, 411, 417, 422, 454, 464, 536, 537, 562, 692, 694, 696, 746, 791, 800, 853, 883, 895, 1001, 1004, 1010, 1016], "20000": [57, 122], "200000": [231, 872], "20002": 1048, "2001": [2, 64, 175, 188, 265, 270, 407, 410, 417, 439, 453, 454, 455, 464, 514, 562, 563, 567, 568, 631, 637, 642, 648, 694, 699, 738, 791, 888, 900, 938, 994, 996, 1000, 1004, 1010, 1012, 1014, 1016, 1019], "2002": [96, 408, 410, 417, 439, 450, 596, 597, 729, 759, 854, 902, 996, 1004], "20023": 1048, "2003": [2, 51, 175, 407, 410, 415, 418, 453, 454, 464, 516, 518, 692, 696, 842, 844, 1000, 1001, 1006, 1016, 1043], "20030": 1048, "20031": 1049, "2004": [44, 168, 271, 288, 373, 375, 410, 412, 415, 475, 538, 610, 611, 692, 696, 708, 746, 786, 903, 998, 1000, 1001, 1006, 1019], "2005": [62, 64, 112, 375, 408, 439, 441, 856, 1000, 1007, 1017], "20056": 1048, "2006": [2, 50, 304, 373, 417, 420, 464, 501, 560, 561, 568, 569, 613, 614, 617, 622, 625, 652, 669, 670, 744, 791, 792, 800, 842, 900, 917, 918, 1000, 1004, 1006, 1009, 1016, 1017], "2007": [0, 73, 200, 373, 410, 419, 442, 454, 456, 462, 464, 569, 659, 694, 720, 737, 740, 761, 762, 798, 996, 1000, 1002, 1004], "20072": 1048, "2008": [51, 412, 414, 415, 480, 537, 566, 593, 648, 667, 688, 689, 695, 719, 729, 759, 837, 842, 846, 863, 998, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1019], "20087": 1048, "2009": [2, 134, 137, 138, 148, 198, 410, 414, 415, 417, 418, 522, 523, 531, 534, 540, 541, 543, 544, 547, 550, 556, 562, 563, 638, 674, 682, 699, 838, 915, 916, 950, 951, 1000, 1004, 1005, 1011, 1020], "200_000": [872, 1051], "200j": 161, "200m": 373, "200x": 1035, "201": [145, 168, 205, 210, 375, 587, 1025], "2010": [0, 110, 187, 276, 277, 407, 410, 412, 414, 415, 423, 477, 539, 707, 711, 722, 723, 743, 832, 864, 865, 996, 1000, 1004, 1008, 1018, 1022, 1035], "2011": [0, 187, 384, 415, 418, 538, 541, 543, 544, 550, 593, 630, 641, 661, 733, 994, 1008, 1018, 1022, 1035], "20117": 1048, "2012": [0, 112, 408, 417, 558, 559, 566, 642, 746, 993, 997, 1004, 1022, 1035], "2013": [0, 191, 375, 410, 414, 415, 539, 729, 759, 996, 1004, 1022, 1036, 1037], "2014": [0, 372, 404, 415, 417, 420, 533, 610, 611, 625, 626, 661, 695, 864, 865, 950, 951, 1001, 1008, 1028, 1038], "20145": 1049, "2015": [0, 187, 372, 711, 724, 726, 727, 864, 865, 1004, 1011, 1028, 1039, 1040], "201520": 202, "20155": 1048, "20159": 1048, "2016": [0, 238, 372, 410, 993, 1040, 1041], "20161": 1048, "20165": 1048, "2017": [0, 271, 372, 408, 410, 421, 446, 1004, 1041, 1042], "2018": [0, 213, 231, 418, 452, 993, 1004, 1028, 1042, 1043], "2019": [0, 187, 376, 410, 454, 464, 695, 1001, 1004, 1011, 1014, 1043, 1044, 1045], "2020": [0, 373, 1045, 1046, 1047, 1048], "20200": 1048, "20207": 1048, "20209": 1048, "2021": [0, 376, 378, 674, 1004, 1047, 1048], "2022": [0, 366, 410, 417, 708, 1014, 1049, 1050], "2023": [0, 390, 404, 408, 1050, 1051], "20231": 1048, "2024": [1052, 1053], "20240": 1048, "20250": 1048, "20272": 1048, "20297": 1048, "203": [86, 168, 353], "20312": 1048, "203174": 202, "20326": 1048, "20331": 1050, "2034": [352, 373], "20380": 1048, "20385": 1048, "2039": 274, "204": [1012, 1017], "20408": 1049, "20415": 1050, "20416": 1048, "20431": 1048, "20477": 1048, "20481929": 327, "20512": 1048, "20515": 1048, "20521": 1048, "20524": 1051, "20526": 1048, "20528": 1048, "20531": 1048, "20534": 1048, "20552": 1048, "20554": 1048, "20560": 1048, "20567": 1049, "20583": 1048, "20597": 1048, "20617": 1050, "20619": 1048, "20638": 1048, "20640": [140, 182, 373, 492], "20652": 1048, "20653": 1049, "20657": 1048, "20673": 1048, "20683": 1048, "207": [228, 309, 1035], "2071716": [847, 848], "20727": 1048, "20729": 1048, "20752": 1048, "2075215": 228, "20753": 1049, "20761": 1048, "207667": 274, "2079": 276, "208": [168, 291, 375], "20802": 1050, "20803": 1049, "2081": 47, "20811": 1049, "2084": 47, "20842": 1048, "20843": 1048, "20860": 1049, "20880": 1048, "208864": 202, "20899": 1048, "209": [286, 744, 883, 1025], "20904": 1048, "2094": 47, "20959": 1048, "20960": 1048, "20961": 1048, "2098": 47, "20_000": 291, "20new": 373, "20newgroup": [66, 183, 192, 205, 229, 309, 491, 661, 833, 836, 1000, 1025], "20news_hom": 373, "20newsgroup": [228, 371, 1035], "20th": 711, "21": [43, 52, 105, 118, 149, 168, 186, 202, 213, 214, 231, 234, 261, 265, 291, 309, 313, 315, 326, 375, 376, 380, 382, 396, 407, 417, 418, 443, 447, 476, 480, 532, 535, 564, 565, 566, 572, 573, 591, 592, 594, 630, 672, 690, 757, 803, 817, 830, 873, 880, 882, 888, 905, 921, 950, 996, 1000, 1004, 1005, 1014, 1025, 1031, 1033, 1035, 1036, 1038, 1042, 1043, 1045], "210": [212, 1025], "2100": [83, 323], "2102": 547, "21020": 1050, "21026": 1049, "21032": 1049, "21038": 1049, "2107": 276, "21078": 1049, "21079": 1049, "21080": 1048, "21086": 1049, "21093": 1048, "211": [276, 325, 333, 883, 895], "21109": 1049, "21114": 1049, "211217613": 1043, "21130": 1048, "21145": 1048, "21148": 1049, "2117": 334, "21177": 1049, "21179": 1048, "21194": [80, 1048], "21195": 1048, "21199": 1048, "212": [145, 168, 276, 333, 375, 471, 503, 1010], "21219": 1049, "212197e": 231, "21243": 80, "21251": 1048, "2126": 250, "21271": 1048, "21278": 1049, "21295": 1048, "21298": 1049, "213": [115, 199, 1025], "21301203": 173, "213056e": 231, "21310": 1049, "21316": 1049, "21330": 1049, "21334": 1049, "21336": 1048, "21340": 1048, "21341": 1049, "21351": 1048, "21389": 1048, "2139": [213, 231], "214": [171, 587], "21408": 1049, "21425": 1049, "21430": 1049, "21432": 1049, "21434": 1049, "21436": 1049, "21443888": 228, "21445": 1049, "21448": 1049, "21469": 1050, "21481": [1048, 1049], "21482": 1049, "21493": 1048, "215": [303, 587, 1025], "21517": 1048, "21534": 1049, "21542": 1049, "21544347": 51, "21552": 1048, "21565": 1049, "2156660": 327, "21567": 1049, "21569": 1049, "21573": 1049, "21576": 1049, "21578": [47, 1048], "2159048": [656, 666, 687], "216": 1017, "21606": 1049, "21616": 744, "21617": 1049, "21632": 1049, "21694": 1048, "217": [54, 538, 544, 802], "21701": 1049, "21705": 1049, "2171": 46, "21713": 1049, "21724": 1049, "2173": [200, 659, 1000], "21735": 1049, "21741": 1048, "21762": 1049, "21767": 1049, "2179": 47, "218": [375, 473, 718, 789], "2180": 57, "21800": 1049, "21805": 1049, "21807": 1052, "21808": 1049, "21809": 1051, "21814": 1049, "21832": 1049, "21833": 1048, "21837": 1049, "21845": 1048, "21871": 1048, "21873": 1049, "21880": 1049, "21881": 1049, "21888": 1049, "218997": 202, "219": [128, 270, 1025], "21901": 1049, "21915": 1048, "21917": 1048, "2192": [200, 659, 1000], "21938": 1050, "2195": 47, "21954": 1049, "2197": 47, "21987": 1049, "21988": 1049, "21991": 1048, "21998": 1049, "22": [43, 52, 77, 138, 139, 141, 181, 182, 183, 186, 187, 188, 191, 230, 238, 250, 253, 261, 265, 293, 309, 311, 315, 319, 322, 325, 328, 331, 334, 354, 378, 383, 396, 407, 439, 450, 474, 480, 490, 491, 498, 499, 507, 518, 527, 534, 540, 545, 548, 549, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 597, 612, 630, 631, 635, 637, 648, 650, 654, 656, 658, 661, 662, 664, 666, 668, 672, 691, 695, 705, 707, 716, 760, 772, 781, 786, 787, 791, 803, 804, 808, 817, 822, 824, 827, 828, 829, 830, 831, 832, 833, 834, 851, 853, 855, 857, 858, 859, 864, 865, 866, 868, 871, 887, 898, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 945, 946, 996, 1004, 1014, 1025, 1031, 1033, 1035, 1038, 1043, 1046, 1048], "220": [79, 265, 312, 1025, 1035], "2200": [47, 83, 373, 496], "22002": 1049, "2201": 47, "22014": 1050, "22015": 1049, "22016": 1049, "22027": 1049, "220446049250313e": [473, 474, 480, 653, 654, 657, 658, 659, 685, 686], "22050": 1048, "22054": 1050, "22058": 1049, "22059": 1049, "22062": 1049, "22063": 1049, "22064": 1049, "22065": 1049, "221": [115, 152, 265, 1038], "22106": 1049, "22108": 1049, "2211": 637, "22111": 1049, "22114": 1049, "22118": 1049, "22119": 1049, "22120": 1049, "22137": 1049, "22148": 1049, "22149": 1049, "22150": 1049, "22154": 1049, "22159": 1049, "22181": 1049, "22188": 1049, "22191": 1049, "22199": 1049, "222": [115, 152, 240, 334, 1019, 1025], "22203": 1049, "22206": 1049, "2221": 47, "22212": 1049, "22215": 1049, "22217": 1049, "22218": 1049, "2222": [47, 659], "22223": 1049, "22235": 1049, "22237": 1049, "2224": 1037, "22240": 1049, "22248": 1049, "22249": 1049, "2225": 47, "22254": 1049, "22255": 1049, "2226": 47, "22268": 1050, "22269": 1050, "22284": 1049, "22288": 1049, "223": [115, 152, 168, 375], "22300": 1049, "22314355": 593, "22318": 1049, "22320": 1049, "22356": 1049, "22361": 375, "22370": 1049, "223745": 213, "224": [86, 115, 152, 244, 410, 728, 825], "22409": 1051, "22410": 1049, "22412": 1049, "22438": 390, "2246": 231, "22476": 1049, "22486": 1049, "22493": 1049, "22498": 1049, "225": 417, "22504": 410, "22506": 1051, "22508": 1049, "22518": 1050, "22525": 1049, "22526": 1049, "22527": 1050, "22537": 1049, "22548": 1049, "22553": 1049, "22554": 1050, "22562": 1050, "22566": 1049, "22578": 1049, "225806": 231, "22595": 1049, "226": [410, 421, 446], "22604": 1049, "22629": 1050, "22635": 1049, "2264": 47, "2266": 47, "22665": 1050, "2267": 47, "2268": 47, "22685": 1049, "22687": 1049, "22692": 123, "22694": 1049, "22695": 1049, "22696": 1049, "22697": 1049, "227": [126, 271, 410, 728, 1025], "2270": 47, "2271": 47, "22710": 1050, "2272": 47, "22735": 1049, "2274": 47, "22747343e": 111, "22775": 1049, "22784907": 830, "228": [178, 1025], "22806": 1049, "22808": 1049, "22830": 1049, "2284": 187, "22856": 1049, "2286": 373, "22866": 1049, "22868": 1049, "2287": 373, "2288": 373, "22891": 1049, "22898": 1050, "22899": 1049, "229": [163, 1004, 1025], "22908": 1049, "22913": 1049, "2292": 47, "2294": 47, "22950": 1049, "22953": 1049, "22965": 1050, "22968": 1050, "22982": 1049, "2299": 47, "22993": 1050, "22nd": 441, "23": [43, 57, 63, 70, 83, 123, 151, 168, 183, 213, 238, 242, 252, 254, 261, 265, 309, 315, 319, 322, 323, 324, 327, 331, 375, 384, 396, 417, 423, 433, 442, 449, 454, 456, 464, 467, 469, 470, 477, 480, 481, 482, 484, 485, 486, 492, 495, 503, 504, 505, 507, 508, 513, 515, 517, 525, 527, 541, 542, 543, 546, 550, 557, 559, 561, 563, 564, 565, 568, 571, 572, 573, 610, 611, 614, 630, 633, 635, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 678, 681, 682, 683, 684, 720, 733, 781, 833, 839, 840, 841, 850, 858, 865, 868, 880, 887, 895, 896, 905, 908, 910, 913, 916, 918, 931, 933, 934, 945, 946, 951, 1004, 1025, 1031, 1033, 1035, 1036, 1042, 1043, 1044, 1047], "230": 587, "2300": [47, 83, 202], "23023": 1049, "23033": 1049, "23034": 1049, "23036": 1049, "23038": 1050, "23040": 1049, "23046": 1049, "23047": 1049, "23077": 1049, "23079": 1049, "23095": 1049, "23097": 1049, "23098": 1049, "23099": 1051, "231": [50, 304, 373, 410, 421, 446, 501, 587], "23101": 1050, "23113": 1049, "23115": 1049, "23127": 1050, "23139": 1050, "23149": [373, 500, 1049], "23194": 1049, "23197": 1050, "23198": 1049, "232": [265, 1004], "23210": 1050, "23214": 1049, "2323": [692, 696, 1001], "23252": 1050, "23256": 1049, "23264": 1049, "23271": 1049, "23273": 1049, "23275": 1050, "23299": 1049, "233": [90, 103, 1025], "2331": 43, "23317": 1052, "2332": 43, "2333": 43, "2334": 43, "2335": 43, "23358": 1049, "2336": 384, "23370": 1049, "23395": 1049, "233mb": 45, "234": [86, 842, 846, 864, 865, 1006], "2341": 527, "23410": 1049, "234137": 202, "23442": 1050, "23446": 1050, "23461": 1050, "23470": 1050, "23471": 1049, "23480": 1050, "235": 317, "235430": 274, "23548": 1049, "2357juan": [1049, 1050, 1051], "23585": 1050, "23595": 1051, "23604": 1050, "23608": 1049, "23619": 1050, "23636": 1049, "23637": 1050, "23668876": [656, 666, 687], "236720": 202, "23683": 1050, "23689075": [656, 666, 687], "23726": 1050, "23731": 1051, "23734": 1050, "237703": 202, "23773583": 111, "23786125": 209, "23798": 1050, "23819": [1050, 1051], "23833": 1049, "23834": 1050, "23865": 1050, "23874": 1050, "238744": 202, "23877": 1050, "238955": 274, "239": 1035, "23905": 1050, "23935": 1050, "23977": 1050, "23990": 1049, "23993": 1050, "24": [43, 44, 47, 52, 99, 149, 154, 168, 183, 187, 191, 198, 221, 265, 283, 291, 317, 319, 320, 321, 323, 326, 327, 330, 331, 376, 378, 382, 396, 402, 403, 410, 417, 418, 439, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 462, 464, 466, 471, 472, 473, 474, 475, 476, 477, 478, 491, 492, 493, 495, 499, 507, 518, 519, 520, 521, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 547, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 584, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 616, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 701, 702, 703, 705, 711, 717, 730, 749, 756, 800, 801, 803, 806, 807, 817, 824, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 868, 870, 871, 872, 873, 876, 877, 879, 881, 882, 883, 884, 885, 887, 897, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 945, 946, 950, 978, 984, 993, 1011, 1014, 1025, 1031, 1033, 1035, 1043, 1044, 1045, 1046, 1048], "240": [43, 52, 79, 352, 1012, 1035], "2400": 83, "24000": 523, "24015": 1049, "24017": 1049, "24027": 1051, "24051": 1050, "24058": 1050, "24075": 1050, "24076": 1051, "24083": 1051, "24084": 1050, "24087": 1049, "241": [325, 417, 570, 571, 1025], "2410": 547, "24140": 1051, "24141": 1050, "24145": 1051, "24146": 1050, "24160": 325, "242": [887, 1035], "24218": 1050, "24230": 1051, "24245": 1050, "24258": 1050, "24264": 1050, "24283": 1050, "243": [327, 587, 1025], "2431": 477, "24317": 1050, "24338": 1050, "24350": 1050, "24354": 1050, "24365": 1050, "243802": 307, "244": [265, 288, 587], "24404831511191221642141021252626109": 52, "24405": 1050, "2441": 231, "24412": 1050, "24421": 1050, "24433": 1050, "24446": 1049, "244466": 254, "24465": 1050, "2449": 384, "245": [1016, 1037], "24512": 1050, "24523": 1050, "24528": 1050, "24538": 1050, "24539": 1050, "24543": 1050, "24556": 1050, "24568": 1051, "245961": 146, "245mb": 354, "246": [198, 1012, 1035], "24617": 1050, "2463": 1000, "24630": 1050, "24631": 1049, "24637": 1050, "24640578": 111, "24645": 1050, "24667": 1050, "24668": 1051, "24677": 1051, "24683": 1050, "24688": 1050, "24699": 1050, "247": 887, "24714": 1050, "24747": 1050, "24750": 1050, "24755": 1050, "24767": 1050, "24769": 1051, "24838": 1052, "24849": 1050, "24855": 1050, "24856": 1050, "24871": 1051, "24873": 1050, "2487575": 191, "2487591": 191, "24882": 1051, "24889": 1050, "24894": 1050, "249": 265, "24935": 1051, "24951": 1050, "25": [43, 44, 45, 46, 47, 48, 49, 50, 52, 57, 61, 63, 77, 87, 88, 111, 115, 127, 129, 138, 146, 164, 165, 171, 181, 186, 187, 194, 203, 217, 240, 258, 265, 271, 304, 306, 309, 311, 313, 325, 330, 331, 352, 359, 361, 365, 384, 414, 417, 418, 421, 446, 479, 483, 504, 507, 524, 573, 600, 621, 681, 737, 799, 820, 833, 859, 877, 882, 884, 885, 888, 896, 897, 899, 900, 948, 952, 984, 1000, 1004, 1005, 1007, 1014, 1025, 1035, 1037, 1043, 1046], "250": [49, 98, 146, 191, 233, 496, 695, 825, 993, 1016, 1042], "2500": 1004, "25000": 77, "2501": [168, 375], "25044": 1051, "250639": 202, "25067": 1050, "25077": 1050, "25080": 1050, "25089": 1050, "25093": 1051, "25094": 1050, "251": [168, 235, 375], "25102": 1051, "25120": 1051, "25129": 1050, "25147": 1050, "25163598": 386, "25172": 1050, "25174": 1050, "25177": 1051, "25183501383331797": 279, "25186": 1051, "25188": 1050, "25190": 1051, "25193977": 1005, "25196": 1051, "252": [168, 235, 375, 537, 883, 895], "25209": 1051, "25214": 1051, "25220": 1051, "25232": 1051, "25250": 1050, "25251": 1051, "25257": 1051, "25274": 1050, "25275": 1052, "25291": 1051, "25291366": 361, "25294": 1051, "25295": 1050, "25296": 1050, "25297": 1051, "25299": 1051, "253": [145, 207, 537, 1025], "25308": 1051, "25312": 1050, "25334": 1051, "25341": 1050, "253445": 146, "25349312e": 195, "2535": [471, 476], "25354": 1050, "2536": 478, "25363": 1050, "25367": 1051, "25370": 1050, "25387": 1051, "254": [168, 359, 1025], "25402": 1051, "25417": 1051, "25432": 1051, "25438": 1051, "25443": 1051, "25477": 1050, "2548": 209, "25490": 1051, "25499205": 539, "255": [123, 291, 308, 317, 323, 373, 417, 496, 497, 564, 565], "25500": 1050, "25506": 1051, "25511": 1050, "25531": 1051, "25563": 1050, "25570": 1050, "25587": 1051, "25589": 1050, "256": [77, 86, 145, 317, 366, 373, 410, 417, 451, 470, 540, 549, 566, 863, 895, 905, 1049], "25601": 1051, "25619": 1050, "25629": 1051, "25638": 1050, "25659": 1051, "25664": 1050, "25672": 1051, "25677": 1051, "2568": 1044, "25694": 1050, "25697": 1051, "257": [235, 261, 269, 1025], "25704": 1050, "25713": 1051, "25719016": 1005, "25732": 1051, "25733": 1051, "25744": 1050, "25747": 1050, "25752": 1051, "25774": 1050, "25784": 1051, "2579": 695, "258": [235, 266, 1025], "25805": 1051, "25813": 1051, "25814": 1051, "25815": 1051, "259": [50, 235, 304, 373, 417, 501, 570, 571], "259031": 202, "259297": 202, "25931": 1051, "25956": 1051, "25973": 1051, "25987": 1051, "25991": 1053, "25th": [43, 250, 885], "26": [43, 47, 80, 87, 111, 118, 122, 175, 186, 238, 249, 265, 331, 384, 573, 651, 732, 786, 825, 883, 895, 951, 1004, 1014, 1035, 1038, 1039, 1047, 1053], "260": [270, 1048], "26019": 1051, "26021": 1051, "26033": 1051, "2605": 695, "26082": 1051, "26093": 1051, "26106": 1051, "26108": 1051, "26113448": 165, "26120": 1053, "26121": 1051, "26163": 1052, "26194": 1051, "262": [54, 1035], "26207": 1051, "26242": 1051, "26243": 1052, "26253567e": 111, "26264": 1051, "26267": 1052, "26278": 1052, "26286": 1051, "26286057": 228, "26289": 1051, "26299": 1052, "26315": 1052, "26316": 175, "26318": 1051, "26323": 1051, "263234": 254, "26323428": 254, "26325": 1051, "26333": 1051, "26337": 1051, "26362917": 228, "26366": 1052, "263758": [586, 590], "26376": 1051, "26385": 1051, "26386": 1051, "26386883": 173, "26391": 1052, "2640": 838, "26400": 1051, "26410": 1052, "26411": 1052, "26416": 1051, "26424": 1051, "26433": 1051, "26454": 1051, "26459": 1052, "26464": 1052, "26466": 1051, "265": [54, 124, 738, 842, 846, 1006, 1025], "26503": 1051, "26506": 1052, "26521": 1051, "2652124": 818, "26525": 1052, "26551": 1051, "26566": 1051, "26579": 1051, "26593496": 228, "26600": 1051, "26602": 1051, "26616": 1052, "26634": 1052, "26642044": 669, "26644": 1051, "26648": 1052, "26653": 1051, "26657": 1051, "2666": 1004, "2667": 501, "26674": 1052, "26683": 1052, "267": 1035, "2671": 1014, "26721": 1052, "26734": 1052, "26736": 1052, "26744": 1052, "26748": 1051, "2675": 46, "26754": 1051, "26760": 1051, "26765": 1052, "267703": 87, "26772": 1051, "26786": 1052, "26789": 1052, "268": [244, 285], "26814": 1051, "268147": 274, "26828": 1052, "26830": 1052, "26831": 1052, "26837": 1053, "26840": 1052, "26855": 1052, "26862": 1052, "26893": 1051, "26896": 1052, "269": [257, 295, 514, 1025], "26903": 1051, "26909": 1052, "26913": 1051, "2692": 1014, "26931": 1051, "26934744": 130, "26940": 1051, "26944": 1052, "26957": 1052, "26th": [410, 729, 759, 1004], "27": [43, 45, 52, 57, 67, 81, 87, 265, 272, 273, 330, 331, 349, 375, 410, 418, 520, 527, 608, 716, 791, 792, 888, 908, 1004, 1014, 1025, 1035, 1037], "270": [198, 331], "27000": 231, "27002": 1051, "27005": 1052, "27006": 1052, "27017": 1052, "27018": 1052, "27044": 1051, "27054655": 228, "27058": 1052, "27098": 1052, "27100": 1052, "27104": 1052, "27110": 1052, "27137": 1052, "27139": 1052, "2714": 250, "271411": 254, "27161": 1052, "27161955": 165, "27166": 1052, "27167": 1051, "27179": 1052, "27185": 1052, "27204": 1052, "27219": 1052, "272214": 587, "27239": 1052, "27240": 1052, "27243": 1051, "27250": 1052, "27252": 1052, "2727": 561, "27274": 1052, "27277": 1052, "27291": 1052, "27292": 1051, "27301": 1052, "27308": 1052, "27309": 1052, "27311": 1051, "27314": 1052, "27315": 1052, "27328": 1052, "27336": 1052, "2734": 384, "27344": 1053, "27372": 1052, "27389": 1052, "274": [211, 514, 1025], "27417": 1052, "27431": 1052, "27438": 1052, "27456": 1053, "27468": 1051, "27478": 1052, "27490": 1052, "27491": 1053, "27499706": 51, "275": [43, 331, 1038], "27500": 1052, "27526": 1053, "27538": 1052, "27544": 1052, "27556": 1052, "27558": 1052, "27560": 1053, "27566": 1053, "275706": 87, "27573": 1051, "27576": 1053, "27577": 1052, "27580": 1051, "27583": 1051, "27584": 1053, "275851": 254, "2759": [899, 900], "27597342": 115, "276": 271, "27601": 1052, "27614": 1052, "27624": 1052, "2763": [423, 477], "27636": 1053, "27639": 1052, "27645": 1052, "27650": 1052, "27651": 1052, "27657": 1053, "27668": 1052, "27670": 1052, "27675": 1052, "27678": 1052, "277": [1012, 1037], "27700": 1053, "27702": 1052, "27710": 1052, "27718": 1052, "27720": 1052, "27721": 1052, "27734": 1052, "27757": 1052, "27760": 1052, "27772182": 52, "278": [345, 375, 847, 848, 1025], "2780": 384, "27800": 1053, "27801": 1052, "27817": 1052, "27821": 1052, "27828": 1052, "27834": 1052, "27835": 1052, "27841": 1052, "27844": 1053, "27865": 1052, "27898": 1052, "27899": 1052, "279": [179, 224, 1000, 1025], "27904": 1053, "27937": 1053, "27979": 1052, "27990": 1053, "28": [43, 99, 123, 146, 168, 186, 229, 250, 265, 280, 308, 330, 331, 375, 384, 410, 414, 452, 459, 1014, 1025, 1035, 1038, 1041], "280": 331, "28009951": 830, "2802": 57, "28040": 1053, "28048": 1052, "28051": 1053, "28053": 1053, "28074": 1052, "28085": 1053, "28090": 1052, "28092": 1053, "28095": 1052, "28102": 1053, "28111": 1052, "28121": 1052, "28136": 1053, "28160": 1053, "28165": 1052, "28167": 1052, "2818": 472, "28184": 1052, "28187": 1053, "28188": 1052, "28191": 1052, "28195": 1052, "28198": 1052, "282": [138, 228, 1025, 1035], "28205": 1053, "28207552": 228, "28210": 1053, "28222": 1052, "28225276": 86, "2823": 334, "28233": 1052, "28235": 1052, "28240": 1052, "28241": 1052, "28247": 1052, "2825": 0, "28256": 1052, "28261": 1053, "28262": 1052, "28263": 1052, "28295": 1052, "2830": 0, "28306": 1053, "28327": 1052, "2833": 384, "28351": 1053, "28352": 1053, "28360": 1053, "28365": 1052, "28377": 1052, "28385": 1052, "28399": 1053, "284": 652, "28407": 1053, "28425": 1053, "284315": 265, "28432": 1053, "28435": 1053, "28471": 1053, "284806": 265, "284807": 265, "28483": 1053, "28491": 1053, "28498": 1053, "285": [161, 254, 331, 727, 1025], "28521": 1053, "28552": 1053, "28557": 1053, "28582": 1053, "286": 417, "28604": 1053, "28612": 1053, "28651": 1053, "28664": 1053, "28670": 1053, "28692": 1053, "287": [187, 1016], "28703": 1053, "28712": 1053, "28718": 1053, "28722": 1053, "28756": 1053, "28763": 1053, "28768": 1053, "2879": 1042, "288": [293, 538, 544, 1025], "28808734": 217, "28822": 1053, "28823": 1053, "28843": 1053, "28847": 1053, "289": [186, 318, 1025], "28915": 1053, "28925": 1053, "28951": 1053, "28975": 1048, "28988": 1053, "28x28": 308, "29": [112, 171, 175, 204, 213, 217, 230, 265, 272, 285, 325, 331, 375, 417, 562, 563, 693, 697, 784, 800, 859, 1000, 1001, 1018, 1025], "290": [272, 331, 691, 692, 696, 1001, 1025], "290075": 202, "29018": 1053, "290584": 307, "29078": 1053, "291": [168, 353, 373, 375], "29119": 1053, "2914": 497, "29179": 1053, "292": [396, 417, 738], "29235": 1053, "29269": 1053, "2928359": 228, "293": 244, "29314": 1053, "29316": 175, "29327": 1053, "29330": 1053, "29336": 1053, "2939931": 327, "29401": 1053, "29473397": [847, 848], "295040e": 231, "29545": 1053, "295505e": 231, "296": 1016, "2961": 654, "29612": 1053, "296575": 202, "29694": 1053, "297": 373, "29780": 1053, "298": [129, 1012, 1025], "298688": 271, "29898468": 228, "299": [135, 353, 683], "299546e": 231, "2_": 996, "2_000": 134, "2_2": [649, 650, 655, 656, 657, 658, 659, 663, 664, 665, 666, 675, 684, 685, 686, 687], "2_f": 655, "2_fro": [656, 665, 666, 687], "2_poli": 271, "2_y": 1006, "2c": [646, 655, 675, 676, 677, 678, 690, 996], "2d": [2, 43, 69, 71, 74, 79, 81, 82, 86, 89, 94, 95, 119, 121, 124, 126, 130, 152, 183, 207, 214, 219, 233, 234, 235, 238, 240, 243, 244, 300, 330, 331, 338, 341, 360, 372, 374, 378, 387, 392, 410, 411, 415, 418, 420, 443, 454, 464, 466, 469, 483, 490, 492, 493, 495, 496, 497, 503, 504, 505, 507, 513, 517, 536, 544, 552, 587, 589, 638, 646, 660, 675, 694, 741, 782, 828, 832, 836, 874, 924, 927, 929, 933, 934, 950, 966, 989, 990, 998, 1000, 1001, 1004, 1011, 1015, 1020, 1025, 1035, 1039, 1042, 1043, 1044, 1047, 1049, 1053], "2e": [199, 284, 286], "2e6": 1004, "2ec5ac": 315, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 80, 83, 85, 95, 97, 100, 115, 118, 123, 129, 146, 149, 153, 154, 163, 186, 187, 191, 194, 202, 204, 209, 213, 228, 229, 230, 231, 240, 244, 250, 265, 270, 274, 275, 277, 279, 280, 281, 285, 299, 300, 306, 313, 316, 324, 328, 341, 352, 353, 361, 411, 414, 417, 699, 831, 834], "2fbf01908075": 708, "2fx": 259, "2g": [235, 238, 700, 1046], "2h": 416, "2k": 181, "2l": [420, 625], "2n": [699, 996, 1008], "2n_": 1000, "2nd": [93, 126, 178, 316, 410, 421, 446, 533, 1014, 1050], "2x": 1035, "2x2": [338, 410, 757], "2x_iy_im": 373, "31": [43, 47, 102, 110, 231, 265, 296, 323, 330, 331, 407, 418, 503, 564, 565, 600, 652, 674, 682, 968, 1005, 1035], "310": [73, 1025], "31024336": 327, "3109306": 173, "311": 353, "312": [149, 1038], "3121": 711, "313": [86, 1025], "313276e": 231, "315": [291, 353, 375], "316": [175, 179, 614, 617, 628, 883], "31622776601683794": 159, "3164764": [213, 231], "317": 175, "31760": 1000, "318": 452, "318387": 307, "319": 171, "31958": 175, "31973683": 228, "31bit": 1046, "31st": [214, 886], "32": [43, 44, 47, 52, 84, 118, 185, 188, 249, 285, 324, 331, 372, 376, 383, 392, 407, 417, 418, 447, 567, 568, 585, 592, 637, 679, 886, 888, 933, 934, 968, 1012, 1014, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1052], "320": [111, 373, 993, 1018, 1025, 1035], "3204": 1041, "321301": 62, "322": [45, 353, 473, 474], "3221": [695, 1001], "3225642": 327, "323": 244, "323200": 62, "324": [344, 373, 1025], "324084": 202, "3245": [695, 1001], "325198e": 231, "3252": 600, "32634568": 217, "3264": 46, "327": [63, 330, 733, 1025], "3272984419327777": 356, "3273": 749, "327407": 254, "327605": 254, "32767": 1046, "32782448": 173, "3279": 46, "328": [94, 353, 733, 1025], "3288": 547, "329": [354, 452, 1025], "329616": 202, "32987858": 568, "32bit": [2, 365, 968, 1053], "32x32": 375, "33": [43, 111, 213, 325, 331, 360, 373, 375, 383, 384, 410, 418, 463, 535, 640, 651, 715, 716, 732, 733, 741, 746, 786, 787, 790, 809, 831, 833, 835, 894, 918, 985, 1000, 1004, 1014, 1035, 1043], "330": [320, 331, 1025], "331": [81, 1025], "331263": 202, "3315057": [829, 830], "3317": 213, "332": [353, 895], "333": 849, "3333": 501, "333333": 231, "33333333": [857, 1014], "334": 173, "334795": 274, "335": 43, "335919": 307, "336": [149, 194, 384, 1014, 1025], "336188": 307, "3367": 1042, "337": [156, 384, 1025], "3375": 325, "338": [145, 241, 250, 1025], "3383": 46, "3384": 353, "3387": 353, "339": 353, "3397": [667, 688, 689], "33rd": [904, 1017], "34": [43, 146, 168, 170, 296, 309, 330, 331, 360, 375, 414, 523, 532, 573, 600, 652, 670, 719, 767, 1025, 1035], "340": [246, 330], "341": [61, 1025], "34118": 373, "34121653": 327, "34125758": 228, "3415": [667, 688, 689], "341523": 307, "3419": 274, "341949": 202, "342": 825, "34279478": 228, "3433": 46, "34346583": 86, "344": 54, "3445": 46, "345": [168, 375], "34545455": 1000, "3456": 46, "34586917": 228, "346": [187, 417, 504, 558, 559, 1025], "3467": 618, "347717": 146, "34867495": 1005, "349": [134, 244, 353, 384, 556], "34990341": 115, "35": [43, 45, 46, 48, 50, 88, 103, 136, 156, 186, 187, 193, 200, 240, 288, 316, 330, 331, 547, 651, 652, 659, 705, 709, 710, 730, 744, 759, 785, 792, 840, 993, 1000, 1004, 1010, 1011, 1014, 1035, 1037], "350": 186, "351": [218, 1025], "351390": 271, "352": [271, 384], "352124": 202, "35278655": 228, "3534": 57, "3539": 102, "354": 229, "354394": 146, "3551": 46, "355440": 271, "355445": 146, "356": [269, 1012, 1025], "356497": 146, "3565178": 968, "357": [168, 353, 375, 503, 908], "3573": 830, "35776189065725783": 321, "3582": 46, "358295": 202, "358990": 202, "3591": 1044, "36": [43, 45, 46, 52, 53, 122, 168, 176, 186, 231, 250, 344, 360, 375, 384, 417, 418, 558, 559, 573, 738, 762, 1004, 1035], "360": [134, 556], "360000": 307, "36047253": 228, "361": [373, 417, 558, 559], "362": [59, 1025], "362176": 325, "363": 52, "3635": 830, "364": [473, 474, 1036], "365": [412, 475], "3659": 1040, "366": 360, "367": [172, 353, 417, 1025, 1035], "36787944": 1002, "3680": [614, 617, 628], "3684": 838, "36851234": 819, "368896": 62, "3690483151908911912247722318110": 52, "3696": 616, "3697": 853, "3697178": 52, "37": [43, 198, 274, 285, 330, 360, 373, 417, 527, 719, 887, 898, 1014, 1035], "370000e": 231, "370039": 202, "370738": 62, "371": 272, "372": 353, "37257991": 115, "373333": 274, "375": [86, 352, 353, 451, 753, 1004], "376": [67, 1012, 1025], "37647423": 52, "376999": 62, "37741762": 130, "377eb8": [75, 79, 95, 96, 240], "378": [186, 353, 417, 1035], "37815029": 228, "37845099": 361, "379": [278, 1025], "37967282": 1005, "379710": 186, "379763": 146, "38": [187, 204, 212, 217, 264, 280, 296, 326, 417, 635, 888, 950, 1004, 1014, 1035, 1036, 1037], "3800": 202, "3803": 354, "381327": 373, "382005": 146, "382120e": 231, "38353048": 228, "383973": 274, "384": [353, 699, 908], "3840": 1043, "384338": 202, "384616559": 387, "385000e": 231, "3854": [667, 668], "3855": 1024, "386": 883, "3862": 871, "38629436": 1014, "38690531511642143152471231333333107": 52, "387": [353, 1035], "387580e": 231, "387599": 52, "387830e": 231, "3889": 477, "3889873516666431": 52, "389": [596, 597], "3894": 618, "39": [43, 52, 168, 254, 265, 373, 375, 376, 382, 410, 418, 498, 898, 916, 952], "390": [256, 1025], "3908844": 830, "391": 699, "3910350737": 387, "3911": 47, "3928": 472, "393": [121, 1025], "393297": 254, "39329747": 254, "394": [102, 179], "3947": 1016, "395": [43, 107, 1025], "39568399": 539, "396": [48, 102, 168, 191, 375, 1025], "3964": [423, 477], "397": 373, "3972": 658, "398": [353, 650], "3986": 231, "3996": 654, "3_": 996, "3_poli": 271, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 372, "3d": [100, 126, 210, 233, 235, 237, 360, 418, 509, 589, 924, 966, 1042, 1043, 1045], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 81, 82, 91, 103, 105, 107, 116, 134, 141, 149, 164, 168, 170, 171, 172, 174, 179, 185, 187, 188, 194, 198, 199, 205, 213, 215, 219, 228, 229, 231, 234, 244, 246, 269, 271, 272, 274, 277, 279, 282, 284, 291, 306, 328, 334, 352, 353, 354, 825, 832, 1012], "3k": 699, "3l": 420, "3llobo": 1050, "3m": 51, "3rd": [126, 178, 842, 885, 1006, 1014], "3ssnporch": 143, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 102, 103, 104, 105, 106, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 126, 128, 129, 134, 135, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 159, 164, 168, 170, 173, 175, 176, 178, 179, 181, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 217, 219, 220, 221, 223, 226, 227, 231, 233, 240, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 278, 279, 280, 282, 283, 285, 286, 290, 291, 293, 295, 296, 297, 298, 301, 306, 308, 309, 311, 312, 314, 315, 317, 319, 320, 321, 322, 323, 325, 326, 328, 330, 331, 332, 333, 334, 338, 340, 341, 344, 345, 346, 348, 349, 350, 352, 353, 354, 360, 361, 366, 372, 373, 374, 375, 376, 378, 382, 383, 384, 387, 390, 391, 392, 396, 401, 402, 403, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 493, 499, 507, 515, 516, 519, 520, 521, 527, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 584, 585, 586, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 617, 620, 621, 622, 625, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 680, 682, 683, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 701, 702, 705, 709, 710, 718, 719, 728, 729, 730, 735, 737, 745, 746, 747, 749, 750, 751, 752, 754, 755, 759, 771, 772, 784, 785, 791, 792, 793, 794, 797, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 833, 835, 836, 837, 838, 841, 842, 843, 844, 846, 851, 855, 856, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 895, 899, 900, 901, 905, 907, 908, 911, 915, 916, 917, 918, 929, 930, 932, 933, 934, 935, 939, 950, 951, 952, 953, 955, 957, 958, 959, 960, 967, 974, 975, 976, 978, 979, 980, 981, 984, 985, 986, 993, 994, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1014, 1015, 1018, 1019, 1025, 1031, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1048, 1049, 1050, 1053], "40": [43, 52, 54, 87, 99, 109, 120, 126, 150, 156, 170, 198, 204, 205, 207, 230, 235, 237, 248, 250, 260, 272, 297, 303, 308, 313, 330, 331, 339, 340, 342, 344, 346, 347, 360, 366, 373, 414, 448, 498, 520, 521, 802, 847, 848, 852, 864, 865, 993, 1005, 1014, 1035, 1036], "400": [44, 63, 83, 120, 148, 153, 170, 182, 219, 238, 283, 307, 353, 373, 415, 498], "4000": [92, 148, 259], "400000e": 231, "401": [308, 1025], "4017": 527, "4018260": 327, "402": [189, 275, 1025], "402344": 384, "4025": 1040, "403": 275, "404": [231, 347, 1025], "40597": 290, "406": [692, 696, 1001], "4066": 46, "407": [96, 168, 353, 375, 1025], "40842387": 51, "40887718": 90, "40945": 103, "4096": [120, 373, 415, 498], "40966": 372, "409717": 274, "41": [52, 168, 213, 250, 360, 373, 375, 459, 471, 483, 495, 624, 627, 638, 649, 650, 655, 661, 663, 664, 665, 667, 684, 688, 689, 702, 784, 842, 1006, 1010], "41075698": 416, "41076071": 416, "41082": 44, "411": [186, 333, 334, 412, 422, 475, 536, 1025], "4110": 478, "41187": 175, "412": [499, 1000], "412021": 146, "41214": [213, 231], "41215": 231, "412304": 202, "413": [275, 1025], "414": [122, 231, 411, 729, 759, 883, 895, 1004, 1025], "41421356": [766, 772, 1007], "4143": 390, "414810": 254, "414912": 149, "415": 353, "416": [304, 742, 1004, 1025], "416010": 325, "41666667": 753, "41691605": 130, "417": [290, 1025], "41726413": 130, "41888636": 665, "419": [213, 619, 1025], "4194": 375, "42": [43, 44, 45, 52, 57, 58, 61, 62, 63, 64, 67, 79, 80, 89, 109, 115, 118, 122, 127, 134, 141, 143, 144, 146, 147, 149, 150, 154, 164, 165, 182, 186, 188, 189, 191, 193, 202, 205, 207, 208, 215, 219, 220, 221, 227, 228, 230, 233, 234, 235, 240, 245, 246, 247, 250, 253, 265, 270, 272, 275, 284, 285, 291, 297, 298, 299, 306, 311, 312, 313, 314, 316, 318, 320, 322, 324, 333, 339, 341, 352, 353, 361, 366, 383, 384, 392, 401, 410, 414, 417, 418, 421, 439, 446, 480, 490, 495, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 530, 532, 534, 540, 547, 548, 549, 560, 561, 568, 569, 570, 571, 573, 608, 609, 610, 611, 612, 680, 697, 698, 699, 763, 795, 796, 800, 802, 805, 825, 831, 833, 847, 848, 852, 856, 859, 899, 900, 902, 903, 904, 914, 917, 918, 925, 936, 950, 968, 972, 1007, 1014, 1031, 1032, 1035], "42074": 317, "421": [729, 759, 1004], "421087": 274, "42165": 143, "422": [70, 139, 596, 597, 729, 759, 1004, 1025], "4226193151": 52, "423": [229, 1025], "4232": [43, 52], "423641": 202, "42382133": 327, "424": 231, "4242": [43, 52], "42425183539869415": 321, "425": [234, 618], "4254": [168, 375], "4260": [752, 755], "427": [68, 106, 168, 375, 509, 510, 586, 587, 590, 1025], "427329": 254, "4285714285714286": 1004, "429": [262, 288, 353, 1025], "4294": 1041, "43": [168, 177, 210, 244, 271, 291, 375, 383, 803, 817, 888], "430": [422, 536], "431": [198, 353, 375, 1025], "4310090": 772, "432": [271, 412], "4325": 57, "433": [265, 375], "43348936": 228, "4337": 1000, "434": [140, 1025], "43475": 881, "436": [220, 244, 1025], "4362": 1040, "437": [66, 1025], "437362": 202, "438": [186, 227, 1012, 1025], "43847489": 130, "43873": 354, "4387766": 52, "439": [109, 353, 1025], "4394": 1043, "44": [43, 104, 175, 186, 187, 198, 288, 295, 481, 784, 888, 908, 911, 986, 1004, 1011, 1025, 1035], "440": 186, "440409": 202, "4406": 475, "44063": 52, "4409": [43, 52], "44139186": 308, "4415": 57, "442": [168, 178, 182, 375, 504], "4425765": [656, 666, 687], "44300751539296973": 52, "44300752": 52, "443238": 274, "44373091": 1005, "44381023": 217, "44412786": 539, "445": [265, 1012], "445978": 202, "446": [80, 353, 729, 759, 1004, 1025], "447268": 87, "4472869": 130, "4474": 384, "4478": 1040, "448": 291, "4486": 547, "449": [44, 415, 538], "4496": [43, 52], "4497": 1024, "45": [75, 97, 105, 115, 118, 149, 164, 175, 188, 202, 213, 231, 250, 278, 282, 283, 331, 341, 414, 417, 418, 567, 568, 630, 637, 649, 650, 655, 663, 664, 665, 684, 685, 686, 791, 800, 911, 994, 1004, 1012, 1022, 1025, 1031, 1035, 1038], "4500": 228, "45070924": 669, "451": [152, 649, 1025], "45192": 159, "451933": 87, "452": [174, 176], "453": [130, 360, 1025], "454": 179, "4544": 43, "455": 317, "4550": 372, "456": [44, 415, 538], "45612256": 663, "45663524": 663, "457": 618, "4576": 838, "458333315172": 52, "459": [410, 444], "459074": 254, "46": [43, 52, 86, 213, 250, 361, 384, 596, 597, 685, 686, 719, 825, 911, 916, 1014, 1031], "460": 187, "46033": 499, "46043": 499, "46081961": 1005, "461": 384, "462234": 254, "463": [231, 288, 356, 1025], "463088": 52, "46428631511221642143151251232633109": 52, "465660": 62, "465730": 202, "466": 1011, "4666": 637, "46779927": 51, "468": 91, "46858513287221654": 326, "46874778": [656, 666, 687], "469": 91, "46915237": [656, 666, 687], "4694": 527, "469474": 202, "46958558": 664, "4697": 81, "47": [43, 209, 373, 496, 497, 538, 544], "471": 375, "47140": 410, "47236": [373, 500], "47330339": 418, "4738": 1040, "475": [89, 134, 167, 1025], "476": [135, 1025], "47668": 354, "478522": 202, "47885": 354, "479": [204, 1025], "4792": 231, "47922861": 254, "479229": 254, "47928": 354, "4794": 202, "4795": 202, "4796": 202, "4798": 202, "47985": 499, "47987268e": 195, "4799": 202, "48": [43, 52, 115, 149, 175, 254, 317, 375, 384, 410, 513, 600, 702, 749, 831, 842, 993, 1006, 1014, 1031], "480": [198, 231, 353, 1025], "4801": 202, "4802": 202, "4803": 202, "4804": 202, "4805": 202, "4806": 202, "4807": 202, "4809": [202, 274], "481": [350, 353, 1025], "4810": 202, "4812": 46, "4815": 202, "48204257": 1005, "4828": 202, "483": 651, "4830": 202, "4831": [202, 658], "4832": 202, "4836": 202, "484": 179, "4841": 202, "484109": 202, "4846": 202, "485": [99, 699, 1025], "4852": 202, "4855": 202, "4857596147013469": 93, "486": 215, "4860": 202, "4866": 202, "4867": 202, "4869": 202, "487": [52, 727], "4872": 202, "48736655": 670, "4874": 202, "4876": 202, "4880": 202, "4881": [202, 1040], "48841": 499, "48842": 499, "4885": 202, "48858": 384, "4888": 202, "489": 141, "4891": 202, "48938813e": 195, "4894": 202, "48979592": 451, "4898431": [373, 495], "49": [43, 118, 168, 217, 250, 372, 373, 375, 383, 410, 452, 459, 716, 729, 759, 767, 796, 800, 803, 888, 1004, 1014, 1038], "490": 265, "491": 699, "492": [265, 646, 997], "4923": 652, "4928": 202, "493": [646, 907, 997], "4936": 202, "4939": 1042, "494021": 495, "4948": 46, "495": [62, 1025], "4951": 656, "495761": 384, "49665188": 217, "4967": 527, "4976": 600, "498": [176, 177, 1025], "499": [168, 375, 384], "4995": 1041, "49999993": 1000, "4daf4a": [79, 95], "4dbd33": 118, "4e": 234, "4e9a06": [92, 97], "4eacc5": [92, 97], "4f": [46, 47, 57, 137, 145, 147, 228, 229, 231, 316, 914], "4i": 83, "4th": [168, 178, 375], "4x": [384, 1050], "4x11": 295, "4x4": [375, 415, 418], "5": [43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 132, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 159, 161, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 213, 214, 215, 216, 219, 221, 224, 225, 226, 227, 228, 229, 231, 234, 235, 236, 238, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 280, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 303, 304, 306, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 333, 334, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 373, 374, 375, 376, 378, 382, 383, 384, 386, 390, 391, 392, 396, 402, 403, 404, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 425, 439, 440, 441, 442, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 468, 469, 471, 474, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 507, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 531, 534, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 555, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 585, 595, 596, 597, 600, 605, 607, 608, 609, 610, 611, 613, 616, 617, 618, 619, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 644, 646, 649, 650, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 691, 692, 694, 695, 696, 698, 699, 700, 702, 706, 708, 710, 712, 715, 716, 721, 723, 724, 725, 726, 727, 729, 730, 731, 733, 735, 738, 741, 742, 743, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 772, 773, 781, 784, 785, 787, 788, 790, 791, 792, 793, 794, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 901, 907, 908, 909, 910, 911, 912, 913, 915, 917, 925, 929, 930, 933, 934, 938, 939, 949, 950, 951, 952, 953, 955, 957, 958, 966, 967, 972, 974, 975, 978, 979, 980, 981, 982, 983, 984, 993, 994, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1025, 1026, 1030, 1031, 1033, 1036, 1037, 1038, 1040, 1042, 1043, 1045, 1049, 1050, 1051, 1054], "50": [0, 43, 46, 49, 52, 54, 61, 68, 69, 73, 83, 85, 92, 93, 98, 99, 102, 103, 115, 118, 120, 123, 129, 134, 137, 140, 146, 149, 152, 153, 168, 171, 173, 174, 175, 176, 185, 186, 187, 194, 198, 208, 213, 216, 220, 221, 225, 227, 229, 231, 233, 237, 238, 243, 244, 246, 254, 265, 266, 271, 273, 274, 284, 291, 309, 311, 315, 322, 324, 331, 333, 335, 339, 347, 353, 373, 375, 378, 383, 398, 414, 417, 418, 419, 422, 444, 475, 481, 482, 503, 507, 524, 526, 529, 536, 542, 547, 556, 557, 572, 596, 597, 609, 611, 612, 618, 620, 661, 662, 669, 670, 671, 673, 679, 680, 681, 695, 716, 795, 803, 817, 836, 856, 907, 916, 999, 1000, 1004, 1005, 1007, 1010, 1014, 1027, 1035, 1052], "500": [49, 79, 83, 90, 93, 94, 96, 115, 116, 127, 129, 138, 140, 147, 167, 170, 191, 226, 227, 234, 251, 252, 256, 257, 261, 265, 271, 274, 284, 285, 291, 297, 303, 315, 321, 326, 327, 345, 350, 365, 417, 423, 471, 472, 476, 477, 478, 483, 484, 485, 486, 614, 616, 617, 619, 624, 627, 628, 653, 654, 657, 658, 659, 683, 685, 686, 865, 993, 1019], "5000": [89, 199, 228, 229, 231, 322, 888], "50000": 61, "500000": 307, "5000000": 55, "50000000": 173, "50000013": 1000, "500526": 149, "500x500": 544, "5012": 1041, "5016": [412, 423, 477], "5029": [412, 423, 477], "503": [313, 1025], "503452": 307, "5036": 1042, "504185": 307, "50447799": 1005, "505": [100, 271, 832, 1025], "506": 246, "507": 411, "50755672": 468, "507943": 274, "5082": 1024, "509": [214, 1025], "50941682": 1005, "50_000": [318, 353], "50sampl": 398, "51": [61, 77, 118, 175, 231, 288, 291, 410, 411, 769, 779, 784, 1000, 1031], "51082562": 593, "512": [113, 212, 1025], "512281": 261, "512595": 307, "51292546": 615, "513": [354, 856, 1007], "513034": 307, "5131": [46, 1040], "51341712": 1002, "5141": 1041, "51462041": 852, "5149": 46, "515": 43, "515390": 384, "5166": 676, "5166646": 767, "517": [47, 454, 464], "517272": 261, "518": [251, 1025], "5182": 1040, "5186": 1040, "5193": 46, "51958": 175, "51963999": 111, "52": [43, 175, 213, 228, 534, 636, 800, 950, 1035], "520": [174, 631, 856, 994, 1007, 1025], "52003279": 1005, "5208": 202, "521": 118, "52106591": 130, "5211": 1042, "5212": 202, "522": [146, 908, 1025], "5224167": 52, "5229": 1042, "523": [179, 527], "524": [52, 87, 1025], "5243": 418, "52433293": 418, "5244": 202, "525": [441, 631, 994], "5251": 1041, "526": 907, "526599": 202, "527": [331, 1025], "5279": 1042, "5282": 1040, "52875032": 664, "5289": 46, "5291": 1041, "5295": 1042, "52955942": 852, "5299": 1041, "53": [43, 86, 250, 410, 417, 538, 544, 549, 795, 796], "5315170": 52, "5316": 352, "53284267": 254, "532843": 254, "533": [79, 186, 1025], "5337": 1040, "534": 186, "5355": 1040, "5359": 1042, "536": [175, 291], "5360": 1040, "537": [116, 294, 1025], "53777511": 52, "538": [159, 1025], "53844117956": 767, "5395559": 228, "53959628e": 195, "54": [168, 191, 198, 213, 216, 250, 373, 375, 410, 493, 1036, 1037], "54035582": 767, "541": [454, 464], "5415": 1001, "5417": 231, "542": [168, 375], "5420": 547, "542052": 202, "54209": 159, "5425": 527, "543": 198, "5431": 1040, "543841": 202, "54434690031882": 105, "54488318": 387, "545": [153, 1025], "546": 354, "5460": 1041, "546068": 254, "54606834": 254, "54675220": 52, "5469": 375, "547": 360, "5488135": 387, "549": 63, "5495": 1040, "54980": 544, "55": [118, 186, 191, 208, 213, 231, 235, 331, 383, 410, 414, 493, 600, 803, 809, 817, 831, 1004, 1035], "5500": [325, 691, 1001], "550213": 202, "55102041": 451, "5515": 749, "552": [326, 1004, 1025], "55212743": 361, "5523": 1024, "55249": 600, "55390036": 130, "554": [58, 221, 229, 308, 1025], "5540": 1041, "55422893": 418, "555": 719, "5555555555555556": 279, "5557": 274, "5558": 46, "55800226": 228, "559": 619, "5591": [692, 696, 1001], "55968825": 649, "56": [43, 231, 244, 334, 384, 649, 650, 655, 663, 664, 665, 684, 716, 738, 1004, 1014, 1031, 1035], "560": [213, 520, 521], "561": 410, "561464362648773": 93, "563": [186, 259, 1025], "564": [213, 354], "56479934": 361, "56485654": 130, "565": 271, "566": [213, 354], "569": [168, 333, 375, 503, 595, 598, 599, 601], "5697": 1042, "56b4e9": 256, "57": [47, 170, 186, 229, 280, 309, 375, 376, 396, 402, 403, 411, 708, 764, 784, 840, 1004, 1014, 1035], "570": [168, 375], "570655": 202, "5713": 666, "57142857": 724, "573": [296, 418, 1025], "5732": 1042, "57320793": 418, "573491": 202, "574": [91, 537, 544], "5748": 497, "5749": [373, 496, 497], "575": [102, 213], "5762": 1041, "576989": 254, "577": [168, 285, 375, 1025], "579": 527, "58": [47, 99, 110, 140, 375, 412, 423, 477, 610, 767, 1014, 1025], "580": [353, 847, 848], "5804131": 130, "5805": 1041, "5807": 1007, "581": 191, "581012": [373, 493], "5814": 1042, "58149261": 418, "58195950e": 195, "582": 908, "5828": [373, 496, 497], "583": 410, "5833": [741, 1004], "583333315172": 52, "58364548": 1002, "5853": 1024, "5857": 1040, "586": 168, "5863": 384, "58667835e": 195, "586798": 202, "587": [147, 1025], "5871": 682, "5874": 1041, "5882004012129721": 93, "589715": 202, "59": [43, 191, 198, 231, 375, 384, 410, 411, 513, 825, 1004, 1031, 1035], "59122734": 670, "592": [614, 617, 628, 1011], "592373": 325, "5925110": 52, "5929": 1041, "593": 138, "594": [179, 213], "594754": 202, "59489497": 228, "595": 213, "5956": 1043, "596": 719, "5960": 228, "5963": 1045, "597": [102, 213, 1025], "598": [91, 127, 171, 544], "5981": 547, "598533": 202, "599": 683, "5991": 1042, "5_000": 191, "5a": 887, "5d": 47, "5e": [44, 120, 201, 598, 599, 601], "5e5": 213, "5f": [159, 324], "5m": 55, "5n_": 112, "5th": [52, 146, 149, 178, 410], "5x": 1052, "6": [0, 43, 45, 46, 47, 48, 49, 50, 51, 52, 57, 63, 64, 67, 68, 75, 79, 80, 82, 83, 85, 89, 90, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 109, 110, 111, 113, 115, 120, 122, 126, 129, 135, 142, 146, 147, 149, 151, 153, 159, 163, 168, 170, 173, 175, 177, 178, 179, 181, 182, 186, 187, 189, 191, 193, 194, 195, 198, 202, 206, 211, 213, 214, 215, 217, 227, 228, 231, 233, 234, 235, 237, 240, 243, 244, 248, 251, 252, 256, 257, 258, 259, 261, 262, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 280, 281, 282, 283, 284, 290, 293, 296, 304, 306, 308, 309, 311, 313, 315, 316, 318, 320, 323, 324, 325, 326, 327, 328, 330, 331, 334, 335, 341, 342, 344, 346, 348, 350, 352, 353, 354, 359, 360, 361, 372, 373, 375, 376, 378, 380, 382, 383, 384, 391, 396, 402, 403, 408, 410, 411, 414, 415, 417, 418, 419, 425, 430, 437, 444, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 463, 464, 465, 466, 467, 484, 485, 486, 487, 492, 494, 499, 508, 520, 527, 530, 533, 541, 543, 544, 548, 550, 556, 565, 566, 570, 571, 572, 573, 596, 597, 605, 607, 608, 609, 611, 614, 617, 618, 628, 630, 631, 633, 639, 640, 647, 648, 682, 692, 696, 702, 714, 719, 724, 731, 741, 745, 748, 749, 753, 754, 756, 772, 781, 788, 791, 793, 800, 801, 802, 804, 805, 810, 812, 813, 815, 820, 821, 824, 831, 832, 833, 834, 842, 843, 844, 846, 847, 848, 855, 857, 858, 859, 874, 875, 877, 880, 882, 885, 886, 890, 891, 904, 922, 929, 931, 933, 934, 945, 946, 950, 951, 952, 954, 957, 958, 966, 978, 981, 989, 992, 993, 994, 998, 1000, 1001, 1004, 1014, 1015, 1018, 1019, 1020, 1027, 1031, 1033, 1036, 1037, 1038, 1041, 1043, 1048, 1052, 1053], "60": [43, 45, 92, 105, 113, 213, 225, 231, 233, 234, 254, 259, 279, 284, 331, 344, 352, 372, 410, 414, 452, 459, 716, 803, 1004, 1014, 1035, 1038], "600": [44, 63, 83, 91, 144, 153, 154, 373, 683, 1025], "6000": [309, 630], "601052": 307, "601707": 202, "60244657": 852, "60276338": 387, "603": [96, 98, 187, 276, 450, 1025], "604": [127, 544], "605": [230, 1025], "606": [616, 837, 1005], "6072758064261095": 170, "607752": 146, "60809415": 665, "60834549": 90, "60836363e": 195, "609": [179, 384], "61": [112, 187, 231, 372, 375, 384, 411, 460, 544, 563, 649, 650, 655, 663, 664, 665, 684, 716, 825, 952], "6101": 1042, "611": [269, 271, 544], "6114": 830, "6114326": 213, "6114327": 213, "6114328": 213, "6114329": 213, "6114330": 213, "611676": 202, "612": 793, "6121": 1041, "6126": 1042, "614": [43, 1025], "6147": 1040, "615373": 186, "616": [125, 187, 844, 1006, 1014, 1025], "61611719": 173, "617": [91, 274, 410, 772], "617050e": 231, "6173": 1041, "617715": 146, "6178": 1041, "617mb": 352, "618": [91, 154, 269, 1025], "6181": 1042, "6182": 1041, "618263": 202, "619": [96, 450], "619052": 373, "61958": 175, "6196": [274, 1040], "6198": 749, "62": [52, 123, 187, 191, 231, 264, 325, 331, 361, 373, 496, 497, 847, 848, 1031, 1038], "620": [297, 501, 1025], "621": [91, 772], "621645": 202, "622": [91, 544], "62241605": 198, "622811": 146, "623": [844, 1006], "6231": 1024, "6237": 231, "624": 1011, "625": [86, 213, 621, 711], "6250": 1042, "6258": 1040, "626": [82, 199], "6261": 1044, "626286": 202, "62717609": 228, "62722912": 52, "62745778": 1005, "628": 353, "6282": 1041, "6284": 1024, "6288": 1042, "6291456": 86, "63": [45, 52, 265, 375, 417, 560, 561, 568, 569, 649, 650, 655, 663, 664, 665, 684, 702, 729, 803, 817, 825, 917, 918, 1004], "630": 727, "63035731": 418, "630382": 325, "6312": 52, "632": [179, 317, 1025], "6323": 1024, "6331": 43, "6332": 43, "63327171": 198, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 318, "63394388": 198, "634": [144, 1025], "635": [43, 619], "636": [198, 384], "63667341": 90, "637": [352, 1025], "6371000": 767, "6374": 1043, "6375861597263857": 949, "638": [353, 384], "638768": 87, "638843": 307, "63bit": 1046, "64": [43, 47, 52, 68, 86, 91, 120, 175, 186, 234, 244, 245, 249, 269, 280, 295, 300, 365, 366, 375, 376, 384, 392, 396, 411, 415, 422, 498, 501, 505, 602, 603, 649, 661, 691, 692, 693, 694, 696, 908, 1007, 1031, 1035, 1037, 1043, 1044, 1047, 1048, 1049, 1052], "640": [408, 492, 509, 510, 586, 587, 590, 993], "640000e": 231, "640770e": 231, "640880e": 231, "64185414": 669, "64236448": 539, "6424": 1024, "6425": 1024, "643": 269, "644": [170, 334, 1025], "6440": 228, "64447187": 86, "645": 91, "6451": 1024, "6452": 1043, "646": 178, "6463": 1044, "647": 91, "6472": 1041, "6476": 527, "647689": 202, "648026": 146, "6497": 1041, "64_conda": 386, "64bit": 1035, "64x64": [120, 373, 415], "65": [43, 47, 52, 69, 187, 213, 235, 280, 317, 410, 441, 505, 520, 600, 702, 744, 795, 796, 825, 1011, 1035, 1036, 1037], "650": 408, "6505186632729437": 93, "6507": 1042, "651": 384, "652": 353, "652739": 202, "653": [353, 384, 614, 617, 628, 1025], "654": 187, "6545": 1047, "655": [193, 215, 1025], "656": 373, "6567": 854, "657": [254, 271], "6572": 854, "6573": 1042, "65799352e": 195, "658": 116, "6586": 1041, "659": [314, 1025], "6599": 1024, "65e": 199, "66": [43, 47, 50, 237, 317, 375, 410, 427, 463, 535, 635, 715, 786, 787, 798, 886, 894, 985, 1004, 1016], "660": [254, 280, 1025], "660797": 254, "661": [155, 1025], "661086": 274, "662": 168, "6624": 1047, "662409": 202, "663": [901, 1012, 1016], "664": [168, 375], "665": 43, "6650": 52, "6651": 1041, "666": [173, 410, 849, 994], "6660": 1041, "6666": [741, 1004, 1041], "66666667": [732, 785, 857, 1014], "666667315174": 52, "6667": 1041, "66670169e": 195, "667": [723, 743, 1004], "667219": 146, "6689": 1043, "6691": 1041, "6697": 1041, "669930e": 231, "67": [99, 186, 231, 375, 501, 519, 520, 521, 630, 670, 716, 817, 994, 1004, 1018, 1031, 1035], "670": [215, 265], "671": 1016, "6715": 1024, "67251877": 669, "673": [116, 182, 353, 384, 1025], "67443065": 130, "67451144e": 195, "675": [170, 353], "675318": 87, "676": [148, 672, 1025], "6764": 1041, "677": 187, "678008": 213, "678009": 213, "678010": 213, "678011": 213, "678012": 213, "678013": [213, 231], "678359": 202, "679": [215, 907], "68": [43, 204, 309, 330, 352, 410, 480, 538, 544, 593, 688, 689, 1035], "681": [91, 384], "6817": 1041, "682": 384, "6821": 47, "682880e": 231, "683980e": 231, "684": [103, 111], "6846": 1041, "6848": 1044, "685": [151, 282, 723, 743, 1004, 1025], "6852": 271, "6860": 145, "687": 1016, "6875": 719, "688": [111, 322, 1025], "689015": 307, "689143": 307, "689751": 307, "69": [45, 47, 204, 265, 316, 331, 410, 473, 474, 610, 611, 759, 1004, 1014], "690": 215, "6902": 1041, "691": 724, "6913": 1041, "692": [51, 134, 273, 1025], "692270e": 231, "692470": 307, "6929": 1024, "692901": 146, "693": 1004, "6931": 871, "69314718": [420, 615, 1014], "695": 269, "69513": 91, "6954": 1041, "69545": 91, "695740e": 231, "697": 179, "69735": 91, "698": [91, 136, 265, 1025], "6984743": 173, "69892343": 217, "699": [91, 1025], "699691": 373, "69e": 179, "6d": 47, "6f": [55, 124, 276, 740, 798], "6ppm": 175, "6th": 178, "7": [1, 2, 43, 45, 47, 50, 51, 52, 53, 54, 63, 66, 68, 70, 74, 77, 79, 80, 86, 87, 88, 89, 93, 97, 98, 100, 103, 104, 106, 111, 113, 123, 134, 137, 146, 149, 150, 154, 155, 168, 179, 185, 186, 187, 189, 191, 195, 196, 212, 213, 214, 215, 231, 233, 235, 240, 244, 245, 246, 252, 254, 256, 257, 260, 261, 265, 266, 271, 275, 277, 278, 282, 288, 290, 291, 293, 296, 297, 299, 308, 309, 311, 315, 320, 323, 324, 325, 327, 330, 331, 333, 334, 338, 345, 348, 349, 353, 354, 361, 373, 375, 376, 383, 384, 396, 402, 403, 408, 414, 415, 417, 418, 419, 421, 422, 425, 441, 446, 447, 450, 452, 453, 454, 455, 457, 458, 459, 460, 463, 464, 465, 466, 469, 473, 474, 484, 485, 486, 487, 493, 499, 501, 535, 536, 537, 538, 539, 541, 543, 547, 564, 565, 591, 594, 603, 608, 609, 630, 631, 633, 640, 649, 650, 652, 655, 661, 662, 663, 664, 665, 676, 678, 684, 685, 686, 695, 702, 710, 712, 724, 726, 727, 729, 731, 747, 748, 749, 753, 754, 756, 785, 788, 793, 794, 797, 800, 802, 803, 804, 805, 806, 807, 810, 813, 817, 820, 821, 824, 830, 833, 837, 847, 848, 856, 865, 866, 867, 872, 879, 880, 902, 903, 950, 951, 954, 955, 958, 967, 972, 993, 994, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1014, 1018, 1019, 1031, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1048, 1053], "70": [43, 45, 47, 50, 52, 99, 103, 105, 134, 187, 250, 256, 271, 331, 373, 375, 414, 496, 497, 685, 686, 716, 729, 759, 803, 817, 894, 993, 1014], "700": [83, 265, 322], "7000": 231, "701": [47, 91, 1025], "702": [142, 1025], "702266": 202, "703": [408, 516], "70359377": 198, "704": 352, "70432034": 115, "7049": 1041, "7049787496083262": 93, "705": [150, 1025], "706026": 202, "707": [179, 883, 895], "7071": 1043, "70763101": 86, "708": [541, 543, 550, 753], "70814003": 361, "7083": 1004, "708333315174": 52, "7089": 1042, "709": [272, 316, 1025], "70x": 1052, "71": [43, 47, 168, 217, 231, 375, 513, 733, 739, 769, 779, 1004, 1031, 1037], "710": 408, "7101": 1041, "714": 322, "71518937": 387, "7152": 1041, "7154": 1041, "715413": 146, "7159": 1041, "716": 516, "718": [134, 1025], "7187": 1041, "718747": 202, "7194": 1041, "72": [43, 45, 46, 52, 140, 173, 383, 825, 831], "7200": 652, "721": [541, 543, 550], "722128e": 231, "72295655": 115, "723": [91, 246], "723665": 285, "7239": 1041, "724": 168, "7242": 1024, "724702": 274, "7248": 1041, "7256": 638, "726": 1012, "7260": 1041, "7261": 1041, "726573": 186, "72667194": 1005, "727": [53, 283, 1025], "727148206404819": 279, "728": [85, 1025], "72850319": 1005, "729": 354, "7295": 1041, "7298221281347037": 43, "73": [235, 275, 331, 391, 483, 739, 803, 817, 853, 916, 1014, 1035, 1037], "7301": 1041, "730119e": 231, "731249e": 231, "7313": 46, "73153": 384, "732": 215, "7321432711315247203224138160467097": 52, "7323": 1041, "7325": 1041, "732913": 285, "733": 291, "7331": 1042, "7332": 911, "735": [88, 1025], "7350": 1041, "7353": 1041, "7356": 1042, "7359": 322, "7365": 1042, "73654189": 52, "737": [246, 527], "7376": 1042, "7382": 1024, "7387": 478, "7388": 1042, "739865e": 231, "739950": 285, "74": [43, 123, 229, 250, 330, 331, 375, 593, 697, 803, 817, 886, 1031], "7411": [471, 476, 1041], "7419": 1041, "743": 269, "74310541": 173, "7436926291700353": 208, "744": [269, 291], "744029": 285, "744042e": 231, "7441": 1042, "744497e": 231, "74495357": 198, "7459": 1042, "746": 375, "7464": 1042, "746492": 271, "747": [195, 1025], "748": [83, 352, 384, 1025], "7490": [1041, 1042], "75": [43, 45, 46, 49, 52, 69, 79, 88, 113, 137, 165, 177, 178, 182, 186, 191, 193, 196, 204, 220, 231, 254, 258, 259, 265, 271, 280, 296, 311, 323, 350, 352, 361, 451, 504, 554, 640, 661, 697, 709, 715, 737, 742, 743, 748, 756, 759, 797, 803, 885, 893, 897, 904, 920, 938, 939, 984, 1004, 1006, 1014, 1020, 1022, 1037], "750": [82, 88, 244, 271], "75000": 213, "7501": 1042, "750348": 146, "750389": 202, "7506": 1042, "752": 352, "752470": 285, "752867": 202, "753": 73, "7532": 491, "7533": [423, 477, 1042], "75474165": 1005, "7548": 1042, "7548291": 327, "755": [77, 1025], "7553": 1041, "7565": 1042, "756687e": 231, "7567": 1042, "756746e": 231, "7569": 472, "757": [168, 269, 291, 375], "7573": 1042, "75747153": 217, "7578": [274, 1042], "75788833": 165, "757915": 285, "758": 352, "759": [291, 321, 1025], "7593": 1041, "7594": 1041, "75949622": 217, "75th": [250, 885], "76": [43, 191, 213, 331, 352, 361, 375, 384, 780, 784, 867], "760": [43, 149], "7608": 1024, "76195467e": 195, "7621951219512195": 254, "7632": 1041, "7638": 1000, "764": [724, 1004], "7646": 1024, "764779": 202, "765012": 325, "7655": 1042, "765671": 202, "7660": 1041, "7661": 1042, "7668": 1043, "7674": [527, 1042], "767498": 146, "7676": 1041, "768": 86, "7680": 1041, "76823": 45, "7685": 1042, "769": [249, 291, 299, 1025], "76995": 373, "77": [43, 45, 79, 168, 191, 280, 331, 372, 375, 537, 710, 739, 778, 825], "770": [175, 1025], "77000": 213, "7702": 1042, "770926": 285, "772": [352, 726], "7721": 1042, "7723": 1042, "7724": 1041, "773": [271, 334, 651, 845], "77310": 373, "7732": 1041, "77322639": 115, "7738": 1043, "7739": 1042, "774": 187, "77426368": 51, "775": [57, 328, 1025], "7750": 1041, "775047": 679, "775151": 679, "7756": 1041, "77630514": 418, "7768366": 1002, "777": 384, "7771": 1042, "77764": 406, "77777215": 115, "7786": 1041, "779": 352, "7794": 1042, "779751": 285, "7798": 911, "7799": 1041, "78": [43, 86, 191, 231, 250, 280, 313, 331, 496, 497, 649, 650, 655, 656, 658, 663, 664, 665, 667, 668, 684, 688, 689, 803, 809, 825, 831, 1004, 1024], "780": [235, 269, 309, 1025], "7812": 1042, "781265": [373, 500], "7814": 1042, "7816": 52, "7819": [410, 1042], "7823": [1042, 1043], "7825": 1042, "7825594": 51, "7826": 375, "782755": 62, "7831": 352, "783149": 103, "7833": 477, "783392": 271, "7838": 1042, "784": 308, "7840": 87, "7849": 1042, "785063": 103, "78571427112143152472031331383346104": 52, "786": [86, 103], "786015": 103, "7863": 1042, "786432": 86, "78681467": 86, "7872": 1042, "7880": 1042, "7887550": 52, "788808": 325, "789": [164, 417], "7894": [901, 1016], "79": [43, 45, 66, 68, 111, 112, 118, 123, 168, 191, 309, 331, 375, 383, 412, 476, 527, 600, 697, 825, 845, 1035, 1037], "790": [43, 102, 199], "7906": [625, 652], "79064206": 613, "79084103": 361, "791": 179, "7914": 1042, "791667315161908911936472223112": 52, "79269019073225": 295, "7927845601690917": 318, "7929": [353, 1042], "7943": 1045, "7944": 1042, "7946": 1041, "795": 651, "7954": 1042, "796": 146, "7970": 1042, "7971": 666, "7972": 557, "79769376": 115, "798": [103, 417], "7983": 1042, "798301": 254, "7986": 1042, "7986499491396734": 170, "798982054": 1004, "799": [179, 353], "7990": 1042, "7998": 1042, "7_qbz5n2kfra8p0": 396, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 67, 68, 69, 70, 72, 78, 79, 83, 86, 88, 93, 95, 97, 98, 102, 104, 106, 107, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 130, 134, 137, 139, 140, 143, 145, 146, 148, 152, 155, 156, 159, 167, 168, 171, 173, 175, 176, 178, 179, 182, 185, 186, 187, 189, 191, 193, 194, 199, 201, 204, 207, 213, 214, 217, 220, 221, 223, 229, 231, 233, 234, 235, 237, 238, 241, 245, 246, 248, 252, 253, 254, 256, 257, 258, 260, 261, 262, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 278, 281, 282, 288, 290, 293, 295, 299, 303, 306, 308, 309, 311, 313, 314, 315, 316, 317, 320, 325, 330, 331, 332, 334, 335, 338, 341, 345, 346, 347, 348, 349, 352, 353, 354, 359, 361, 366, 372, 373, 374, 375, 376, 378, 383, 384, 396, 404, 408, 410, 414, 415, 417, 418, 419, 421, 423, 441, 444, 445, 446, 449, 451, 452, 454, 457, 458, 459, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 485, 486, 487, 489, 492, 499, 501, 505, 506, 517, 519, 534, 537, 541, 543, 546, 548, 550, 552, 553, 556, 558, 559, 568, 573, 585, 591, 592, 593, 594, 607, 608, 631, 632, 639, 640, 651, 661, 673, 679, 682, 692, 695, 696, 697, 698, 702, 705, 709, 710, 712, 713, 718, 724, 730, 731, 732, 744, 745, 748, 749, 753, 754, 756, 781, 785, 786, 788, 791, 792, 793, 794, 798, 800, 802, 804, 805, 810, 813, 820, 821, 824, 825, 826, 831, 833, 834, 836, 845, 847, 848, 854, 864, 865, 866, 872, 879, 886, 888, 904, 909, 912, 931, 933, 934, 949, 950, 951, 955, 972, 978, 979, 980, 981, 982, 983, 984, 993, 994, 1000, 1001, 1002, 1004, 1007, 1012, 1014, 1018, 1028, 1031, 1032, 1033, 1036, 1037, 1038, 1042, 1043, 1048, 1049, 1051], "80": [43, 45, 50, 64, 100, 112, 154, 161, 165, 176, 187, 193, 248, 313, 317, 330, 344, 346, 352, 358, 361, 373, 375, 378, 408, 414, 419, 421, 446, 481, 513, 544, 716, 803, 817, 825, 888, 901, 920, 993, 999, 1000, 1004, 1011, 1017, 1020], "800": [83, 323, 373, 587, 695], "8000": [231, 274, 275], "800000011920929": 360, "8000184677460305": 318, "8002": 1042, "8003": 1043, "8005": 1042, "8006": 1042, "8010": 1042, "801770e": 231, "802": [46, 168, 375], "8022": [46, 475, 1044], "802601": 202, "8028": 1042, "803483": 146, "803882e": 231, "8040": 1041, "804414": [373, 500], "805": 215, "8053": 1042, "8059798": 198, "806": [245, 652, 1025], "8061": 1042, "8065": 1042, "8066": 1043, "8068": 1042, "807": [269, 271], "8075": 1043, "808": [50, 1025], "8086": [622, 1042], "8087": 1042, "8093": 1042, "8094": 1042, "80956739": 1005, "80_000": 139, "81": [43, 83, 254, 330, 331, 410, 702, 764, 791, 803, 817, 834, 1004, 1005, 1007, 1014], "810": [188, 832], "8100": 1024, "8102": 1043, "810596": 373, "8117": 1042, "8120": 1042, "8125": 724, "812526": 202, "8129": 1043, "813": [300, 1025], "8133333333333334": 302, "81355169": 418, "8137": 1042, "8139": 1042, "814": 188, "815476315189119122164721021826110": 52, "8157": 1024, "8159": 1042, "816": [63, 272, 473, 474, 1025], "8160": 1042, "8174": 1042, "817724": 202, "818": [244, 1025], "8181": 1042, "819": [353, 418], "8190": 1043, "81940995": 418, "8198": 1042, "82": [43, 66, 86, 91, 142, 165, 216, 302, 330, 791, 803, 817, 950, 1004, 1007, 1035], "820": [43, 52, 847, 848], "820705": 202, "821": [120, 1025], "8216": 1044, "822": [354, 793], "822097": 186, "8224": 1042, "8225220806196525": 208, "823": 291, "8243": 1024, "825": 753, "8251": 1042, "8253": 229, "8259": 1042, "827917": 146, "828": 291, "8282": 1042, "829429": 261, "8295": 1042, "83": [45, 66, 70, 74, 250, 330, 375, 697, 710, 789, 923, 999, 1004, 1038], "830000": 307, "8306": 1042, "8316": 1042, "832": [188, 417, 558, 559], "83236428": 418, "83281226": [847, 848], "833": [45, 1025], "8333": 501, "83333": 767, "833333": 186, "8335": 1042, "834": 334, "834310": 202, "8344": 1042, "8345": 600, "8353": 46, "8354": [625, 1042], "83548752": 613, "8355": 1041, "8361": 1043, "836224": 62, "8363": 1042, "8370": 1024, "8377": 1042, "83816048": 649, "83822343": 1002, "83833": 384, "8387": 838, "839": [357, 683, 1025], "8391458753133224": 321, "84": [43, 45, 102, 165, 204, 231, 313, 330, 361, 375, 417, 418, 791, 817, 1004, 1014], "840": [52, 384, 1025], "84000": 213, "840000": 307, "8407": 102, "84077985": 198, "841": 103, "84127814": 669, "84253": 1005, "844": [417, 558, 559], "8446": 1042, "8449": 1042, "847222222222214": 208, "8473": 418, "8478": 1044, "8480": 1024, "8481": 1042, "8484": 1043, "848743": 62, "849835": 87, "85": [45, 55, 68, 83, 88, 102, 123, 165, 228, 231, 269, 282, 309, 331, 361, 417, 441, 501, 503, 558, 559, 600, 655, 661, 748, 756, 791, 803, 831, 1004, 1005, 1035], "850": [246, 1025], "850000": 307, "850031": 202, "8508": 1044, "851": 271, "8512": 1042, "8513": 622, "851348": 62, "8515": [418, 1042], "85151335": 418, "851792": 62, "85253229": 90, "852774": 146, "853174": 62, "853676": 269, "853846": 202, "854": 269, "85418642": 361, "8549": 1042, "855": [47, 306, 1025], "8554": 1043, "855465": 307, "857": [272, 353], "857400": 62, "858486250088675": 318, "85857475": 130, "8586": 1042, "859007": 62, "8591": 1042, "86": [47, 52, 68, 102, 165, 204, 313, 330, 331, 409, 791, 915, 1004], "860000": 307, "861": [168, 375, 791, 792, 1004], "861053": 62, "861106": 62, "8614": 1024, "861533": 62, "8617": 1043, "861868": 62, "8626621": 327, "8628": 638, "8640": 187, "865400": 62, "866": 1012, "866161": 62, "866571": 62, "867": 106, "8672": 1042, "8676": [623, 1042], "8678": 626, "868": [146, 164], "868443": 50, "8698": 1042, "87": [45, 47, 68, 102, 179, 265, 331, 600, 670, 780, 791, 803, 825, 883, 895, 1004], "870": [168, 375], "871": [73, 111, 112, 412, 476], "871277": 62, "871965": 62, "872": [73, 1012], "8720": [559, 1043], "872186": 62, "873": [168, 375], "873724": 62, "87382323": 665, "874": [105, 201, 791, 792, 1004, 1025], "87421f": 118, "874771": 146, "875": [86, 171, 672], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 173, "8768": 1042, "8769": 1044, "877": [47, 269], "8773": 1044, "877981": 62, "878": 47, "878051": 202, "878964": 815, "87mb": 352, "88": [43, 45, 47, 68, 204, 217, 270, 309, 328, 330, 331, 356, 373, 375, 378, 409, 412, 475, 649, 650, 655, 663, 664, 665, 684, 867, 950, 1035], "880": [43, 74, 1025], "880191": 202, "880298": 202, "88089948": 418, "88096009": 130, "882": 271, "88213": 373, "882561": 271, "883": 82, "883065": 62, "8833": 501, "8835": 1042, "884": [284, 291], "8845": 1042, "885": [45, 47, 168, 334, 375], "8854": 1042, "887": [341, 1025], "8874": 1042, "8878": 838, "8880": 623, "8881": 626, "889": [269, 439], "88978285": 1005, "89": [43, 68, 175, 204, 279, 330, 331, 986, 999, 1004, 1014, 1035, 1038, 1046], "890": 269, "891": 47, "892": [185, 1025], "8922": 1042, "893055": 202, "8931": 1042, "8936": 1042, "894": [64, 123, 1025], "894264": 254, "8947": 917, "8948018": 52, "89483932": 1002, "8948621": 1005, "895": [335, 1025], "896": 651, "8963": 274, "8965": 417, "8973": 1042, "89856": 815, "899": [68, 269], "8992": 1042, "8995": 1042, "8pt": 1014, "8x8": [68, 204, 244, 300, 309, 375, 505], "9": [43, 44, 46, 48, 51, 52, 53, 61, 63, 64, 67, 68, 70, 77, 79, 83, 88, 91, 95, 97, 106, 113, 115, 142, 143, 145, 146, 147, 152, 154, 160, 161, 168, 173, 177, 182, 185, 186, 187, 189, 195, 196, 204, 213, 226, 227, 230, 231, 233, 236, 244, 245, 254, 256, 257, 258, 259, 264, 265, 274, 278, 280, 284, 290, 293, 295, 296, 299, 300, 301, 306, 307, 309, 311, 313, 314, 315, 317, 318, 320, 325, 326, 328, 330, 331, 333, 334, 335, 341, 345, 350, 361, 375, 376, 384, 391, 396, 402, 403, 408, 409, 411, 412, 414, 417, 418, 441, 445, 452, 459, 465, 484, 485, 486, 487, 492, 499, 501, 519, 521, 523, 530, 537, 541, 542, 543, 550, 563, 570, 573, 586, 594, 607, 608, 610, 611, 630, 633, 637, 640, 642, 649, 650, 655, 661, 663, 664, 665, 684, 685, 686, 690, 695, 702, 712, 726, 729, 744, 751, 772, 781, 782, 783, 800, 802, 804, 806, 807, 821, 824, 825, 831, 833, 836, 844, 845, 849, 850, 855, 858, 864, 865, 873, 879, 882, 950, 951, 955, 976, 993, 999, 1000, 1004, 1008, 1014, 1018, 1019, 1031, 1033, 1036, 1037, 1038, 1040, 1049, 1051], "90": [45, 49, 52, 54, 68, 106, 129, 130, 145, 146, 147, 149, 165, 175, 189, 194, 204, 210, 212, 215, 220, 231, 256, 280, 282, 313, 317, 326, 330, 331, 361, 365, 378, 384, 414, 566, 784, 803, 831, 836, 888, 999, 1004, 1031, 1050, 1051], "900": [47, 83, 106, 107, 217, 1025], "9000": 231, "900000e": 231, "9010": 1041, "9012": 1043, "9015": [666, 1043], "9019": 1042, "9022": 1042, "9024": 1042, "9026666666666666": 146, "903": 47, "904": [187, 269, 411], "9041": 1043, "9043": 1043, "9044": [271, 1042], "90453403": 468, "904556e": 231, "904558e": 231, "904747e": 231, "904751e": 231, "905": 269, "905206": 87, "9067": 1042, "9069": 1044, "9078": 1042, "908": 1004, "90809432": 130, "9085": 1043, "9087": 1049, "90885631": 86, "909": 47, "909293": 307, "909909": 146, "91": [45, 68, 84, 175, 309, 330, 331, 417, 999], "910": 43, "9100": 1042, "9101": 1043, "9105": 1042, "9108": 1042, "912": 73, "912632": 307, "913": [417, 562], "914": [202, 1025], "914370e": 231, "914387e": 231, "9144057": 52, "9145": 1042, "914538e": 231, "914573e": 231, "9147": 1043, "9149": 1041, "915": 47, "9151": 1043, "9157": 1043, "916": [82, 143, 1025], "91629073": 593, "916555e": 231, "9167": 325, "917": [82, 360], "917281": 146, "9173": 1024, "917618e": 231, "918": [127, 1025], "919": [233, 265, 1025], "92": [52, 68, 83, 123, 165, 191, 269, 309, 330, 331, 341, 373, 375, 541, 543, 550, 565, 600, 699, 803, 817, 825, 999], "9206": 1042, "9219": 1042, "9221": 652, "9222": 1043, "9226260871125187": 279, "923223": 815, "92329566": 130, "9234": 1043, "9239": 1042, "924": 47, "92461872": 128, "925": [349, 1004, 1025], "9250": 1045, "92529176": 1005, "9257": 1043, "9259": 1042, "9266666666666666": 142, "927": 439, "9274": 1045, "9277": 1042, "9278": 1042, "928": [112, 439], "9284": 1042, "9285199232684509": 327, "928571": 231, "9288": 1045, "9289": 1042, "93": [45, 68, 123, 168, 213, 254, 331, 352, 375, 649, 650, 655, 663, 664, 665, 684, 780, 791, 803, 825, 831, 915, 999, 1004], "9300": 271, "930000": 307, "9302": 1042, "9304": 1043, "932": 47, "9326": 1024, "93271427": 173, "933": [47, 106, 414], "933197": 254, "933253": 146, "9333": 414, "933333": [160, 856], "935": 1042, "9354": 1043, "936": [47, 439, 1004], "936480": 62, "9372": 1043, "937443": 62, "937532": 62, "937597": 62, "9378": 1043, "938": [47, 209, 788, 1004], "938613": 62, "939": [238, 671, 1025], "9399": 1043, "93fletcher": 1000, "93goldfarb": 1000, "93lindenstrauss_lemma": 901, "93shanno_algorithm": 1000, "94": [43, 68, 70, 87, 122, 142, 212, 248, 313, 330, 331, 409, 417, 666, 791, 825, 999, 1004, 1005, 1014, 1035], "940": 43, "9400": 271, "940000": 307, "940184": 146, "940201": 62, "940374": 62, "9403917": 115, "941": 47, "94114649": [847, 848], "9416": 52, "9417": 674, "942": [290, 1025], "9431": 838, "944": 47, "944mb": 352, "9456": 1043, "94592424": 665, "946": 112, "94731329": 670, "9473684210526315": 320, "947958": 993, "948": [274, 788, 1004, 1025], "9484": 1043, "949": 47, "9490": 375, "9492": 1043, "9497": 1043, "9499": 641, "95": [45, 52, 54, 68, 79, 80, 85, 90, 100, 142, 146, 149, 177, 186, 193, 213, 215, 220, 231, 258, 259, 262, 269, 271, 272, 296, 304, 313, 317, 324, 331, 341, 361, 417, 530, 635, 636, 639, 650, 664, 751, 825, 904, 1000, 1004, 1005, 1017, 1038], "950": 47, "950000047683716": 360, "9502547": 198, "9507": 1042, "9515": 1043, "951751e": 231, "951958": 993, "952": [47, 82], "9521": 1043, "952289": 202, "9524": 1043, "953": [47, 82], "953061": 308, "95373": 373, "954": [883, 895], "95433992": 115, "955": [291, 414, 657], "9558": 1042, "955989": 993, "956": 47, "956038": 307, "9565": 375, "9569": 1043, "957": [47, 316, 731, 1004], "9579": 1043, "958": [47, 78, 1025], "9583": 409, "9584": [630, 1042], "959": [883, 895], "9593": 1042, "9595": 677, "9597": 1045, "9599": 1043, "95th": [52, 146, 149, 751], "96": [43, 52, 68, 95, 177, 240, 250, 309, 313, 316, 317, 330, 331, 375, 414, 556, 685, 686, 714, 825, 993, 999, 1004, 1014, 1035], "9600": 1042, "9604": 1042, "961": [72, 864, 1025], "961009": 993, "961111": 160, "9612": 1043, "961904": 856, "96190476": 1007, "962": 47, "96228895": 130, "9623": 1042, "9630": 678, "9641": 1042, "9647": 1043, "965": [47, 1004], "9655": 1043, "9656": 1043, "966": 45, "9666": 546, "966981": 202, "967": [106, 1004, 1008], "9677": 1042, "968": [175, 185, 269], "9681": 1043, "9686": 1043, "969": [54, 95, 372, 1025], "9693": 1042, "9694898472080092": 326, "9697": 1042, "97": [68, 129, 168, 189, 248, 262, 331, 341, 375, 384, 391, 414, 649, 650, 655, 661, 663, 664, 665, 684, 685, 686, 999, 1005, 1014, 1035], "9701": 1043, "9707": 1043, "9711": 1042, "9717": 1042, "9723": 1043, "9726": 1043, "973": [353, 414], "9731": 1043, "9733": [623, 626], "973554": 325, "973770": 202, "974": 360, "974e": 418, "975": [168, 185, 1019], "9750": 1042, "97545464": 254, "975455": 254, "9759": 47, "976": [205, 279], "976158": 373, "977": [43, 414], "9771": 557, "9772": 1043, "9775": 1043, "977890": 261, "978": 168, "9781605585161": 410, "978444": 307, "9786": 1043, "9788": 1042, "98": [68, 77, 79, 80, 87, 95, 97, 113, 123, 168, 240, 269, 306, 313, 331, 375, 414, 417, 662, 842, 898, 999, 1004, 1006], "980000": 307, "9802": 1042, "981": [168, 375, 1004], "9815": 1042, "9816": 1043, "9821": 853, "983": 731, "9830": 1042, "9832": 1043, "9833": 501, "98350372e": 195, "983667": 993, "9837": 1043, "9843": 1048, "9847": 1042, "984ea3": [79, 95], "9850": 213, "9851": 1043, "9858": 1043, "986": [315, 1025], "98633022": 130, "986429": 308, "9865": 1042, "9866": [613, 622, 625], "9866666666666667": 142, "9868": [901, 1016], "986989": 274, "987": [279, 353], "9875": 1043, "9877356837606838": 320, "98809919e": 195, "9884": 682, "9885": 674, "9886": 1043, "989": [279, 1025], "989341": 202, "98mb": 352, "99": [45, 52, 62, 68, 79, 84, 95, 120, 231, 240, 244, 250, 256, 258, 269, 272, 311, 331, 366, 371, 375, 414, 417, 418, 495, 650, 664, 674, 685, 686, 791, 825, 854, 972, 999, 1004, 1014, 1018, 1030, 1037], "990": [672, 1004], "9900": 231, "9907": 1044, "9908": 1043, "991": [188, 279, 1004, 1025], "991584977345022": 170, "991653": 307, "992": [181, 307, 1025], "9922": 1042, "9924": 544, "99244": 544, "992766": 307, "993": 279, "9933333333333333": 142, "9935": 838, "993879": 307, "9939": 1043, "993919": 50, "994": [157, 291, 1025], "9945": 1042, "995": 205, "9951": 1045, "9969977": 52, "997": [46, 75, 168, 170], "9978": 1048, "9979": 43, "9979281": 52, "998": [110, 168, 1008, 1025], "9980": [43, 1043], "9981": 43, "998142": 52, "998273": 265, "9987": 642, "99891212e": 195, "999": [231, 265, 271, 417, 720, 864, 865], "9990": 231, "9991": [667, 668, 1043], "99918858": 130, "9993": [43, 656, 658, 1043], "9994": 666, "9995": 43, "9996": 654, "999791942438998": 321, "9998": [50, 304], "9999": [50, 231, 304, 333, 501, 630, 1043], "99999": 333, "999999": [79, 95], "9x": 327, "A": [0, 2, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 82, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 107, 109, 112, 116, 118, 121, 122, 123, 135, 136, 141, 143, 153, 157, 159, 160, 161, 165, 167, 170, 173, 175, 177, 178, 179, 183, 186, 187, 198, 200, 214, 217, 223, 227, 228, 231, 234, 247, 250, 259, 265, 271, 272, 274, 278, 286, 288, 306, 311, 313, 316, 320, 322, 325, 331, 332, 333, 335, 341, 345, 346, 352, 353, 354, 358, 360, 361, 365, 367, 372, 373, 375, 376, 378, 380, 381, 382, 383, 386, 390, 391, 392, 393, 395, 401, 405, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 433, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 490, 492, 493, 495, 497, 500, 503, 504, 505, 506, 507, 511, 513, 514, 515, 516, 517, 523, 525, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 610, 611, 613, 614, 620, 623, 630, 631, 632, 633, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 707, 708, 713, 714, 715, 719, 720, 722, 724, 725, 726, 727, 728, 729, 734, 739, 740, 743, 745, 746, 747, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 767, 769, 770, 777, 778, 779, 780, 781, 784, 791, 793, 794, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 949, 950, 951, 959, 960, 962, 963, 988, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1030, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "AND": 738, "AS": 422, "AT": [2, 373, 498], "And": [52, 183, 232, 233, 238, 247, 271, 352, 386, 404, 410, 414, 418, 533, 591, 592, 594, 695, 696, 1000, 1004, 1025, 1042], "As": [0, 30, 43, 46, 58, 62, 66, 75, 78, 86, 88, 90, 91, 99, 113, 116, 125, 134, 135, 141, 143, 144, 145, 147, 149, 153, 163, 166, 170, 175, 176, 182, 186, 188, 189, 191, 193, 196, 198, 202, 204, 213, 217, 221, 231, 238, 247, 259, 265, 266, 268, 269, 271, 272, 274, 290, 296, 312, 323, 328, 333, 341, 345, 353, 354, 356, 358, 359, 361, 365, 366, 373, 377, 378, 380, 383, 390, 391, 392, 404, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 448, 496, 557, 565, 569, 622, 635, 658, 659, 675, 677, 690, 738, 761, 767, 849, 850, 851, 853, 855, 886, 993, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1014, 1018, 1019, 1020, 1023, 1024, 1028, 1035, 1041, 1046, 1051, 1053], "At": [52, 107, 134, 218, 247, 265, 283, 288, 290, 330, 333, 365, 366, 382, 393, 401, 406, 413, 417, 439, 442, 467, 591, 592, 594, 605, 835, 837, 874, 967, 993, 1000, 1003, 1005, 1009, 1018, 1028], "Be": [165, 179, 352, 378, 412, 570, 571, 651, 657, 658, 659, 661, 662, 672, 683, 707, 821, 822, 882, 1014, 1032, 1036], "Being": [378, 392, 393, 1000, 1007], "But": [43, 48, 86, 185, 214, 215, 271, 291, 311, 378, 390, 410, 413, 416, 417, 464, 749, 915, 916, 993, 1004, 1019, 1024], "By": [57, 120, 149, 150, 151, 193, 217, 247, 265, 280, 288, 311, 320, 326, 327, 345, 352, 366, 378, 380, 384, 385, 392, 401, 409, 410, 411, 413, 414, 415, 416, 417, 419, 440, 443, 447, 448, 452, 466, 469, 470, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 527, 552, 553, 560, 561, 562, 563, 567, 568, 588, 589, 591, 592, 594, 609, 612, 635, 636, 674, 676, 678, 680, 693, 695, 697, 700, 702, 703, 705, 706, 721, 732, 733, 737, 741, 786, 787, 790, 797, 799, 806, 807, 853, 867, 868, 880, 881, 883, 885, 895, 897, 905, 910, 911, 915, 916, 917, 918, 933, 934, 993, 994, 996, 1000, 1004, 1011, 1012, 1014, 1016, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1052, 1053], "For": [2, 30, 43, 47, 48, 51, 52, 53, 57, 64, 68, 72, 75, 79, 80, 82, 86, 88, 90, 91, 93, 100, 105, 111, 116, 121, 137, 139, 146, 147, 149, 150, 152, 164, 165, 168, 170, 172, 177, 181, 182, 186, 187, 198, 200, 202, 213, 214, 217, 218, 221, 230, 231, 233, 235, 238, 240, 241, 243, 244, 245, 247, 254, 261, 265, 268, 271, 272, 278, 285, 290, 291, 301, 306, 308, 309, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 335, 341, 343, 345, 348, 352, 353, 354, 356, 357, 360, 361, 365, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 401, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 426, 433, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 473, 474, 476, 484, 485, 486, 487, 491, 497, 499, 501, 506, 517, 518, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 584, 585, 586, 587, 591, 592, 594, 595, 596, 597, 600, 605, 610, 611, 612, 613, 614, 617, 622, 625, 626, 630, 631, 632, 633, 634, 635, 636, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 692, 693, 695, 696, 698, 704, 707, 709, 710, 732, 733, 741, 744, 766, 772, 781, 786, 787, 790, 791, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 939, 956, 966, 987, 993, 994, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1022, 1027, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "If": [0, 43, 50, 52, 64, 68, 77, 82, 88, 103, 113, 123, 132, 146, 149, 154, 179, 182, 186, 195, 213, 228, 230, 231, 247, 250, 254, 265, 271, 278, 285, 296, 304, 311, 316, 317, 341, 345, 348, 349, 352, 353, 354, 360, 361, 365, 366, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 392, 393, 396, 401, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 431, 434, 435, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 515, 517, 518, 522, 525, 526, 527, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 714, 715, 716, 717, 719, 720, 721, 725, 729, 730, 731, 732, 733, 734, 735, 739, 741, 744, 748, 749, 751, 756, 757, 758, 759, 760, 761, 762, 764, 766, 767, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 815, 817, 820, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 940, 943, 949, 951, 953, 955, 960, 962, 966, 969, 972, 974, 977, 978, 984, 987, 988, 989, 990, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1035, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1051, 1053], "In": [0, 7, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 70, 72, 74, 82, 86, 88, 90, 91, 93, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 116, 120, 122, 125, 126, 127, 128, 132, 134, 137, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 154, 157, 164, 165, 167, 168, 170, 174, 175, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 198, 200, 201, 202, 204, 208, 213, 214, 215, 216, 217, 218, 221, 230, 231, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 259, 261, 264, 265, 268, 269, 271, 272, 273, 274, 276, 277, 280, 281, 283, 284, 285, 286, 288, 291, 294, 297, 298, 300, 309, 311, 312, 313, 316, 317, 318, 320, 321, 322, 324, 325, 327, 328, 332, 334, 341, 345, 348, 352, 353, 354, 356, 360, 361, 365, 366, 367, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 390, 391, 392, 393, 395, 396, 397, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 439, 442, 443, 444, 445, 446, 449, 450, 451, 454, 464, 465, 466, 471, 474, 477, 496, 499, 506, 511, 512, 514, 526, 537, 539, 541, 543, 544, 545, 547, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 594, 605, 609, 612, 613, 614, 633, 635, 636, 637, 639, 646, 647, 648, 650, 651, 652, 654, 656, 658, 661, 662, 664, 666, 668, 669, 671, 672, 677, 678, 679, 682, 683, 687, 688, 689, 699, 702, 706, 715, 721, 723, 729, 731, 732, 737, 738, 741, 743, 745, 757, 759, 760, 784, 786, 788, 791, 797, 799, 800, 801, 802, 803, 806, 807, 809, 817, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 872, 874, 880, 881, 885, 886, 888, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 912, 915, 917, 922, 932, 934, 951, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1028, 1032, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "Ines": 1052, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 86, 88, 91, 104, 109, 111, 113, 120, 123, 124, 126, 129, 134, 137, 139, 140, 142, 144, 146, 154, 168, 175, 176, 177, 181, 182, 186, 187, 188, 194, 198, 200, 202, 210, 213, 217, 227, 230, 231, 233, 234, 240, 245, 247, 250, 265, 266, 267, 269, 271, 272, 274, 277, 278, 285, 288, 291, 297, 298, 299, 301, 302, 304, 311, 315, 316, 318, 320, 326, 328, 337, 341, 345, 348, 352, 353, 354, 361, 365, 366, 367, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 390, 391, 392, 393, 396, 401, 404, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 439, 440, 443, 444, 445, 446, 447, 449, 450, 451, 454, 461, 464, 466, 469, 470, 471, 476, 480, 487, 489, 499, 511, 518, 527, 536, 538, 539, 541, 543, 544, 552, 553, 556, 557, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 592, 599, 605, 609, 610, 611, 614, 617, 618, 622, 623, 625, 626, 630, 633, 634, 635, 636, 644, 645, 646, 649, 650, 653, 655, 656, 657, 658, 661, 663, 664, 665, 666, 669, 670, 671, 673, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 707, 711, 712, 713, 719, 726, 737, 745, 746, 750, 761, 762, 765, 768, 784, 786, 791, 802, 803, 806, 807, 809, 815, 816, 817, 825, 826, 828, 831, 834, 843, 844, 849, 850, 851, 853, 856, 857, 858, 859, 863, 864, 865, 869, 870, 871, 875, 876, 877, 881, 884, 886, 896, 899, 900, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 924, 928, 937, 951, 960, 974, 977, 979, 980, 981, 982, 983, 984, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "Its": [109, 269, 273, 374, 392, 415, 420, 541, 924, 999, 1000, 1009, 1012, 1018, 1023, 1028, 1038, 1052], "NOT": [247, 297, 375, 381, 566, 813, 847, 848], "Nearness": 630, "No": [61, 148, 198, 219, 221, 241, 247, 265, 331, 348, 375, 386, 396, 404, 410, 476, 562, 563, 593, 594, 638, 648, 667, 679, 681, 688, 689, 800, 1000, 1052], "Not": [88, 159, 187, 365, 390, 404, 410, 428, 429, 432, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 471, 472, 473, 474, 475, 476, 477, 478, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 566, 569, 572, 573, 584, 585, 586, 591, 592, 594, 630, 631, 632, 633, 680, 691, 692, 693, 694, 696, 797, 800, 801, 803, 806, 807, 817, 844, 847, 848, 851, 852, 853, 855, 859, 871, 879, 882, 883, 885, 888, 899, 900, 911, 1004, 1010, 1023, 1044], "OF": 375, "ON": 325, "ONE": [372, 610, 611], "OR": [311, 410, 421, 446, 1046], "Of": [48, 62, 64, 181, 285, 365, 380, 410, 418, 994], "On": [43, 51, 52, 55, 63, 100, 103, 104, 115, 116, 125, 134, 137, 139, 141, 146, 150, 151, 154, 157, 163, 165, 174, 175, 186, 187, 188, 195, 200, 202, 215, 217, 241, 242, 243, 244, 246, 247, 250, 251, 252, 253, 254, 256, 258, 261, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 278, 283, 285, 309, 311, 313, 315, 316, 317, 321, 322, 324, 325, 327, 332, 341, 348, 360, 365, 376, 378, 379, 380, 382, 390, 392, 406, 408, 410, 414, 415, 417, 419, 420, 646, 659, 694, 738, 764, 872, 888, 993, 997, 1000, 1003, 1004, 1006, 1010, 1012, 1017, 1019], "One": [2, 43, 48, 51, 61, 66, 82, 88, 125, 127, 143, 146, 149, 150, 183, 186, 189, 192, 217, 222, 228, 240, 251, 261, 265, 271, 278, 281, 288, 297, 300, 312, 327, 336, 338, 349, 353, 360, 365, 375, 378, 391, 392, 404, 409, 410, 413, 415, 416, 417, 418, 419, 421, 446, 451, 474, 476, 480, 515, 569, 634, 642, 661, 669, 671, 676, 678, 679, 680, 791, 810, 811, 835, 836, 837, 868, 869, 880, 911, 966, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1014, 1019, 1025, 1026, 1030, 1039, 1041, 1048, 1050], "Or": [352, 360, 414, 415, 880, 1004, 1010, 1018], "Such": [53, 150, 170, 175, 185, 193, 198, 202, 214, 265, 274, 352, 392, 393, 404, 414, 415, 417, 558, 559, 659, 994, 1004, 1007, 1014, 1020, 1045, 1050, 1052], "THE": 375, "That": [52, 64, 120, 134, 149, 168, 186, 202, 240, 271, 275, 353, 354, 366, 372, 386, 392, 409, 414, 419, 420, 445, 448, 449, 560, 567, 596, 821, 915, 916, 993, 1001, 1002, 1010, 1020, 1044, 1045], "The": [2, 16, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 390, 391, 392, 393, 395, 396, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 430, 432, 433, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 755, 756, 757, 758, 759, 760, 761, 762, 765, 767, 768, 769, 770, 773, 774, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 945, 946, 947, 948, 949, 950, 951, 953, 954, 956, 959, 960, 963, 966, 968, 969, 970, 972, 973, 974, 977, 985, 986, 987, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "Their": [186, 373, 375, 393, 410, 647, 1035], "Then": [103, 135, 139, 149, 154, 157, 165, 186, 191, 198, 200, 213, 217, 237, 241, 247, 253, 265, 273, 274, 288, 352, 360, 372, 382, 384, 386, 396, 397, 407, 410, 413, 415, 418, 419, 573, 596, 722, 759, 803, 817, 907, 908, 994, 1003, 1004, 1010, 1019, 1020, 1044], "There": [0, 74, 80, 140, 170, 231, 237, 247, 262, 266, 268, 271, 290, 352, 371, 373, 375, 378, 379, 380, 383, 390, 392, 393, 396, 407, 410, 415, 417, 418, 419, 448, 454, 464, 537, 556, 557, 562, 563, 591, 592, 594, 609, 648, 994, 1000, 1001, 1002, 1003, 1004, 1007, 1011, 1014, 1018, 1019, 1020, 1022, 1027, 1035, 1043], "These": [11, 18, 25, 32, 38, 43, 44, 46, 64, 84, 120, 122, 139, 142, 183, 187, 202, 213, 214, 215, 241, 265, 288, 291, 295, 309, 311, 318, 319, 324, 331, 333, 361, 365, 366, 371, 374, 375, 378, 380, 382, 385, 387, 390, 392, 396, 401, 404, 407, 408, 409, 410, 413, 415, 417, 418, 419, 420, 444, 448, 450, 501, 511, 512, 518, 541, 570, 571, 605, 606, 671, 679, 680, 702, 709, 736, 781, 797, 803, 806, 807, 809, 817, 826, 828, 829, 830, 831, 832, 834, 852, 853, 872, 926, 993, 995, 998, 1000, 1001, 1004, 1005, 1015, 1017, 1019, 1023, 1035, 1041, 1043, 1044, 1045, 1048, 1052], "To": [1, 43, 47, 63, 64, 68, 80, 88, 90, 109, 111, 113, 116, 125, 134, 143, 146, 147, 156, 159, 168, 175, 176, 179, 181, 182, 185, 186, 191, 195, 198, 200, 213, 214, 215, 217, 221, 231, 244, 245, 247, 250, 252, 254, 261, 265, 266, 268, 269, 271, 273, 274, 276, 278, 284, 285, 288, 290, 308, 311, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 350, 353, 356, 361, 365, 366, 371, 372, 378, 379, 380, 382, 383, 384, 386, 390, 392, 393, 396, 404, 406, 407, 410, 411, 412, 413, 414, 415, 417, 418, 448, 450, 451, 452, 463, 466, 469, 495, 499, 505, 506, 510, 511, 512, 534, 540, 541, 542, 544, 546, 547, 548, 549, 560, 561, 562, 563, 567, 568, 572, 600, 614, 630, 635, 649, 650, 655, 656, 659, 661, 662, 663, 664, 665, 666, 687, 703, 715, 731, 766, 788, 796, 806, 807, 829, 836, 867, 878, 883, 897, 898, 907, 908, 912, 915, 916, 917, 918, 941, 951, 990, 993, 994, 996, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1018, 1019, 1020, 1028, 1035, 1038, 1040, 1041, 1042, 1044, 1046], "Will": [378, 500, 537, 630, 647, 648, 649, 655, 659, 660, 663, 664, 665, 666, 667, 668, 676, 678, 710, 717, 791, 872, 876, 886, 887, 1038, 1039, 1041, 1043, 1053], "Willing": [1041, 1042], "With": [61, 70, 79, 100, 107, 125, 126, 149, 151, 164, 183, 187, 213, 215, 239, 241, 246, 248, 254, 271, 295, 365, 373, 376, 378, 380, 392, 401, 410, 411, 414, 417, 419, 439, 441, 504, 544, 585, 635, 636, 661, 865, 868, 870, 881, 887, 888, 914, 916, 997, 1000, 1001, 1004, 1005, 1007, 1008, 1011, 1018, 1020, 1025, 1032, 1038, 1042, 1043, 1045, 1047, 1049], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 58, 62, 63, 64, 66, 68, 69, 75, 78, 83, 86, 88, 91, 96, 100, 102, 113, 118, 120, 125, 126, 127, 129, 137, 138, 139, 149, 163, 170, 175, 176, 177, 185, 186, 187, 189, 191, 193, 197, 198, 200, 201, 202, 205, 210, 211, 213, 215, 217, 226, 227, 230, 234, 237, 241, 246, 250, 254, 265, 266, 271, 273, 274, 275, 277, 278, 280, 284, 285, 288, 294, 299, 302, 309, 313, 316, 317, 318, 321, 324, 325, 326, 328, 331, 332, 340, 345, 348, 352, 354, 357, 380, 384, 392, 415, 417, 418, 422, 448, 480, 535, 536, 537, 538, 539, 541, 542, 543, 546, 548, 549, 550, 569, 600, 649, 650, 655, 656, 663, 664, 665, 666, 684, 685, 686, 687, 691, 692, 693, 694, 696, 698, 699, 701, 703, 713, 767, 803, 809, 817, 826, 851, 859, 880, 881, 888, 994, 1000, 1001, 1004, 1006, 1007, 1008, 1011, 1012, 1014, 1019, 1020, 1042], "_0": [212, 688, 1000, 1004, 1019], "_1": [323, 345, 412, 415, 418, 534, 540, 541, 543, 548, 549, 550, 649, 650, 655, 656, 657, 658, 659, 663, 664, 665, 666, 684, 685, 686, 687, 769, 1000, 1002, 1004, 1019], "_11": 655, "_2": [112, 175, 345, 415, 418, 534, 540, 548, 549, 649, 655, 1000, 1008, 1018, 1019], "_21": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687], "__": [105, 272, 392, 411, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1043, 1044], "______________________________________________________________________": 331, "________________________________________________________________________________": [50, 87, 352], "__________________________________________________________________________________": 91, "________________________________________________________ward_tre": 87, "_____________________________________________________f_regress": 87, "__add__": [420, 627], "__array__": [1038, 1045], "__array_function__": [1024, 1045], "__c": 380, "__call__": [178, 341, 392, 418, 420, 468, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 941, 969, 1042], "__class__": [181, 213, 215, 247, 250, 273, 313, 352, 353, 354, 385], "__class_weight": 380, "__dataframe__": [564, 565], "__doc__": [78, 107, 175, 259, 392], "__file__": [47, 49, 1048], "__getattr__": 380, "__getitem__": 1053, "__getstate__": [1042, 1050], "__init__": [47, 89, 132, 178, 247, 291, 341, 378, 380, 382, 383, 384, 385, 392, 418, 424, 427, 430, 433, 434, 621, 964, 1036, 1041, 1043, 1048, 1049, 1050, 1051], "__init_subclass__": 380, "__len__": 1044, "__main__": [334, 390], "__metadata_request__fit": 247, "__mul__": 624, "__mul___": 420, "__name__": [46, 62, 94, 181, 213, 215, 247, 250, 254, 266, 273, 313, 334, 352, 353, 354, 385, 390, 880], "__pow__": [420, 619], "__repr__": [380, 1024, 1044], "__sklearn_clone__": [380, 435, 1051], "__sklearn_is_fitted__": [89, 131, 183, 380, 424, 427, 987, 1025, 1048, 1049], "__sklearn_tags__": [380, 940, 956], "__version__": [147, 189, 320, 382], "_agglom": 87, "_array_api": 406, "_bag": 943, "_base": [257, 380], "_basehmm": 1035, "_bay": 943, "_birch": 1045, "_breast_cancer_dataset": 168, "_build": 378, "_c_step": 1042, "_cfnode": 444, "_check_bounds_param": 1047, "_check_i": 992, "_check_param_grid": 1041, "_check_sample_weight": 1048, "_check_stop_list": 594, "_check_target": 1042, "_check_x": 1045, "_class": 1004, "_class_cov": 1043, "_class_mean": 1043, "_classif": 309, "_classifier_ha": 89, "_column_transform": [103, 154], "_compon": [244, 539], "_coo": [588, 589], "_count_nonzero_coeffici": 46, "_criterion": 1043, "_csr": 880, "_cython_bla": 379, "_devianc": 1004, "_diabetes_dataset": 168, "_distn_infrastructur": 283, "_doc_link_modul": 380, "_doc_link_templ": 380, "_doc_link_url_param_gener": 380, "_dotbla": 384, "_encod": 1043, "_error": 1004, "_estim": 992, "_estimator_html_repr": 947, "_estimator_typ": [380, 392, 427, 428, 429, 432, 433, 1040], "_estimator_with_converted_arrai": 406, "_f": [178, 1000], "_featur": [415, 541, 543, 550], "_fit_and_scor": 1043, "_fit_stag": [562, 563], "_fro": [534, 540, 548, 549, 649, 650, 655, 663, 664, 665, 684], "_g": 178, "_gb": 1045, "_generate_center_coordin": 53, "_get_support_mask": 604, "_get_tag": 1046, "_get_warnings_filters_info_list": 366, "_gpr": 179, "_h": [541, 543, 550], "_hist_gradient_boost": 382, "_i": [408, 417, 995, 1000, 1004, 1008, 1019], "_idx": 392, "_init": 194, "_init_t": 1018, "_initialize_nmf": 384, "_is_fit": 132, "_iter": 382, "_j": [408, 995], "_k": [412, 998, 1000], "_l": 1004, "_learntselectormixin": 1040, "_level": [420, 628], "_logist": 378, "_loss": [392, 1004, 1053], "_m": 1020, "_mean": 317, "_mean_frequency_by_risk_group": 213, "_method": 963, "_my": 378, "_n": [418, 1004], "_n_cluster": 378, "_n_compon": 550, "_n_features_out": 426, "_name_estim": 1045, "_neg": 384, "_newton_cg": 1046, "_nls_subproblem": 384, "_nmf": 384, "_not_in_sphinx": [47, 49], "_num_thread": 366, "_obj": 963, "_openmp_help": 379, "_pairwis": [1045, 1047], "_plain_sgd": 1050, "_plot": [241, 330], "_po": 384, "_posterior_mod": 613, "_preprocess_data": 690, "_pvalu": 1035, "_rand": 361, "_ratio": [541, 543, 550], "_request": [247, 401, 1053], "_required_paramet": 430, "_reset": 47, "_run_search": 1043, "_safe_index": [2, 1048, 1052, 1053], "_safe_split": 924, "_safe_tag": 1046, "_sag": 1044, "_sampl": [244, 415, 541, 543, 550], "_samples_gener": 259, "_score": [392, 803, 817, 830, 1004, 1035, 1048], "_search": 1041, "_serial": 247, "_sgd_fast": 1050, "_skip_test": 926, "_spars": 384, "_sparse_fit": 1045, "_std": 317, "_t": 1018, "_test": [221, 313, 366, 380, 1048], "_test_scor": [271, 474, 597, 1048], "_transform_select": 1041, "_tree": [915, 916, 917, 918, 1036, 1038], "_typedef": 379, "_univariate_select": 87, "_valu": [420, 616], "_w": [541, 543, 550], "_weight": [53, 231], "_weight_boost": 943, "_weighted_percentil": 1048, "_x_is_even": 964, "_xfail_check": 926, "a16": [1045, 1046], "a65628": [79, 95], "a674e682c281": 383, "a_": [121, 407, 410, 541, 543, 550, 1000], "a_column": 722, "a_i": 410, "a_mask": 280, "a_n": 407, "a_row": 722, "a_tru": 280, "aaa": 178, "aaaaff": [296, 299], "aaai": [410, 421, 446, 842, 1006], "aact": 178, "aaffaa": 299, "aagaard": 1039, "aakanksha": 1043, "aapl": 51, "aarch64": 386, "aaron": [497, 1000, 1038, 1039, 1040, 1045], "aarshai": [1042, 1043], "aashil": 1042, "ab": [51, 55, 75, 107, 124, 130, 136, 143, 154, 164, 168, 189, 204, 224, 226, 229, 231, 236, 271, 311, 328, 339, 350, 410, 541, 543, 550, 630, 847, 848, 882, 1004], "ab_mask": 280, "abadi": [1041, 1042], "abandon": 378, "abati": [1050, 1052, 1053], "abbi": [1045, 1046], "abbrevi": 702, "abdela": 1044, "abdulaziz": 1053, "abdulelah": 1048, "abdur": 1045, "abenbihi": 1045, "abhijeet": 1037, "abhinav": [1045, 1048], "abhishek": [1038, 1039, 1045, 1049, 1051, 1052], "abhyudai": 1042, "abid": 378, "abil": [48, 52, 94, 111, 146, 169, 170, 171, 175, 177, 179, 181, 183, 185, 186, 188, 213, 217, 231, 240, 352, 367, 396, 417, 418, 420, 614, 625, 628, 785, 786, 787, 790, 791, 1001, 1004, 1007, 1010, 1020, 1024, 1025, 1035, 1037, 1042, 1044, 1048, 1049], "abirami": 410, "abl": [43, 44, 48, 61, 81, 88, 94, 113, 116, 124, 125, 149, 151, 176, 186, 189, 198, 202, 213, 229, 231, 237, 277, 282, 284, 327, 328, 341, 361, 365, 366, 367, 372, 376, 378, 380, 382, 383, 386, 390, 404, 410, 412, 414, 418, 487, 506, 537, 832, 879, 993, 994, 1000, 1003, 1004, 1005, 1010, 1014, 1017, 1020, 1021, 1024, 1041, 1042, 1046, 1053], "ablin": 1050, "abnorm": [227, 240, 297, 340, 373, 495, 566, 853, 1010, 1043], "abo7atm": 1047, "abort": 695, "about": [3, 46, 50, 65, 79, 86, 90, 95, 102, 116, 142, 165, 179, 183, 185, 189, 217, 230, 240, 247, 265, 268, 269, 271, 273, 278, 290, 296, 316, 320, 322, 323, 324, 325, 326, 331, 352, 354, 360, 361, 365, 366, 371, 373, 377, 378, 380, 382, 383, 384, 386, 391, 392, 393, 404, 409, 414, 415, 418, 420, 440, 495, 497, 498, 499, 500, 503, 504, 505, 507, 508, 513, 518, 564, 565, 596, 597, 610, 611, 617, 643, 679, 681, 746, 803, 809, 817, 826, 836, 886, 934, 994, 1000, 1001, 1003, 1005, 1007, 1010, 1011, 1014, 1015, 1017, 1019, 1020, 1023, 1027, 1028, 1040, 1041, 1051, 1053], "abov": [43, 62, 63, 64, 72, 79, 99, 102, 136, 139, 140, 146, 149, 157, 167, 168, 186, 187, 199, 213, 215, 219, 224, 244, 247, 248, 265, 271, 277, 288, 296, 313, 316, 317, 321, 323, 327, 345, 353, 354, 360, 361, 365, 366, 367, 372, 373, 375, 376, 377, 378, 380, 382, 384, 390, 392, 393, 408, 410, 411, 412, 414, 415, 416, 417, 418, 420, 443, 447, 466, 469, 491, 498, 499, 500, 526, 593, 637, 707, 758, 803, 807, 815, 817, 828, 870, 871, 884, 890, 896, 904, 966, 993, 994, 996, 998, 1000, 1001, 1004, 1007, 1009, 1011, 1014, 1018, 1019, 1020, 1024, 1041, 1053], "abraham": [1035, 1036, 1041, 1045], "abrahamowicz": 1014, "absenc": [240, 274, 392, 715, 870, 1003, 1004], "absent": [392, 408, 418, 732, 757, 828], "absgrad": 1046, "absher": 1037, "absolut": [2, 43, 52, 107, 124, 143, 168, 186, 213, 215, 219, 231, 328, 360, 380, 404, 410, 412, 414, 415, 417, 418, 419, 420, 421, 446, 452, 458, 459, 534, 540, 545, 548, 549, 551, 552, 553, 561, 563, 564, 565, 568, 591, 593, 594, 596, 600, 605, 622, 630, 635, 649, 652, 653, 655, 657, 659, 674, 675, 677, 679, 681, 685, 686, 707, 720, 724, 739, 740, 748, 749, 751, 756, 758, 760, 798, 805, 809, 820, 823, 831, 833, 845, 847, 848, 852, 871, 876, 879, 892, 916, 918, 989, 1000, 1001, 1014, 1018, 1020, 1036, 1041, 1046, 1047, 1048, 1049, 1052], "absolute_error": [52, 417, 561, 563, 565, 568, 674, 916, 918, 1048], "absolute_loss": 1048, "absolutelynowarranti": 1043, "absp": 863, "abstain": 537, "abstract": [392, 415, 420, 621, 772, 1035], "abstractmethod": 1045, "absurd": 1011, "abund": 373, "ac": [533, 667, 688, 689, 1000, 1017], "acad": [692, 696, 1001], "academ": [414, 1028], "academi": [111, 854], "acategorypredict": 398, "acc": 145, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 300, "acceler": [245, 325, 365, 390, 406, 410, 470, 695, 905, 1001, 1023, 1028, 1044, 1048, 1050, 1052], "accent": [349, 591, 592, 594, 1045], "accept": [168, 170, 247, 265, 268, 320, 328, 341, 352, 354, 361, 365, 366, 372, 378, 380, 387, 390, 391, 392, 393, 401, 406, 410, 418, 439, 443, 446, 447, 450, 463, 466, 469, 511, 512, 558, 559, 564, 565, 572, 573, 584, 585, 596, 597, 600, 631, 638, 642, 646, 649, 650, 655, 656, 682, 730, 745, 781, 800, 801, 802, 806, 807, 825, 849, 850, 857, 858, 867, 871, 931, 933, 934, 937, 992, 1000, 1002, 1004, 1007, 1012, 1014, 1019, 1023, 1024, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "accept_large_spars": [933, 934, 1043], "accept_spars": [871, 933, 934, 1042, 1052], "access": [43, 82, 109, 144, 250, 257, 262, 327, 328, 352, 360, 365, 366, 378, 379, 380, 386, 390, 392, 393, 406, 410, 412, 413, 417, 418, 420, 452, 459, 466, 469, 539, 570, 571, 572, 573, 620, 865, 866, 867, 922, 993, 1000, 1003, 1004, 1010, 1011, 1012, 1018, 1019, 1024, 1028, 1035, 1037, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051], "accid": [213, 231], "accident": [1035, 1039, 1044], "accommod": [175, 1043], "accompani": [271, 1043], "accomplish": [247, 380, 408, 549, 1001, 1005, 1007, 1028, 1052], "accord": [2, 55, 61, 63, 72, 82, 109, 140, 145, 168, 171, 197, 213, 231, 244, 320, 345, 353, 361, 378, 380, 390, 391, 392, 393, 404, 407, 408, 410, 412, 414, 415, 417, 418, 420, 439, 452, 454, 458, 462, 464, 467, 471, 507, 519, 520, 521, 528, 533, 535, 538, 539, 541, 543, 553, 556, 557, 564, 565, 566, 569, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 644, 645, 647, 648, 652, 661, 662, 673, 683, 694, 698, 738, 782, 783, 803, 804, 805, 806, 807, 810, 811, 812, 817, 828, 842, 843, 844, 845, 846, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 870, 877, 885, 897, 899, 900, 907, 908, 909, 910, 912, 913, 998, 1000, 1004, 1006, 1007, 1014, 1017, 1018, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "accordingli": [149, 187, 250, 345, 378, 382, 383, 1042, 1043, 1050], "account": [52, 53, 88, 122, 128, 134, 149, 175, 181, 186, 231, 247, 265, 271, 294, 300, 348, 350, 353, 365, 374, 378, 392, 393, 401, 410, 413, 414, 415, 417, 418, 465, 564, 565, 570, 571, 630, 631, 633, 635, 636, 652, 676, 682, 707, 710, 731, 732, 733, 741, 746, 759, 786, 787, 790, 791, 804, 808, 821, 881, 993, 996, 998, 1002, 1004, 1005, 1006, 1007, 1014, 1018, 1020, 1040, 1042, 1043, 1044, 1047, 1048, 1050, 1052, 1053], "acctactagaagtt": 390, "acctcctagaag": 390, "accumul": [47, 83, 141, 202, 382, 384, 410, 418, 1004, 1036, 1043], "accur": [43, 48, 52, 59, 62, 63, 111, 120, 148, 170, 177, 186, 187, 217, 228, 231, 265, 271, 278, 282, 288, 324, 352, 353, 361, 377, 392, 408, 410, 412, 415, 417, 418, 419, 439, 445, 449, 453, 455, 461, 534, 541, 543, 545, 546, 548, 549, 550, 610, 611, 637, 806, 807, 847, 848, 950, 951, 996, 1001, 1004, 1020, 1049], "accuraci": [2, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 102, 103, 104, 105, 134, 140, 141, 144, 145, 152, 164, 165, 167, 171, 189, 191, 213, 217, 221, 228, 229, 258, 269, 270, 271, 272, 273, 275, 277, 285, 288, 293, 299, 300, 301, 309, 313, 316, 326, 330, 331, 333, 341, 344, 345, 348, 361, 365, 391, 392, 409, 410, 414, 417, 418, 419, 427, 439, 451, 471, 473, 474, 480, 535, 537, 544, 552, 553, 554, 556, 558, 560, 561, 562, 564, 567, 568, 570, 572, 613, 637, 661, 662, 669, 671, 674, 677, 678, 679, 695, 700, 706, 711, 714, 716, 721, 735, 736, 737, 741, 746, 757, 766, 790, 797, 799, 802, 825, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 854, 856, 857, 864, 902, 903, 907, 909, 912, 915, 917, 923, 950, 951, 993, 998, 999, 1000, 1001, 1005, 1007, 1008, 1012, 1016, 1018, 1020, 1043, 1044, 1053], "accuracy_histori": 47, "accuracy_scor": [2, 66, 134, 171, 275, 316, 333, 352, 361, 391, 401, 406, 427, 560, 567, 711, 714, 732, 733, 737, 741, 786, 787, 790, 797, 799, 944, 993, 1004, 1036, 1037, 1038, 1047, 1052, 1053], "acf": 143, "achar": [1042, 1043, 1044, 1045], "achiev": [43, 51, 55, 57, 64, 67, 123, 134, 142, 144, 149, 152, 178, 191, 213, 221, 268, 271, 278, 316, 328, 333, 341, 344, 345, 348, 352, 361, 365, 367, 372, 373, 375, 380, 384, 390, 392, 398, 407, 408, 409, 410, 414, 415, 417, 418, 561, 568, 643, 652, 679, 681, 710, 732, 733, 741, 743, 766, 786, 787, 790, 806, 807, 843, 887, 993, 994, 996, 1000, 1004, 1014, 1017, 1019, 1048], "achin": 1028, "achliopta": [244, 900, 901, 1016], "acid": [316, 375], "acknowledg": [377, 612, 1052], "acl": [904, 1017, 1018], "acm": [372, 373, 410, 421, 446, 452, 459, 462, 514, 566, 679, 729, 759, 853, 1004, 1007, 1010, 1016], "acoust": 1004, "acq": 47, "acquaint": 378, "acquir": [53, 273, 1047], "acquisit": [407, 722], "acronym": 382, "across": [0, 2, 15, 43, 52, 88, 94, 100, 115, 126, 140, 159, 186, 202, 207, 234, 266, 268, 271, 284, 285, 291, 311, 316, 345, 379, 380, 387, 392, 404, 408, 410, 414, 417, 418, 419, 422, 439, 442, 452, 454, 456, 459, 462, 464, 471, 474, 476, 490, 493, 495, 498, 500, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 570, 571, 591, 594, 597, 605, 610, 611, 613, 614, 635, 636, 637, 642, 643, 644, 645, 649, 650, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 679, 681, 682, 688, 689, 692, 693, 694, 695, 696, 697, 698, 707, 708, 720, 734, 760, 791, 796, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 852, 856, 863, 864, 865, 872, 876, 877, 884, 885, 887, 888, 896, 899, 900, 902, 903, 907, 908, 909, 912, 915, 916, 950, 951, 974, 977, 993, 1000, 1002, 1004, 1014, 1018, 1020, 1024, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1053], "act": [341, 352, 378, 391, 416, 417, 716, 732, 733, 741, 786, 787, 790, 882, 886, 1001, 1004, 1007, 1019, 1043], "action": [323, 352, 377, 381, 382, 396, 409, 1014, 1045], "activ": [52, 68, 183, 221, 256, 262, 272, 329, 330, 354, 372, 373, 376, 378, 379, 384, 386, 390, 392, 393, 396, 397, 401, 411, 499, 505, 529, 635, 638, 640, 653, 654, 656, 657, 658, 666, 667, 668, 685, 686, 687, 688, 689, 716, 721, 800, 863, 864, 865, 903, 969, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1017, 1025, 1027, 1046], "active_": [653, 654, 657, 658], "active_features_": 1043, "actual": [43, 52, 64, 80, 93, 107, 116, 140, 149, 168, 186, 191, 202, 213, 217, 221, 258, 267, 274, 278, 354, 360, 361, 365, 367, 375, 378, 380, 383, 384, 390, 391, 392, 408, 410, 415, 417, 418, 419, 435, 512, 518, 519, 530, 538, 541, 543, 550, 565, 566, 647, 648, 651, 661, 662, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 683, 690, 694, 698, 704, 707, 712, 718, 724, 725, 726, 727, 788, 800, 806, 807, 819, 822, 823, 853, 884, 907, 913, 942, 943, 944, 978, 996, 1003, 1004, 1007, 1011, 1012, 1020, 1027, 1042, 1043, 1049, 1050, 1051], "actual_vs_predict": [43, 107, 154, 186, 267, 325, 704], "actuari": 408, "ad": [43, 53, 58, 107, 127, 129, 134, 140, 149, 164, 170, 176, 177, 193, 198, 215, 217, 237, 246, 247, 271, 272, 273, 311, 321, 322, 323, 324, 325, 326, 327, 328, 334, 345, 353, 377, 378, 380, 382, 390, 392, 393, 415, 417, 418, 419, 420, 421, 422, 428, 432, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 513, 515, 517, 525, 526, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 707, 711, 714, 716, 717, 719, 721, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 737, 742, 743, 744, 745, 746, 749, 756, 757, 760, 764, 769, 770, 772, 778, 780, 781, 785, 786, 787, 788, 790, 792, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 816, 817, 821, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 896, 897, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 931, 933, 934, 941, 945, 946, 950, 951, 959, 960, 961, 962, 963, 966, 969, 973, 978, 984, 990, 992, 993, 997, 999, 1000, 1001, 1005, 1007, 1008, 1010, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adaboost": [2, 67, 133, 137, 142, 150, 153, 154, 157, 173, 183, 345, 357, 358, 359, 522, 554, 556, 557, 562, 634, 706, 833, 915, 916, 1025, 1026, 1030, 1037], "adaboost_clf": 134, "adaboostclassifi": [2, 67, 136, 142, 401, 417, 557, 562, 564, 943, 1037, 1038, 1041, 1042, 1044, 1045, 1048, 1050, 1051, 1052], "adaboostregressor": [2, 135, 401, 417, 556, 565, 943, 1037, 1038, 1041, 1044, 1045, 1048, 1050, 1051], "adam": [0, 307, 399, 864, 865, 1008, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adamgonzo": 1049, "adamson": 1047, "adanhawth": [1043, 1044], "adapt": [86, 88, 134, 145, 146, 256, 257, 265, 345, 366, 377, 378, 387, 410, 417, 420, 518, 519, 520, 521, 679, 680, 681, 864, 865, 1000, 1006, 1008, 1014, 1018, 1023, 1024, 1043, 1044, 1051, 1052], "adarsh": [1052, 1053], "add": [44, 51, 55, 58, 62, 63, 64, 68, 69, 75, 79, 87, 107, 111, 112, 116, 121, 126, 142, 145, 164, 166, 168, 170, 175, 176, 177, 181, 182, 196, 201, 202, 208, 214, 216, 217, 228, 236, 240, 244, 246, 247, 278, 280, 281, 291, 303, 313, 315, 320, 322, 323, 344, 345, 347, 348, 353, 365, 376, 377, 378, 379, 380, 382, 384, 386, 392, 396, 406, 408, 414, 417, 418, 419, 518, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 605, 630, 631, 633, 635, 661, 662, 697, 700, 824, 847, 848, 904, 941, 960, 961, 993, 994, 1003, 1010, 1014, 1017, 1018, 1024, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "add_2d_scatt": 233, "add_artist": [70, 126, 234, 256, 257, 258, 261, 262], "add_ax": [187, 237, 282], "add_categori": 250, "add_collect": [51, 236, 243], "add_dummy_featur": 2, "add_ind": [154, 182, 630, 631, 633, 994, 1044, 1047, 1051], "add_missing_valu": 182, "add_nois": 176, "add_self_request": [247, 960], "add_subplot": [46, 62, 64, 77, 97, 100, 126, 187, 210, 228, 235, 237, 330, 331, 385], "add_trac": 140, "adddatapointbatch": 291, "addep": 1046, "addison": [593, 733], "addit": [2, 7, 37, 43, 44, 46, 51, 53, 54, 99, 103, 113, 120, 123, 126, 134, 138, 140, 141, 143, 144, 167, 175, 176, 177, 182, 186, 187, 193, 198, 202, 214, 215, 217, 237, 251, 265, 273, 280, 284, 286, 290, 311, 321, 322, 327, 332, 345, 354, 358, 361, 365, 366, 370, 371, 372, 373, 374, 377, 378, 380, 382, 383, 384, 386, 390, 392, 393, 396, 404, 409, 410, 412, 414, 415, 418, 419, 420, 421, 434, 443, 444, 446, 447, 448, 452, 459, 471, 476, 499, 506, 535, 537, 539, 540, 542, 544, 545, 546, 552, 556, 557, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 622, 631, 633, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 673, 690, 691, 695, 701, 702, 705, 745, 761, 762, 791, 795, 800, 801, 809, 826, 836, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 889, 899, 900, 907, 908, 945, 951, 993, 998, 1000, 1004, 1005, 1007, 1008, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1030, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "addition": [86, 104, 136, 149, 186, 213, 231, 247, 321, 323, 353, 378, 390, 408, 418, 613, 614, 649, 655, 674, 884, 993, 994, 1004, 1012, 1023, 1041, 1052], "additional_nois": 75, "additive_chi2": [623, 641, 768, 777], "additive_chi2_kernel": [2, 406, 641, 762, 768, 996], "additivechi2sampl": [2, 642, 643, 644, 645, 761, 762, 996, 1049, 1051], "address": [43, 217, 247, 352, 373, 378, 409, 410, 418, 449, 660, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1014, 1028, 1043], "adelr": 1043, "adequ": [366, 384, 570, 1048], "adeyemi": 1053, "adher": [2, 365, 380, 392, 945, 946, 1035, 1036], "adien": 1051, "adijohar": 1049, "adil": 1050, "adimension": 186, "adithya": 1040, "aditi": 1053, "aditya": [1041, 1043, 1044, 1045, 1049, 1050], "adityadaflapurkar": 1043, "adjac": [410, 415, 454, 464, 588, 589, 638, 694, 698, 957, 1001, 1007], "adjacency_matrix": 410, "adjust": [2, 43, 48, 71, 73, 82, 91, 109, 134, 146, 163, 183, 217, 240, 245, 253, 272, 288, 320, 334, 348, 353, 385, 410, 411, 415, 417, 418, 527, 556, 557, 560, 562, 564, 565, 567, 661, 662, 669, 671, 677, 678, 679, 707, 708, 711, 717, 718, 758, 760, 789, 798, 842, 843, 845, 846, 877, 899, 900, 907, 908, 909, 912, 915, 917, 939, 1003, 1004, 1008, 1014, 1025, 1032, 1035, 1041, 1051], "adjusted_mutual_info_scor": [2, 72, 73, 82, 91, 410, 708, 718, 736, 758, 760, 789, 1004, 1035, 1043, 1047, 1051], "adjusted_rand_index": 708, "adjusted_rand_scor": [2, 72, 73, 82, 91, 353, 410, 707, 718, 736, 760, 789, 1004, 1048], "administr": [396, 397], "admir": [1050, 1051], "admiss": [244, 366], "adopt": [380, 382, 390, 392, 903, 1004, 1018, 1043, 1050, 1052], "adoublet": [1050, 1051], "adpot": 326, "adrian": [1048, 1049, 1050], "adrien": 1035, "adrin": [0, 393, 399, 404, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adrinjalali": [1038, 1047], "adult": [327, 499, 1014], "advanc": [44, 151, 183, 187, 239, 241, 271, 290, 367, 378, 410, 415, 491, 504, 538, 635, 642, 786, 800, 856, 865, 868, 887, 916, 993, 996, 1004, 1007, 1014, 1025, 1028, 1032, 1037], "advani": 1047, "advantag": [43, 44, 74, 88, 90, 120, 125, 147, 213, 214, 240, 257, 272, 290, 324, 328, 361, 392, 408, 414, 415, 418, 420, 443, 447, 462, 537, 592, 652, 677, 678, 766, 835, 836, 837, 867, 868, 907, 908, 909, 910, 911, 912, 913, 993, 996, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1012, 1014, 1018, 1019, 1020, 1038], "advic": [386, 420, 625, 626], "advik": [1052, 1053], "advis": [52, 214, 247, 361, 378, 410, 418, 439, 649, 655, 657, 663, 665, 675, 690, 996, 1000, 1006, 1008, 1019, 1049], "advoc": 1005, "aeberhard": 375, "aesthet": [311, 1020, 1040], "af": 73, "affan": 1041, "affanv14": 1042, "affect": [46, 62, 111, 149, 177, 185, 186, 217, 237, 250, 251, 274, 281, 316, 326, 361, 365, 366, 367, 374, 392, 395, 408, 410, 413, 414, 416, 418, 421, 423, 446, 452, 459, 475, 477, 481, 552, 553, 572, 702, 715, 791, 803, 806, 807, 808, 817, 821, 822, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 887, 888, 898, 912, 1003, 1007, 1019, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "affili": 373, "affin": [2, 27, 71, 72, 79, 82, 88, 96, 183, 311, 332, 370, 380, 392, 415, 442, 443, 454, 456, 464, 515, 538, 694, 698, 707, 708, 720, 740, 796, 798, 903, 924, 998, 1001, 1004, 1025, 1029, 1030, 1035, 1036, 1039, 1045, 1046, 1048, 1050], "affinity_matrix": [694, 698], "affinity_matrix_": [442, 454, 694], "affinity_propag": [2, 51, 79], "affinitypropag": [2, 73, 79, 324, 410, 1035, 1038, 1039, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "affirm": 43, "afnlp": 1018, "afor": [899, 900], "aforement": [366, 1005], "afraid": 396, "africa": 1014, "afroj": 1052, "aft": [317, 1038], "aftab": 1044, "after": [43, 55, 58, 59, 63, 80, 86, 88, 102, 103, 107, 112, 122, 134, 144, 149, 152, 154, 157, 164, 168, 175, 177, 179, 181, 186, 191, 206, 213, 250, 251, 254, 259, 271, 280, 290, 291, 299, 301, 311, 312, 315, 316, 352, 353, 367, 373, 375, 377, 378, 380, 382, 384, 385, 386, 390, 392, 404, 406, 407, 408, 410, 411, 414, 415, 418, 419, 422, 444, 449, 452, 453, 454, 455, 458, 464, 518, 535, 539, 553, 556, 557, 562, 563, 564, 565, 600, 630, 633, 661, 662, 669, 670, 671, 676, 678, 679, 680, 681, 695, 715, 729, 759, 797, 800, 801, 806, 807, 856, 863, 867, 880, 886, 907, 912, 913, 928, 993, 994, 998, 1000, 1004, 1008, 1009, 1014, 1016, 1018, 1019, 1020, 1024, 1035, 1038, 1042, 1043, 1046, 1047, 1050, 1053], "afterward": [58, 382, 538, 544, 831], "ag": [103, 168, 186, 188, 200, 202, 213, 231, 251, 252, 254, 265, 311, 323, 324, 325, 327, 373, 375, 499, 1028], "again": [43, 58, 100, 104, 146, 174, 176, 178, 186, 237, 272, 352, 361, 382, 387, 392, 393, 410, 411, 412, 417, 418, 474, 570, 571, 637, 650, 654, 656, 658, 664, 666, 668, 695, 993, 1000, 1004, 1018, 1032, 1035, 1043, 1052], "against": [64, 72, 116, 129, 137, 147, 163, 191, 204, 205, 222, 230, 247, 280, 317, 320, 341, 373, 378, 393, 404, 408, 410, 414, 418, 440, 512, 545, 551, 554, 679, 681, 758, 760, 791, 805, 810, 812, 832, 836, 969, 996, 1000, 1004, 1005, 1007, 1019, 1022], "agamemnon": [1042, 1043, 1044, 1045, 1047, 1048], "agarw": [1042, 1043, 1045], "agath": 1049, "agc": 178, "agct": 178, "agent": 1028, "agg": 175, "aggfunc": 282, "agglo": [84, 447], "agglom": [2, 51, 71, 72, 77, 79, 81, 89, 93, 95, 100, 183, 234, 236, 330, 331, 410, 443, 447, 505, 694, 781, 860, 1025, 1038], "agglomer": [2, 44, 68, 71, 83, 164, 166, 183, 196, 212, 249, 295, 330, 331, 370, 410, 418, 447, 505, 603, 609, 648, 803, 808, 867, 1025, 1030], "agglomerativeclust": [2, 74, 75, 76, 79, 81, 85, 89, 95, 100, 392, 410, 442, 444, 447, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052], "aggreg": [93, 138, 231, 274, 280, 285, 324, 326, 410, 417, 419, 537, 558, 559, 597, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 1005, 1007, 1014, 1051], "aggress": [2, 47, 220, 669, 670, 806, 807, 1026, 1030, 1036], "aggressive_elimin": [806, 807, 993], "agnost": [1003, 1012, 1053], "ago": [51, 382, 1024], "agraw": [1038, 1043, 1049, 1050], "agre": [25, 163, 386, 393, 410, 789], "agreement": [0, 2, 410, 707, 719, 758, 760, 798, 1004], "agricultur": 1000, "aguiar": 419, "agundez": 1043, "ahead": 891, "ahmadi": 1046, "ahmadjubair33": 1049, "ahmedbgh": [1050, 1051], "ahn": 1047, "ahuja": [1042, 1049, 1050], "ai": 414, "ai8rahim": 1038, "aic": [2, 159, 183, 192, 199, 200, 201, 207, 221, 261, 504, 654, 656, 657, 658, 659, 801, 868, 887, 993, 1025, 1035, 1042, 1048, 1049], "aic_criterion": 200, "aid": [268, 410, 795, 796, 1001, 1028, 1035, 1047], "aidan": 1043, "aidar": 1049, "aig": 51, "aiko": 1050, "aim": [52, 58, 112, 149, 182, 217, 265, 299, 332, 345, 367, 373, 376, 378, 392, 404, 410, 412, 418, 450, 1000, 1004, 1007, 1014, 1019, 1023, 1049], "air": [175, 767], "airport": 767, "airspe": 378, "aisha": 1053, "aishgrt1": 1043, "aishwarya": 1043, "aishwaryark": 1042, "aistat": 1017, "aivision2020": 1042, "aj": [497, 1049], "ak": [408, 1049, 1050], "aka": [2, 45, 306, 352, 390, 418, 454, 539, 541, 543, 547, 550, 584, 585, 618, 625, 654, 655, 657, 658, 659, 661, 662, 665, 669, 670, 671, 673, 679, 680, 681, 744, 874, 878, 880, 1000, 1008, 1018, 1037, 1049], "akai": 1048, "akaik": [200, 202, 261, 659, 801, 993, 1000], "akash": [1043, 1053], "aki": [1049, 1050, 1051], "akihiro": 1053, "akin": [43, 214, 392], "akinkunl": 1045, "akitti": 1040, "akshai": [1039, 1042, 1047], "akshay0724": 1042, "akshayah3": 1039, "akshita": 1050, "al": [0, 2, 50, 109, 110, 134, 148, 200, 304, 373, 375, 407, 410, 412, 415, 417, 418, 419, 453, 501, 522, 523, 531, 538, 544, 547, 566, 685, 686, 722, 723, 842, 844, 864, 865, 900, 950, 951, 1000, 1001, 1004, 1010, 1014, 1016, 1019, 1020, 1043, 1048, 1051, 1052], "ala": [1050, 1051], "aladago": 1045, "alam": [1050, 1051], "alan": [1042, 1043, 1046, 1048, 1049, 1053], "alastuei": 1038, "albeit": 62, "albert": [0, 368, 1042, 1043, 1044, 1047, 1048], "alberto": [1044, 1048, 1049, 1053], "alcalin": 375, "alcohol": [316, 375], "alcorn": 1043, "aldrian": 1039, "aleator": 52, "alec": 1045, "alejandro": [1036, 1041, 1052], "alek": [1048, 1049], "aleksandr": 1042, "aleksandra": 1046, "alemagnani": 1038, "alert": 1042, "alessandro": [1045, 1047, 1050], "alessia": 1048, "alex": [404, 418, 1019, 1035, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "alexand": [0, 400, 410, 415, 538, 873, 1037, 1038, 1039, 1041, 1042, 1043, 1047, 1048, 1049, 1052], "alexandercbooth": 1042, "alexandr": [0, 120, 393, 399, 400, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "alexandracraciun": 1047, "alexandru": 441, "alexanmv": 1049, "alexei": 1040, "alexfield": 1041, "alexgoryainov": 1045, "alexi": [1035, 1038, 1039, 1042, 1052, 1053], "alexl": [1051, 1052], "alexqiao": 1053, "alexryndin": 1043, "alexshack": [1045, 1046, 1047], "alfalfa": 57, "alfano": 1042, "alfaro": [0, 368, 1046, 1047, 1048, 1049, 1050], "alfr": 0, "algebra": [366, 376, 381, 390, 415, 418, 464, 873, 1014], "algesheim": 410, "algo": [78, 129], "algo_param": [79, 95], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 71, 72, 77, 78, 80, 83, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 110, 111, 115, 120, 122, 134, 135, 140, 150, 183, 191, 201, 202, 216, 227, 229, 235, 237, 239, 243, 244, 250, 257, 258, 259, 262, 268, 271, 280, 291, 297, 298, 300, 304, 311, 313, 316, 320, 321, 322, 325, 326, 327, 332, 334, 340, 352, 353, 354, 361, 365, 367, 371, 372, 373, 374, 375, 378, 379, 380, 381, 386, 387, 391, 392, 395, 406, 407, 410, 412, 413, 414, 415, 417, 418, 420, 421, 422, 423, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 476, 477, 480, 484, 485, 486, 490, 506, 514, 515, 516, 517, 518, 525, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 556, 557, 558, 559, 562, 563, 566, 594, 606, 607, 613, 614, 638, 640, 642, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 707, 708, 711, 720, 722, 738, 740, 746, 777, 781, 782, 796, 798, 800, 801, 835, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 863, 868, 872, 874, 887, 891, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 933, 950, 951, 953, 968, 972, 978, 994, 996, 999, 1001, 1002, 1003, 1004, 1006, 1009, 1010, 1014, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "algorithm_nam": 78, "ali": [1040, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "alia": [52, 247, 379, 386, 392, 401, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 613, 614, 620, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 977, 1010, 1024, 1035, 1049], "alias": [80, 81, 247, 376, 378, 381, 401, 600, 1035, 1039, 1049], "aliased_sample_weight": 247, "align": [70, 147, 149, 182, 233, 256, 282, 354, 392, 692, 696, 996, 1007, 1018, 1029, 1030, 1051, 1052], "alihan": 1048, "alik": [415, 1002], "alin": 1048, "alison": 1042, "all": [0, 2, 4, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 64, 70, 73, 74, 75, 77, 78, 85, 86, 87, 88, 93, 97, 107, 113, 120, 122, 123, 132, 139, 140, 142, 146, 149, 156, 157, 168, 175, 176, 178, 183, 185, 186, 187, 189, 193, 198, 199, 205, 206, 207, 213, 214, 215, 216, 217, 222, 224, 228, 230, 231, 233, 234, 240, 246, 247, 250, 251, 254, 257, 259, 261, 265, 269, 272, 273, 274, 275, 277, 278, 279, 281, 283, 284, 288, 291, 294, 296, 308, 311, 312, 316, 320, 321, 322, 323, 325, 326, 327, 328, 330, 332, 333, 334, 338, 341, 345, 346, 348, 349, 352, 353, 354, 357, 360, 361, 365, 366, 367, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 390, 391, 392, 393, 397, 401, 404, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 427, 428, 429, 430, 432, 433, 434, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 506, 511, 512, 518, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 708, 712, 716, 717, 718, 719, 720, 721, 723, 724, 726, 729, 731, 732, 733, 735, 736, 738, 739, 740, 741, 745, 748, 749, 751, 753, 754, 756, 759, 764, 772, 777, 781, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 809, 810, 812, 813, 815, 817, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 929, 931, 933, 934, 935, 939, 942, 943, 944, 945, 957, 960, 966, 978, 987, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "all_class": 47, "all_displai": [2, 387, 1050], "all_estim": [2, 387, 1045, 1046, 1050], "all_funct": [2, 387, 1050], "all_label": 904, "all_model": 146, "all_or_ani": [987, 1045], "all_scor": 736, "all_split": [43, 52], "all_uppercas": 418, "allan": [352, 408, 1047], "allclos": [121, 151, 1016], "allefeld": 1048, "allen": [325, 1038, 1040, 1042, 1045], "allend": [1046, 1048], "allevi": [90, 149, 193, 198, 410, 1006], "allison": 325, "alloc": [2, 42, 45, 62, 94, 183, 283, 322, 374, 378, 379, 410, 418, 445, 449, 461, 490, 539, 541, 543, 587, 591, 594, 649, 655, 663, 665, 806, 807, 809, 826, 831, 834, 993, 1014, 1023, 1025, 1029, 1030, 1039, 1040, 1045, 1046, 1052], "allow": [25, 43, 58, 89, 91, 106, 107, 124, 125, 126, 137, 138, 144, 152, 170, 175, 176, 177, 179, 201, 207, 213, 217, 231, 234, 241, 244, 251, 253, 254, 256, 265, 271, 284, 285, 290, 320, 321, 322, 323, 325, 328, 345, 346, 352, 360, 361, 365, 372, 373, 378, 379, 380, 382, 385, 386, 387, 390, 392, 393, 401, 404, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 439, 445, 446, 448, 449, 451, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 499, 526, 527, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 596, 597, 600, 606, 613, 614, 618, 630, 631, 633, 637, 638, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 693, 695, 702, 745, 765, 768, 777, 781, 784, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 814, 817, 821, 824, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 857, 858, 862, 864, 865, 867, 869, 870, 872, 873, 874, 879, 886, 887, 891, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 931, 933, 934, 945, 946, 967, 993, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "allow_nan": [924, 932, 934, 1051], "allow_nd": [933, 934], "allow_non": 714, "allow_single_clust": [79, 448], "allow_unlabel": [118, 248, 526], "allowed_extens": 506, "allwein": 288, "almeida": [1036, 1037, 1048], "almeidayoel": 1049, "almer": 1042, "almost": [43, 70, 140, 145, 215, 221, 247, 250, 265, 286, 316, 328, 333, 361, 371, 373, 382, 384, 390, 391, 392, 401, 410, 414, 415, 472, 473, 474, 475, 477, 478, 479, 800, 993, 999, 1000, 1003, 1004, 1019, 1043, 1048], "almubarak": [1048, 1049], "alon": [186, 217, 277, 341, 392, 408, 651, 672, 683, 1042, 1044], "along": [2, 51, 53, 89, 92, 99, 116, 141, 146, 149, 175, 201, 213, 245, 247, 275, 320, 353, 354, 361, 373, 378, 382, 386, 387, 392, 396, 401, 404, 407, 415, 417, 418, 419, 422, 536, 553, 590, 614, 615, 633, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 679, 681, 684, 685, 686, 687, 688, 689, 782, 783, 795, 803, 817, 876, 877, 880, 881, 884, 885, 886, 887, 892, 893, 894, 896, 897, 898, 929, 953, 978, 984, 993, 1000, 1007, 1014, 1017, 1028, 1035, 1040, 1041, 1043, 1047, 1048], "alongsid": [378, 384, 392, 396, 419, 828, 829, 830, 831, 832, 834, 1004, 1011, 1023, 1024], "alonso": [1046, 1048], "aloqe": 1053, "alpaydin": 375, "alpha": [2, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 67, 70, 72, 75, 77, 85, 89, 93, 98, 107, 113, 116, 120, 122, 123, 125, 128, 129, 134, 136, 137, 142, 146, 149, 150, 151, 153, 154, 155, 168, 170, 173, 175, 176, 177, 178, 179, 181, 182, 186, 193, 194, 195, 196, 198, 199, 200, 201, 202, 207, 208, 210, 211, 213, 214, 215, 217, 218, 222, 225, 226, 231, 233, 234, 237, 245, 246, 253, 256, 271, 272, 273, 274, 275, 278, 279, 281, 283, 284, 290, 291, 294, 296, 299, 301, 306, 308, 311, 312, 313, 314, 316, 318, 321, 323, 324, 327, 332, 334, 338, 339, 342, 343, 345, 346, 348, 349, 350, 352, 365, 373, 380, 384, 390, 412, 413, 415, 417, 419, 420, 422, 448, 473, 474, 480, 530, 534, 536, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 563, 598, 599, 601, 614, 616, 618, 619, 626, 634, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 690, 726, 751, 842, 843, 844, 846, 864, 865, 903, 915, 916, 917, 918, 993, 1000, 1004, 1006, 1008, 1012, 1017, 1018, 1019, 1020, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1053], "alpha_": [43, 113, 159, 186, 194, 200, 202, 474, 614, 647, 648, 650, 654, 656, 658, 659, 664, 666, 676, 678, 1000, 1020, 1035, 1042], "alpha_1": [647, 648, 1000], "alpha_2": [647, 648, 1000], "alpha_a": 202, "alpha_b": 202, "alpha_bound": [179, 626], "alpha_h": [54, 415, 541, 543, 550, 1048], "alpha_i": [1006, 1019], "alpha_init": [194, 648, 1000, 1045], "alpha_max": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687], "alpha_min": [649, 650, 653, 655, 656, 657, 659, 663, 664, 665, 666, 684, 685, 686, 687], "alpha_per_target": [676, 1047], "alpha_w": [54, 415, 541, 543, 550, 1048], "alphabet": [104, 392, 725, 744], "alphalpha": 57, "alphanumer": [392, 591, 592, 594], "alphas_": [200, 202, 650, 653, 654, 656, 657, 658, 659, 664, 666, 685, 686, 1035, 1038, 1048], "alphas_enet": 201, "alphas_lar": 201, "alphas_lasso": 201, "alphas_positive_enet": 201, "alphas_positive_lar": 201, "alphas_positive_lasso": 201, "alphavantag": 51, "alphonsu": 1045, "alreadi": [2, 43, 45, 49, 88, 91, 125, 126, 134, 149, 154, 168, 186, 241, 248, 250, 253, 265, 272, 278, 291, 323, 326, 378, 379, 383, 390, 392, 408, 409, 412, 414, 416, 417, 422, 439, 494, 502, 526, 536, 570, 571, 637, 649, 652, 667, 668, 669, 670, 671, 677, 679, 680, 681, 688, 689, 771, 781, 842, 862, 870, 876, 877, 879, 884, 904, 907, 908, 936, 962, 993, 996, 1010, 1014, 1015, 1024, 1032, 1036, 1040, 1043, 1047, 1048, 1049, 1050], "alsadi": 1043, "alsaedi": 1048, "alsalhi": [0, 1038, 1039], "alsawadi": 1048, "also": [0, 2, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 68, 80, 86, 90, 91, 93, 97, 102, 103, 109, 111, 115, 116, 120, 127, 129, 134, 137, 140, 143, 144, 145, 146, 147, 149, 152, 154, 164, 165, 166, 168, 170, 172, 175, 182, 183, 186, 187, 188, 189, 191, 194, 195, 197, 202, 205, 206, 209, 213, 214, 215, 217, 218, 222, 230, 231, 233, 243, 245, 247, 250, 251, 262, 265, 269, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 284, 285, 288, 290, 291, 299, 302, 303, 304, 306, 311, 312, 313, 315, 316, 320, 321, 322, 323, 327, 328, 335, 337, 338, 339, 341, 343, 345, 352, 353, 354, 356, 357, 360, 361, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 384, 386, 387, 390, 391, 392, 393, 396, 398, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 439, 440, 441, 443, 444, 447, 448, 449, 450, 452, 454, 456, 464, 465, 467, 469, 484, 486, 495, 499, 501, 506, 511, 535, 536, 538, 539, 544, 549, 552, 554, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 625, 635, 636, 638, 646, 647, 648, 649, 650, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 675, 679, 681, 684, 687, 690, 694, 697, 698, 702, 713, 716, 719, 726, 732, 733, 741, 746, 766, 782, 783, 786, 787, 790, 800, 801, 803, 805, 806, 807, 817, 820, 823, 829, 830, 831, 832, 833, 834, 836, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 863, 864, 865, 867, 869, 870, 875, 876, 880, 884, 887, 892, 896, 909, 912, 915, 916, 917, 918, 926, 933, 951, 953, 960, 967, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "alt": [57, 272, 334, 352, 353, 354, 373, 386, 490], "altai": 1045, "alter": [62, 182, 380, 392, 732, 733, 741, 786, 787, 790, 1040, 1044, 1047], "altern": [43, 63, 103, 116, 141, 147, 149, 154, 188, 198, 213, 231, 241, 259, 262, 265, 280, 320, 345, 352, 353, 354, 361, 373, 376, 378, 382, 384, 390, 392, 393, 396, 404, 405, 407, 408, 410, 411, 412, 414, 415, 417, 418, 420, 443, 444, 447, 448, 449, 454, 460, 465, 502, 541, 543, 544, 550, 556, 557, 560, 561, 562, 563, 567, 568, 569, 585, 591, 592, 594, 620, 623, 646, 695, 709, 711, 774, 777, 781, 784, 805, 836, 871, 877, 880, 893, 900, 902, 915, 916, 917, 918, 970, 998, 1000, 1001, 1003, 1004, 1007, 1008, 1012, 1014, 1016, 1017, 1019, 1020, 1024, 1030, 1040, 1042, 1048, 1049, 1053], "alternate_sign": [47, 418, 585, 592, 1042], "although": [43, 48, 62, 141, 154, 185, 210, 231, 240, 258, 290, 345, 361, 367, 380, 382, 386, 392, 410, 411, 415, 418, 499, 878, 1003, 1005, 1006, 1007, 1010, 1020, 1035, 1043, 1050], "altman": [631, 994], "altogeth": [143, 384, 1043], "alva": 1045, "alvaro": [1041, 1043], "alvin": 1043, "alwai": [140, 143, 146, 186, 193, 213, 231, 238, 244, 265, 274, 277, 281, 318, 338, 345, 348, 353, 361, 365, 366, 372, 376, 378, 379, 380, 384, 386, 391, 392, 396, 404, 408, 410, 411, 414, 417, 418, 419, 420, 427, 433, 445, 451, 466, 467, 469, 471, 484, 485, 486, 490, 499, 511, 512, 547, 552, 554, 555, 557, 559, 561, 562, 563, 564, 565, 567, 568, 571, 573, 584, 591, 592, 594, 597, 614, 630, 631, 633, 635, 636, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 673, 674, 675, 676, 679, 681, 682, 698, 708, 712, 718, 724, 725, 726, 727, 735, 737, 738, 742, 785, 788, 789, 800, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 840, 841, 850, 851, 858, 859, 865, 872, 880, 885, 887, 890, 892, 893, 894, 895, 896, 897, 898, 900, 908, 909, 910, 912, 913, 915, 916, 918, 952, 962, 963, 993, 994, 996, 998, 1000, 1003, 1004, 1007, 1010, 1012, 1016, 1017, 1019, 1020, 1028, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "always_accept_polici": 265, "always_reject_polici": 265, "alyssa": [1038, 1042], "alyssaq": 1041, "am": [102, 107, 111, 154, 187, 352, 383, 412, 476, 496, 1042], "amai": 1051, "aman": [1041, 1042, 1043, 1049, 1050], "amanda": [1043, 1046, 1047, 1048, 1049], "amar": [1049, 1050, 1051, 1053], "amax": 109, "amazon": 51, "amber": 392, "ambient": 237, "ambigu": [272, 383, 418, 575, 715, 951, 1007, 1044, 1046, 1048], "ambival": 93, "ambrosio": 1042, "ambroz": [1045, 1046], "amelia": 994, "amen": [384, 390, 420, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 993], "america": [50, 51, 111, 304, 373, 854, 1014], "american": [50, 51, 102, 112, 373, 410, 412, 416, 417, 418, 471, 476, 734, 887], "amerr": 1053, "ames_h": 250, "amg": [80, 99, 410, 454, 464, 694, 698, 1045, 1049, 1050], "amherst": 373, "ami": [72, 82, 91, 410, 707], "amicel": [1035, 1038], "amin": 109, "aminaka": 1039, "amit": [1035, 1049, 1050], "amlan": 1041, "amo": 1038, "amol": 1048, "among": [2, 64, 126, 178, 187, 189, 191, 213, 261, 278, 290, 360, 367, 373, 380, 392, 393, 408, 413, 449, 451, 515, 522, 797, 832, 850, 855, 857, 909, 912, 915, 916, 917, 918, 993, 996, 1004, 1005, 1011, 1014, 1019, 1020, 1035, 1041, 1042, 1045, 1052], "amongst": [51, 1020], "amor": [0, 389, 1049, 1050, 1051, 1052, 1053], "amormachin": 1038, "amort": 1007, "amount": [37, 38, 47, 51, 86, 99, 109, 112, 120, 124, 135, 137, 176, 186, 198, 217, 231, 245, 265, 284, 322, 328, 330, 333, 335, 341, 348, 354, 365, 366, 367, 390, 410, 412, 415, 417, 418, 419, 445, 456, 471, 541, 542, 544, 546, 566, 599, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 668, 684, 687, 695, 806, 807, 847, 848, 853, 888, 903, 904, 917, 918, 993, 999, 1000, 1003, 1006, 1008, 1014, 1016, 1017, 1018, 1019, 1048, 1052], "amount_fraud": 265, "amount_iter": 333, "amount_label": 333, "amount_test": 265, "amount_train": 265, "amourav": 1044, "amplitud": [146, 175, 177, 207, 1000], "amplitude_nois": 75, "amput": 1024, "amrcod": 1049, "amsterdam": [404, 875, 1015], "amy12xx": 1047, "amzn": 51, "an": [0, 2, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 157, 164, 168, 170, 171, 172, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 188, 191, 192, 193, 194, 197, 198, 200, 201, 208, 213, 214, 215, 217, 218, 220, 221, 227, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 243, 244, 245, 246, 247, 248, 250, 254, 256, 257, 259, 261, 262, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 284, 290, 291, 294, 297, 298, 299, 302, 304, 311, 316, 317, 318, 321, 322, 323, 325, 326, 327, 328, 331, 335, 337, 338, 340, 341, 343, 344, 345, 352, 353, 354, 356, 359, 360, 361, 365, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 391, 392, 393, 395, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 431, 434, 435, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 578, 579, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 613, 614, 615, 622, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 714, 715, 721, 723, 724, 730, 732, 733, 737, 738, 740, 745, 746, 748, 749, 751, 753, 754, 756, 759, 761, 762, 766, 767, 769, 770, 771, 772, 773, 776, 778, 779, 780, 781, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 930, 931, 933, 934, 936, 937, 940, 941, 945, 946, 947, 949, 950, 951, 953, 955, 956, 959, 960, 961, 962, 963, 964, 966, 967, 968, 973, 974, 977, 978, 984, 987, 989, 990, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "ana": [1046, 1048, 1053], "anaconda": [0, 366, 376, 382], "anak": 1047, "analog": [43, 57, 148, 384, 417, 1004, 1005, 1019, 1044], "analogi": [1003, 1004], "analys": [233, 360, 415, 806, 807, 1001, 1023, 1028], "analysen": 452, "analysi": [2, 12, 27, 44, 46, 48, 49, 55, 58, 62, 65, 71, 90, 96, 98, 109, 110, 111, 112, 113, 115, 118, 119, 121, 122, 124, 125, 128, 129, 143, 160, 182, 183, 186, 197, 202, 210, 222, 234, 255, 257, 261, 262, 264, 265, 268, 271, 272, 276, 277, 282, 291, 292, 293, 294, 302, 303, 311, 316, 348, 353, 357, 370, 373, 375, 378, 380, 393, 407, 410, 412, 417, 418, 422, 441, 449, 450, 475, 477, 478, 484, 485, 487, 505, 507, 515, 518, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 558, 559, 634, 641, 691, 693, 694, 695, 696, 713, 722, 728, 729, 759, 791, 792, 795, 796, 800, 803, 829, 833, 849, 856, 867, 868, 873, 883, 887, 895, 922, 950, 951, 994, 1000, 1001, 1003, 1004, 1014, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1035, 1036, 1037, 1039, 1044], "analyst": 870, "analyt": [125, 415, 420, 535, 623, 711, 994, 998, 1004, 1022, 1028], "analyz": [43, 46, 55, 198, 273, 280, 325, 352, 354, 383, 384, 410, 418, 506, 591, 592, 594, 791, 1001, 1004, 1011, 1012, 1020, 1035, 1044], "anam": 1052, "anand": [1043, 1047], "ananiad": 1018, "anantharam": 1049, "anavelyz": 1048, "ana\u00ebl": 1045, "anbari": 531, "anchor": 282, "ander": [1039, 1045], "andersen": [746, 1049], "anderson": [50, 304, 373, 501, 1041, 1047, 1053], "andi": [1035, 1042], "ando": 1040, "andr": [1042, 1049], "andrea": [0, 393, 399, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "andreh7": 1042, "andrei": [1050, 1052, 1053], "andrew": [410, 464, 694, 698, 720, 740, 798, 882, 1008, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "andrewww": 1043, "andrii": 1049, "andriushchenko": [1041, 1042], "androutsopoulo": [842, 1006], "andrzej": [541, 543, 550], "andr\u00e1": [1048, 1049, 1050, 1051], "andr\u00e9": [1048, 1049, 1051], "ands": 878, "andyscanzio": 1052, "ang": 1042, "angel": [0, 400], "angela": [1045, 1046, 1050], "angelaambroz": 1046, "angermuel": [1039, 1040], "angl": [2, 53, 70, 123, 168, 256, 257, 258, 261, 262, 375, 415, 534, 540, 542, 545, 546, 548, 549, 551, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 681, 685, 686, 687, 688, 689, 695, 1001, 1002, 1026, 1030, 1035], "angmar": 57, "angu": [1042, 1043, 1049], "angular": [416, 695, 767], "anh": [541, 543, 550], "ani": [2, 25, 37, 43, 47, 48, 52, 53, 57, 79, 80, 88, 90, 100, 151, 163, 168, 176, 177, 185, 186, 187, 188, 189, 202, 213, 217, 231, 240, 243, 244, 247, 257, 261, 262, 265, 271, 272, 274, 277, 280, 288, 304, 311, 312, 315, 320, 322, 323, 325, 328, 341, 345, 354, 361, 365, 366, 367, 372, 373, 375, 376, 378, 380, 382, 383, 384, 386, 391, 392, 393, 396, 398, 401, 404, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 435, 442, 448, 450, 451, 452, 454, 456, 458, 459, 463, 466, 469, 490, 491, 511, 512, 526, 537, 540, 542, 549, 554, 560, 561, 562, 563, 567, 568, 569, 570, 571, 572, 573, 582, 583, 585, 591, 592, 594, 596, 606, 613, 614, 623, 630, 635, 636, 648, 651, 661, 662, 669, 670, 671, 672, 679, 680, 681, 682, 683, 695, 699, 702, 703, 707, 719, 720, 722, 727, 739, 740, 755, 758, 760, 777, 781, 782, 783, 784, 795, 796, 798, 803, 806, 807, 815, 816, 836, 839, 847, 848, 853, 857, 866, 867, 871, 872, 876, 878, 880, 881, 888, 897, 898, 901, 904, 907, 908, 915, 916, 917, 918, 919, 921, 929, 933, 934, 940, 973, 987, 993, 994, 996, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1027, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "aniket": [1050, 1052], "anil": [410, 454, 464], "anim": [352, 418], "anirban": 418, "aniruddha": 1043, "anish": [1040, 1041], "anisha": 1045, "aniso": [79, 95], "anisotrop": [90, 172, 420, 620, 622, 625], "anisotropicli": [79, 95], "anjirbag": 1043, "ankan": 1040, "ankerst": [410, 452, 459], "ankit": [1038, 1045, 1047, 1049], "ankit810": 1046, "ankita": 1043, "ankur": [1040, 1051], "ann": [1035, 1047, 1049], "anna": 1043, "annaayzenshtat": 1043, "annal": [168, 198, 200, 375, 417, 476, 519, 520, 521, 562, 563, 659, 1000], "annau": 1048, "annegnx": 1051, "anno": [695, 1001], "annoi": 366, "annot": [2, 43, 48, 63, 156, 166, 191, 234, 275, 278, 352, 378, 379, 380, 410, 719, 921, 1004, 1020, 1044], "annotationbbox": 234, "announc": [0, 320, 321, 322, 323, 324, 325, 326, 327, 328, 382], "annual": [375, 410, 729, 759, 904, 1004, 1017], "anomali": [14, 48, 111, 150, 183, 227, 239, 250, 297, 298, 373, 471, 515, 525, 566, 642, 680, 853, 868, 911, 1010, 1023, 1025, 1041, 1042], "anomaly_algorithm": 240, "anomaly_frac": 250, "anoth": [43, 72, 120, 125, 134, 144, 148, 168, 170, 178, 182, 186, 202, 217, 221, 238, 240, 247, 251, 257, 265, 271, 273, 274, 277, 281, 285, 301, 352, 354, 356, 361, 365, 367, 372, 373, 376, 378, 380, 384, 390, 392, 404, 407, 410, 414, 415, 417, 418, 419, 421, 444, 446, 454, 457, 464, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 511, 541, 543, 550, 676, 679, 695, 712, 722, 809, 825, 826, 866, 867, 888, 993, 994, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1014, 1018, 1019, 1044, 1045, 1052], "anova": [2, 49, 87, 106, 162, 164, 167, 168, 183, 336, 411, 447, 507, 518, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 716, 829, 833, 867, 868, 887, 907, 912, 1019, 1025], "anova__percentil": [87, 344], "anova_filt": 165, "anova_svm": 165, "ansam": 1051, "answer": [159, 185, 271, 378, 390, 404, 409, 729, 759, 1004, 1028], "ant": [721, 757, 1004], "anthoni": [1040, 1042, 1043], "anthony22": [1050, 1051], "anti": [198, 361, 609, 842, 1006], "anti_alias": [80, 81], "anticip": 52, "antoin": [1035, 1037, 1038, 1039, 1042], "antoni": [1039, 1041, 1047, 1050], "antonin": 1042, "antonio": [1043, 1045], "anubhav": 1043, "anuja": 1045, "anulekh": 1050, "anupam": [901, 1016, 1050], "any_method": 963, "anymor": [149, 188, 213, 273, 320, 321, 341, 361, 382, 411, 430, 673, 1041, 1044, 1047, 1048, 1049, 1051, 1052], "anyon": [378, 393, 409, 1027, 1028], "anyth": [354, 384, 392, 401, 411, 414, 963, 967, 1049], "anywai": [48, 352, 380, 668, 688, 689], "anywher": 312, "anz": 1036, "aoif": [711, 1004], "ap": [2, 278, 710, 711, 1004], "apart": [186, 323, 341, 390, 392, 401, 411, 413, 419, 728, 1019, 1028, 1043], "api": [0, 51, 83, 89, 131, 139, 183, 239, 241, 247, 251, 252, 268, 273, 280, 281, 291, 327, 328, 353, 354, 367, 371, 372, 378, 381, 382, 387, 388, 390, 391, 393, 396, 404, 409, 415, 417, 418, 420, 424, 427, 428, 429, 432, 434, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 499, 507, 511, 513, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 566, 567, 569, 570, 571, 572, 573, 582, 583, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 661, 674, 680, 691, 692, 693, 694, 695, 705, 800, 801, 806, 807, 809, 826, 833, 851, 853, 855, 856, 859, 863, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 905, 911, 912, 926, 945, 946, 969, 987, 993, 1002, 1003, 1004, 1007, 1014, 1018, 1023, 1024, 1025, 1028, 1030, 1032, 1033, 1034, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "api_refer": 378, "apk": 396, "apostolo": 1050, "appar": [115, 1006, 1028], "appdata": 396, "appeal": 393, "appear": [0, 47, 80, 137, 186, 189, 266, 268, 269, 297, 298, 306, 308, 312, 331, 345, 352, 353, 354, 373, 376, 378, 383, 392, 412, 415, 490, 491, 558, 570, 571, 582, 613, 630, 631, 633, 700, 703, 705, 715, 719, 721, 785, 792, 804, 821, 842, 843, 844, 845, 846, 909, 912, 953, 1000, 1006, 1010, 1035, 1043, 1047, 1048], "append": [46, 47, 48, 51, 52, 55, 62, 69, 72, 75, 79, 83, 94, 103, 127, 137, 138, 140, 144, 146, 149, 182, 189, 206, 217, 218, 220, 221, 228, 231, 245, 246, 271, 274, 280, 281, 306, 307, 317, 333, 341, 344, 352, 353, 354, 356, 360, 384, 392, 411, 418, 661, 662, 907, 908, 914, 941, 1014], "appendix": [648, 679, 1000, 1014], "appl": [51, 365, 376, 390, 1005], "appli": [2, 32, 48, 54, 57, 62, 64, 68, 75, 79, 80, 81, 88, 89, 91, 95, 103, 107, 116, 120, 121, 126, 128, 130, 139, 140, 144, 146, 164, 170, 186, 188, 198, 202, 217, 218, 227, 233, 234, 235, 240, 245, 247, 271, 272, 274, 283, 284, 285, 290, 300, 311, 315, 316, 321, 341, 345, 354, 360, 361, 365, 370, 378, 380, 382, 386, 390, 391, 392, 401, 407, 408, 410, 411, 412, 414, 415, 417, 418, 419, 420, 422, 442, 448, 454, 464, 466, 467, 469, 471, 476, 484, 485, 486, 487, 511, 512, 519, 520, 521, 527, 534, 535, 536, 537, 538, 540, 542, 544, 545, 546, 551, 552, 553, 556, 557, 560, 561, 562, 563, 567, 568, 569, 591, 592, 593, 594, 630, 635, 636, 641, 642, 644, 645, 661, 662, 671, 679, 680, 681, 694, 702, 704, 710, 714, 729, 759, 761, 762, 784, 791, 795, 796, 803, 817, 833, 836, 842, 843, 844, 845, 846, 856, 866, 867, 876, 883, 884, 887, 892, 893, 895, 896, 897, 898, 903, 914, 915, 916, 917, 918, 928, 933, 939, 943, 950, 951, 975, 994, 996, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1028, 1036, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049], "applic": [42, 44, 57, 82, 88, 111, 183, 191, 213, 230, 235, 264, 265, 274, 311, 328, 365, 367, 373, 375, 378, 384, 386, 387, 390, 392, 408, 409, 410, 414, 415, 416, 417, 420, 422, 446, 448, 454, 499, 535, 536, 537, 556, 557, 632, 691, 692, 693, 697, 715, 732, 733, 741, 786, 787, 790, 833, 927, 993, 1000, 1001, 1002, 1003, 1004, 1008, 1010, 1016, 1020, 1023, 1024, 1025, 1027, 1028, 1035, 1036, 1041, 1043, 1046], "apply_along_axi": 309, "appr": 622, "appreci": [0, 378, 390], "approach": [44, 47, 91, 96, 99, 124, 168, 170, 181, 186, 189, 196, 200, 213, 215, 221, 231, 233, 265, 288, 317, 345, 352, 353, 354, 367, 377, 378, 384, 387, 392, 396, 398, 404, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 439, 445, 448, 450, 454, 464, 523, 535, 585, 592, 614, 638, 661, 662, 677, 678, 836, 852, 951, 993, 994, 1000, 1001, 1004, 1005, 1007, 1008, 1014, 1018, 1019, 1022, 1023, 1028, 1039, 1051], "appropri": [25, 88, 90, 127, 175, 186, 217, 247, 280, 285, 328, 356, 361, 378, 380, 386, 392, 404, 408, 410, 414, 416, 417, 421, 446, 452, 459, 491, 492, 493, 499, 503, 504, 505, 507, 508, 513, 580, 585, 594, 595, 598, 599, 601, 602, 603, 675, 677, 690, 712, 849, 850, 851, 853, 855, 857, 858, 859, 987, 1000, 1003, 1004, 1014, 1039, 1042, 1048, 1051, 1053], "approv": [378, 393, 417], "approx": [64, 120, 245, 415, 417, 418, 1004, 1011, 1018], "approxim": [0, 2, 23, 43, 44, 64, 69, 80, 86, 111, 124, 125, 129, 138, 145, 146, 168, 171, 186, 194, 209, 213, 214, 227, 231, 235, 238, 239, 240, 243, 246, 262, 271, 276, 286, 292, 293, 300, 311, 313, 314, 316, 320, 323, 352, 354, 358, 359, 361, 370, 375, 387, 390, 392, 407, 408, 411, 413, 414, 415, 417, 420, 422, 423, 424, 434, 451, 471, 472, 475, 476, 477, 478, 484, 485, 486, 493, 499, 505, 524, 527, 536, 537, 538, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 562, 563, 585, 592, 613, 614, 622, 641, 642, 643, 644, 645, 648, 660, 661, 662, 675, 677, 679, 680, 682, 690, 695, 761, 762, 767, 800, 804, 821, 828, 832, 833, 847, 848, 851, 855, 857, 858, 859, 863, 867, 868, 873, 877, 879, 880, 884, 896, 907, 912, 913, 950, 951, 977, 997, 998, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019, 1020, 1023, 1024, 1025, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "approximate_nearest_neighbor": [291, 1025], "approximateident": 1036, "april": [373, 667, 688, 689, 1004, 1039, 1047, 1052], "apriori": 231, "apt": [376, 386, 396], "aptitud": 186, "aqua": 280, "aquantitypredict": 398, "ar": [0, 2, 16, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 99, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 122, 125, 126, 127, 130, 132, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 164, 165, 167, 168, 170, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 217, 222, 224, 231, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 254, 257, 258, 259, 261, 264, 266, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 296, 297, 301, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 339, 341, 343, 345, 348, 349, 352, 353, 354, 356, 360, 361, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 391, 392, 393, 396, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 426, 430, 431, 434, 435, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 511, 512, 513, 515, 518, 519, 520, 521, 522, 523, 526, 527, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 751, 753, 754, 756, 757, 759, 760, 764, 765, 766, 768, 770, 771, 772, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 929, 930, 931, 933, 934, 937, 938, 939, 943, 945, 946, 950, 951, 952, 955, 956, 957, 959, 960, 963, 966, 967, 969, 974, 977, 978, 982, 983, 984, 987, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "arab": 630, "arabi": [410, 708, 718, 789], "aradwad": 1046, "arafat": 1041, "arai": 1045, "arang": [43, 50, 52, 53, 75, 91, 93, 98, 105, 110, 111, 127, 130, 142, 143, 145, 147, 148, 152, 156, 164, 170, 172, 177, 178, 181, 182, 189, 198, 213, 216, 218, 222, 236, 243, 245, 266, 271, 274, 279, 282, 290, 291, 304, 306, 313, 323, 330, 331, 333, 335, 341, 347, 352, 354, 358, 359, 360, 361, 390, 407, 414, 418, 467, 547, 833, 882, 886, 999, 1000, 1008, 1014, 1018], "aravindh": 1050, "arbitarili": 352, "arbitrari": [2, 43, 52, 88, 116, 120, 121, 122, 139, 177, 193, 213, 230, 231, 269, 311, 315, 317, 322, 328, 352, 360, 378, 390, 392, 404, 411, 414, 415, 417, 418, 422, 448, 452, 457, 459, 467, 535, 536, 562, 563, 584, 642, 651, 672, 683, 691, 745, 792, 804, 805, 810, 812, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 871, 873, 886, 993, 995, 996, 1000, 1001, 1004, 1007, 1014, 1024, 1035, 1036, 1039, 1041, 1042, 1043, 1045, 1049, 1051], "arbitrarili": [171, 257, 262, 352, 392, 420, 433, 467, 484, 485, 486, 555, 557, 559, 561, 563, 565, 568, 571, 573, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 681, 682, 683, 724, 725, 726, 727, 749, 788, 792, 840, 841, 850, 858, 865, 888, 908, 910, 913, 916, 918, 1004, 1007, 1014, 1020], "arc": [375, 417], "archana": [1045, 1047], "archit": 1041, "architectur": [376, 380, 386, 390, 396, 404, 470, 905, 1008, 1028, 1035, 1052], "archiv": [47, 288, 372, 373, 375, 376, 410, 444, 503, 505, 513, 761, 762, 1002, 1019], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [711, 1004], "arcidiacono": [1049, 1050, 1052, 1053], "arcsin": [702, 767], "arctan": [70, 257, 262, 374, 521], "arctan2": [256, 258, 261], "ard": [2, 193, 647, 648], "ard_poli": 193, "ard_scor": 193, "ardregress": [2, 193, 198, 648, 943, 1000, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052], "area": [2, 50, 52, 150, 168, 213, 231, 250, 268, 271, 278, 280, 281, 341, 345, 346, 349, 375, 378, 382, 390, 410, 418, 705, 709, 710, 711, 791, 792, 1001, 1004, 1007, 1022, 1037], "aren": [16, 247, 352, 373, 382, 396, 729, 759, 1009, 1045, 1047], "arezki": 1035, "arfa": 1041, "arff": [325, 378, 499, 1047, 1050, 1051], "arg": [247, 307, 345, 379, 392, 415, 417, 424, 702, 871, 969, 971, 1000, 1006, 1007], "arg_sort_bi": 52, "argentina": 767, "argmax": [63, 127, 270, 284, 380, 417, 572, 835, 915, 1019, 1048], "argmin": [51, 145, 270, 380, 412, 534, 540, 548, 549, 688, 782, 783, 1020], "argpartit": 1042, "argsort": [54, 55, 57, 58, 59, 145, 147, 188, 189, 213, 231, 320, 330, 331, 352, 353, 373, 1012], "argument": [2, 104, 147, 189, 214, 241, 244, 247, 320, 366, 372, 373, 378, 379, 381, 383, 384, 386, 387, 390, 392, 410, 411, 414, 415, 417, 419, 421, 422, 424, 428, 432, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 459, 461, 463, 465, 466, 470, 471, 496, 499, 506, 511, 536, 538, 539, 541, 543, 554, 562, 563, 566, 570, 571, 572, 573, 580, 584, 585, 591, 592, 594, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 634, 642, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 669, 671, 679, 680, 684, 687, 691, 695, 699, 701, 702, 703, 704, 705, 717, 722, 738, 745, 766, 782, 783, 809, 826, 828, 829, 830, 831, 832, 834, 835, 836, 839, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 864, 867, 871, 905, 911, 921, 931, 941, 946, 970, 972, 973, 987, 993, 996, 1000, 1001, 1002, 1004, 1007, 1011, 1012, 1019, 1020, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "argv": 244, "ari": [72, 91, 353, 410, 708, 1040, 1046], "aria": [1043, 1044, 1050], "aric": 55, "arida": [1044, 1045, 1047, 1049, 1052], "ariel": [45, 373, 1035, 1041], "arif": 1053, "ariga": 1041, "arik": 1043, "arima": 1023, "aris": [2, 186, 274, 348, 366, 383, 386, 410, 718, 1000, 1001, 1047], "arisa": [1049, 1050], "arithmet": [246, 384, 386, 410, 554, 651, 672, 683, 707, 720, 739, 740, 760, 798, 854, 1004, 1043], "ari\u00f1o": 1038, "arjona": 1044, "arka204": [1048, 1050], "arm": [376, 378, 386, 993], "arm64": [376, 381], "arm64v8": 386, "armstrong": 1047, "arnaud": [0, 400, 1036, 1037, 1038, 1039, 1040, 1041, 1053], "arnaudov": [1047, 1049], "arnaudstiegl": 1045, "arnold": [1035, 1036], "arnoldi": [691, 692, 696], "aroma": 317, "arora": [1043, 1050], "around": [0, 43, 63, 72, 85, 115, 134, 137, 146, 176, 187, 191, 247, 250, 265, 274, 285, 309, 330, 332, 333, 341, 344, 345, 352, 353, 354, 360, 361, 373, 375, 378, 384, 390, 398, 409, 410, 414, 415, 418, 473, 474, 518, 547, 623, 643, 652, 671, 707, 745, 800, 809, 826, 853, 855, 857, 858, 859, 887, 1000, 1001, 1003, 1004, 1010, 1014, 1018, 1023, 1024, 1027, 1028, 1039, 1040], "arpack": [51, 57, 79, 80, 99, 102, 234, 327, 415, 453, 454, 455, 464, 538, 544, 547, 691, 692, 694, 696, 698, 1001, 1041, 1042, 1047, 1051, 1052, 1053], "arpanchowdhri": 1045, "arr": 328, "arrai": [2, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 80, 86, 87, 94, 95, 97, 102, 104, 112, 115, 118, 121, 122, 145, 147, 149, 150, 153, 156, 165, 168, 171, 172, 173, 178, 186, 193, 195, 198, 206, 207, 210, 213, 214, 220, 230, 234, 235, 240, 244, 247, 250, 251, 254, 256, 257, 258, 260, 261, 265, 266, 267, 269, 271, 272, 275, 276, 280, 290, 304, 314, 320, 323, 324, 326, 327, 331, 337, 344, 345, 352, 359, 361, 365, 366, 371, 372, 373, 378, 379, 380, 381, 383, 384, 386, 388, 390, 391, 392, 404, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 492, 493, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 509, 511, 512, 513, 514, 515, 516, 518, 522, 526, 527, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 584, 585, 586, 587, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 926, 929, 930, 931, 932, 933, 934, 935, 938, 939, 949, 950, 951, 952, 953, 955, 957, 958, 965, 966, 967, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 992, 994, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1028, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "arrang": [2, 58, 290, 635, 838, 839, 840, 841, 1004], "array_api": 406, "array_api_compat": 406, "array_api_dispatch": [406, 470, 905], "array_api_support": [406, 926], "array_convert": 934, "array_equ": [572, 1042], "array_lik": 949, "array_paramet": 378, "array_sym": 989, "arrayfunc": [2, 387, 930], "arrow": [63, 398, 1049], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1049, "art": [322, 384, 652, 695, 1028], "artem": [1039, 1042, 1052], "arth": 1049, "arthur": [410, 449, 462, 1040, 1041, 1042, 1043, 1044, 1047, 1049], "arthurmello": 1049, "articl": [0, 55, 102, 352, 373, 377, 378, 386, 414, 423, 477, 708, 1000, 1004, 1048], "artiem": 1043, "artifact": [43, 53, 80, 81, 311, 367, 382, 1030], "artifici": [10, 141, 143, 151, 168, 182, 217, 233, 246, 265, 309, 352, 373, 374, 375, 383, 407, 410, 414, 415, 538, 699, 837, 864, 865, 997, 1001, 1003, 1005, 1011, 1016, 1020, 1024, 1028, 1035], "artist": [241, 385, 440, 635, 701, 703, 704, 705, 809, 826, 921], "artsiom": 1042, "artsion": 1041, "artstein": 719, "artur": [1050, 1051], "arturo": [0, 389, 1049, 1050, 1051, 1052, 1053], "arturoamor": 1049, "aruku": [1043, 1044], "arunav": 1046, "arunava": 1043, "arxiv": [378, 464], "arya": 1043, "as_float_arrai": [2, 387], "as_fram": [43, 44, 103, 107, 126, 140, 143, 149, 154, 175, 186, 187, 188, 189, 200, 202, 213, 221, 229, 231, 250, 254, 265, 285, 288, 291, 294, 308, 316, 317, 320, 322, 324, 325, 372, 373, 491, 492, 493, 495, 499, 503, 504, 505, 507, 508, 513, 1045, 1046, 1047, 1048, 1051], "asanyarrai": 380, "asarrai": [47, 55, 213, 231, 309, 332, 352, 353, 380, 392, 406, 729, 759, 855, 857, 858, 859, 1014, 1019, 1052], "ascend": [58, 103, 188, 317, 417, 452, 458, 597, 630, 638, 919, 920, 921, 1018, 1045, 1051], "ascent": [175, 420], "ascii": [50, 304, 418, 489, 591, 592, 594], "ascontiguousarrai": 544, "asctim": 120, "aseem": 1042, "asgd": [220, 1018], "ash": [48, 375, 1038, 1041], "ashah002": [1050, 1051, 1052], "ashim": 1045, "ashimb9": 1045, "ashimin": 1048, "ashish": [1048, 1051], "ashra": 647, "ashutosh": [1042, 1043, 1045, 1047], "ashvith": 1048, "ashwin": [1050, 1051], "asia": [271, 1014], "asian": 418, "asid": [144, 221, 404, 562, 563, 564, 565, 669, 670, 671, 679, 681, 864, 865], "asish": [1041, 1042], "ask": [0, 181, 182, 271, 377, 378, 382, 383, 386, 392, 393, 404, 419, 849, 850, 851, 853, 855, 857, 858, 859, 1027, 1051], "asnt": 1041, "aspect": [46, 91, 116, 120, 174, 187, 233, 240, 280, 285, 300, 365, 366, 367, 378, 392, 393, 410, 493, 661, 662, 993, 1020, 1028, 1052], "aspir": [168, 375, 378], "ass": [111, 112, 412, 476], "assembl": [290, 318, 354, 867], "assert": [47, 55, 121, 244, 271, 280, 366, 381, 1024], "assert_all_finit": [2, 365, 387, 470], "assert_allclos": 380, "assert_array_equ": 418, "assert_warn": 1048, "assert_warns_messag": 1048, "assertionerror": 1042, "assess": [44, 52, 72, 93, 134, 144, 146, 186, 213, 231, 250, 267, 268, 270, 274, 408, 417, 704, 746, 1003, 1004, 1010, 1024, 1050], "assia": 1044, "assiaben": 1044, "assign": [47, 55, 58, 70, 72, 80, 82, 90, 91, 93, 134, 139, 150, 152, 164, 166, 172, 226, 231, 240, 245, 248, 265, 306, 313, 318, 328, 335, 348, 353, 373, 378, 380, 392, 407, 414, 415, 417, 418, 419, 420, 442, 443, 444, 445, 447, 448, 449, 450, 451, 454, 456, 458, 461, 462, 463, 464, 518, 539, 564, 565, 596, 597, 610, 611, 613, 661, 662, 669, 670, 671, 679, 680, 681, 707, 708, 718, 719, 720, 722, 723, 732, 733, 734, 741, 742, 746, 758, 760, 786, 787, 789, 790, 796, 797, 798, 803, 806, 807, 809, 812, 817, 826, 828, 829, 830, 831, 834, 851, 857, 859, 860, 861, 874, 902, 903, 907, 908, 909, 910, 911, 912, 913, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1014, 1017, 1028, 1035, 1040, 1042, 1043, 1052, 1053], "assign_label": [80, 410, 454, 464], "assist": [0, 378, 390, 409, 1014, 1027, 1028], "associ": [50, 61, 62, 111, 134, 170, 185, 186, 217, 259, 265, 317, 330, 332, 352, 386, 410, 412, 414, 415, 417, 418, 428, 448, 451, 471, 472, 473, 474, 475, 476, 477, 478, 496, 497, 498, 527, 560, 564, 567, 608, 609, 633, 648, 661, 662, 669, 671, 677, 678, 679, 692, 698, 702, 734, 742, 825, 830, 850, 858, 872, 884, 896, 904, 913, 915, 917, 939, 1003, 1004, 1007, 1014, 1017, 1028, 1035, 1047, 1051], "assum": [48, 70, 88, 90, 177, 182, 185, 186, 202, 213, 231, 240, 243, 250, 262, 271, 280, 311, 348, 354, 366, 377, 378, 380, 384, 390, 391, 392, 395, 404, 407, 408, 410, 412, 414, 415, 417, 418, 420, 421, 426, 431, 439, 441, 446, 448, 452, 459, 465, 471, 472, 473, 474, 475, 476, 477, 478, 506, 511, 512, 535, 545, 551, 552, 564, 565, 570, 571, 590, 591, 592, 594, 623, 635, 646, 647, 649, 650, 655, 661, 662, 663, 664, 665, 669, 670, 671, 674, 675, 679, 680, 681, 684, 688, 690, 691, 695, 712, 725, 729, 738, 744, 759, 767, 772, 777, 781, 784, 803, 806, 807, 817, 843, 849, 850, 853, 855, 857, 858, 863, 874, 887, 963, 979, 980, 981, 994, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1014, 1018, 1020, 1041, 1047], "assume_cent": [69, 110, 412, 423, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "assume_finit": [365, 366, 470, 905], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 109, 110, 123, 175, 179, 183, 185, 213, 240, 267, 290, 311, 384, 390, 391, 395, 408, 410, 412, 414, 415, 418, 420, 449, 453, 455, 490, 506, 515, 535, 537, 544, 653, 657, 801, 803, 806, 807, 817, 844, 899, 900, 998, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1014, 1017, 1020, 1025, 1042, 1048], "assur": [0, 392, 800, 801, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "astel": 1043, "astolfi": 1035, "astrai": 392, "astroml": 1023, "astronom": 1022, "astronomi": 1023, "astropi": 378, "astyp": [43, 53, 72, 76, 79, 86, 93, 95, 99, 112, 143, 145, 161, 185, 187, 203, 204, 231, 236, 246, 250, 265, 282, 291, 318, 404, 418, 994, 1000, 1042], "asv": 378, "asv_benchmark": 378, "aswathavicki": 1053, "asymmetr": [146, 215, 392, 1040], "asymmetri": [215, 352], "asymptot": [109, 110, 202, 365, 412, 476, 539, 733, 1000, 1003, 1045], "atag": 178, "atariah": 1044, "ateif": 1048, "atharva": 1049, "atheism": [57, 272, 334, 352, 353, 354, 373, 490], "atheist": 352, "athena": 1028, "ation": 418, "atla": [365, 376], "atleast_2d": [146, 380], "atmospher": 175, "atol": [380, 675, 677, 847, 848, 852], "atom": [123, 129, 415, 534, 540, 542, 545, 546, 548, 549, 656, 666, 687, 1000, 1035, 1048], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1047, 1048], "attach": [47, 352, 435, 852, 1036, 1046], "attack": [250, 373], "attalla": 1049, "attard": 1048, "attempt": [43, 87, 187, 209, 219, 266, 352, 365, 377, 392, 410, 422, 448, 452, 459, 466, 470, 634, 691, 692, 696, 821, 849, 850, 851, 853, 855, 857, 858, 859, 885, 887, 905, 933, 934, 1000, 1001, 1007, 1020, 1042, 1047, 1052], "attenberg": 418, "attent": [386, 610, 611, 1018], "attenu": 170, "attia": 800, "attr": [47, 89], "attract": [421, 446, 998, 1007, 1023], "attractador": [1042, 1043], "attrgett": [596, 600], "attribut": [2, 47, 62, 68, 82, 103, 128, 132, 134, 141, 144, 164, 168, 213, 221, 247, 261, 269, 270, 275, 283, 300, 304, 323, 345, 354, 360, 367, 371, 372, 373, 375, 378, 381, 385, 390, 404, 407, 408, 410, 411, 412, 413, 415, 417, 418, 419, 420, 425, 426, 427, 428, 429, 432, 433, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 513, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 582, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 620, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 739, 798, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 922, 924, 964, 987, 992, 996, 998, 1000, 1005, 1007, 1008, 1010, 1014, 1017, 1018, 1019, 1020, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "attributeerror": [411, 562, 580, 964, 1044, 1045, 1047, 1051, 1052], "attrselect": 1035, "atukorala": 1050, "atuo": [1051, 1052], "aubert": 1042, "auc": [2, 50, 62, 168, 213, 231, 250, 268, 271, 275, 278, 280, 281, 327, 408, 705, 711, 791, 1004, 1040, 1043, 1047], "auc_scor": [1035, 1037], "audio": [372, 506], "audrei": 1053, "aufarkari": 1049, "aug": 1019, "augment": [2, 333, 633, 889, 1012, 1028], "augspurg": [1043, 1045], "august": [168, 375, 410, 514, 537, 1019, 1035, 1037, 1038, 1042, 1049], "aura": 1047, "auroc": 1004, "aur\u00e9lien": [1042, 1043, 1044, 1048, 1049], "austin": 1042, "australian": [149, 396], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 372, 378, 381, 386, 390, 392, 393, 414, 453, 537, 874, 996, 1023, 1038], "authorit": 393, "authorship": 382, "auto": [57, 69, 90, 91, 118, 168, 174, 197, 233, 238, 252, 291, 294, 299, 320, 321, 322, 323, 324, 325, 328, 337, 338, 344, 347, 354, 372, 373, 380, 417, 420, 421, 443, 446, 447, 448, 449, 451, 452, 454, 457, 458, 459, 461, 464, 499, 511, 512, 538, 541, 543, 544, 547, 550, 552, 560, 561, 564, 565, 566, 567, 568, 570, 596, 597, 600, 605, 610, 611, 632, 634, 635, 636, 638, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 675, 676, 677, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 705, 802, 806, 807, 825, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 864, 865, 880, 881, 888, 899, 900, 904, 907, 908, 909, 910, 911, 912, 913, 917, 918, 950, 951, 969, 972, 995, 998, 1000, 1001, 1007, 1014, 1023, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "auto_examples_jupyt": 183, "auto_examples_python": 183, "auto_viml": 1047, "auto_wrap_output_kei": 380, "autoclass": 375, "autocorrel": 414, "autolabel": 47, "autom": [272, 381, 382, 396, 695, 993, 1000, 1001, 1004, 1023, 1028], "automat": [2, 43, 47, 51, 52, 64, 80, 96, 98, 103, 127, 149, 159, 167, 193, 216, 256, 257, 265, 269, 272, 311, 318, 321, 325, 334, 343, 345, 366, 373, 376, 378, 380, 382, 386, 392, 396, 404, 406, 410, 411, 412, 415, 417, 418, 419, 434, 452, 454, 458, 464, 466, 467, 469, 499, 502, 518, 541, 543, 544, 550, 552, 554, 560, 564, 567, 586, 591, 594, 597, 605, 646, 648, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 669, 670, 671, 675, 677, 678, 679, 681, 684, 687, 690, 691, 694, 698, 805, 820, 823, 833, 843, 864, 865, 868, 869, 871, 880, 881, 888, 899, 900, 907, 908, 909, 912, 915, 917, 921, 939, 974, 977, 992, 993, 995, 998, 1003, 1008, 1014, 1018, 1020, 1023, 1024, 1035, 1038, 1039, 1040, 1046, 1049, 1050, 1051, 1052, 1053], "automl": [1004, 1023], "automobil": 1028, "autoregress": 373, "autoviml": 1023, "autoviz": 1047, "auxiliari": [182, 328, 376, 1028, 1050], "av": 1043, "avail": [0, 2, 44, 50, 51, 53, 76, 89, 90, 123, 126, 145, 149, 168, 170, 175, 179, 185, 186, 187, 202, 213, 221, 231, 234, 247, 250, 265, 268, 269, 274, 275, 278, 285, 296, 297, 298, 304, 316, 320, 321, 322, 323, 325, 326, 333, 335, 361, 365, 372, 373, 375, 376, 377, 378, 379, 382, 383, 387, 391, 392, 396, 404, 407, 410, 411, 414, 415, 416, 417, 418, 419, 421, 449, 452, 453, 454, 455, 471, 472, 473, 474, 475, 476, 477, 478, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 511, 538, 552, 558, 559, 560, 561, 562, 563, 567, 568, 570, 571, 572, 573, 596, 597, 605, 613, 614, 630, 635, 636, 650, 654, 656, 658, 660, 664, 666, 668, 671, 673, 674, 675, 676, 677, 678, 679, 692, 699, 702, 735, 736, 803, 806, 807, 817, 829, 830, 835, 836, 837, 838, 839, 840, 841, 853, 864, 865, 867, 874, 883, 886, 891, 895, 900, 904, 959, 964, 993, 994, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1014, 1017, 1018, 1019, 1022, 1023, 1024, 1027, 1028, 1030, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051], "available_if": [2, 89, 392, 1048, 1049, 1052], "avebedrm": [311, 373, 492], "aventi": 51, "aveoccup": [311, 322, 373, 492], "averag": [2, 43, 52, 62, 64, 72, 74, 75, 79, 85, 93, 95, 137, 138, 142, 146, 149, 150, 155, 156, 157, 168, 175, 187, 195, 202, 213, 220, 231, 250, 265, 274, 276, 279, 281, 285, 290, 311, 320, 326, 328, 334, 352, 361, 365, 373, 375, 380, 390, 407, 408, 412, 414, 418, 419, 421, 422, 439, 440, 443, 446, 447, 448, 449, 451, 492, 496, 497, 526, 534, 535, 536, 540, 541, 543, 544, 548, 549, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 590, 597, 635, 636, 651, 661, 662, 669, 670, 672, 675, 677, 679, 680, 681, 683, 690, 703, 706, 707, 709, 710, 711, 716, 723, 724, 726, 728, 729, 731, 732, 733, 737, 738, 739, 741, 742, 743, 746, 748, 749, 751, 753, 754, 756, 759, 767, 784, 785, 786, 787, 788, 790, 791, 793, 794, 798, 799, 800, 801, 831, 834, 853, 873, 888, 989, 994, 999, 1000, 1005, 1008, 1010, 1011, 1018, 1019, 1020, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "average_bike_rent": 187, "average_coef_": 1046, "average_feature_effect": 352, "average_intercept_": 1046, "average_linkag": 79, "average_method": [410, 707, 760, 1043], "average_pr": 149, "average_precis": [278, 703, 710, 1004], "average_precision_scor": [2, 278, 703, 709, 711, 785, 791, 1004, 1035, 1038, 1042, 1043, 1049, 1051], "average_week_demand": [43, 149], "averoom": [311, 322, 373, 492], "avg": [45, 68, 102, 165, 269, 309, 330, 331, 572, 707, 716, 825, 1004, 1051], "avg_dist": [75, 784], "avgclaim": 231, "avgclaimamount": 231, "avi": [1047, 1048], "avidar": 1051, "avinash": 1047, "avm19": [1049, 1050, 1052], "avoid": [43, 46, 51, 52, 79, 90, 95, 104, 139, 140, 144, 149, 186, 187, 217, 222, 231, 236, 247, 250, 265, 266, 272, 276, 284, 299, 301, 302, 315, 316, 327, 337, 338, 353, 366, 376, 378, 379, 380, 382, 383, 384, 390, 392, 393, 396, 404, 408, 410, 412, 414, 417, 418, 421, 442, 444, 446, 454, 464, 470, 496, 497, 498, 502, 511, 512, 537, 542, 546, 637, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 692, 694, 696, 698, 715, 795, 803, 804, 808, 814, 817, 828, 829, 830, 867, 870, 876, 877, 879, 884, 885, 886, 887, 890, 892, 893, 894, 895, 896, 897, 898, 900, 905, 951, 998, 1001, 1003, 1004, 1007, 1008, 1010, 1012, 1014, 1019, 1020, 1024, 1027, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "aw": 386, "awai": [62, 63, 64, 93, 109, 142, 170, 171, 175, 216, 265, 345, 346, 373, 408, 420, 631, 849, 850, 857, 858, 1003, 1004, 1019], "await": 321, "awalei": 1043, "awar": [48, 54, 165, 179, 265, 338, 352, 376, 378, 380, 390, 393, 409, 414, 418, 570, 571, 651, 657, 658, 659, 661, 662, 672, 683, 853, 882, 1010, 1014, 1020, 1032, 1035, 1036, 1049], "awesom": 1028, "awwwyan": 1053, "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 86, 88, 89, 90, 97, 99, 104, 107, 111, 113, 116, 118, 120, 126, 130, 134, 136, 139, 141, 143, 144, 149, 151, 152, 154, 155, 156, 173, 174, 179, 181, 185, 186, 187, 188, 189, 191, 193, 194, 197, 198, 202, 204, 205, 208, 210, 211, 213, 214, 215, 217, 218, 221, 222, 224, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 241, 246, 250, 251, 253, 256, 258, 261, 265, 266, 267, 268, 271, 273, 274, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 299, 301, 302, 306, 307, 308, 311, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 327, 337, 338, 339, 340, 342, 343, 345, 347, 348, 349, 350, 352, 353, 354, 356, 357, 374, 381, 415, 420, 440, 537, 544, 553, 634, 635, 700, 701, 703, 704, 705, 721, 809, 826, 921, 924, 1004, 1007, 1011, 1032, 1045, 1051], "ax0": [105, 107, 213, 243, 353], "ax1": [46, 49, 90, 93, 98, 100, 105, 107, 111, 118, 143, 182, 189, 213, 241, 243, 251, 256, 274, 282, 312, 316, 317, 333, 352, 353, 374], "ax2": [46, 90, 93, 98, 100, 111, 118, 143, 182, 189, 213, 241, 251, 256, 274, 282, 301, 312, 316, 317, 333, 352, 374], "ax3": [98, 333], "ax4": 98, "ax_": [150, 264, 274, 278, 280, 284, 294, 316, 320, 385, 440, 634, 700, 701, 703, 704, 705, 809, 826], "ax_bc": 315, "ax_bottom": 385, "ax_calibration_curv": [62, 64], "ax_colorbar": 311, "ax_det": 268, "ax_histi": 311, "ax_histx": 311, "ax_histx_zoom": 311, "ax_histy_zoom": 311, "ax_idx": 273, "ax_origin": 315, "ax_qt": 315, "ax_roc": 268, "ax_row": 70, "ax_scatt": 311, "ax_scatter_zoom": 311, "ax_top_left": 385, "ax_top_right": 385, "ax_yj": 315, "ax_zoom_in": 311, "ax_zoom_out": 311, "axarr": [155, 311], "axes_": [149, 151, 251, 321, 327, 385, 635], "axes_idx": 315, "axes_list": 315, "axes_row": 204, "axesimag": 700, "axhlin": [127, 159, 203, 270, 274], "axi": [2, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 72, 74, 75, 81, 83, 85, 86, 87, 88, 94, 103, 104, 107, 113, 116, 118, 120, 121, 122, 123, 124, 129, 136, 137, 141, 142, 150, 153, 157, 161, 164, 174, 179, 181, 185, 186, 195, 201, 202, 205, 206, 207, 213, 218, 222, 225, 227, 228, 230, 231, 234, 235, 238, 240, 244, 245, 249, 256, 258, 260, 261, 267, 268, 272, 273, 278, 280, 281, 284, 290, 291, 296, 297, 298, 301, 302, 303, 309, 311, 315, 318, 327, 331, 333, 335, 337, 340, 341, 344, 346, 347, 348, 350, 352, 353, 357, 358, 359, 360, 373, 380, 387, 392, 408, 410, 418, 422, 440, 447, 466, 469, 534, 536, 539, 540, 542, 544, 546, 548, 549, 553, 588, 615, 634, 635, 688, 689, 704, 766, 782, 783, 784, 785, 809, 826, 835, 876, 877, 884, 885, 887, 892, 893, 894, 896, 897, 898, 921, 929, 933, 934, 953, 978, 984, 994, 1004, 1011, 1014, 1019, 1043, 1045, 1047, 1052, 1053], "axis_idx": 43, "axis_list": 122, "axp": 51, "axvlin": [86, 93, 105, 113, 127, 145, 156, 186, 188, 189, 202, 277, 285, 348], "ayako": 1047, "ayan": 1049, "ayc\u0131": 1053, "aydor": [1042, 1043, 1046], "ayerdi": 1039, "aymer": 1036, "aymericbasset": 1051, "ayomid": 1045, "ayush": [1043, 1048], "ayzenshtat": [1028, 1043], "azaria": [1050, 1051], "azencott": 1049, "azim": [100, 126, 187, 210, 233, 237], "azur": [0, 378], "b": [0, 2, 47, 49, 61, 63, 92, 98, 111, 127, 136, 137, 142, 146, 147, 157, 159, 171, 172, 173, 178, 182, 196, 198, 201, 213, 214, 219, 231, 248, 250, 265, 270, 274, 276, 281, 286, 290, 323, 333, 361, 373, 375, 378, 382, 383, 384, 407, 408, 410, 413, 414, 415, 418, 439, 484, 501, 503, 544, 569, 591, 592, 593, 594, 610, 611, 613, 614, 631, 649, 650, 651, 652, 661, 672, 675, 677, 679, 683, 690, 691, 708, 722, 733, 734, 795, 796, 814, 815, 854, 880, 881, 882, 883, 886, 887, 895, 922, 935, 951, 952, 966, 968, 994, 996, 1000, 1001, 1002, 1004, 1007, 1009, 1014, 1018, 1019, 1035, 1043, 1046, 1048, 1049, 1050], "b0noi": 1041, "b0rxington": 1050, "b1": [227, 297, 340], "b12": [213, 231], "b1996": 417, "b1998": 417, "b1999": 417, "b2": [227, 297, 340], "b2001": 417, "b2011": 410, "b2c": 1028, "b30065": 313, "b5": 325, "b7a2ff": 315, "b_1": 1008, "b_2": 1008, "b_column": 722, "b_i": 1009, "b_iv_i": 1009, "b_j": 410, "b_k": 410, "b_mask": 280, "b_row": 722, "b_true": 280, "ba": [51, 864, 865, 1008], "baak": 1049, "baam": [1048, 1049], "babino": [1048, 1049], "bac": 51, "bach": [415, 534, 539, 540, 541, 661, 1000], "bachant": 1042, "back": [43, 125, 252, 366, 376, 378, 392, 393, 404, 411, 418, 435, 445, 448, 449, 461, 484, 485, 486, 511, 512, 536, 537, 538, 541, 543, 544, 547, 584, 633, 661, 662, 669, 670, 671, 679, 680, 681, 731, 872, 874, 875, 876, 880, 881, 882, 884, 885, 887, 899, 900, 907, 956, 1000, 1004, 1008, 1024, 1038, 1043, 1045, 1046, 1049, 1053], "backend": [2, 366, 381, 392, 470, 905, 969, 973, 1004, 1038, 1043, 1044, 1045, 1046], "background": [44, 50, 81, 99, 150, 309, 313, 373, 378, 386, 410, 496, 497, 1001, 1009, 1018, 1045], "background_point": 50, "backlink": 1040, "backport": [382, 387, 1042], "backprop": [1008, 1018], "backpropag": 1008, "backslash": 1050, "backtick": [378, 383], "backup": [511, 1035], "backward": [168, 247, 322, 381, 392, 419, 499, 580, 605, 617, 618, 621, 622, 623, 625, 626, 920, 929, 1008, 1024, 1035, 1038, 1043, 1044, 1045, 1047, 1049, 1051], "bad": [93, 94, 171, 176, 186, 265, 328, 352, 361, 378, 410, 420, 695, 749, 993, 1000, 1001, 1006, 1012, 1035], "badaracco": 1048, "badli": [202, 213, 352, 367, 887, 1000, 1014], "badr": 1050, "baeza": [593, 733, 1038], "bag": [2, 14, 64, 102, 122, 133, 138, 140, 148, 183, 188, 288, 353, 354, 374, 408, 519, 520, 521, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 744, 808, 833, 916, 1002, 1005, 1025, 1026, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1048, 1049, 1051], "bagai": 1048, "baggingclassifi": [2, 392, 401, 417, 559, 917, 943, 994, 1038, 1041, 1042, 1043, 1046, 1050, 1051, 1053], "baggingregressor": [2, 137, 401, 417, 558, 918, 994, 1038, 1041, 1043, 1046, 1050, 1051, 1053], "baggipont": 1053, "baharev": 1040, "bahavior": 352, "bahaviour": 352, "baibak": [1043, 1044], "bail": 1046, "bailei": [410, 707], "bajic": 1050, "baji\u0107": 1050, "bakir2003": 415, "bakiri": [837, 1005], "bak\u0131r": [44, 415, 538], "bala": [1035, 1038], "balakumaran": [1042, 1043], "balanc": [2, 43, 45, 52, 64, 86, 99, 104, 134, 140, 144, 167, 183, 217, 218, 263, 269, 272, 274, 275, 285, 311, 367, 390, 392, 408, 409, 414, 415, 417, 505, 518, 537, 543, 544, 550, 560, 564, 567, 643, 661, 662, 669, 671, 677, 678, 679, 706, 711, 732, 746, 785, 790, 803, 804, 821, 867, 907, 909, 912, 915, 917, 938, 939, 993, 1019, 1020, 1025, 1035, 1037, 1040, 1041, 1044, 1045, 1049], "balanced_accuraci": [285, 711, 825, 1004, 1043], "balanced_accuracy_scor": [2, 706, 790, 1004, 1043], "balanced_subsampl": [560, 567, 1043], "balaz": 1039, "baldi": 746, "ball": [102, 296, 304, 410, 416, 450, 695, 847, 848, 852, 855, 857, 858, 859, 1035, 1037, 1040, 1046], "ball_tre": [304, 421, 446, 448, 452, 459, 691, 692, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1007, 1035, 1052], "balltre": [2, 421, 446, 448, 452, 459, 691, 692, 702, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1001, 1035, 1037, 1039, 1043, 1048, 1051, 1052], "baloo": 1001, "baluyot": 1044, "bamidel": 1045, "banana": [48, 1004], "band": [52, 274, 313, 1014], "bandit": 993, "bandol": 317, "bandwidth": [2, 48, 79, 96, 246, 295, 296, 304, 390, 392, 410, 416, 450, 460, 463, 847, 848, 852, 997, 1010, 1046, 1050], "bandwidth_": 852, "bangda": 1043, "banik": 1053, "banilo": [1039, 1040], "bank": [51, 57, 1028], "bannerje": [1051, 1052], "bansal": 1042, "bansod": [1040, 1041, 1042], "bao": [1041, 1049], "baod": 410, "baptbillard": 1048, "baptist": [1038, 1046], "bar": [47, 49, 54, 104, 140, 141, 143, 144, 147, 156, 164, 168, 178, 181, 187, 193, 256, 261, 270, 272, 276, 290, 316, 317, 324, 325, 353, 380, 413, 584, 635, 651, 672, 683, 1004, 1011, 1018, 1020, 1041, 1042, 1043, 1044], "bar_color": 47, "bar_kw": 635, "bar_siz": 352, "baran": 1045, "barang": 1051, "baraniuk": 419, "barankaraku": 1047, "barata": 1051, "barber": 535, "barberogaston": 1047, "bardiya": [1049, 1050], "bare": [373, 1001], "barh": [54, 147, 181, 182, 185, 186, 188, 189, 254, 318, 352, 353, 354], "barikbin": 1051, "barkhorn": 1043, "barklei": 1045, "barmalei": [1039, 1040], "barn": [695, 1001, 1040, 1042, 1045, 1053], "barnes_hut": [291, 695, 1042, 1043], "barnett": 1043, "barnhil": [596, 597], "barnowski": [1049, 1050], "barreca": [888, 1014], "barreto": 1049, "barri": [373, 1043], "barrier": 418, "barrycg": 1045, "bars_": 635, "bartelheim": 1046, "barth\u00e9lemi": [1051, 1052], "bartosz": 1044, "bart\u0142omiej": 1050, "barycent": [303, 1035], "basbug": 1042, "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 82, 89, 90, 91, 100, 102, 103, 107, 111, 120, 121, 126, 132, 134, 135, 140, 144, 145, 146, 147, 149, 152, 154, 157, 162, 165, 166, 170, 175, 176, 178, 187, 188, 189, 192, 193, 199, 200, 201, 202, 207, 213, 214, 221, 230, 231, 233, 240, 247, 248, 250, 268, 269, 274, 284, 288, 290, 291, 304, 309, 311, 312, 314, 316, 322, 324, 328, 335, 339, 345, 353, 356, 365, 372, 373, 374, 375, 376, 379, 380, 381, 382, 386, 390, 392, 393, 395, 404, 406, 408, 409, 411, 415, 416, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 446, 447, 448, 449, 450, 451, 452, 454, 458, 459, 463, 465, 466, 467, 468, 469, 489, 503, 504, 511, 512, 535, 536, 538, 539, 540, 541, 542, 544, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 581, 591, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 613, 614, 619, 620, 621, 624, 627, 635, 636, 638, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 667, 672, 674, 675, 676, 677, 678, 683, 685, 686, 688, 689, 690, 693, 695, 707, 720, 729, 738, 739, 740, 742, 744, 758, 759, 760, 788, 791, 798, 802, 803, 805, 806, 807, 809, 810, 812, 817, 819, 821, 822, 823, 824, 831, 833, 837, 838, 841, 849, 850, 851, 853, 855, 857, 858, 859, 864, 865, 868, 869, 872, 879, 880, 882, 886, 887, 888, 896, 899, 900, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 923, 925, 927, 936, 945, 956, 972, 993, 995, 996, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1030, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1053], "base_classifi": [333, 335, 1017], "base_clf": 439, "base_estim": [408, 556, 557, 558, 559, 838, 841, 904, 993, 1046, 1048, 1049, 1050, 1051], "base_estimator_": [556, 557, 558, 559, 560, 561, 566, 567, 568, 569, 613, 1050], "base_estimator__": 1050, "base_lr": [290, 838], "base_model": 409, "base_x_test": 109, "base_x_train": 109, "basebag": [1041, 1043], "basebal": [57, 373], "basedecisiontre": [1043, 1044, 1047], "basedictionarylearn": 1035, "baseensembl": [1042, 1045], "baseestim": [2, 89, 132, 247, 291, 378, 391, 392, 420, 425, 427, 428, 432, 433, 434, 604, 635, 636, 943, 956, 1035, 1042, 1045, 1047, 1049, 1050], "basegradientboost": 1036, "baselabelpropag": 1042, "baselibsvm": 1045, "baselin": [62, 134, 143, 146, 157, 168, 189, 193, 231, 265, 281, 290, 322, 353, 375, 410, 419, 554, 555, 637, 1004, 1007, 1051], "baseline_similar": 178, "baseline_similarity_bound": 178, "basemap": [50, 304], "basemixtur": [1043, 1044], "basemultilayerperceptron": [1043, 1045], "basenb": 1045, "baserandomproject": [899, 900], "basesearchcv": [1042, 1043], "basesgd": 1018, "basesgdclassifi": 1044, "baseshufflesplit": 1048, "bash": [366, 386], "bashrc": 386, "basi": [2, 43, 45, 53, 125, 170, 175, 177, 214, 265, 308, 323, 341, 345, 370, 376, 379, 410, 415, 417, 454, 537, 625, 635, 642, 694, 886, 1002, 1014, 1019, 1026, 1030, 1043, 1045, 1048], "basic": [146, 169, 170, 175, 176, 178, 179, 182, 183, 211, 285, 318, 346, 365, 367, 378, 380, 382, 390, 392, 410, 414, 415, 417, 614, 625, 903, 915, 916, 917, 918, 993, 994, 1007, 1018, 1022, 1023, 1024, 1025, 1028], "basicconfig": 120, "basil": 1042, "basilisk": 1023, "basis_1": 214, "basis_2": 214, "basri": 516, "bassett": 1000, "bastiaan": [1036, 1037], "bastian": 1043, "bat": 376, "batch": [2, 47, 50, 97, 120, 124, 304, 324, 367, 387, 392, 418, 442, 444, 449, 451, 453, 455, 534, 536, 537, 539, 540, 541, 542, 543, 545, 546, 548, 549, 667, 688, 689, 808, 821, 822, 842, 843, 844, 845, 846, 864, 865, 876, 877, 887, 900, 954, 969, 1008, 1009, 1018, 1035, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1051], "batch_dict_estim": 120, "batch_pca_estim": 120, "batch_siz": [2, 54, 57, 77, 97, 120, 123, 124, 353, 415, 451, 537, 539, 540, 541, 542, 549, 863, 864, 865, 954, 955, 969, 1036, 1043, 1046, 1048, 1049], "batch_size_": 537, "batchkarov": [1036, 1040], "batiss": 1046, "batista": [1043, 1044, 1048], "batistaki": 410, "batoul": 1048, "battista": 1046, "batula": 1042, "bauk": [1043, 1044], "baum": 448, "baumgartn": 1042, "baxlei": 1042, "bay": [2, 32, 64, 67, 137, 152, 170, 202, 261, 273, 352, 373, 408, 415, 417, 418, 539, 552, 553, 659, 842, 843, 844, 845, 846, 888, 998, 999, 1000, 1014, 1026, 1030, 1035, 1036, 1037, 1038, 1043, 1045, 1048, 1050], "bayer": [0, 1035, 1036, 1040, 1053], "bayesian": [2, 46, 64, 87, 98, 118, 182, 183, 192, 198, 200, 214, 219, 255, 257, 261, 262, 274, 282, 286, 296, 301, 312, 316, 415, 439, 527, 531, 535, 614, 647, 648, 659, 660, 800, 801, 868, 870, 882, 887, 993, 1023, 1025, 1026, 1029, 1030, 1041, 1048], "bayesiangaussianmixtur": [2, 256, 257, 262, 801, 1003, 1041, 1043, 1044, 1048, 1049, 1053], "bayesianridg": [2, 87, 181, 193, 194, 198, 322, 630, 647, 1000, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052], "baz": [380, 584], "baze": 1044, "bbbbbb": 97, "bbox": [48, 51, 70, 256, 257, 258, 261, 262, 313], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 179, 276, 347], "bc": 315, "bcde": 143, "bcross_val": 1035, "bde": 143, "bdegraaff": 1050, "bdt": 136, "beach": 1043, "beam": [137, 1035], "bear": [417, 1023], "bearer": 1043, "beatrizsmg": 1047, "beauchamp": [1036, 1039], "beaugnon": 1045, "becam": [154, 393, 1043], "becaus": [43, 44, 52, 57, 62, 64, 75, 81, 83, 103, 113, 116, 134, 139, 146, 149, 168, 171, 174, 177, 186, 187, 189, 194, 199, 206, 213, 217, 219, 221, 231, 246, 247, 257, 265, 268, 271, 272, 277, 290, 291, 307, 308, 309, 311, 315, 316, 317, 318, 332, 341, 345, 352, 353, 354, 356, 360, 361, 365, 366, 373, 382, 383, 386, 390, 391, 392, 401, 404, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 423, 433, 449, 450, 463, 467, 477, 484, 485, 486, 537, 539, 555, 557, 559, 561, 563, 565, 566, 568, 571, 573, 610, 611, 614, 635, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 679, 680, 681, 682, 683, 692, 702, 712, 715, 716, 724, 725, 726, 727, 749, 766, 788, 791, 797, 803, 817, 831, 835, 840, 841, 850, 853, 855, 857, 858, 859, 865, 876, 877, 885, 887, 888, 892, 893, 895, 896, 897, 898, 908, 910, 913, 916, 918, 926, 967, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1009, 1011, 1014, 1019, 1020, 1028, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1051], "becker": [410, 1028, 1038, 1047], "becom": [83, 88, 90, 104, 111, 144, 186, 215, 217, 247, 250, 273, 291, 312, 316, 341, 345, 352, 361, 372, 378, 380, 382, 386, 392, 393, 410, 412, 417, 418, 420, 442, 452, 456, 457, 459, 584, 591, 592, 594, 622, 630, 661, 662, 679, 681, 881, 907, 908, 914, 999, 1000, 1001, 1003, 1007, 1014, 1019, 1036, 1043, 1044, 1047, 1048, 1049, 1050, 1052], "bednar": 1042, "bedroom": [311, 373], "been": [0, 43, 48, 63, 79, 86, 93, 112, 125, 132, 134, 147, 168, 170, 175, 177, 186, 189, 237, 240, 242, 247, 248, 269, 271, 277, 278, 320, 321, 322, 323, 324, 326, 327, 328, 332, 352, 361, 366, 372, 373, 375, 376, 377, 378, 380, 382, 384, 386, 387, 390, 391, 392, 393, 401, 404, 407, 408, 409, 410, 412, 414, 415, 417, 420, 435, 439, 471, 473, 474, 476, 480, 489, 526, 537, 539, 552, 553, 570, 571, 584, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 636, 637, 661, 662, 669, 670, 671, 676, 678, 679, 680, 681, 723, 781, 782, 783, 796, 803, 806, 807, 809, 817, 825, 826, 831, 832, 856, 904, 907, 994, 996, 997, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1014, 1016, 1018, 1019, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "befor": [2, 47, 51, 62, 77, 102, 104, 107, 116, 144, 149, 154, 164, 177, 179, 180, 181, 183, 186, 187, 189, 195, 198, 200, 202, 206, 247, 265, 271, 278, 293, 294, 312, 315, 316, 318, 323, 344, 361, 365, 366, 373, 376, 378, 380, 382, 383, 384, 386, 387, 390, 392, 393, 395, 396, 404, 406, 408, 410, 411, 412, 414, 415, 417, 419, 422, 423, 445, 449, 450, 451, 461, 463, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 492, 504, 537, 540, 541, 542, 543, 544, 547, 549, 550, 564, 565, 568, 570, 572, 573, 580, 591, 592, 594, 614, 630, 631, 633, 648, 669, 670, 671, 674, 679, 681, 690, 695, 697, 800, 801, 808, 809, 821, 822, 824, 829, 831, 833, 847, 848, 855, 856, 857, 858, 859, 862, 867, 868, 871, 874, 881, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 904, 915, 916, 926, 951, 987, 994, 1000, 1001, 1004, 1010, 1014, 1018, 1019, 1020, 1024, 1025, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "beforehand": [254, 294, 1020], "begin": [57, 132, 168, 170, 266, 273, 290, 323, 352, 361, 378, 383, 384, 392, 407, 410, 417, 556, 557, 562, 564, 565, 669, 670, 679, 680, 681, 993, 996, 1000, 1004, 1014, 1016, 1018, 1043, 1049, 1050], "beginn": 1024, "behav": [43, 51, 85, 90, 217, 265, 266, 311, 322, 341, 361, 378, 384, 391, 410, 411, 414, 887, 1000, 1014, 1019, 1021, 1024, 1035, 1042, 1044, 1048, 1049], "behavior": [62, 72, 74, 85, 181, 183, 186, 187, 201, 213, 231, 247, 254, 262, 263, 265, 274, 276, 308, 309, 311, 313, 318, 341, 361, 366, 372, 375, 378, 380, 382, 386, 387, 392, 406, 408, 409, 410, 414, 417, 418, 539, 554, 569, 669, 670, 671, 679, 680, 681, 702, 704, 732, 733, 786, 787, 790, 803, 804, 805, 808, 817, 820, 821, 822, 823, 824, 844, 880, 907, 908, 993, 1000, 1004, 1005, 1010, 1014, 1019, 1025, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "behaviour": [74, 125, 149, 214, 215, 231, 343, 378, 392, 404, 410, 417, 562, 563, 567, 568, 605, 804, 805, 808, 820, 821, 822, 823, 824, 905, 915, 916, 976, 993, 994, 1004, 1014, 1043, 1046, 1047, 1050, 1051], "behind": [37, 86, 111, 134, 288, 380, 382, 386, 412, 417, 1003, 1007, 1016, 1051], "behrend": 1045, "behrouz": 1049, "behzad": 1041, "beier": 1046, "beimportantfew": 398, "being": [61, 64, 70, 85, 88, 113, 116, 125, 134, 138, 149, 151, 170, 175, 188, 191, 207, 247, 250, 264, 271, 309, 315, 316, 341, 345, 352, 354, 376, 377, 378, 380, 383, 390, 392, 393, 409, 410, 412, 414, 417, 418, 419, 420, 421, 423, 443, 444, 446, 447, 452, 458, 471, 477, 496, 526, 572, 643, 652, 659, 675, 677, 690, 693, 697, 715, 721, 737, 739, 786, 792, 800, 847, 848, 853, 855, 857, 858, 859, 882, 900, 952, 993, 994, 1000, 1003, 1004, 1007, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1035, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "beings": 352, "beirouti": 1042, "belatedli": 1042, "belief": [57, 271, 863, 1009], "believ": [352, 353, 386, 390, 1028], "belkin": 1001, "belkina": [695, 1001], "bell": [2, 524, 1043, 1045, 1047, 1048], "bella": 1004, "bella2012": 1004, "bellet": [1042, 1043, 1044], "belmont": [915, 916, 1020], "belong": [61, 64, 66, 88, 93, 250, 271, 320, 326, 332, 372, 373, 407, 408, 410, 411, 413, 414, 417, 425, 442, 445, 449, 450, 451, 453, 455, 526, 715, 734, 810, 816, 828, 874, 888, 959, 960, 1000, 1003, 1004, 1006, 1007, 1008, 1010, 1019, 1023], "below": [0, 2, 48, 52, 62, 63, 64, 68, 70, 88, 93, 102, 107, 111, 120, 132, 138, 141, 146, 163, 185, 187, 197, 209, 210, 213, 215, 229, 230, 234, 238, 242, 247, 250, 252, 254, 266, 269, 274, 276, 277, 278, 311, 315, 320, 321, 322, 323, 324, 325, 326, 327, 328, 346, 352, 360, 361, 366, 371, 372, 376, 378, 380, 382, 383, 387, 392, 393, 396, 398, 410, 412, 413, 414, 415, 417, 418, 419, 420, 446, 448, 450, 473, 474, 480, 493, 495, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 513, 534, 540, 545, 551, 585, 598, 599, 600, 601, 602, 603, 636, 649, 655, 661, 662, 670, 671, 676, 678, 695, 702, 708, 746, 766, 800, 801, 803, 814, 817, 836, 867, 870, 880, 881, 884, 890, 896, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1023, 1031, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "beltran": 1053, "ben": [1037, 1038, 1039, 1042, 1043, 1044, 1047, 1052], "ben3940": 1049, "benavoli": 271, "benbihi": 1044, "bench_k_mean": 91, "benchmark": [291, 322, 353, 354, 365, 371, 373, 378, 390, 396, 403, 408, 470, 518, 905], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 345, "benedek": 1051, "benedikt": 1039, "benediktsson": [1035, 1036, 1037], "benefici": [104, 106, 109, 120, 152, 265, 311, 312, 328, 404, 409, 1001], "benefit": [43, 80, 89, 106, 107, 134, 135, 144, 149, 186, 227, 237, 243, 245, 265, 293, 324, 365, 378, 387, 392, 408, 410, 450, 463, 470, 511, 570, 571, 661, 662, 669, 670, 671, 679, 680, 681, 838, 905, 907, 993, 999, 1007, 1014, 1024, 1028, 1035, 1038, 1039, 1040, 1047, 1048, 1049, 1050], "benfield": 1042, "bengio": [271, 864, 865, 993, 1017], "bengtsson": 1039, "benhel": 379, "benhur": 1048, "benign": [168, 375, 503], "benjamin": [644, 1037, 1038, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "benjamini": [598, 1041, 1042], "benjaminirv": 1040, "benjastudio": [1043, 1044], "benn": 1043, "bennett": [168, 375, 1004], "benni": 1049, "benoit": 1052, "beno\u00eet": 1048, "benson": 57, "bentlei": 1007, "bera": 1050, "berei": 1049, "beren": 695, "berenbaum": 1051, "bereng": 1048, "berg": [373, 1036, 1037, 1047, 1052], "bergman": [1052, 1053], "bergstra": [993, 1035, 1036], "berk": 1035, "berkecanrizai": 1050, "berkelei": [644, 915, 916], "berlin": [175, 410, 415, 538, 699, 729, 759, 1004], "bernardo": 1041, "bernd": 1050, "bernhard": [44, 415, 538, 838, 873, 903, 1005, 1010, 1019, 1041], "bernhardsson": 1028, "berni": 1046, "bernoulli": [2, 309, 418, 419, 842, 843, 844, 845, 846, 863, 864, 865, 870, 1000, 1014, 1026, 1030, 1035], "bernoullinb": [2, 152, 367, 843, 844, 845, 846, 1005, 1006, 1036, 1037, 1039, 1042, 1047, 1048, 1050], "bernoullirbm": [2, 309, 864, 865, 1009, 1014, 1037, 1038, 1047, 1049, 1052], "bertin": 1028, "bertoncelj": 1046, "bertrand": [0, 399, 1035, 1041, 1042, 1047, 1048], "bertrandhaut": [1043, 1044], "besid": [154, 243, 285, 378, 383, 592, 993, 1043], "bessel": [420, 622], "bessi": 325, "besson": [1040, 1041], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 80, 87, 88, 94, 102, 103, 104, 105, 109, 115, 120, 124, 127, 128, 129, 137, 140, 143, 145, 146, 147, 149, 154, 157, 168, 170, 171, 176, 181, 186, 193, 198, 200, 202, 209, 227, 228, 229, 233, 236, 240, 245, 246, 250, 257, 258, 262, 264, 265, 269, 270, 271, 272, 275, 278, 279, 282, 283, 286, 290, 295, 300, 312, 317, 322, 323, 328, 341, 344, 345, 352, 353, 354, 359, 365, 366, 372, 375, 377, 378, 381, 384, 391, 392, 396, 401, 404, 407, 408, 409, 410, 414, 415, 417, 418, 419, 420, 433, 445, 448, 449, 451, 453, 454, 455, 461, 464, 467, 474, 484, 485, 486, 541, 548, 549, 555, 557, 559, 560, 561, 562, 563, 565, 567, 568, 569, 571, 573, 596, 597, 600, 605, 613, 614, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 691, 692, 693, 696, 697, 706, 711, 722, 723, 724, 725, 726, 727, 731, 732, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 786, 787, 788, 790, 793, 794, 795, 796, 797, 799, 800, 801, 803, 806, 807, 817, 830, 832, 835, 840, 841, 850, 858, 864, 865, 908, 910, 913, 915, 916, 917, 918, 993, 998, 999, 1000, 1001, 1004, 1007, 1008, 1010, 1018, 1020, 1023, 1024, 1028, 1035, 1038, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "best_alpha": 1035, "best_c": 348, "best_c_scal": 348, "best_clf": 105, "best_estim": [803, 806, 807, 817], "best_estimator_": [45, 87, 104, 105, 106, 109, 127, 246, 261, 265, 269, 271, 272, 275, 283, 295, 803, 806, 807, 817, 993, 1042], "best_idx": [57, 270], "best_index": [269, 275], "best_index_": [270, 275, 803, 806, 807, 817], "best_loss": [679, 681], "best_loss_": [864, 865, 1050], "best_low_complex": 270, "best_n_it": 461, "best_paramet": 272, "best_parameters_": 261, "best_params_": [103, 105, 146, 170, 246, 261, 269, 275, 322, 341, 391, 803, 806, 807, 817, 993], "best_recal": 269, "best_recall_std": 269, "best_recall_threshold": 269, "best_scor": 275, "best_score_": [103, 105, 246, 265, 272, 275, 276, 341, 409, 676, 678, 803, 806, 807, 817, 825, 1046], "best_score_idx": 270, "best_threshold_": [265, 285, 328, 825], "best_validation_score_": [864, 865, 1050], "beta": [2, 80, 115, 185, 217, 384, 408, 410, 413, 539, 541, 543, 550, 647, 732, 733, 739, 745, 786, 798, 800, 1004, 1037, 1040, 1042, 1044, 1045], "beta_": [217, 415], "beta_1": [864, 865], "beta_2": [864, 865], "beta_k": 415, "beta_loss": [54, 541, 543, 550, 1042], "betatim": 1050, "better": [43, 44, 48, 52, 57, 58, 61, 67, 83, 88, 106, 107, 109, 110, 111, 112, 116, 120, 123, 126, 137, 140, 144, 145, 146, 149, 154, 163, 174, 175, 176, 178, 181, 186, 188, 194, 198, 199, 202, 213, 214, 215, 221, 228, 230, 231, 237, 245, 246, 247, 250, 261, 264, 265, 271, 273, 274, 277, 280, 281, 284, 288, 290, 309, 315, 316, 324, 325, 341, 348, 352, 353, 354, 356, 361, 365, 373, 377, 378, 379, 380, 383, 384, 386, 392, 395, 398, 406, 408, 410, 412, 414, 415, 416, 417, 418, 420, 451, 452, 541, 543, 550, 562, 563, 564, 565, 610, 611, 633, 674, 680, 695, 712, 728, 737, 742, 745, 766, 801, 832, 842, 843, 844, 845, 846, 847, 848, 853, 864, 865, 884, 885, 888, 896, 899, 900, 907, 908, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1017, 1018, 1020, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "better_prob": 271, "between": [2, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 86, 93, 94, 99, 115, 123, 125, 126, 128, 134, 137, 140, 143, 144, 146, 149, 163, 170, 175, 176, 178, 183, 185, 186, 187, 188, 193, 198, 199, 201, 204, 208, 209, 213, 214, 215, 217, 218, 221, 231, 233, 240, 245, 247, 250, 263, 265, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 284, 285, 288, 290, 293, 297, 298, 300, 301, 311, 316, 318, 323, 328, 333, 341, 345, 347, 348, 352, 353, 354, 360, 361, 365, 366, 373, 378, 380, 382, 386, 387, 390, 391, 392, 393, 401, 404, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 431, 442, 443, 445, 446, 447, 448, 449, 452, 454, 455, 456, 458, 459, 460, 465, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 505, 517, 518, 524, 527, 530, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 552, 553, 556, 557, 562, 563, 565, 566, 567, 568, 587, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 614, 623, 630, 635, 636, 637, 642, 645, 648, 649, 650, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 679, 681, 682, 684, 687, 691, 693, 695, 697, 698, 699, 702, 704, 706, 707, 708, 710, 712, 713, 717, 718, 719, 720, 722, 727, 728, 729, 732, 733, 734, 737, 739, 740, 746, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 795, 796, 798, 799, 800, 801, 803, 804, 805, 806, 808, 812, 820, 821, 822, 823, 824, 832, 833, 835, 837, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 865, 871, 874, 875, 877, 878, 880, 881, 884, 885, 886, 888, 893, 896, 897, 901, 907, 908, 912, 915, 916, 917, 918, 920, 948, 960, 961, 972, 993, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1024, 1025, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "bewar": 419, "beyond": [43, 64, 214, 215, 265, 365, 367, 377, 378, 390, 408, 417, 732, 733, 741, 786, 787, 790, 912, 1001, 1005, 1014, 1019, 1024, 1043], "beyst": 1049, "bezuidenhout": 1048, "bf5fff": 118, "bfg": [307, 613, 614, 651, 652, 661, 672, 675, 677, 683, 690, 1007, 1008, 1050], "bgm": 800, "bharat": [414, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "bharathi": 1046, "bhardwaj": [1042, 1043], "bhargav": 1041, "bhaskaran": [1042, 1043], "bhat": [1048, 1050, 1051, 1052], "bhattacharya": 1043, "bhattarai": 1045, "bhavika": 1047, "bhoomika": 1050, "bhsu": 1039, "bhtsne": [695, 1042], "bi": [88, 418], "bia": [43, 64, 109, 122, 133, 141, 146, 149, 183, 186, 188, 193, 194, 196, 276, 306, 345, 348, 361, 373, 392, 408, 412, 416, 417, 420, 527, 559, 562, 563, 610, 611, 617, 645, 651, 652, 661, 662, 672, 673, 683, 864, 865, 880, 882, 886, 892, 893, 895, 896, 897, 898, 916, 925, 999, 1000, 1003, 1004, 1008, 1009, 1012, 1018, 1025], "bianca": 64, "bianp": 384, "bias": [48, 113, 123, 146, 153, 185, 186, 188, 276, 373, 395, 408, 417, 527, 552, 863, 887, 898, 999, 1003, 1012, 1018, 1020], "bibhash": [1045, 1046], "bibl": 353, "bibliograph": 378, "bibtex": 0, "bic": [2, 159, 183, 192, 199, 200, 201, 207, 221, 419, 504, 654, 656, 657, 658, 659, 801, 868, 887, 993, 1003, 1025, 1035, 1042, 1048, 1049], "bic_criterion": 200, "bicker": 1045, "biclust": [2, 6, 59, 102, 332, 334, 352, 353, 354, 418, 425, 451, 453, 455, 490, 514, 516, 594, 722, 798, 1004, 1025, 1029, 1030, 1037, 1041], "bicluster_ncut": 57, "biclustermixin": 2, "biclusters_": [58, 59, 425, 453, 455], "bidu": [1048, 1049], "biernat": 1047, "big": [43, 79, 93, 95, 218, 234, 250, 262, 366, 378, 384, 393, 412, 418, 422, 541, 564, 565, 567, 568, 809, 831, 842, 843, 844, 845, 846, 1024, 1028, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "bigg": [420, 622], "bigger": [47, 75, 93, 226, 271, 309, 345, 350, 353, 364, 366, 418, 440, 441, 511, 541, 853, 1030], "biggest": [410, 413, 415, 445], "biggest_inertia": [410, 445], "biggio": 1046, "bigram": [272, 418, 591, 592, 594], "bigram_vector": 418, "bijil": 1049, "bike": 1011, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 187], "bilbro": 1042, "bill": [1045, 1046], "billaud": 1043, "billi": 1039, "billing": [1038, 1039, 1040], "billion": 1028, "bimod": [315, 416], "bin": [2, 43, 61, 62, 64, 86, 107, 136, 140, 213, 244, 250, 265, 277, 296, 311, 312, 313, 314, 315, 317, 318, 376, 386, 396, 408, 416, 417, 440, 441, 450, 463, 564, 565, 870, 872, 886, 953, 1043, 1044, 1045, 1049, 1053], "bin_cent": [86, 213], "bin_edg": 86, "bin_edges_": [86, 312, 872], "bin_seed": [79, 96, 450, 463, 1046], "binar": [2, 36, 278, 280, 281, 370, 372, 757, 842, 871, 872, 874, 878, 880, 888, 891, 1004, 1006, 1030, 1049, 1051], "binari": [2, 30, 47, 53, 62, 64, 138, 140, 150, 152, 165, 178, 186, 191, 204, 206, 213, 221, 234, 241, 250, 253, 265, 268, 269, 274, 280, 285, 288, 295, 341, 345, 360, 361, 372, 373, 374, 382, 383, 392, 396, 404, 407, 408, 409, 410, 417, 418, 420, 439, 440, 441, 454, 489, 503, 511, 512, 523, 526, 552, 553, 556, 558, 562, 564, 569, 570, 571, 584, 591, 592, 594, 596, 597, 605, 613, 630, 631, 632, 633, 634, 635, 636, 661, 662, 669, 671, 676, 677, 678, 679, 703, 706, 710, 711, 712, 715, 716, 718, 721, 723, 725, 730, 732, 733, 737, 738, 741, 742, 743, 744, 746, 785, 786, 787, 790, 791, 792, 797, 799, 802, 803, 804, 806, 807, 808, 809, 817, 821, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 842, 853, 863, 874, 878, 880, 888, 891, 907, 909, 912, 923, 966, 994, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1032, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1052, 1053], "binary_crossentropi": 1049, "binary_eros": 53, "binary_onli": [1045, 1046], "binarytre": [852, 1039, 1043, 1047], "bincount": [392, 414, 560, 564, 567, 661, 662, 669, 671, 677, 678, 679, 907, 909, 912, 915, 917, 938, 939, 1042], "bind": [396, 1023, 1035, 1042, 1043], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360], "binesh": [1051, 1052], "binet": [1045, 1050], "bing": [1041, 1042], "bingham": 1016, "binned_numer": [213, 231], "binom": 1000, "binomi": [145, 148, 417, 556, 562, 564, 1000, 1049, 1052], "bio": 274, "biocsklearn": 1023, "bioinformat": [631, 994], "biola": 1053, "biologi": 50, "biometrika": [883, 895], "biostatist": [412, 480], "bipartit": [407, 455, 514, 1009], "biprateep": 1047, "birch": [2, 71, 79, 97, 183, 324, 367, 392, 448, 451, 515, 1025, 1029, 1030, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "birch_model": 77, "bird": [585, 721, 757, 1004], "birodkar": [1040, 1041, 1043], "bischl": 372, "bisect": [2, 71, 75, 90, 91, 92, 93, 94, 179, 183, 267, 445, 449, 515, 1025, 1049], "bisect_km": 324, "bisect_mean": 445, "bisecting_strategi": [410, 445], "bisectingkmean": [2, 78, 410, 449, 1049, 1050, 1051], "bisector": 70, "bishop": [535, 537, 544, 744, 800, 1000, 1005, 1019], "bistochast": [407, 453], "biswadip": 1045, "biswaroop": 1050, "bit": [43, 52, 64, 86, 109, 123, 211, 215, 288, 311, 341, 353, 361, 365, 373, 376, 392, 396, 398, 417, 418, 585, 592, 661, 837, 933, 934, 1001, 1005, 1022, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1052, 1053], "bithash": 643, "bithash_": 643, "bitli": 1028, "bitmap": 375, "bittarello": 1048, "bjerr": 1043, "bla": [365, 366, 376, 379, 384, 386, 781, 1035, 1043, 1044, 1046, 1047, 1053], "black": [43, 48, 49, 50, 52, 63, 70, 79, 82, 88, 89, 111, 112, 118, 120, 122, 142, 163, 166, 170, 171, 175, 176, 179, 182, 186, 187, 193, 200, 202, 203, 205, 209, 213, 214, 215, 219, 222, 225, 226, 231, 240, 250, 256, 259, 296, 306, 307, 309, 335, 350, 357, 358, 359, 378, 396, 403, 410, 417, 420, 558, 559, 634, 1010, 1011, 1020], "blackberri": 317, "blackburn": [1038, 1041], "blackd0t": 1045, "blair": [45, 373], "blakeflei": 1041, "blame": 378, "blanc": 317, "blanchard": [1039, 1040], "blank": [93, 383, 994, 1020], "bldgtype": 143, "bleed": 1028, "blei": [415, 539, 800], "bleich": [187, 1011], "bleki": 1047, "blend": [142, 154, 317, 392, 414], "bli": [366, 376, 390], "blind": [119, 122, 183, 212, 352, 415, 536, 544, 1025], "blink": 341, "blis_num_thread": 366, "blob": [2, 61, 69, 70, 77, 79, 90, 95, 97, 410, 450, 515], "blobs_param": 240, "block": [2, 296, 311, 324, 373, 375, 378, 383, 386, 392, 407, 410, 413, 416, 454, 455, 464, 475, 481, 482, 490, 491, 514, 516, 698, 951, 1007, 1009], "block_siz": [475, 481, 482, 1039], "blocker": [382, 1053], "blocknum": 47, "blockwis": [407, 1000], "blog": [324, 365, 378, 384, 386, 393, 1046], "blogpost": 383, "blondel": [0, 400, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "blood": [168, 241, 375], "bloom": [387, 968], "blown": 344, "blue": [46, 48, 52, 58, 59, 63, 70, 111, 118, 120, 134, 137, 141, 148, 149, 151, 154, 156, 166, 175, 177, 191, 194, 200, 202, 209, 211, 236, 244, 264, 265, 266, 271, 307, 316, 321, 327, 332, 375, 410, 415, 1052], "blueviolet": [227, 297, 340], "blum": 1042, "blyston": [1045, 1046], "bmaisonn": 1047, "bmalezieux": 1048, "bmatrix": [407, 996], "bmc": 1014, "bme": 1053, "bmi": [168, 200, 202, 251, 375, 1012], "bmreinig": 1049, "bmug": 57, "bmva": 674, "bmvc": [674, 1000], "bo": [63, 1047], "board": 0, "boat": 325, "bob": [1036, 1042], "bobyrev": 1042, "boca": 1000, "bodega": 317, "bodenhof": [407, 722], "bodi": [47, 102, 168, 251, 325, 375], "body_bow": 102, "body_stat": 102, "boe": 51, "boechat": 1042, "boenisch": 1046, "boerner": 1049, "boersma": 1041, "bogazici": 375, "bogdan": 1035, "boggavarapu": 1047, "bohl": [1047, 1049], "bohn\u00e9": 1048, "boil": [134, 381, 392, 412], "boilerpl": [247, 380, 1028], "boisberrang": [0, 399, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bold": [93, 146, 202, 208, 378], "boll": 1000, "bolleddula": 1053, "bolmier": [1046, 1047, 1051], "boltzmann": [2, 105, 160, 183, 203, 305, 505, 661, 716, 833, 863, 864, 865, 867, 893, 1025, 1029, 1030, 1037], "bommarito": [1038, 1039], "bonald": 1050, "bone": [226, 350], "bonferroni": 271, "bonu": [231, 376, 378], "bonusmalu": [213, 231], "boo": [168, 375], "book": [102, 445, 449, 451, 837, 842, 846, 1000, 1001, 1002, 1005, 1047], "booktitl": 0, "bool": [82, 99, 112, 182, 231, 360, 378, 422, 423, 424, 425, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 522, 525, 526, 527, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 703, 705, 706, 710, 711, 712, 714, 715, 716, 717, 729, 730, 731, 732, 733, 734, 741, 744, 745, 757, 759, 764, 766, 770, 772, 777, 781, 785, 786, 787, 788, 790, 792, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 822, 825, 826, 827, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 929, 931, 932, 933, 934, 945, 946, 951, 952, 965, 968, 974, 976, 984, 989, 990, 991, 992, 994, 1044, 1047, 1048], "bool_": 215, "boolean": [2, 132, 247, 360, 373, 378, 380, 387, 411, 417, 418, 419, 466, 564, 565, 584, 585, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 632, 635, 636, 639, 652, 674, 702, 781, 836, 842, 863, 870, 890, 924, 929, 987, 994, 1000, 1006, 1011, 1014, 1020, 1035, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1053], "boom": 1053, "boost": [2, 14, 46, 52, 103, 133, 134, 135, 138, 139, 141, 151, 154, 157, 177, 183, 188, 189, 194, 215, 221, 236, 270, 272, 307, 315, 317, 324, 327, 379, 384, 392, 409, 419, 450, 468, 469, 492, 499, 504, 523, 556, 557, 562, 563, 564, 565, 567, 568, 635, 636, 637, 638, 744, 745, 751, 753, 793, 803, 806, 807, 808, 824, 830, 833, 868, 880, 881, 1000, 1004, 1023, 1025, 1026, 1030, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1048], "booster": 1040, "boosting_error": 134, "boostingcolumntransform": 154, "boostingdecis": 417, "booth": 1042, "bootstrap": [137, 138, 145, 181, 274, 283, 322, 414, 417, 557, 558, 559, 560, 561, 566, 567, 568, 939, 974, 1000, 1035, 1036, 1038, 1040, 1043, 1045, 1048], "bootstrap_featur": [417, 558, 559], "bootstrap_indic": 274, "borchmann": 1050, "border": [448, 1045], "borderaxespad": 111, "borderpad": 357, "borderwidth": 140, "borg": [693, 697, 1001], "borgn": 1048, "bori": [1039, 1047, 1051], "borja": 1039, "born": 1041, "borovec": 1049, "borovikova": 1046, "bosch": 1048, "bossan": [1047, 1049, 1050, 1051, 1053], "bossch": [0, 399, 1042, 1043, 1044, 1048], "boston": 1028, "bot": [378, 382, 1009, 1049, 1052, 1053], "botelho": 1047, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 70, 77, 87, 88, 97, 103, 109, 111, 115, 116, 125, 127, 132, 137, 140, 141, 143, 144, 149, 153, 154, 157, 163, 164, 166, 168, 170, 177, 179, 185, 186, 187, 188, 193, 198, 199, 200, 202, 213, 214, 215, 217, 218, 219, 221, 231, 237, 246, 247, 248, 256, 257, 258, 259, 260, 261, 265, 271, 272, 273, 274, 278, 280, 282, 284, 291, 303, 311, 315, 316, 320, 322, 326, 332, 333, 338, 343, 345, 352, 353, 354, 360, 361, 365, 366, 367, 371, 372, 373, 376, 378, 380, 382, 384, 385, 387, 390, 391, 392, 393, 396, 401, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 420, 423, 439, 448, 454, 464, 470, 477, 484, 485, 486, 487, 490, 491, 499, 500, 503, 505, 508, 510, 511, 512, 537, 541, 543, 550, 554, 558, 559, 560, 566, 567, 568, 569, 570, 580, 591, 592, 594, 600, 610, 611, 630, 635, 636, 646, 660, 661, 662, 675, 677, 679, 681, 690, 702, 707, 715, 719, 732, 733, 734, 739, 741, 760, 764, 770, 777, 781, 786, 787, 790, 791, 792, 798, 806, 807, 809, 826, 836, 864, 865, 879, 881, 883, 895, 900, 905, 907, 908, 915, 917, 924, 937, 943, 952, 966, 978, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "botstein": [631, 994], "bottleneck": [365, 384, 417, 450, 864, 865], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 84, 86, 95, 97, 118, 144, 152, 157, 213, 224, 240, 256, 258, 259, 262, 268, 271, 282, 296, 311, 331, 333, 341, 378, 408, 410, 416, 590, 919, 998, 1000, 1004, 1012, 1024], "bottom_h": 311, "bottou": [679, 680, 681, 1008, 1018], "bou": [1050, 1051], "boucaud": 1043, "boucher": 1042, "bouckaert": 271, "boukhobza": 1053, "boulard": 1052, "bould": 410, "bouldin": [2, 728], "boulogn": 1038, "boun": 375, "bound": [2, 64, 174, 176, 178, 183, 215, 231, 239, 270, 385, 410, 415, 418, 420, 421, 446, 491, 505, 515, 526, 539, 566, 598, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 635, 638, 640, 653, 657, 661, 680, 708, 738, 791, 800, 801, 847, 848, 884, 896, 899, 900, 901, 909, 910, 911, 914, 937, 1000, 1003, 1004, 1007, 1016, 1018, 1019, 1021, 1025, 1043, 1046, 1047, 1049], "bound_": 539, "boundari": [2, 50, 53, 62, 63, 64, 67, 70, 91, 93, 133, 136, 142, 152, 156, 161, 171, 172, 174, 183, 187, 197, 214, 222, 240, 245, 248, 274, 286, 299, 301, 302, 304, 306, 311, 313, 316, 329, 334, 336, 337, 338, 339, 340, 341, 343, 349, 350, 357, 374, 408, 417, 418, 420, 452, 458, 507, 539, 552, 553, 572, 591, 592, 594, 634, 738, 764, 803, 836, 849, 855, 857, 858, 859, 882, 886, 903, 904, 909, 911, 912, 915, 937, 998, 1007, 1010, 1014, 1017, 1018, 1019, 1025, 1035, 1037, 1039, 1048, 1049, 1050, 1052], "bounding_ax_": [385, 635], "boundscheck": [366, 379], "bourassa": 417, "bourbeau": [1042, 1043, 1044], "bourboux": 1046, "bourguignat": 1040, "bournhonesqu": 1045, "bousquet": 903, "boutili": 1016, "boutsidi": 415, "bow": 411, "bown": 1041, "bowyer": 1053, "box": [43, 49, 66, 88, 187, 188, 234, 288, 311, 315, 385, 415, 417, 515, 558, 559, 883, 895, 919, 921, 1004, 1005, 1011, 1014, 1020, 1043, 1051], "boxplot": [49, 111, 147, 186, 189, 285, 320], "boxplot_runtim": 49, "boxstyl": [48, 313], "boy": 1049, "boyd": 1000, "boyl": [1052, 1053], "boyuan": [1039, 1040, 1041], "bp": [49, 147, 168, 200, 202, 375, 1012], "bpo": 881, "br": 136, "br_estim": 181, "bracket": [378, 1000], "bradi": 1042, "bradlei": [168, 375, 1000], "bradshaw": [1038, 1039, 1042], "bradypu": [50, 304, 373, 501], "bradypus_variegatus_0": 50, "brain": 372, "branch": [365, 376, 378, 381, 382, 410, 417, 444, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 915, 916, 917, 918, 920, 1007, 1011, 1020], "branching_factor": 444, "brand": [393, 396], "brandon": [1041, 1042, 1049, 1050], "brandt": 1046, "brandyn": 1035, "brault": 1042, "braun": 1043, "bravi": 1041, "braycurti": [452, 459, 702, 781, 782, 783, 1007], "braycurtisdist": 702, "brc": [410, 444], "brdav": 1053, "bre": [2, 637, 1020], "bread": 1028, "breadth": [847, 848, 852, 1028, 1037], "breadth_first": [847, 848, 852], "break": [2, 55, 74, 80, 102, 112, 183, 202, 205, 219, 247, 258, 288, 323, 331, 336, 352, 354, 378, 382, 384, 391, 410, 471, 515, 642, 777, 781, 784, 800, 880, 887, 892, 909, 912, 926, 1000, 1003, 1012, 1014, 1019, 1024, 1025, 1035, 1036, 1042, 1043, 1045, 1047, 1051], "break_ti": [349, 909, 912, 1019, 1045], "breakdown": [111, 112, 230, 682, 1000], "breakdown_": 682, "breast": [2, 168, 371, 503, 1012, 1030, 1040], "breast_canc": 333, "breast_cancer_data": 168, "brecht": 644, "bredin": 1039, "breiman": [188, 414, 417, 519, 520, 521, 558, 559, 567, 568, 637, 915, 916, 1012, 1020], "brekk": 1050, "brendan": [73, 442, 456, 1051, 1052, 1053], "brenden": 1049, "brenner": 1004, "breno": [1042, 1043], "brent": [1039, 1043, 1044], "brentfagan": 1044, "brett": [1038, 1040, 1041, 1042, 1043, 1050], "brettingen": 1041, "breuer": 1046, "breunig": [410, 452, 459, 853, 1010], "breve": 1051, "brevin": [1051, 1052], "brew": [145, 376, 396], "brian": [0, 400, 711, 1004, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049], "brice": [1047, 1048], "bridg": [390, 1001], "brief": [378, 1002], "briefli": [280, 377, 391, 417, 993, 1045], "brier": [2, 61, 62, 64, 408, 712], "brier1950": 1004, "brier_scor": 61, "brier_score_loss": [2, 61, 62, 408, 1004, 1043, 1044, 1045, 1053], "brigata": 375, "bright": 341, "brighter": 178, "brigi": [1046, 1047], "brigitta": [1045, 1046, 1047, 1051, 1053], "bring": [186, 311, 415, 679, 681, 1001, 1028], "british": 418, "brittl": [74, 410], "broad": [378, 392, 1023], "broadcast": 630, "broader": [313, 1000, 1027], "broadli": [392, 410], "brocchini": 1047, "brochart": 1052, "brockherd": 1037, "brodersen": 711, "broke": 1042, "broken": [396, 414, 602, 603, 638, 723, 929, 1004, 1020, 1038, 1042, 1043, 1044, 1046, 1049], "brook": [1038, 1039, 1047], "brought": [185, 556, 557, 560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918], "brown": [50, 118, 304, 373, 501, 631, 994, 1040, 1042, 1043, 1044, 1047], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 378, 386, 1014, 1052], "broyden": 1000, "brr": 193, "brr_poli": 193, "brr_score": 193, "bruce": [1045, 1046], "brucher": [0, 400, 1035], "brummitt": [1042, 1043], "brunak": 746, "brunner": 1039, "bruno": [1046, 1047, 1048, 1053], "brutal": 341, "brute": [291, 390, 405, 414, 421, 446, 448, 452, 459, 635, 636, 691, 692, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 1011, 1030, 1039, 1043, 1047, 1050, 1051, 1052, 1053], "bry": [205, 222], "bryan": [1035, 1038, 1044, 1045, 1048], "br\u00f6mmel": [1049, 1050], "br\u00fblade": 317, "bsa": 767, "bsas_in_radian": 767, "bscikit": 1035, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 384, 390], "bsh": 1050, "bsmtfinsf1": [143, 154], "bsmtfinsf2": 143, "bsmthalfbath": 143, "bsmtunfsf": 154, "bspline": 886, "bsplines_": [214, 886], "bsr": [933, 934, 1048], "bt": 418, "btol": [675, 677], "buck": 630, "budarz": 1048, "buddha": 1040, "budget": [0, 143, 842, 843, 844, 845, 846, 993], "bueno": 767, "buffer": [83, 1048, 1053], "buffer_mb": 1035, "bug": [247, 320, 321, 322, 323, 324, 325, 326, 327, 328, 376, 380, 381, 382, 383, 386, 390, 392, 1024, 1035, 1036, 1037, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bugfix": [1035, 1049], "buguen": 1035, "buhmann": 711, "build": [0, 2, 7, 17, 35, 43, 46, 55, 68, 78, 88, 100, 106, 124, 134, 142, 144, 151, 157, 165, 167, 180, 181, 183, 186, 221, 276, 279, 288, 290, 291, 308, 309, 312, 317, 318, 354, 361, 365, 366, 367, 374, 380, 381, 382, 383, 384, 392, 396, 403, 410, 414, 417, 418, 444, 492, 504, 506, 527, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 588, 589, 591, 592, 594, 630, 631, 633, 694, 716, 717, 804, 808, 812, 821, 827, 829, 868, 885, 887, 915, 916, 917, 918, 920, 947, 951, 993, 994, 1001, 1004, 1008, 1010, 1014, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1035, 1038, 1040, 1041, 1042, 1044, 1047], "build_analyz": [418, 591, 592, 594, 1045], "build_preprocessor": [418, 591, 592, 594, 1045], "build_projection_oper": 53, "build_token": [57, 418, 591, 592, 594], "build_tool": [378, 382, 386], "builder": [47, 49, 348, 382], "buildtool": 376, "built": [2, 25, 66, 116, 132, 134, 135, 142, 144, 188, 221, 274, 288, 304, 320, 357, 360, 365, 373, 376, 378, 379, 380, 382, 384, 386, 387, 390, 391, 392, 396, 404, 410, 411, 414, 417, 419, 447, 506, 556, 557, 558, 559, 562, 563, 564, 565, 591, 592, 596, 600, 642, 643, 644, 645, 646, 649, 650, 655, 661, 663, 664, 665, 666, 675, 676, 677, 678, 684, 806, 807, 814, 838, 841, 847, 848, 917, 918, 956, 987, 1000, 1004, 1005, 1017, 1018, 1020, 1023, 1028, 1035, 1038, 1039, 1041, 1047, 1053], "builtin": 1019, "buitinck": [0, 400, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "bulk": [280, 421, 446], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": 1042, "buluttekin": 1045, "bumblebe": 1048, "bunch": [2, 50, 126, 247, 371, 372, 373, 466, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 513, 570, 571, 572, 573, 635, 636, 637, 866, 867, 915, 916, 917, 918, 960, 963, 1028, 1040, 1042, 1045, 1047, 1051], "bundl": [1043, 1044], "bupu": 187, "burden": [378, 879, 1024], "bureau": 373, "buri": 378, "burjek": 1035, "burk": [0, 362, 1050], "burn": [1042, 1043], "burst": 1004, "busch": [1043, 1044, 1046], "bush": [45, 373], "busi": [43, 213, 271, 328, 386, 390, 409, 791, 1000, 1004, 1028], "business_metr": 265, "business_scor": 265, "bussonni": [1035, 1047], "butler": [476, 1038, 1046, 1047], "butlerdavi": 476, "butter": 1028, "button": [378, 386], "butyugina": 1051, "buuren": [630, 994], "buzenet": [1050, 1051], "bv_bunch": 50, "bwignal": 1038, "bypass": [409, 411, 602, 649, 655, 825, 915, 916, 917, 918, 1051], "byproduct": 237, "byrd": 661, "byron": 1047, "byte": [86, 418, 489, 506, 511, 512, 585, 591, 592, 594, 968, 1035, 1042, 1043, 1050, 1053], "bz2": [55, 511, 512], "bz2file": 55, "bzip2": 1035, "b\u00e9gude": 317, "c": [2, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 85, 89, 90, 92, 93, 94, 98, 103, 104, 106, 116, 118, 125, 126, 134, 136, 137, 142, 143, 150, 152, 153, 155, 156, 161, 168, 171, 172, 173, 174, 178, 191, 197, 201, 203, 204, 205, 206, 208, 210, 211, 220, 222, 224, 225, 226, 227, 229, 230, 233, 235, 237, 238, 245, 246, 248, 252, 257, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 274, 276, 280, 282, 291, 294, 297, 299, 300, 301, 302, 304, 306, 307, 309, 311, 312, 313, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 357, 358, 359, 365, 366, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 386, 387, 390, 396, 397, 401, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 423, 439, 444, 445, 448, 449, 451, 461, 470, 477, 526, 531, 537, 541, 543, 544, 550, 552, 553, 593, 610, 611, 613, 634, 642, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 682, 688, 689, 691, 692, 695, 696, 711, 717, 718, 721, 734, 738, 744, 745, 761, 762, 803, 817, 826, 832, 834, 842, 843, 844, 845, 846, 847, 848, 854, 856, 863, 878, 880, 881, 882, 886, 888, 902, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 922, 933, 934, 966, 993, 996, 997, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1011, 1014, 1016, 1018, 1019, 1020, 1023, 1028, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1053], "c0": [143, 243, 317], "c1": [98, 143, 178, 243, 317], "c2": [98, 143, 178, 243, 317], "c22": 325, "c26": 325, "c3": [98, 143, 317], "c4": [98, 317, 1026, 1030], "c5": [98, 1026, 1030], "c56poni": 1045, "c6": 98, "c99": 1023, "c_": [50, 62, 63, 64, 91, 111, 121, 142, 145, 151, 152, 161, 172, 211, 226, 229, 240, 297, 314, 316, 335, 341, 349, 350, 410, 662, 717, 718, 721, 1004], "c_0": [996, 1002], "c_1": 1001, "c_2": [410, 1001], "c_2d_rang": 341, "c_e": 410, "c_i": [410, 1007], "c_j": [410, 1009], "c_jh_j": 1009, "c_k": 552, "c_option": 104, "c_p": 1000, "c_q": 410, "c_rang": 341, "c_scale": 348, "ca": [168, 375, 410, 444, 915, 916, 1016, 1020], "cabernet": 317, "cabin": 325, "cablevis": 51, "cabrera": 1045, "cach": [2, 52, 87, 99, 183, 272, 291, 292, 294, 299, 303, 365, 366, 373, 392, 443, 447, 452, 470, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 505, 511, 512, 803, 849, 851, 867, 868, 905, 909, 910, 911, 912, 913, 988, 1007, 1019, 1025, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1053], "cache_path": 1007, "cache_s": [470, 905, 909, 910, 911, 912, 913, 1019], "cached_pip": [104, 411], "cachedir": [87, 104, 387, 411], "caching_dir": 988, "caherrera": 1048, "cai": 1048, "caicedo": 1035, "cailean": 1053, "cainei": 1053, "caio": [1041, 1043, 1045], "caj": 51, "caje": 1036, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 373, "cal_scor": 63, "calcot": 1048, "calcsiz": 376, "calcul": [2, 46, 63, 64, 69, 80, 92, 111, 132, 133, 134, 138, 155, 182, 183, 189, 209, 217, 218, 230, 245, 247, 270, 271, 277, 281, 286, 290, 339, 345, 346, 361, 365, 385, 392, 401, 407, 408, 410, 414, 415, 417, 421, 440, 445, 446, 448, 450, 452, 453, 455, 457, 458, 473, 474, 480, 483, 539, 550, 566, 567, 572, 600, 614, 623, 635, 636, 637, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 677, 678, 682, 684, 687, 691, 693, 695, 697, 710, 719, 732, 733, 738, 739, 741, 747, 757, 767, 772, 774, 775, 776, 777, 781, 784, 786, 787, 790, 791, 792, 795, 796, 798, 810, 812, 828, 832, 845, 847, 848, 885, 886, 887, 893, 897, 907, 908, 939, 953, 996, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1012, 1014, 1017, 1019, 1025, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "cald": 902, "caleb": 1047, "calibr": [2, 52, 66, 137, 149, 156, 231, 243, 265, 271, 273, 392, 401, 439, 440, 441, 515, 518, 567, 572, 661, 662, 679, 712, 732, 744, 787, 790, 791, 802, 825, 833, 845, 904, 907, 942, 993, 1000, 1004, 1017, 1019, 1025, 1026, 1030, 1032, 1039, 1041], "calibrated_classifi": 63, "calibrated_classifiers_": [63, 408, 439], "calibrated_clf": 439, "calibrated_df": [62, 64], "calibrated_forest": 993, "calibratedclassifiercv": [2, 61, 62, 63, 361, 392, 401, 408, 679, 802, 825, 993, 1019, 1024, 1039, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "calibratedclassifiercvifittedcalibratedclassifiercv": 63, "calibration_curv": [2, 61, 408, 439, 440, 1044, 1049, 1053], "calibration_displai": [62, 64], "calibrationdisplai": [2, 62, 64, 408, 942, 1048, 1049, 1053], "california": [2, 144, 178, 181, 182, 311, 317, 322, 371, 375, 492, 1030], "calinski": [2, 713, 1041], "calinski_harabasz_scor": [2, 410, 1043], "calinski_harabaz_scor": [1041, 1043], "cali\u0144ski": 410, "call": [52, 53, 55, 80, 83, 87, 103, 118, 132, 139, 145, 165, 170, 174, 176, 178, 185, 187, 200, 213, 214, 217, 231, 241, 247, 251, 253, 254, 265, 271, 272, 280, 284, 286, 288, 291, 293, 316, 318, 322, 323, 352, 353, 354, 360, 365, 366, 367, 373, 378, 379, 380, 383, 384, 385, 386, 387, 390, 391, 392, 393, 396, 401, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 422, 433, 442, 445, 448, 449, 451, 452, 453, 454, 455, 456, 459, 462, 464, 466, 467, 470, 471, 476, 484, 485, 486, 490, 493, 495, 498, 500, 506, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 580, 585, 586, 591, 592, 594, 600, 605, 610, 611, 613, 614, 617, 623, 630, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 707, 735, 745, 758, 774, 777, 781, 782, 783, 784, 796, 800, 801, 802, 803, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 853, 856, 858, 863, 864, 865, 866, 867, 870, 871, 872, 874, 876, 877, 879, 884, 887, 888, 891, 896, 897, 898, 899, 900, 904, 907, 908, 909, 910, 912, 913, 916, 918, 926, 928, 941, 945, 950, 951, 960, 961, 963, 969, 970, 974, 977, 987, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1016, 1017, 1019, 1020, 1023, 1028, 1030, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "callabl": [2, 261, 275, 328, 392, 414, 417, 418, 419, 421, 422, 443, 445, 446, 447, 448, 449, 451, 452, 454, 459, 461, 462, 466, 467, 468, 469, 534, 536, 538, 540, 542, 548, 549, 560, 561, 562, 563, 564, 565, 567, 568, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 613, 614, 623, 631, 633, 637, 642, 646, 662, 674, 676, 678, 691, 694, 695, 699, 714, 722, 735, 745, 774, 777, 781, 782, 783, 784, 795, 796, 803, 806, 807, 809, 817, 825, 826, 829, 830, 831, 832, 834, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 871, 880, 902, 903, 909, 910, 911, 912, 913, 964, 970, 973, 987, 993, 1004, 1014, 1035, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1051], "callback": [534, 540, 542, 548, 549, 856, 969, 1024, 1051], "callbl": 849, "calle": [2, 247, 961], "caller": [2, 247, 411, 649, 650, 655, 663, 664, 665, 684, 897, 898, 960, 961, 979, 980, 981, 1044], "callgrin": 384, "callgrind": 381, "calm": 51, "caltech": 352, "calvin": [1038, 1039], "calvo": [1043, 1044], "cambridg": [373, 415, 593, 842, 846, 1000, 1002, 1006], "came": 1003, "camera_ind": 53, "camil": [1043, 1051, 1052], "camila": 1045, "camilaagw": 1045, "camilo": 1041, "campello": [410, 448], "campustrampu": 1042, "can": [0, 11, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 72, 75, 77, 78, 80, 82, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 102, 103, 104, 105, 109, 110, 111, 112, 113, 116, 121, 123, 124, 125, 126, 127, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 163, 164, 165, 166, 167, 168, 170, 175, 176, 177, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 198, 200, 202, 204, 206, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 221, 229, 230, 231, 233, 234, 235, 240, 241, 242, 243, 244, 246, 247, 250, 251, 254, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 278, 280, 282, 283, 284, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 300, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 334, 335, 338, 339, 341, 344, 345, 348, 352, 353, 354, 358, 359, 360, 361, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 391, 392, 393, 395, 396, 397, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 433, 435, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 458, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 474, 484, 485, 486, 489, 499, 502, 506, 511, 512, 515, 524, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 582, 583, 584, 585, 586, 587, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 635, 637, 638, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 692, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 707, 710, 712, 714, 715, 721, 723, 724, 725, 726, 727, 729, 730, 732, 733, 735, 736, 740, 741, 742, 743, 746, 749, 755, 758, 759, 760, 761, 762, 766, 782, 783, 785, 786, 787, 788, 790, 791, 792, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 864, 865, 866, 867, 870, 871, 872, 874, 875, 876, 880, 881, 882, 885, 886, 887, 892, 899, 900, 904, 905, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 919, 920, 923, 924, 927, 929, 931, 933, 937, 939, 945, 948, 950, 951, 958, 960, 963, 966, 969, 973, 974, 977, 984, 987, 988, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "canberra": [452, 459, 702, 781, 782, 783, 1007], "canberradist": 702, "cancel": [417, 418, 766], "cancer": [2, 168, 371, 409, 503, 596, 597, 854, 1012, 1030, 1040], "candela": 375, "candid": [106, 261, 269, 272, 279, 322, 367, 378, 382, 410, 417, 450, 452, 803, 806, 807, 815, 817, 1000, 1007, 1020, 1041], "candidate_idx": 270, "cannon": 1050, "cannot": [43, 52, 75, 89, 107, 113, 120, 125, 186, 187, 198, 213, 231, 247, 284, 311, 341, 348, 367, 377, 379, 384, 390, 392, 393, 398, 404, 410, 411, 412, 414, 415, 417, 418, 420, 467, 524, 541, 542, 543, 546, 550, 613, 616, 617, 618, 620, 622, 623, 625, 626, 628, 654, 658, 685, 695, 714, 720, 781, 806, 807, 854, 855, 857, 858, 859, 867, 868, 872, 877, 878, 889, 931, 933, 934, 993, 994, 998, 1000, 1001, 1004, 1005, 1010, 1014, 1019, 1020, 1024, 1028, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "canon": [2, 51, 392, 408, 417, 484, 485, 487, 771, 1024, 1026, 1030], "canonic": 392, "cant": [1052, 1053], "cantor": [631, 994], "canuma": 1048, "canva": 51, "cao": 410, "cap": [407, 410, 758, 1004, 1044], "capabl": [88, 89, 116, 149, 175, 217, 237, 380, 392, 396, 1005, 1008, 1019, 1020, 1028, 1035, 1044, 1052], "capac": [149, 170, 188], "capit": [49, 62, 327, 499, 809, 826], "capitain": 1053, "cappion": [695, 1001], "cappuzzo": 1052, "capsiz": 333, "caption": 102, "captur": [2, 43, 48, 51, 52, 72, 74, 116, 146, 151, 163, 175, 186, 193, 198, 213, 217, 262, 284, 290, 321, 341, 345, 386, 410, 417, 418, 419, 574, 591, 592, 594, 853, 970, 1004, 1009, 1017, 1021, 1047], "car": 213, "carbal": 1052, "card": 1043, "cardin": [72, 141, 147, 188, 189, 317, 318, 326, 410, 417, 465, 556, 557, 560, 561, 562, 563, 567, 568, 569, 682, 880, 881, 888, 915, 916, 917, 918, 1004, 1005, 1012, 1014, 1049, 1050], "cardiotocogram": 250, "care": [47, 88, 147, 186, 265, 288, 345, 365, 367, 382, 384, 390, 392, 393, 404, 409, 410, 412, 418, 439, 462, 471, 643, 661, 662, 669, 670, 671, 679, 680, 681, 698, 907, 1001, 1019, 1028, 1051], "carefulli": [285, 365, 408, 415, 1019], "carei": [1038, 1039, 1040, 1041, 1042], "carett": 1042, "cari": 1047, "carl": [175, 420, 613, 614, 617, 622, 625], "carla": 1051, "carlo": [0, 245, 368, 417, 420, 614, 644, 645, 996, 1009, 1035, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "carlson": 1042, "carlsson": 1038, "carmen": 317, "carnegi": 902, "caro": 1040, "carodorum": 317, "carol": [1041, 1042], "carolin": 1008, "carrascosa": [1028, 1039], "carre\u00f1o": 1050, "carri": [51, 67, 134, 182, 265, 271, 274, 279, 284, 307, 313, 354, 393, 418, 560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918, 1028], "carrillo": 1040, "carsten": 1048, "cart": [1026, 1030], "carter": [1041, 1042, 1050, 1053], "cartesian": [103, 407, 636, 1007, 1050], "cartman_nabana": 1045, "cartograph": 191, "cartographi": 1000, "caruana": [62, 64, 408, 439, 441], "carvaj": 1035, "casado": 1046, "casagrand": [1043, 1044], "casalegno": 1047, "cascad": 375, "case": [2, 30, 43, 46, 47, 52, 62, 64, 70, 72, 82, 85, 88, 90, 94, 99, 103, 104, 112, 116, 125, 127, 137, 139, 140, 146, 147, 154, 165, 167, 168, 170, 177, 186, 187, 189, 198, 199, 202, 204, 213, 214, 215, 217, 218, 221, 227, 229, 230, 231, 240, 244, 245, 246, 247, 250, 251, 261, 264, 265, 268, 270, 271, 272, 274, 277, 278, 280, 288, 291, 294, 298, 308, 311, 313, 316, 318, 320, 323, 328, 345, 352, 353, 354, 360, 361, 365, 366, 367, 372, 373, 378, 379, 380, 382, 383, 384, 385, 387, 390, 391, 392, 393, 396, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 439, 442, 445, 446, 448, 449, 453, 455, 465, 466, 467, 469, 476, 499, 511, 512, 518, 542, 544, 545, 546, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 591, 594, 596, 597, 600, 605, 609, 612, 613, 614, 628, 630, 631, 633, 635, 650, 651, 656, 659, 660, 661, 662, 664, 666, 669, 671, 672, 675, 677, 678, 679, 683, 685, 686, 687, 688, 689, 690, 702, 706, 711, 712, 715, 719, 721, 723, 724, 726, 729, 731, 732, 733, 737, 738, 741, 745, 746, 748, 749, 751, 753, 756, 757, 759, 766, 781, 784, 786, 787, 788, 790, 791, 792, 793, 797, 799, 801, 803, 806, 807, 809, 817, 821, 826, 827, 828, 829, 830, 831, 832, 834, 836, 844, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 867, 874, 876, 877, 880, 881, 882, 885, 886, 887, 888, 891, 897, 898, 899, 900, 907, 909, 912, 915, 916, 922, 927, 929, 939, 951, 952, 992, 993, 994, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1020, 1023, 1024, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "caselli": [1043, 1044], "cash": 1000, "cashman": 1045, "casino": [1049, 1050], "cass": 1041, "cassi": 317, "cast": [50, 52, 86, 213, 234, 372, 393, 418, 499, 647, 648, 649, 655, 659, 660, 663, 664, 665, 666, 667, 668, 676, 678, 968, 1042, 1043, 1044, 1045, 1048, 1050, 1052], "castachick": 1046, "castello": 1039, "castor": 1046, "caswel": [1048, 1051], "cat": [51, 103, 187, 188, 250, 323, 324, 325, 326, 327, 328, 373, 418, 490, 585, 715, 721, 757, 786, 888, 1004, 1014, 1044, 1045, 1047], "cat_column": 250, "cat_linear_processor": 154, "cat_proc": [242, 321], "cat_selector": 154, "cat_str": 57, "cat_tree_processor": 154, "catajara": 1045, "catalfo": 1043, "catalin": 645, "catastroph": [265, 318, 766, 1024], "catch": [79, 95, 308, 366, 386, 387], "catch_warn": [79, 95, 247, 307, 308], "categor": [2, 43, 103, 133, 139, 149, 154, 183, 186, 187, 188, 213, 231, 250, 252, 254, 265, 318, 323, 325, 326, 367, 370, 372, 373, 383, 392, 411, 418, 468, 469, 491, 492, 499, 508, 564, 565, 584, 585, 610, 611, 635, 636, 651, 661, 662, 672, 683, 712, 830, 842, 843, 844, 845, 846, 868, 870, 874, 875, 878, 880, 881, 888, 902, 903, 924, 994, 1000, 1011, 1012, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1039, 1040, 1043, 1045, 1047, 1050, 1051, 1052, 1053], "categori": [2, 25, 57, 79, 95, 102, 103, 143, 154, 186, 187, 213, 221, 228, 250, 265, 272, 307, 308, 313, 317, 318, 322, 325, 327, 334, 352, 353, 354, 372, 373, 387, 410, 411, 417, 418, 420, 490, 499, 500, 506, 564, 565, 651, 661, 662, 672, 683, 746, 761, 762, 843, 880, 881, 888, 945, 946, 994, 1000, 1001, 1002, 1006, 1012, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "categorical_column": [43, 143, 186, 188, 250, 469], "categorical_columns_selector": 250, "categorical_columns_subset": 143, "categorical_crossentropi": [1045, 1049], "categorical_encod": 188, "categorical_featur": [43, 103, 143, 149, 187, 265, 317, 322, 323, 324, 325, 327, 383, 390, 417, 564, 565, 635, 636, 1011, 1043, 1047, 1050, 1052], "categorical_preprocessor": [252, 317], "categorical_transform": 103, "categoricaldtyp": 390, "categoricalnb": [2, 842, 844, 845, 846, 1006, 1045, 1046, 1047, 1048, 1050], "categories_": [880, 881, 888, 1014, 1043, 1050], "categoris": [945, 946], "category_1_fold": 506, "category_2_fold": 506, "category_count_": 843, "category_s": 353, "categr": 1012, "caterpillar": 51, "cathi": [1039, 1045], "catindex": 187, "catplot": 261, "caught": [378, 386, 404], "caus": [43, 62, 64, 146, 171, 186, 211, 213, 217, 218, 231, 290, 318, 345, 354, 361, 376, 383, 408, 410, 415, 416, 418, 420, 445, 449, 451, 461, 512, 535, 585, 592, 613, 614, 781, 842, 843, 844, 846, 871, 880, 882, 885, 886, 933, 934, 994, 1000, 1004, 1012, 1014, 1017, 1024, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053], "causal": [183, 184, 208, 660, 788, 833, 1025], "causat": 186, "caution": [186, 265, 382, 442, 456, 1043], "cautiou": 1042, "caveat": [414, 419, 420], "cawlei": [276, 1004], "cax": [66, 173, 282], "ca\u00f1ardo": 1038, "cb": [173, 244, 260], "cbar_ax": 282, "cbar_kw": [193, 198], "cc": 376, "cc18": 372, "cc_home": [915, 916], "cca": [2, 248, 413, 485, 487, 1005, 1039, 1043, 1044, 1045, 1047, 1049, 1053], "ccat": 373, "ccf2002": 996, "cclauss": 1043, "cco": 352, "ccp_alpha": [320, 356, 560, 561, 562, 563, 567, 568, 915, 916, 917, 918, 1020, 1045], "ccp_path": [915, 916, 917, 918], "cd": [120, 168, 375, 376, 378, 382, 384, 415, 473, 474, 480, 534, 540, 542, 543, 546, 548, 549, 550, 1000, 1040, 1050], "cdef": 379, "cdf": 271, "cdist": 1048, "cdivis": 379, "cdot": [271, 345, 407, 410, 415, 416, 420, 617, 618, 622, 625, 626, 873, 996, 998, 1004, 1008, 1014], "cdrig": 1049, "cdt": 57, "cea": [842, 1006], "ceballo": 1049, "ceder": [791, 1004], "ceethinwa": [1047, 1048], "ceh": 1050, "ceil": [149, 250, 560, 561, 562, 563, 566, 567, 568, 569, 597, 674, 806, 807, 915, 916, 917, 918, 1018], "celelibi": 1044, "celeo": 1039, "celeux": 531, "cell": [50, 51, 58, 63, 68, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 195, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 304, 309, 317, 321, 322, 324, 325, 327, 332, 360, 375, 383, 695, 1004, 1005, 1041, 1049], "cellular": 53, "celsiu": [187, 1011], "cemlyn": 1053, "cen": 746, "censor": 1023, "censu": 373, "center": [0, 2, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 82, 83, 86, 88, 89, 92, 93, 94, 96, 97, 112, 125, 129, 144, 145, 146, 147, 166, 168, 182, 187, 195, 205, 207, 213, 214, 224, 225, 236, 237, 240, 241, 250, 256, 259, 260, 266, 272, 282, 296, 299, 301, 307, 311, 313, 314, 324, 332, 339, 341, 342, 343, 347, 353, 354, 373, 374, 375, 383, 410, 412, 413, 415, 416, 417, 423, 442, 444, 445, 448, 449, 450, 451, 454, 456, 461, 462, 463, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 504, 515, 527, 537, 538, 544, 547, 553, 609, 612, 613, 614, 635, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 681, 693, 697, 699, 800, 872, 873, 876, 885, 887, 897, 898, 907, 908, 998, 1000, 1001, 1003, 1011, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1052], "center1": 99, "center2": 99, "center3": 99, "center4": 99, "center_": 885, "center_box": [93, 515], "centers_0": 314, "centers_1": 314, "centers_init": 92, "cento": 376, "centr": 153, "central": [0, 53, 215, 373, 379, 410, 1010, 1023], "centrality_scor": 55, "centroid": [2, 77, 90, 91, 109, 183, 292, 299, 314, 324, 353, 374, 401, 410, 444, 445, 448, 449, 450, 451, 454, 461, 462, 464, 507, 552, 634, 854, 1025, 1026, 1030, 1035, 1039, 1042, 1047, 1051], "centroids_": [444, 448, 854], "ceo": 1028, "cerda": 1049, "certain": [52, 88, 144, 149, 186, 218, 230, 247, 271, 291, 315, 345, 361, 373, 374, 378, 382, 392, 395, 404, 406, 410, 415, 419, 641, 652, 656, 661, 666, 687, 867, 872, 907, 993, 996, 1000, 1001, 1004, 1005, 1008, 1014, 1019, 1023, 1040, 1044, 1047, 1050], "certainli": [86, 102, 186, 353, 409], "certainti": [271, 380, 1004], "ceshin": 1041, "cest": 1004, "cetina": 1047, "cf": [318, 409, 410, 413, 444, 703, 1000, 1014, 1024], "cflag": 376, "cft": 410, "cftree": 444, "cg": [309, 661, 662, 675, 677, 690, 1000, 1039, 1040, 1042, 1046, 1048, 1049, 1052, 1053], "cga": 178, "cgi": 900, "cgohlk": [1038, 1039], "cgroup": [1048, 1049], "cgsavard": [1045, 1046], "ch6": 533, "chacon": 708, "chac\u00f3n": [410, 708], "chad": 1052, "chadi": 1043, "chai": [1047, 1050, 1051], "chain": [2, 35, 101, 107, 134, 160, 183, 243, 279, 282, 288, 289, 291, 294, 309, 361, 370, 390, 392, 420, 499, 505, 544, 614, 630, 661, 741, 803, 833, 836, 838, 839, 840, 841, 867, 868, 887, 993, 994, 1005, 1009, 1021, 1025, 1028, 1030], "chain_jaccard_scor": 290, "chain_method": [838, 1053], "chain_method_": 838, "chaitanya": 1046, "chaitanyamog": 1047, "chakhchoukh": 112, "chakravarti": [638, 640], "chalearn": 1004, "challeng": [51, 154, 170, 187, 193, 231, 240, 367, 373, 374, 404, 410, 412, 464, 474, 1004, 1010, 1028], "chalmer": 1049, "chalmerlow": 1038, "chalulu": 1050, "chan": [0, 845, 887, 1053], "chanc": [2, 71, 73, 82, 134, 163, 183, 189, 213, 221, 228, 231, 271, 277, 280, 281, 317, 348, 353, 361, 377, 409, 410, 414, 703, 705, 707, 708, 711, 719, 758, 760, 789, 798, 832, 1004, 1012, 1020, 1025, 1051], "chance_level_": [703, 705, 1051], "chance_level_kw": [250, 703, 705, 1051], "chandra": [1045, 1046, 1049], "chang": [2, 46, 62, 63, 64, 120, 124, 125, 137, 140, 147, 171, 181, 185, 186, 189, 201, 214, 215, 217, 218, 251, 252, 265, 266, 271, 278, 281, 285, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 341, 345, 354, 360, 361, 365, 366, 367, 373, 380, 381, 382, 383, 386, 390, 392, 401, 410, 414, 417, 418, 420, 422, 430, 435, 439, 442, 445, 446, 449, 451, 454, 456, 461, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 496, 497, 499, 507, 511, 512, 515, 516, 517, 525, 530, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 591, 592, 593, 594, 596, 597, 600, 605, 613, 614, 616, 617, 618, 620, 622, 623, 625, 626, 628, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 695, 697, 703, 707, 710, 715, 719, 720, 732, 733, 739, 740, 758, 760, 781, 786, 787, 788, 790, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 817, 821, 822, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 857, 858, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 879, 880, 886, 887, 888, 895, 896, 901, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 926, 931, 933, 934, 946, 951, 962, 969, 970, 973, 993, 994, 995, 1003, 1004, 1005, 1007, 1014, 1017, 1018, 1019, 1020, 1024, 1033, 1034, 1054], "changed_onli": 1046, "changedbehaviorwarn": 1047, "changedbehaviourwarn": 1044, "changelog": [325, 382, 392, 1033, 1054], "changing_param": 46, "changing_param_valu": 46, "changyao": [1050, 1051], "channel": [366, 373, 376, 396, 418, 496, 497, 586, 587, 589, 590, 1027], "channel_prior": 376, "chapman": 1000, "chapter": [120, 361, 380, 410, 415, 417, 420, 533, 535, 537, 617, 622, 625, 646, 994, 997, 1000, 1019, 1020], "char": [418, 591, 592, 594, 1035], "char_wb": [418, 591, 592, 594], "charact": [354, 378, 383, 392, 418, 506, 511, 512, 591, 592, 594, 919, 1009, 1035, 1048, 1050], "character": [75, 231, 356, 410, 414, 1001], "characteris": 1007, "characterist": [2, 79, 95, 168, 175, 183, 240, 241, 253, 263, 265, 266, 268, 273, 311, 361, 373, 375, 383, 408, 409, 414, 417, 420, 506, 507, 626, 641, 661, 705, 709, 711, 730, 785, 791, 792, 822, 833, 836, 874, 912, 1000, 1025], "chardet": 418, "chardetect": 418, "charg": [0, 265, 378], "charikar": 996, "charl": [64, 265, 767, 1035, 1038, 1041, 1045, 1047, 1050], "charli": [1042, 1043, 1051], "charlton": 1042, "charra": [1050, 1052, 1053], "charron": [1028, 1038, 1039, 1046, 1047, 1048], "charset": [1035, 1037], "charset_error": 1037, "chart": [72, 144, 276, 398, 1005, 1038], "chartbeat": 1028, "chase": [51, 1035], "chasnovski": 1046, "chat": 1028, "chatterje": 1046, "chaudhuri": 448, "chauhan": [1043, 1044, 1050, 1051], "chaumond": [1028, 1043], "chauvin": 746, "chavez": [45, 373], "chawla": 1045, "chayant": 1042, "chazalon": 1049, "cheaper": [187, 410, 420, 676, 996, 1000], "cheat": [52, 341, 398, 1008, 1018, 1037], "chebee7i": 1039, "chebyshev": [452, 459, 702, 781, 782, 783, 1007], "chebyshevdist": 702, "check": [2, 41, 43, 44, 47, 55, 80, 86, 89, 124, 132, 140, 154, 170, 183, 185, 187, 188, 199, 200, 202, 213, 234, 247, 257, 263, 265, 280, 288, 323, 332, 360, 365, 366, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 390, 391, 392, 396, 397, 401, 404, 411, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 493, 505, 511, 512, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 692, 693, 694, 695, 696, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 933, 934, 935, 945, 946, 956, 958, 959, 960, 964, 965, 987, 988, 989, 991, 992, 999, 1000, 1001, 1004, 1019, 1020, 1024, 1025, 1028, 1030, 1035, 1036, 1038, 1042, 1046, 1047, 1048, 1049, 1050, 1052], "check_arrai": [2, 380, 387, 470, 537, 905, 992, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "check_classifier_multioutput": 1045, "check_consistent_length": 2, "check_cv": [2, 392, 1040], "check_decision_proba_consist": 1042, "check_estim": [2, 320, 380, 392, 926, 946, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "check_estimator_sparse_arrai": 1053, "check_estimator_sparse_data": 1053, "check_estimator_sparse_matrix": 1053, "check_estimators_fit_returns_self": 946, "check_estimators_pickl": 1052, "check_fit_idempot": 1044, "check_increas": 2, "check_input": [537, 551, 649, 650, 655, 663, 664, 665, 684, 690, 915, 916, 917, 918, 1043], "check_invers": [411, 467, 871, 1014, 1043, 1049, 1050], "check_is_fit": [2, 89, 132, 247, 381, 387, 392, 1045, 1048, 1049], "check_memori": [2, 387, 392, 1042], "check_metadata": 247, "check_methods_sample_order_invari": [1047, 1049], "check_methods_subset_invari": [1043, 1049], "check_nam": 926, "check_pairwise_arrai": 1044, "check_param": 992, "check_random_st": [2, 94, 229, 235, 243, 249, 380, 387, 392], "check_regressor_multioutput": 1045, "check_requires_y_non": 1049, "check_sample_weights_pandas_seri": 1043, "check_scalar": [2, 1049], "check_scor": [2, 392, 1053], "check_set_param": 1043, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1045, "check_transformers_unfitted_stateless": 1051, "check_x_i": [2, 380, 387, 992, 1039, 1043, 1044, 1049], "checkbox": 378, "checked_cv": 827, "checker": [2, 382, 827], "checkerboard": [2, 58, 407, 453, 455, 514, 516], "checking_statu": 265, "checkingclassifi": 1045, "checklist": [381, 382], "checkout": [376, 378, 382, 386], "checks_gener": 945, "checksum": [494, 1047], "cheeseman": 375, "chege": 1049, "chemic": 375, "chemometr": 375, "chen": [109, 110, 412, 417, 423, 477, 729, 759, 996, 1004, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1050, 1051], "chenal": [1044, 1045, 1047], "cherkasski": 1000, "chernei": 1053, "chernyi": 1049, "cherri": 382, "cherti": 1039, "cherubin": 1041, "chestervil": 325, "cheuk": [1043, 1044], "cheung": 1036, "chevali": 1047, "chevalli": 1052, "chevron": 51, "chi": [2, 103, 111, 134, 315, 370, 419, 522, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 641, 642, 643, 644, 645, 761, 762, 1030, 1035, 1040, 1041], "chi2": [2, 103, 418, 419, 454, 584, 595, 598, 599, 601, 602, 603, 608, 609, 612, 623, 641, 642, 643, 644, 645, 646, 762, 768, 777, 1035, 1042, 1049], "chi2_featur": 645, "chi2_kernel": [2, 406, 641, 645, 761, 768, 1002, 1036], "chi2_stat": 607, "chi2sampl": 641, "chiang": 1043, "chiara": [0, 369, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "chibuik": 1048, "chicco": 1053, "chief": 1028, "chieh": [1042, 1043], "chigurupati": 1047, "chih": [661, 1040], "chilamkurthi": 1041, "child": [149, 247, 352, 360, 366, 390, 392, 401, 410, 417, 444, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 915, 916, 917, 918, 960, 961, 963, 1020, 1042], "child_idx": 76, "children": [360, 410, 417, 443, 447, 465, 569, 1039, 1052], "children_": [76, 443, 447, 465], "children_left": 360, "children_right": 360, "chime": 377, "chin": [375, 1039], "china": [410, 509, 510, 587, 590], "chines": 1023, "chinmaya": 1042, "chinthala": 1042, "chiotelli": 1044, "chip": [406, 1028], "chisquar": 315, "chitteti": 1049, "chkoar": 1042, "chloe": 1049, "cho": 1046, "choe": 1044, "choi": [1000, 1053], "choic": [2, 43, 46, 64, 75, 80, 88, 98, 102, 109, 127, 149, 170, 171, 177, 181, 202, 214, 250, 264, 265, 269, 271, 274, 285, 296, 318, 322, 352, 353, 361, 365, 376, 383, 392, 396, 410, 412, 414, 416, 417, 419, 420, 454, 464, 473, 474, 475, 476, 477, 478, 480, 541, 543, 544, 550, 562, 641, 650, 651, 659, 661, 662, 664, 672, 683, 695, 708, 745, 836, 849, 850, 855, 857, 858, 884, 887, 896, 898, 907, 908, 937, 993, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1012, 1017, 1018, 1019, 1020, 1042, 1045, 1046, 1050, 1051], "choleski": [110, 213, 231, 387, 473, 474, 480, 530, 614, 651, 653, 654, 657, 658, 659, 661, 662, 672, 675, 677, 683, 685, 686, 690, 800, 801, 1000, 1038, 1042, 1044, 1047, 1050, 1051], "cholesky_delet": 387, "cholesterol": [168, 375], "chong": 539, "choo": [1050, 1051], "choos": [43, 50, 51, 79, 80, 83, 86, 93, 95, 99, 109, 142, 154, 168, 186, 189, 206, 248, 265, 266, 276, 283, 356, 361, 365, 366, 367, 380, 383, 386, 391, 392, 404, 408, 409, 410, 412, 414, 417, 418, 421, 445, 446, 449, 451, 461, 526, 535, 541, 562, 563, 585, 605, 661, 662, 675, 677, 682, 690, 691, 692, 696, 729, 759, 803, 806, 807, 817, 874, 907, 908, 915, 916, 917, 918, 993, 994, 995, 999, 1000, 1001, 1002, 1003, 1007, 1014, 1017, 1018, 1019, 1030, 1037, 1038, 1042, 1044, 1046], "choose_check_classifiers_label": 1045, "choose_random_sampl": 380, "choraria": 1047, "chose": [77, 186], "chosen": [47, 58, 80, 105, 154, 171, 186, 187, 202, 214, 230, 248, 264, 265, 266, 268, 274, 285, 353, 361, 365, 390, 409, 410, 412, 413, 417, 420, 442, 448, 451, 453, 455, 456, 462, 499, 526, 538, 560, 561, 562, 563, 564, 565, 567, 568, 650, 656, 659, 661, 662, 664, 666, 674, 679, 680, 681, 682, 683, 693, 697, 797, 800, 801, 803, 806, 807, 817, 837, 856, 907, 908, 915, 916, 917, 918, 951, 993, 996, 998, 1000, 1001, 1003, 1005, 1010, 1011, 1018, 1020, 1043, 1051, 1052], "chou": [1042, 1043], "choudhari": [1039, 1040, 1049, 1051], "choudhri": 1053, "chowdhuri": [1043, 1049], "choyal": [1042, 1043], "chri": [0, 400, 1035, 1038, 1043, 1044, 1045, 1046, 1049], "chrissobel": 1048, "christ": 57, "christian": [0, 57, 352, 353, 373, 399, 1028, 1035, 1036, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "christianwaldmann": 1050, "christin": [1050, 1051], "christo": [1044, 1045, 1047, 1049, 1052], "christof": [1039, 1040], "christoph": [187, 415, 420, 535, 613, 614, 617, 622, 625, 800, 1000, 1005, 1036, 1040, 1043, 1046, 1047, 1048, 1049, 1050], "christopherlim98": 1049, "chrome": 1014, "chronolog": [373, 500], "chu": [854, 1051], "chuan": 1008, "chugh": 1047, "chuliang": 1048, "chun": [1046, 1047, 1049, 1050, 1051], "chung": [1042, 1043], "chunk": [2, 47, 83, 365, 366, 410, 415, 421, 446, 451, 470, 541, 781, 784, 835, 836, 842, 843, 844, 845, 846, 905, 1006, 1042, 1043, 1044, 1045, 1046], "chunk_siz": 1036, "chunker": 418, "church": [900, 1016], "chyi": [1038, 1039, 1040, 1041, 1042], "ci": [88, 366, 381, 382, 1006, 1041, 1043], "ciccolella": [695, 1001], "cice": [1011, 1049], "cichocki": [415, 541, 543, 550], "cimport": [379, 387, 1043], "cindi": [1040, 1048, 1052, 1053], "cio": 372, "cipri\u00e1n": 1049, "circl": [2, 70, 93, 125, 152, 153, 161, 238, 248, 298, 301, 307, 311, 313, 332, 345, 359, 374, 382, 386, 410, 454, 464, 517, 525, 767, 1019], "circle1": 99, "circle2": 99, "circle3": 99, "circle4": 99, "circleci": [52, 174, 176, 178, 179, 241, 257, 309, 378], "circlecl": 0, "circuit": [57, 1001], "circular": 53, "circumst": [127, 231, 1007, 1023], "circumstanti": 213, "cirru": [0, 378], "cisco": 51, "citat": [0, 372, 375, 390], "cite": [372, 390, 410], "citi": [411, 418, 468], "citizen": 1014, "city_categori": 411, "city_london": 411, "city_pari": 411, "city_sallisaw": 411, "cityblock": [75, 79, 410, 452, 459, 765, 781, 782, 783, 1007], "cividi": 75, "ciyou": 661, "cj": [1006, 1038, 1039, 1040, 1041, 1042], "cjlin": [191, 372, 489, 511, 512, 661, 1038], "ckdtree": [421, 446, 1037], "cl": [0, 47, 51, 385, 392, 917], "clabel": [173, 224], "clae": 1043, "clai": 1035, "claim": [183, 192, 378, 466, 499, 555, 651, 672, 683, 709, 748, 753, 755, 833, 868, 871, 872, 880, 887, 1000, 1025], "claimamount": 231, "claimnb": [213, 231], "clair": 1035, "clamp": [903, 1017], "clang": [376, 379], "clara": [372, 1047], "clare": 1045, "clarifi": [386, 393, 796], "clariti": [166, 378, 386], "clark": 51, "class": [2, 4, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 87, 88, 89, 91, 103, 104, 118, 124, 125, 126, 128, 130, 132, 133, 140, 149, 150, 155, 168, 170, 171, 173, 174, 176, 178, 179, 181, 183, 186, 187, 191, 192, 203, 204, 205, 221, 225, 228, 229, 234, 240, 247, 248, 250, 256, 257, 258, 263, 264, 265, 266, 271, 273, 277, 281, 282, 285, 288, 290, 291, 294, 296, 297, 299, 300, 301, 302, 316, 320, 324, 326, 327, 328, 330, 332, 333, 336, 337, 338, 339, 341, 342, 345, 349, 352, 353, 354, 357, 360, 367, 370, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 387, 390, 391, 396, 401, 404, 405, 406, 408, 410, 411, 413, 415, 419, 420, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 503, 505, 506, 507, 511, 512, 513, 515, 517, 518, 522, 525, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 578, 580, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 723, 725, 730, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 746, 757, 758, 760, 785, 786, 787, 789, 790, 791, 792, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 938, 939, 941, 942, 943, 945, 946, 956, 959, 960, 961, 964, 969, 971, 973, 974, 987, 993, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1011, 1012, 1014, 1015, 1017, 1020, 1024, 1025, 1026, 1028, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "class1_1": 156, "class2_1": 156, "class_0": [221, 375, 513], "class_1": [221, 375, 513], "class_2": [375, 513], "class_count_": [842, 843, 844, 845, 846], "class_id": [280, 281], "class_index": 88, "class_label": [392, 560, 564, 567, 661, 662, 669, 671, 677, 678, 679, 802, 825, 915, 917, 939, 1019], "class_likelihood_ratio": [2, 274, 1004, 1050], "class_log_prior_": [842, 843, 844, 846], "class_memb": 73, "class_member_mask": 82, "class_nam": [136, 264, 888, 919, 920, 921, 1020, 1051], "class_name0": [426, 444, 445, 447, 449, 451, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 873, 899, 900], "class_name1": [426, 444, 445, 447, 449, 451, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 873, 899, 900], "class_name2": [426, 444, 445, 447, 449, 451, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 873, 899, 900], "class_of_interest": [66, 280, 634, 1052], "class_prior": [373, 842, 843, 844, 846, 1036, 1039], "class_prior_": [554, 845], "class_protein_loc": 288, "class_sep": [167, 301, 518, 802, 825], "class_weight": [2, 45, 343, 392, 560, 564, 567, 661, 662, 669, 671, 677, 678, 679, 680, 907, 909, 912, 914, 915, 917, 938, 939, 993, 1018, 1019, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1049, 1050], "class_weight_": [909, 912, 1050], "class_weight_vect": 938, "classes_": [132, 205, 222, 241, 247, 280, 330, 331, 378, 380, 392, 435, 439, 440, 552, 553, 554, 556, 558, 560, 562, 564, 567, 570, 572, 596, 597, 613, 634, 661, 662, 669, 671, 677, 678, 679, 700, 703, 705, 791, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 854, 857, 864, 867, 874, 875, 878, 888, 902, 903, 904, 907, 909, 912, 915, 917, 920, 1004, 1015, 1018, 1036, 1039, 1040, 1042, 1045, 1047], "classic": [55, 208, 237, 256, 262, 345, 375, 382, 412, 414, 415, 445, 449, 451, 461, 495, 503, 507, 513, 544, 635, 636, 917, 918, 998, 1000, 1003, 1006, 1014, 1023, 1035, 1036, 1040, 1049], "classif": [2, 14, 19, 30, 31, 38, 40, 42, 45, 46, 49, 57, 60, 61, 62, 64, 67, 70, 103, 104, 105, 109, 110, 115, 118, 123, 134, 136, 138, 140, 141, 142, 147, 149, 150, 152, 156, 158, 161, 163, 164, 165, 167, 168, 169, 175, 176, 186, 187, 191, 192, 203, 204, 205, 206, 213, 221, 223, 224, 225, 226, 228, 239, 241, 245, 246, 250, 253, 259, 260, 263, 264, 268, 269, 270, 271, 272, 280, 285, 286, 288, 289, 292, 293, 299, 300, 301, 303, 304, 305, 306, 307, 308, 313, 314, 315, 316, 330, 335, 336, 337, 341, 344, 346, 347, 348, 349, 350, 351, 353, 354, 361, 365, 367, 371, 372, 373, 375, 380, 383, 387, 391, 392, 405, 408, 409, 410, 411, 414, 415, 417, 418, 419, 427, 439, 471, 477, 484, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 513, 515, 517, 518, 522, 523, 525, 526, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 609, 612, 613, 614, 616, 617, 625, 634, 635, 636, 646, 661, 662, 669, 671, 677, 678, 679, 700, 706, 708, 711, 715, 716, 718, 719, 721, 729, 730, 732, 733, 737, 738, 741, 744, 746, 757, 759, 761, 762, 764, 785, 786, 787, 789, 790, 791, 792, 797, 799, 802, 803, 804, 806, 807, 808, 809, 817, 821, 822, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 849, 854, 856, 857, 863, 864, 865, 867, 871, 874, 879, 880, 881, 882, 887, 888, 891, 893, 902, 903, 904, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 936, 939, 948, 993, 994, 996, 997, 998, 1001, 1002, 1006, 1009, 1011, 1012, 1014, 1015, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "classifi": [2, 30, 45, 46, 47, 48, 60, 63, 65, 66, 68, 70, 89, 102, 103, 104, 105, 106, 125, 126, 128, 130, 134, 135, 136, 137, 138, 141, 142, 145, 152, 155, 156, 161, 164, 165, 166, 167, 172, 183, 188, 189, 191, 192, 203, 204, 205, 211, 213, 220, 222, 225, 228, 231, 240, 243, 245, 247, 248, 253, 264, 265, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 288, 289, 293, 299, 300, 302, 306, 309, 313, 322, 323, 327, 329, 330, 331, 333, 334, 336, 337, 339, 340, 342, 343, 344, 345, 349, 350, 354, 373, 375, 378, 380, 383, 390, 392, 401, 409, 410, 411, 414, 418, 419, 420, 427, 435, 436, 437, 438, 439, 440, 441, 490, 491, 499, 507, 515, 517, 518, 525, 534, 539, 540, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 569, 570, 571, 572, 573, 596, 597, 605, 609, 613, 625, 632, 634, 635, 636, 652, 661, 662, 669, 671, 674, 675, 676, 677, 678, 679, 700, 701, 703, 705, 706, 710, 711, 712, 714, 715, 716, 721, 723, 725, 729, 730, 732, 733, 735, 737, 738, 741, 742, 743, 744, 746, 757, 759, 785, 786, 787, 790, 791, 792, 797, 799, 802, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 855, 857, 858, 863, 864, 865, 867, 868, 874, 887, 888, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923, 926, 927, 940, 943, 945, 993, 994, 996, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "classification_data": 46, "classification_report": [2, 45, 68, 102, 165, 269, 309, 330, 331, 825, 1004, 1037, 1039, 1043, 1044, 1045, 1047, 1051, 1053], "classificationcriterion": 1043, "classifier_": [89, 247], "classifier_01": 328, "classifier_05": 328, "classifier__c": 103, "classifier__criterion": 252, "classifier__max_depth": 252, "classifier__max_featur": 252, "classifier__min_samples_leaf": 188, "classifier__n_estim": 252, "classifier__n_neighbor": 293, "classifier_idx": 66, "classifier_model": 293, "classifier_other_threshold": 802, "classifier_tag": [926, 940], "classifier_tun": 825, "classifierchain": [2, 290, 392, 401, 839, 841, 1042, 1047, 1050, 1052, 1053], "classifiermixin": [2, 132, 247, 378, 380, 392, 414, 927, 1046], "classifiertag": [2, 926, 940], "classify__c": 104, "classmethod": [385, 440, 634, 635, 700, 701, 702, 703, 704, 705, 809, 826], "classnameprefixfeaturesoutmixin": [2, 380, 434, 1050], "claudio": [375, 1049, 1050, 1052, 1053], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 390], "clauss": 1052, "clb": 187, "clean": [85, 103, 212, 361, 370, 376, 416, 1010, 1014, 1045], "cleaner": 99, "cleanli": [95, 1035], "cleanup": [378, 1035], "clear": [43, 88, 93, 104, 186, 187, 316, 373, 377, 378, 380, 390, 391, 392, 408, 411, 416, 921, 922, 993, 998, 1046, 1047, 1048, 1053], "clear_data_hom": 2, "clearer": [238, 1019], "clearli": [43, 93, 123, 187, 245, 345, 377, 378, 390, 392, 415, 417, 1005, 1011], "clegg": 1038, "clemen": 1039, "clement": [1042, 1043, 1047], "clenaghan": [1040, 1041], "cleveland": 373, "cleverless": 1037, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 84, 87, 91, 96, 103, 138, 145, 148, 150, 155, 159, 161, 164, 165, 167, 172, 174, 189, 203, 205, 206, 210, 211, 217, 220, 222, 225, 226, 227, 228, 229, 236, 241, 242, 245, 248, 254, 260, 268, 272, 276, 277, 279, 282, 283, 294, 297, 298, 299, 302, 306, 313, 316, 320, 321, 322, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 356, 357, 360, 365, 373, 391, 392, 404, 411, 414, 417, 419, 440, 552, 553, 556, 558, 560, 562, 564, 566, 567, 570, 596, 597, 600, 635, 637, 641, 642, 643, 644, 645, 647, 648, 651, 655, 661, 662, 663, 664, 665, 669, 671, 672, 675, 676, 677, 678, 679, 680, 683, 700, 701, 703, 705, 714, 791, 803, 806, 807, 817, 835, 836, 837, 839, 842, 843, 844, 845, 846, 853, 854, 864, 907, 909, 911, 912, 915, 919, 921, 994, 996, 1000, 1004, 1005, 1007, 1008, 1010, 1011, 1018, 1019, 1020], "clf1": [69, 155, 156, 417, 572], "clf2": [69, 155, 156, 380, 417, 572], "clf3": [69, 155, 156, 380, 417, 572], "clf__": 272, "clf__alpha": 272, "clf__c": 411, "clf_descr": 352, "clf_en_lr": 204, "clf_err": 138, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 204, "clf_l2_lr": 204, "clf_list": [62, 64], "clf_name": [49, 352], "clf_no_weight": 350, "clf_pf": 845, "clf_prob": 63, "clf_sample_weight": 247, "clf_score": 61, "clf_sel": 189, "clf_select": 164, "clf_sgd": 227, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_tut": 160, "clf_weight": 350, "click": [242, 252, 272, 321, 327, 378, 380, 386, 398, 1028], "clickabl": 1049, "client": 380, "clifford": 1048, "cliffordemmanuel": 1048, "clim": 173, "climatologi": 408, "climb": [410, 450, 463], "clinton": 57, "clip": [62, 64, 231, 243, 311, 341, 638, 679, 744, 877, 1014, 1039, 1046, 1047], "clmbst": 1047, "clock": 43, "clone": [2, 89, 146, 178, 187, 247, 309, 327, 361, 376, 378, 381, 382, 384, 386, 392, 408, 411, 420, 439, 467, 572, 573, 600, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 809, 826, 831, 834, 838, 841, 867, 868, 904, 1024, 1035, 1041, 1043, 1047, 1051, 1052], "clone_kernel": [613, 614, 1045], "clone_with_theta": [178, 420, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "cloned_classifi": 435, "close": [8, 47, 51, 55, 61, 62, 64, 73, 74, 80, 87, 93, 99, 109, 110, 113, 125, 137, 143, 146, 150, 154, 170, 171, 174, 175, 176, 177, 178, 186, 188, 198, 217, 219, 234, 240, 246, 250, 256, 262, 271, 272, 284, 285, 297, 298, 311, 320, 341, 345, 346, 353, 361, 373, 378, 380, 381, 382, 390, 392, 393, 408, 410, 413, 414, 417, 420, 452, 457, 474, 511, 512, 535, 566, 631, 646, 650, 664, 675, 677, 690, 708, 749, 800, 821, 822, 842, 843, 844, 846, 853, 934, 993, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1010, 1011, 1014, 1019, 1023, 1028, 1038, 1042, 1043, 1044], "close_pric": 51, "closer": [43, 72, 123, 125, 153, 168, 170, 187, 193, 217, 345, 354, 408, 410, 415, 451, 556, 631, 715, 849, 850, 855, 857, 858, 859, 1019, 1042], "closest": [64, 80, 97, 217, 380, 410, 442, 444, 445, 449, 450, 451, 461, 656, 782, 783, 837, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 995, 998, 1005, 1007], "closur": 55, "cloud": [78, 115, 119, 121, 183, 386, 415, 536, 544, 695, 1004, 1022, 1023, 1025], "cloudpickl": 1030, "clouldpickl": 404, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 375, "clue": [373, 386, 1001], "clump": 237, "clust": [98, 452, 459], "cluster": [2, 48, 53, 54, 56, 58, 61, 77, 78, 80, 83, 84, 86, 87, 90, 92, 94, 95, 102, 111, 132, 136, 142, 150, 163, 178, 189, 210, 234, 236, 237, 238, 244, 250, 256, 257, 258, 259, 272, 297, 298, 300, 314, 321, 325, 330, 331, 332, 334, 343, 351, 352, 354, 360, 367, 371, 373, 375, 378, 380, 383, 390, 392, 405, 406, 411, 416, 418, 421, 424, 425, 428, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 490, 505, 506, 507, 514, 515, 516, 517, 518, 525, 533, 544, 547, 556, 567, 569, 592, 593, 594, 634, 694, 695, 698, 707, 708, 713, 717, 718, 720, 722, 728, 734, 739, 740, 758, 760, 781, 782, 789, 795, 796, 798, 800, 801, 859, 860, 868, 872, 879, 887, 943, 945, 964, 987, 994, 1001, 1003, 1007, 1010, 1012, 1014, 1017, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "cluster_1": 150, "cluster_2": 150, "cluster_al": [450, 463], "cluster_cent": [73, 94, 96, 97, 463], "cluster_center_indic": [442, 456], "cluster_centers_": [77, 78, 83, 91, 93, 94, 96, 97, 120, 324, 353, 442, 445, 449, 450, 451], "cluster_centers_indic": [73, 456], "cluster_centers_indices_": [73, 442], "cluster_data": 92, "cluster_doc": 57, "cluster_hierarchy_": [410, 452], "cluster_id": [189, 353], "cluster_id_to_feature_id": 189, "cluster_label": [89, 93], "cluster_method": 452, "cluster_optics_dbscan": [2, 98, 410], "cluster_optics_xi": 2, "cluster_qr": [80, 410, 454, 464, 1049], "cluster_s": 353, "cluster_selection_epsilon": 448, "cluster_selection_method": 448, "cluster_std": [63, 73, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 225, 240, 259, 314, 343, 374, 515], "cluster_word": 57, "clusterer_": 89, "clustering_algorithm": [78, 79, 95], "clustering_metr": 91, "clustermixin": [2, 380, 1052], "clusters_std": 343, "clyde": 1040, "cl\u00e9ment": [1044, 1048, 1050], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 100, 111, 113, 120, 123, 136, 142, 161, 166, 173, 174, 187, 197, 205, 222, 225, 226, 229, 234, 235, 236, 241, 244, 245, 249, 254, 264, 265, 266, 291, 294, 295, 297, 301, 304, 306, 308, 309, 311, 313, 322, 325, 330, 331, 335, 337, 338, 339, 341, 342, 343, 349, 350, 357, 375, 411, 700, 920, 1004, 1014, 1020], "cm2013": 410, "cm_bright": [67, 306, 313], "cm_displai": 241, "cm_piyg": 313, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 80, 81, 83, 84, 86, 87, 91, 111, 113, 120, 123, 130, 136, 142, 161, 166, 173, 174, 187, 193, 197, 198, 204, 205, 222, 225, 226, 227, 229, 234, 235, 236, 244, 245, 249, 264, 266, 291, 295, 297, 299, 300, 302, 304, 306, 308, 309, 311, 313, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 346, 349, 350, 357, 700], "cmap_bold": [299, 302], "cmap_cv": 266, "cmap_data": 266, "cmap_light": [299, 302], "cmcsa": 51, "cmd": 376, "cmu": 902, "cname": 77, "cnb": 1006, "cnp": 379, "cnx": 1043, "co": [2, 43, 51, 53, 56, 58, 74, 75, 102, 151, 153, 175, 183, 186, 214, 235, 271, 286, 324, 334, 352, 353, 354, 359, 382, 416, 418, 451, 453, 455, 490, 514, 594, 702, 722, 767, 798, 999, 1014, 1025, 1028, 1029, 1030], "co2": [169, 177, 183, 420, 499, 614, 618, 625, 626, 628, 1025, 1042], "co2_data": 175, "co2_kernel": 175, "coars": [43, 142, 384, 450, 463], "coarser": [142, 146], "coast": [50, 304], "coastlin": [50, 168, 304, 375], "coca": 51, "cock": [154, 1044], "cockburn": 1037, "coclust": [57, 407, 453, 516], "cocoa": 1028, "code": [2, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 372, 376, 377, 379, 381, 382, 387, 390, 392, 393, 396, 401, 404, 406, 409, 410, 417, 418, 444, 445, 449, 451, 461, 499, 529, 533, 534, 540, 541, 545, 546, 548, 549, 551, 569, 575, 584, 585, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 685, 686, 688, 689, 714, 835, 836, 837, 874, 881, 993, 1001, 1005, 1014, 1016, 1018, 1019, 1023, 1024, 1025, 1027, 1028, 1035, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "code_book_": 837, "code_init": [534, 548], "code_s": [288, 837, 1005], "codebas": [326, 361, 378, 379, 380, 418, 1035, 1041], "codebook": [288, 569, 837], "codecov": 386, "codeofconduct": 378, "coder": [129, 545, 719], "codevig": 1041, "coef": [49, 87, 129, 185, 186, 193, 198, 204, 205, 207, 212, 216, 217, 218, 222, 228, 229, 254, 284, 308, 326, 349, 527, 649, 650, 652, 655, 656, 662, 663, 664, 665, 666, 672, 675, 677, 683, 684, 685, 686, 687, 688, 689, 690, 1008], "coef0": [191, 345, 347, 454, 538, 642, 643, 646, 778, 780, 909, 910, 911, 912, 913, 1002, 1019], "coef_": [46, 49, 53, 87, 115, 164, 165, 168, 185, 186, 193, 196, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 212, 216, 217, 218, 222, 228, 229, 248, 254, 284, 285, 318, 324, 339, 346, 349, 352, 361, 373, 380, 392, 413, 419, 467, 484, 485, 486, 552, 596, 597, 600, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 907, 908, 909, 910, 911, 912, 913, 987, 998, 1000, 1018, 1019, 1035, 1037, 1040, 1042, 1047, 1049, 1052, 1053], "coef_agglomeration_": 87, "coef_en_lr": 204, "coef_i": 186, "coef_init": [649, 650, 655, 656, 663, 664, 665, 666, 669, 670, 671, 679, 680, 681, 684, 687], "coef_l": 201, "coef_l1_lr": 204, "coef_l2_lr": 204, "coef_lar": 201, "coef_lasso": 201, "coef_lasso_": 207, "coef_multi_task_lasso_": 207, "coef_p": 201, "coef_path": [656, 666, 687], "coef_path_": [653, 654, 657, 658, 1000], "coef_path_continu": [656, 666, 687], "coef_path_lar": [656, 666, 687], "coef_pl": 201, "coef_positive_lar": 201, "coef_ridg": 196, "coef_selection_": 87, "coeff": 683, "coeff_diff": 199, "coeffeci": 1044, "coeffici": [2, 25, 46, 49, 73, 82, 91, 93, 109, 110, 113, 120, 123, 159, 165, 170, 183, 184, 185, 192, 196, 198, 199, 201, 204, 206, 207, 208, 209, 210, 211, 215, 216, 228, 231, 254, 271, 285, 308, 318, 322, 323, 324, 345, 348, 352, 353, 354, 365, 374, 380, 392, 395, 412, 413, 415, 419, 420, 423, 433, 454, 467, 469, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 499, 527, 529, 530, 534, 538, 540, 542, 545, 546, 551, 555, 557, 559, 561, 563, 565, 568, 571, 573, 585, 592, 596, 600, 612, 614, 617, 630, 638, 639, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 704, 706, 719, 722, 732, 737, 741, 746, 753, 756, 778, 780, 788, 789, 791, 795, 796, 799, 818, 830, 833, 840, 841, 850, 858, 865, 868, 880, 887, 907, 908, 909, 910, 911, 912, 913, 916, 918, 995, 998, 1000, 1018, 1019, 1025, 1035, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1052], "coefs_": [206, 308, 864, 865, 1008, 1040], "coefs_cf": 318, "coefs_enet": 201, "coefs_lar": 201, "coefs_lasso": 201, "coefs_no_cf": 318, "coefs_path": 662, "coefs_paths_": [662, 1045], "coefs_positive_enet": 201, "coefs_positive_lar": 201, "coefs_positive_lasso": 201, "coelho": [1036, 1038, 1039, 1043], "coelhudo": 1047, "cognit": [168, 375], "cohen": [2, 719, 1043], "cohen_kappa_scor": [2, 1004, 1040, 1042], "coher": 410, "cohort": 157, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 86, 87, 89, 95, 99, 100, 123, 183, 410, 418, 443, 464, 1016, 1025], "coincid": [174, 215, 420], "col": [52, 57, 62, 64, 73, 77, 82, 88, 92, 96, 97, 102, 105, 140, 155, 175, 233, 250, 349, 514, 516], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [425, 453, 455], "col_indic": 149, "col_nam": 52, "col_split": 52, "cola": 51, "cold": 291, "cole": 1044, "coleman": [1036, 1037], "colgat": [51, 55], "colin": [45, 373, 1041], "collabor": 378, "collaps": [43, 187, 250, 311, 341, 390], "colleagu": 271, "collect": [2, 41, 46, 49, 51, 52, 57, 62, 105, 138, 149, 150, 157, 168, 175, 182, 189, 200, 206, 236, 243, 274, 278, 353, 354, 365, 373, 375, 382, 396, 414, 415, 417, 418, 448, 466, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 572, 573, 584, 586, 587, 591, 592, 593, 594, 635, 732, 733, 741, 781, 786, 787, 790, 805, 809, 810, 812, 826, 974, 977, 993, 999, 1000, 1004, 1010, 1015, 1024, 1028, 1037, 1047], "colleg": [0, 185], "college_degre": 185, "collid": 418, "collin": 1038, "collinear": [186, 189, 218, 231, 417, 570, 651, 672, 683, 880, 1000, 1035], "collis": [353, 354, 418, 585, 592], "collot": [1049, 1050], "colombia": [50, 304, 373, 501], "colon": 378, "coloni": 373, "color": [43, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 67, 69, 70, 73, 75, 77, 79, 80, 81, 82, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 109, 110, 111, 112, 113, 116, 118, 120, 121, 122, 124, 126, 127, 128, 129, 134, 135, 140, 142, 143, 145, 148, 149, 150, 151, 152, 154, 156, 159, 161, 166, 170, 172, 173, 174, 175, 176, 177, 178, 179, 182, 186, 188, 189, 193, 194, 196, 197, 198, 200, 201, 202, 203, 205, 207, 209, 211, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 227, 230, 231, 234, 235, 236, 238, 240, 244, 245, 246, 248, 251, 256, 257, 258, 259, 260, 261, 262, 265, 266, 270, 272, 274, 275, 276, 277, 278, 280, 281, 282, 284, 285, 290, 293, 296, 297, 298, 299, 302, 303, 304, 306, 311, 312, 313, 315, 316, 317, 321, 327, 332, 333, 335, 339, 340, 341, 342, 343, 345, 347, 348, 349, 357, 358, 373, 375, 386, 410, 418, 496, 497, 509, 586, 587, 1018, 1020, 1040, 1045, 1047, 1052], "color_continuous_scal": 272, "color_intens": 48, "color_it": [257, 261, 262], "color_map": 335, "color_palett": [72, 135, 149, 261], "colorbar": [43, 50, 66, 75, 120, 130, 150, 166, 171, 173, 174, 176, 187, 233, 244, 260, 282, 311, 341, 700, 1047], "colorbarbas": 311, "colorblind": [72, 135, 149], "coloring_matrix": [109, 110], "colormap": [120, 178, 341, 700, 1048], "colors_": 77, "colors_list": 140, "colour": [259, 375, 418, 590, 1005], "colt": [729, 759, 1004], "colton": 996, "columbia": 0, "column": [2, 43, 47, 52, 58, 59, 93, 101, 104, 107, 141, 142, 143, 146, 149, 151, 154, 168, 175, 181, 183, 185, 186, 187, 188, 189, 202, 213, 214, 217, 221, 231, 242, 249, 250, 251, 254, 261, 265, 271, 272, 282, 283, 285, 290, 308, 316, 317, 318, 322, 323, 324, 325, 327, 328, 352, 353, 354, 365, 372, 373, 375, 378, 380, 384, 387, 390, 391, 392, 407, 410, 411, 413, 415, 417, 418, 419, 422, 425, 453, 455, 466, 468, 469, 473, 474, 480, 489, 490, 491, 492, 493, 495, 497, 499, 503, 504, 505, 507, 508, 511, 512, 513, 514, 516, 518, 529, 534, 537, 540, 544, 545, 551, 558, 560, 561, 564, 565, 567, 568, 569, 570, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 613, 630, 633, 635, 636, 637, 649, 651, 655, 661, 663, 665, 667, 668, 672, 683, 688, 689, 700, 716, 721, 722, 732, 733, 741, 757, 766, 771, 772, 773, 776, 786, 787, 790, 791, 803, 806, 807, 817, 828, 833, 838, 841, 842, 843, 844, 845, 846, 847, 848, 867, 871, 872, 873, 874, 880, 881, 882, 886, 887, 888, 889, 891, 892, 893, 897, 898, 907, 909, 912, 915, 917, 924, 929, 933, 934, 939, 951, 966, 979, 980, 982, 990, 993, 994, 996, 1000, 1002, 1004, 1005, 1012, 1014, 1019, 1024, 1025, 1035, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "column_labels_": [58, 59, 407, 453, 455], "column_nam": 231, "column_or_1d": [2, 387, 1046, 1050], "column_result": 272, "column_stack": [76, 306, 313], "column_to_drop": 186, "column_tran": [231, 411], "column_transform": 328, "columnar": [372, 466, 1023], "columns_": [57, 407, 425, 453, 455], "columns_to_drop": 265, "columntransform": [2, 43, 102, 103, 154, 186, 187, 188, 213, 231, 242, 250, 252, 254, 317, 321, 323, 324, 325, 327, 370, 372, 390, 391, 401, 468, 469, 632, 872, 993, 994, 1024, 1030, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "columntransformercolumntransform": [103, 154, 186, 188, 242, 252, 317, 321, 324], "columntransformerinot": [154, 187], "columnwis": 415, "com": [51, 102, 291, 352, 373, 376, 378, 382, 383, 384, 386, 390, 410, 444, 537, 544, 674, 708, 1042, 1045], "coma": 1028, "comaniciu": [96, 410, 450], "comapar": 410, "comb": 1049, "combat": [306, 415], "combin": [2, 19, 43, 51, 52, 58, 62, 64, 94, 102, 103, 105, 106, 107, 120, 126, 128, 129, 133, 143, 144, 148, 149, 157, 170, 176, 181, 182, 183, 186, 198, 213, 217, 230, 231, 237, 240, 242, 245, 267, 271, 272, 280, 282, 283, 300, 307, 317, 322, 323, 325, 344, 345, 354, 357, 365, 370, 374, 375, 378, 383, 391, 392, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 420, 422, 423, 447, 466, 468, 469, 475, 477, 478, 481, 482, 483, 491, 499, 511, 512, 518, 524, 527, 529, 534, 540, 541, 543, 545, 550, 552, 563, 565, 568, 570, 571, 613, 617, 619, 624, 627, 633, 637, 646, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 669, 671, 675, 676, 677, 678, 679, 681, 682, 684, 687, 695, 704, 733, 791, 803, 806, 807, 814, 815, 828, 830, 834, 851, 866, 867, 868, 872, 880, 881, 882, 887, 907, 977, 993, 996, 997, 1000, 1004, 1005, 1007, 1010, 1014, 1017, 1018, 1020, 1021, 1025, 1028, 1035, 1040, 1043, 1046, 1047, 1048, 1050, 1051], "combinator": 813, "combined_featur": 106, "combsccod": 1049, "comcast": 51, "come": [82, 100, 102, 111, 116, 125, 168, 170, 245, 285, 320, 352, 353, 365, 367, 371, 375, 378, 379, 382, 386, 390, 392, 396, 404, 409, 410, 414, 417, 418, 441, 452, 458, 474, 553, 708, 798, 824, 909, 912, 956, 993, 994, 998, 1001, 1003, 1007, 1010, 1019, 1035, 1046, 1049, 1051], "comedi": 878, "comfort": [88, 417], "command": [244, 365, 366, 376, 378, 382, 384, 386, 396, 418, 511, 1023, 1037], "comment": [80, 352, 376, 377, 378, 379, 381, 382, 386, 489, 582, 1004], "commerc": 1028, "commerci": [414, 1028], "commit": [381, 382, 386, 1027, 1035, 1036, 1037, 1038], "committ": [378, 1035], "commod": 1004, "common": [2, 52, 54, 55, 57, 123, 165, 168, 183, 184, 185, 209, 217, 218, 266, 271, 278, 288, 322, 345, 352, 354, 360, 365, 372, 378, 380, 386, 388, 390, 391, 395, 396, 401, 407, 408, 410, 411, 414, 416, 419, 420, 449, 467, 469, 499, 593, 635, 656, 675, 676, 704, 749, 756, 772, 804, 805, 808, 818, 820, 821, 822, 823, 824, 830, 833, 868, 870, 878, 879, 880, 885, 887, 892, 893, 895, 896, 897, 898, 924, 926, 953, 956, 993, 994, 1000, 1007, 1010, 1014, 1019, 1020, 1023, 1024, 1025, 1028, 1030, 1035, 1043, 1045, 1046, 1050], "common_nod": 360, "common_node_id": 360, "common_param": [90, 146, 149, 187, 246, 273, 274, 345], "commonli": [213, 268, 284, 345, 371, 392, 410, 411, 420, 617, 761, 762, 800, 836, 879, 1001, 1002, 1004, 1005, 1007, 1051], "commun": [247, 371, 377, 383, 386, 392, 393, 410, 417, 541, 543, 550, 695, 713, 879, 994, 1001, 1007, 1014, 1018, 1023, 1027, 1028, 1043, 1044], "commut": [43, 52], "comp": [57, 115, 116, 123, 130, 309, 334, 352, 353, 354, 373], "comp_cov": [471, 472, 473, 474, 475, 476, 477, 478], "compact": [168, 191, 311, 365, 375, 847, 848, 1020, 1037], "compani": [213, 231, 409, 410, 1028], "companion": [378, 1014], "companioni": 1035, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 81, 82, 85, 87, 88, 89, 90, 91, 97, 100, 103, 104, 105, 106, 111, 112, 114, 116, 123, 127, 129, 133, 134, 135, 137, 139, 142, 143, 144, 146, 148, 149, 150, 152, 154, 157, 160, 168, 174, 181, 182, 183, 186, 187, 188, 189, 192, 194, 196, 198, 200, 201, 202, 208, 210, 213, 214, 216, 217, 219, 221, 223, 227, 230, 231, 233, 234, 237, 239, 242, 245, 248, 250, 251, 253, 258, 259, 263, 266, 268, 269, 270, 272, 274, 276, 278, 280, 282, 283, 284, 286, 288, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 305, 308, 310, 312, 315, 316, 318, 322, 345, 352, 353, 354, 359, 360, 361, 367, 373, 375, 378, 380, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 419, 420, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 460, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 492, 499, 505, 507, 515, 517, 525, 527, 531, 534, 540, 542, 544, 548, 549, 554, 555, 564, 565, 566, 567, 568, 634, 642, 647, 648, 656, 658, 660, 661, 666, 669, 671, 679, 680, 687, 698, 708, 715, 718, 734, 741, 746, 789, 801, 803, 808, 817, 830, 833, 840, 849, 853, 856, 860, 864, 865, 867, 868, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 907, 908, 909, 911, 912, 993, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1025, 1035, 1037, 1042, 1043, 1048], "comparison": [47, 51, 53, 57, 60, 61, 62, 63, 65, 69, 71, 73, 75, 77, 83, 90, 91, 92, 93, 94, 96, 102, 110, 119, 121, 122, 124, 126, 130, 134, 137, 140, 146, 149, 152, 156, 157, 162, 169, 175, 176, 177, 179, 183, 188, 196, 198, 199, 200, 201, 204, 211, 213, 217, 228, 231, 232, 235, 236, 237, 238, 239, 243, 244, 258, 263, 265, 266, 267, 268, 275, 283, 285, 290, 300, 306, 313, 315, 316, 320, 322, 335, 338, 347, 351, 352, 353, 361, 373, 375, 392, 408, 410, 412, 413, 415, 419, 420, 439, 440, 444, 445, 447, 448, 449, 451, 464, 484, 485, 486, 490, 507, 515, 517, 518, 525, 528, 538, 544, 552, 553, 556, 567, 568, 584, 585, 591, 592, 593, 594, 609, 611, 613, 614, 618, 625, 628, 634, 642, 646, 662, 675, 691, 692, 693, 694, 695, 707, 741, 746, 782, 791, 803, 804, 805, 806, 808, 809, 817, 819, 820, 821, 822, 823, 824, 833, 842, 845, 849, 864, 865, 868, 880, 881, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 907, 909, 910, 912, 913, 915, 993, 997, 998, 1001, 1004, 1006, 1007, 1010, 1019, 1025, 1032], "compat": [247, 274, 291, 321, 372, 381, 387, 388, 390, 392, 396, 401, 404, 418, 465, 471, 511, 569, 580, 592, 606, 617, 618, 621, 622, 623, 625, 626, 635, 636, 637, 661, 662, 676, 678, 777, 781, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 851, 852, 867, 872, 880, 881, 919, 920, 926, 929, 945, 946, 966, 1001, 1007, 1009, 1023, 1024, 1028, 1030, 1035, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "compens": [112, 185, 187, 191, 213, 231, 272, 412, 415], "compet": [43, 186], "competit": [43, 146, 352, 417, 647, 1007], "compil": [154, 291, 354, 365, 366, 379, 380, 381, 386, 387, 390, 1023, 1035], "compl": 91, "complain": 1053, "complement": [2, 187, 281, 352, 635, 636, 805, 820, 823, 833, 842, 843, 844, 845, 846, 1011, 1026, 1030, 1043], "complementari": [43, 418], "complementnb": [2, 272, 352, 842, 843, 845, 846, 1006, 1043, 1047, 1048, 1050], "complementnbcomplementnb": 272, "complet": [0, 2, 43, 72, 73, 74, 79, 82, 85, 91, 95, 116, 149, 152, 163, 165, 168, 183, 188, 189, 219, 239, 240, 247, 250, 265, 269, 316, 318, 320, 353, 361, 373, 378, 382, 383, 386, 390, 411, 414, 415, 417, 418, 443, 447, 451, 454, 464, 465, 466, 469, 498, 539, 540, 541, 542, 547, 549, 561, 572, 573, 584, 590, 591, 592, 594, 630, 631, 632, 633, 648, 652, 660, 674, 676, 707, 708, 718, 719, 720, 732, 734, 739, 740, 760, 789, 798, 835, 838, 841, 850, 866, 867, 868, 869, 936, 988, 998, 1000, 1004, 1005, 1007, 1019, 1020, 1023, 1025, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "completed_fac": 249, "completeness_scor": [2, 73, 82, 91, 321, 353, 410, 739, 740, 798, 1004], "complex": [42, 48, 49, 54, 58, 104, 140, 154, 167, 170, 175, 181, 183, 217, 227, 230, 239, 246, 247, 250, 263, 269, 272, 275, 280, 312, 320, 323, 324, 328, 329, 341, 345, 354, 355, 360, 374, 378, 383, 390, 410, 411, 415, 417, 421, 442, 446, 449, 450, 452, 469, 491, 503, 504, 505, 517, 537, 544, 554, 560, 561, 562, 563, 565, 567, 568, 607, 633, 641, 659, 661, 679, 680, 737, 753, 803, 833, 835, 863, 867, 868, 872, 880, 887, 903, 907, 910, 913, 915, 916, 917, 918, 993, 994, 996, 997, 999, 1001, 1003, 1005, 1010, 1014, 1017, 1024, 1025, 1026, 1028, 1030, 1036, 1038, 1044, 1045, 1048], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [378, 392, 945, 1024], "complianc": [0, 149], "compliant": [325, 378, 1053], "complic": [64, 247, 306, 384, 420, 697, 1007], "compon": [2, 11, 43, 44, 55, 79, 91, 95, 102, 105, 114, 115, 119, 121, 122, 124, 125, 127, 128, 130, 152, 160, 175, 183, 185, 197, 198, 210, 222, 233, 244, 245, 248, 256, 257, 260, 261, 262, 264, 270, 272, 277, 291, 292, 293, 294, 302, 303, 309, 316, 322, 357, 365, 370, 373, 378, 380, 384, 387, 404, 406, 410, 411, 413, 418, 420, 422, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 505, 507, 518, 524, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 698, 800, 801, 802, 803, 806, 807, 817, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 950, 951, 996, 1001, 1003, 1014, 1016, 1019, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1035, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "component_1": 261, "component_2": 261, "component_indices_": [642, 1048], "components_": [45, 54, 91, 116, 120, 122, 123, 130, 244, 245, 309, 316, 324, 392, 411, 415, 446, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 642, 856, 863, 899, 900, 996, 1016, 1039, 1041, 1047, 1050, 1053], "components_col": 105, "compos": [2, 43, 44, 62, 101, 102, 103, 107, 116, 136, 143, 154, 183, 186, 187, 188, 213, 215, 231, 242, 250, 252, 254, 285, 288, 317, 321, 323, 324, 325, 327, 328, 391, 401, 410, 411, 414, 466, 467, 468, 469, 518, 556, 615, 1003, 1005, 1025, 1035], "composit": [7, 35, 242, 321, 370, 414, 661, 791, 994, 1000, 1013, 1030, 1036], "compound": [43, 231, 418, 613, 615, 683, 727, 755, 1000], "compoundkernel": [2, 613, 1049], "comprehens": [345, 386, 418, 761, 762, 1002, 1028, 1043], "compress": [42, 50, 55, 99, 183, 288, 311, 373, 404, 410, 415, 418, 419, 655, 675, 695, 837, 880, 974, 977, 989, 1000, 1005, 1014, 1025, 1035, 1044], "compressed_raccoon_kmean": 86, "compressed_raccoon_uniform": 86, "compris": [102, 146, 269, 352, 353, 354, 373, 390, 415, 417, 518, 810, 1001], "compromis": [48, 64, 187, 365, 378, 650, 682, 1007, 1038], "comput": [0, 2, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 80, 85, 87, 90, 91, 93, 94, 102, 104, 110, 111, 112, 113, 121, 129, 137, 141, 144, 145, 146, 147, 148, 149, 167, 168, 170, 175, 177, 178, 181, 186, 187, 188, 189, 191, 194, 195, 198, 199, 200, 201, 202, 213, 215, 217, 221, 227, 230, 231, 234, 237, 241, 243, 244, 246, 250, 251, 253, 265, 267, 269, 271, 272, 273, 274, 278, 280, 282, 291, 293, 295, 297, 298, 300, 301, 304, 311, 320, 324, 325, 328, 331, 333, 341, 345, 348, 352, 353, 354, 360, 366, 367, 372, 373, 375, 378, 383, 384, 385, 387, 390, 391, 392, 395, 396, 404, 405, 406, 407, 408, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 459, 461, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 519, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 585, 588, 589, 592, 593, 594, 596, 597, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 728, 729, 730, 732, 733, 734, 737, 739, 741, 742, 743, 746, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 799, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 872, 873, 876, 877, 882, 883, 884, 885, 886, 887, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 912, 914, 915, 916, 917, 918, 948, 949, 950, 951, 968, 969, 976, 978, 984, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "computation": [37, 53, 109, 120, 140, 145, 154, 170, 291, 345, 352, 364, 379, 390, 410, 411, 414, 415, 417, 420, 541, 635, 636, 674, 766, 803, 805, 806, 807, 817, 830, 1000, 1001, 1003, 1011, 1012, 1016, 1030, 1039], "compute_class_weight": [2, 392, 1038, 1049], "compute_corrected_ttest": 271, "compute_dist": [443, 447, 1047], "compute_full_tre": [443, 447, 1039], "compute_import": 1037, "compute_inverse_compon": [899, 900, 1016], "compute_inverse_transform": 1049, "compute_label": [444, 451], "compute_node_depth": 360, "compute_optics_graph": [2, 457, 458, 1052], "compute_sample_weight": [2, 1049], "compute_scor": [107, 127, 193, 194, 647, 648, 1044], "compute_sourc": 422, "computed_scor": 648, "con": [404, 592, 1003], "concat": [43, 181, 185, 202, 231, 880], "concaten": [2, 63, 70, 74, 83, 94, 101, 104, 112, 136, 150, 164, 178, 183, 193, 196, 205, 227, 228, 234, 240, 256, 260, 261, 267, 276, 278, 279, 280, 281, 296, 309, 315, 318, 331, 340, 344, 352, 411, 466, 469, 507, 512, 534, 540, 544, 545, 602, 784, 803, 866, 867, 869, 872, 880, 912, 1005, 1025, 1036], "concav": [168, 328, 375], "concentr": [46, 48, 98, 118, 125, 134, 152, 175, 182, 183, 238, 255, 257, 262, 282, 301, 313, 332, 374, 378, 417, 445, 522, 800, 1003, 1010, 1025], "concentrations_prior": 256, "concept": [2, 112, 140, 144, 247, 280, 390, 410, 416, 418, 996, 1004, 1007, 1020, 1028], "conceptu": [375, 417, 1002], "concern": [37, 56, 71, 108, 114, 117, 119, 131, 133, 162, 169, 180, 183, 190, 192, 232, 255, 261, 265, 287, 289, 292, 305, 310, 329, 336, 351, 355, 365, 380, 404, 1001, 1016], "concis": [64, 213, 378, 383, 1046, 1048], "conclud": [134, 186, 194, 231, 271, 354, 361, 393, 867], "conclus": [43, 125, 186, 188, 213, 215, 271, 273, 361, 417], "concomit": [652, 1000], "concret": [217, 379, 393, 409, 419, 677, 678, 899, 900, 1000, 1018, 1023], "concurr": [392, 418, 969, 1047, 1049], "conda": [320, 321, 322, 323, 324, 325, 326, 327, 328, 366, 378, 379, 381, 382, 384, 386, 396, 397, 403, 404, 1020], "conda_prefix": 384, "condarc": 376, "condens": [191, 448], "condit": [2, 43, 51, 52, 62, 64, 113, 146, 183, 184, 186, 202, 215, 218, 231, 247, 251, 274, 323, 360, 384, 390, 395, 406, 407, 408, 409, 410, 412, 415, 417, 419, 453, 466, 473, 474, 475, 480, 499, 516, 526, 527, 539, 542, 543, 544, 546, 548, 550, 552, 553, 565, 630, 635, 636, 646, 653, 654, 655, 657, 658, 659, 673, 675, 676, 677, 678, 685, 686, 690, 700, 715, 720, 721, 739, 740, 798, 842, 843, 844, 845, 846, 865, 868, 871, 880, 881, 884, 888, 951, 975, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1014, 1020, 1025, 1030, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1053], "condition": [51, 64, 213, 408, 412, 761, 998], "condition2": 154, "conduct": [185, 271, 420, 1027, 1049], "conf": [46, 64, 382, 408, 414, 842, 1006, 1049], "confer": [265, 271, 373, 410, 415, 421, 441, 446, 452, 514, 538, 566, 699, 711, 729, 759, 863, 864, 865, 1004, 1010, 1016, 1020], "confid": [52, 61, 62, 63, 64, 149, 175, 177, 257, 271, 274, 333, 393, 408, 420, 639, 661, 662, 669, 671, 674, 677, 678, 679, 701, 705, 710, 723, 729, 730, 742, 743, 759, 792, 835, 874, 907, 909, 912, 1000, 1003, 1004, 1005, 1010, 1017, 1018, 1019, 1028, 1045], "config": [52, 366, 376, 378, 379, 386, 629, 1043], "config_context": [2, 254, 365, 366, 406, 629, 905, 1042, 1048, 1051], "configur": [2, 3, 46, 49, 64, 103, 104, 187, 247, 252, 254, 285, 318, 352, 364, 376, 378, 380, 384, 386, 390, 392, 396, 401, 406, 411, 418, 419, 434, 444, 445, 447, 449, 451, 454, 464, 466, 470, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 569, 570, 571, 572, 573, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 629, 630, 631, 632, 633, 635, 638, 641, 642, 643, 644, 645, 691, 692, 693, 694, 695, 697, 698, 791, 803, 817, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 969, 970, 1001, 1004, 1014, 1019, 1023, 1030, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052], "confirm": [43, 52, 116, 137, 143, 146, 149, 188, 213, 215, 265, 274, 277, 280, 316, 354, 382, 993, 1014, 1043], "conflict": [376, 378, 382, 386, 396, 1042, 1043], "conform": [52, 378, 584, 631, 835, 836, 1004, 1023, 1024, 1042, 1048], "confound": [185, 186], "confus": [2, 68, 183, 241, 263, 265, 280, 330, 331, 352, 392, 470, 507, 634, 655, 700, 716, 718, 721, 732, 733, 741, 757, 787, 790, 833, 905, 912, 1025, 1035, 1036, 1040, 1044, 1045, 1047, 1048, 1049, 1050], "confusingli": 376, "confusion_matrix": [2, 68, 241, 264, 265, 328, 330, 331, 700, 716, 757, 802, 830, 1004, 1036, 1041, 1042, 1045, 1046, 1048, 1052], "confusion_matrix_scor": 1004, "confusionmatrixdisplai": [2, 45, 68, 264, 323, 328, 330, 352, 634, 721, 1004, 1045, 1046, 1048, 1049, 1050], "congruenc": [657, 658, 659, 685, 686], "conjug": [271, 454, 464, 675, 677, 690, 698, 1000], "conjunct": [401, 410, 597, 809, 825, 826, 828, 829, 830, 831, 834, 970, 994, 1000, 1050], "connect": [2, 51, 74, 79, 81, 84, 87, 95, 99, 100, 376, 378, 387, 392, 412, 443, 447, 454, 464, 465, 588, 589, 698, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 1002, 1007, 1009, 1017, 1027, 1039, 1048, 1052], "connected_compon": 1042, "connectionist": [864, 865], "conner": 1048, "connor": [1043, 1048, 1052, 1053], "connossor": [1043, 1044], "conocophillip": 51, "conort": 1028, "conquer": 951, "conrad": [1035, 1036, 1050, 1053], "conroi": 1050, "consecut": [134, 144, 214, 390, 408, 414, 418, 445, 449, 451, 452, 454, 458, 461, 464, 540, 541, 542, 549, 605, 648, 669, 670, 671, 679, 680, 681, 800, 801, 808, 842, 843, 844, 845, 846, 864, 865, 993, 1014, 1043], "consensu": [2, 58, 59, 72, 377, 378, 393, 407, 410, 652, 674, 681, 682, 722, 1004], "consensus_scor": [2, 58, 59, 407, 1037], "consequ": [90, 127, 231, 271, 272, 311, 338, 361, 408, 409, 415, 417, 564, 565, 569, 658, 659, 994, 1000, 1004, 1012, 1020, 1044, 1046, 1051, 1053], "conserv": [50, 392, 585, 592, 899, 900, 1003, 1016], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 88, 99, 103, 112, 120, 124, 126, 143, 146, 163, 167, 168, 182, 187, 213, 215, 247, 265, 271, 274, 278, 282, 285, 291, 294, 297, 298, 311, 322, 328, 338, 345, 346, 348, 352, 361, 365, 366, 367, 370, 377, 378, 380, 384, 386, 390, 392, 393, 401, 404, 406, 409, 410, 415, 416, 417, 418, 419, 420, 421, 422, 440, 446, 448, 452, 459, 476, 511, 512, 524, 536, 544, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 588, 589, 591, 592, 594, 596, 610, 611, 623, 634, 635, 636, 649, 655, 661, 662, 663, 665, 674, 682, 691, 692, 693, 695, 696, 697, 699, 703, 705, 708, 710, 712, 718, 729, 733, 737, 759, 789, 791, 797, 849, 850, 851, 853, 855, 857, 858, 859, 862, 864, 865, 870, 880, 881, 888, 902, 903, 912, 913, 915, 916, 917, 918, 928, 987, 993, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1024, 1038, 1039, 1043, 1047, 1048, 1050, 1051, 1052], "consider": [148, 149, 171, 174, 250, 266, 272, 278, 373, 378, 409, 420, 622, 803, 817, 825, 993, 1000, 1006, 1010, 1018, 1028, 1052], "consist": [2, 43, 46, 63, 68, 72, 89, 90, 102, 111, 118, 120, 140, 143, 149, 150, 157, 168, 173, 175, 178, 182, 189, 213, 231, 246, 250, 277, 280, 308, 316, 320, 323, 348, 353, 361, 365, 371, 373, 375, 378, 384, 385, 386, 387, 391, 392, 393, 408, 410, 412, 416, 417, 418, 428, 429, 432, 433, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 492, 500, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 557, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 594, 614, 630, 631, 632, 633, 638, 641, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 680, 681, 682, 690, 691, 692, 693, 694, 703, 738, 800, 801, 810, 835, 836, 837, 839, 840, 841, 842, 850, 851, 853, 855, 858, 859, 865, 870, 871, 872, 874, 878, 879, 882, 883, 885, 886, 888, 899, 900, 903, 907, 908, 910, 911, 913, 916, 918, 924, 933, 935, 958, 974, 977, 992, 993, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1014, 1017, 1019, 1020, 1022, 1024, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "consol": [142, 376], "consolid": [0, 392, 393, 1035], "consolidate_scor": 52, "consortium": [0, 1028], "constant": [2, 43, 129, 137, 149, 173, 176, 177, 182, 186, 200, 214, 215, 217, 231, 242, 247, 252, 274, 303, 307, 309, 312, 314, 321, 348, 350, 361, 370, 380, 387, 392, 407, 417, 420, 433, 448, 467, 484, 485, 486, 514, 516, 537, 541, 543, 550, 552, 553, 554, 555, 557, 559, 561, 563, 565, 568, 571, 573, 593, 609, 612, 614, 616, 630, 633, 635, 636, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 679, 680, 681, 682, 683, 690, 692, 696, 698, 724, 726, 727, 731, 735, 778, 780, 788, 802, 825, 840, 841, 850, 858, 864, 865, 872, 883, 886, 895, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 996, 998, 1000, 1001, 1004, 1006, 1007, 1014, 1018, 1020, 1030, 1038, 1043, 1045, 1047, 1048, 1049, 1051, 1053], "constant_": 555, "constant_valu": [420, 616, 620], "constant_value_bound": [420, 614, 616, 620], "constantini": 1051, "constantkernel": [2, 173, 179, 420, 614, 620, 624, 627], "constantli": [72, 213, 1028], "constitu": 375, "constitut": [83, 392, 414, 417, 452, 458, 591, 592, 594, 1008], "constrain": [25, 81, 120, 143, 149, 151, 187, 204, 284, 306, 321, 327, 339, 341, 371, 392, 410, 415, 417, 512, 564, 565, 638, 661, 662, 693, 697, 825, 832, 1000, 1003, 1039], "constrained_layout": [120, 187, 233, 317, 318, 325], "constraint": [88, 90, 100, 120, 133, 183, 201, 208, 217, 250, 251, 266, 307, 308, 309, 321, 378, 390, 415, 418, 489, 511, 512, 560, 561, 562, 563, 564, 565, 567, 568, 635, 638, 821, 822, 915, 916, 917, 918, 972, 993, 995, 1000, 1001, 1018, 1025, 1039, 1042, 1043, 1046, 1048, 1050, 1052], "constru": 418, "construct": [2, 43, 50, 102, 104, 134, 136, 138, 154, 168, 231, 241, 247, 252, 254, 304, 312, 314, 321, 324, 372, 375, 380, 387, 392, 410, 411, 414, 415, 417, 418, 421, 435, 443, 444, 446, 447, 452, 454, 459, 465, 467, 469, 522, 538, 544, 547, 558, 559, 584, 590, 642, 691, 693, 694, 817, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 866, 867, 868, 869, 871, 912, 932, 934, 950, 951, 962, 966, 993, 994, 996, 1000, 1001, 1004, 1005, 1007, 1014, 1017, 1019, 1020, 1024, 1040, 1042, 1043, 1046, 1049], "construct_grid": [50, 304], "constructor": [30, 31, 104, 243, 366, 380, 392, 411, 418, 466, 469, 552, 553, 558, 570, 571, 572, 573, 584, 585, 591, 592, 600, 671, 679, 680, 802, 803, 817, 849, 850, 851, 853, 855, 857, 858, 859, 866, 867, 868, 869, 993, 1005, 1014, 1019, 1024, 1035, 1036, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "consult": 1004, "consum": [2, 120, 361, 372, 380, 392, 401, 410, 414, 417, 451, 806, 807, 867, 868, 959, 960, 969, 1000, 1028, 1040, 1052], "consumpt": [47, 365, 392, 410, 537, 560, 561, 567, 568, 803, 817, 828, 829, 830, 915, 916, 917, 918, 969, 1035, 1037, 1041, 1043, 1044, 1049], "contact": [390, 1023], "contain": [2, 49, 57, 61, 64, 69, 75, 82, 89, 91, 102, 103, 126, 136, 138, 149, 150, 176, 186, 187, 189, 191, 204, 217, 231, 240, 247, 250, 251, 254, 261, 265, 269, 271, 277, 280, 281, 284, 290, 297, 298, 300, 311, 323, 331, 334, 352, 353, 371, 372, 373, 375, 378, 380, 382, 383, 384, 385, 386, 387, 390, 392, 404, 406, 408, 410, 411, 413, 414, 415, 417, 418, 419, 420, 422, 424, 434, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 499, 503, 505, 506, 507, 511, 512, 513, 517, 518, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 694, 695, 699, 700, 701, 703, 704, 705, 712, 715, 719, 738, 739, 740, 775, 782, 783, 791, 797, 800, 801, 802, 803, 806, 807, 809, 817, 821, 822, 825, 826, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 929, 932, 933, 934, 954, 955, 958, 959, 966, 969, 970, 972, 993, 994, 996, 1002, 1005, 1008, 1010, 1012, 1014, 1015, 1017, 1020, 1023, 1027, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "container": 404, "container_fold": 506, "container_path": 506, "contamin": [48, 111, 112, 240, 250, 297, 298, 471, 566, 853, 1010, 1043, 1051, 1052], "content": [2, 7, 55, 316, 352, 354, 373, 378, 382, 384, 404, 418, 488, 506, 511, 512, 591, 592, 594, 674, 921, 1013, 1028, 1036, 1045], "context": [2, 91, 254, 265, 284, 291, 328, 365, 366, 372, 377, 379, 391, 392, 410, 411, 416, 417, 418, 420, 421, 439, 446, 448, 450, 452, 454, 459, 460, 463, 466, 469, 470, 474, 534, 538, 539, 540, 542, 545, 546, 547, 548, 549, 551, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 597, 605, 610, 611, 613, 629, 630, 633, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 853, 855, 857, 858, 860, 861, 866, 869, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 994, 1000, 1004, 1010, 1014, 1018, 1024, 1027, 1028, 1035, 1042, 1043, 1048, 1051], "contigu": [43, 59, 380, 390, 407, 414, 418, 445, 449, 451, 461, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 784, 822, 847, 848, 907, 909, 910, 911, 912, 913, 1019, 1038, 1045, 1049, 1053], "contin": [416, 717, 1014], "conting": [2, 717, 718, 734, 758, 1041], "contingency_matrix": [2, 410, 758, 1043], "continu": [0, 2, 52, 55, 57, 77, 118, 143, 170, 183, 187, 194, 214, 221, 231, 234, 237, 250, 251, 253, 257, 261, 262, 308, 310, 316, 317, 322, 323, 360, 366, 373, 376, 380, 381, 382, 383, 386, 390, 392, 393, 396, 410, 415, 417, 470, 495, 595, 598, 599, 602, 603, 610, 611, 612, 635, 649, 650, 655, 656, 660, 663, 664, 665, 666, 729, 759, 815, 817, 870, 872, 874, 876, 877, 886, 887, 888, 904, 905, 916, 966, 993, 1000, 1001, 1004, 1005, 1007, 1008, 1014, 1020, 1024, 1025, 1028, 1032, 1035, 1037, 1038, 1043, 1048, 1049, 1050, 1052], "continuous_featur": 383, "contour": [48, 50, 70, 80, 81, 111, 142, 161, 168, 173, 174, 176, 224, 225, 226, 227, 240, 245, 260, 297, 304, 339, 340, 342, 343, 345, 346, 375, 385, 634, 635, 1010, 1018], "contour_kw": 635, "contourf": [50, 142, 227, 245, 297, 304, 306, 313, 314, 335, 340, 346, 350, 634, 635], "contours_": [385, 635], "contract": [213, 231, 345, 366, 392, 1024], "contradict": [189, 1024], "contrari": [43, 53, 186, 234, 238, 250, 256, 274, 311, 352, 372, 410, 499, 547, 609, 805, 820, 888, 1000, 1006, 1010], "contrast": [128, 187, 215, 246, 250, 271, 273, 300, 316, 353, 392, 408, 410, 413, 417, 420, 451, 454, 464, 622, 646, 817, 863, 994, 997, 999, 1000, 1004, 1007, 1009, 1012, 1014, 1017, 1018, 1020, 1045], "contrib": [326, 378, 380, 386, 390, 392, 410, 448, 1023, 1024, 1051], "contribut": [0, 53, 58, 147, 175, 198, 217, 280, 316, 375, 376, 380, 381, 382, 386, 392, 393, 396, 415, 416, 417, 449, 451, 556, 557, 562, 563, 729, 732, 759, 998, 1004, 1007, 1012, 1019, 1023, 1024, 1027, 1028, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "contributor": [366, 381, 382, 383, 386, 390, 392, 1004, 1024, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "control": [37, 51, 70, 94, 124, 125, 140, 159, 175, 177, 198, 214, 217, 221, 243, 244, 272, 274, 288, 293, 309, 321, 323, 345, 356, 358, 359, 365, 366, 371, 374, 378, 380, 383, 386, 390, 392, 396, 409, 410, 413, 414, 415, 416, 419, 420, 435, 442, 451, 456, 473, 474, 480, 534, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 596, 597, 599, 617, 622, 628, 630, 635, 637, 642, 644, 645, 649, 650, 652, 653, 654, 655, 657, 658, 659, 675, 677, 679, 680, 685, 686, 690, 695, 704, 712, 800, 801, 803, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 833, 834, 837, 838, 841, 864, 865, 886, 888, 899, 900, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 921, 969, 990, 993, 1000, 1001, 1003, 1004, 1005, 1007, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1023, 1024, 1026, 1030, 1035, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "convei": [67, 238, 313], "conveni": [52, 88, 217, 250, 370, 386, 390, 411, 414, 418, 420, 425, 445, 449, 451, 453, 455, 466, 491, 614, 679, 681, 702, 731, 788, 866, 867, 977, 994, 996, 1000, 1001, 1011, 1028, 1035], "convent": [2, 132, 149, 265, 271, 378, 380, 381, 382, 384, 392, 406, 428, 429, 432, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 471, 472, 473, 474, 475, 476, 477, 478, 511, 512, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 550, 566, 569, 572, 573, 584, 585, 586, 591, 592, 594, 630, 631, 632, 633, 680, 691, 692, 693, 694, 721, 800, 801, 835, 836, 851, 853, 855, 859, 871, 879, 882, 883, 885, 888, 899, 900, 911, 945, 946, 1004, 1035, 1042, 1043, 1046, 1048, 1049, 1051, 1052], "convention": [339, 392, 903], "converg": [2, 55, 90, 94, 109, 110, 144, 146, 149, 170, 176, 206, 215, 221, 229, 257, 259, 307, 308, 311, 316, 331, 367, 387, 392, 407, 410, 415, 418, 420, 422, 442, 445, 448, 449, 450, 451, 454, 456, 461, 462, 463, 464, 473, 474, 480, 484, 485, 486, 536, 538, 539, 540, 541, 542, 549, 574, 613, 647, 648, 649, 650, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 671, 675, 677, 679, 681, 685, 686, 690, 691, 693, 694, 697, 698, 800, 801, 856, 864, 865, 902, 903, 909, 994, 999, 1000, 1001, 1003, 1008, 1018, 1035, 1038, 1039, 1040, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "converged_": [800, 801, 1053], "convergence_it": [442, 456], "convergencewarn": [2, 174, 176, 178, 221, 228, 257, 307, 308, 313, 387, 392, 800, 801, 1043, 1044, 1047], "convers": [2, 55, 146, 204, 352, 361, 367, 372, 378, 380, 386, 390, 392, 404, 418, 575, 862, 871, 879, 933, 934, 989, 1001, 1024, 1028, 1043, 1044, 1045, 1048, 1051], "convert": [2, 55, 70, 80, 99, 103, 123, 175, 189, 213, 233, 250, 253, 257, 258, 261, 262, 285, 304, 328, 360, 365, 372, 373, 387, 390, 392, 404, 418, 442, 445, 446, 449, 451, 452, 453, 454, 461, 466, 467, 499, 537, 544, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 584, 585, 591, 592, 593, 594, 596, 597, 609, 630, 631, 632, 633, 649, 655, 661, 662, 663, 665, 669, 670, 671, 673, 677, 679, 680, 681, 695, 749, 781, 802, 825, 862, 871, 872, 874, 878, 880, 881, 882, 884, 907, 915, 916, 917, 918, 931, 933, 934, 958, 988, 989, 993, 1000, 1001, 1002, 1004, 1014, 1015, 1019, 1020, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "convex": [129, 145, 146, 183, 192, 220, 233, 349, 353, 410, 412, 415, 423, 448, 454, 464, 475, 477, 478, 481, 482, 483, 661, 679, 695, 1000, 1001, 1007, 1008, 1018, 1025, 1048], "convinc": 186, "convolut": [45, 178], "convolv": 309, "coo": [392, 556, 557, 695, 874, 929, 933, 934, 1007, 1036, 1052], "coo_matrix": [53, 199, 454, 588, 589, 974, 977], "cook": [375, 497, 1035, 1041], "cookbook": [420, 625, 626], "cool": [418, 1035], "coolwarm": [266, 338], "cooman": 375, "coord": [588, 1005], "coordin": [2, 50, 51, 53, 87, 125, 153, 174, 201, 233, 272, 304, 365, 373, 415, 420, 445, 449, 450, 451, 463, 473, 474, 480, 534, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 553, 588, 617, 649, 650, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 684, 685, 686, 687, 691, 692, 693, 696, 697, 709, 767, 772, 907, 1000, 1001, 1019, 1035, 1038, 1039, 1040, 1044, 1046, 1048, 1049, 1050], "cop": 51, "cope": [240, 367, 373, 1000], "copeland": [1043, 1044], "copi": [44, 51, 55, 79, 95, 107, 123, 137, 149, 168, 181, 182, 186, 187, 188, 199, 206, 219, 229, 231, 234, 247, 291, 330, 331, 333, 335, 353, 357, 366, 375, 378, 380, 382, 383, 384, 390, 392, 435, 439, 442, 444, 445, 446, 448, 449, 451, 456, 461, 484, 485, 486, 487, 503, 505, 513, 535, 536, 537, 538, 544, 551, 556, 557, 562, 564, 565, 575, 593, 600, 610, 611, 613, 614, 631, 633, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 674, 675, 677, 682, 684, 687, 688, 689, 735, 772, 795, 803, 817, 847, 848, 862, 870, 873, 876, 877, 878, 879, 883, 884, 885, 887, 890, 892, 893, 894, 895, 896, 897, 898, 902, 903, 907, 909, 910, 911, 912, 913, 922, 931, 933, 934, 962, 974, 976, 977, 1014, 1019, 1020, 1024, 1035, 1038, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "copy_": 1035, "copy_cov": 551, "copy_gram": [685, 686, 689], "copy_x": [445, 449, 461, 538, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 675, 677, 682, 684, 685, 686, 687, 688, 1037, 1043, 1044], "copy_x_train": [613, 614], "copy_xi": 689, "copybutton": [378, 396, 403], "copyright": [0, 55], "corani": 271, "cordier": 1042, "core": [42, 49, 82, 88, 98, 103, 134, 140, 142, 183, 186, 187, 265, 325, 364, 366, 378, 381, 386, 392, 396, 404, 410, 415, 417, 418, 421, 446, 448, 451, 452, 457, 459, 499, 502, 541, 592, 597, 661, 662, 669, 671, 679, 842, 843, 844, 845, 846, 851, 859, 1000, 1007, 1010, 1019, 1024, 1025, 1026, 1028, 1030, 1037, 1039, 1040, 1042, 1045, 1049, 1050, 1051], "core_dist": [98, 457, 458, 459], "core_distances_": [98, 452, 457, 459], "core_sampl": 421, "core_sample_indices_": [82, 446], "core_samples_mask": 82, "corei": [1036, 1043, 1044], "corentin": 1049, "cori": 1040, "corneil": 1048, "corner": [50, 53, 63, 86, 185, 268, 272, 280, 281, 304, 327, 373, 378, 501, 919, 921, 1004, 1049], "cornerston": 1028, "cornflowerblu": [153, 207, 216, 223, 257, 259, 262, 278, 280, 296, 302, 358, 359], "corollari": 380, "corona": 1048, "corpora": 415, "corpu": [54, 353, 354, 373, 415, 591, 592, 593, 594, 1036], "corr": [115, 189, 271], "corrcoef": [115, 130], "correct": [2, 30, 52, 63, 64, 90, 112, 134, 144, 178, 186, 198, 202, 213, 231, 256, 264, 265, 271, 278, 280, 288, 290, 341, 343, 352, 361, 375, 378, 380, 382, 393, 406, 408, 410, 414, 415, 417, 418, 427, 433, 452, 458, 471, 476, 490, 504, 506, 638, 670, 679, 681, 706, 707, 711, 715, 716, 721, 724, 726, 727, 731, 732, 733, 737, 741, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 786, 787, 788, 790, 793, 794, 797, 799, 835, 836, 837, 844, 852, 878, 988, 1000, 1004, 1005, 1019, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "correct_covari": [471, 476], "corrected_std": 271, "corrected_var": 271, "correctli": [2, 163, 167, 213, 231, 247, 278, 280, 286, 301, 318, 332, 341, 378, 387, 415, 417, 427, 439, 471, 496, 552, 553, 554, 556, 558, 560, 562, 564, 567, 570, 572, 613, 661, 669, 671, 677, 678, 679, 706, 797, 799, 802, 825, 835, 836, 837, 838, 842, 843, 844, 845, 846, 849, 854, 857, 864, 887, 902, 903, 907, 909, 910, 911, 912, 913, 915, 917, 952, 1001, 1004, 1007, 1008, 1014, 1019, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "correl": [2, 51, 64, 113, 115, 116, 130, 141, 147, 149, 151, 164, 167, 175, 183, 184, 185, 187, 188, 198, 202, 208, 231, 271, 277, 290, 317, 321, 322, 333, 371, 374, 375, 383, 392, 395, 407, 412, 414, 419, 452, 459, 484, 485, 487, 496, 497, 503, 527, 567, 609, 612, 630, 637, 638, 639, 685, 686, 746, 760, 781, 782, 783, 833, 847, 848, 884, 885, 887, 896, 995, 1000, 1005, 1011, 1014, 1018, 1020, 1024, 1025, 1026, 1030, 1035, 1036, 1037, 1048, 1049], "correlation_coeffici": 612, "correlation_model": 1042, "correspond": [2, 50, 52, 53, 58, 63, 64, 68, 76, 86, 98, 109, 113, 122, 134, 137, 140, 141, 142, 150, 164, 167, 168, 171, 176, 179, 186, 202, 205, 213, 214, 217, 222, 231, 241, 246, 247, 254, 261, 265, 270, 272, 274, 275, 280, 281, 285, 304, 316, 322, 323, 324, 353, 356, 357, 360, 361, 366, 372, 373, 374, 377, 378, 380, 382, 385, 386, 391, 392, 393, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 425, 431, 439, 441, 443, 447, 450, 453, 455, 461, 463, 465, 466, 469, 474, 484, 485, 486, 492, 493, 495, 496, 497, 498, 499, 537, 544, 547, 548, 549, 552, 553, 555, 558, 560, 562, 563, 564, 567, 585, 587, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 620, 631, 633, 635, 636, 638, 646, 649, 650, 651, 655, 661, 662, 663, 664, 665, 671, 672, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 690, 693, 694, 695, 697, 706, 713, 716, 727, 728, 737, 741, 745, 749, 755, 757, 777, 781, 785, 791, 792, 797, 799, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 828, 836, 838, 839, 842, 843, 844, 845, 846, 847, 848, 852, 853, 854, 856, 864, 865, 874, 877, 878, 880, 881, 884, 888, 896, 907, 908, 909, 912, 915, 916, 917, 918, 928, 938, 945, 960, 963, 978, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "correspondingli": 1052, "corri": 1046, "corrobor": 390, "corrupt": [44, 127, 198, 219, 230, 390, 863, 1000, 1012], "cort": [1046, 1047, 1050, 1051], "cortex": 415, "cos_transform": 43, "cosin": [2, 43, 75, 286, 291, 296, 370, 373, 392, 410, 415, 416, 443, 447, 452, 459, 538, 593, 594, 623, 699, 763, 764, 765, 768, 773, 774, 777, 781, 782, 783, 847, 848, 852, 879, 1007, 1020, 1030, 1045], "cosine_dist": [2, 406, 699, 765, 1007, 1041], "cosine_similar": [2, 345, 406, 763, 768, 1002, 1040], "cosinesimil": 291, "cosmo": 57, "cost": [0, 43, 74, 123, 140, 149, 170, 183, 191, 233, 241, 245, 263, 273, 275, 278, 280, 285, 320, 328, 341, 353, 354, 355, 360, 378, 384, 386, 390, 409, 410, 417, 480, 499, 503, 540, 541, 542, 549, 554, 560, 561, 562, 563, 564, 567, 568, 605, 613, 622, 630, 649, 650, 655, 656, 661, 663, 664, 665, 666, 671, 675, 677, 679, 681, 690, 691, 695, 703, 705, 721, 745, 787, 790, 802, 803, 825, 833, 868, 887, 905, 907, 908, 909, 912, 915, 916, 917, 918, 951, 996, 1000, 1001, 1004, 1007, 1017, 1018, 1019, 1025, 1026, 1030, 1041, 1044, 1045], "cost_complexity_pruning_path": [356, 915, 916, 917, 918], "costa": [1043, 1048], "costin": 1035, "costli": [104, 109, 141, 181, 265, 272, 349, 366, 379, 384, 410, 445, 630, 811, 813, 899, 900, 951, 1004, 1007, 1016, 1024], "costlier": 674, "costs_": [473, 474, 1051], "could": [43, 48, 52, 53, 64, 72, 77, 86, 103, 104, 120, 123, 135, 136, 143, 146, 149, 165, 170, 175, 182, 185, 186, 187, 213, 214, 217, 222, 231, 237, 245, 246, 247, 264, 265, 271, 284, 290, 299, 302, 323, 337, 338, 352, 356, 360, 367, 378, 384, 386, 392, 396, 404, 408, 414, 417, 418, 422, 476, 536, 541, 610, 611, 632, 674, 805, 810, 812, 994, 1000, 1001, 1011, 1012, 1014, 1019, 1024, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "couldn": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "count": [2, 23, 43, 52, 54, 62, 64, 76, 82, 86, 102, 103, 118, 155, 156, 186, 187, 213, 215, 231, 244, 254, 265, 280, 285, 288, 291, 321, 322, 353, 354, 373, 375, 382, 387, 392, 393, 408, 410, 415, 417, 418, 448, 451, 491, 499, 539, 547, 584, 591, 592, 593, 594, 597, 607, 620, 643, 700, 708, 718, 721, 732, 733, 741, 757, 786, 787, 789, 790, 842, 846, 847, 848, 856, 859, 870, 919, 921, 953, 968, 992, 993, 996, 1000, 1004, 1006, 1007, 1014, 1020, 1028, 1035, 1038, 1040, 1043, 1044, 1046, 1047, 1052], "count_nonzero": [46, 49, 365], "count_onli": [847, 848], "counter": [57, 134, 278, 410, 679, 680, 681, 1048], "counterpart": [993, 1001, 1019], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [317, 327, 499, 1001], "counts_": 1047, "countvector": [2, 54, 334, 354, 373, 383, 411, 415, 418, 466, 491, 539, 585, 592, 593, 594, 1035, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "coupl": [54, 85, 86, 88, 234, 372, 373, 407, 408, 410, 419, 592, 913, 993, 1019], "cournapeau": [0, 400, 1035, 1038], "cours": [47, 48, 191, 285, 365, 378, 380, 409, 415, 418, 419, 994, 999, 1000, 1028], "coursecentr": [410, 444], "courtesi": 378, "couvreur": [1044, 1045], "cov": [70, 113, 116, 136, 261, 378, 392, 396, 403, 413, 423, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 522, 535, 537, 544, 551], "cov_": [50, 113], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1051, "cov_test": 50, "cov_train": 50, "cov_typ": [258, 493], "covar": [256, 257, 262], "covari": [2, 48, 51, 65, 69, 110, 115, 127, 130, 148, 150, 170, 177, 179, 216, 240, 255, 257, 259, 260, 261, 262, 278, 302, 327, 387, 392, 401, 410, 413, 415, 420, 423, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 507, 518, 522, 530, 535, 537, 544, 551, 552, 553, 566, 613, 614, 616, 625, 626, 634, 647, 648, 653, 657, 659, 685, 686, 689, 692, 696, 800, 801, 803, 822, 1003, 1010, 1014, 1025, 1026, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1042, 1044], "covariance_": [51, 70, 111, 113, 471, 472, 473, 474, 475, 476, 477, 478, 552, 553, 998, 1042], "covariance_correct": [471, 476], "covariance_eigh": [328, 544, 1053], "covariance_estim": [69, 552, 998, 1047], "covariance_prior": [262, 800], "covariance_prior_": 800, "covariance_reweight": [471, 476], "covariance_typ": [79, 257, 258, 260, 261, 262, 800, 801, 1051], "covariances_": [256, 257, 258, 261, 262, 800, 801, 1042], "cover": [0, 85, 191, 213, 231, 361, 370, 373, 378, 391, 638, 723, 797, 1004, 1005, 1022], "coverag": [2, 50, 52, 146, 149, 213, 231, 304, 373, 381, 406, 501, 630, 723], "coverage_error": [2, 1004, 1039, 1049], "coverage_fract": 146, "coverages_land": 50, "covertyp": [2, 371, 493, 1030], "covtyp": 191, "cow": 1036, "cowlei": 1045, "cowton": 1049, "cox": [311, 315, 883, 895, 1014, 1043, 1051], "cpo": [168, 375], "cppflag": 376, "cpu": [0, 94, 272, 291, 325, 365, 366, 384, 386, 392, 396, 406, 418, 499, 566, 635, 650, 654, 656, 658, 661, 662, 664, 666, 668, 669, 671, 679, 682, 803, 817, 828, 829, 830, 851, 859, 900, 1004, 1040, 1049, 1050, 1052, 1053], "cpu_count": [77, 140, 291], "cpuexecutionprovid": 404, "cpython": [378, 379, 384, 1050], "craeton": 1053, "craft": 381, "craig": [1016, 1038, 1043], "crall": [1042, 1048], "crammer": [669, 670, 738, 1000, 1004, 1019], "crammer06a": [669, 670], "crammer_sing": [907, 1005, 1019, 1035], "cranenburgh": 1039, "crash": [51, 378, 404, 470, 897, 898, 905, 1014, 1039, 1043, 1051, 1052], "crawl": [524, 943], "craze": 1042, "crc": 1000, "creat": [2, 43, 44, 47, 50, 58, 59, 63, 64, 66, 68, 70, 72, 74, 76, 78, 79, 80, 82, 85, 91, 93, 95, 103, 104, 111, 116, 122, 125, 126, 136, 139, 142, 143, 144, 146, 150, 153, 167, 170, 172, 175, 176, 177, 179, 182, 185, 187, 193, 195, 197, 199, 209, 214, 215, 225, 226, 235, 245, 247, 250, 251, 253, 261, 265, 266, 267, 269, 271, 281, 285, 299, 301, 302, 313, 315, 316, 320, 323, 324, 335, 337, 338, 342, 343, 346, 348, 349, 350, 354, 356, 358, 359, 361, 366, 373, 374, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 391, 392, 396, 397, 404, 408, 410, 411, 414, 416, 417, 418, 420, 440, 453, 455, 467, 468, 502, 518, 519, 520, 521, 549, 556, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 591, 592, 594, 600, 631, 633, 634, 635, 636, 700, 701, 703, 704, 705, 785, 792, 803, 805, 809, 813, 817, 821, 825, 826, 828, 829, 837, 868, 880, 909, 912, 915, 916, 917, 918, 922, 931, 954, 955, 962, 976, 988, 994, 1000, 1003, 1004, 1005, 1007, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1024, 1028, 1032, 1035, 1036, 1038, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "create_ax": 311, "create_species_bunch": 50, "createindex": 291, "creation": [380, 514, 515, 516, 518, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 659, 847, 848, 1028, 1042, 1043, 1044, 1048], "creativ": 372, "creator": [168, 372, 375], "cred_int_df": 271, "cred_interv": 271, "credibl": 271, "credit": [373, 386, 417, 1000, 1028], "credit_amount": 265, "credit_card": 265, "credit_gain": 265, "credit_gain_scor": 265, "credit_histori": 265, "creighton": 325, "crispinlogan": [1047, 1050, 1051, 1053], "cristian": 645, "cristina": 1047, "criteria": [90, 140, 183, 192, 202, 221, 261, 271, 386, 410, 419, 443, 468, 484, 485, 486, 504, 560, 561, 562, 563, 567, 568, 649, 655, 659, 661, 662, 674, 695, 868, 887, 907, 908, 915, 916, 917, 918, 994, 1003, 1008, 1018, 1025, 1038, 1043, 1046], "criterion": [64, 109, 110, 189, 200, 221, 261, 283, 321, 380, 387, 392, 410, 415, 443, 447, 451, 454, 461, 464, 535, 540, 542, 549, 556, 557, 560, 561, 562, 563, 567, 568, 569, 609, 630, 647, 648, 651, 659, 669, 670, 671, 672, 674, 675, 677, 679, 680, 681, 683, 694, 698, 713, 801, 904, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1000, 1003, 1004, 1012, 1017, 1020, 1026, 1030, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "criterion_": [200, 202, 659], "critic": [372, 378, 391, 417, 695, 1001, 1004, 1012, 1019, 1028, 1046], "crockett": 1050, "crombach": 1037, "crop": [386, 1050], "cross": [2, 9, 29, 52, 53, 64, 70, 87, 90, 91, 103, 104, 106, 107, 109, 113, 116, 127, 140, 142, 143, 145, 146, 149, 158, 162, 165, 166, 168, 186, 187, 192, 198, 199, 200, 201, 207, 213, 215, 221, 231, 248, 253, 258, 259, 261, 263, 268, 271, 272, 273, 275, 277, 278, 279, 280, 283, 285, 286, 288, 295, 309, 310, 312, 317, 320, 322, 327, 333, 341, 348, 373, 378, 380, 387, 390, 391, 392, 404, 405, 408, 411, 412, 415, 417, 418, 419, 420, 439, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 496, 504, 505, 507, 518, 544, 570, 571, 578, 596, 597, 600, 605, 609, 612, 645, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 677, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 704, 705, 709, 716, 731, 744, 788, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 867, 868, 872, 887, 888, 905, 907, 909, 912, 924, 958, 1003, 1004, 1007, 1008, 1012, 1014, 1019, 1020, 1024, 1025, 1026, 1028, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "cross_decomposit": [2, 114, 115, 116, 183, 248, 484, 485, 486, 487, 1005, 1025, 1039, 1040, 1042, 1043, 1044], "cross_val": 1035, "cross_val_predict": [2, 154, 267, 320, 401, 408, 414, 417, 439, 570, 571, 829, 830, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1052], "cross_val_scor": [2, 52, 127, 181, 182, 183, 263, 267, 276, 286, 326, 344, 361, 378, 380, 390, 401, 414, 417, 474, 523, 578, 706, 745, 803, 828, 830, 915, 916, 993, 1004, 1025, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1047, 1048, 1051, 1052], "cross_valid": [2, 43, 52, 143, 149, 154, 186, 215, 247, 267, 274, 285, 288, 317, 327, 378, 391, 401, 578, 828, 829, 1004, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052], "crossentropi": 564, "crossvalid": [271, 286], "crowd": [386, 393, 1001, 1024], "crucial": [51, 149, 185, 217, 266, 365, 377, 378, 392, 393, 410, 420, 1019], "crude": 1046, "crunch": 384, "cruz": 178, "crypt": [57, 373], "cryptograph": 387, "cs_": 662, "cs_note": 419, "cs_point": 142, "csail": [410, 669, 670, 679, 844], "csc": [2, 365, 390, 392, 418, 530, 554, 556, 557, 673, 695, 874, 876, 882, 887, 890, 892, 898, 929, 933, 934, 966, 978, 979, 981, 982, 983, 984, 1007, 1014, 1043, 1044, 1046, 1049], "csc_matrix": [454, 560, 561, 566, 567, 568, 569, 884, 915, 916, 917, 918, 994, 1014, 1020, 1040], "csco": 51, "csgraph": [392, 1048], "csie": [191, 372, 489, 511, 512, 661], "csizsek": 1042, "csr": [2, 55, 328, 354, 365, 372, 373, 387, 390, 392, 418, 421, 445, 448, 449, 451, 452, 461, 500, 511, 526, 530, 556, 557, 560, 561, 567, 568, 569, 593, 633, 661, 695, 717, 771, 795, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 862, 870, 874, 876, 878, 879, 880, 882, 885, 886, 887, 890, 891, 892, 894, 897, 900, 915, 916, 917, 918, 929, 933, 934, 958, 966, 978, 979, 980, 981, 982, 983, 984, 985, 986, 1007, 1014, 1018, 1035, 1036, 1041, 1043, 1044, 1050, 1051, 1052], "csr_arrai": 985, "csr_matrix": [291, 321, 442, 446, 454, 499, 537, 547, 560, 561, 562, 563, 566, 567, 568, 569, 591, 596, 597, 717, 833, 862, 880, 882, 909, 910, 912, 913, 915, 916, 917, 918, 952, 958, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 1005, 1014, 1018, 1019, 1020, 1050], "css": 1047, "cst": 998, "cstride": 187, "csv": [51, 372, 375, 383, 1043, 1048], "csytraci": 1038, "ct": [53, 178, 254, 411, 466, 468, 469], "ctc": 178, "cttt": 178, "cube": [422, 536], "cubic": [111, 420], "cuda": [390, 406], "cue": 1003, "culprit": 390, "cultiv": 375, "cultur": 373, "cum_claim": [213, 231], "cum_exposur": 213, "cumsum": [145, 213, 231, 1042], "cumtim": 384, "cumul": [2, 145, 213, 231, 410, 729, 738, 759, 884, 896, 1014, 1018, 1042, 1044, 1045], "cumulated_claim": 213, "cumulated_claim_amount": 231, "cumulated_exposur": 213, "cumulated_sampl": 231, "cunha": [1036, 1037], "cup": [373, 1004], "cupi": [325, 328, 390, 406, 1052, 1053], "cupy_to_ndarrai": 406, "curat": [378, 381, 382], "cure": 1000, "curic": [1043, 1044], "current": [0, 2, 7, 47, 80, 134, 175, 186, 231, 311, 320, 366, 367, 373, 376, 378, 379, 383, 387, 390, 392, 393, 406, 407, 410, 414, 417, 418, 419, 420, 442, 448, 452, 470, 471, 472, 473, 474, 475, 476, 477, 478, 535, 538, 544, 556, 557, 560, 561, 562, 563, 565, 567, 568, 569, 579, 594, 596, 613, 620, 629, 630, 649, 670, 674, 678, 679, 680, 681, 791, 800, 801, 852, 856, 864, 865, 883, 895, 905, 915, 916, 917, 918, 921, 923, 924, 925, 970, 978, 993, 998, 1000, 1004, 1007, 1008, 1014, 1024, 1027, 1043, 1047, 1049, 1050, 1051], "current_count": 76, "current_month": 175, "current_sklearn_vers": 579, "current_sz_mb": 47, "currentcontrolset": 396, "currentmodul": 378, "curs": [352, 353, 410, 416, 1006, 1007], "cursor": [140, 272], "curv": [2, 29, 47, 50, 60, 61, 63, 72, 107, 109, 137, 139, 140, 145, 183, 192, 193, 203, 213, 231, 233, 235, 238, 239, 241, 243, 250, 251, 255, 256, 257, 258, 260, 261, 263, 265, 271, 281, 284, 307, 312, 320, 328, 345, 358, 385, 405, 409, 414, 416, 439, 440, 441, 505, 513, 518, 524, 528, 567, 635, 648, 661, 701, 703, 705, 709, 710, 711, 712, 730, 732, 744, 785, 787, 790, 791, 792, 800, 801, 809, 820, 826, 831, 833, 834, 845, 868, 887, 907, 912, 1000, 1001, 1003, 1004, 1010, 1020, 1025, 1026, 1028, 1030, 1032, 1037, 1038, 1041, 1045, 1047, 1048, 1049, 1050, 1051], "curvatur": 306, "cusick": 1045, "custom": [2, 15, 30, 41, 131, 165, 167, 183, 197, 251, 263, 265, 270, 272, 275, 278, 279, 283, 293, 298, 302, 320, 336, 338, 339, 341, 342, 344, 352, 354, 370, 373, 376, 380, 385, 386, 387, 390, 391, 392, 401, 404, 410, 411, 414, 420, 470, 491, 496, 497, 505, 507, 541, 543, 550, 552, 560, 561, 567, 568, 574, 576, 605, 633, 634, 693, 702, 716, 781, 803, 833, 871, 905, 912, 987, 998, 1004, 1007, 1023, 1024, 1025, 1028, 1030, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "custom_combin": 880, "custom_cv": 414, "custom_cv_2fold": 414, "custom_fnames_enc": 880, "custom_nam": 352, "custom_scor": 328, "custom_scorer_modul": 1004, "custom_scoring_funct": 1004, "customestim": 132, "customkernel": 621, "customvector": 418, "cut": [57, 78, 80, 98, 99, 167, 168, 183, 235, 263, 274, 288, 328, 333, 382, 390, 407, 409, 410, 448, 454, 455, 464, 499, 591, 594, 661, 694, 698, 819, 825, 830, 868, 887, 1014, 1025], "cut_dist": [88, 448], "cutler": [915, 916], "cutoff": [193, 957, 1014, 1044], "cutoffs_x0": 311, "cutoffs_x1": 311, "cv": [2, 43, 51, 52, 61, 62, 63, 64, 87, 103, 104, 105, 106, 109, 127, 140, 143, 145, 149, 159, 167, 181, 182, 186, 202, 212, 215, 247, 265, 267, 269, 270, 271, 272, 273, 274, 276, 277, 281, 285, 286, 288, 317, 325, 327, 328, 341, 348, 391, 392, 401, 408, 409, 414, 417, 419, 439, 474, 570, 571, 597, 605, 650, 654, 656, 658, 662, 664, 666, 668, 676, 678, 803, 805, 806, 807, 808, 809, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 888, 915, 916, 993, 996, 999, 1000, 1004, 1014, 1024, 1037, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053], "cv_alpha": [654, 658], "cv_alphas_": [202, 654, 658, 1047], "cv_best_it": 145, "cv_clf": 145, "cv_color": 145, "cv_estim": 145, "cv_estimators_tut": 159, "cv_line": 145, "cv_mape_scor": 52, "cv_model": 186, "cv_result": [43, 52, 103, 140, 149, 167, 269, 270, 272, 274, 401, 817, 830, 1004], "cv_results_": [103, 104, 105, 113, 140, 159, 167, 261, 265, 269, 270, 271, 272, 275, 279, 282, 283, 293, 341, 474, 597, 676, 678, 803, 806, 807, 817, 825, 1041, 1045, 1047, 1048, 1053], "cv_results_ecoc": 288, "cv_results_lr": 215, "cv_results_ovo": 288, "cv_results_ovr": 288, "cv_results_qr": 215, "cv_results_tre": 288, "cv_results_tuned_model": 285, "cv_results_vanilla_model": 285, "cv_score": [145, 285], "cv_test_scor": 831, "cv_train_scor": 831, "cv_valu": 1043, "cv_values_": [676, 678, 1053], "cvc": 51, "cve": 1048, "cvx": 51, "cwitt": 1043, "cxx": 376, "cxxflag": 376, "cyan": [109, 137, 186, 302], "cybernet": 772, "cycl": [0, 16, 43, 77, 79, 83, 95, 120, 201, 257, 262, 278, 280, 323, 324, 378, 382, 401, 415, 582, 583, 630, 806, 807, 929, 993, 994, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "cycler": 73, "cyclic": [43, 649, 650, 655, 656, 663, 664, 665, 666, 1047], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 304], "cynthias13w": 1052, "cyt": 288, "cython": [41, 324, 365, 366, 376, 378, 381, 387, 390, 396, 403, 406, 410, 417, 511, 1014, 1015, 1018, 1019, 1023, 1024, 1035, 1038, 1039, 1041, 1047, 1050, 1051, 1052, 1053], "cython3": 376, "cythonx": 379, "c\u00e8sar": 1004, "d": [0, 2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 67, 68, 72, 73, 77, 82, 83, 93, 94, 96, 102, 103, 113, 118, 120, 123, 127, 129, 170, 178, 186, 213, 221, 229, 231, 238, 243, 244, 245, 246, 259, 270, 271, 279, 285, 290, 297, 298, 304, 308, 330, 331, 334, 341, 345, 346, 354, 372, 373, 375, 378, 380, 384, 390, 408, 410, 412, 413, 415, 417, 418, 420, 421, 446, 448, 449, 454, 462, 465, 490, 496, 506, 529, 537, 539, 560, 561, 568, 569, 584, 585, 593, 617, 618, 622, 625, 626, 631, 647, 648, 651, 672, 673, 674, 683, 691, 692, 695, 696, 700, 702, 708, 711, 724, 725, 726, 727, 729, 759, 767, 781, 784, 791, 815, 842, 844, 846, 847, 848, 863, 874, 878, 880, 881, 883, 895, 900, 917, 918, 922, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1012, 1014, 1016, 1019, 1020, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 417, "d2": [725, 726, 1004], "d2_absolute_error_scor": [2, 726, 1004, 1049], "d2_log_loss_scor": [2, 1004, 1053], "d2_pinball_scor": [2, 1004, 1049], "d2_pinball_score_08": 1004, "d2_tweedie_scor": [2, 406, 1004, 1048], "d2_tweedie_score_15": 1004, "d55e00": 256, "d81b60": 315, "d83": 375, "d_": [111, 410, 415, 651, 672, 683, 781, 1001, 1006], "d_c": 410, "d_chunk": 784, "d_fit": 691, "d_fix": 129, "d_m": 410, "d_multi": 129, "da": [373, 1050, 1051, 1053], "dae": 1000, "dagm": 996, "dagstuhl": 1004, "dai": [0, 43, 51, 52, 149, 175, 187, 214, 375, 378, 886, 1028, 1041, 1042, 1049, 1050], "daiki": 1039, "daili": [51, 149, 1028], "dakota": 1045, "dale": 1048, "dalla": 1043, "dalmia": [1041, 1042, 1043], "damag": 418, "damicelli": 1050, "damink": 1052, "daml": [410, 454, 464], "damp": [79, 410, 442, 456], "dan": [55, 1035, 1039, 1040, 1041, 1043, 1044], "danfrankj": 1039, "dang": [682, 1000, 1053], "danger": [214, 414], "dangi": 1052, "dangl": 55, "dangonite57": [1050, 1051], "daniel": [325, 365, 888, 1014, 1028, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1052], "daniela": [1049, 1050], "danielgaerb": 1050, "danielsen": 1042, "danielweitzenfeld": 1038, "daniil": 1042, "danil": 1043, "dani\u00ebl": 1046, "danna": 1045, "danni": [1038, 1039, 1040], "dantzig": 348, "danylo": 1044, "dao": 1043, "daphn": 1046, "dare": 1045, "darioka": [1047, 1049, 1050], "dariu": [1042, 1043], "dark": [137, 186, 341, 373, 1052], "dark2": [62, 64, 234], "darkblu": 302, "darkorang": [110, 124, 128, 129, 214, 224, 236, 257, 258, 259, 262, 278, 280, 296, 302, 303, 332, 358], "darkorchid": 223, "darkr": [227, 297, 340], "darpa": 373, "darren": [1049, 1050], "darshan": 1047, "dart": 1023, "dartmouth": 0, "dasarathi": 375, "dasgupta": [418, 448, 901, 1016], "dash": [69, 111, 134, 145, 156, 170, 173, 175, 186, 205, 208, 214, 215, 222, 225, 226, 250, 265, 271, 281, 343, 1018], "dashdot": [145, 170, 173, 250], "dask": [1024, 1043], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 89, 92, 93, 94, 95, 98, 101, 103, 104, 106, 110, 112, 118, 120, 123, 124, 126, 128, 130, 132, 134, 137, 139, 140, 142, 143, 145, 146, 151, 152, 153, 155, 157, 159, 161, 165, 169, 170, 171, 172, 174, 175, 177, 179, 181, 183, 186, 187, 192, 193, 196, 197, 198, 201, 202, 203, 208, 209, 211, 212, 213, 214, 215, 216, 219, 221, 222, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 240, 243, 244, 245, 247, 249, 250, 251, 254, 256, 257, 258, 259, 260, 262, 264, 265, 269, 271, 273, 274, 275, 276, 279, 285, 286, 288, 290, 291, 295, 297, 299, 300, 301, 302, 304, 307, 308, 310, 312, 313, 314, 318, 320, 322, 324, 325, 326, 328, 331, 332, 334, 335, 337, 338, 340, 345, 346, 352, 357, 358, 359, 360, 364, 366, 370, 371, 372, 373, 374, 375, 378, 380, 381, 384, 385, 386, 387, 391, 396, 398, 401, 404, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 428, 429, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 516, 517, 518, 523, 524, 525, 526, 527, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 620, 621, 625, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 711, 713, 714, 716, 720, 721, 723, 728, 730, 731, 732, 733, 734, 737, 739, 740, 741, 743, 744, 757, 758, 760, 764, 766, 767, 772, 781, 786, 787, 788, 790, 791, 792, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 924, 926, 927, 928, 929, 931, 932, 933, 934, 937, 938, 939, 948, 950, 951, 966, 969, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "data1010": 1040, "data_filenam": [504, 508], "data_hom": [488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 1042, 1051], "data_home_path": 502, "data_id": [44, 143, 175, 186, 213, 231, 241, 265, 285, 288, 317, 372, 499], "data_ind": 53, "data_max": 1040, "data_max_": [877, 1040], "data_min": 1040, "data_min_": [877, 1040], "data_modul": 126, "data_nam": 396, "data_path": 47, "data_rang": 1040, "data_range_": [877, 1040], "data_sampl": 54, "data_set": 307, "data_size_mb": 354, "data_stream": 47, "data_test": [245, 265, 272, 352, 512], "data_test_size_mb": 352, "data_train": [245, 265, 272, 352, 512], "data_train_size_mb": 352, "data_transform": 642, "data_transpos": [1049, 1051], "data_unravel_indic": 53, "data_vers": 396, "databas": [47, 168, 316, 365, 367, 373, 375, 410, 415, 417, 418, 421, 444, 446, 513, 558, 559, 900, 1016], "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 43, 52, 62, 102, 103, 104, 134, 140, 143, 146, 151, 167, 175, 181, 185, 186, 187, 188, 193, 198, 202, 217, 221, 231, 251, 254, 261, 265, 269, 271, 272, 274, 282, 283, 285, 288, 316, 317, 318, 323, 324, 325, 348, 352, 353, 372, 373, 378, 380, 383, 392, 411, 417, 434, 444, 445, 447, 449, 451, 466, 468, 469, 470, 484, 485, 486, 487, 491, 492, 493, 495, 499, 503, 504, 505, 507, 508, 513, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 564, 565, 569, 570, 571, 572, 573, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 691, 692, 695, 803, 806, 807, 817, 833, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 929, 958, 974, 977, 992, 993, 994, 1024, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "datalim": 258, "datapoint": [43, 77, 85, 89, 174, 177, 197, 245, 246, 250, 266, 271, 290, 420, 448, 505, 560, 561, 562, 563, 567, 568, 569, 614, 915, 916, 917, 918, 997], "dataset": [2, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 100, 103, 104, 105, 106, 107, 111, 112, 113, 116, 119, 122, 123, 124, 125, 127, 129, 130, 133, 135, 136, 137, 138, 139, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 165, 166, 167, 168, 169, 171, 173, 178, 181, 182, 188, 189, 191, 192, 195, 197, 199, 200, 201, 203, 204, 205, 206, 209, 210, 211, 212, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 235, 237, 238, 239, 241, 244, 246, 248, 249, 253, 254, 256, 258, 259, 260, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 291, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 339, 341, 342, 343, 344, 346, 348, 349, 350, 353, 354, 355, 356, 358, 359, 360, 361, 366, 367, 381, 382, 384, 391, 392, 395, 396, 404, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 425, 430, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 471, 472, 475, 476, 477, 478, 480, 483, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 549, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 586, 587, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 631, 634, 635, 636, 637, 638, 641, 642, 643, 646, 648, 649, 650, 652, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 711, 713, 714, 732, 758, 760, 790, 791, 795, 796, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 863, 864, 865, 867, 868, 871, 872, 880, 881, 885, 887, 889, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 933, 934, 938, 939, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "dataset_44063": 52, "dataset_nam": [250, 291], "datasets_0004_44063": 52, "datasets_nam": 250, "datastructur": [406, 1043, 1047], "datastuctur": 1052, "datatyp": [390, 466, 468, 1042, 1045], "date": [43, 102, 149, 168, 175, 187, 373, 375, 378, 382, 393, 411, 1024], "dateco2datef641958": 175, "daten": [452, 1043, 1044], "datenbergwerk": 1045, "datetim": [43, 55, 175, 187], "dauphin": 1037, "dave": [1035, 1042, 1043, 1049, 1051], "davi": [2, 476, 728, 1004, 1039], "david": [0, 112, 373, 400, 410, 417, 420, 464, 535, 539, 570, 571, 625, 626, 631, 728, 800, 904, 994, 1000, 1008, 1017, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "davidblnc": [1050, 1051], "davidleon123": 1053, "davies_bouldin_scor": [2, 410, 1043], "davis2006": 1004, "daw": [0, 400, 1035, 1036, 1037, 1038, 1039], "dawson": [1039, 1053], "dayn": [1050, 1051], "db": [82, 88, 410], "dbauer9": 1046, "dberenbaum": 1051, "dbg": 384, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [2, 71, 72, 73, 79, 88, 93, 96, 98, 183, 326, 332, 390, 392, 448, 452, 454, 457, 515, 707, 708, 720, 740, 796, 798, 859, 887, 1007, 1025, 1029, 1030, 1035, 1037, 1039, 1040, 1042, 1043, 1044, 1051, 1052], "dbscan_clust": 448, "dcc": 373, "dcg": [729, 759, 1004, 1042], "dcg_score": [2, 759, 1004, 1042, 1045], "dd": [50, 51, 152, 304, 501], "ddof": [271, 887, 898], "de": [51, 154, 317, 375, 638, 691, 767, 1000, 1001, 1024, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "dea": [1049, 1050, 1051], "deactiv": [252, 372, 379, 384, 396, 411, 806, 807, 1049], "dead": 1053, "deadlock": 393, "deal": [62, 90, 103, 149, 181, 186, 198, 237, 285, 288, 345, 354, 378, 383, 411, 418, 419, 420, 476, 499, 706, 711, 766, 790, 873, 951, 1000, 1028, 1038, 1050, 1051], "dealloc": 1052, "dean": [154, 1043, 1049, 1051, 1053], "death": 373, "debian": [0, 365, 376, 384], "debias": 129, "deborah": [1041, 1042, 1052], "debug": [2, 361, 366, 379, 381, 384, 392, 395, 630, 906, 1043, 1047], "debugg": [381, 386], "dec": [214, 288, 680, 886, 911, 1019], "decad": [186, 1024], "decai": [175, 547, 864, 865, 951, 1004, 1018, 1039], "decal": 1047, "decemb": [112, 149, 175, 373, 667, 688, 689, 1035, 1043, 1045, 1047, 1048, 1050], "decent": [240, 270, 373, 1006], "deci": 280, "decid": [43, 50, 90, 93, 103, 144, 149, 262, 268, 271, 278, 373, 378, 393, 404, 409, 418, 420, 452, 459, 562, 563, 614, 638, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 674, 684, 687, 800, 849, 850, 851, 853, 855, 857, 858, 859, 870, 1003, 1010, 1028, 1048, 1051], "decil": [635, 1046], "deciles_hlines_": 635, "deciles_vlines_": 635, "decim": [62, 176, 473, 474, 920, 1042, 1043], "decis": [0, 2, 40, 43, 62, 64, 67, 70, 76, 89, 91, 93, 124, 126, 133, 136, 137, 138, 139, 144, 152, 153, 154, 156, 157, 161, 167, 168, 172, 174, 186, 196, 197, 205, 222, 223, 226, 240, 241, 243, 248, 251, 263, 274, 275, 277, 278, 288, 299, 302, 306, 311, 312, 313, 316, 329, 333, 334, 337, 338, 339, 340, 341, 342, 343, 349, 350, 352, 365, 374, 375, 378, 392, 404, 405, 408, 410, 417, 439, 471, 499, 503, 507, 522, 539, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 596, 597, 634, 635, 636, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 701, 703, 705, 706, 710, 721, 723, 729, 730, 738, 742, 743, 745, 759, 785, 787, 790, 791, 792, 797, 802, 803, 806, 807, 817, 819, 825, 830, 833, 835, 836, 838, 849, 868, 887, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 998, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1017, 1018, 1019, 1023, 1024, 1025, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "decision_funct": [48, 50, 62, 64, 89, 136, 150, 161, 225, 226, 227, 241, 250, 265, 278, 285, 297, 298, 306, 313, 327, 339, 340, 341, 345, 346, 350, 380, 392, 408, 409, 417, 439, 471, 552, 553, 556, 558, 562, 564, 566, 570, 596, 597, 634, 635, 636, 661, 662, 669, 671, 677, 678, 679, 680, 701, 703, 705, 710, 723, 729, 730, 738, 742, 743, 745, 759, 785, 791, 792, 797, 802, 803, 806, 807, 817, 825, 828, 835, 836, 837, 838, 853, 867, 874, 904, 907, 909, 911, 912, 926, 1000, 1004, 1010, 1011, 1018, 1019, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1052], "decision_function_shap": [320, 349, 909, 912, 1019, 1040, 1041, 1044, 1045], "decision_path": [360, 560, 561, 567, 568, 569, 915, 916, 917, 918, 1041, 1046], "decision_threshold": [265, 285], "decision_tre": [919, 920, 921, 1020], "decision_tree_learn": [915, 916, 1020], "decisionboundarydisplai": [2, 48, 66, 67, 70, 89, 136, 150, 155, 197, 205, 222, 227, 274, 294, 299, 302, 316, 337, 338, 339, 340, 342, 343, 345, 357, 1049, 1050, 1052, 1053], "decisiontre": [142, 556, 1040], "decisiontreeclassifi": [2, 67, 134, 136, 142, 155, 275, 288, 326, 356, 357, 360, 392, 409, 417, 556, 558, 560, 562, 564, 567, 634, 714, 809, 831, 916, 917, 919, 920, 921, 994, 1005, 1020, 1036, 1037, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "decisiontreeclassifierifitteddecisiontreeclassifi": 360, "decisiontreeregressor": [2, 135, 137, 251, 312, 320, 326, 358, 359, 383, 557, 559, 561, 562, 563, 565, 568, 635, 636, 915, 918, 920, 946, 994, 1005, 1020, 1036, 1037, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "decisiontreeregressorifitteddecisiontreeregressor": 322, "declan": 1047, "declar": [89, 234, 247, 361, 378, 379, 384, 392, 445, 448, 449, 461, 473, 474, 480, 693, 697, 1042, 1046], "decod": [47, 304, 373, 392, 506, 572, 591, 592, 594, 1035, 1036], "decode_error": [47, 418, 506, 591, 592, 594, 1037], "decompos": [11, 120, 124, 137, 313, 537, 541, 712, 828, 951, 999, 1000, 1004, 1021, 1029, 1030], "decomposit": [2, 9, 44, 45, 54, 55, 83, 91, 102, 104, 105, 106, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 152, 191, 233, 234, 236, 244, 245, 248, 249, 252, 270, 295, 300, 316, 324, 327, 328, 353, 367, 371, 384, 387, 392, 406, 407, 408, 411, 417, 422, 451, 453, 454, 455, 464, 484, 485, 486, 498, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 559, 614, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 675, 676, 677, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 800, 801, 856, 863, 866, 869, 885, 916, 950, 951, 1000, 1001, 1004, 1021, 1023, 1025, 1026, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "decompress": [404, 1035], "decor": [2, 187, 320, 378, 379, 380, 387, 809, 826, 941, 945, 946, 964, 970, 1045, 1048, 1051, 1053], "decoupl": [417, 1006], "decreas": [63, 74, 80, 88, 91, 99, 107, 149, 151, 167, 168, 178, 186, 187, 189, 221, 243, 244, 273, 278, 306, 313, 316, 320, 356, 365, 367, 378, 408, 410, 417, 443, 447, 465, 524, 537, 538, 544, 560, 561, 562, 563, 564, 565, 567, 568, 569, 605, 638, 639, 640, 679, 680, 681, 709, 715, 730, 785, 792, 864, 865, 915, 916, 917, 918, 993, 995, 996, 1000, 1001, 1004, 1007, 1008, 1011, 1012, 1018, 1019, 1028, 1037, 1042, 1045, 1048], "dede00": [79, 95, 96], "dedic": [43, 269, 350, 376, 382, 384, 390, 393, 406, 410, 587, 675, 677, 690, 993, 1000, 1023, 1043, 1052], "deduc": 46, "deduct": 1008, "dedupl": 1039, "deeksha": 1047, "deem": [279, 280, 537, 1012, 1048], "deep": [213, 380, 392, 404, 417, 424, 435, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 772, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1008, 1009, 1023, 1024, 1028, 1040, 1046, 1047, 1049], "deepcopi": 380, "deeper": [352, 1020], "deepest": [564, 565, 1046], "deeplook": 1045, "deeppink": 280, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 85, 88, 89, 91, 94, 102, 107, 118, 120, 122, 123, 127, 129, 132, 134, 137, 139, 143, 145, 146, 149, 154, 173, 176, 178, 179, 182, 189, 194, 200, 202, 205, 210, 213, 214, 221, 222, 223, 231, 233, 234, 247, 248, 250, 256, 257, 258, 259, 261, 262, 265, 266, 269, 270, 271, 272, 274, 279, 282, 286, 291, 296, 298, 301, 304, 307, 309, 311, 313, 316, 317, 320, 328, 334, 337, 341, 345, 350, 352, 353, 354, 365, 373, 378, 380, 384, 385, 390, 411, 414, 418, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 511, 512, 536, 600, 604, 613, 614, 621, 784, 880, 941, 946, 964, 1004, 1011, 1019], "default": [2, 43, 52, 54, 62, 66, 77, 80, 88, 92, 120, 126, 140, 164, 170, 181, 187, 193, 194, 202, 213, 214, 231, 242, 244, 250, 252, 254, 259, 265, 266, 274, 280, 285, 290, 291, 311, 315, 318, 320, 321, 325, 327, 328, 345, 348, 349, 352, 353, 354, 356, 360, 361, 365, 366, 372, 373, 376, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 396, 401, 404, 408, 409, 410, 411, 414, 415, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 737, 738, 739, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 937, 939, 940, 941, 943, 945, 946, 950, 951, 952, 953, 954, 955, 956, 957, 966, 968, 969, 972, 973, 974, 976, 977, 978, 984, 987, 989, 990, 992, 993, 994, 996, 998, 1000, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "default_bas": [79, 95], "default_rng": 274, "default_scor": 383, "default_tag": 2, "default_target_attribut": 372, "default_tim": [228, 259], "defaultdict": [49, 52, 62, 189, 274, 353, 354], "defazio": [661, 1000], "defens": 288, "defer": 378, "deffici": 1053, "defici": [553, 1001, 1018], "defin": [8, 27, 46, 51, 64, 70, 86, 88, 90, 99, 102, 103, 105, 116, 120, 125, 132, 134, 135, 154, 168, 170, 177, 178, 179, 187, 188, 189, 193, 214, 221, 230, 231, 240, 244, 247, 251, 253, 256, 261, 265, 271, 272, 274, 278, 280, 281, 282, 283, 285, 288, 291, 309, 311, 321, 327, 328, 341, 345, 348, 352, 353, 365, 374, 377, 378, 379, 380, 384, 385, 387, 390, 391, 392, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 425, 426, 427, 429, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 461, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 491, 522, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 625, 626, 630, 631, 632, 633, 635, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 699, 700, 702, 711, 713, 714, 719, 724, 725, 726, 727, 728, 731, 734, 741, 744, 748, 749, 751, 753, 754, 756, 757, 760, 763, 769, 784, 788, 793, 794, 795, 796, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 937, 939, 943, 949, 961, 963, 987, 993, 994, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1024, 1030, 1032, 1037, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "definit": [2, 91, 112, 200, 213, 278, 291, 353, 378, 379, 380, 392, 395, 410, 412, 413, 415, 530, 532, 538, 614, 631, 695, 711, 721, 731, 749, 761, 800, 801, 993, 996, 998, 1000, 1002, 1004, 1007, 1018, 1022, 1030, 1039, 1043, 1050], "definitelyuncertain": 1041, "deflat": [186, 413, 422, 536], "defoi": 1048, "deform": [150, 261, 350], "degener": [118, 257, 422, 442, 456, 536, 723, 1000, 1004, 1044, 1048, 1049], "degrad": [149, 187, 240, 311, 348, 353, 416, 781, 1012], "degre": [43, 70, 122, 136, 175, 181, 185, 186, 187, 191, 193, 198, 200, 202, 214, 217, 246, 252, 256, 257, 258, 261, 262, 271, 286, 309, 322, 323, 338, 345, 347, 415, 419, 448, 454, 501, 538, 544, 642, 643, 646, 659, 778, 800, 803, 853, 882, 886, 909, 910, 911, 912, 913, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1014, 1017, 1019, 1038, 1044, 1048, 1049, 1052], "degrees_of_freedom_": 800, "degrees_of_freedom_prior": 800, "degrees_of_freedom_prior_": 800, "dei": 1047, "deil": [1036, 1046, 1047], "dein": 418, "dekel": [669, 670, 1000], "del": [55, 384, 1047, 1048], "delai": [2, 378, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 803, 817, 828, 829, 1049, 1050, 1053], "delalleau": 1017, "delanou": 1046, "delattr": 1047, "delayed_funct": 969, "delbert": [73, 442, 456], "deleg": [89, 384, 434, 435, 920, 992, 1039, 1041, 1047], "delet": [2, 104, 331, 333, 382, 383, 471, 476, 488], "delete_index": 331, "delete_indic": 331, "deleteri": 1042, "deli": 404, "deliber": 1000, "delimit": [378, 1010, 1050], "deliv": [365, 1028], "deliveri": 382, "dell": 51, "delong": [1047, 1048], "delta": [413, 454], "delta_": 1001, "delta_k": 413, "delteil": 1039, "delv": [864, 865], "demand": [145, 149, 392, 418, 803, 817, 828, 829], "demarc": 93, "demiraj": [1050, 1051], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 150, 183, 189, 198, 219, 244, 259, 261, 272, 280, 316, 326, 332, 352, 353, 380, 407, 410, 418, 421, 442, 443, 446, 448, 449, 450, 452, 453, 455, 456, 457, 460, 463, 505, 514, 515, 516, 544, 707, 708, 720, 722, 740, 796, 798, 868, 887, 888, 1025], "demo_param": 380, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 88, 94, 102, 104, 134, 138, 144, 147, 165, 166, 178, 179, 183, 189, 214, 247, 253, 254, 258, 262, 263, 267, 274, 277, 280, 286, 293, 296, 303, 310, 312, 313, 315, 318, 322, 329, 331, 332, 335, 339, 345, 352, 353, 354, 361, 367, 373, 374, 378, 383, 390, 401, 406, 410, 414, 417, 449, 505, 515, 523, 700, 706, 716, 745, 801, 803, 850, 872, 903, 915, 993, 994, 998, 1004, 1005, 1006, 1007, 1014, 1017, 1020, 1022, 1025], "dem\u0161ar": 271, "den": [0, 399, 1036, 1037, 1042, 1043, 1044, 1047, 1048], "dendrit": [410, 713], "dendro": 189, "dendro_idx": 189, "dendrogram": [71, 100, 183, 189, 360, 410, 443, 447, 507, 1025, 1047], "denero": 738, "deng": [1039, 1040, 1041], "dengemann": 1036, "dengyong": 903, "deni": [1037, 1038, 1042, 1043, 1044, 1050, 1051], "denni": 1049, "denois": [42, 68, 83, 84, 86, 99, 119, 125, 183, 415, 499, 538, 540, 544, 587, 590, 833, 877, 1025], "denomin": [278, 417, 418, 423, 477, 593, 707, 760, 998], "denot": [166, 387, 392, 396, 408, 410, 414, 417, 591, 592, 594, 803, 809, 817, 826, 880, 881, 988, 993, 996, 1000, 1002, 1004, 1005, 1014, 1017, 1052], "dens": [51, 55, 88, 183, 192, 198, 201, 207, 324, 325, 334, 365, 387, 392, 410, 415, 417, 419, 445, 448, 449, 451, 466, 469, 499, 526, 527, 530, 537, 538, 547, 569, 610, 611, 632, 633, 655, 660, 661, 662, 669, 670, 671, 675, 676, 679, 680, 681, 690, 691, 692, 695, 696, 763, 764, 770, 782, 795, 864, 865, 872, 879, 880, 882, 884, 885, 886, 887, 896, 897, 898, 899, 900, 907, 908, 909, 910, 912, 913, 952, 974, 977, 994, 997, 1000, 1001, 1004, 1005, 1007, 1010, 1014, 1016, 1017, 1018, 1019, 1020, 1025, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "dense_lasso": 199, "dense_output": [764, 770, 900, 952, 1043], "denser": 446, "densif": 1044, "densifi": [392, 661, 662, 669, 670, 671, 679, 680, 681, 907, 994, 1037], "densiti": [2, 50, 82, 88, 93, 98, 107, 129, 166, 168, 173, 183, 199, 213, 228, 231, 237, 240, 244, 255, 256, 262, 271, 277, 288, 292, 297, 298, 311, 341, 352, 373, 375, 380, 387, 392, 410, 417, 421, 429, 446, 448, 450, 452, 454, 466, 469, 501, 505, 539, 544, 552, 553, 800, 801, 803, 847, 848, 852, 853, 900, 998, 1000, 1003, 1007, 1009, 1010, 1016, 1023, 1025, 1026, 1029, 1030, 1037, 1039, 1043, 1044, 1050, 1051], "density_": 900, "densityestim": [380, 429], "densitymixin": [2, 380], "denton": 1037, "deodhar": 1047, "deoli": 1048, "depart": [178, 410], "depedend": 1052, "depend": [2, 25, 43, 44, 46, 52, 64, 72, 86, 107, 124, 140, 143, 146, 147, 149, 151, 154, 163, 167, 176, 181, 183, 184, 186, 189, 191, 194, 198, 231, 234, 239, 240, 246, 250, 261, 265, 271, 272, 276, 277, 278, 285, 291, 307, 311, 316, 322, 325, 328, 338, 345, 348, 353, 354, 361, 365, 366, 367, 371, 378, 380, 381, 386, 387, 390, 391, 392, 393, 395, 396, 403, 404, 406, 410, 412, 414, 415, 417, 418, 419, 420, 421, 440, 441, 442, 446, 448, 449, 451, 452, 454, 456, 459, 461, 462, 464, 466, 471, 486, 491, 492, 493, 496, 499, 503, 504, 505, 507, 508, 513, 537, 538, 544, 547, 554, 562, 563, 565, 591, 592, 593, 594, 605, 607, 610, 611, 614, 630, 635, 636, 641, 643, 651, 661, 662, 672, 674, 676, 679, 680, 681, 683, 690, 693, 694, 697, 698, 714, 732, 733, 741, 781, 784, 786, 787, 790, 795, 796, 800, 801, 822, 832, 849, 850, 851, 853, 855, 856, 857, 858, 859, 865, 866, 868, 880, 881, 884, 887, 901, 908, 909, 912, 916, 931, 992, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1016, 1018, 1019, 1020, 1025, 1030, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1051, 1052], "dependabot": 1053, "dependen": 348, "depict": [134, 273, 417, 1003], "deploi": [265, 328, 365, 395, 404, 409, 1024, 1028], "deploy": [386, 404, 1023, 1024, 1028], "depot": 51, "deprec": [2, 16, 147, 189, 320, 323, 366, 380, 381, 382, 387, 392, 401, 444, 447, 449, 452, 459, 461, 484, 485, 486, 487, 530, 539, 541, 543, 556, 572, 573, 582, 583, 585, 630, 661, 662, 676, 678, 682, 695, 712, 745, 781, 782, 783, 785, 803, 806, 807, 817, 831, 832, 834, 854, 866, 867, 872, 904, 909, 912, 929, 931, 933, 934, 945, 946, 993, 994, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "deprecated_api_refer": 378, "deprecationwarn": 1045, "dept": 375, "depth": [43, 139, 143, 147, 150, 155, 288, 356, 358, 359, 360, 365, 376, 378, 382, 391, 417, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 847, 848, 852, 915, 916, 917, 918, 919, 921, 957, 1009, 1010, 1020, 1037, 1038, 1046], "der": [695, 699, 1001, 1038, 1039, 1043], "derek": 1043, "deriv": [43, 57, 129, 130, 145, 175, 178, 188, 200, 202, 206, 214, 366, 373, 380, 412, 414, 416, 417, 418, 420, 422, 443, 447, 448, 467, 494, 536, 609, 620, 625, 651, 672, 679, 683, 864, 865, 880, 886, 907, 908, 998, 1000, 1001, 1004, 1008, 1010, 1019, 1035, 1036, 1037, 1042, 1043, 1044, 1050], "deros": 1046, "derouich": 1035, "derweh": 1053, "desai": [1042, 1044, 1047, 1048, 1050, 1051], "desalvo": 993, "descamp": 1043, "descend": [142, 630, 1045], "descent": [2, 46, 53, 144, 183, 192, 200, 201, 240, 245, 297, 323, 340, 415, 417, 473, 474, 480, 490, 499, 506, 534, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 634, 642, 649, 650, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 671, 675, 677, 679, 680, 681, 684, 685, 686, 687, 690, 697, 833, 864, 865, 868, 907, 911, 977, 1001, 1008, 1010, 1019, 1025, 1026, 1030, 1035, 1038, 1039, 1040, 1042, 1044, 1046, 1048, 1049, 1050], "descr": [126, 168, 371, 372, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 510, 513, 1043], "describ": [2, 43, 52, 89, 154, 168, 186, 231, 245, 271, 280, 361, 365, 366, 371, 373, 375, 377, 378, 380, 383, 386, 392, 393, 407, 410, 412, 413, 414, 415, 417, 418, 464, 471, 475, 476, 493, 496, 498, 499, 500, 503, 504, 505, 506, 507, 508, 513, 519, 520, 521, 531, 610, 611, 648, 662, 671, 717, 800, 801, 842, 844, 880, 882, 951, 993, 996, 999, 1000, 1003, 1004, 1006, 1010, 1018, 1019, 1020, 1027, 1043, 1045], "descript": [2, 52, 168, 186, 317, 371, 372, 377, 378, 382, 383, 386, 392, 410, 418, 454, 464, 466, 469, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 510, 513, 547, 633, 679, 765, 768, 781, 1004, 1018, 1019, 1024, 1027, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "descriptor": [392, 511, 512], "deseri": 404, "deserv": [378, 384], "deshmukh": 1048, "deshpand": [1040, 1041], "design": [0, 2, 53, 58, 111, 134, 154, 173, 185, 186, 195, 247, 261, 265, 311, 317, 360, 367, 372, 378, 383, 390, 391, 392, 393, 395, 396, 398, 403, 404, 410, 417, 419, 518, 531, 635, 636, 651, 668, 672, 679, 683, 688, 803, 821, 822, 842, 844, 994, 1000, 1001, 1004, 1005, 1014, 1023, 1024, 1028, 1037, 1044, 1053], "desir": [50, 61, 136, 168, 182, 213, 215, 311, 315, 328, 371, 378, 386, 398, 404, 407, 410, 413, 414, 415, 419, 506, 541, 543, 547, 550, 570, 596, 605, 606, 667, 673, 688, 689, 702, 711, 739, 847, 848, 852, 867, 872, 874, 877, 878, 880, 881, 883, 884, 888, 891, 893, 895, 896, 937, 972, 996, 998, 1001, 1007, 1014, 1018, 1019, 1020, 1035, 1043, 1044, 1045, 1048], "desislava": 1049, "desktop": 376, "despit": [64, 116, 176, 211, 213, 231, 246, 300, 392, 401, 412, 630, 631, 633, 1000, 1007, 1028, 1043, 1044], "dessyvv": 1049, "dest": 325, "destin": 1028, "destroi": [277, 418, 798, 876, 1014], "det": [2, 183, 253, 263, 280, 281, 378, 412, 518, 567, 701, 705, 730, 792, 833, 868, 887, 907, 949, 1025, 1047], "det_curv": [2, 268, 701, 785, 792, 1004, 1047, 1048, 1053], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 90, 134, 135, 137, 141, 142, 147, 154, 183, 187, 200, 202, 217, 238, 242, 245, 246, 250, 252, 254, 262, 265, 269, 278, 285, 294, 297, 298, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 356, 358, 359, 361, 365, 366, 367, 370, 371, 372, 373, 376, 378, 380, 382, 383, 384, 386, 390, 391, 392, 393, 396, 404, 406, 409, 410, 413, 414, 415, 417, 418, 419, 420, 421, 434, 435, 439, 445, 446, 448, 449, 450, 452, 453, 454, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 474, 499, 507, 527, 534, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 596, 597, 600, 605, 610, 611, 613, 617, 622, 625, 630, 631, 633, 634, 635, 637, 642, 643, 648, 649, 650, 654, 656, 658, 659, 660, 661, 662, 664, 666, 668, 669, 671, 674, 675, 676, 677, 678, 679, 681, 682, 690, 691, 692, 693, 694, 695, 696, 697, 698, 704, 708, 714, 716, 777, 781, 782, 783, 784, 801, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 845, 849, 850, 852, 853, 854, 855, 857, 858, 860, 861, 863, 866, 867, 869, 871, 872, 884, 888, 896, 902, 903, 904, 905, 909, 912, 915, 916, 917, 918, 945, 969, 993, 994, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1012, 1017, 1020, 1026, 1027, 1028, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "detcurvedisplai": [2, 268, 323, 730, 1047, 1048, 1052, 1053], "detect": [2, 14, 42, 47, 49, 58, 70, 96, 98, 111, 112, 113, 141, 143, 150, 183, 195, 217, 227, 239, 253, 263, 265, 271, 274, 280, 281, 292, 311, 317, 328, 340, 373, 376, 378, 382, 390, 392, 408, 409, 410, 412, 414, 418, 432, 448, 451, 466, 468, 471, 472, 475, 476, 477, 478, 490, 491, 493, 495, 499, 513, 515, 518, 525, 540, 541, 542, 549, 566, 567, 591, 594, 599, 634, 642, 680, 701, 705, 730, 792, 833, 853, 857, 868, 877, 880, 881, 885, 886, 887, 907, 911, 996, 1000, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1035, 1038, 1041, 1042, 1043, 1045, 1047, 1048, 1050, 1051], "detection_error_tradeoff": 1004, "detector": [373, 380, 392, 853], "determin": [2, 48, 50, 53, 57, 80, 88, 111, 134, 136, 140, 149, 166, 175, 186, 193, 194, 209, 216, 271, 284, 311, 316, 345, 354, 360, 361, 377, 378, 380, 387, 391, 392, 407, 408, 410, 414, 415, 417, 418, 419, 420, 433, 439, 443, 444, 445, 447, 449, 451, 452, 458, 461, 462, 463, 467, 471, 472, 474, 475, 476, 477, 478, 484, 485, 486, 490, 493, 495, 498, 500, 506, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 540, 542, 545, 546, 555, 556, 557, 559, 561, 562, 563, 564, 565, 566, 568, 570, 571, 573, 585, 586, 587, 591, 594, 597, 605, 610, 611, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 638, 639, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 690, 692, 693, 695, 696, 697, 710, 714, 726, 732, 733, 741, 786, 787, 788, 790, 791, 796, 803, 805, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 834, 838, 840, 841, 843, 850, 852, 853, 858, 863, 864, 865, 871, 872, 880, 881, 882, 884, 888, 896, 907, 908, 910, 913, 916, 918, 921, 949, 966, 972, 974, 977, 993, 996, 998, 1003, 1007, 1009, 1010, 1012, 1014, 1017, 1018, 1020, 1035, 1040, 1043, 1044, 1046, 1047, 1048], "determinist": [91, 146, 366, 374, 392, 410, 445, 449, 451, 453, 454, 455, 460, 461, 464, 554, 562, 563, 567, 568, 586, 587, 694, 698, 814, 815, 863, 915, 916, 926, 996, 1000, 1036, 1039, 1041, 1043, 1044, 1047, 1050, 1051], "detlefsen": 1049, "detomaso": 1042, "detriment": [46, 167, 285, 366, 419, 1000], "dev": [179, 186, 231, 276, 281, 376, 378, 382, 384, 386, 945, 946, 1004, 1028, 1031, 1042, 1047, 1050, 1051], "dev0": [376, 382, 1027, 1031], "dev514": 1049, "devansh": [1042, 1043], "devanshkyada27": 1052, "devashish": 1041, "devel": 376, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 326, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 365, 373, 377, 378, 382, 384, 390, 392, 393, 395, 401, 404, 407, 412, 413, 417, 418, 424, 427, 434, 496, 803, 945, 946, 987, 1000, 1004, 1007, 1020, 1023, 1024, 1025, 1027, 1028, 1035, 1043, 1044, 1045, 1050, 1053], "developing_estim": 1025, "devi": 1047, "devianc": [2, 145, 148, 213, 231, 326, 417, 556, 561, 562, 564, 565, 568, 651, 672, 683, 724, 726, 727, 750, 752, 755, 916, 918, 1000, 1020, 1036, 1045, 1046, 1048, 1049, 1051], "deviant": [219, 1010], "deviat": [52, 58, 70, 94, 111, 137, 140, 141, 142, 144, 168, 170, 175, 177, 179, 186, 193, 219, 250, 268, 269, 270, 271, 272, 274, 297, 298, 311, 316, 370, 374, 375, 383, 387, 392, 414, 417, 420, 452, 474, 504, 514, 515, 516, 517, 519, 520, 521, 525, 527, 528, 533, 555, 597, 614, 637, 647, 648, 674, 727, 755, 809, 826, 853, 876, 877, 887, 896, 897, 898, 1000, 1004, 1010, 1014, 1041, 1042, 1043, 1046, 1047, 1048], "devic": [414, 585, 1023, 1053], "devnani": 1047, "deweight": 953, "dexter": 1045, "dezub": 1042, "df": [43, 52, 62, 64, 149, 154, 185, 187, 193, 198, 213, 231, 261, 271, 315, 317, 327, 353, 383, 418, 468, 593, 594, 993, 994, 1052], "df_": 231, "df_freq": 231, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 327, "df_sev": 231, "df_std": 353, "df_test": [213, 231], "df_train": [213, 231], "dfrac": [1008, 1014], "dgemm": 365, "dgesdd": 384, "dhanshre": 1050, "dhillon": [2, 57, 407, 453, 455, 514], "dhingra": [1043, 1044, 1047, 1052], "di": [392, 410, 415, 534, 540, 667, 688, 689, 900, 1039, 1048], "dia": 1052, "diabet": [2, 46, 147, 157, 158, 168, 182, 183, 200, 202, 209, 210, 267, 371, 417, 504, 655, 656, 803, 808, 828, 829, 830, 1012, 1025, 1030], "diabetes_i": 209, "diabetes_x": 209, "diabetes_x_test": 209, "diabetes_x_train": 209, "diabetes_y_pr": 209, "diabetes_y_test": 209, "diabetes_y_train": 209, "diadochokinet": 1050, "diag": [51, 113, 178, 258, 261, 415, 420, 535, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 800, 801, 1000, 1050], "diag_kind": [185, 186], "diagnos": [168, 274, 375, 386, 395, 411], "diagnosi": [168, 274, 375, 854], "diagnost": [168, 189, 274, 371, 392, 409, 503, 715, 829, 830, 1004, 1012, 1023, 1024, 1030], "diagon": [2, 43, 62, 64, 75, 113, 115, 126, 231, 250, 258, 261, 262, 264, 341, 407, 410, 412, 420, 455, 473, 474, 480, 483, 514, 516, 530, 535, 553, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 653, 654, 657, 658, 659, 685, 686, 704, 718, 795, 800, 801, 851, 859, 996, 998, 1000, 1003, 1004, 1007, 1014, 1041, 1043, 1044, 1045], "diagram": [2, 62, 64, 103, 252, 321, 327, 380, 408, 410, 440, 441, 470, 905, 1014, 1046, 1047, 1052, 1053], "diamet": 410, "diamond": 259, "diaz": 1043, "dice": [452, 459, 702, 781, 782, 783, 1007], "dicedist": 702, "dichotomis": 1020, "dickerson": 1036, "dickson": 1042, "dico": 123, "dict": [48, 49, 50, 51, 55, 63, 74, 102, 105, 106, 140, 144, 146, 148, 211, 219, 240, 249, 258, 269, 270, 272, 275, 278, 280, 291, 295, 313, 317, 324, 334, 341, 345, 353, 354, 367, 370, 372, 380, 390, 392, 411, 414, 421, 422, 424, 428, 432, 434, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 499, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 714, 716, 765, 768, 774, 782, 783, 800, 801, 802, 803, 806, 807, 809, 814, 815, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 924, 926, 938, 939, 957, 960, 963, 992, 993, 1004, 1014, 1030, 1035, 1041, 1042, 1051, 1052, 1053], "dict_count_vector": 354, "dict_init": [534, 540, 548, 549], "dict_kei": [126, 629], "dict_learn": [2, 387, 534, 540, 549, 1036, 1043, 1045, 1048, 1049, 1051], "dict_learning_onlin": [2, 548, 1036, 1045, 1048, 1049, 1052], "dict_pos_code_estim": 120, "dict_pos_dict_estim": 120, "dict_pos_estim": 120, "dict_typ": 584, "dictat": 410, "dictionari": [2, 44, 45, 46, 47, 71, 84, 86, 119, 121, 149, 151, 183, 212, 247, 249, 265, 353, 354, 371, 372, 373, 380, 390, 392, 410, 418, 451, 466, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 513, 529, 534, 540, 541, 542, 543, 545, 546, 547, 548, 549, 551, 570, 571, 572, 573, 584, 585, 587, 590, 591, 592, 597, 635, 636, 637, 667, 688, 689, 704, 714, 716, 803, 806, 807, 814, 815, 817, 825, 830, 866, 871, 880, 915, 916, 917, 918, 922, 924, 926, 938, 960, 963, 993, 1000, 1004, 1019, 1025, 1029, 1030, 1035, 1043, 1046, 1047, 1048, 1049, 1050], "dictionarylearn": [2, 415, 540, 542, 543, 545, 546, 547, 548, 549, 1036, 1040, 1042, 1045, 1048, 1049, 1050, 1051], "dictlearn": 1040, "dictvector": [2, 47, 57, 102, 183, 351, 352, 353, 373, 418, 490, 585, 591, 592, 593, 594, 880, 1025, 1035, 1036, 1039, 1045, 1047, 1048, 1051, 1052], "did": [146, 170, 186, 189, 213, 221, 231, 257, 265, 318, 373, 404, 630, 715, 822, 909, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "didact": [378, 1024], "didi": [1041, 1042, 1043, 1044], "didn": [247, 361, 392, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "die": 1001, "diebold": 271, "diederik": [864, 865, 1008, 1050], "diederikwp": 1050, "diego": [1036, 1037], "diegodlh": [1042, 1043], "diemert": [1028, 1037, 1038], "diesel": [213, 231], "dietterich": [271, 837, 1005], "diff": [381, 1004], "diff_embed": 301, "differ": [2, 25, 43, 44, 46, 49, 51, 53, 54, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 91, 93, 97, 98, 99, 100, 102, 103, 104, 106, 111, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 134, 137, 139, 140, 142, 143, 144, 146, 148, 149, 150, 154, 155, 156, 157, 159, 161, 163, 168, 169, 170, 171, 172, 175, 176, 177, 181, 182, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 201, 202, 204, 210, 213, 214, 215, 217, 218, 219, 220, 221, 230, 231, 233, 234, 235, 236, 238, 240, 242, 245, 246, 247, 250, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 284, 285, 286, 288, 290, 291, 294, 297, 298, 300, 306, 307, 310, 312, 313, 315, 316, 320, 328, 335, 336, 337, 339, 340, 341, 343, 344, 348, 349, 352, 353, 354, 361, 365, 366, 367, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 386, 387, 391, 392, 396, 398, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 435, 439, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 464, 466, 477, 480, 492, 496, 497, 499, 506, 507, 511, 512, 515, 517, 525, 540, 541, 542, 543, 549, 550, 552, 553, 558, 559, 566, 584, 585, 591, 592, 593, 594, 597, 614, 616, 617, 618, 622, 625, 626, 630, 634, 635, 636, 637, 641, 646, 647, 648, 650, 652, 654, 656, 658, 661, 664, 669, 670, 675, 677, 679, 680, 681, 683, 693, 695, 697, 701, 703, 704, 707, 708, 709, 710, 712, 718, 720, 721, 730, 731, 732, 733, 734, 737, 738, 740, 746, 760, 761, 762, 764, 781, 785, 786, 787, 789, 790, 792, 795, 796, 798, 801, 803, 805, 806, 807, 808, 809, 812, 817, 818, 819, 821, 822, 823, 825, 826, 828, 830, 831, 834, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 857, 860, 863, 867, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 907, 908, 909, 912, 915, 916, 917, 918, 960, 967, 993, 994, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "difference_plot": 276, "differenti": [126, 278, 417, 420, 562, 563, 622, 625], "difficult": [88, 134, 186, 221, 250, 378, 386, 408, 415, 417, 556, 557, 562, 564, 565, 999, 1001, 1003, 1007, 1009, 1011, 1020, 1028, 1035, 1049], "difficulti": [48, 64, 231, 311, 367, 378, 408, 864, 865, 1003, 1007], "diffus": 175, "digest": [378, 1050], "digg": [1028, 1042], "digicosm": 0, "digit": [2, 44, 51, 52, 65, 71, 74, 80, 84, 86, 89, 90, 92, 94, 95, 97, 104, 105, 123, 139, 158, 166, 168, 183, 203, 204, 220, 229, 232, 233, 235, 237, 244, 245, 259, 264, 269, 270, 273, 295, 300, 301, 305, 307, 308, 326, 329, 332, 353, 371, 378, 384, 410, 416, 417, 419, 443, 447, 449, 505, 544, 547, 552, 569, 661, 691, 692, 693, 694, 695, 700, 707, 708, 716, 720, 721, 740, 796, 798, 833, 849, 856, 863, 867, 868, 877, 887, 893, 900, 903, 912, 919, 920, 921, 1001, 1004, 1007, 1009, 1017, 1025, 1030, 1039], "digraph": 919, "dijkstra": [387, 691, 1001], "dilemma": 999, "dillon": [1043, 1044, 1045], "dilut": [189, 375], "dilutedsauc": 1043, "dim": [222, 244, 299, 300, 302, 337, 338, 530, 702, 1052], "dim_reduction_method": 300, "dimens": [2, 37, 48, 51, 52, 54, 72, 75, 86, 113, 115, 120, 126, 168, 172, 174, 176, 178, 187, 197, 198, 211, 235, 237, 240, 244, 245, 251, 257, 258, 295, 296, 300, 314, 345, 352, 353, 354, 373, 375, 379, 392, 410, 415, 416, 420, 422, 444, 445, 447, 449, 450, 451, 454, 466, 467, 484, 485, 486, 496, 497, 518, 527, 528, 532, 533, 536, 544, 552, 585, 586, 587, 588, 590, 592, 600, 614, 622, 625, 644, 647, 662, 693, 694, 695, 697, 698, 702, 767, 828, 847, 848, 852, 866, 899, 900, 901, 909, 910, 911, 912, 913, 933, 934, 935, 966, 974, 977, 994, 996, 998, 1000, 1001, 1002, 1005, 1007, 1008, 1010, 1016, 1019, 1023, 1042, 1044, 1045, 1047], "dimension": [2, 11, 37, 45, 48, 49, 57, 67, 75, 79, 87, 88, 90, 91, 95, 101, 103, 105, 106, 115, 116, 118, 120, 126, 127, 128, 134, 139, 152, 168, 170, 172, 173, 177, 183, 198, 209, 214, 230, 232, 234, 235, 237, 240, 244, 245, 248, 257, 258, 292, 295, 299, 301, 313, 338, 345, 352, 361, 365, 370, 373, 374, 375, 378, 387, 392, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 447, 449, 451, 467, 471, 475, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 500, 503, 504, 505, 507, 508, 513, 518, 522, 535, 537, 538, 541, 542, 543, 544, 547, 550, 552, 566, 569, 576, 602, 610, 634, 643, 644, 645, 655, 691, 692, 693, 694, 695, 696, 697, 699, 702, 713, 728, 800, 801, 803, 833, 847, 848, 849, 852, 855, 856, 863, 867, 868, 871, 877, 882, 887, 899, 900, 901, 907, 911, 951, 989, 995, 996, 999, 1000, 1005, 1006, 1010, 1016, 1017, 1018, 1019, 1020, 1025, 1026, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1047, 1050, 1051], "dimensionalityreduct": 375, "dimensionalityreductiondimension": 398, "diminish": 418, "dimitri": [1048, 1049, 1050, 1051, 1052], "dimmick": 375, "dinga92": 1053, "dingwal": 1042, "dionisi": 1049, "diop": 1045, "dipan": 1053, "direct": [51, 115, 116, 120, 122, 128, 168, 219, 256, 262, 268, 300, 309, 316, 341, 346, 376, 378, 379, 382, 386, 393, 396, 410, 413, 415, 418, 419, 454, 464, 473, 474, 480, 537, 544, 552, 591, 592, 594, 605, 644, 691, 856, 998, 999, 1000, 1005, 1007, 1009, 1024, 1035, 1038], "direction": 1053, "direction_vector": 309, "directli": [0, 45, 57, 64, 80, 89, 103, 126, 139, 143, 168, 178, 198, 200, 213, 219, 231, 241, 276, 309, 311, 324, 327, 328, 354, 361, 365, 376, 378, 379, 380, 382, 384, 390, 391, 392, 393, 406, 407, 408, 410, 411, 412, 413, 414, 418, 420, 444, 454, 464, 466, 467, 471, 476, 530, 570, 571, 572, 573, 596, 600, 614, 623, 635, 646, 649, 650, 655, 656, 663, 664, 665, 666, 667, 680, 684, 687, 693, 777, 781, 784, 795, 796, 802, 803, 806, 807, 817, 831, 832, 834, 850, 852, 866, 867, 868, 874, 884, 886, 889, 896, 993, 1000, 1002, 1007, 1009, 1011, 1014, 1019, 1020, 1024, 1035, 1043, 1044, 1046, 1047, 1048, 1051, 1052], "director": 1028, "directori": [0, 2, 47, 293, 372, 376, 378, 380, 382, 384, 386, 392, 396, 411, 443, 447, 452, 488, 494, 502, 867, 868, 1049], "direr": [1038, 1039, 1042, 1043], "dirichlet": [2, 42, 45, 183, 256, 257, 262, 266, 418, 490, 539, 541, 543, 591, 594, 800, 1023, 1025, 1029, 1030, 1035, 1040, 1041], "dirichlet_distribut": [256, 800, 1003, 1041], "dirichlet_process": [256, 262, 800, 1003, 1041], "disabl": [138, 247, 265, 318, 327, 352, 376, 378, 401, 418, 451, 462, 470, 540, 541, 542, 549, 562, 563, 564, 565, 866, 884, 896, 905, 933, 934, 1014, 1041, 1044, 1048, 1050, 1053], "disadvantag": [415, 420, 1000, 1001, 1008, 1018, 1019, 1020], "disagre": [738, 1011], "disambigu": [378, 835, 904, 1017, 1050], "disappear": [1000, 1035], "disappoint": 43, "discard": [47, 88, 195, 274, 365, 407, 412, 419, 511, 512, 552, 600, 630, 633, 647, 880, 884, 896, 994, 1000, 1043, 1047, 1053], "disclaim": 1023, "disclos": 391, "disconnect": 1048, "discontinu": [43, 390], "discord": [708, 1027], "discount": [2, 373, 410, 729, 759, 1042, 1045], "discounted_cumulative_gain": 729, "discourag": [217, 390, 396, 692], "discov": [353, 410, 415, 418, 421, 446, 450, 1050, 1053], "discoveri": [2, 271, 373, 384, 387, 410, 417, 419, 421, 446, 514, 558, 559, 566, 595, 598, 599, 601, 602, 603, 609, 723, 743, 786, 942, 943, 944, 1004, 1016, 1028, 1049, 1050], "discrep": [418, 1039], "discret": [2, 43, 67, 80, 118, 129, 134, 169, 183, 187, 194, 213, 231, 251, 288, 306, 310, 314, 367, 370, 373, 374, 378, 382, 391, 392, 410, 415, 418, 420, 440, 441, 450, 454, 462, 463, 464, 495, 517, 518, 525, 556, 562, 591, 592, 595, 598, 599, 602, 603, 610, 611, 613, 614, 615, 619, 620, 621, 660, 661, 803, 814, 825, 833, 842, 843, 846, 868, 872, 880, 881, 884, 887, 896, 907, 912, 916, 966, 993, 1000, 1001, 1002, 1004, 1005, 1007, 1020, 1023, 1025, 1030, 1037, 1040, 1048, 1049, 1050], "discrete_featur": [610, 611], "discrim": 213, "discrimin": [2, 12, 48, 49, 65, 109, 110, 111, 112, 113, 126, 128, 163, 165, 168, 183, 191, 228, 234, 248, 261, 300, 375, 408, 417, 477, 515, 552, 553, 569, 634, 786, 856, 993, 1001, 1004, 1007, 1018, 1020, 1025, 1026, 1030, 1038], "discriminant_analysi": [2, 67, 69, 70, 128, 234, 300, 361, 406, 539, 552, 553, 856, 998, 1005, 1035, 1038, 1039, 1040, 1041, 1042], "discriminatori": 408, "discuss": [43, 86, 91, 168, 186, 202, 233, 238, 265, 274, 288, 352, 361, 367, 373, 375, 378, 383, 384, 386, 390, 392, 393, 409, 410, 412, 416, 417, 419, 420, 501, 685, 686, 849, 850, 855, 857, 858, 994, 998, 1000, 1001, 1004, 1007, 1014, 1021, 1024, 1027, 1038], "diseas": [46, 157, 168, 182, 274, 375, 715, 1004], "disentangl": 1001, "disjoint": [408, 410, 411, 439, 707, 734, 758, 760, 1001], "disk": [45, 53, 373, 378, 383, 392, 404], "disp": [43, 66, 68, 136, 149, 150, 151, 264, 274, 284, 294, 316, 321, 327, 338, 343, 440, 634, 700, 703, 704, 856], "disp1": 635, "disp2": 635, "dispar": [693, 697, 1001], "dispatch": [103, 265, 392, 406, 470, 803, 817, 828, 829, 830, 905, 969, 970, 1030, 1050, 1053], "dispatch_next": 969, "dispatch_one_batch": 969, "dispers": [70, 285, 410, 713, 728, 1000], "displai": [2, 51, 62, 64, 70, 72, 80, 93, 103, 112, 113, 115, 116, 120, 140, 150, 151, 154, 181, 183, 186, 187, 201, 231, 239, 240, 250, 254, 260, 268, 272, 273, 278, 280, 281, 284, 286, 301, 317, 321, 322, 340, 357, 365, 378, 380, 381, 385, 387, 396, 398, 411, 415, 418, 419, 424, 440, 466, 469, 470, 499, 544, 567, 633, 634, 635, 661, 690, 700, 701, 703, 704, 705, 716, 721, 785, 792, 803, 809, 817, 826, 833, 867, 868, 880, 882, 887, 905, 912, 919, 920, 921, 942, 969, 990, 1004, 1008, 1023, 1025, 1030, 1044, 1046, 1047, 1049, 1050], "display_label": [45, 264, 700, 1047], "dispos": 993, "disproportion": 416, "disput": 140, "disregard": [352, 392, 418, 433, 467, 484, 485, 486, 555, 557, 559, 561, 563, 565, 568, 571, 573, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 724, 725, 726, 727, 788, 840, 841, 850, 858, 865, 876, 877, 883, 884, 887, 892, 895, 896, 898, 908, 910, 913, 916, 918, 1004, 1043], "disrupt": [366, 376], "dissemin": 1023, "dissimilar": [236, 345, 392, 407, 454, 693, 697, 1001, 1041, 1051], "dissimilarity_matrix_": 693, "dist": [111, 234, 244, 382, 471, 472, 473, 474, 475, 476, 477, 478, 702, 766, 772, 847, 848], "dist_": [471, 476], "dist_embed": 301, "dist_linkag": 189, "dist_matrix": 454, "dist_matrix_": 691, "distanc": [2, 37, 74, 75, 88, 90, 93, 94, 98, 100, 108, 112, 125, 168, 181, 183, 189, 199, 214, 216, 233, 235, 238, 244, 250, 291, 293, 294, 299, 301, 303, 304, 311, 316, 320, 324, 325, 345, 352, 353, 365, 375, 387, 390, 392, 407, 410, 412, 415, 416, 420, 421, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 457, 458, 459, 460, 461, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 541, 543, 550, 610, 611, 618, 622, 623, 625, 626, 631, 661, 662, 669, 671, 677, 678, 679, 680, 681, 691, 692, 693, 695, 696, 697, 698, 699, 702, 706, 728, 737, 761, 763, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 781, 782, 783, 784, 795, 796, 799, 803, 817, 836, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 886, 901, 905, 907, 909, 911, 912, 913, 915, 916, 917, 918, 994, 998, 1001, 1002, 1004, 1007, 1010, 1014, 1016, 1018, 1019, 1024, 1025, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "distance_matrix": 189, "distance_metr": [2, 781, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861], "distance_threshold": [76, 443, 447, 1044, 1047], "distancemetr": [2, 392, 416, 850, 1007, 1043, 1047, 1048, 1049, 1052], "distancemetric64": [847, 848], "distances_": [76, 443, 447, 1047], "distant": [410, 695, 712, 1007], "distil": 238, "distinct": [93, 271, 332, 352, 354, 373, 380, 383, 392, 393, 414, 417, 418, 592, 804, 813, 821, 881, 882, 902, 903, 993, 1000, 1007, 1010, 1043], "distinguish": [43, 58, 75, 111, 118, 125, 215, 268, 288, 373, 380, 392, 393, 420, 993, 1004, 1007, 1010], "distort": [37, 212, 244, 375, 408, 884, 896, 901, 1001, 1014, 1016], "distribut": [2, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 85, 86, 88, 90, 95, 107, 110, 111, 112, 116, 118, 126, 134, 136, 146, 150, 163, 168, 170, 179, 183, 185, 186, 189, 191, 193, 213, 215, 217, 235, 237, 240, 244, 250, 256, 261, 262, 265, 267, 271, 277, 279, 285, 288, 292, 296, 310, 311, 313, 316, 326, 330, 331, 346, 348, 352, 365, 366, 371, 374, 375, 376, 378, 379, 383, 392, 408, 410, 412, 414, 415, 416, 422, 449, 451, 471, 472, 473, 474, 475, 476, 477, 478, 490, 501, 506, 518, 519, 520, 521, 522, 526, 535, 536, 539, 553, 554, 555, 566, 614, 628, 643, 645, 647, 648, 651, 661, 662, 672, 682, 683, 691, 692, 693, 695, 709, 711, 727, 755, 792, 800, 801, 807, 808, 815, 817, 821, 822, 833, 843, 846, 852, 856, 863, 870, 883, 884, 885, 886, 887, 895, 896, 897, 902, 903, 911, 922, 953, 993, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1016, 1017, 1023, 1024, 1025, 1029, 1030, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "district": [182, 373], "distutils_use_sdk": 376, "ditenberg": 1042, "div": [250, 947], "dive": [116, 378, 384, 993], "diverg": [54, 145, 233, 238, 296, 541, 543, 550, 695, 863, 1001, 1003, 1004, 1009, 1011, 1042, 1043, 1048], "divers": [0, 392, 417], "divid": [72, 78, 120, 165, 175, 213, 250, 256, 353, 361, 374, 375, 407, 409, 410, 414, 415, 417, 471, 472, 473, 474, 475, 476, 477, 478, 515, 522, 537, 544, 679, 680, 681, 722, 729, 737, 741, 749, 759, 797, 799, 864, 865, 909, 912, 951, 954, 955, 993, 1001, 1003, 1004, 1007, 1014, 1018, 1020, 1035, 1042, 1043, 1046], "dividend": 1004, "divis": [324, 410, 418, 593, 594, 597, 715, 716, 719, 732, 733, 741, 749, 786, 787, 790, 1004, 1039, 1043, 1044, 1047, 1051, 1052], "divisor": 1004, "divo": 1045, "divyanshu": 1048, "divyaprabha": 1046, "diwakar": 1049, "dixon": [772, 1045, 1046], "dizietasahi": 1045, "di\u1ec5n": 1050, "djipei": [1040, 1041], "dl": 679, "dlabal": 1039, "dll": 1049, "dlovel": 1043, "dmallia17": 1048, "dmitri": [1040, 1042, 1043, 1044, 1048, 1051, 1052], "dmitrij": 1039, "dmytro": 1048, "dn": [0, 1007], "dna": [390, 631, 994], "dnf": 396, "do": [0, 30, 43, 49, 52, 62, 64, 77, 88, 94, 100, 106, 124, 126, 129, 138, 141, 142, 146, 147, 149, 154, 165, 175, 181, 186, 187, 188, 210, 213, 217, 231, 233, 235, 247, 248, 250, 262, 265, 266, 269, 272, 274, 284, 290, 291, 293, 297, 323, 327, 335, 338, 341, 345, 346, 348, 352, 353, 354, 360, 361, 365, 366, 367, 373, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 392, 393, 404, 406, 408, 410, 411, 412, 413, 414, 417, 418, 419, 429, 452, 463, 466, 469, 506, 539, 541, 545, 547, 555, 558, 584, 585, 591, 592, 594, 605, 635, 636, 648, 649, 655, 658, 659, 661, 662, 669, 671, 679, 740, 766, 781, 785, 805, 820, 823, 839, 840, 844, 871, 872, 874, 881, 885, 887, 892, 893, 895, 896, 897, 898, 915, 916, 917, 918, 932, 977, 993, 996, 998, 1000, 1001, 1004, 1005, 1007, 1008, 1012, 1014, 1019, 1020, 1023, 1024, 1027, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "do_early_stopping_": [564, 565], "doc": [0, 43, 47, 52, 57, 352, 354, 366, 378, 382, 383, 386, 392, 396, 403, 418, 591, 592, 594, 781, 784, 795, 796, 830, 1035, 1039, 1049], "doc_environ": 386, "doc_it": 47, "doc_linux": 386, "doc_topic_distr": [539, 1042], "doc_topic_prior": [415, 539], "doc_topic_prior_": 539, "docker": [386, 404, 1048, 1049], "dock\u00e8": [1044, 1045, 1046, 1052, 1053], "docstr": [378, 380, 384, 392, 450, 463, 474, 702, 704, 941, 993, 1007, 1008, 1018, 1035, 1042, 1043, 1048, 1049, 1052], "doctest": [378, 392, 1035], "document": [2, 17, 42, 45, 46, 49, 51, 54, 56, 59, 63, 72, 90, 91, 93, 94, 102, 103, 104, 118, 120, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 228, 241, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 308, 309, 317, 321, 324, 325, 327, 332, 334, 348, 354, 360, 365, 366, 367, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 386, 390, 392, 393, 396, 398, 401, 404, 407, 410, 415, 418, 421, 446, 449, 450, 451, 452, 455, 459, 466, 490, 491, 502, 504, 514, 524, 526, 539, 547, 567, 591, 592, 593, 594, 607, 634, 642, 646, 661, 669, 671, 677, 679, 699, 700, 702, 706, 708, 720, 740, 761, 762, 772, 781, 782, 783, 796, 798, 803, 806, 807, 809, 817, 826, 837, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 868, 879, 907, 912, 929, 932, 934, 948, 969, 993, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1018, 1021, 1025, 1028, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "document_clust": 1041, "document_nam": 57, "doddington": 1004, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 67, 70, 75, 80, 86, 88, 90, 102, 104, 105, 116, 130, 134, 139, 140, 142, 143, 144, 148, 149, 154, 168, 176, 186, 187, 198, 210, 213, 219, 231, 233, 234, 235, 238, 240, 243, 244, 245, 247, 248, 250, 258, 259, 265, 266, 271, 273, 274, 278, 280, 281, 290, 291, 304, 311, 313, 315, 317, 318, 323, 324, 333, 334, 339, 341, 348, 350, 352, 353, 354, 365, 366, 372, 376, 378, 379, 380, 382, 386, 391, 392, 398, 401, 404, 406, 408, 410, 411, 414, 415, 417, 418, 419, 420, 435, 442, 444, 448, 449, 451, 452, 456, 458, 469, 475, 481, 489, 502, 506, 511, 530, 538, 540, 541, 542, 547, 549, 552, 553, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 584, 585, 586, 591, 592, 594, 596, 597, 600, 605, 609, 613, 635, 641, 652, 653, 654, 657, 658, 659, 662, 674, 685, 686, 701, 703, 705, 710, 731, 732, 733, 737, 739, 741, 746, 781, 786, 787, 790, 791, 797, 803, 806, 807, 817, 864, 868, 869, 870, 872, 874, 876, 879, 880, 881, 884, 887, 888, 896, 899, 900, 904, 907, 908, 915, 916, 917, 918, 922, 933, 937, 951, 954, 955, 956, 969, 987, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "doepk": 1042, "doesn": [47, 186, 213, 247, 257, 290, 308, 341, 386, 392, 396, 404, 410, 418, 419, 423, 435, 477, 635, 636, 669, 671, 679, 719, 831, 834, 839, 849, 850, 864, 876, 877, 1003, 1004, 1020, 1039, 1052], "dog": [323, 324, 326, 327, 328, 585, 786, 888, 1014], "dohmatob": [1040, 1041, 1042], "dohri": [1052, 1053], "doi": [191, 213, 231, 378, 410, 679], "dok": [556, 557, 874, 1048], "dokato": 1042, "dolan": 373, "dollar": [186, 373], "dolmatov": 1045, "dolphin": 352, "domain": [149, 213, 285, 317, 392, 395, 414, 638, 724, 726, 727, 804, 805, 810, 811, 812, 1000, 1024], "domin": [140, 182, 189, 213, 218, 250, 280, 316, 373, 384, 408, 887, 1006, 1014, 1020, 1051], "domingo": [64, 791, 1004], "dominik": [1042, 1051], "don": [51, 64, 87, 102, 149, 186, 234, 247, 248, 265, 271, 284, 291, 333, 338, 342, 352, 353, 365, 372, 378, 380, 382, 384, 386, 391, 396, 401, 409, 411, 418, 430, 649, 655, 835, 915, 916, 917, 918, 926, 967, 993, 1000, 1003, 1005, 1008, 1010, 1018, 1039, 1044, 1051, 1052, 1053], "don86": 1042, "donald": [45, 373, 410, 728, 994], "donat": 241, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 86, 123, 149, 165, 168, 175, 176, 186, 187, 191, 193, 198, 199, 217, 230, 246, 247, 261, 269, 272, 275, 280, 291, 314, 322, 352, 353, 354, 361, 366, 372, 376, 378, 380, 382, 385, 386, 387, 390, 392, 401, 410, 412, 414, 415, 417, 443, 444, 447, 452, 454, 474, 484, 485, 486, 487, 491, 538, 564, 565, 585, 609, 610, 611, 631, 633, 635, 637, 646, 647, 648, 662, 725, 744, 800, 801, 803, 817, 819, 822, 823, 825, 871, 885, 988, 993, 994, 997, 1000, 1001, 1004, 1006, 1007, 1008, 1014, 1017, 1018, 1019, 1020, 1024, 1035, 1037, 1042, 1045, 1047, 1051], "dong": 1045, "donn": 1040, "donoho": [692, 696, 1001], "donor": [168, 375], "donovan": 1041, "dor": 1043, "dorin": [96, 450], "dormagen": 1045, "dot": [2, 55, 69, 79, 82, 87, 90, 95, 109, 110, 111, 113, 115, 116, 121, 122, 123, 127, 129, 134, 137, 170, 171, 177, 178, 186, 195, 198, 205, 207, 208, 245, 257, 258, 260, 261, 265, 275, 337, 339, 345, 365, 380, 384, 387, 392, 407, 415, 418, 536, 541, 543, 550, 593, 594, 617, 649, 650, 653, 655, 656, 657, 660, 663, 664, 665, 666, 684, 687, 690, 764, 766, 879, 919, 952, 1002, 1006, 1014, 1018, 1019, 1044], "dot_data": [919, 1020], "dot_product": 952, "dotproduct": [2, 173, 174, 179, 420, 614, 628], "dotson": 1040, "doubl": [70, 140, 283, 378, 392, 415, 541, 543, 544, 550, 847, 848, 858, 987, 994, 1019, 1020, 1035, 1045, 1046], "doubt": [378, 379, 382, 1000, 1010, 1023], "doucet": 1049, "douetteau": 1028, "doug": [1036, 1037, 1047], "dougal": [1037, 1039, 1040, 1042, 1043, 1044, 1045], "dougla": 1043, "douillard": 1042, "doumouro": 1044, "douriez": [1045, 1046], "dowl": 1041, "down": [80, 81, 112, 134, 228, 229, 235, 244, 245, 247, 274, 288, 309, 311, 345, 361, 372, 381, 386, 392, 412, 415, 445, 452, 458, 593, 596, 597, 642, 652, 777, 781, 784, 876, 877, 882, 885, 886, 897, 909, 912, 919, 1000, 1043], "downarrow": 1006, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 371, 373, 375, 376, 382, 383, 386, 398, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 513, 1020, 1030, 1039, 1040, 1043, 1047, 1048, 1049], "download_20newsgroup": 1039, "download_if_miss": [490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 1042], "download_url": 47, "downsampl": 123, "downsid": 354, "downstream": [43, 111, 318, 354, 418, 534, 537, 540, 544, 545, 609, 880, 1014, 1045], "downweight": [412, 539], "dowon": [1043, 1044], "dozen": [391, 420], "do\u0161ilovi\u0107": [1052, 1053], "dp": [257, 262], "dpgmm": [257, 262, 1035, 1039, 1041], "dpi": [224, 921, 1048], "dpy_debug": 384, "dqd": 384, "dr": [0, 168, 375, 410, 1049], "draft": [378, 393], "drag": 398, "dragon": 1014, "drama": 418, "dramat": 367, "dramsch": 1045, "drastic": [170, 244, 279, 410, 414, 1007, 1017], "draw": [43, 46, 93, 179, 186, 209, 251, 273, 278, 341, 385, 413, 415, 416, 417, 558, 559, 560, 561, 566, 567, 568, 569, 614, 637, 704, 809, 826, 919, 921, 1003, 1023, 1048, 1049], "drawback": [230, 996, 999], "drawcoastlin": [50, 304], "drawcountri": [50, 304], "drawn": [46, 85, 111, 137, 167, 170, 179, 185, 251, 278, 295, 352, 366, 374, 410, 416, 417, 420, 422, 471, 472, 473, 474, 475, 476, 477, 478, 518, 526, 536, 558, 559, 560, 561, 566, 567, 568, 569, 614, 630, 635, 644, 843, 899, 900, 917, 918, 1000, 1014, 1016, 1038], "drawstyl": [356, 703], "draxu": 1035, "drew": [1044, 1053], "drewhogg": 1050, "drewmjohnston": 1044, "drgfreeman": 1045, "driessen": [412, 471, 476, 1010], "drift": 1024, "drivag": [213, 231], "drive": [367, 415, 416, 552, 1018, 1028], "driven": [0, 189, 1028], "driver": [213, 231, 1050], "drop": [43, 44, 52, 103, 107, 116, 149, 175, 185, 186, 187, 189, 213, 217, 231, 250, 254, 265, 281, 317, 322, 325, 327, 353, 382, 386, 411, 415, 417, 466, 469, 570, 571, 572, 573, 698, 703, 705, 785, 792, 866, 880, 886, 994, 1000, 1004, 1014, 1023, 1035, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "drop_binary_enc": 880, "drop_dupl": 283, "drop_enc": [880, 1014], "drop_first": 698, "drop_idx": 880, "drop_idx_": [880, 1046, 1050], "drop_intermedi": [703, 705, 785, 792, 1051], "drop_nul": [52, 175], "dropdown": [168, 378, 993], "dropped_result": 143, "dropper": 143, "dror": 1044, "dross": 537, "dro\u017cd\u017c": 1038, "drskd": 1049, "druck": 1049, "drucker": [135, 417, 557], "drug": 1000, "dry": 187, "dryden": 102, "ds_ana": 1048, "ds_cnt": [67, 313, 314], "dschult": 55, "dscullei": 451, "dseg": 102, "dsouza": [1046, 1047, 1048, 1049], "dsquareindia": 1041, "dss": 1028, "dt": [83, 123, 155, 175, 417, 418, 1020], "dtreeviz": 1023, "dtype": [43, 47, 49, 50, 55, 82, 86, 98, 102, 103, 143, 145, 147, 148, 150, 171, 172, 173, 182, 186, 187, 215, 231, 254, 256, 265, 269, 275, 279, 285, 288, 298, 304, 317, 323, 324, 326, 331, 360, 372, 373, 378, 380, 390, 392, 406, 411, 414, 417, 418, 425, 426, 428, 431, 444, 445, 449, 450, 451, 452, 453, 455, 461, 466, 468, 469, 471, 474, 476, 490, 491, 492, 493, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 517, 525, 545, 551, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 588, 589, 591, 592, 594, 596, 597, 604, 605, 609, 630, 631, 632, 633, 635, 636, 643, 644, 647, 648, 649, 655, 659, 660, 663, 664, 665, 666, 667, 668, 674, 676, 678, 700, 702, 708, 717, 718, 734, 741, 744, 758, 789, 809, 828, 830, 831, 843, 847, 848, 850, 858, 872, 878, 880, 881, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 901, 909, 910, 911, 912, 913, 915, 916, 917, 918, 928, 930, 931, 933, 934, 958, 968, 974, 977, 978, 979, 980, 981, 984, 989, 990, 994, 1005, 1014, 1017, 1019, 1036, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dtype_exclud": [103, 468], "dtype_includ": [103, 143, 154, 250, 411, 468], "du": [0, 399, 400, 1035, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dua": 1044, "dual": [102, 104, 320, 348, 352, 418, 419, 473, 474, 480, 614, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 684, 687, 847, 848, 907, 908, 909, 912, 1019, 1037, 1046, 1049, 1051], "dual_coef_": [538, 646, 909, 910, 911, 912, 913, 1019, 1039], "dual_gap": [473, 474, 480, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687], "dual_gap_": [649, 650, 655, 656, 663, 664, 665, 666, 1048], "dualiti": [474, 1000], "dualtre": [847, 848], "duan": [1044, 1046], "duart": [1040, 1048, 1050, 1053], "dubai": 418, "duboi": [1041, 1043], "dubou": 1045, "dubourg": [0, 400, 1028, 1035, 1039], "duchesnai": [0, 400, 1035], "duck": [380, 392, 1045], "ducktyp": [1039, 1052], "duckworth": 1035, "ducout": 1049, "duda": [375, 998], "due": [48, 52, 63, 64, 86, 88, 93, 107, 134, 137, 170, 186, 187, 193, 198, 204, 211, 213, 215, 230, 231, 244, 250, 257, 279, 280, 285, 290, 291, 316, 317, 345, 348, 352, 353, 354, 378, 384, 390, 392, 396, 408, 409, 410, 414, 415, 417, 420, 445, 448, 449, 461, 538, 542, 546, 547, 577, 674, 803, 806, 807, 811, 813, 817, 828, 829, 832, 835, 839, 840, 872, 876, 877, 887, 994, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1018, 1019, 1024, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "dueck": [73, 442, 456], "dugnat": 1049, "duhaim": 1043, "dummi": [2, 134, 135, 213, 231, 247, 265, 274, 383, 405, 554, 555, 735, 880, 889, 926, 1005, 1014, 1020, 1030, 1036, 1038, 1039, 1040, 1042], "dummy_classifiers_misclassification_error": 134, "dummy_clf": [134, 554], "dummy_leaf_": 444, "dummy_regr": 555, "dummy_sev": 231, "dummybiclust": 425, "dummyclassifi": [2, 134, 265, 274, 555, 735, 1004, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1053], "dummyestim": [562, 563], "dummyregressor": [2, 213, 231, 554, 1004, 1005, 1036, 1038, 1039, 1042, 1043, 1045, 1048, 1049, 1053], "dumont": 1020, "dump": [2, 55, 404, 489, 847, 848], "dump_svmlight_fil": [2, 1035, 1036, 1040, 1050, 1052], "duong": [1052, 1053], "duplic": [366, 377, 378, 379, 392, 410, 421, 446, 450, 451, 518, 638, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 831, 878, 989, 1007, 1035, 1038, 1047, 1049, 1051, 1052], "dupont": 51, "dupr": [1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "dupr\u00e9": [0, 399, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "duqu": 1048, "durat": [43, 47, 213, 231, 250, 265, 293, 354, 366, 969, 970, 1000], "duration_sec": 49, "duration_test": 352, "duration_train": 352, "dure": [0, 43, 44, 51, 52, 83, 88, 91, 104, 107, 116, 125, 138, 143, 144, 149, 151, 165, 170, 175, 186, 187, 189, 202, 214, 221, 265, 269, 273, 285, 291, 322, 323, 345, 365, 367, 376, 378, 380, 383, 392, 393, 410, 411, 415, 417, 418, 420, 421, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 461, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 616, 617, 618, 620, 622, 623, 625, 626, 628, 630, 631, 632, 633, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 703, 792, 800, 801, 802, 803, 806, 807, 817, 825, 828, 829, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 994, 996, 1000, 1001, 1007, 1014, 1016, 1020, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "duron": 1049, "duti": 393, "dutt": 1051, "dutta": [1052, 1053], "duv2014": 420, "duvenaud": [420, 625, 626], "dwight": 1050, "dx": [51, 53, 702], "dx_c": 1011, "dy": [51, 702], "dye": 1048, "dylan": [1042, 1045], "dynam": [51, 52, 187, 558, 559, 560, 561, 566, 567, 568, 569, 582, 583, 679, 680, 681, 1020, 1028, 1041, 1047, 1052], "dzi": 1053, "dziki": 1038, "d\u00b2": 231, "d\u00f6pfert": 1043, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 86, 88, 90, 94, 102, 109, 111, 112, 113, 115, 116, 123, 125, 126, 134, 137, 143, 145, 146, 149, 150, 159, 164, 167, 168, 178, 185, 186, 187, 191, 194, 198, 202, 203, 213, 214, 215, 217, 231, 233, 234, 246, 247, 265, 267, 271, 272, 274, 276, 277, 278, 286, 288, 290, 297, 304, 313, 316, 320, 322, 328, 348, 354, 358, 359, 360, 361, 365, 366, 367, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 390, 391, 392, 396, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 439, 441, 443, 445, 446, 447, 449, 451, 452, 456, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 499, 501, 503, 504, 505, 506, 527, 536, 537, 538, 539, 541, 543, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 584, 585, 591, 592, 593, 594, 596, 597, 600, 606, 607, 608, 609, 610, 611, 612, 613, 614, 620, 625, 626, 631, 633, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 691, 693, 695, 697, 700, 702, 704, 707, 708, 711, 712, 719, 731, 732, 733, 734, 741, 744, 745, 758, 766, 770, 781, 788, 791, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 816, 817, 821, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 859, 863, 864, 865, 867, 870, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 902, 903, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 945, 950, 951, 953, 957, 958, 960, 963, 978, 989, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1024, 1027, 1028, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "e0129126": 372, "e11": 373, "e2": [901, 1000], "e41a1c": [79, 95], "e501": [168, 352], "e_": 415, "each": [2, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 68, 70, 72, 76, 78, 79, 81, 82, 86, 88, 91, 93, 94, 102, 103, 105, 106, 107, 115, 116, 118, 120, 121, 125, 126, 127, 128, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 152, 153, 154, 155, 156, 157, 164, 168, 172, 174, 179, 181, 182, 185, 186, 187, 189, 191, 193, 199, 201, 202, 207, 211, 213, 214, 215, 217, 218, 221, 228, 231, 234, 240, 241, 244, 245, 246, 247, 248, 250, 251, 252, 254, 256, 259, 261, 264, 265, 266, 267, 269, 271, 272, 274, 276, 277, 280, 281, 285, 288, 290, 291, 294, 296, 300, 302, 304, 306, 307, 309, 311, 312, 313, 314, 316, 317, 318, 320, 322, 323, 324, 326, 327, 328, 330, 331, 332, 335, 341, 345, 348, 353, 354, 356, 357, 360, 361, 365, 366, 367, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 386, 387, 390, 391, 392, 401, 404, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 427, 428, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 522, 525, 526, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 710, 711, 713, 716, 722, 728, 731, 732, 733, 741, 742, 748, 749, 751, 753, 754, 756, 757, 761, 762, 765, 766, 767, 768, 769, 771, 772, 773, 774, 776, 777, 779, 781, 782, 783, 784, 786, 787, 788, 790, 791, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 924, 939, 945, 946, 951, 953, 954, 959, 960, 979, 980, 981, 984, 993, 994, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "eager": 265, "eargl": 1049, "earl": 1038, "earli": [43, 54, 79, 95, 133, 134, 140, 142, 183, 192, 200, 315, 321, 392, 417, 443, 447, 451, 465, 492, 499, 539, 540, 541, 542, 549, 556, 557, 562, 563, 564, 565, 630, 648, 659, 669, 670, 671, 679, 681, 695, 753, 833, 864, 865, 977, 1001, 1007, 1014, 1018, 1022, 1024, 1025, 1028, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "earlier": [140, 187, 217, 372, 378, 413, 838, 841, 1014, 1033, 1036, 1048, 1050], "earliest": [372, 1001], "early_exager": 1042, "early_exagger": 695, "early_stop": [140, 149, 187, 221, 306, 323, 352, 392, 417, 564, 565, 669, 670, 671, 679, 680, 681, 864, 865, 1018, 1043, 1046, 1049, 1050], "earn": [185, 186, 393], "earth": [235, 353, 767, 1023], "eas": [104, 189, 261, 316, 378, 381, 384, 1000, 1018, 1023, 1024, 1028, 1046, 1047, 1049], "easi": [187, 221, 231, 259, 269, 271, 341, 352, 361, 373, 378, 384, 386, 390, 391, 404, 410, 417, 503, 507, 513, 874, 993, 999, 1003, 1011, 1014, 1023, 1024, 1028, 1045, 1050, 1051], "easier": [79, 95, 99, 113, 143, 193, 201, 242, 250, 268, 269, 311, 341, 352, 361, 373, 378, 380, 383, 386, 390, 396, 412, 414, 470, 518, 905, 945, 999, 1004, 1011, 1020, 1024, 1028, 1044, 1049], "easiest": [380, 386, 411, 1001], "easili": [43, 48, 67, 126, 165, 189, 216, 229, 245, 247, 251, 254, 271, 273, 280, 296, 313, 378, 380, 392, 393, 404, 411, 417, 418, 420, 451, 998, 1000, 1001, 1014, 1018, 1019, 1020, 1027, 1041], "easlii": 241, "ec": [311, 533], "ecat": 373, "echo": [376, 382], "eckert": 1040, "eckhart": 497, "eclf": [155, 156, 417], "eclf1": 572, "eclf2": 572, "eclf3": 572, "ecml": 0, "ecoc": 288, "ecolog": [50, 304, 373, 501], "econom": [185, 186, 271], "econometr": 1000, "econometrica": 1000, "ecosystem": [378, 386, 994, 1022, 1028], "ecuador": [50, 304, 373, 501], "ed": [138, 148, 410, 417, 523, 562, 563, 1016, 1035, 1042], "eddi": [1038, 1052, 1053], "eden": 1050, "edern": [1050, 1051], "edg": [51, 63, 80, 99, 123, 143, 166, 236, 278, 386, 392, 407, 410, 412, 455, 564, 565, 588, 589, 591, 592, 594, 800, 844, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 872, 920, 1014, 1017, 1028, 1041, 1043, 1046, 1049], "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 89, 93, 100, 118, 136, 142, 150, 152, 153, 155, 156, 161, 163, 171, 172, 174, 178, 187, 197, 205, 215, 222, 225, 226, 227, 244, 245, 246, 248, 250, 256, 259, 271, 274, 286, 294, 297, 298, 299, 302, 306, 313, 314, 316, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 350, 357, 358, 359, 634], "edit": [77, 375, 376, 377, 378, 382, 386, 390, 396, 533, 537, 837, 998, 1000, 1005, 1011], "editor": [378, 386, 390], "edm": 1000, "edoardo": [1050, 1052, 1053], "edouard": [0, 400, 1035], "edson": [1004, 1040], "edu": [45, 47, 55, 168, 191, 288, 352, 372, 373, 375, 410, 451, 489, 503, 505, 511, 512, 513, 537, 644, 647, 652, 661, 669, 670, 679, 682, 685, 686, 842, 844, 846, 856, 863, 900, 902, 915, 916, 1000, 1002], "eduardo": [1038, 1040, 1048, 1049], "educ": [185, 186, 327, 378, 499, 719, 1005], "edvardlindelof": 1045, "edward": [175, 617, 622, 625, 1038, 1043, 1044, 1045, 1046, 1050, 1053], "edwinensa": 1041, "edwinwenink": 1048, "eec": [451, 644], "ef": 1050, "eff": 1020, "effect": [43, 45, 64, 72, 74, 75, 80, 86, 90, 95, 98, 101, 105, 116, 118, 123, 125, 134, 144, 146, 148, 150, 151, 159, 167, 170, 171, 175, 177, 183, 184, 186, 187, 189, 198, 206, 208, 213, 214, 215, 217, 218, 219, 230, 232, 235, 237, 243, 250, 254, 257, 261, 263, 265, 267, 271, 272, 273, 276, 279, 280, 285, 291, 303, 309, 310, 312, 315, 321, 329, 341, 345, 346, 348, 349, 350, 352, 353, 354, 361, 366, 378, 380, 383, 390, 392, 408, 410, 411, 415, 416, 417, 418, 420, 421, 439, 444, 445, 446, 448, 449, 451, 452, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 492, 499, 503, 517, 527, 528, 536, 537, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 609, 612, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 694, 695, 704, 706, 756, 788, 800, 802, 804, 805, 808, 810, 812, 814, 821, 822, 825, 826, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 857, 858, 864, 865, 867, 870, 871, 872, 873, 874, 876, 877, 879, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 951, 969, 977, 993, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1025, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "effective_learning_r": [864, 865], "effective_metric_": [849, 850, 851, 853, 855, 857, 858, 859, 1007], "effective_metric_params_": [849, 850, 851, 853, 855, 857, 858, 859], "effective_rank": [524, 527], "efficaci": 202, "effici": [37, 43, 44, 51, 53, 77, 80, 86, 88, 120, 135, 140, 144, 152, 191, 202, 206, 215, 221, 296, 328, 352, 365, 370, 372, 378, 380, 381, 382, 383, 384, 390, 392, 404, 407, 410, 415, 416, 417, 420, 422, 444, 445, 448, 449, 451, 452, 454, 456, 459, 461, 463, 464, 499, 536, 537, 538, 541, 543, 544, 547, 566, 569, 577, 584, 585, 591, 592, 594, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 635, 636, 637, 641, 643, 658, 661, 662, 667, 669, 670, 671, 676, 678, 679, 680, 681, 682, 688, 689, 691, 729, 759, 766, 782, 783, 800, 801, 803, 817, 836, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 872, 884, 896, 900, 907, 916, 918, 951, 993, 996, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "efficiencywarn": [2, 862, 1050], "effort": [322, 378, 384, 1023, 1028, 1046, 1048], "efron": [168, 375, 685, 686, 1000], "eg": 987, "egashira": 1050, "egehan": 1053, "egg": 1043, "egger": 1053, "egin": 410, "egli": [1042, 1052], "egor": 1047, "ehrenheim": [1042, 1043], "eib": [838, 1005], "eickenberg": [1035, 1037, 1038, 1039, 1040], "eig": 1042, "eig_tol": 1036, "eig_val": 256, "eig_vec": 256, "eigen": [454, 552, 676, 694, 698, 998, 1041, 1044], "eigen_solv": [51, 79, 80, 99, 233, 234, 415, 454, 464, 538, 691, 692, 694, 696, 698, 1001, 1036, 1045, 1048, 1049, 1050], "eigen_tol": [80, 454, 464, 694, 698, 1036, 1049, 1050], "eigendecompos": 415, "eigendecomposit": [464, 676, 694, 698, 873, 996], "eigenfac": [42, 54, 183, 249, 373, 415, 497, 544, 700, 716, 817, 833, 887, 912, 1021, 1025, 1035], "eigenface_titl": 45, "eigenmap": [233, 692, 694, 696, 698, 1029, 1030, 1036], "eigensolv": [415, 454, 464, 538, 547, 698, 1001], "eigenvalu": [261, 327, 407, 410, 412, 454, 464, 471, 472, 473, 474, 475, 476, 477, 478, 538, 544, 552, 676, 691, 692, 694, 696, 698, 873, 996, 1001, 1014, 1037, 1041, 1044, 1045, 1046, 1047], "eigenvalues_": [538, 1048], "eigenvector": [2, 42, 80, 116, 126, 183, 256, 410, 454, 464, 537, 538, 544, 553, 691, 692, 694, 698, 951, 1001, 1025, 1035, 1039, 1049], "eigenvector_centr": 55, "eigenvectors_": [538, 1048], "eigh": [70, 256, 257, 258, 261, 262, 415, 422, 536, 538, 1050, 1053], "eighteenth": 410, "eighth": [566, 1010], "eigsh": [415, 538, 1041, 1042], "eiler": 1014, "einsum": 301, "eitan": 1052, "either": [43, 49, 64, 103, 140, 142, 143, 186, 200, 203, 241, 250, 265, 266, 275, 280, 285, 296, 348, 352, 360, 365, 366, 370, 373, 376, 378, 379, 380, 392, 401, 404, 408, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 444, 449, 454, 489, 499, 515, 527, 536, 537, 539, 547, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 585, 586, 587, 591, 592, 593, 594, 596, 597, 600, 605, 610, 611, 613, 614, 625, 630, 633, 635, 636, 653, 657, 659, 667, 679, 681, 685, 686, 693, 700, 701, 705, 709, 710, 715, 723, 727, 729, 730, 731, 732, 733, 738, 741, 742, 743, 755, 759, 772, 777, 781, 785, 786, 787, 788, 790, 791, 792, 797, 803, 806, 807, 809, 817, 826, 827, 828, 829, 830, 831, 832, 834, 837, 867, 897, 898, 904, 907, 908, 915, 916, 917, 918, 922, 960, 964, 992, 993, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1018, 1019, 1035, 1038, 1044, 1045, 1046, 1049, 1053], "ekaterina": [1041, 1042, 1043, 1044, 1046, 1051], "ekman": [1037, 1041], "el": [531, 1048, 1050, 1051], "elabonga": [1051, 1052], "elabor": 1005, "elad": [667, 688, 689], "elaps": [50, 81, 100, 140, 141, 365, 466, 469, 572, 573, 866, 867, 868, 869], "elapsed_tim": [46, 74, 100, 141, 154, 230], "elast": [2, 25, 183, 192, 198, 199, 202, 204, 207, 224, 247, 284, 473, 474, 480, 504, 527, 649, 650, 655, 660, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 685, 687, 993, 1004, 1018, 1025, 1026, 1030, 1035, 1040, 1044, 1045], "elastic_net": 224, "elastic_net_color": 224, "elastic_net_contour": 224, "elasticnet": [2, 46, 49, 195, 204, 279, 284, 365, 384, 390, 415, 650, 655, 660, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 1000, 1005, 1018, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1053], "elasticnetcv": [2, 198, 392, 401, 649, 655, 663, 664, 665, 666, 684, 1000, 1035, 1038, 1046, 1048, 1049, 1052, 1053], "elasticnetifittedelasticnet": 195, "elbo": 415, "eldar": [412, 423, 477], "eleanor": 1050, "elec2": 149, "electr": [51, 149, 375, 410], "electron": [57, 168, 373, 375, 541, 543, 550, 630], "element": [2, 87, 120, 137, 138, 148, 242, 264, 270, 278, 280, 321, 353, 356, 360, 375, 377, 378, 380, 387, 393, 407, 410, 414, 415, 417, 418, 421, 446, 448, 454, 466, 489, 511, 515, 517, 523, 525, 529, 530, 534, 540, 541, 543, 553, 560, 561, 562, 563, 567, 568, 569, 570, 571, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 620, 635, 661, 662, 669, 670, 671, 679, 680, 681, 710, 720, 730, 737, 739, 749, 766, 772, 781, 785, 791, 792, 837, 847, 848, 849, 850, 851, 853, 855, 857, 858, 862, 864, 865, 870, 886, 887, 890, 894, 907, 912, 915, 916, 917, 918, 953, 954, 955, 974, 976, 977, 989, 998, 1000, 1004, 1005, 1008, 1011, 1014, 1015, 1016, 1020, 1028, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1051], "elementari": [901, 1016], "elementwis": [415, 541, 543, 550], "elena": 1042, "eleni": 1048, "eleph": 585, "elev": [100, 126, 187, 210, 233, 237, 493], "eleven": 1024, "elfner": 1049, "elia": 1041, "eliaschiavon": 1050, "eliasi": [1050, 1051, 1052], "elicit": 1004, "elif": [46, 47, 194, 215, 248, 258, 296, 883], "elimin": [2, 18, 159, 162, 165, 168, 183, 266, 269, 270, 276, 285, 295, 410, 414, 450, 505, 518, 596, 597, 600, 605, 661, 806, 807, 822, 867, 877, 989, 1004, 1025, 1026, 1028, 1030, 1035], "elisabeth": [325, 1052], "elizabeth": [1042, 1044, 1047], "elkan": [64, 265, 321, 408, 439, 445, 449, 461, 679, 1041, 1045, 1046, 1048, 1049], "ell": [70, 256, 257, 258, 262, 407], "ell_": 1000, "ell_0": [1000, 1004], "ell_1": [415, 1000], "ell_2": 1000, "ella": 1016, "ellen": 1042, "elli": [1041, 1044], "elliot": [1052, 1053], "elliott": 1042, "ellips": [70, 240, 256, 257, 258, 261, 262, 1010], "ellipsoid": [48, 65, 69, 111, 112, 113, 183, 255, 256, 258, 259, 260, 261, 262, 552, 553, 634, 800, 801, 998, 1003, 1025], "ellipt": [90, 1000], "ellipticenvelop": [2, 48, 240, 472, 475, 476, 477, 478, 566, 1010, 1035, 1038, 1042, 1043, 1048], "eln": 1046, "elong": 410, "els": [2, 43, 47, 50, 51, 52, 57, 70, 76, 79, 82, 88, 89, 95, 113, 124, 137, 142, 143, 146, 147, 178, 186, 187, 189, 202, 205, 228, 231, 234, 240, 244, 246, 247, 248, 249, 250, 266, 271, 272, 275, 282, 291, 296, 304, 306, 307, 313, 320, 345, 352, 353, 360, 378, 382, 384, 417, 418, 420, 422, 430, 439, 451, 511, 523, 536, 572, 621, 628, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 675, 676, 677, 679, 682, 684, 685, 686, 687, 706, 712, 791, 797, 799, 806, 807, 833, 871, 883, 886, 894, 907, 908, 922, 965, 967, 969, 990, 992, 1020], "elsewher": [392, 464, 465, 473, 474, 480], "eltermann": 1038, "elucid": 996, "elvezio": [652, 1000], "elvi": [1040, 1041, 1042], "em": [257, 258, 262, 445, 449, 461, 539, 800, 801, 1003, 1049], "emad": 1053, "email": [0, 352, 378, 390, 393, 418, 842, 1006, 1028], "emami": 1049, "emanuel": 1036, "emb": [170, 234, 244, 300, 371, 372, 464, 698, 1001], "embark": [103, 188, 254, 320, 324, 325], "embed": [2, 26, 37, 71, 74, 79, 80, 89, 95, 139, 170, 183, 232, 235, 237, 239, 291, 300, 330, 331, 392, 410, 443, 454, 464, 491, 505, 547, 552, 569, 585, 642, 691, 692, 693, 694, 695, 696, 697, 698, 699, 856, 868, 877, 899, 900, 901, 996, 1007, 1010, 1016, 1021, 1023, 1025, 1029, 1030, 1035, 1036, 1046, 1047, 1049], "embedding_": [236, 392, 691, 692, 693, 694, 695], "emerg": [410, 1028], "emeritu": 393, "emiko": 1049, "emil": 1049, "emili": [1046, 1047], "emilyxinyi": 1053, "emipr": 800, "emir": [1050, 1051], "emit": [1046, 1053], "emlearn": 1023, "emma": 1052, "emmanouil": 1049, "emmanuel": [1035, 1042, 1043, 1044, 1052], "emoji": 398, "emp_cov": [109, 111, 113, 480, 483], "emp_cov_contour": 111, "emp_mah": 111, "emphas": [186, 350, 384, 415, 1004], "emphasi": [350, 409, 413, 909, 910, 911, 912, 913, 1011, 1023], "empir": [2, 48, 52, 61, 62, 70, 71, 77, 78, 97, 108, 110, 111, 113, 149, 183, 194, 231, 277, 311, 408, 414, 417, 420, 449, 451, 462, 471, 472, 473, 476, 479, 480, 535, 537, 542, 544, 546, 552, 554, 568, 593, 606, 642, 652, 670, 674, 681, 682, 719, 724, 726, 727, 832, 842, 843, 844, 846, 865, 888, 936, 977, 996, 998, 1004, 1006, 1008, 1014, 1016, 1018, 1025, 1029, 1030], "empirical_covari": [2, 109, 412, 480, 481, 483, 1051], "empiricalcovari": [2, 109, 111, 112, 412, 471, 475, 476, 477, 478, 1010], "emploi": [0, 51, 170, 246, 392, 412, 418, 452, 480, 585, 592, 1028, 1041], "employ": [186, 265], "empti": [94, 102, 129, 225, 333, 365, 373, 382, 410, 422, 430, 485, 536, 564, 565, 634, 719, 814, 872, 912, 914, 922, 928, 933, 934, 941, 962, 963, 994, 1019, 1037, 1039, 1043, 1044, 1046, 1047, 1049, 1050, 1051], "emptyset": 1004, "emul": [186, 386], "en": [55, 61, 386, 534, 540, 598, 639, 667, 671, 674, 688, 689, 698, 708, 849, 850, 855, 856, 857, 858, 885, 901, 915, 916, 1000, 1004, 1019, 1020], "enabl": [2, 16, 52, 66, 83, 104, 149, 187, 221, 235, 247, 313, 321, 323, 324, 326, 327, 328, 349, 376, 378, 383, 386, 390, 392, 396, 401, 406, 410, 411, 415, 417, 418, 451, 466, 470, 537, 538, 544, 562, 563, 564, 565, 566, 582, 583, 593, 594, 605, 613, 800, 801, 803, 806, 828, 829, 830, 831, 832, 834, 867, 868, 880, 881, 904, 905, 907, 908, 909, 910, 911, 912, 913, 922, 963, 970, 994, 996, 1001, 1003, 1004, 1007, 1014, 1015, 1018, 1019, 1024, 1028, 1035, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "enable_cython_pairwise_dist": [470, 905], "enable_halving_search_cv": [2, 146, 282, 283, 322, 382, 806, 807, 993], "enable_hist_gradient_boost": [382, 1044], "enable_iterative_imput": [2, 181, 182, 382, 630, 994, 1044], "enable_metadata_rout": [247, 265, 327, 401, 439, 445, 446, 449, 451, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 596, 597, 600, 605, 613, 614, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 866, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1051], "enable_my_experimental_featur": 382, "enblom": 1053, "enc": [312, 314, 324, 326, 880, 881, 1014], "enc_auto": 888, "enc_high_smooth": 888, "enc_low_smooth": 888, "encapsul": [385, 411, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918], "enclos": 993, "encod": [2, 43, 47, 50, 88, 103, 120, 139, 149, 154, 183, 186, 187, 188, 212, 213, 250, 265, 280, 285, 310, 312, 313, 314, 322, 324, 325, 341, 352, 354, 370, 372, 374, 383, 390, 392, 411, 414, 415, 417, 418, 420, 466, 489, 499, 506, 529, 534, 540, 542, 543, 545, 547, 548, 549, 551, 554, 564, 565, 569, 570, 572, 584, 591, 592, 594, 633, 651, 661, 662, 672, 675, 683, 738, 805, 810, 812, 830, 833, 867, 868, 870, 872, 874, 875, 878, 880, 881, 888, 891, 905, 924, 993, 994, 1000, 1001, 1004, 1006, 1007, 1009, 1018, 1023, 1024, 1025, 1030, 1036, 1037, 1043, 1047, 1049, 1050, 1051, 1052, 1053], "encoded_missing_valu": [154, 188, 881, 1014, 1049, 1050], "encodings_": [326, 888, 1014], "encompass": [392, 452, 458, 558, 559, 1001], "encount": [366, 376, 396, 404, 410, 417, 418, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 564, 565, 584, 842, 843, 844, 846, 880, 978, 1014, 1018, 1023, 1027, 1028, 1043, 1046], "encourag": [186, 201, 217, 306, 341, 377, 378, 390, 1019, 1023, 1053], "encrypt": 1023, "encyclopedia": 1004, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 376, 378, 380, 390, 392, 393, 396, 401, 407, 410, 411, 413, 417, 452, 458, 470, 490, 491, 511, 512, 540, 549, 560, 561, 562, 563, 567, 568, 569, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 684, 685, 686, 687, 803, 806, 807, 817, 824, 828, 865, 867, 905, 915, 916, 917, 918, 955, 957, 987, 993, 996, 1000, 1001, 1003, 1004, 1014, 1016, 1018, 1023, 1028, 1040, 1042, 1045, 1048, 1049], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 236], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1047, "endo": 1048, "endpoint": [53, 312, 344, 638], "enemi": 378, "energi": [51, 149, 386, 863, 1009], "enet": [198, 284], "enet_path": [2, 201, 392, 649, 650, 655, 663, 664, 665, 1037, 1039, 1048], "enet_tol": [473, 474, 480, 1040], "enforc": [43, 51, 70, 86, 120, 149, 175, 207, 300, 365, 378, 412, 415, 417, 427, 433, 511, 530, 534, 540, 542, 545, 546, 548, 549, 551, 560, 561, 564, 565, 567, 568, 871, 886, 915, 916, 917, 918, 933, 934, 994, 1001, 1037, 1043, 1045, 1047, 1051], "enforce_estimator_tags_i": 1045, "eng": 1043, "engag": [384, 393], "engemann": [1037, 1038, 1042], "engin": [42, 75, 139, 143, 149, 175, 183, 187, 214, 365, 372, 375, 410, 416, 418, 466, 499, 565, 642, 676, 704, 824, 830, 865, 866, 868, 871, 872, 877, 880, 882, 886, 994, 996, 1004, 1014, 1025, 1041], "english": [54, 57, 102, 352, 353, 354, 383, 418, 591, 592, 594, 1023, 1024, 1048], "enh": 382, "enhanc": [120, 217, 377, 378, 382, 390, 392, 410, 1004, 1033, 1034, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "enjoi": [77, 265], "enough": [2, 43, 52, 64, 72, 79, 95, 140, 142, 149, 170, 181, 187, 188, 202, 213, 245, 248, 250, 265, 284, 315, 352, 354, 361, 376, 378, 382, 393, 408, 410, 412, 414, 417, 570, 571, 592, 803, 806, 807, 809, 817, 831, 951, 993, 998, 1001, 1003, 1010, 1014, 1019, 1023, 1028, 1041, 1051, 1052], "enrich": 345, "ensembl": [2, 43, 46, 49, 52, 63, 64, 67, 89, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 181, 182, 187, 188, 189, 213, 234, 240, 249, 250, 252, 253, 265, 268, 283, 288, 290, 313, 317, 320, 321, 322, 323, 324, 325, 326, 327, 352, 357, 358, 361, 365, 382, 383, 391, 392, 401, 404, 408, 410, 414, 419, 439, 507, 518, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 635, 636, 638, 661, 705, 806, 807, 825, 833, 837, 838, 868, 871, 880, 911, 915, 917, 918, 943, 993, 1004, 1005, 1010, 1011, 1020, 1023, 1024, 1025, 1026, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "ensemble_clf": 138, "ensemble_jaccard_scor": 290, "ensembleregressorsensembl": 398, "ensur": [0, 52, 58, 76, 90, 113, 118, 134, 140, 141, 149, 189, 213, 234, 265, 266, 274, 308, 360, 361, 365, 366, 378, 380, 382, 383, 384, 393, 396, 401, 406, 408, 410, 411, 414, 422, 471, 536, 537, 544, 614, 630, 699, 708, 785, 791, 792, 828, 900, 933, 934, 945, 946, 951, 958, 969, 1000, 1001, 1004, 1014, 1020, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "ensure_2d": [933, 934], "ensure_all_finit": [781, 931, 933, 934], "ensure_min_featur": [933, 934], "ensure_min_sampl": [933, 934], "ensure_non_neg": 934, "entail": [265, 391, 885, 887, 1018], "enter": [379, 382, 410, 444, 1011], "entertain": 1000, "entic": 186, "entir": [68, 181, 213, 221, 265, 309, 311, 321, 345, 360, 361, 372, 379, 392, 404, 410, 414, 416, 418, 474, 495, 537, 591, 592, 593, 594, 650, 654, 656, 658, 661, 662, 664, 666, 668, 669, 671, 679, 685, 686, 737, 799, 825, 835, 836, 839, 864, 866, 867, 880, 892, 893, 895, 896, 897, 898, 926, 972, 994, 1004, 1014, 1018, 1020, 1044, 1045], "entireti": 392, "entiti": [393, 729, 759], "entitl": [285, 294, 409, 449, 614, 849, 996], "entri": [0, 103, 107, 149, 154, 182, 186, 187, 265, 267, 320, 353, 361, 382, 384, 386, 391, 392, 407, 408, 410, 415, 417, 420, 465, 466, 469, 474, 499, 534, 535, 540, 548, 549, 564, 565, 591, 594, 597, 614, 623, 635, 641, 643, 650, 654, 656, 658, 659, 662, 664, 666, 667, 668, 676, 678, 685, 686, 688, 689, 702, 707, 710, 712, 715, 718, 719, 721, 729, 732, 733, 734, 737, 738, 741, 746, 759, 761, 762, 786, 788, 791, 792, 795, 796, 816, 831, 847, 848, 855, 856, 857, 858, 859, 878, 884, 896, 989, 993, 994, 1000, 1004, 1007, 1014, 1019, 1024, 1042, 1045, 1046, 1048, 1052], "entropi": [2, 50, 64, 252, 283, 304, 322, 330, 331, 361, 373, 406, 410, 417, 422, 501, 536, 560, 567, 610, 611, 661, 720, 739, 740, 744, 798, 915, 917, 1000, 1001, 1004, 1008, 1020, 1037, 1039, 1043, 1044, 1049, 1051, 1052], "entrypoint_to_bug_reproduc": 379, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 83, 88, 92, 93, 94, 95, 98, 102, 110, 112, 113, 116, 121, 123, 129, 137, 140, 144, 145, 147, 148, 149, 159, 172, 174, 179, 189, 194, 196, 204, 213, 234, 235, 238, 240, 245, 249, 250, 256, 257, 258, 259, 261, 262, 265, 266, 273, 274, 280, 281, 296, 300, 301, 303, 309, 313, 314, 330, 331, 333, 335, 339, 341, 347, 348, 352, 357, 373, 374, 562, 563, 567, 568, 784, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "env": [376, 386, 396, 397], "environ": [0, 3, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 325, 327, 332, 360, 365, 373, 375, 376, 378, 380, 381, 384, 390, 396, 397, 406, 411, 502, 1024, 1028, 1030, 1042, 1043, 1052], "environment": [50, 198, 231], "environmenterror": 1051, "eom": 448, "eoss": 0, "ep": [67, 79, 80, 82, 88, 98, 197, 201, 236, 244, 390, 410, 421, 446, 452, 457, 473, 474, 480, 634, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 684, 685, 686, 687, 693, 697, 717, 744, 859, 899, 900, 901, 1016, 1050, 1051], "epanechnikov": [296, 416, 847, 848, 852], "ephemer": 386, "ephrem": 1050, "epimorph": 1052, "epistem": 52, "epoch": [228, 392, 539, 669, 670, 671, 679, 680, 681, 864, 865, 1018, 1042, 1043, 1048], "epp": [410, 707], "eps_": [663, 665], "eps_rang": 244, "epsilon": [2, 88, 98, 196, 236, 246, 326, 347, 415, 448, 457, 646, 652, 670, 679, 681, 749, 864, 865, 908, 910, 913, 997, 1000, 1004, 1008, 1018, 1019, 1035], "epsilon_": 845, "epsilon_i": 1004, "epsilon_insensit": [670, 679, 681, 908, 1000, 1018], "epsilon_valu": 196, "eq": [265, 423, 477, 724, 726, 727], "equal": [43, 50, 51, 63, 70, 72, 74, 86, 93, 111, 116, 122, 134, 146, 173, 186, 214, 215, 224, 230, 251, 258, 261, 264, 269, 271, 280, 301, 313, 317, 341, 343, 349, 353, 373, 374, 378, 380, 392, 407, 408, 410, 414, 415, 417, 418, 423, 439, 442, 443, 444, 445, 447, 449, 451, 456, 461, 462, 465, 471, 476, 481, 482, 506, 515, 518, 522, 535, 536, 537, 542, 544, 546, 547, 552, 553, 554, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 591, 596, 597, 600, 602, 603, 610, 611, 628, 631, 632, 635, 636, 637, 638, 640, 644, 645, 652, 661, 662, 674, 702, 721, 723, 732, 786, 790, 791, 797, 799, 803, 804, 806, 807, 816, 817, 821, 828, 835, 839, 840, 847, 848, 849, 850, 855, 856, 857, 858, 859, 864, 865, 870, 871, 872, 879, 882, 885, 886, 887, 888, 890, 897, 904, 907, 908, 914, 915, 916, 917, 918, 939, 951, 978, 984, 998, 1000, 1004, 1005, 1007, 1008, 1010, 1014, 1018, 1019, 1020, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "equat": [2, 64, 348, 378, 410, 415, 417, 560, 561, 562, 563, 567, 568, 569, 593, 630, 661, 662, 685, 686, 690, 766, 887, 915, 916, 917, 918, 994, 1001, 1004, 1009, 1043], "equi": 1003, "equiangular": 1000, "equidist": [143, 695], "equip": 1028, "equiv": [996, 1019], "equival": [43, 54, 70, 88, 90, 143, 150, 167, 170, 175, 186, 198, 231, 261, 280, 291, 316, 345, 354, 361, 365, 384, 387, 391, 392, 404, 410, 411, 412, 413, 414, 415, 417, 419, 420, 443, 445, 446, 447, 448, 449, 451, 452, 459, 466, 471, 476, 512, 537, 544, 561, 564, 565, 566, 567, 568, 591, 594, 616, 619, 622, 624, 627, 649, 650, 651, 655, 657, 661, 662, 669, 670, 671, 672, 675, 679, 680, 683, 686, 690, 691, 696, 711, 712, 726, 737, 745, 750, 751, 752, 764, 773, 782, 783, 800, 801, 806, 807, 811, 813, 838, 841, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 870, 876, 877, 879, 882, 883, 884, 885, 887, 895, 897, 898, 937, 949, 989, 993, 998, 1000, 1001, 1002, 1004, 1010, 1014, 1018, 1019, 1020, 1043, 1044, 1045, 1046, 1048, 1049, 1052], "er": 573, "era": 1024, "eras": [562, 563, 649, 655, 661, 663, 665, 669, 670, 671, 679, 680, 681, 864, 865], "ereg": [157, 417], "eren": [0, 1037, 1038], "eric": [1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "ericellwang": [1048, 1049], "erich": [452, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1053], "erick": 1040, "erik": [373, 1028, 1038], "eriksson": 1042, "erin": [288, 1047], "erl": 288, "erlbaum": 265, "erling": 1040, "ermolaevpa": [1049, 1050], "ernst": [417, 560, 561, 568, 569, 917, 918], "err": [55, 115, 124, 134], "err_cov_emp_ful": 112, "err_cov_emp_pur": 112, "err_cov_mcd": 112, "err_loc_emp_ful": 112, "err_loc_emp_pur": 112, "err_loc_mcd": 112, "errno": 396, "erron": [111, 112, 415, 1000, 1036, 1043, 1047], "error": [2, 15, 25, 30, 43, 44, 46, 52, 53, 55, 64, 107, 109, 110, 112, 124, 129, 133, 137, 140, 141, 143, 145, 147, 149, 168, 170, 181, 183, 185, 186, 198, 202, 206, 208, 209, 213, 215, 218, 219, 220, 227, 231, 243, 246, 247, 253, 262, 263, 265, 267, 271, 272, 276, 280, 281, 286, 288, 297, 298, 324, 327, 340, 348, 352, 353, 366, 375, 376, 378, 380, 381, 382, 383, 387, 390, 392, 401, 404, 408, 410, 411, 412, 414, 415, 417, 418, 419, 439, 445, 446, 449, 451, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 506, 518, 527, 534, 536, 537, 540, 545, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 578, 584, 585, 591, 593, 594, 595, 598, 599, 601, 602, 603, 609, 613, 614, 632, 635, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 691, 692, 693, 695, 696, 699, 701, 704, 705, 712, 714, 715, 723, 724, 726, 730, 743, 746, 747, 748, 749, 750, 751, 753, 754, 756, 767, 781, 785, 791, 792, 793, 794, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 825, 826, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 857, 858, 859, 862, 864, 865, 866, 867, 868, 870, 872, 873, 874, 879, 880, 881, 886, 887, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 931, 932, 933, 934, 937, 966, 987, 990, 992, 993, 994, 995, 997, 998, 999, 1001, 1005, 1008, 1012, 1014, 1018, 1019, 1020, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "error_": [534, 546], "error_i": [140, 272], "error_norm": [110, 112, 471, 472, 473, 474, 475, 476, 477, 478], "error_on_new": 632, "error_r": 138, "error_scor": [803, 806, 807, 809, 817, 826, 829, 830, 831, 834, 993, 1039, 1043, 1047, 1050], "error_x": [140, 272], "errorbar": [72, 94, 105, 110, 112, 167, 176, 177, 293, 333, 344, 809, 826], "errorbar_": [809, 826], "errorbar_kw": [809, 826], "errorbarcontain": [809, 826], "errors_coef": 217, "errors_lines_": 704, "erwan": 1052, "erwin": 1038, "escal": 393, "escalant": 1004, "escalera": 1004, "escap": [1048, 1050], "eschibli": 1047, "eschlbeck": 1049, "esdi": 57, "esp": [410, 1035], "especi": [43, 47, 52, 88, 89, 143, 146, 149, 186, 213, 247, 317, 325, 353, 361, 366, 372, 378, 386, 390, 392, 408, 410, 418, 445, 451, 504, 541, 560, 561, 562, 563, 567, 568, 569, 649, 650, 651, 653, 655, 656, 657, 661, 662, 663, 664, 665, 666, 672, 683, 698, 708, 749, 842, 843, 844, 845, 846, 915, 916, 917, 918, 1000, 1006, 1007, 1014, 1028, 1038, 1043, 1047, 1048, 1049], "espinoza": [1036, 1037], "essenc": [610, 611, 746, 1001, 1004], "essenti": [0, 271, 325, 376, 380, 410, 414, 415, 512, 1004, 1007, 1024, 1028, 1043], "est": [154, 186, 205, 228, 247, 249, 265, 285, 313, 322, 361, 404, 417, 565, 738, 872, 956, 993, 1004, 1014, 1018, 1046, 1047], "est1": [392, 635], "est2": [392, 635], "est_freq": 231, "est_idx": 313, "est_sev": 231, "establish": [386, 390, 393, 994], "estefania": 1049, "ester": [410, 421, 446], "estev": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 82, 87, 88, 89, 90, 91, 94, 96, 103, 104, 105, 106, 115, 116, 120, 121, 122, 127, 129, 133, 134, 138, 139, 140, 141, 142, 144, 146, 148, 149, 151, 154, 155, 156, 157, 166, 167, 168, 169, 170, 171, 173, 175, 177, 179, 180, 181, 185, 186, 192, 195, 198, 200, 202, 203, 208, 213, 215, 217, 218, 220, 221, 230, 231, 239, 240, 241, 246, 252, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 298, 302, 311, 313, 323, 324, 326, 328, 344, 345, 348, 353, 354, 357, 359, 365, 366, 367, 370, 376, 378, 381, 382, 385, 386, 387, 388, 396, 401, 404, 405, 408, 409, 410, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 493, 495, 498, 499, 501, 504, 505, 527, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 578, 579, 580, 582, 583, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 690, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 710, 711, 714, 715, 716, 719, 721, 723, 724, 726, 727, 729, 730, 731, 732, 733, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 819, 821, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 896, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 923, 924, 925, 926, 927, 932, 933, 934, 936, 938, 939, 940, 943, 945, 946, 947, 956, 959, 960, 961, 963, 987, 991, 992, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "estimate_bandwidth": [2, 79, 96, 410, 450, 463], "estimated_coef": [649, 650, 655, 663, 664, 665, 684, 685, 686], "estimator_": [216, 247, 285, 430, 556, 557, 558, 559, 560, 561, 566, 567, 568, 569, 596, 597, 600, 674, 802, 825, 904, 987, 1050], "estimator__alpha": 146, "estimator__max_depth": [392, 993], "estimator_alpha": 142, "estimator_check": [2, 320, 380, 392, 945, 946, 1042, 1043, 1045, 1046, 1049, 1050, 1051, 1053], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 221, "estimator_errors_": [134, 556, 557], "estimator_html_repr": [2, 380, 411, 1046, 1047, 1048, 1049, 1052], "estimator_modul": 380, "estimator_nam": [49, 221, 380, 385, 440, 579, 701, 703, 705, 932], "estimator_samples_": 1046, "estimator_weights_": [134, 556, 557], "estimatorcv": [392, 1024], "estimators_": [141, 142, 205, 228, 248, 320, 392, 417, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 835, 836, 837, 838, 839, 840, 841, 1036, 1042, 1049], "estimators_early_stop": 144, "estimators_features_": [558, 559, 566], "estimators_samples_": [558, 559, 560, 561, 566, 567, 568, 569, 1041, 1043, 1046, 1052], "est\u00e8v": [0, 399, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "est\u00e8vc": 1053, "esuli": [1042, 1047], "esvhd": 1044, "et": [0, 2, 50, 109, 110, 134, 148, 200, 304, 373, 375, 407, 410, 412, 415, 417, 418, 419, 453, 501, 522, 523, 531, 538, 544, 547, 566, 685, 686, 722, 723, 842, 844, 864, 865, 900, 950, 951, 1000, 1001, 1004, 1010, 1014, 1016, 1019, 1020, 1043, 1051], "eta": [415, 539, 679, 680, 681, 1008, 1018, 1040], "eta0": [671, 679, 680, 681, 1018], "eta_0": 1018, "etc": [2, 143, 213, 231, 266, 275, 276, 328, 361, 365, 367, 378, 380, 383, 390, 391, 392, 401, 404, 407, 411, 414, 418, 491, 506, 530, 560, 561, 567, 568, 671, 679, 695, 721, 774, 803, 817, 838, 841, 871, 882, 915, 916, 917, 918, 919, 921, 933, 934, 945, 993, 994, 998, 1004, 1007, 1023, 1024, 1028, 1035, 1042, 1044, 1045], "eth": 1045, "ethan": [1038, 1041], "ethic": 149, "etiquett": 378, "etl": [1024, 1028], "euclidean": [2, 37, 75, 90, 91, 199, 244, 250, 291, 294, 299, 320, 325, 345, 353, 407, 410, 415, 416, 417, 418, 420, 442, 443, 446, 447, 448, 452, 454, 459, 462, 465, 534, 540, 548, 549, 592, 618, 622, 625, 626, 679, 681, 693, 695, 698, 699, 702, 765, 766, 772, 773, 774, 775, 781, 782, 783, 784, 795, 796, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 901, 994, 998, 1002, 1005, 1007, 1016, 1024, 1039, 1042, 1043, 1044, 1045, 1051, 1052], "euclidean_dist": [2, 236, 244, 380, 406, 452, 456, 459, 691, 697, 765, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 1035, 1040, 1043, 1044, 1052], "euclideandist": 702, "eugen": [375, 1036, 1041], "eunji": 1043, "eunseop": 1045, "euro": 328, "europ": [418, 1014], "european": [729, 759, 1004], "eustach": [1028, 1037, 1038], "eval_and_print_metr": 334, "eval_gradi": [178, 420, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "evalml": 1023, "evalu": [2, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 82, 88, 97, 103, 104, 123, 134, 140, 141, 143, 144, 146, 149, 163, 164, 173, 183, 189, 191, 194, 202, 215, 220, 231, 239, 263, 264, 268, 269, 270, 271, 274, 276, 277, 278, 280, 282, 283, 285, 286, 290, 298, 300, 304, 311, 316, 318, 322, 326, 327, 334, 341, 345, 352, 361, 371, 373, 380, 384, 392, 395, 411, 418, 419, 420, 449, 451, 466, 468, 490, 493, 495, 496, 499, 512, 523, 539, 554, 564, 565, 566, 570, 571, 594, 597, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 634, 635, 636, 637, 650, 656, 662, 676, 678, 700, 702, 704, 705, 706, 707, 708, 714, 716, 717, 718, 720, 721, 729, 730, 739, 740, 745, 757, 758, 759, 760, 789, 798, 800, 801, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 833, 834, 838, 844, 847, 848, 853, 865, 867, 868, 874, 877, 880, 881, 885, 886, 887, 892, 893, 895, 896, 897, 898, 909, 912, 915, 936, 945, 977, 996, 1000, 1002, 1006, 1007, 1010, 1011, 1012, 1015, 1018, 1020, 1023, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "evaluate_everi": 539, "evaluate_model_and_stor": 317, "evaluation_std": 353, "evaluations_std": 353, "evelyn": 1053, "even": [37, 43, 52, 53, 64, 75, 77, 85, 107, 116, 123, 140, 146, 176, 186, 187, 188, 202, 213, 214, 221, 231, 237, 238, 246, 247, 257, 277, 288, 311, 313, 315, 316, 335, 348, 352, 353, 354, 361, 367, 373, 377, 378, 379, 380, 382, 383, 386, 390, 392, 404, 408, 410, 411, 412, 414, 415, 417, 418, 420, 443, 445, 447, 448, 449, 450, 451, 461, 463, 535, 538, 560, 561, 562, 563, 567, 568, 585, 592, 597, 630, 631, 633, 642, 661, 662, 698, 703, 708, 715, 746, 764, 770, 777, 781, 784, 789, 791, 830, 867, 868, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 915, 916, 917, 918, 951, 972, 993, 994, 996, 998, 1000, 1003, 1004, 1007, 1009, 1010, 1012, 1014, 1016, 1018, 1019, 1020, 1028, 1042, 1043, 1044, 1047, 1049, 1052], "evenli": [2, 47, 74, 85, 146, 189, 217, 266, 418, 955], "event": [0, 43, 213, 231, 274, 408, 410, 591, 592, 639, 842, 938, 1000, 1005, 1006, 1023, 1028, 1041], "eventu": [7, 259, 410, 419, 596, 1028], "ever": [140, 153, 387, 417, 1028], "everi": [43, 120, 149, 175, 181, 211, 214, 234, 246, 257, 262, 280, 323, 327, 361, 373, 378, 380, 382, 386, 392, 408, 410, 412, 414, 415, 418, 442, 456, 511, 534, 539, 542, 548, 560, 562, 563, 564, 565, 567, 593, 594, 606, 649, 650, 652, 655, 656, 662, 663, 664, 665, 666, 667, 668, 669, 671, 675, 676, 677, 678, 679, 688, 689, 690, 695, 699, 757, 774, 782, 783, 816, 856, 915, 917, 919, 921, 939, 997, 999, 1004, 1005, 1006, 1014, 1020, 1028, 1035, 1039, 1041, 1044, 1048, 1052], "everingham": 1004, "everingham2010": 1004, "everybodi": [372, 378], "everyon": [378, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "everyth": [330, 361, 382, 384, 390, 404, 466, 958, 1023, 1024, 1035], "everywher": 392, "evgeni": 1046, "evid": [277, 352, 386, 410, 414, 415, 417, 647, 800, 1003], "evol": 1004, "evolut": [47, 49, 283, 365, 367], "evolv": [387, 1050], "ex": [102, 376, 379, 396, 1039, 1040], "exact": [44, 46, 113, 125, 140, 175, 217, 245, 265, 291, 327, 361, 365, 366, 372, 378, 380, 386, 387, 390, 391, 392, 410, 417, 419, 435, 484, 485, 486, 490, 499, 537, 538, 544, 564, 565, 641, 645, 649, 695, 803, 817, 828, 829, 830, 909, 912, 993, 996, 1000, 1001, 1010, 1014, 1018, 1019, 1042, 1043, 1045], "exactli": [103, 134, 185, 193, 198, 206, 213, 217, 262, 265, 279, 312, 348, 352, 378, 380, 386, 407, 410, 414, 415, 418, 423, 448, 455, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 518, 529, 593, 594, 618, 679, 681, 706, 708, 766, 804, 821, 828, 996, 1000, 1001, 1002, 1004, 1005, 1020, 1035, 1041, 1042, 1048], "exagger": [74, 186, 695, 1001], "examin": [164, 384, 386, 410, 856], "exampl": [2, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 395, 396, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 425, 426, 428, 429, 431, 432, 435, 436, 437, 438, 441, 458, 459, 461, 463, 465, 473, 480, 482, 483, 487, 488, 489, 496, 500, 506, 508, 509, 510, 511, 512, 519, 520, 521, 531, 532, 534, 548, 549, 550, 551, 558, 575, 576, 580, 586, 588, 589, 595, 598, 599, 601, 604, 606, 612, 615, 619, 623, 624, 627, 629, 632, 639, 640, 641, 645, 653, 654, 657, 663, 664, 666, 670, 678, 686, 688, 689, 690, 697, 698, 699, 702, 711, 713, 714, 717, 718, 719, 723, 724, 726, 727, 728, 729, 731, 733, 734, 736, 739, 742, 743, 746, 747, 750, 754, 757, 759, 761, 762, 763, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 786, 794, 797, 799, 810, 811, 812, 813, 814, 815, 816, 827, 839, 841, 843, 847, 848, 857, 858, 859, 861, 862, 869, 870, 873, 875, 878, 889, 890, 892, 894, 895, 897, 898, 899, 902, 906, 908, 909, 917, 918, 919, 920, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 947, 949, 950, 951, 952, 953, 954, 957, 958, 965, 966, 967, 968, 972, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1030, 1032, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "example_funct": 378, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1035, "example_gaussian_process_plot_gp_regress": 1035, "exampleclassifi": 247, "exampleclassifierexampleclassifi": 247, "exampleestim": 378, "exampleregressor": 247, "examples_pattern": 378, "exampletransform": 247, "exc": [288, 987], "exce": [115, 290, 321, 420, 444, 518, 605, 652, 661, 1044, 1047, 1049], "exceed": [806, 807, 1041], "excel": [152, 372, 378, 417, 693, 697, 1000, 1028], "except": [2, 50, 79, 86, 123, 132, 140, 149, 221, 228, 240, 247, 279, 291, 304, 307, 308, 311, 313, 325, 371, 378, 380, 381, 383, 390, 392, 401, 404, 407, 411, 414, 415, 417, 418, 420, 433, 462, 467, 470, 484, 485, 486, 512, 557, 559, 560, 561, 563, 565, 567, 568, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 614, 630, 633, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 690, 714, 781, 810, 840, 841, 847, 848, 850, 853, 858, 864, 865, 871, 885, 887, 905, 908, 910, 913, 916, 918, 932, 955, 987, 989, 993, 1000, 1004, 1019, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1053], "exception": 231, "excerpt": [45, 1016], "excess": [217, 448, 1014, 1042], "exchang": [404, 1027], "excit": 1042, "exclud": [47, 57, 185, 311, 378, 382, 392, 448, 466, 468, 732, 733, 741, 786, 787, 790, 816, 824, 882, 978, 1004, 1007, 1044, 1051], "exclus": [366, 390, 392, 415, 417, 630, 631, 633, 719, 805, 820, 823, 993, 1000, 1004, 1005, 1028, 1042, 1046], "exec": 390, "execut": [64, 181, 198, 202, 246, 276, 366, 376, 378, 384, 404, 406, 410, 415, 421, 445, 463, 803, 809, 817, 826, 828, 829, 830, 831, 834, 852, 969, 970, 1014, 1017, 1025, 1037, 1040, 1043], "exemplar": [410, 442, 456], "exemplari": [155, 156], "exemplifi": 392, "exercis": [2, 105, 142, 152, 172, 174, 223, 226, 306, 307, 335, 346, 349, 350, 367, 375, 378, 504, 505, 507, 508, 655, 656, 661, 803, 808, 849, 912, 1025, 1038], "exhaust": [2, 168, 272, 320, 321, 322, 323, 324, 325, 326, 327, 328, 365, 375, 383, 391, 405, 410, 417, 803, 806, 807, 817, 897, 898, 900, 1000, 1030], "exhibit": [171, 218, 345, 352, 395, 414, 415, 417, 420, 1012], "exist": [47, 48, 52, 55, 57, 86, 231, 271, 308, 311, 345, 372, 377, 380, 381, 384, 390, 392, 393, 396, 404, 410, 414, 415, 417, 418, 425, 430, 435, 439, 445, 446, 449, 451, 453, 455, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 494, 502, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 588, 591, 592, 593, 594, 600, 606, 613, 614, 635, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 701, 703, 705, 765, 768, 772, 802, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 880, 881, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 987, 996, 1001, 1003, 1004, 1008, 1010, 1011, 1014, 1028, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "exist_ok": 47, "existing_credit": 265, "exit": [104, 291, 382, 386, 470], "exp": [2, 80, 87, 99, 129, 137, 146, 171, 198, 223, 296, 301, 304, 321, 322, 326, 345, 408, 410, 411, 416, 422, 454, 467, 524, 536, 539, 618, 619, 625, 644, 762, 769, 779, 864, 865, 883, 998, 1000, 1002, 1006, 1007, 1008, 1017, 1018, 1019], "exp10": 186, "exp_dirichlet_component_": 539, "exp_dist_embed": 301, "expand": [43, 82, 98, 242, 317, 321, 361, 370, 380, 417, 446, 452, 502, 560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918, 1004, 1036, 1043, 1044, 1051], "expand_frame_repr": 231, "expans": [43, 181, 322, 452, 882, 1044], "expect": [43, 44, 49, 52, 61, 72, 79, 86, 116, 118, 125, 134, 137, 139, 141, 143, 146, 149, 165, 166, 170, 176, 183, 184, 188, 199, 204, 213, 214, 215, 217, 221, 231, 244, 247, 250, 251, 257, 258, 261, 262, 265, 278, 291, 316, 348, 352, 353, 361, 365, 366, 378, 380, 383, 384, 385, 386, 387, 390, 391, 392, 393, 395, 401, 406, 408, 410, 411, 412, 414, 417, 418, 419, 433, 466, 467, 469, 470, 471, 484, 485, 486, 499, 526, 535, 539, 541, 544, 555, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 573, 575, 591, 592, 594, 598, 600, 609, 614, 630, 635, 636, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 678, 681, 682, 698, 707, 708, 719, 738, 791, 797, 802, 803, 817, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 857, 858, 859, 860, 865, 868, 873, 880, 881, 884, 887, 888, 897, 898, 905, 907, 908, 909, 910, 911, 912, 913, 916, 918, 928, 966, 993, 1000, 1003, 1004, 1006, 1010, 1014, 1018, 1019, 1020, 1025, 1027, 1030, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "expected_anomaly_fract": 250, "expected_i": 146, "expected_n_anomali": 250, "expected_ri": 708, "expectedli": 352, "expens": [0, 89, 140, 154, 170, 185, 187, 241, 268, 280, 341, 345, 352, 353, 354, 367, 384, 392, 410, 411, 414, 417, 418, 451, 470, 511, 803, 806, 807, 817, 830, 905, 907, 1001, 1003, 1014, 1019, 1028, 1039], "experi": [30, 134, 173, 177, 185, 186, 187, 188, 191, 215, 265, 288, 316, 348, 353, 354, 366, 372, 378, 381, 393, 414, 518, 731, 788, 1000, 1005, 1016, 1022, 1023, 1028], "experienc": 378, "experiment": [2, 146, 181, 182, 213, 282, 283, 322, 323, 328, 380, 381, 388, 390, 392, 401, 414, 499, 552, 582, 583, 630, 699, 806, 807, 973, 993, 994, 1000, 1003, 1004, 1023, 1024, 1030, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1053], "expert_r": 411, "expertis": [377, 378, 390], "expit": [145, 203, 417, 564, 1000, 1042], "explain": [2, 43, 44, 51, 64, 89, 105, 115, 116, 128, 146, 170, 175, 176, 187, 188, 213, 231, 240, 247, 262, 281, 317, 328, 352, 353, 366, 378, 390, 404, 406, 413, 415, 420, 496, 524, 527, 537, 544, 547, 552, 628, 651, 659, 672, 683, 724, 725, 726, 727, 731, 788, 1000, 1007, 1020, 1022, 1046, 1048, 1049], "explained_vari": [353, 1004], "explained_variance_": [116, 537, 544, 547, 1042], "explained_variance_ratio": 1041, "explained_variance_ratio_": [105, 128, 328, 353, 415, 537, 544, 547, 552, 1038, 1041], "explained_variance_scor": [2, 1004, 1038, 1042, 1049], "explan": [64, 116, 247, 365, 377, 378, 408, 418, 993, 1003, 1005, 1020, 1023, 1028, 1038], "explic": 1016, "explicit": [43, 149, 183, 187, 191, 239, 247, 285, 345, 365, 366, 367, 377, 379, 390, 392, 393, 401, 411, 418, 424, 474, 502, 504, 505, 544, 554, 555, 634, 641, 642, 644, 679, 803, 804, 811, 851, 859, 867, 907, 912, 967, 996, 998, 1000, 1004, 1014, 1020, 1023, 1025, 1035, 1039, 1044, 1045, 1048, 1052], "explicitli": [43, 80, 141, 170, 177, 181, 182, 214, 243, 247, 327, 345, 354, 361, 366, 372, 374, 378, 379, 380, 382, 390, 392, 401, 404, 406, 414, 418, 420, 538, 552, 553, 582, 583, 600, 630, 651, 661, 662, 672, 683, 712, 730, 785, 791, 792, 806, 807, 838, 841, 847, 848, 873, 897, 898, 992, 993, 994, 996, 998, 1000, 1001, 1004, 1006, 1007, 1014, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1053], "explod": 317, "exploit": [62, 290, 404, 1005, 1024, 1038], "exploit_incremental_learn": [809, 831], "explor": [52, 72, 137, 138, 149, 189, 237, 238, 250, 265, 272, 273, 279, 280, 288, 318, 322, 341, 353, 361, 372, 375, 377, 384, 410, 417, 474, 803, 806, 814, 888, 993, 1000, 1001, 1003, 1009, 1011, 1014, 1028, 1041], "exploratori": [186, 1028], "explos": [803, 817, 828, 829, 830], "expm1": 107, "expon": [420, 619, 679, 680, 681, 815, 864, 865, 882, 993], "exponenti": [2, 80, 107, 170, 175, 296, 301, 416, 417, 420, 451, 539, 557, 562, 617, 622, 625, 642, 646, 761, 762, 847, 848, 852, 864, 865, 882, 996, 1000, 1004, 1019, 1042, 1048], "export": [2, 376, 379, 380, 396, 919, 920, 1020, 1023, 1044], "export_graphviz": [2, 1020, 1040, 1042, 1048, 1050, 1051, 1053], "export_text": [2, 1020, 1044, 1051], "expos": [2, 168, 247, 284, 288, 323, 325, 366, 371, 375, 380, 392, 401, 408, 411, 417, 419, 420, 439, 466, 556, 557, 564, 565, 570, 571, 572, 573, 596, 597, 605, 614, 802, 803, 806, 807, 817, 825, 836, 837, 838, 839, 840, 841, 922, 1000, 1004, 1006, 1023, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "exposur": [213, 231, 1000], "express": [43, 46, 51, 52, 134, 140, 170, 175, 186, 271, 272, 317, 322, 338, 345, 354, 372, 373, 378, 379, 384, 390, 404, 410, 415, 416, 417, 418, 452, 458, 459, 591, 592, 594, 719, 791, 803, 809, 817, 826, 828, 829, 830, 831, 834, 854, 996, 1000, 1004, 1008, 1014, 1015, 1020, 1043], "expsinesquar": [2, 170, 175, 179, 420], "exstrac": 1004, "ext": 649, "extend": [31, 52, 88, 89, 100, 132, 214, 260, 265, 278, 341, 375, 376, 390, 392, 408, 410, 415, 417, 501, 634, 661, 723, 824, 836, 839, 840, 872, 874, 891, 907, 908, 911, 922, 996, 1004, 1005, 1019, 1024, 1026, 1030, 1040, 1041, 1042, 1043, 1045, 1050], "extens": [278, 280, 296, 365, 366, 372, 373, 376, 379, 381, 382, 386, 387, 390, 404, 410, 415, 499, 506, 537, 744, 945, 953, 1001, 1003, 1004, 1022, 1023, 1028, 1035, 1041, 1048, 1049, 1051, 1052], "extent": [2, 48, 91, 172, 173, 174, 244, 349, 442, 538, 699, 800, 1004], "extercond": 143, "extern": [159, 170, 265, 367, 371, 375, 378, 380, 383, 390, 392, 407, 410, 418, 419, 420, 596, 613, 614, 720, 740, 798, 1000, 1003, 1004, 1007, 1020, 1024, 1030, 1043, 1047], "exterqu": [143, 154], "extmath": [2, 259, 352, 387, 455, 948, 949, 950, 951, 952, 953, 1035, 1036, 1041, 1042, 1045, 1049, 1050, 1052], "extr": 47, "extra": [2, 80, 142, 149, 249, 291, 327, 354, 376, 377, 379, 392, 404, 417, 418, 440, 445, 449, 461, 466, 535, 560, 561, 569, 593, 594, 703, 704, 705, 828, 851, 917, 918, 941, 1003, 1004, 1007, 1035, 1038, 1040, 1041, 1043, 1048, 1050], "extra_cflag": 384, "extra_tre": [917, 918], "extract": [2, 17, 42, 43, 45, 47, 50, 51, 55, 83, 88, 101, 102, 103, 104, 115, 120, 140, 164, 168, 183, 228, 263, 270, 276, 279, 309, 334, 344, 352, 354, 361, 370, 373, 375, 384, 387, 390, 410, 411, 414, 415, 452, 454, 457, 458, 464, 466, 490, 491, 496, 497, 506, 507, 534, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 549, 550, 586, 587, 591, 592, 594, 596, 597, 600, 602, 634, 721, 791, 803, 817, 844, 866, 867, 912, 924, 951, 960, 967, 993, 1001, 1005, 1009, 1014, 1018, 1023, 1025, 1028, 1030, 1035, 1036, 1044, 1047], "extract_dbscan": 410, "extract_patches_2d": [2, 83, 123, 418, 590, 1043], "extract_scor": 274, "extractal": 47, "extractor": [213, 309, 367, 373, 392, 418, 506, 584, 585, 591, 592, 594, 993, 1035], "extran": 378, "extrapol": [43, 170, 193, 214, 243, 274, 886, 1004, 1014, 1020, 1048, 1050], "extratre": [142, 152, 365, 1038], "extratreeclassifi": [2, 560, 569, 918, 994, 1005, 1020, 1039, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "extratreeregressor": [2, 561, 566, 569, 917, 994, 1005, 1010, 1020, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "extratreesclassifi": [2, 142, 152, 417, 419, 561, 567, 569, 917, 918, 994, 1005, 1038, 1039, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "extratreesregressor": [2, 249, 417, 560, 568, 569, 917, 918, 994, 1005, 1038, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "extrem": [2, 146, 213, 215, 249, 250, 284, 311, 318, 333, 353, 378, 381, 409, 410, 415, 560, 561, 567, 568, 569, 635, 636, 682, 727, 755, 917, 918, 919, 921, 1004, 1006], "extrema": 998, "exxon": 51, "ey": [111, 112, 258, 262, 341, 373, 537, 544, 553], "eyast": 1049, "ezebunandu": 1047, "ezeiza": 767, "ezri": 1048, "f": [0, 2, 43, 44, 46, 50, 51, 52, 54, 55, 57, 58, 63, 66, 68, 72, 78, 81, 82, 85, 86, 88, 91, 97, 100, 103, 107, 116, 123, 134, 137, 140, 141, 143, 144, 146, 149, 154, 155, 160, 162, 164, 167, 168, 170, 176, 177, 179, 183, 185, 186, 187, 188, 189, 191, 198, 199, 202, 204, 213, 214, 215, 217, 223, 227, 231, 234, 244, 246, 247, 250, 254, 261, 265, 269, 271, 272, 273, 274, 277, 278, 280, 281, 283, 284, 285, 291, 294, 306, 307, 308, 313, 316, 317, 320, 322, 324, 326, 327, 328, 330, 331, 340, 345, 348, 352, 353, 354, 361, 373, 378, 379, 380, 384, 386, 390, 404, 408, 411, 415, 417, 418, 419, 420, 489, 511, 512, 534, 535, 540, 541, 569, 584, 585, 586, 590, 595, 598, 599, 601, 602, 603, 607, 608, 609, 610, 611, 612, 620, 630, 635, 638, 661, 699, 716, 726, 729, 732, 733, 759, 786, 787, 790, 791, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 831, 832, 834, 864, 865, 869, 878, 881, 882, 886, 887, 888, 914, 922, 933, 934, 987, 996, 999, 1008, 1011, 1012, 1014, 1018, 1025, 1037, 1043, 1044, 1045, 1047, 1049], "f0_c0": 888, "f0_c1": 888, "f0_c2": 888, "f0e442": 256, "f1": [2, 45, 62, 68, 102, 165, 269, 309, 330, 331, 334, 414, 716, 732, 733, 741, 786, 825, 1004, 1005, 1039, 1051], "f1_c0": 888, "f1_c1": 888, "f1_c2": 888, "f1_macro": [414, 1004, 1039], "f1_micro": [1004, 1039], "f1_sampl": 1004, "f1_score": [2, 62, 278, 334, 373, 409, 741, 1004, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1051, 1052], "f1_weight": [1004, 1039], "f2": [382, 1005], "f2001": 1004, "f2006": 1004, "f3": 1005, "f4": 501, "f401": [100, 126, 187, 210, 233, 235], "f781bf": [75, 79, 95, 96], "f7bd01": 75, "f_": [417, 638, 733, 1004], "f_0": 151, "f_1": [151, 1004], "f_beta": 1004, "f_classif": [2, 164, 165, 344, 419, 595, 598, 599, 601, 602, 603, 607, 609, 612], "f_i": 408, "f_idx": 151, "f_j": [408, 1012], "f_m": 417, "f_n": 278, "f_p": 278, "f_regress": [2, 87, 163, 419, 595, 598, 599, 601, 602, 603, 607, 608, 612, 1038, 1042, 1049, 1052], "f_score": 278, "f_statist": [608, 609], "f_test": 163, "fa": [2, 119, 129, 130, 183, 384, 415, 475, 478, 535, 544, 803, 829, 1025], "fa_estim": 120, "fa_scor": 127, "fab": [1028, 1045, 1046], "fabia": [407, 722], "fabian": [0, 400, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1052], "fabiana": 1046, "fabio": 1041, "fabisch": [0, 400, 1037, 1038, 1039, 1041], "fabrizio": 1050, "face": [2, 42, 44, 54, 71, 84, 86, 119, 123, 125, 127, 129, 183, 191, 239, 244, 371, 378, 382, 410, 415, 417, 451, 474, 496, 497, 498, 524, 535, 536, 540, 542, 543, 544, 546, 561, 587, 660, 676, 700, 716, 817, 833, 850, 887, 912, 936, 1007, 1020, 1021, 1025, 1030, 1035, 1043], "face_id": 249, "facecolor": [51, 63, 70, 93, 120, 136, 161, 178, 233, 248, 271, 298, 313, 339, 342, 345, 346, 347], "faces_cent": 120, "facial": 373, "facil": [1003, 1023], "facilit": [365, 392, 404, 1023, 1024, 1041, 1044], "fact": [43, 50, 57, 62, 112, 116, 134, 144, 146, 188, 244, 254, 288, 290, 352, 372, 385, 390, 392, 406, 413, 415, 416, 417, 418, 652, 671, 673, 707, 998, 1000, 1007, 1014, 1018, 1019, 1024, 1028, 1049], "facto": 1045, "factor": [2, 11, 42, 45, 48, 63, 67, 79, 80, 86, 88, 95, 115, 119, 125, 129, 152, 183, 186, 227, 238, 240, 250, 265, 282, 283, 291, 292, 306, 307, 311, 313, 322, 324, 340, 365, 366, 374, 378, 384, 387, 392, 407, 410, 417, 418, 420, 442, 444, 456, 471, 473, 474, 475, 476, 478, 480, 490, 507, 517, 518, 530, 535, 538, 539, 541, 543, 544, 547, 548, 549, 550, 552, 553, 564, 565, 566, 591, 594, 600, 616, 652, 653, 654, 657, 658, 659, 685, 686, 695, 722, 786, 803, 806, 807, 829, 853, 887, 901, 903, 911, 950, 951, 993, 1000, 1001, 1007, 1014, 1017, 1021, 1025, 1029, 1030, 1035, 1036, 1038, 1039, 1041, 1049, 1051], "factoranalysi": [2, 120, 127, 130, 415, 547, 1036, 1038, 1047, 1049], "factori": [2, 94, 265, 271, 418, 926, 928, 973, 1004], "facundo": [1046, 1049], "fagan": 1044, "fail": [43, 87, 99, 121, 127, 178, 193, 198, 217, 247, 271, 320, 366, 376, 378, 381, 386, 393, 396, 413, 414, 442, 474, 476, 679, 680, 681, 714, 864, 865, 923, 925, 932, 945, 993, 1001, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "failur": [183, 184, 186, 208, 378, 386, 396, 660, 788, 833, 933, 934, 1025, 1027, 1028, 1048, 1049, 1053], "fair": [51, 64, 417, 693, 697, 836, 1005, 1028], "fairer": 361, "fairli": [113, 145, 235, 307, 386, 410, 562, 563, 702, 1005], "faith": [57, 346], "fake": 418, "falak": 1044, "fall": [25, 30, 43, 52, 146, 149, 177, 270, 271, 378, 410, 418, 435, 448, 449, 511, 512, 730, 731, 797, 884, 896, 956, 1003, 1004, 1014, 1044], "fallback": [393, 396, 835, 836, 1004], "fals": [2, 43, 44, 46, 47, 49, 50, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 80, 81, 87, 88, 97, 100, 102, 103, 104, 110, 112, 118, 124, 128, 129, 134, 140, 141, 143, 146, 147, 149, 157, 159, 170, 175, 176, 177, 178, 186, 187, 188, 189, 193, 194, 198, 199, 213, 214, 218, 219, 221, 229, 231, 233, 236, 247, 248, 250, 254, 256, 265, 268, 269, 271, 274, 275, 278, 279, 280, 281, 282, 283, 284, 286, 291, 295, 301, 304, 307, 308, 311, 312, 317, 318, 320, 322, 323, 324, 325, 327, 328, 332, 341, 343, 345, 348, 349, 352, 353, 372, 378, 379, 380, 383, 392, 401, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 422, 423, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 511, 512, 513, 515, 516, 518, 526, 527, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 711, 712, 714, 715, 716, 717, 718, 721, 722, 729, 730, 731, 732, 733, 734, 741, 746, 757, 759, 764, 766, 770, 772, 777, 781, 785, 786, 787, 788, 790, 792, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 817, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 931, 932, 933, 934, 940, 945, 952, 964, 965, 968, 969, 973, 974, 975, 977, 984, 989, 990, 992, 993, 994, 1000, 1004, 1007, 1014, 1018, 1019, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "false_": 639, "false_discovery_r": 598, "famili": [2, 45, 265, 365, 367, 392, 410, 413, 415, 418, 419, 595, 598, 599, 601, 602, 603, 609, 864, 865, 883, 895, 1000, 1014, 1018, 1039, 1049], "familiar": [378, 416, 1043], "famou": [373, 375, 417, 1019], "famous": 1006, "fan": [0, 366, 393, 399, 1019, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fanci": 418, "fancybox": 347, "fanelli": [1050, 1051], "fang": [661, 1042, 1043], "fanni": 1045, "fantasi": 1009, "fantast": 1028, "faouzi": [1045, 1046], "faq": [0, 386, 414, 695, 1001, 1014], "far": [62, 93, 113, 143, 171, 177, 186, 213, 231, 265, 341, 345, 352, 354, 378, 387, 420, 723, 887, 978, 1009, 1010, 1019, 1028], "farach": 996, "farahsae": 1043, "farawai": 1007, "fare": [103, 188, 254, 324, 325, 1039, 1040], "fargo": 51, "farhan": 1051, "farlei": [0, 400, 1035], "farouk": [1043, 1044], "farther": 728, "farthest": 410, "fashion": [2, 46, 139, 144, 221, 280, 366, 392, 407, 408, 410, 415, 417, 556, 560, 561, 562, 563, 567, 568, 569, 605, 630, 833, 856, 871, 874, 880, 891, 915, 916, 917, 918, 974, 994, 1000, 1004, 1014, 1020, 1044], "fast": [2, 52, 64, 95, 191, 198, 202, 228, 229, 245, 246, 312, 354, 365, 373, 378, 387, 404, 410, 412, 414, 415, 417, 418, 422, 448, 449, 471, 476, 511, 535, 536, 538, 541, 543, 547, 550, 567, 568, 569, 591, 592, 594, 635, 636, 643, 661, 662, 675, 677, 690, 702, 803, 817, 828, 829, 839, 840, 847, 848, 852, 863, 951, 972, 996, 1000, 1003, 1006, 1007, 1009, 1010, 1020, 1023, 1028, 1035, 1036, 1041, 1042, 1045, 1046], "fast_dict": 1045, "fast_dot": 1042, "fast_logdet": [2, 387], "fast_svd": 1035, "faster": [37, 46, 57, 74, 97, 105, 120, 139, 140, 143, 144, 146, 149, 168, 187, 191, 199, 213, 215, 228, 229, 231, 246, 250, 265, 291, 293, 308, 321, 323, 324, 328, 352, 353, 354, 365, 372, 378, 386, 387, 392, 404, 410, 415, 419, 420, 422, 445, 449, 451, 453, 454, 455, 464, 511, 534, 535, 536, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 562, 563, 564, 565, 566, 646, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 675, 677, 687, 690, 694, 698, 729, 759, 781, 782, 783, 847, 848, 852, 864, 865, 882, 884, 886, 896, 900, 951, 972, 993, 997, 1000, 1005, 1007, 1008, 1011, 1016, 1018, 1019, 1020, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fastest": [90, 269, 354, 449, 673, 675, 677, 690, 950, 951, 1003], "fastest_top_recall_high_precision_index": 269, "fastica": [2, 119, 183, 212, 415, 535, 538, 544, 1025, 1035, 1037, 1043, 1049, 1050, 1053], "fastkmean": 451, "fastmcd": [412, 471, 476], "fastnc": 863, "fat": [524, 527], "fatima": [1049, 1052], "fato": 1048, "fauchereau": 1048, "fault": [386, 1043, 1045, 1047], "faulti": [216, 1035], "faust": 1053, "favor": [44, 113, 140, 256, 262, 390, 412, 417, 676, 678, 733, 811, 813, 866, 993, 1012, 1037, 1039, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "favorit": [378, 390, 1028], "favour": [795, 1001, 1003, 1044], "fawcett": [791, 792, 1004], "fazlul": 1037, "fbeta_scor": [2, 732, 745, 786, 1004, 1037, 1038, 1039, 1040, 1045, 1051], "fc": [48, 296, 373], "fc2009": 1004, "fcd116": 118, "fcharra": 1050, "fcluster": 189, "fcostin": 1035, "fd": 47, "fdr": 595, "feasibl": [378, 876, 877, 887], "feast": 411, "feat": [47, 49, 382, 418], "feat0": [242, 321], "feat1": [242, 321, 418], "feat2": [242, 321, 418], "feat3": [242, 321, 418], "feat_idx": 630, "featur": [2, 8, 16, 17, 18, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 83, 91, 93, 96, 101, 102, 103, 104, 105, 111, 112, 116, 118, 120, 122, 124, 127, 128, 130, 133, 135, 138, 140, 142, 146, 148, 153, 154, 155, 157, 159, 160, 163, 165, 170, 171, 172, 175, 176, 178, 181, 182, 184, 185, 186, 187, 192, 194, 196, 197, 198, 199, 202, 203, 209, 212, 213, 214, 215, 217, 218, 221, 222, 228, 229, 230, 234, 239, 242, 244, 249, 250, 253, 254, 263, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 280, 281, 284, 285, 286, 290, 294, 295, 296, 299, 300, 302, 305, 306, 308, 310, 311, 314, 318, 319, 321, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 338, 341, 345, 348, 351, 354, 357, 359, 360, 361, 370, 371, 372, 373, 374, 375, 376, 380, 381, 383, 385, 386, 387, 390, 391, 392, 393, 395, 396, 398, 404, 408, 410, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 426, 431, 433, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 582, 583, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 621, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 690, 691, 692, 693, 694, 695, 700, 704, 705, 706, 716, 724, 725, 726, 727, 744, 745, 748, 749, 751, 761, 762, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 784, 788, 791, 793, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 933, 934, 948, 968, 978, 979, 980, 984, 992, 993, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "feature_0": 920, "feature_1": [634, 920], "feature_2": 634, "feature_all_": 844, "feature_count_": [842, 844, 846], "feature_extract": [2, 47, 54, 57, 80, 81, 83, 84, 87, 99, 102, 123, 183, 272, 334, 351, 352, 353, 354, 367, 373, 410, 411, 418, 466, 547, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 880, 1002, 1035, 1036, 1037, 1038, 1041, 1042], "feature_import": 147, "feature_importances_": [141, 147, 168, 188, 189, 392, 417, 419, 556, 557, 560, 561, 562, 563, 567, 568, 569, 596, 597, 600, 915, 916, 917, 918, 1037, 1040, 1044], "feature_index": 418, "feature_indices_": 1043, "feature_log_prob_": [842, 843, 844, 846], "feature_map": [245, 311], "feature_map__n_compon": 245, "feature_map_fouri": 245, "feature_map_nystroem": [245, 642], "feature_nam": [54, 57, 126, 130, 141, 147, 151, 168, 186, 188, 222, 251, 285, 294, 311, 320, 321, 322, 327, 338, 352, 357, 371, 373, 383, 411, 466, 492, 493, 495, 499, 503, 504, 505, 507, 508, 513, 585, 634, 635, 636, 888, 919, 920, 921, 1012, 1020, 1051], "feature_name_combin": [880, 1051], "feature_names_": 584, "feature_names_in": 1049, "feature_names_in_": [254, 318, 323, 392, 431, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 992, 1048, 1049, 1050, 1051, 1053], "feature_names_out": [426, 431, 444, 445, 447, 449, 451, 466, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 569, 570, 571, 572, 573, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 1049, 1052], "feature_rang": [309, 877, 893, 1014, 1037, 1047], "feature_select": [2, 87, 103, 104, 106, 162, 163, 164, 165, 166, 167, 168, 183, 254, 322, 324, 344, 361, 392, 401, 411, 419, 584, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 993, 1025, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "feature_selector": 168, "feature_to_plot": 207, "feature_union": 1051, "featureagglomer": [2, 84, 87, 442, 443, 1021, 1038, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "featureforg": 1028, "featurehash": [2, 47, 57, 102, 183, 351, 352, 353, 367, 373, 418, 490, 584, 591, 592, 593, 594, 880, 1025, 1036, 1041, 1042, 1043, 1049, 1050], "featureheash": 354, "features_": [632, 994], "features__pca__n_compon": 106, "features__univ_select__k": 106, "features_idx": 311, "features_info": 187, "features_nam": [185, 1042], "features_samples_ratio": 69, "featureselector": 604, "featuresshould": 398, "featuretool": 1023, "featureunion": [2, 7, 43, 106, 370, 392, 401, 466, 632, 869, 994, 1024, 1028, 1030, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "featurewis": [2, 883], "feb": [73, 442, 456], "februari": [0, 412, 475, 1004, 1036, 1040, 1052], "fed": [47, 154, 361, 373, 418, 993, 1009, 1014, 1046], "feda": [1043, 1044], "feder": 1023, "federico": [1037, 1038, 1043, 1044, 1049], "federicopisanu": 1045, "feed": [47, 116, 214, 247, 354, 373, 376, 383, 390, 410, 418, 745, 880, 1005], "feedback": [268, 377, 378, 379, 393, 1023, 1027, 1043], "feedforward": [864, 865], "feedstock": 382, "feel": [64, 182, 311, 377, 378, 386, 410, 448, 1020], "feel_temp": [43, 187], "feghali": 1052, "fei": [566, 1010], "feld": [1039, 1051], "feldbauer": [1043, 1044, 1045, 1046, 1049], "feldman": [1037, 1042, 1043, 1044, 1045], "felip": [1048, 1049, 1050, 1051], "felix": [1037, 1042, 1043, 1045, 1047, 1048, 1049], "femal": [103, 186, 325, 383, 880, 881, 1014], "fenc": 383, "feng": [1045, 1047, 1048, 1049], "fenil": 1048, "fenx": 1043, "ferdman": 1052, "ferenc": 1028, "fernand": [1043, 1049, 1050], "fernandez": 1044, "fernando": [1040, 1047], "fern\u00e1ndez": 1049, "ferrando": 1045, "ferrari": 1043, "ferreira": [1043, 1048, 1049], "ferri": [419, 1004], "ferria": 1042, "ferrin": 1049, "ferriss": 1042, "ferr\u00e9": 1049, "ferr\u00edn": 1046, "fetal": 250, "fetch": [2, 51, 55, 154, 186, 231, 265, 285, 371, 372, 373, 378, 382, 383, 386, 415, 494, 499, 558, 559, 560, 561, 566, 567, 568, 569, 591, 592, 594, 1043, 1051], "fetch_": 1042, "fetch_20newsgroup": [2, 54, 57, 102, 272, 334, 352, 353, 354, 373, 491, 1040, 1045, 1053], "fetch_20newsgroups_vector": [2, 46, 228, 244, 373, 1035, 1045, 1047, 1052, 1053], "fetch_california_h": [2, 140, 144, 181, 182, 311, 322, 373, 391, 411, 1044, 1046, 1053], "fetch_covtyp": [2, 191, 250, 322, 373, 1044, 1047, 1049, 1053], "fetch_fil": [2, 52], "fetch_kddcup99": [2, 250, 373, 1042, 1043, 1044, 1047, 1048, 1053], "fetch_lfw_pair": [2, 373, 1040, 1050, 1053], "fetch_lfw_peopl": [2, 45, 373, 1050, 1053], "fetch_mldata": 1043, "fetch_olivetti_fac": [2, 83, 120, 249, 373, 1043, 1044, 1045, 1053], "fetch_openml": [2, 43, 44, 52, 103, 107, 143, 149, 154, 175, 186, 187, 188, 213, 221, 229, 231, 241, 250, 254, 265, 285, 288, 290, 291, 308, 317, 320, 324, 327, 372, 382, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "fetch_rcv1": [2, 373, 1040, 1044, 1053], "fetch_species_distribut": [2, 50, 304, 1044, 1053], "fetcher": [371, 1040, 1042, 1051], "feth": 1035, "feurer": [1038, 1043], "fevott": [415, 541, 543, 550], "few": [0, 46, 54, 57, 74, 80, 85, 124, 143, 149, 173, 176, 177, 202, 211, 213, 215, 231, 246, 247, 256, 273, 274, 278, 303, 308, 311, 315, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 348, 354, 365, 373, 374, 375, 378, 380, 391, 393, 401, 404, 407, 408, 410, 414, 415, 417, 419, 420, 439, 451, 564, 565, 658, 695, 698, 900, 951, 1000, 1001, 1003, 1004, 1007, 1008, 1017, 1019, 1020, 1028, 1041, 1051, 1053], "fewer": [43, 53, 63, 88, 134, 142, 144, 213, 365, 379, 410, 419, 420, 450, 463, 544, 597, 699, 837, 955, 1000, 1005, 1007, 1040, 1041, 1042], "fewest": [270, 630], "ff": 386, "ff0000": [67, 299, 306], "ff3333": 118, "ff7216": 118, "ff7f00": [79, 95, 240], "ff9c34": [92, 97], "ffaaaa": 299, "ffc107": 315, "fft": 643, "fhaselbeck": 1047, "fhoang7": 1044, "fhr": 250, "fi": 878, "fibins": [1043, 1044], "fidel": 53, "fidor": 1051, "fiedler": 1041, "fiegel": [1047, 1048, 1050], "field": [168, 231, 375, 407, 410, 411, 418, 466, 501, 504, 620, 1000, 1002, 1011, 1019, 1027, 1036], "fifth": [246, 997], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 86, 88, 90, 93, 97, 99, 105, 109, 111, 116, 120, 125, 126, 130, 134, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 156, 173, 179, 181, 187, 189, 191, 194, 200, 204, 207, 208, 210, 211, 213, 214, 217, 221, 226, 228, 231, 233, 234, 235, 236, 237, 238, 241, 243, 250, 251, 261, 265, 266, 267, 268, 271, 272, 273, 274, 277, 280, 281, 282, 284, 285, 290, 291, 293, 295, 296, 304, 307, 308, 311, 312, 313, 315, 316, 317, 320, 324, 325, 338, 345, 347, 348, 349, 350, 352, 353, 354, 356, 374, 385], "fig1": 100, "fig2": 100, "fig_num": 210, "figaspect": 315, "fight": [74, 217, 1028], "fighter": 102, "fignum": 346, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 105, 107, 111, 113, 115, 116, 118, 120, 123, 124, 125, 126, 129, 130, 134, 136, 137, 143, 144, 145, 146, 147, 149, 152, 154, 155, 163, 172, 174, 178, 179, 181, 182, 186, 187, 189, 191, 193, 194, 197, 198, 203, 207, 210, 211, 212, 213, 214, 215, 217, 219, 221, 224, 227, 229, 231, 233, 234, 235, 237, 238, 240, 241, 243, 245, 248, 249, 250, 251, 256, 258, 259, 262, 265, 266, 267, 268, 273, 274, 275, 278, 280, 281, 284, 285, 286, 290, 291, 293, 294, 306, 307, 309, 311, 312, 313, 314, 315, 316, 317, 324, 325, 330, 332, 339, 341, 345, 346, 347, 348, 349, 350, 352, 353, 354, 374, 921], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 83, 84, 85, 87, 89, 91, 92, 94, 95, 96, 97, 98, 100, 109, 113, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 145, 146, 147, 148, 149, 152, 153, 157, 159, 161, 163, 164, 167, 171, 172, 173, 174, 177, 178, 182, 186, 187, 188, 189, 193, 198, 201, 203, 206, 207, 210, 212, 214, 215, 219, 224, 228, 229, 230, 235, 236, 237, 240, 244, 245, 246, 248, 249, 251, 256, 258, 259, 262, 264, 270, 275, 276, 286, 296, 300, 301, 304, 306, 309, 311, 313, 314, 318, 320, 322, 330, 331, 332, 339, 341, 346, 357, 358, 359, 378, 410, 416, 417, 418, 420, 440, 634, 635, 700, 701, 703, 704, 705, 809, 826, 921, 993, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1018, 1019, 1020, 1048], "figure_": [68, 187, 251, 320, 322, 385, 440, 634, 635, 700, 701, 703, 704, 705, 809, 826], "figure_titl": 143, "filali": 1043, "file": [2, 47, 51, 52, 68, 352, 353, 365, 366, 367, 372, 373, 375, 376, 381, 382, 383, 384, 390, 404, 411, 415, 489, 494, 496, 497, 499, 506, 511, 512, 537, 582, 583, 591, 592, 594, 919, 1007, 1020, 1025, 1027, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "file_1": 506, "file_2": 506, "file_42": 506, "file_43": 506, "file_44": 506, "file_id": 372, "file_path": 494, "filenam": [2, 47, 55, 126, 334, 373, 378, 384, 404, 490, 494, 503, 506, 507, 510, 591, 592, 594, 1035, 1040, 1043, 1044], "filesystem": [386, 396, 1048], "filho": 408, "filip": [1052, 1053], "filipj8": [1042, 1043], "fill": [70, 142, 159, 188, 266, 296, 357, 392, 411, 415, 518, 530, 541, 543, 550, 590, 633, 919, 921, 994, 1007, 1020], "fill_between": [52, 146, 149, 159, 170, 175, 177, 179, 193, 194, 231, 271, 273, 274, 275, 281, 809, 826], "fill_between_": [809, 826], "fill_between_kw": [809, 826], "fill_betweenx": 93, "fill_diagon": [189, 236], "fill_legend": 231, "fill_valu": [182, 242, 252, 321, 424, 427, 433, 434, 630, 633, 1014, 1043, 1051, 1052], "fillna": [231, 250], "filo": [1035, 1038], "filter": [2, 18, 47, 54, 80, 81, 105, 219, 231, 269, 271, 293, 352, 366, 373, 384, 387, 410, 418, 450, 490, 491, 506, 591, 594, 598, 599, 600, 601, 602, 603, 777, 842, 943, 968, 1006, 1007, 1045], "filter_param": 777, "filtered_cv_result": 269, "filterwarn": [79, 95, 228, 307, 308, 378, 1014], "final": [2, 43, 52, 63, 64, 70, 75, 77, 88, 102, 103, 111, 113, 116, 125, 134, 135, 137, 139, 143, 144, 147, 154, 157, 165, 175, 182, 185, 187, 189, 191, 193, 198, 200, 202, 210, 213, 215, 230, 231, 234, 240, 254, 260, 265, 269, 277, 288, 291, 317, 318, 320, 321, 341, 345, 365, 367, 373, 376, 378, 379, 380, 382, 391, 392, 407, 408, 410, 411, 414, 417, 418, 419, 439, 444, 449, 450, 454, 461, 464, 466, 539, 558, 559, 570, 571, 573, 597, 630, 650, 656, 662, 682, 693, 697, 722, 803, 835, 836, 867, 868, 904, 907, 993, 994, 996, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1017, 1028, 1040, 1043, 1044, 1045, 1046, 1048], "final_estim": [154, 320, 417, 570, 571], "final_estimator_": [570, 571], "final_estimatorridgecv": 154, "final_lay": 417, "final_layer_gbr": 417, "final_layer_rfr": 417, "final_step": 77, "financ": [265, 1005], "financi": [0, 51, 410, 417, 1000], "find": [2, 43, 44, 45, 51, 55, 64, 75, 80, 81, 82, 85, 86, 88, 90, 98, 105, 111, 112, 120, 122, 124, 125, 130, 144, 154, 170, 174, 176, 178, 187, 198, 200, 202, 215, 221, 233, 235, 237, 238, 243, 250, 261, 265, 270, 271, 272, 282, 284, 294, 299, 300, 301, 316, 320, 326, 328, 343, 344, 345, 348, 352, 353, 356, 366, 375, 376, 378, 379, 380, 383, 384, 387, 390, 391, 392, 393, 398, 407, 409, 410, 412, 413, 415, 417, 418, 419, 421, 443, 446, 447, 448, 452, 453, 454, 455, 464, 534, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 561, 568, 585, 592, 613, 614, 650, 653, 656, 657, 658, 659, 661, 662, 674, 679, 691, 710, 732, 733, 741, 785, 786, 787, 790, 791, 797, 802, 803, 817, 825, 849, 850, 851, 853, 855, 857, 858, 859, 880, 881, 886, 899, 900, 901, 915, 916, 918, 930, 950, 951, 953, 993, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1010, 1014, 1018, 1019, 1020, 1022, 1024, 1027, 1028, 1035, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1053], "findal": 354, "fine": [43, 72, 142, 168, 217, 229, 262, 269, 345, 358, 359, 375, 382, 392, 418, 448, 951, 1007, 1010, 1019, 1024, 1045], "finer": [43, 52, 72, 293, 341, 366, 410, 414, 993, 1007, 1045], "finfo": [236, 473, 474, 480, 609, 653, 654, 657, 658, 659, 685, 686, 1050], "finish": [168, 259, 1001], "finit": [64, 256, 262, 365, 373, 392, 470, 541, 554, 585, 609, 612, 613, 614, 661, 731, 781, 788, 800, 828, 905, 931, 932, 933, 934, 1000, 1003, 1004, 1028, 1042, 1043, 1047, 1049, 1050], "finn": [1043, 1044], "firefox": 1014, "fireplac": 143, "fireplacequ": 143, "firm": [51, 410], "first": [0, 2, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 88, 89, 91, 94, 97, 98, 99, 100, 102, 103, 104, 107, 111, 115, 116, 125, 126, 128, 134, 135, 139, 141, 142, 143, 144, 145, 147, 149, 151, 154, 155, 156, 157, 164, 165, 168, 170, 171, 172, 175, 176, 177, 178, 182, 185, 186, 187, 189, 191, 193, 195, 197, 202, 209, 210, 211, 214, 215, 221, 222, 227, 234, 237, 244, 245, 247, 248, 249, 251, 253, 254, 258, 262, 265, 266, 271, 273, 274, 278, 280, 282, 283, 284, 288, 290, 291, 293, 296, 300, 301, 302, 306, 308, 311, 313, 316, 317, 318, 321, 322, 331, 334, 337, 338, 341, 343, 352, 353, 354, 356, 357, 360, 361, 366, 367, 372, 373, 375, 376, 377, 378, 380, 382, 383, 384, 386, 390, 392, 404, 407, 408, 409, 410, 413, 414, 415, 417, 418, 419, 420, 422, 445, 448, 449, 452, 461, 462, 466, 474, 485, 489, 490, 492, 493, 495, 497, 500, 503, 505, 507, 511, 512, 513, 531, 536, 537, 541, 544, 556, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 585, 587, 591, 592, 593, 594, 596, 597, 604, 613, 614, 620, 624, 627, 634, 635, 636, 637, 649, 655, 662, 669, 671, 677, 679, 691, 698, 701, 702, 703, 705, 715, 719, 739, 745, 766, 767, 785, 797, 800, 801, 806, 807, 808, 809, 810, 815, 817, 824, 826, 835, 836, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 852, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 872, 880, 884, 885, 886, 888, 889, 896, 897, 909, 912, 915, 916, 917, 918, 920, 922, 928, 929, 933, 934, 935, 953, 955, 970, 974, 977, 989, 992, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1011, 1014, 1015, 1018, 1019, 1020, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "first_img_data": 510, "first_pca_compon": 316, "first_quart": 129, "first_week": 149, "firstli": [123, 365, 390, 660], "fisach": 1041, "fiscal": 0, "fischer": [1040, 1041], "fischler": 1000, "fischoff": 1047, "fish": 323, "fisher": [375, 417, 507, 639], "fisher1958": 417, "fisher_transform": 639, "fit": [2, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 120, 122, 123, 124, 125, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 183, 185, 186, 187, 188, 189, 191, 192, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 236, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 356, 357, 358, 359, 360, 365, 367, 370, 373, 375, 378, 381, 383, 384, 387, 390, 392, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 504, 512, 513, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 578, 580, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 697, 700, 701, 703, 704, 705, 713, 714, 726, 735, 738, 753, 791, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 926, 927, 943, 960, 963, 987, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fit_": 1048, "fit_algorithm": [120, 534, 540, 1050, 1051], "fit_and_evalu": 353, "fit_and_plot_model": 316, "fit_and_scor": 221, "fit_data": 59, "fit_dur": 291, "fit_ecoc": 1039, "fit_grid_point": 1046, "fit_intercept": [46, 193, 194, 199, 218, 227, 240, 279, 318, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 907, 908, 914, 1000, 1018, 1039, 1043, 1044, 1045, 1047, 1048, 1049], "fit_inverse_transform": [44, 125, 538, 1044], "fit_ovo": 1039, "fit_ovr": 1039, "fit_param": [247, 392, 434, 439, 444, 447, 467, 535, 537, 539, 540, 542, 545, 546, 552, 558, 559, 570, 571, 572, 573, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 633, 638, 641, 642, 643, 644, 645, 668, 674, 809, 826, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 851, 856, 859, 863, 866, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 899, 900, 963, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "fit_path": [653, 657, 658, 659, 685, 686], "fit_predict": [57, 89, 90, 93, 240, 250, 298, 380, 392, 410, 428, 432, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 471, 566, 680, 795, 796, 800, 801, 853, 859, 867, 911, 927, 1010, 1040, 1043, 1044, 1048, 1050, 1052], "fit_prior": [373, 842, 843, 844, 846], "fit_status_": [909, 910, 911, 912, 913], "fit_tim": [52, 91, 143, 202, 221, 273, 414, 830, 831], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 273, "fit_times_svm": 273, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 82, 85, 86, 91, 95, 121, 124, 126, 130, 152, 191, 204, 229, 231, 233, 234, 235, 236, 237, 238, 243, 244, 247, 248, 254, 291, 295, 307, 311, 312, 316, 317, 318, 320, 323, 325, 326, 327, 328, 341, 352, 353, 354, 361, 370, 373, 380, 383, 384, 392, 406, 411, 415, 418, 419, 426, 434, 444, 445, 447, 449, 451, 466, 468, 470, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 693, 694, 695, 699, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 927, 940, 994, 996, 1000, 1005, 1007, 1014, 1015, 1016, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053], "fitfailedwarn": [2, 803, 806, 807, 809, 817, 826, 829, 830, 831, 834], "fitted_transform": [380, 466], "fittedcolumntransform": [154, 187], "fittedgridsearchcv": 252, "fittedpipelin": [154, 242, 252, 272, 285, 317, 321], "fittedrandomforestclassifi": 327, "fittedrandomizedsearchcv": 103, "fittedstackingregressor": 154, "fitter": 1020, "fitting_weight": 401, "fitzgerald": 1043, "fitzk": 1028, "five": [149, 257, 265, 331, 334, 373, 534, 542, 548, 1001, 1007, 1019, 1028, 1035], "five_imag": 418, "fix": [2, 43, 47, 58, 62, 70, 80, 103, 129, 139, 140, 142, 147, 149, 170, 171, 175, 178, 186, 189, 198, 215, 231, 250, 262, 274, 284, 306, 320, 321, 322, 323, 324, 325, 326, 327, 328, 353, 365, 366, 372, 374, 376, 377, 378, 382, 386, 390, 392, 393, 401, 410, 411, 414, 415, 417, 418, 420, 454, 464, 474, 507, 515, 534, 540, 543, 545, 551, 552, 562, 563, 567, 568, 591, 594, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 633, 656, 666, 671, 673, 687, 690, 694, 698, 710, 788, 800, 817, 824, 849, 850, 852, 855, 857, 858, 874, 877, 891, 915, 916, 926, 951, 970, 993, 1000, 1003, 1004, 1007, 1014, 1024, 1033, 1034, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [591, 594], "fixedthresholdclassifi": [2, 265, 409, 825, 1053], "fixm": [382, 392], "fixtur": [366, 378], "fkaren27": 1049, "flach": [408, 1004], "flach2008": 1004, "flach2015": 1004, "flag": [175, 247, 250, 327, 376, 378, 379, 381, 401, 406, 466, 613, 614, 630, 676, 678, 731, 788, 923, 924, 1019, 1041, 1045, 1046, 1048, 1049, 1050, 1051], "flair": 1006, "flak": 1050, "flake8": 582, "flanagan": [1044, 1045], "flander": 1053, "flat": [2, 78, 120, 187, 233, 234, 235, 269, 410, 417, 418, 442, 448, 450, 463, 512, 1011, 1035, 1036, 1051], "flat_grid": 245, "flatnonzero": [129, 200, 270, 279, 280, 784], "flatten": [54, 68, 236, 245, 269, 315, 338, 349, 384, 505, 572, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 856], "flatten_transform": [572, 1042], "flatter": [43, 62], "flavanoid": [48, 375], "flaviomorelli": 1045, "flavor": [378, 1007], "flavour": 417, "flaw": [392, 417], "flaxman": [1037, 1039], "fledg": [367, 418], "fleet": 43, "fleme": 1050, "flennerhag": 1043, "fletcher": [1000, 1035, 1039], "flexibl": [43, 62, 143, 181, 213, 284, 312, 338, 354, 385, 390, 404, 414, 420, 677, 907, 908, 926, 993, 998, 1000, 1004, 1008, 1014, 1023, 1024, 1028, 1044, 1048], "flier": 49, "flink": 102, "flip": [124, 585, 745, 951, 1006, 1039, 1048], "flip_i": 518, "flip_sign": 951, "float": [2, 46, 49, 51, 76, 80, 81, 86, 93, 94, 98, 99, 100, 103, 123, 161, 178, 186, 199, 203, 236, 265, 270, 271, 275, 279, 348, 354, 365, 372, 373, 378, 387, 392, 406, 409, 410, 411, 418, 419, 421, 422, 423, 427, 429, 433, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 586, 587, 591, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 613, 614, 616, 617, 618, 619, 620, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 762, 769, 772, 778, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 817, 820, 823, 825, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 870, 873, 874, 880, 881, 883, 885, 887, 888, 889, 890, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 930, 931, 933, 934, 937, 948, 949, 966, 978, 984, 989, 994, 1004, 1005, 1007, 1008, 1014, 1019, 1020, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "float16": 1044, "float32": [55, 145, 236, 309, 325, 366, 373, 378, 379, 380, 392, 404, 406, 560, 561, 562, 563, 566, 567, 568, 569, 596, 597, 643, 644, 661, 702, 766, 872, 915, 916, 917, 918, 931, 979, 980, 981, 1020, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "float64": [45, 50, 52, 53, 86, 103, 105, 145, 146, 147, 148, 159, 170, 186, 187, 246, 265, 279, 282, 324, 325, 326, 341, 366, 372, 378, 379, 380, 392, 418, 423, 460, 473, 474, 477, 480, 481, 482, 499, 500, 511, 512, 519, 520, 521, 523, 534, 540, 542, 545, 546, 548, 549, 551, 584, 585, 592, 594, 600, 644, 651, 653, 654, 657, 658, 659, 660, 661, 666, 672, 673, 676, 678, 683, 685, 686, 690, 697, 702, 709, 710, 711, 712, 713, 715, 719, 720, 722, 723, 724, 726, 728, 729, 732, 733, 734, 738, 739, 740, 741, 742, 743, 746, 751, 756, 758, 759, 786, 787, 789, 790, 791, 796, 797, 798, 817, 872, 880, 881, 888, 900, 909, 910, 912, 913, 916, 918, 928, 931, 933, 949, 974, 977, 979, 980, 981, 1019, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "float_info": 57, "floch": 1052, "floor": 53, "floor_x": 53, "flore": 1048, "florian": [1028, 1035, 1039, 1041, 1045, 1052], "florin": 1053, "flow": 380, "flowchart": [398, 414], "flower": [126, 128, 280, 509, 510, 1004, 1023], "floyd": [373, 691, 1001], "floydsoft": 1039, "fluctuat": [51, 93, 149, 213, 278, 1043], "flush": 221, "fly": [145, 383, 386, 511, 512, 585, 1035, 1037, 1044], "flyingdutchman23": 1048, "flyingimmidev": 1035, "flynn": [1048, 1050], "fmax": 231, "fmi": [410, 734], "fmin_l_bfgs_b": [613, 614], "fmt": [94, 224], "fn": [328, 410, 715, 721, 732, 733, 734, 785, 786, 787, 790, 1004, 1005], "fn_c": 280, "fna": [168, 375], "fnlwgt": [327, 499], "fnr": [268, 701, 730], "fo": 418, "focu": [43, 48, 120, 134, 170, 262, 301, 365, 383, 408, 417, 556, 557, 562, 564, 565, 681, 1001, 1007, 1014, 1023, 1024, 1027], "focus": [62, 109, 202, 288, 373, 378, 390, 1001, 1014, 1023], "fokow": 1052, "fold": [2, 43, 100, 106, 109, 140, 142, 145, 159, 167, 186, 202, 258, 265, 266, 267, 269, 271, 272, 274, 281, 285, 318, 333, 348, 361, 373, 378, 381, 382, 391, 392, 401, 409, 410, 419, 439, 474, 496, 539, 570, 571, 597, 605, 650, 654, 656, 658, 662, 664, 666, 668, 676, 678, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 888, 909, 912, 993, 1000, 1004, 1014, 1019, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1052], "folder": [2, 104, 373, 376, 378, 382, 386, 396, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 506, 1007], "folkman": 1042, "folloni": 1046, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 87, 88, 90, 96, 100, 103, 104, 118, 120, 129, 134, 137, 146, 147, 151, 163, 175, 176, 181, 185, 186, 187, 188, 189, 193, 195, 198, 200, 202, 211, 213, 214, 228, 231, 241, 247, 248, 250, 262, 265, 271, 280, 281, 285, 288, 311, 317, 318, 320, 321, 323, 324, 325, 328, 338, 348, 352, 353, 354, 356, 360, 361, 365, 366, 372, 373, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 396, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 427, 429, 431, 432, 433, 434, 439, 443, 445, 447, 448, 449, 450, 451, 455, 463, 464, 465, 466, 467, 470, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 518, 537, 541, 543, 544, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 634, 636, 637, 649, 655, 661, 662, 673, 674, 683, 695, 697, 702, 708, 712, 716, 721, 791, 822, 844, 849, 850, 851, 853, 855, 857, 858, 859, 866, 870, 871, 872, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 905, 907, 908, 912, 915, 916, 917, 918, 922, 929, 945, 946, 950, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1032, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "folwarczn\u00fd": 1052, "fonari": [1047, 1048], "fond": 1028, "fondat": 1028, "font": [146, 202, 227, 245, 919, 921], "font_manag": [112, 297, 340], "font_prop": 112, "font_siz": 315, "fontdict": [54, 74], "fontnam": [919, 1048], "fontproperti": [112, 297, 340], "fontsiz": [44, 47, 49, 54, 70, 83, 93, 123, 142, 163, 173, 174, 176, 179, 187, 194, 203, 212, 224, 234, 235, 259, 266, 275, 276, 277, 282, 283, 309, 315, 347, 921], "fontweight": [93, 208], "foo": [380, 584, 1008], "food": [0, 375], "foot": 1022, "footer": [54, 102, 272, 352, 353, 373, 490, 491], "footnot": [1011, 1023], "footprint": [322, 325, 365, 367, 410, 415, 544, 558, 559, 560, 561, 566, 567, 568, 569, 1037, 1040, 1041, 1046, 1047, 1050], "fopenmp": [376, 379], "foral": [410, 420, 616], "forbid": [410, 417], "forbidden": [187, 417], "forc": [134, 170, 217, 284, 291, 315, 352, 372, 376, 405, 414, 417, 452, 459, 466, 469, 499, 609, 612, 649, 650, 655, 656, 660, 663, 664, 665, 666, 675, 676, 677, 684, 687, 690, 757, 781, 784, 825, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 909, 910, 911, 912, 913, 931, 933, 934, 1014, 1030, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1051], "force_all_finit": [781, 931, 933, 934, 1046, 1049], "force_alpha": [842, 843, 844, 846, 1050], "force_finit": [609, 612, 731, 788, 1004, 1049], "force_int_remainder_col": [466, 469], "force_writ": [933, 934, 1053], "ford": 51, "forecast": [42, 43, 146, 149, 169, 177, 183, 215, 271, 408, 409, 420, 494, 499, 565, 614, 618, 625, 626, 628, 704, 745, 748, 749, 751, 793, 824, 829, 830, 833, 1004, 1023, 1025], "foreground": [75, 99], "foreign_work": 265, "foreman": 1042, "forese": 390, "forest": [2, 14, 50, 64, 67, 133, 139, 142, 144, 145, 147, 148, 149, 150, 152, 154, 157, 181, 183, 184, 191, 240, 268, 270, 272, 304, 322, 352, 359, 361, 371, 391, 392, 408, 419, 465, 466, 492, 493, 499, 501, 518, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 633, 637, 803, 808, 833, 840, 867, 881, 911, 915, 916, 917, 993, 994, 1005, 1012, 1020, 1024, 1025, 1026, 1030, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1052], "forest_import": 141, "forestclassifi": 1040, "forestcolumntransform": 154, "forestcov": 250, "forg": [320, 321, 322, 323, 324, 325, 326, 327, 328, 366, 379, 381, 382, 386, 396, 397], "forget": [187, 361, 366, 372, 382, 390, 415, 1001], "forget_factor": [415, 541], "forgiv": 737, "forina": 375, "fork": [376, 378, 386, 390], "forkserv": 390, "form": [2, 43, 48, 57, 68, 77, 93, 100, 120, 157, 177, 178, 183, 186, 246, 247, 262, 271, 330, 361, 372, 375, 378, 380, 382, 392, 393, 407, 410, 413, 414, 415, 416, 417, 418, 420, 422, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 461, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 702, 800, 801, 802, 803, 806, 807, 808, 811, 813, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 939, 960, 963, 993, 995, 997, 998, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1014, 1019, 1023, 1041, 1045, 1047], "formal": [392, 393, 410, 417, 847, 848, 1001, 1004, 1005, 1008], "format": [2, 47, 50, 51, 52, 59, 87, 91, 94, 102, 111, 120, 129, 137, 142, 145, 147, 159, 163, 164, 191, 194, 199, 213, 231, 254, 266, 276, 278, 279, 282, 286, 295, 296, 299, 300, 315, 320, 328, 347, 356, 360, 365, 371, 377, 378, 380, 381, 386, 387, 391, 392, 404, 411, 414, 417, 418, 434, 444, 445, 447, 449, 451, 452, 454, 461, 466, 470, 484, 485, 486, 487, 489, 491, 499, 500, 501, 511, 512, 513, 526, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 554, 560, 561, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 649, 655, 661, 662, 663, 665, 669, 670, 671, 679, 680, 681, 691, 692, 695, 700, 714, 716, 723, 742, 743, 754, 771, 794, 795, 836, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 899, 900, 905, 907, 919, 933, 934, 957, 965, 969, 979, 980, 981, 982, 983, 984, 994, 1004, 1007, 1012, 1014, 1015, 1018, 1020, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1052, 1053], "format_func": 296, "formatter_result": 91, "former": [51, 354, 409, 417, 418, 568, 805, 812, 821, 1006, 1035, 1041, 1044], "formerli": [217, 1036, 1039, 1041, 1042], "formul": [134, 170, 179, 217, 280, 378, 410, 412, 415, 418, 420, 423, 477, 552, 553, 560, 567, 653, 654, 657, 658, 659, 661, 662, 668, 673, 766, 772, 801, 909, 912, 915, 917, 1000, 1004, 1005, 1008, 1014, 1026, 1030, 1052], "formula": [109, 110, 407, 410, 412, 423, 475, 477, 519, 520, 521, 593, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 679, 681, 707, 732, 733, 758, 767, 824, 993, 998, 1000, 1004, 1009, 1010, 1014, 1018, 1040, 1042, 1044], "forrest": [1046, 1047], "forsal": [57, 354, 373], "forsyth": 1043, "forth": 386, "fortin": [1035, 1037, 1038, 1039], "fortran": [422, 544, 649, 650, 655, 656, 663, 664, 665, 666, 668, 684, 687, 688, 689, 933, 934, 1035, 1038, 1039, 1043], "fortun": [384, 417, 1048, 1049], "forward": [46, 134, 168, 247, 322, 365, 378, 401, 404, 419, 511, 512, 542, 546, 556, 562, 563, 605, 671, 688, 689, 867, 871, 1000, 1024, 1047], "foster": [0, 1043], "fouchet": 1041, "found": [0, 45, 52, 57, 58, 59, 130, 141, 167, 170, 174, 176, 178, 217, 241, 248, 265, 269, 272, 273, 274, 284, 316, 320, 323, 325, 326, 341, 354, 365, 367, 372, 375, 377, 378, 380, 390, 392, 393, 404, 407, 409, 410, 413, 414, 415, 417, 418, 420, 435, 443, 446, 447, 461, 474, 560, 561, 562, 563, 567, 568, 591, 593, 613, 614, 631, 639, 650, 654, 656, 658, 664, 666, 668, 674, 675, 677, 679, 681, 690, 691, 715, 722, 803, 806, 807, 817, 825, 844, 849, 850, 856, 878, 880, 881, 915, 916, 917, 918, 922, 930, 987, 991, 993, 996, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1014, 1018, 1019, 1020, 1024, 1035, 1038, 1039, 1042, 1043, 1045, 1049, 1052], "foundat": [0, 154, 265, 378, 408, 1007], "founder": 1028, "fouqu": 1035, "fouquet": [1051, 1052], "four": [64, 164, 178, 191, 196, 214, 258, 259, 265, 331, 338, 374, 378, 392, 560, 567, 722, 915, 917, 939, 1000, 1002, 1003, 1004, 1014, 1022], "fourier": [2, 23, 245, 641, 642, 643, 644, 645, 761, 762, 996], "fourier_approx_svm": 245, "fourier_scor": 245, "fourier_tim": 245, "fournier": 1044, "fourth": 142, "fowkl": [410, 734], "fowlk": [734, 1041], "fowlkes_mallows_scor": [2, 410, 1004, 1041, 1043], "fox": [328, 418, 1051], "fp": [47, 265, 328, 410, 715, 721, 732, 733, 734, 785, 786, 787, 790, 1004], "fp_c": 280, "fpgawesom": 1049, "fpr": [2, 50, 241, 250, 265, 268, 280, 281, 385, 595, 599, 701, 705, 709, 730, 792, 1004, 1032, 1035, 1051], "fpr_a": 280, "fpr_b": 280, "fpr_grid": 280, "fpr_score": 265, "fr": [534, 540, 661, 667, 688, 689, 761, 762, 1002, 1004], "fraa\u00df": 1052, "frac": [63, 111, 112, 134, 271, 278, 280, 323, 407, 408, 410, 412, 415, 416, 417, 418, 420, 433, 465, 467, 484, 485, 486, 557, 559, 561, 563, 565, 568, 571, 573, 614, 618, 622, 625, 626, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 681, 682, 683, 699, 732, 733, 758, 772, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 996, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1018, 1019, 1020], "frac12": [417, 996], "fractal": [168, 375], "fraction": [2, 43, 62, 64, 146, 149, 213, 221, 231, 265, 278, 348, 353, 408, 414, 417, 440, 441, 451, 452, 458, 459, 518, 530, 560, 561, 562, 563, 567, 568, 569, 593, 596, 605, 669, 670, 671, 674, 679, 680, 681, 706, 724, 725, 726, 727, 737, 797, 799, 805, 809, 831, 832, 846, 874, 909, 910, 911, 915, 916, 917, 918, 969, 1000, 1004, 1007, 1011, 1012, 1014, 1019, 1020, 1024, 1036, 1037, 1038, 1049, 1052], "fragil": 658, "fragment": [88, 123], "frame": [43, 103, 126, 149, 175, 186, 187, 213, 265, 317, 327, 373, 378, 390, 393, 491, 492, 493, 495, 499, 503, 504, 505, 507, 508, 513, 1047], "frameon": [46, 219], "framework": [271, 365, 380, 390, 392, 404, 410, 640, 691, 800, 1000, 1001, 1008, 1024, 1028, 1035, 1041], "fran": [1047, 1048, 1049], "franc": [317, 767], "francesco": [1047, 1050], "franci": [539, 661, 1000, 1041], "francia": 1049, "francidona": 1045, "francisco": [418, 1016], "franck": [1050, 1052, 1053], "franco": 1045, "francoi": [1035, 1048], "francoisgoupil": 1049, "frank": [271, 838, 1005, 1040, 1044, 1045], "frankhui": 1043, "franki": 1048, "franz": 1043, "franziska": 1046, "fran\u00e7oi": [0, 362, 1038], "fraud": [265, 328, 1000, 1028], "fraudul": [265, 1000, 1028], "fraudulent_accept": 265, "fraudulent_refus": 265, "fred": [102, 1035, 1048], "freder": 1045, "frederick": 1048, "fredrik": 1043, "free": [0, 44, 64, 88, 175, 176, 182, 212, 261, 311, 372, 377, 378, 379, 386, 390, 396, 418, 454, 612, 674, 863, 913, 993, 996, 1000, 1004, 1024, 1043], "freebsd": 381, "freedom": [43, 122, 175, 200, 202, 204, 271, 544, 659, 800, 1000, 1038], "freeland": 1050, "freestand": 380, "freez": [382, 396, 404, 1024, 1028, 1043], "frei": [73, 442, 456, 1045], "freija": 1043, "freita": [1040, 1042, 1043], "frellwan": 1048, "fremtpl2": 231, "fremtpl2freq": 231, "fremtpl2sev": 231, "french": [231, 317], "freq": [186, 198, 354], "frequenc": [57, 64, 170, 187, 198, 207, 213, 244, 321, 322, 352, 353, 354, 373, 390, 408, 414, 415, 417, 418, 419, 554, 560, 562, 563, 564, 567, 591, 592, 593, 594, 607, 661, 662, 667, 669, 671, 677, 678, 679, 688, 689, 836, 871, 880, 881, 907, 909, 912, 915, 917, 939, 1000, 1001, 1006, 1014, 1018, 1020, 1037, 1039, 1040, 1046, 1053], "frequent": [72, 134, 182, 274, 280, 281, 285, 353, 375, 378, 418, 554, 593, 633, 857, 880, 881, 884, 896, 994, 996, 1004, 1018, 1024, 1053], "frequentist": 531, "fresh": [541, 1024, 1045], "fresh_restart": 541, "fresh_restarts_max_it": 541, "freund": [417, 556, 557], "fri": [43, 149, 187, 373], "frid": [1028, 1038], "friedman": [2, 137, 138, 148, 270, 412, 414, 417, 480, 519, 520, 521, 523, 561, 562, 563, 568, 596, 597, 837, 915, 916, 918, 998, 1000, 1005, 1011, 1020], "friedman2001": 417, "friedman2002": 417, "friedman_ms": [561, 562, 563, 568, 916, 918, 1020, 1051, 1052], "friend": [424, 1039], "friendli": [120, 366, 378, 386, 415, 900, 1016, 1017, 1023, 1024], "fring": [85, 410], "fritsch": [0, 400, 1035, 1036, 1038], "fritzk": 1050, "fro": [415, 541, 543, 550, 696, 1000], "fro_2": [664, 666], "frobeniu": [54, 123, 445, 449, 461, 471, 472, 473, 474, 475, 476, 477, 478, 534, 540, 541, 543, 548, 549, 550, 1000, 1042], "frobenius_norm": 691, "from": [0, 2, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 367, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 965, 966, 967, 968, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "from_dtyp": [43, 143, 265, 327, 390, 417, 564, 565, 1052], "from_estim": [45, 48, 62, 64, 66, 67, 70, 89, 136, 139, 149, 150, 151, 155, 187, 197, 205, 222, 227, 246, 251, 253, 264, 265, 268, 273, 274, 278, 281, 284, 294, 299, 302, 316, 320, 321, 322, 323, 325, 326, 327, 328, 337, 338, 339, 340, 342, 343, 345, 357, 385, 408, 440, 634, 635, 636, 700, 701, 703, 704, 705, 721, 730, 785, 787, 790, 791, 792, 809, 826, 999, 1004, 1011, 1032, 1048, 1049, 1050, 1051, 1052, 1053], "from_predict": [43, 52, 68, 107, 154, 186, 250, 267, 278, 280, 323, 330, 352, 385, 440, 634, 700, 701, 703, 704, 705, 721, 730, 785, 787, 790, 791, 792, 1004, 1032, 1048, 1049, 1050, 1051, 1052, 1053], "frombuffer_empti": 1042, "fromkei": [272, 922], "fromnumer": 384, "front": 1042, "frontal": 373, "frontend": 384, "frontier": [48, 227, 297, 340, 1010], "frozen": 380, "frozentransform": 380, "frsi": 1043, "fruit": [378, 1005], "fr\u00e9minvil": [1052, 1053], "fs1995": 417, "ftfy": 418, "ftorres16": [1049, 1050], "ftp": [168, 375, 685, 686], "ftwo_scor": [745, 1004], "fu": [661, 1039], "fuck": [1047, 1048], "fuction": 987, "fuent": [1036, 1037], "fugled": 1052, "fujikawa": 1042, "fukatani": 1042, "fulfil": [378, 410, 417, 803, 806, 807, 817, 867, 871, 1000], "full": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 365, 366, 367, 371, 373, 376, 378, 380, 383, 386, 390, 392, 393, 396, 406, 410, 412, 414, 415, 418, 424, 427, 433, 434, 443, 447, 449, 451, 461, 490, 491, 494, 495, 499, 500, 503, 504, 505, 506, 507, 508, 510, 513, 538, 540, 544, 553, 562, 563, 570, 571, 635, 651, 653, 657, 672, 683, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 800, 801, 814, 844, 939, 993, 1000, 1003, 1006, 1007, 1011, 1014, 1017, 1024, 1035, 1039, 1041, 1043, 1045, 1046, 1048, 1049, 1051, 1052, 1053], "full_data": 193, "full_lik": 98, "full_model": 293, "full_scor": 182, "fulli": [52, 79, 88, 141, 146, 365, 372, 373, 378, 392, 410, 416, 417, 419, 445, 449, 560, 561, 567, 568, 915, 916, 917, 918, 919, 921, 994, 1000, 1009, 1017, 1023, 1048, 1049], "fullpap": 1017, "fultz": 1048, "fun": [422, 536, 1028], "fun_arg": [422, 536], "func": [50, 107, 139, 186, 194, 231, 304, 378, 411, 467, 702, 871, 1014, 1039, 1041, 1043, 1044, 1052, 1053], "func_metr": 631, "func_min": [613, 614], "funcformatt": 296, "function": [2, 4, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 80, 86, 87, 88, 90, 92, 99, 102, 103, 104, 107, 120, 123, 125, 126, 129, 132, 139, 140, 143, 144, 145, 146, 147, 148, 149, 159, 164, 167, 168, 170, 173, 174, 175, 176, 177, 178, 182, 183, 185, 186, 187, 189, 192, 193, 196, 198, 206, 208, 209, 210, 211, 213, 214, 219, 220, 221, 226, 229, 230, 231, 233, 241, 243, 246, 247, 250, 251, 253, 254, 261, 263, 265, 269, 271, 272, 273, 274, 279, 280, 284, 286, 288, 291, 306, 309, 311, 318, 320, 321, 323, 324, 326, 328, 333, 335, 338, 339, 340, 341, 342, 343, 345, 348, 350, 352, 353, 357, 361, 365, 366, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 390, 391, 392, 396, 401, 404, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 419, 421, 422, 425, 427, 429, 432, 433, 434, 439, 442, 445, 446, 447, 449, 450, 452, 454, 456, 459, 460, 461, 462, 463, 466, 467, 470, 471, 473, 474, 476, 480, 490, 491, 493, 495, 498, 499, 500, 506, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 575, 578, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 610, 611, 612, 613, 614, 618, 622, 623, 625, 626, 630, 631, 634, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 701, 702, 703, 705, 706, 707, 709, 714, 715, 719, 722, 724, 725, 726, 727, 731, 735, 737, 738, 741, 743, 744, 745, 753, 758, 760, 764, 765, 766, 768, 771, 774, 777, 781, 782, 783, 784, 785, 786, 788, 792, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 879, 883, 884, 885, 886, 887, 888, 891, 893, 896, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 931, 941, 943, 944, 945, 950, 951, 962, 963, 969, 970, 973, 974, 977, 978, 987, 992, 993, 994, 995, 997, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "functiontransform": [2, 43, 102, 139, 213, 231, 334, 404, 466, 467, 1014, 1040, 1041, 1043, 1048, 1049, 1050, 1052], "functiontransformerfunctiontransform": 139, "functool": 231, "fundament": [72, 82, 112, 353, 382, 390, 391, 413, 499, 541, 543, 550, 711, 1000, 1004], "funder": 0, "fung": 414, "funnel": [45, 496, 497], "funni": 102, "furlanello": 746, "furrer": 1052, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 103, 109, 116, 120, 137, 142, 144, 167, 170, 175, 186, 188, 193, 198, 233, 238, 247, 265, 268, 271, 272, 278, 325, 341, 353, 360, 365, 378, 390, 392, 404, 409, 410, 412, 415, 417, 418, 420, 446, 454, 464, 518, 535, 538, 585, 617, 625, 631, 661, 662, 669, 670, 671, 679, 680, 681, 694, 698, 740, 777, 781, 784, 795, 796, 843, 849, 850, 857, 858, 885, 887, 907, 909, 912, 951, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1044, 1048], "furthermor": [43, 52, 72, 140, 187, 188, 250, 251, 253, 291, 352, 353, 365, 367, 385, 410, 415, 417, 418, 565, 593, 609, 622, 707, 739, 758, 760, 798, 907, 1000, 1012, 1038, 1042], "fuse": [379, 1041, 1051], "fusion": 390, "futur": [0, 52, 175, 214, 253, 323, 326, 378, 382, 392, 393, 404, 414, 418, 499, 537, 638, 926, 973, 1005, 1019, 1020, 1028, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "futurewarn": [378, 386, 1042, 1043, 1044, 1046, 1048, 1051, 1052], "fuxin": 645, "fw": 691, "fwe": 595, "f\u00e9lix": [1035, 1037, 1038, 1039, 1043], "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 86, 88, 98, 102, 113, 116, 127, 134, 137, 145, 146, 171, 172, 173, 178, 182, 185, 186, 196, 201, 213, 214, 215, 217, 231, 238, 246, 247, 256, 265, 271, 275, 276, 282, 290, 297, 316, 328, 333, 347, 348, 354, 361, 365, 370, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 390, 392, 401, 404, 406, 408, 410, 412, 414, 415, 417, 418, 419, 420, 422, 439, 445, 446, 449, 451, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 506, 531, 534, 536, 537, 540, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 596, 597, 600, 607, 613, 614, 620, 625, 626, 633, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 689, 693, 695, 700, 719, 723, 731, 741, 743, 766, 781, 788, 791, 802, 804, 805, 806, 807, 809, 810, 812, 821, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 854, 856, 857, 858, 859, 863, 864, 865, 867, 870, 872, 873, 874, 877, 879, 880, 883, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 950, 951, 963, 993, 994, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1018, 1019, 1020, 1024, 1027, 1028, 1035, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "g0g0gadget": 1045, "g2015": 1011, "g_": 410, "g_i": [417, 652], "g_j": [651, 672, 683], "ga": 0, "gaaca": 178, "gaatattaggccga": 390, "gabor": 1049, "gabriel": [1043, 1044, 1045, 1048, 1049], "gael": [0, 399, 1022, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "gaido": 1044, "gaidon": 1035, "gain": [2, 86, 149, 235, 278, 291, 293, 327, 328, 331, 352, 353, 360, 377, 384, 386, 390, 417, 499, 535, 560, 564, 565, 567, 729, 759, 800, 801, 836, 915, 917, 1005, 1009, 1017, 1020, 1038, 1042, 1045], "gain_matrix": 265, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 373, 378, 380, 392, 396, 403, 1025, 1035, 1039, 1042], "galli": 1047, "gallopoulo": 415, "galvez": 1040, "gambl": 51, "gameiro": 1049, "gamma": [2, 43, 44, 45, 46, 48, 50, 67, 68, 125, 155, 161, 191, 227, 240, 245, 246, 269, 271, 273, 276, 282, 322, 330, 331, 333, 335, 338, 340, 341, 344, 345, 347, 350, 413, 415, 417, 420, 454, 538, 565, 622, 623, 642, 643, 644, 646, 647, 648, 651, 683, 688, 694, 727, 750, 755, 762, 769, 778, 779, 780, 800, 814, 817, 902, 903, 904, 909, 910, 911, 912, 913, 993, 996, 1000, 1002, 1017, 1019, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1049, 1050, 1051], "gamma_": [538, 1051], "gamma_0": [256, 262], "gamma_2d_rang": 341, "gamma_bound": 623, "gamma_k": 413, "gamma_rang": 341, "gammaregressor": [2, 231, 321, 324, 683, 1000, 1046, 1049, 1050], "gandenberg": 1044, "ganesh": [1040, 1052], "ganevgv": 1045, "gangesh": 1047, "gangwar": 1042, "ganiev": [1040, 1041, 1042], "ganssl": 1042, "gap": [43, 52, 149, 352, 373, 414, 473, 474, 480, 591, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 824, 915, 916, 917, 918, 1000, 1001, 1043, 1047, 1049], "garagecar": [143, 154], "garagefinish": 143, "garagetyp": 154, "garageyrblt": 107, "garbag": 1047, "garcia": 1048, "garc\u00eda": [1044, 1045, 1050], "gardin": 372, "gardner": [1043, 1044], "garg": [1045, 1046], "gargsya": 1045, "gari": [373, 1042], "garret": 1039, "garreta": [1037, 1038], "garrett": 1039, "garri": 375, "garriga": [277, 414, 832], "gasmi": 1049, "gasquez": 1042, "gate": [375, 1048], "gather": [324, 326, 386, 393, 410, 1014, 1028], "gatsbi": 1017, "gaug": 186, "gaull": 767, "gaurav": [1043, 1044, 1045, 1046, 1047, 1049], "gauravahlawat": [1043, 1044], "gaussian": [2, 8, 19, 28, 43, 44, 46, 48, 64, 66, 67, 70, 79, 80, 81, 88, 90, 94, 98, 109, 110, 111, 112, 113, 118, 121, 122, 123, 129, 135, 136, 142, 146, 150, 152, 161, 182, 193, 196, 198, 200, 203, 223, 224, 225, 226, 240, 244, 246, 258, 259, 282, 296, 301, 304, 306, 314, 315, 335, 338, 345, 346, 350, 370, 374, 380, 383, 392, 410, 412, 415, 416, 422, 454, 471, 472, 473, 474, 475, 476, 477, 478, 499, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 533, 535, 547, 552, 553, 556, 566, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 628, 630, 646, 647, 675, 680, 683, 706, 727, 744, 755, 779, 800, 801, 803, 817, 842, 843, 844, 845, 846, 847, 848, 852, 883, 887, 895, 899, 900, 901, 998, 1000, 1001, 1002, 1010, 1025, 1026, 1028, 1029, 1030, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1049], "gaussian_filt": [53, 80, 81, 87], "gaussian_process": [2, 66, 67, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 392, 420, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 646, 1005, 1025, 1038, 1041, 1042], "gaussianhmm": 1035, "gaussianmixtur": [2, 79, 90, 257, 258, 259, 260, 261, 262, 416, 800, 1003, 1041, 1043, 1044, 1048, 1049, 1051, 1053], "gaussianmixturegaussianmixtur": 261, "gaussiannb": [2, 61, 62, 64, 67, 156, 273, 361, 408, 417, 439, 572, 842, 843, 844, 846, 868, 998, 1005, 1006, 1039, 1040, 1041, 1043, 1048, 1051], "gaussiannois": 380, "gaussianprocessclassifi": [2, 66, 67, 171, 172, 173, 174, 178, 392, 420, 614, 622, 623, 625, 626, 1005, 1041, 1043, 1045, 1049], "gaussianprocessregressor": [2, 170, 175, 176, 177, 178, 179, 420, 613, 616, 617, 618, 619, 620, 624, 627, 628, 646, 1005, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "gaussianprocessregressorifittedgaussianprocessregressor": 175, "gaussianrandomproject": [2, 900, 1016, 1036, 1049, 1051, 1052], "gauthier": 1049, "gauz": 1043, "gave": [64, 408, 803, 806, 807, 817, 874], "gavin": [631, 994], "gaynor": 404, "ga\u00ebl": [393, 1028], "gb": [157, 417, 556, 636], "gbc": 361, "gbdt": [139, 187, 265, 320, 321, 326, 383, 417], "gbdt_appli": 139, "gbdt_applyfunctiontransform": 139, "gbdt_cst": 321, "gbdt_leaves_yield": 139, "gbdt_model": 139, "gbdt_no_cst": [151, 321], "gbdt_pipelin": 154, "gbdt_with_monotonic_cst": 151, "gbdt_with_monotonic_cst_df": 151, "gbgradientboostingregressor": 157, "gbm": [145, 417, 1038], "gbm_early_stop": 144, "gbm_full": 144, "gbp": 1028, "gbr": 146, "gbr_l": 146, "gbrt": [43, 52, 213, 417], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 365, "gc": 49, "gca": [47, 79, 95, 116, 122, 173, 218, 222, 224, 240, 253, 275, 299, 301, 312, 337, 339, 342, 343, 1011, 1032], "gcc": [376, 379, 384, 390], "gcf": [47, 1011], "gcv": [676, 678], "gcv_mode": [676, 1037], "gd": [51, 157], "gdb": [379, 381, 1027], "gdex1": 1045, "ge": [51, 995, 1006, 1047], "ge0": 1020, "gear": 1022, "geb": 57, "gebremichael": [1050, 1051], "gedeck": 1042, "geevarghes": 1050, "gefel": 1004, "gegr": 418, "gei": 1037, "geiger": [1052, 1053], "geist": 375, "gelavizh": 1046, "gelder": 1046, "gemm": 1053, "gen": 784, "gen_batch": [2, 387, 955], "gen_cov": 111, "gen_even_slic": [2, 213, 387, 954], "gender": [252, 880, 1014], "gender_femal": 880, "gender_mal": 880, "gene": [178, 372, 407, 453, 516, 596, 597, 854, 887], "gener": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 98, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 171, 172, 173, 174, 175, 178, 181, 182, 185, 186, 187, 188, 189, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 365, 366, 370, 371, 373, 375, 379, 380, 381, 382, 383, 384, 386, 387, 390, 391, 404, 407, 408, 410, 414, 416, 418, 419, 420, 422, 426, 431, 433, 439, 442, 445, 448, 449, 451, 454, 456, 460, 461, 462, 464, 466, 467, 469, 471, 474, 476, 484, 485, 486, 490, 493, 495, 498, 499, 500, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 541, 543, 544, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 617, 618, 621, 622, 623, 625, 626, 630, 631, 632, 633, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 688, 689, 692, 693, 694, 695, 696, 697, 698, 704, 707, 709, 720, 724, 726, 727, 740, 746, 760, 781, 784, 788, 796, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 837, 838, 839, 840, 841, 847, 848, 850, 852, 853, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 899, 900, 907, 908, 909, 910, 912, 913, 916, 918, 919, 920, 921, 945, 946, 950, 951, 954, 955, 968, 972, 974, 977, 992, 993, 994, 996, 998, 999, 1001, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1016, 1017, 1019, 1020, 1025, 1026, 1027, 1028, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "generalis": [791, 1004, 1024], "generaliz": [345, 417], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 149, "generate_onli": [945, 1045], "generate_synthetic_data": 53, "generickernelmixin": [178, 1045], "genericunivariateselect": [2, 419, 598, 599, 601, 602, 603, 605, 1049, 1051, 1052], "generos": 378, "genesi": [1049, 1051], "genet": 1023, "genoa": 375, "genom": [58, 516, 1023], "genotyp": 372, "gensim": 1023, "gentil": [375, 1047], "gentli": 415, "genvalen": [1047, 1048, 1049, 1050, 1051], "geodes": [233, 691, 1001], "geoff": [838, 1005], "geoffrei": [864, 865, 1008, 1046, 1047, 1048, 1049, 1051], "geograph": [43, 50, 304, 373, 501], "geometr": [122, 410, 691, 707, 734, 760, 1001, 1043], "geometri": [74, 410, 1001, 1007], "geomspac": 326, "georg": [45, 373, 410, 1041, 1047, 1048, 1049, 1050], "georgi": [1043, 1046], "georgiamaydai": 1050, "geospati": [304, 416], "geovan": [1048, 1049], "geq": [244, 408, 415, 417, 1000, 1004, 1014, 1018, 1019], "ger": 418, "gerhard": [45, 373], "german_credit": 265, "germer": [1050, 1051], "geroldcsend": 1048, "geron": [1043, 1048, 1049], "gerstein": 516, "gertrud": 1042, "gertz": 452, "gervai": [1037, 1038], "gesa": 1047, "gesdd": 951, "gesvd": 951, "get": [2, 3, 43, 44, 48, 51, 52, 55, 57, 72, 85, 89, 121, 125, 146, 149, 156, 165, 168, 170, 175, 176, 181, 186, 187, 188, 189, 206, 215, 228, 231, 233, 247, 248, 269, 272, 273, 275, 279, 282, 284, 288, 291, 296, 304, 312, 320, 327, 331, 334, 338, 341, 343, 346, 350, 352, 354, 356, 366, 371, 372, 373, 376, 378, 379, 380, 381, 383, 384, 385, 392, 396, 404, 406, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 424, 425, 426, 431, 433, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 698, 702, 724, 725, 726, 727, 729, 735, 736, 745, 759, 766, 767, 772, 788, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 940, 942, 943, 944, 950, 951, 956, 962, 993, 999, 1000, 1001, 1003, 1004, 1014, 1017, 1018, 1019, 1020, 1024, 1032, 1035, 1038, 1041, 1043, 1046, 1048, 1049, 1052], "get_adjacency_matrix": 55, "get_arrai": [847, 848], "get_bin_se": 450, "get_cmap": [62, 64, 346], "get_color": 46, "get_config": [2, 470, 784, 905, 970, 1050], "get_covari": [535, 537, 544], "get_data": [511, 512], "get_data_hom": [2, 47], "get_depth": [915, 916, 917, 918, 1044], "get_feature_nam": [323, 1043, 1044, 1046, 1047, 1048], "get_feature_names_out": [2, 54, 57, 186, 188, 323, 352, 353, 354, 373, 380, 392, 411, 418, 426, 431, 434, 444, 445, 447, 449, 451, 466, 469, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 569, 570, 571, 572, 573, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 1014, 1048, 1049, 1050, 1051, 1052, 1053], "get_figur": 134, "get_full_scor": 182, "get_height": [47, 144], "get_impute_it": 182, "get_impute_knn_scor": 182, "get_impute_mean": 182, "get_impute_zero_scor": 182, "get_indic": [57, 425, 453, 455], "get_initial_mean": 259, "get_legend_handles_label": [149, 246, 273, 278], "get_lin": 307, "get_metadata_rout": [247, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 961, 962, 963, 1004, 1052], "get_metr": 702, "get_minibatch": 47, "get_n_cal": [847, 848], "get_n_leav": [915, 916, 917, 918, 1044], "get_n_split": [392, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "get_nam": 313, "get_output_feature_nam": 1049, "get_param": [272, 381, 392, 420, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1045, 1046, 1047, 1049, 1050], "get_precis": [471, 472, 473, 474, 475, 476, 477, 478, 535, 537, 544], "get_redirect": 55, "get_routing_for_object": [2, 247, 960], "get_scor": [2, 327, 392, 736, 1042, 1051], "get_scorer_nam": [2, 409, 735, 1004, 1049, 1052], "get_scores_for_imput": 182, "get_shap": [57, 425, 453, 455], "get_stop_word": [591, 592, 594], "get_submatrix": [425, 453, 455], "get_subplotspec": 385, "get_support": [164, 168, 322, 584, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1037], "get_tag": 2, "get_tree_stat": [847, 848], "get_untrusted_typ": 404, "get_width": [47, 144], "get_x": [47, 144], "get_xaxi": [256, 301, 311], "get_xlim": [111, 208, 218, 311], "get_xticklabel": 282, "get_yaxi": [301, 311], "get_ybound": 86, "get_ylim": [208, 284, 311, 312], "getattr": [43, 47, 265, 311, 380, 392, 1051], "getgaurav2": 1045, "getmoredataget": 398, "gettempdir": 1007, "getter": [471, 472, 473, 474, 475, 476, 477, 478, 596, 597, 600], "geurt": [417, 558, 559, 560, 561, 568, 569, 917, 918], "gewili": [1050, 1051], "gh": 378, "ghahramani": 902, "gharibi": 1045, "ghg": 1041, "ghislain": 1047, "gholdman1": 1046, "ghorai": 1043, "ghosh": [0, 400, 410, 1035, 1036, 1052, 1053], "gia": 1046, "giancarlo": 1049, "gianr": 1050, "gibb": [863, 1009, 1023], "gideon": 1045, "giessel": 1041, "gigant": [1043, 1045, 1050, 1051], "gijsber": 1049, "gil": [365, 366, 379, 1038, 1043, 1044, 1047, 1048, 1052], "gilad": 1028, "gilberto": 1043, "gilbertson": [1049, 1050], "gilch": 1042, "gile": [1038, 1039], "gill": [0, 400, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "gilliam": 1042, "gilmor": 1039, "gim": 1047, "gini": [64, 189, 213, 231, 252, 283, 322, 556, 557, 560, 561, 562, 563, 567, 568, 569, 791, 915, 916, 917, 918, 993, 1012, 1020, 1043, 1044, 1051, 1052], "gionanidi": 1049, "giorgio": [1040, 1041, 1042], "giorgiop": 1040, "giotto": 1023, "giovanni": [1041, 1043], "gist": [378, 386, 1027], "git": [376, 380, 382, 384, 386, 1027, 1031, 1035, 1051, 1053], "github": [0, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 291, 309, 317, 321, 322, 324, 325, 327, 332, 360, 376, 377, 381, 382, 383, 384, 386, 390, 392, 393, 404, 406, 695, 1022, 1023, 1027, 1045], "githubusercont": 51, "gitter": [1042, 1043], "giudic": 1047, "giusepp": [1043, 1044], "give": [2, 43, 51, 52, 53, 61, 62, 74, 79, 82, 93, 95, 97, 102, 103, 107, 122, 145, 170, 175, 179, 181, 186, 187, 202, 204, 210, 213, 214, 215, 240, 262, 265, 268, 273, 280, 293, 297, 300, 309, 323, 324, 328, 334, 365, 367, 373, 375, 377, 378, 380, 384, 386, 390, 391, 392, 393, 398, 404, 407, 408, 410, 411, 412, 415, 417, 418, 420, 422, 435, 448, 449, 451, 453, 461, 474, 499, 502, 506, 536, 541, 552, 553, 554, 555, 560, 561, 567, 568, 569, 596, 597, 600, 610, 611, 641, 650, 664, 668, 679, 723, 733, 739, 742, 797, 803, 806, 807, 817, 828, 829, 830, 832, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 884, 885, 887, 888, 896, 1000, 1004, 1007, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1028, 1035, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1051], "given": [2, 8, 30, 46, 49, 50, 52, 64, 66, 72, 82, 91, 93, 109, 115, 121, 125, 140, 149, 150, 152, 154, 170, 177, 186, 187, 198, 213, 214, 217, 231, 234, 240, 244, 245, 247, 249, 250, 251, 265, 267, 271, 272, 273, 274, 280, 285, 294, 297, 298, 299, 313, 317, 323, 328, 352, 353, 354, 359, 360, 365, 367, 373, 377, 378, 384, 386, 387, 390, 392, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 427, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 460, 461, 462, 463, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 486, 489, 499, 504, 506, 508, 526, 536, 537, 539, 541, 542, 543, 546, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 596, 597, 604, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 634, 635, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 690, 691, 693, 694, 700, 701, 702, 703, 704, 705, 707, 708, 709, 715, 717, 720, 721, 723, 727, 729, 730, 737, 739, 740, 743, 755, 758, 759, 761, 762, 767, 777, 781, 784, 785, 787, 790, 791, 792, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 893, 894, 896, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 926, 937, 938, 939, 959, 960, 962, 987, 991, 993, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "gkevinyen5418": 1043, "gkf": 414, "gkiasta": 1048, "gl": [168, 375], "glad": 378, "glanc": [288, 377], "glaser": [1043, 1044], "glass": 373, "glasso": [412, 480], "glaxosmithklin": 51, "gleb": [1048, 1050, 1051, 1052], "glemaitr": [1044, 1045, 1047], "glen": 1048, "glenn": 1041, "glennfrutiz": 1049, "glibc": 386, "glm": [213, 231, 321, 651, 672, 683, 1000, 1035, 1046], "glm_freq": 231, "glm_pure_premium": 231, "glm_sev": 231, "glmnet": [649, 650, 1035], "glob": 47, "global": [2, 3, 47, 49, 77, 90, 120, 213, 233, 234, 254, 280, 308, 321, 361, 365, 366, 384, 390, 392, 410, 420, 444, 454, 464, 470, 593, 629, 635, 691, 694, 695, 698, 710, 732, 733, 741, 786, 787, 790, 791, 821, 888, 903, 905, 973, 993, 1001, 1004, 1010, 1014, 1020, 1028, 1043, 1050], "global_dtyp": 366, "global_random_se": 366, "globular": [95, 410], "glorot": [864, 865], "glossari": [2, 361, 378, 380, 384, 421, 422, 439, 442, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 466, 469, 471, 474, 476, 490, 493, 495, 498, 500, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 597, 605, 610, 611, 613, 614, 630, 635, 637, 642, 643, 644, 645, 649, 650, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 690, 691, 692, 693, 694, 695, 696, 697, 698, 704, 777, 781, 784, 796, 800, 801, 803, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 863, 864, 865, 866, 869, 872, 884, 888, 896, 899, 900, 902, 903, 907, 908, 909, 912, 915, 916, 917, 918, 950, 951, 974, 977, 993, 994, 1000, 1043], "glu": [168, 375], "glushchenkov": 1049, "gl\u00f2ria": [1048, 1050], "gm": 801, "gmil": 373, "gmm": [79, 91, 92, 183, 255, 257, 260, 261, 262, 507, 515, 801, 822, 1003, 1025, 1035, 1036, 1039, 1040, 1041], "gmm_": 1036, "gmm_bic_scor": 261, "gmmgmm": 398, "gmmhmm": [1035, 1036], "gnb": [61, 62, 64, 156, 417, 572, 1006], "gnb_isoton": 62, "gnb_sigmoid": 62, "gnu": 376, "go": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 373, 378, 382, 383, 387, 393, 396, 411, 415, 417, 419, 445, 564, 565, 723, 886, 928, 954, 955, 1014, 1020, 1024, 1046], "goadrich": 1004, "goal": [49, 55, 58, 64, 85, 90, 116, 149, 181, 187, 191, 213, 228, 231, 249, 250, 265, 268, 269, 352, 366, 367, 373, 383, 384, 392, 393, 395, 401, 415, 419, 545, 551, 593, 596, 742, 1004, 1007, 1009, 1010, 1018, 1019, 1020, 1028, 1043], "god": [57, 352, 353], "godbol": 786, "goe": [43, 72, 139, 186, 360, 378, 417, 473, 474, 480, 560, 561, 567, 568, 569, 915, 916, 917, 918, 1014, 1018], "goetz": [1042, 1043], "goh": 1052, "gohlk": 1040, "goix": [0, 1039, 1041, 1042, 1043, 1044], "gold": [69, 207, 214, 216, 219, 223, 227, 230, 257, 262, 278, 297, 340, 384], "goldbaum": 1053, "goldberg": [856, 1007], "goldfarb": 1000, "goldman": 51, "goldstein": [187, 1011], "goldszmidt": 1016, "gollonet": [0, 400], "goltermann": 1047, "golub": [537, 845, 887], "golubin": 1042, "gome": [1048, 1049, 1053], "gomez": [1043, 1050, 1052], "gommer": [1038, 1041, 1042, 1050, 1051, 1053], "goncalo": [1042, 1043], "gone": [1035, 1036], "gonthier": 1046, "goo": [168, 375], "good": [43, 48, 58, 62, 64, 75, 79, 80, 82, 85, 86, 88, 91, 106, 112, 116, 129, 140, 142, 145, 146, 149, 171, 175, 181, 186, 198, 202, 213, 214, 219, 228, 238, 240, 244, 247, 250, 257, 259, 264, 265, 271, 277, 284, 309, 316, 317, 322, 328, 330, 335, 341, 352, 353, 361, 365, 366, 367, 377, 379, 380, 381, 384, 386, 390, 392, 407, 408, 410, 412, 414, 415, 417, 418, 419, 420, 439, 441, 446, 537, 562, 564, 565, 593, 633, 643, 650, 651, 659, 661, 662, 664, 672, 683, 693, 697, 726, 734, 745, 767, 832, 901, 926, 951, 993, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1024, 1028, 1041], "goodby": 378, "goodman": [1035, 1040], "googl": [0, 55, 390, 410, 444, 951, 1022, 1035], "gool": 1004, "gorb": 1047, "gordon": [57, 1041, 1045, 1047, 1049], "gorelli": [1043, 1044, 1048, 1050, 1053], "gorgolewski": [0, 400, 1035, 1038], "gorilla": 352, "gorinevski": 1000, "gorodkin": 746, "gorro\u00f1o": [1046, 1048, 1049], "got": [176, 247, 278, 361, 383, 554, 652, 668, 1048, 1050, 1052], "gotten": [1000, 1014], "gou": 410, "gouillart": 1035, "goupil": [0, 362], "gov": [55, 375], "govern": [186, 361, 365, 378, 392, 1028], "govin": 1041, "go\u0144da": 1050, "gp": [173, 178, 420, 613, 614, 625, 1041], "gp_fix": 171, "gp_opt": 171, "gpapadok": [1045, 1049], "gpassino": 1039, "gpc": [2, 66, 142, 152, 161, 169, 175, 176, 178, 183, 223, 224, 225, 226, 246, 260, 306, 314, 335, 346, 350, 507, 613, 614, 616, 617, 622, 623, 625, 626, 706, 744, 1025, 1026, 1030, 1045], "gpc_rbf_anisotrop": 172, "gpc_rbf_isotrop": 172, "gperftool": 381, "gplearn": 1023, "gpr": [2, 169, 170, 171, 177, 179, 183, 499, 613, 614, 616, 617, 618, 619, 624, 625, 626, 627, 628, 1025, 1026, 1030, 1045], "gpr_model": 179, "gprof": 381, "gpu": [325, 328, 406, 1008, 1024, 1052], "gr": 900, "grab": 378, "gracefulli": [1038, 1039], "grad": [384, 1028], "gradd": 384, "grade": 1004, "gradi": 1045, "gradient": [2, 14, 46, 52, 80, 99, 103, 133, 134, 135, 138, 139, 141, 151, 154, 157, 175, 176, 177, 183, 188, 189, 192, 194, 200, 215, 236, 240, 245, 270, 272, 297, 307, 311, 315, 317, 324, 327, 340, 392, 409, 410, 420, 454, 464, 468, 469, 490, 492, 499, 504, 506, 523, 556, 557, 562, 563, 564, 565, 567, 568, 589, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 634, 635, 637, 638, 642, 651, 652, 661, 662, 671, 672, 675, 677, 679, 680, 681, 683, 690, 695, 697, 698, 744, 745, 751, 753, 793, 803, 806, 807, 808, 824, 830, 833, 863, 864, 865, 868, 880, 881, 911, 977, 1001, 1004, 1007, 1008, 1009, 1010, 1023, 1025, 1026, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1050, 1052], "gradient_boost": [139, 1037, 1038, 1044], "gradientboost": 1040, "gradientboostingclassifi": [2, 139, 145, 148, 313, 361, 390, 556, 564, 635, 636, 1005, 1011, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "gradientboostingclassifier__learning_r": 313, "gradientboostingregressor": [2, 46, 144, 146, 147, 154, 157, 365, 383, 390, 557, 565, 635, 636, 1000, 1004, 1005, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "gradientboostingregressorgradientboostingregressor": 157, "gradual": [217, 864, 865, 945, 946, 1018], "graduat": 375, "graham": [1040, 1041], "grai": [45, 53, 80, 81, 83, 84, 86, 120, 123, 148, 168, 211, 213, 231, 244, 248, 249, 278, 308, 375, 415, 496, 497, 505, 524, 1046], "grain": [43, 67, 72, 245, 262, 313, 384, 418, 448, 1024], "gram": [2, 183, 192, 247, 380, 415, 418, 491, 527, 551, 591, 592, 593, 594, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 684, 685, 686, 687, 688, 689, 770, 993, 1000, 1014, 1019, 1025, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1049], "gram_test": 1019, "gram_train": 1019, "gramfort": [0, 120, 393, 399, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "grammar": 378, "grant": [0, 250, 265, 378], "grape": 411, "graph": [2, 55, 62, 74, 79, 80, 99, 100, 178, 233, 268, 291, 293, 333, 365, 378, 381, 392, 407, 412, 421, 443, 446, 447, 454, 455, 459, 464, 465, 473, 474, 480, 514, 588, 589, 691, 694, 695, 698, 785, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 862, 903, 957, 1001, 1004, 1007, 1009, 1017, 1020, 1023, 1028, 1035, 1042, 1043, 1045, 1048, 1050], "graph_laplacian": 1042, "graph_lasso": [480, 1043], "graph_model": 293, "graph_shortest_path": [387, 1048], "graphic": [8, 57, 112, 187, 334, 352, 353, 354, 373, 384, 410, 412, 415, 795, 796, 800, 837, 919, 1004, 1005, 1011, 1023], "graphical_lasso": [2, 387, 473, 474, 1043, 1051], "graphicallasso": [2, 113, 412, 471, 472, 474, 475, 476, 477, 478, 480, 1043, 1051], "graphicallassocv": [2, 51, 113, 401, 412, 473, 475, 476, 477, 478, 480, 1043, 1047, 1049, 1051, 1053], "graphicallassocvifittedgraphicallassocv": 51, "graphlasso": [473, 1040, 1043], "graphlassocv": [474, 1037, 1043], "graphviz": [919, 1020], "grasp": [285, 1019, 1024], "grassberg": [610, 611], "grate": 1028, "graviton": 386, "gray_r": [68, 123, 173, 234, 309, 330, 331], "grayscal": 68, "greasemonkei": 386, "great": [88, 185, 186, 211, 361, 378, 390, 415, 767, 1024, 1028, 1035, 1042], "greater": [62, 118, 134, 136, 186, 230, 245, 250, 259, 265, 277, 290, 297, 298, 356, 365, 383, 392, 408, 409, 410, 413, 417, 443, 447, 448, 451, 454, 465, 474, 539, 544, 560, 561, 562, 563, 564, 565, 567, 568, 569, 596, 597, 600, 613, 614, 631, 643, 645, 667, 669, 670, 674, 679, 680, 681, 695, 712, 715, 723, 738, 739, 742, 745, 791, 798, 800, 801, 837, 849, 850, 857, 858, 864, 865, 870, 885, 897, 901, 904, 907, 908, 915, 916, 917, 918, 951, 972, 993, 999, 1000, 1001, 1004, 1005, 1010, 1014, 1019, 1020, 1038, 1043, 1046, 1048, 1049, 1050, 1052], "greater_is_bett": [146, 328, 745, 1004], "greatest": [88, 396, 410, 874, 1043], "greatli": [211, 245, 325, 378, 386, 454, 1007, 1020, 1041, 1049], "greedi": [168, 417, 419, 449, 451, 462, 562, 563, 605, 1000, 1020], "greedili": [116, 168, 410, 414, 419, 462], "greek": [51, 55, 59, 71, 86, 99, 123, 183, 410, 464, 1025], "green": [63, 112, 118, 137, 151, 156, 170, 191, 238, 307, 312, 316, 321, 327, 392, 1005, 1043, 1044, 1046, 1047], "greenhal": 1043, "greg": [1028, 1041, 1042, 1044, 1045], "gregori": [1041, 1045, 1046, 1047, 1048], "gregorystrubel": 1048, "gregov": 1043, "grei": [44, 281, 311, 348, 373], "grep": 378, "greyscal": 309, "grid": [2, 45, 47, 49, 50, 58, 62, 63, 64, 77, 87, 94, 103, 104, 105, 106, 109, 113, 142, 152, 163, 165, 167, 174, 183, 185, 186, 187, 202, 231, 238, 245, 246, 247, 251, 256, 261, 263, 265, 268, 270, 272, 275, 276, 278, 283, 290, 293, 295, 296, 304, 309, 313, 314, 316, 338, 340, 341, 347, 352, 373, 380, 385, 390, 392, 405, 411, 414, 416, 417, 418, 450, 463, 466, 474, 501, 505, 518, 525, 634, 635, 636, 650, 653, 656, 657, 659, 662, 664, 666, 679, 716, 731, 745, 788, 791, 803, 806, 807, 814, 817, 819, 833, 834, 867, 912, 997, 999, 1004, 1007, 1011, 1024, 1025, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1049, 1051, 1052, 1053], "grid_encod": 314, "grid_model": 293, "grid_posit": [62, 64], "grid_resolut": [187, 322, 339, 634, 635, 636], "grid_scores_": [1041, 1047, 1048], "grid_search": [106, 140, 252, 261, 269, 279, 327, 411, 1037, 1038, 1039, 1040, 1041, 1042], "grid_siz": [50, 94, 304, 373, 501], "grid_to_graph": [2, 81, 84, 87, 410, 418, 1048], "grid_tograph": 1038, "grid_valu": [187, 636, 1011, 1051], "gridsearch": [87, 109, 282], "gridsearchcv": [2, 43, 87, 101, 103, 105, 106, 109, 127, 140, 183, 246, 252, 261, 263, 265, 269, 270, 271, 272, 276, 279, 282, 288, 293, 295, 309, 313, 322, 326, 327, 341, 345, 361, 366, 380, 390, 392, 401, 406, 411, 414, 417, 420, 424, 505, 523, 543, 544, 578, 602, 610, 656, 706, 745, 814, 817, 867, 877, 907, 915, 993, 1000, 1004, 1008, 1018, 1019, 1024, 1025, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053], "gridsearchcvifittedgridsearchcv": [104, 261, 265, 269, 271], "gridsearchcvinot": 252, "gridsiz": 244, "gridspec": [62, 64, 98, 256, 385], "gridspecfromsubplotspec": 385, "griffith": [1043, 1044], "grigorev": 1040, "grigorio": 737, "grime": [692, 696, 1001], "grinsztajn": 1052, "grisel": [0, 393, 399, 1022, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "griva": [1049, 1050], "grlivarea": 143, "grobler": [0, 400, 1035, 1036, 1037, 1038], "groceryheist": 1048, "groenen": [693, 697, 1001], "grok": 489, "groothui": [630, 994], "grother": 375, "ground": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 123, 150, 178, 198, 207, 213, 214, 250, 262, 274, 353, 392, 410, 706, 707, 708, 711, 715, 716, 717, 718, 720, 721, 724, 726, 727, 729, 731, 732, 733, 737, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 786, 787, 788, 789, 790, 793, 794, 798, 799, 1004, 1017, 1043], "ground_truth": [88, 298], "group": [0, 2, 51, 72, 75, 88, 91, 93, 156, 187, 189, 213, 234, 247, 262, 266, 317, 327, 332, 353, 360, 373, 383, 392, 393, 401, 410, 416, 417, 418, 435, 448, 498, 591, 592, 594, 597, 721, 791, 803, 804, 805, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 832, 834, 880, 881, 917, 918, 945, 946, 1000, 1001, 1003, 1004, 1005, 1014, 1020, 1021, 1023, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1053], "group_1": 880, "group_2": 880, "group_3": 880, "group_by_dynam": 175, "group_df": 221, "group_kfold": 804, "group_prior": 266, "groupbi": [43, 149, 187, 221, 231], "groupkfold": [2, 266, 276, 327, 401, 414, 597, 808, 809, 810, 811, 812, 821, 826, 828, 829, 830, 831, 834, 1041, 1048], "groupshufflesplit": [2, 266, 414, 1041], "grow": [43, 52, 74, 191, 198, 293, 348, 354, 365, 390, 406, 412, 417, 418, 560, 561, 562, 563, 567, 568, 569, 813, 847, 848, 915, 916, 917, 918, 993, 1004, 1007, 1020, 1028, 1038, 1039], "grower": [149, 417, 564, 565], "grown": [375, 417, 556, 557, 558, 559, 560, 561, 567, 568, 915, 916, 917, 918, 1020], "growth": [1004, 1040, 1041], "grumman": 51, "grusak": 1045, "gryllo": [1040, 1043], "gryze": [1037, 1040], "grzegorz": [1042, 1045], "gs_time": 282, "gsh": 282, "gsh_time": 282, "gsiisg": 1050, "gsk": 51, "gss": [414, 805], "gt": [68, 103, 104, 139, 154, 186, 261, 269, 283, 378, 382, 398], "gu": [1046, 1047, 1049], "guan": 1045, "guangguo": 1041, "guarante": [46, 47, 64, 111, 112, 149, 186, 221, 244, 290, 291, 311, 353, 361, 367, 372, 386, 387, 404, 410, 414, 415, 418, 448, 539, 648, 661, 662, 671, 675, 677, 679, 681, 690, 697, 805, 820, 823, 847, 848, 885, 887, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 914, 933, 934, 996, 1000, 1001, 1003, 1007, 1012, 1016, 1020, 1045, 1053], "gubri": [1043, 1044], "gudmalwar": 1047, "gued": 1053, "guerin": [1041, 1042], "guess": [55, 134, 142, 414, 417, 418, 535, 541, 543, 544, 550, 791, 1004, 1018], "guestrin": 417, "guha": 1050, "gui": [1036, 1046], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 88, 101, 120, 140, 179, 183, 186, 187, 200, 233, 278, 297, 298, 301, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 376, 377, 378, 383, 384, 385, 386, 391, 392, 393, 398, 401, 411, 417, 421, 422, 423, 424, 427, 433, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 947, 1004, 1005, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1045, 1052, 1053], "guidanc": [390, 420], "guidelin": [2, 25, 377, 381, 383, 384, 386, 410, 417], "guiel": 497, "guilherm": 1038, "guillaum": [0, 399, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "guillem": [1044, 1045, 1050], "guillemot": [0, 1041, 1042], "guillermo": 1049, "guiniol": 1042, "guitar": 1050, "guitton": 1047, "guiweb": 1048, "gulati": [1040, 1041, 1042], "gun": [57, 373], "gunduz": 1053, "gunesbayir": [1050, 1051], "gunnar": [538, 951], "guo": 1048, "guoci": 1042, "gupta": [901, 1016, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "gustafson": [1050, 1051], "gustav": 1041, "gustavo": [1043, 1044, 1049], "gutierrez": 1045, "guttman": 697, "guyon": [518, 596, 597, 1004], "guyon2015": 1004, "gwulf": [1039, 1040], "gyeongja": 1053, "gz": [47, 382, 396, 511, 512], "gzip": 1035, "g\u00e9ron": 1043, "g\u00f3rski": [1046, 1047], "g\u00f6khan": [44, 415, 538], "g\u00f6n\u00fcl": 1053, "g\u00fcnther": [1048, 1052], "h": [44, 45, 52, 91, 120, 121, 134, 135, 152, 168, 172, 186, 258, 296, 299, 306, 313, 324, 335, 337, 354, 375, 384, 408, 410, 412, 415, 416, 417, 418, 421, 446, 522, 535, 538, 541, 543, 550, 556, 570, 571, 585, 593, 610, 611, 692, 696, 707, 711, 760, 842, 846, 847, 848, 853, 863, 878, 887, 996, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1018, 1020, 1041, 1046, 1050, 1051, 1052], "h1998": 417, "h2009": 1011, "h4dr1en": 1045, "h5py": 372, "h_": 1000, "h_i": [415, 1009], "h_init": 384, "h_j": 1009, "h_l": 998, "h_m": 417, "h_pad": [120, 142, 357], "h_samples_": 863, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 83, 88, 89, 90, 93, 106, 111, 112, 116, 120, 132, 139, 142, 144, 146, 147, 149, 151, 156, 166, 167, 170, 175, 176, 177, 182, 186, 187, 188, 189, 191, 206, 210, 213, 214, 215, 219, 230, 231, 233, 240, 244, 246, 247, 250, 251, 254, 256, 257, 259, 261, 262, 265, 266, 269, 270, 271, 274, 275, 277, 282, 283, 290, 294, 297, 298, 299, 301, 308, 311, 312, 314, 316, 320, 321, 322, 323, 324, 326, 328, 330, 333, 341, 345, 346, 347, 352, 360, 361, 365, 366, 367, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 390, 391, 392, 393, 396, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 435, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 496, 497, 500, 501, 511, 512, 519, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 622, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 691, 692, 693, 694, 695, 698, 714, 716, 723, 725, 744, 766, 777, 781, 782, 783, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 824, 825, 826, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 924, 932, 933, 934, 940, 953, 972, 988, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "haan": 1044, "haar": [53, 1052], "haas": 1045, "habchi": 1045, "haberland": [1050, 1051], "haberth\u00fcr": 1042, "hack": [47, 49], "had": [43, 48, 81, 146, 149, 175, 247, 311, 317, 323, 361, 378, 379, 386, 401, 418, 421, 446, 994, 1004, 1028, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1050], "hadamard": 380, "haddad": 1042, "hadrien": [1042, 1045], "hadshirt": 1045, "haenel": 1038, "haesun": [1047, 1050, 1051], "hafner": 1048, "hagai": 800, "hagberg": 55, "hahn": [1042, 1043], "haiat": 1047, "haidar": [1048, 1049], "hail": 317, "hailei": [1045, 1046], "hain": 373, "haitz": [1046, 1048, 1049], "hakaa1": [1042, 1043], "hal": [550, 661, 761, 762, 1002], "halchenko": [0, 399, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1051], "hale": [1037, 1049], "half": [2, 43, 61, 123, 149, 245, 249, 269, 271, 283, 373, 374, 415, 417, 465, 525, 565, 596, 600, 605, 773, 866, 874, 916, 1004, 1007, 1020], "half_cal": 600, "half_selector": 600, "halfbath": 143, "halford": [1043, 1050, 1051], "halkidi": 410, "halko": [415, 538, 544, 547, 950, 951], "hall": [1000, 1042, 1046], "hallock": 1041, "halpert": [695, 1001], "halv": [2, 163, 183, 263, 275, 279, 347, 405, 518, 567, 582, 803, 806, 807, 912, 1025, 1030, 1047], "halvic": 1047, "halvinggridsearchcv": [2, 282, 283, 322, 401, 406, 582, 807, 993, 1047, 1049, 1050, 1052, 1053], "halvingrandomsearchcv": [2, 146, 283, 322, 401, 406, 582, 806, 993, 1047, 1049, 1050, 1051, 1052, 1053], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 283, "halwai": 1041, "ham": [2, 46, 452, 459, 584, 702, 706, 712, 737, 744, 781, 782, 783, 799, 1007], "hamada": 1047, "hamdi": [1052, 1053], "hammerbach": 1039, "hamming_loss": [2, 46, 706, 799, 1004, 1037, 1041, 1044], "hammingdist": 702, "hammoudeh": 1044, "hamoumi": 1048, "hampu": 1039, "hamzeh": [0, 1038, 1039], "han": [410, 444, 452, 459, 1035, 1043, 1044, 1048], "hancock": 1045, "hand": [44, 65, 84, 86, 116, 122, 123, 125, 140, 146, 163, 166, 175, 183, 186, 187, 206, 217, 220, 237, 243, 244, 246, 247, 250, 264, 265, 268, 273, 280, 285, 295, 330, 331, 341, 365, 372, 373, 375, 378, 380, 384, 386, 391, 415, 416, 417, 419, 427, 433, 505, 646, 700, 716, 791, 833, 888, 912, 993, 997, 1000, 1004, 1006, 1008, 1012, 1017, 1019, 1025, 1028], "handbook": [723, 743, 1004], "handi": [82, 103, 353, 354, 379, 1051], "handk": 1051, "handl": [0, 2, 43, 48, 103, 140, 143, 147, 149, 150, 154, 191, 198, 246, 247, 265, 273, 278, 280, 288, 290, 291, 298, 317, 320, 327, 352, 354, 360, 365, 370, 372, 378, 379, 380, 387, 390, 392, 417, 418, 420, 499, 547, 580, 584, 585, 591, 592, 594, 613, 638, 649, 650, 655, 661, 662, 663, 664, 665, 671, 678, 679, 681, 684, 723, 791, 871, 880, 881, 907, 908, 912, 919, 923, 952, 960, 963, 1001, 1004, 1005, 1006, 1007, 1010, 1012, 1019, 1020, 1023, 1024, 1028, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 103, 139, 143, 154, 187, 188, 242, 250, 252, 254, 317, 321, 324, 880, 881, 1014, 1039, 1043, 1047, 1048], "handler": 1046, "handler_map": 298, "handlerpathcollect": 298, "handletextpad": 357, "handpick": 240, "handprint": 375, "handwritten": [51, 71, 80, 85, 90, 92, 94, 97, 139, 166, 183, 232, 233, 235, 237, 244, 259, 269, 301, 308, 309, 330, 331, 353, 371, 410, 417, 449, 505, 544, 547, 552, 569, 691, 692, 693, 694, 695, 707, 708, 720, 740, 796, 798, 856, 868, 877, 887, 900, 1001, 1007, 1025, 1030], "hang": [378, 1045, 1046], "hank": 1038, "hanmin": [0, 399, 1042, 1043, 1044, 1045, 1046], "hann": 1035, "hanna": [1039, 1040, 1046], "hannah": [1045, 1047, 1049], "hannel": [1043, 1044], "hansen": 1043, "hansin": [1049, 1050], "hanu\u0161": 1052, "hanxiang": [682, 1000], "hao": [1046, 1047, 1049, 1050], "haoi": 1052, "haoran": 1043, "haoyin": [1046, 1048, 1049], "happen": [2, 44, 64, 139, 200, 265, 311, 317, 353, 361, 365, 366, 376, 377, 378, 382, 383, 384, 390, 392, 393, 396, 404, 410, 412, 414, 417, 439, 518, 575, 661, 788, 885, 887, 907, 1000, 1004, 1005, 1019, 1024, 1043, 1047, 1048, 1050, 1051, 1052, 1053], "happi": [186, 265, 352, 390, 393, 821, 822], "haqu": [1037, 1038, 1039], "harabasz": [2, 713], "harabaz": 1041, "hard": [48, 213, 240, 244, 271, 273, 367, 377, 390, 392, 409, 410, 415, 418, 537, 544, 572, 679, 909, 910, 911, 912, 913, 1000, 1017, 1019, 1020, 1024, 1044, 1045], "hardcod": [442, 456, 1043], "harder": [280, 281, 315, 373, 377, 380, 386, 390, 410, 518, 564, 565], "hardest": 398, "hardin": 112, "hardli": [88, 610, 611], "hardwar": [57, 334, 354, 365, 366, 373, 376, 390, 396, 404, 406, 1023, 1049, 1050], "hare": 1000, "harfouch": 1051, "harikrishnan": 1037, "harizo": [1041, 1042], "harm": [352, 380, 418, 798], "harmanan": [1052, 1053], "harmon": [43, 72, 353, 410, 538, 544, 732, 733, 739, 786, 798, 1004], "haroldfox": [1043, 1044], "harper": 1042, "harri": [1039, 1041, 1047, 1048], "harsanyi": 1051, "harsh": [427, 439, 471, 552, 553, 554, 556, 558, 560, 562, 564, 567, 570, 572, 613, 661, 669, 671, 677, 678, 679, 802, 825, 835, 836, 837, 838, 842, 843, 844, 845, 846, 849, 854, 857, 864, 902, 903, 907, 909, 912, 915, 917, 1045, 1047, 1050], "harshit5674": 1050, "hart": [375, 998, 1043], "hartong": 1046, "harutaka": 1048, "harvest": 317, "harwar": 390, "has_fit_paramet": [2, 387], "hasan": 1050, "hasattr": [79, 89, 95, 113, 132, 142, 231, 244, 306, 313, 352, 392, 425, 429, 435, 964, 1045], "haseeb": [1048, 1049], "hash": [2, 47, 52, 133, 183, 353, 354, 365, 367, 370, 378, 381, 390, 417, 517, 547, 560, 569, 584, 585, 592, 643, 842, 968, 996, 1025, 1030, 1036, 1039, 1042], "hashabl": [392, 875, 878, 1015], "hashcode55": 1041, "hasher": [152, 354, 418], "hashingvector": [2, 47, 354, 367, 418, 491, 591, 593, 594, 1036, 1042, 1043, 1044, 1045, 1048], "hashlib": 47, "hasil": 1039, "hasn": 401, "hassaan": [1043, 1044], "hassan": 1048, "hassen": 1035, "hassoun": 1050, "hasti": [2, 134, 137, 138, 148, 168, 200, 270, 375, 414, 417, 522, 523, 556, 562, 563, 631, 659, 724, 726, 727, 837, 854, 900, 915, 916, 994, 998, 1000, 1005, 1011, 1016, 1018, 1020], "hat": [112, 129, 267, 271, 296, 323, 376, 408, 412, 416, 417, 995, 1000, 1001, 1004, 1006, 1008], "hathidara": 1047, "hatwar": [1043, 1044], "hauck": 1041, "hausamann": [1043, 1044], "haussler": 178, "hav": 398, "have": [0, 2, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 61, 62, 63, 64, 72, 74, 77, 78, 80, 81, 83, 86, 88, 90, 93, 95, 97, 98, 102, 103, 109, 111, 116, 118, 125, 134, 141, 142, 143, 144, 146, 149, 164, 165, 168, 170, 171, 175, 176, 177, 182, 185, 186, 187, 188, 189, 191, 193, 198, 213, 214, 215, 217, 231, 237, 240, 242, 247, 248, 250, 251, 257, 258, 259, 261, 264, 265, 271, 272, 274, 277, 278, 284, 285, 286, 288, 291, 293, 294, 297, 298, 311, 316, 317, 318, 320, 322, 323, 327, 331, 332, 333, 338, 344, 345, 346, 348, 352, 353, 360, 361, 365, 366, 367, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 396, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 495, 497, 498, 499, 511, 512, 517, 526, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 691, 692, 693, 694, 695, 702, 707, 708, 714, 715, 718, 723, 729, 734, 739, 759, 760, 761, 762, 785, 788, 789, 795, 798, 800, 801, 802, 803, 806, 807, 808, 809, 814, 817, 821, 825, 826, 828, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 933, 935, 937, 939, 940, 951, 978, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "havelabeleddatado": 398, "haversin": [2, 304, 416, 702, 765, 767, 1007, 1044, 1047], "haversine_dist": [2, 765, 1044], "haversinedist": 702, "hawaii": 175, "haxbi": 0, "haya": 1049, "hayashi": 1043, "hbgt": 149, "hd": 51, "hdb": [88, 448], "hdbscan": [2, 71, 79, 82, 98, 183, 244, 446, 515, 887, 994, 1023, 1025, 1029, 1030, 1051, 1052, 1053], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 372, "hdl": [168, 375], "hdmetor": 1041, "he": [378, 729, 759, 864, 865, 897, 898, 1004, 1042, 1049, 1050], "head": [0, 52, 63, 103, 175, 186, 200, 202, 231, 254, 261, 317, 320, 325, 378, 386, 399, 415, 1028, 1040, 1041, 1050, 1051, 1052, 1053], "head_width": 63, "header": [54, 102, 272, 352, 353, 373, 376, 418, 490, 491, 803, 806, 807, 817], "heali": 410, "health": 328, "heap": 452, "heapq": 465, "heard": 378, "heart": 250, "heat": [154, 341, 410, 454, 464, 698], "heatingqc": 154, "heatmap": [187, 189, 193, 198, 282, 325, 341, 635, 1011], "heatmap_kw": 635, "heatmaps_": 635, "heavei": 1043, "heavi": [215, 390, 407, 1024], "heavier": [129, 412, 1000], "heavili": [202, 365, 366, 378, 386, 652, 658, 781, 1021], "heavy_rain": [43, 187], "hebei": 410, "hedlund": 1051, "hedyati": 1039, "hee": [1042, 1045], "heer": 1046, "hegd": 1052, "heidelberg": [175, 410, 415, 538, 699, 729, 759, 1004], "height": [47, 54, 86, 123, 143, 144, 168, 311, 317, 327, 352, 416, 448, 496, 497, 509, 589], "heightpet_catpet_dogf64f64f64": 327, "heikki": 1016, "heilman": [1039, 1040], "heitz": 317, "held": [43, 47, 103, 127, 147, 188, 221, 258, 274, 279, 290, 414, 417, 562, 563, 564, 565, 704, 803, 806, 807, 817, 864, 865, 877, 993, 994, 1003, 1012], "helder": [1039, 1048, 1049], "heldout": 220, "heldout_scor": 145, "helen": 325, "heli": 1042, "hello": [378, 386, 964, 968], "helloifeven": 964, "helm": 1053, "helmu": 1039, "help": [0, 41, 43, 48, 50, 88, 102, 106, 125, 130, 187, 198, 231, 233, 265, 272, 274, 284, 288, 309, 338, 341, 353, 354, 361, 365, 366, 378, 379, 380, 381, 382, 383, 384, 386, 387, 392, 393, 395, 404, 410, 411, 414, 418, 420, 434, 539, 580, 630, 653, 657, 668, 688, 689, 695, 717, 843, 915, 916, 917, 918, 994, 998, 999, 1001, 1003, 1004, 1006, 1008, 1014, 1015, 1020, 1022, 1023, 1024, 1027, 1028, 1041, 1042, 1043, 1046, 1049, 1053], "helper": [44, 45, 123, 231, 282, 371, 380, 381, 391, 392, 414, 470, 578, 905, 992, 1035, 1042, 1043, 1044, 1048], "helvetica": [919, 921], "heme": 1052, "hempstalk": 1042, "henc": [72, 93, 104, 186, 217, 244, 265, 280, 341, 352, 353, 365, 373, 380, 382, 384, 392, 396, 410, 414, 417, 418, 489, 511, 542, 544, 545, 546, 566, 593, 646, 649, 655, 663, 665, 675, 690, 707, 708, 712, 718, 734, 760, 789, 798, 819, 822, 823, 842, 843, 844, 845, 846, 882, 960, 1001, 1003, 1004, 1005, 1010, 1011, 1014, 1024, 1042, 1043, 1046, 1047, 1049], "hendrik": [0, 399, 1035, 1038, 1039, 1040, 1041], "henri": [1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "henrymooresc": [1049, 1050], "hepe": [682, 1000], "here": [43, 47, 48, 51, 52, 53, 55, 61, 64, 90, 91, 99, 109, 113, 118, 122, 123, 125, 127, 128, 130, 134, 137, 140, 143, 147, 149, 154, 165, 168, 170, 178, 179, 186, 187, 188, 191, 193, 198, 202, 206, 213, 217, 219, 228, 229, 231, 233, 235, 240, 245, 247, 250, 251, 257, 258, 259, 264, 265, 268, 269, 271, 273, 274, 276, 278, 280, 281, 283, 284, 285, 288, 291, 293, 300, 303, 307, 308, 309, 313, 316, 322, 324, 327, 330, 332, 341, 345, 348, 350, 354, 356, 361, 365, 366, 367, 372, 373, 376, 377, 378, 379, 380, 383, 384, 386, 390, 391, 401, 404, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 421, 423, 439, 442, 443, 444, 445, 446, 447, 448, 449, 451, 454, 466, 474, 477, 539, 541, 542, 546, 547, 566, 570, 571, 572, 573, 584, 585, 587, 591, 594, 597, 605, 631, 633, 650, 654, 656, 658, 664, 666, 668, 676, 678, 692, 694, 698, 702, 715, 729, 759, 797, 802, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 834, 843, 847, 848, 871, 879, 882, 885, 888, 899, 900, 910, 969, 993, 996, 1000, 1001, 1002, 1003, 1004, 1007, 1010, 1014, 1016, 1017, 1018, 1019, 1023, 1024, 1027, 1028, 1035, 1043, 1048], "hereaft": 393, "hereund": 1010, "herilalaina": [1042, 1043, 1045], "hermano": [1050, 1051], "hermida": [1044, 1048], "hernandez": 1004, "hern\u00e1ndez": 1004, "hero": [412, 423, 477], "herrou": 1049, "hershei": 1004, "hertel": 1052, "herv": 1039, "hervieu": 1035, "herv\u00e9": 1039, "heryanto": 1042, "hesit": 378, "hessian": [233, 234, 235, 417, 564, 565, 651, 661, 662, 672, 683, 692, 696, 1000, 1008, 1029, 1030, 1050], "hessian_tol": [692, 696], "heterogen": [43, 47, 48, 61, 88, 101, 103, 183, 187, 213, 254, 316, 320, 370, 372, 390, 466, 490, 544, 584, 594, 716, 867, 871, 907, 1001, 1011, 1014, 1023, 1025, 1030, 1039, 1043, 1045, 1046, 1053], "heteroscedast": [120, 127, 146, 215, 415, 883, 895], "heteroschedast": 1004, "heuer": 1038, "heurist": [51, 54, 145, 250, 352, 366, 410, 419, 451, 454, 463, 464, 511, 512, 540, 542, 549, 679, 680, 681, 694, 698, 806, 807, 909, 910, 911, 912, 913, 938, 1001, 1002, 1007, 1018, 1020, 1028, 1035, 1036, 1040, 1044, 1047, 1048], "hexbin": 244, "hexdigest": 47, "hgbdt": 140, "hgbdt_model": 187, "hgbdt_model_without_interact": 187, "hgbdt_preprocessor": 187, "hgbt": [140, 149, 417], "hgbt_cst": 149, "hgbt_no_cst": 149, "hgbt_quantil": 149, "hhu": [652, 1044], "hi": [0, 411, 1004], "hibon": 1042, "hida": [1050, 1051], "hidden": [43, 187, 308, 309, 378, 386, 407, 415, 863, 864, 865, 1008, 1009, 1023, 1035, 1046], "hidden_layer_s": [187, 251, 306, 308, 864, 865, 1008], "hide": [52, 78, 378, 386, 842, 843, 844, 845, 846, 1038, 1043, 1051], "hideaki": 1049, "hierarch": [2, 53, 59, 71, 74, 75, 79, 80, 85, 86, 87, 89, 90, 183, 189, 210, 237, 324, 360, 392, 418, 443, 445, 447, 448, 507, 515, 517, 525, 533, 550, 734, 860, 887, 1021, 1024, 1025, 1029, 1030, 1035, 1038, 1039, 1051], "hierarchi": [76, 189, 378, 452, 458, 465, 1009], "higgin": [1052, 1053], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 82, 88, 90, 95, 98, 102, 106, 111, 112, 122, 123, 137, 139, 140, 141, 146, 147, 149, 150, 152, 168, 170, 176, 182, 185, 187, 188, 189, 198, 208, 214, 215, 217, 227, 233, 234, 235, 240, 244, 256, 262, 269, 273, 277, 278, 297, 298, 306, 308, 313, 315, 316, 317, 318, 326, 333, 338, 340, 341, 352, 353, 358, 359, 365, 373, 375, 378, 383, 386, 387, 390, 391, 407, 408, 409, 410, 414, 416, 417, 418, 419, 420, 446, 449, 451, 452, 454, 471, 484, 485, 486, 556, 557, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 647, 673, 674, 682, 692, 695, 696, 729, 734, 745, 749, 759, 792, 795, 811, 813, 847, 848, 852, 881, 882, 886, 888, 909, 911, 912, 915, 916, 917, 918, 972, 993, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1010, 1012, 1014, 1016, 1019, 1020, 1021, 1023, 1024, 1035, 1036, 1038, 1039, 1043, 1046, 1047, 1048, 1049, 1050], "high_cardin": 317, "high_cardinality_featur": 317, "high_cardinalityindex": 317, "high_i": 208, "high_precision_cv_result": 269, "high_recall_cv_result": 269, "high_x": 208, "higher": [43, 52, 90, 111, 123, 127, 134, 137, 139, 140, 146, 150, 166, 170, 172, 177, 178, 186, 187, 188, 191, 213, 214, 217, 231, 237, 238, 262, 264, 265, 269, 271, 274, 286, 296, 316, 341, 345, 352, 353, 354, 361, 365, 373, 376, 380, 407, 409, 410, 412, 417, 419, 420, 421, 446, 450, 451, 473, 480, 512, 535, 542, 546, 551, 556, 557, 560, 561, 562, 563, 564, 565, 567, 568, 569, 576, 591, 594, 610, 611, 622, 630, 634, 638, 640, 649, 650, 655, 656, 663, 664, 665, 666, 679, 681, 682, 707, 727, 731, 755, 788, 800, 803, 806, 807, 809, 817, 824, 826, 831, 834, 853, 856, 882, 899, 900, 901, 907, 908, 909, 910, 911, 912, 913, 920, 996, 1000, 1001, 1003, 1004, 1007, 1011, 1014, 1018, 1019, 1036, 1041, 1043, 1050, 1052], "highest": [2, 55, 63, 113, 164, 168, 217, 269, 271, 282, 322, 352, 378, 390, 408, 410, 414, 417, 419, 439, 558, 560, 567, 595, 598, 599, 601, 602, 603, 606, 607, 609, 638, 640, 729, 759, 797, 800, 803, 806, 807, 817, 904, 915, 953, 993, 1000, 1004, 1005, 1008, 1018, 1020, 1047], "highest_protocol": 404, "highli": [43, 48, 64, 104, 111, 112, 122, 130, 150, 198, 208, 218, 265, 271, 274, 280, 307, 345, 353, 365, 366, 378, 384, 390, 408, 410, 414, 417, 418, 454, 464, 499, 566, 674, 695, 815, 817, 863, 926, 1000, 1004, 1007, 1008, 1010, 1018, 1019, 1022, 1023], "highlight": [43, 54, 88, 103, 111, 118, 132, 138, 139, 141, 151, 168, 170, 171, 176, 181, 182, 187, 188, 191, 213, 214, 215, 231, 242, 247, 252, 253, 254, 265, 266, 283, 285, 293, 315, 317, 333, 352, 354, 360, 378, 382, 383, 386, 390, 420, 445, 448, 449, 466, 469, 492, 493, 499, 504, 505, 507, 515, 518, 524, 527, 541, 544, 564, 565, 567, 568, 570, 602, 605, 631, 633, 635, 637, 643, 649, 651, 655, 661, 672, 683, 691, 700, 704, 705, 720, 721, 735, 745, 751, 781, 791, 798, 802, 803, 804, 806, 807, 809, 817, 825, 826, 829, 830, 833, 849, 851, 868, 872, 877, 880, 881, 882, 886, 887, 888, 904, 905, 907, 912, 915, 916, 946, 1001, 1004, 1012, 1014, 1019, 1025, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "highlight_min": [146, 202], "higuera": 372, "hila": 410, "hilbert": [218, 873, 996, 1014], "hilferti": 111, "hill": [410, 450, 463, 1045], "him": 418, "himanshu": [1046, 1049], "hind": 1049, "hinder": 1045, "hing": [2, 62, 220, 223, 225, 279, 338, 339, 343, 345, 392, 669, 679, 738, 907, 914, 1000, 1018, 1019], "hinge_loss": [2, 345, 1004, 1039, 1047, 1048], "hinrich": 415, "hint": [186, 365, 379, 383, 401, 450, 1004], "hinton": [695, 856, 863, 864, 865, 1001, 1007, 1008, 1009], "hintz": 1041, "hiramatsu": 1052, "hirofumi": [1046, 1047], "hirsch": 1043, "hirschberg": [410, 720, 740, 798], "hirzel": 1048, "hispan": 186, "hist": [43, 62, 64, 86, 107, 136, 140, 213, 215, 244, 250, 265, 277, 296, 311, 315, 317, 324, 327, 417], "hist_drop": 143, "hist_n": 143, "hist_nbin": 311, "hist_no_interact": 325, "hist_one_hot": 143, "hist_ordin": 143, "hist_quantil": 324, "hist_x0": 311, "hist_x1": 311, "histgradientboost": 1047, "histgradientboostingclassifi": [2, 139, 140, 265, 320, 321, 322, 323, 325, 327, 366, 390, 404, 562, 567, 635, 636, 994, 1023, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histgradientboostingclassifierhistgradientboostingclassifi": 265, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 265, "histgradientboostingregressor": [2, 43, 46, 52, 135, 140, 143, 146, 147, 149, 151, 154, 181, 187, 213, 317, 320, 321, 322, 323, 325, 326, 327, 390, 417, 563, 568, 635, 636, 638, 994, 1011, 1023, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histgradientboostingregressor__interaction_cst": 187, "histgradientboostingregressor__max_depth": 143, "histgradientboostingregressor__max_it": 143, "histgradientboostingregressorhistgradientboostingregressor": [154, 317], "histgradientboostingregressorifittedhistgradientboostingregressor": [151, 325], "histogram": [2, 52, 62, 64, 86, 133, 135, 139, 143, 144, 146, 147, 151, 183, 213, 221, 244, 270, 272, 277, 296, 311, 322, 324, 326, 327, 408, 492, 499, 562, 563, 564, 565, 567, 568, 635, 645, 745, 751, 761, 762, 793, 803, 808, 824, 830, 833, 996, 1002, 1014, 1025, 1029, 1030, 1047, 1050, 1052], "histor": [51, 213, 265, 1001, 1024], "histori": [51, 382, 562, 563, 1035], "hit": [215, 384], "hitesh": 1047, "hjortkj\u00e6r": 1049, "hkey_local_machin": 396, "hline": 122, "hlle": 1001, "hmasdev": 1049, "hmc": 51, "hmm": [1035, 1036, 1037, 1038, 1040], "hmmlearn": 1023, "hn": 384, "hnyk": [1041, 1042], "ho": [417, 558, 559, 1004, 1040, 1043, 1044, 1049], "hoang": [1044, 1045], "hobson": 1041, "hoc": [167, 168, 183, 263, 265, 274, 288, 328, 333, 392, 409, 499, 661, 819, 825, 830, 868, 887, 1025], "hochberg": [598, 1041, 1042], "hochreit": [407, 722], "hockei": [57, 373], "hoctor": 1047, "hoda1394": 1047, "hoenig": 1035, "hoesli": 417, "hoffman": [415, 539, 1040, 1047], "hogan": 1043, "hoh": 1043, "hold": [0, 47, 52, 63, 64, 213, 217, 247, 265, 272, 360, 371, 378, 379, 380, 392, 408, 410, 414, 417, 418, 420, 506, 560, 564, 567, 592, 635, 636, 637, 739, 803, 806, 807, 817, 843, 874, 875, 880, 881, 888, 891, 915, 917, 994, 998, 1004, 1008, 1018, 1019, 1020, 1043, 1047, 1053], "holdgraf": 1043, "holdselig": 418, "hole": [183, 232, 233, 238, 533, 695, 696, 1025, 1049], "holger": 1042, "holidai": [43, 187], "holm": [838, 1005, 1052], "holman": 1050, "holmstr\u00f6m": 1037, "holohan": [1050, 1052], "holt": [0, 400, 1035], "holub": 537, "home": [0, 2, 7, 51, 52, 154, 174, 176, 178, 179, 241, 257, 309, 325, 373, 376, 386, 396, 488, 494, 502, 682, 1028], "homebrew": [381, 396], "homepag": [373, 533, 1020], "homm": 1050, "homo": 91, "homogen": [2, 72, 73, 74, 79, 80, 82, 88, 91, 353, 373, 390, 392, 412, 417, 420, 448, 617, 707, 720, 734, 739, 740, 760, 798, 1001, 1002, 1004, 1044], "homogeneity_completeness_v_measur": [2, 410, 1044], "homogeneity_scor": [2, 73, 82, 91, 353, 410, 720, 739, 798, 1004], "homomorph": 1023, "homoscedast": [127, 243, 315, 1004, 1043], "homoschedast": 1004, "honda": 51, "honei": 998, "hong": [1041, 1043, 1047, 1048, 1049, 1051, 1053], "hongh": 1043, "hongkahjun": 1042, "honglu": 1045, "hongshaoyang": 1050, "honl": [1047, 1048], "honolulu": 1004, "honor": 317, "hood": [404, 1000, 1019], "hoover": [1040, 1041, 1042, 1044], "hope": [30, 44, 176, 231, 392, 1044], "hopefulli": [274, 386, 1035], "hopfensperg": [1052, 1053], "hopper": 1040, "horizont": [66, 120, 233, 245, 311, 314, 383, 392, 466, 518, 700, 704], "horizontal_distance_to_hydrologi": 493, "horizontalalign": [51, 63, 67, 75, 79, 95, 240, 256, 306, 313], "hornik": 638, "hornstein": 1050, "horrel": 1042, "hoshia": 1049, "hossein": [1043, 1044, 1045], "host": [0, 140, 326, 352, 373, 378, 382, 386, 387, 494, 900, 1051], "hot": [2, 43, 103, 139, 154, 186, 213, 280, 312, 313, 317, 322, 341, 392, 417, 418, 554, 569, 584, 651, 661, 662, 672, 683, 870, 872, 874, 875, 878, 880, 881, 888, 1000, 1014, 1043, 1049, 1050], "hot_r": [51, 311], "hotel": 1028, "hotspot": 384, "hour": [43, 149, 186, 187, 327, 378, 384, 499, 1001, 1022], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 149, 186], "hourly_wag": 185, "hous": [2, 107, 144, 154, 181, 182, 265, 311, 322, 371, 492, 1030], "house_pric": [107, 154], "houseag": [311, 322, 373, 492], "household": 373, "housestyl": [143, 154], "hover": 327, "hover_data": [140, 272], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 83, 84, 85, 86, 90, 93, 101, 102, 103, 106, 109, 111, 116, 129, 134, 135, 138, 142, 143, 144, 146, 147, 149, 152, 154, 165, 166, 177, 183, 186, 187, 188, 189, 191, 195, 201, 202, 203, 209, 214, 215, 216, 217, 220, 221, 227, 231, 237, 238, 242, 245, 247, 249, 250, 251, 253, 262, 265, 266, 267, 269, 271, 272, 273, 278, 280, 281, 283, 285, 286, 290, 291, 293, 294, 295, 297, 298, 303, 308, 316, 318, 321, 322, 323, 326, 327, 338, 339, 341, 344, 345, 348, 352, 353, 356, 360, 365, 366, 367, 373, 376, 377, 379, 380, 381, 383, 386, 391, 392, 393, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 424, 434, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 507, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 625, 626, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 707, 723, 760, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 987, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1020, 1022, 1024, 1028, 1030, 1035, 1037, 1040, 1046, 1049, 1050, 1051], "howel": 1042, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 72, 81, 82, 86, 88, 93, 104, 107, 109, 113, 115, 125, 127, 137, 139, 140, 143, 146, 147, 154, 165, 168, 170, 175, 176, 187, 188, 195, 202, 213, 217, 234, 237, 238, 240, 246, 247, 250, 265, 271, 278, 284, 285, 286, 288, 290, 291, 296, 307, 311, 322, 328, 345, 348, 352, 353, 361, 365, 366, 367, 372, 373, 375, 377, 378, 380, 384, 386, 390, 392, 401, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 442, 445, 449, 451, 453, 456, 461, 499, 511, 535, 544, 554, 570, 584, 585, 586, 592, 609, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 633, 635, 636, 641, 646, 658, 659, 675, 690, 695, 698, 703, 766, 768, 803, 805, 806, 807, 817, 820, 823, 830, 834, 835, 846, 864, 865, 870, 879, 880, 885, 909, 910, 912, 929, 956, 972, 993, 994, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1044, 1045, 1047, 1048, 1051], "hoyer": [415, 1038], "hp": 51, "hpq": 51, "hrishikesh": [1036, 1037], "hristo": [1043, 1050], "hsiang": [661, 1039], "hsieh": 1041, "hspace": [45, 53, 54, 79, 95, 120, 231, 240, 256, 258, 259, 262, 296, 322, 331, 338], "hstack": [53, 69, 77, 156, 164, 238, 249, 266, 344, 414, 866], "hsuan": 1040, "ht2001": 1004, "htf": 417, "htm": [915, 916], "html": [2, 43, 47, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 191, 195, 241, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 325, 327, 332, 360, 373, 375, 378, 379, 381, 382, 386, 411, 414, 418, 424, 489, 511, 512, 661, 842, 846, 945, 946, 947, 1002, 1023, 1024, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "htmledit": [842, 846, 1002], "htmlparser": 47, "htsedebenham": 1050, "http": [43, 45, 47, 51, 52, 55, 61, 103, 168, 191, 213, 221, 229, 231, 238, 285, 288, 290, 291, 308, 372, 373, 375, 376, 378, 382, 383, 384, 386, 390, 392, 396, 410, 414, 419, 444, 451, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 511, 512, 513, 533, 534, 537, 540, 544, 598, 639, 644, 647, 652, 661, 667, 669, 670, 671, 674, 679, 682, 685, 686, 688, 689, 695, 698, 708, 724, 726, 727, 761, 762, 772, 842, 844, 846, 849, 850, 855, 856, 857, 858, 863, 885, 900, 901, 902, 915, 916, 945, 946, 1000, 1002, 1004, 1017, 1020, 1045], "hu": [1040, 1043, 1045], "hua": [566, 1010], "huang": [373, 661, 1041, 1046], "huangk10": 1046, "huard": 1035, "huber": [25, 196, 223, 417, 563, 652, 679, 681, 1018, 1035, 1037, 1038, 1047], "huberlossfunct": 1048, "huberregressor": [2, 87, 170, 183, 192, 211, 217, 218, 219, 318, 527, 673, 674, 675, 681, 682, 1000, 1025, 1041, 1042, 1043, 1044], "hubert": [410, 708, 718, 789], "hubert1985": 708, "hudson": 325, "hue": [126, 149, 261, 271, 316, 375], "huerta": 1045, "hug": [0, 168, 399, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "huge": [215, 218, 365, 384, 630, 1038], "hugh": [882, 1037, 1048], "hugo": [45, 373, 1041, 1046, 1047, 1048, 1049], "hugorichard": 1047, "hugu": 1039, "hui": [200, 541, 543, 550, 659, 1000], "huiginn": 1035, "huilgolkar": [1036, 1037], "hujiahong726": 1051, "hull": 1052, "humahn": 1050, "human": [120, 187, 352, 378, 410, 415, 864, 865, 1004, 1011, 1044], "humid": [43, 187, 1011], "hunan": 1043, "hundr": [77, 145, 234, 315, 373, 414, 417, 564, 565, 1001, 1046], "hunt": 1050, "hunter": 1044, "hurt": [365, 537, 1043], "husak": 1049, "huszar": 1028, "hut": [695, 1001, 1040, 1042, 1045], "huynh": [1045, 1047], "hv": 418, "hvassard": 1049, "hwan": 1046, "hwang": 1041, "hybrid": [448, 652, 1023], "hye": 1046, "hyper": [2, 43, 64, 103, 140, 264, 265, 271, 276, 309, 341, 361, 380, 390, 391, 392, 405, 414, 417, 419, 470, 647, 648, 807, 815, 817, 863, 905, 999, 1000, 1004, 1007, 1018, 1019, 1023, 1030, 1035, 1049], "hyperband": 993, "hyperbol": [345, 645, 864, 865, 1002, 1008], "hypercub": [240, 518], "hyperlink": 1037, "hyperparamet": [2, 103, 105, 106, 149, 170, 171, 177, 178, 181, 183, 187, 193, 198, 202, 227, 231, 240, 250, 263, 265, 269, 274, 276, 282, 283, 293, 309, 352, 380, 392, 410, 414, 415, 417, 420, 505, 538, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 646, 656, 662, 668, 676, 679, 731, 788, 803, 817, 912, 993, 998, 999, 1000, 1003, 1004, 1006, 1008, 1010, 1018, 1024, 1025, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "hyperparameter_baseline_similar": 178, "hyperparameter_grid": 327, "hyperparameter_length_scal": 618, "hyperplan": [136, 173, 183, 192, 205, 222, 248, 274, 336, 337, 338, 339, 340, 341, 345, 346, 515, 634, 661, 662, 669, 671, 677, 678, 679, 680, 907, 909, 911, 912, 1018, 1019, 1025], "hyperspher": 374, "hypothes": 1000, "hypothesi": [146, 271, 277, 414, 693, 697, 832, 1001], "hypothet": 64, "hyunjin": 1035, "hyvarinen": [422, 536], "h\u00e9lion": 1046, "i": [0, 2, 8, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 339, 340, 341, 345, 346, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 361, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 391, 392, 393, 395, 396, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 949, 950, 951, 953, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 977, 978, 984, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "i_ax": 291, "i_dataset": [79, 95, 240], "i_j": 1012, "iain": [168, 375, 1000], "iampat": 1043, "ian": [1037, 1039, 1044, 1045, 1047, 1050, 1051, 1053], "iasoon": 1049, "ibay": 1035, "ibieta": 1048, "ibm": [51, 57, 334, 354, 373], "ibn": 1035, "ibnukhsein": 1052, "ibraheem": 1044, "ibrahima": 1045, "ibraim": [1040, 1041, 1042], "ib\u00e1\u00f1ez": [1043, 1044, 1047], "ic": [47, 288, 322, 372, 375, 395, 503, 505, 513, 635, 636, 1030, 1047, 1048], "ica": [11, 122, 422, 1020, 1029, 1030], "ica_estim": 120, "icann": 699, "icassp": 1004, "icdm": [566, 1010], "icdmw": 410, "ice_lines_kw": 635, "icml": [62, 64, 408, 410, 418, 439, 441, 842, 844, 863, 1004, 1006, 1018, 1022], "icml03": 844, "icml09": [534, 540], "icon": [327, 380], "icyblad": 1042, "id": [2, 45, 52, 57, 231, 304, 360, 372, 373, 378, 386, 412, 414, 418, 424, 497, 498, 499, 919, 921, 946, 1043, 1044, 1047], "id3": [1026, 1030], "idea": [44, 86, 111, 112, 140, 168, 175, 186, 214, 233, 265, 296, 341, 356, 365, 366, 378, 383, 384, 412, 413, 414, 415, 416, 417, 419, 610, 611, 1000, 1001, 1004, 1007, 1010, 1022, 1028], "ideal": [213, 215, 231, 265, 268, 271, 278, 280, 281, 361, 377, 378, 379, 382, 383, 386, 390, 392, 408, 409, 729, 759, 993, 1003, 1018, 1019, 1024, 1027], "idelberg": 1052, "ident": [52, 57, 97, 145, 208, 213, 231, 240, 244, 335, 352, 373, 380, 392, 407, 410, 411, 412, 414, 420, 423, 440, 441, 454, 466, 467, 475, 477, 478, 481, 482, 483, 490, 506, 554, 562, 563, 567, 568, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 646, 682, 683, 702, 707, 708, 739, 788, 798, 805, 808, 818, 819, 822, 823, 849, 850, 856, 864, 865, 871, 872, 884, 896, 915, 916, 997, 998, 1001, 1004, 1007, 1008, 1019, 1039, 1043, 1044, 1045, 1049, 1053], "identif": [373, 378, 410, 500, 993], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 372, 373, 377, 378, 383, 392, 409, 410, 411, 414, 417, 418, 448, 452, 459, 489, 499, 511, 512, 558, 559, 560, 561, 566, 567, 568, 569, 609, 646, 652, 702, 715, 777, 832, 853, 872, 902, 903, 993, 1000, 1004, 1010, 1017, 1028, 1042, 1044, 1049, 1050], "idf": [2, 54, 57, 244, 352, 353, 354, 373, 415, 524, 547, 591, 592, 593, 594, 846, 854, 879, 993, 1002, 1006, 1014, 1035], "idf_": [418, 593, 594, 1043], "idier": [415, 541, 543, 550], "idiom": 384, "idl": 1046, "ido": [1050, 1051], "idpol": [213, 231], "idx": [50, 57, 88, 129, 136, 140, 142, 149, 155, 179, 187, 189, 198, 205, 212, 213, 222, 234, 265, 357, 411, 414], "idx_a": 280, "idx_avg_max_test_scor": 284, "idx_b": 280, "idx_r": 212, "idx_sort": 213, "idxmax": 348, "idxmin": 269, "ie": [75, 99, 121, 442, 707, 1000, 1014], "ieee": [96, 110, 112, 375, 410, 412, 419, 423, 450, 477, 537, 566, 667, 688, 689, 728, 772, 1000, 1004, 1010], "ieeexplor": 772, "ieic": [541, 543, 550], "iem": 661, "if_binari": [186, 254, 880, 1014, 1046], "if_delegate_has_method": [1048, 1049], "iff": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 878], "iforest": 250, "iforest_kw": 250, "iglesi": 1050, "ignacio": 1038, "ignor": [2, 43, 45, 47, 55, 79, 82, 88, 95, 103, 134, 139, 143, 151, 154, 187, 200, 213, 228, 241, 242, 247, 252, 254, 262, 307, 308, 316, 317, 321, 324, 345, 353, 366, 378, 380, 382, 384, 392, 396, 401, 410, 411, 417, 418, 428, 429, 432, 435, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 462, 463, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 490, 506, 511, 512, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 582, 584, 585, 586, 591, 592, 593, 594, 600, 605, 606, 613, 614, 630, 631, 632, 633, 635, 636, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 710, 714, 716, 717, 729, 732, 733, 741, 758, 759, 766, 772, 777, 781, 786, 787, 790, 791, 800, 801, 802, 804, 805, 806, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 866, 867, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 899, 900, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 926, 940, 978, 987, 992, 1000, 1001, 1004, 1006, 1010, 1014, 1019, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "ignore_attribut": 372, "ignore_error": 87, "ignore_implicit_zero": [884, 896], "ignore_ti": [729, 759], "ignore_warn": [221, 313, 1041], "ignored_new_col": 411, "ignorerevsfil": 378, "igor": [1041, 1042, 1048], "ih": 296, "ii": [50, 121, 187, 220, 266, 375, 418, 585, 586, 592, 641, 669, 670, 870, 879, 1000, 1014, 1022, 1052], "iid": 1043, "iii": [1049, 1052], "iijima": 1044, "iinfo": 1050, "ij": [271, 301, 407, 410, 415, 541, 543, 550, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 1000, 1001, 1004, 1006, 1009, 1014, 1019], "ijcnn": 1004, "ijcv": 1004, "ijet": 410, "ik": [1000, 1004], "ikeda": 1047, "ikko": 1048, "il": [49, 667, 688, 689, 1000, 1004], "ilambharathi": [1038, 1039], "ili": [1051, 1052], "ilic": 1048, "ilion": 1049, "iliya": 1050, "iljin": [1050, 1051], "ill": [75, 113, 218, 309, 473, 474, 480, 653, 654, 657, 658, 659, 685, 686, 1000, 1003, 1045], "illustr": [48, 52, 60, 61, 63, 67, 69, 85, 89, 90, 102, 103, 106, 107, 109, 111, 116, 118, 122, 134, 137, 148, 149, 151, 153, 154, 163, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 183, 185, 187, 188, 191, 202, 209, 210, 213, 215, 217, 221, 223, 224, 226, 227, 230, 231, 233, 234, 236, 238, 240, 242, 243, 245, 246, 247, 249, 260, 265, 271, 278, 283, 285, 292, 300, 314, 316, 319, 320, 322, 328, 333, 341, 342, 346, 348, 349, 350, 353, 354, 359, 361, 365, 375, 378, 383, 386, 391, 409, 413, 415, 417, 418, 518, 613, 614, 616, 617, 618, 622, 625, 626, 856, 993, 1000, 1004, 1007, 1010, 1016, 1017, 1018, 1019, 1023, 1025, 1028], "iloc": [43, 149, 154, 186, 187, 231, 271, 294], "ilya": [1042, 1053], "im": [120, 130, 282, 295], "im_": 700, "im_kw": [700, 1049], "imacul": 1041, "imag": [2, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 80, 84, 87, 89, 91, 95, 100, 102, 119, 120, 125, 166, 168, 174, 183, 204, 234, 242, 245, 249, 269, 300, 308, 309, 321, 330, 331, 352, 353, 370, 371, 373, 375, 378, 383, 386, 392, 396, 403, 409, 410, 415, 443, 447, 454, 464, 496, 497, 498, 499, 505, 506, 509, 510, 537, 538, 540, 544, 586, 587, 588, 589, 590, 610, 611, 694, 700, 741, 833, 877, 1000, 1004, 1005, 1007, 1009, 1016, 1020, 1023, 1025, 1028, 1030, 1035, 1038, 1043, 1044, 1048, 1050, 1051], "image_height": [586, 587, 590], "image_index": [330, 331], "image_nam": 509, "image_patch": 590, "image_reconstruct": 590, "image_s": 590, "image_shap": [120, 249], "image_width": [586, 587, 590], "imagebox": 234, "imageio": 372, "imagenet": [864, 865], "images_restor": 84, "imagin": [121, 170, 247, 345, 414, 415, 418, 1000], "imamura": 1049, "imbal": [264, 274, 285, 414, 710, 732, 733, 741, 786, 787, 790, 791, 1004], "imbalanc": [213, 265, 274, 278, 280, 285, 353, 390, 408, 414, 706, 711, 790, 804, 808, 844, 1004, 1006, 1012, 1023], "imbert": [1042, 1044, 1047, 1049, 1052, 1053], "img": [44, 83, 99, 509, 589], "img_height": 586, "img_to_graph": [2, 80, 99, 418, 1038, 1048], "img_width": 586, "imit": 352, "immanuel": [0, 1035, 1036, 1040], "immedi": [88, 378, 390, 803, 817, 828, 829, 1043], "immens": 1028, "immensu": 1043, "immers": [693, 697], "immobil": 43, "immut": 404, "imp": 994, "imp_mean": [630, 633], "impact": [51, 52, 62, 71, 72, 77, 78, 97, 107, 134, 164, 183, 185, 186, 187, 194, 215, 217, 231, 250, 264, 265, 288, 294, 316, 325, 348, 353, 361, 365, 366, 371, 390, 393, 408, 410, 415, 449, 451, 539, 543, 550, 593, 669, 670, 671, 675, 677, 679, 680, 681, 695, 797, 803, 806, 807, 817, 830, 847, 848, 849, 850, 884, 896, 907, 908, 936, 951, 974, 977, 993, 1003, 1011, 1019, 1025, 1042, 1045, 1048], "imped": 386, "imperfect": [731, 788, 1004, 1037], "imperfectli": [706, 737, 1004], "implant": 59, "implement": [2, 13, 30, 45, 46, 52, 53, 55, 80, 89, 112, 120, 140, 149, 182, 189, 191, 198, 202, 227, 231, 233, 240, 246, 247, 265, 269, 271, 280, 288, 290, 291, 293, 296, 314, 320, 321, 322, 323, 324, 326, 352, 354, 365, 366, 367, 372, 373, 375, 376, 378, 379, 380, 383, 384, 386, 387, 392, 396, 401, 406, 407, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 439, 444, 445, 446, 448, 449, 450, 451, 452, 477, 496, 499, 511, 535, 536, 537, 538, 539, 541, 544, 545, 546, 556, 557, 558, 560, 561, 564, 565, 566, 570, 575, 585, 591, 592, 594, 596, 600, 604, 613, 614, 635, 636, 643, 644, 648, 649, 656, 660, 661, 662, 666, 667, 671, 674, 675, 677, 678, 679, 680, 681, 687, 688, 689, 690, 691, 694, 695, 698, 710, 714, 723, 738, 741, 745, 781, 785, 791, 792, 800, 802, 803, 806, 807, 809, 817, 821, 822, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 852, 855, 857, 858, 863, 864, 865, 867, 889, 897, 898, 904, 907, 908, 909, 910, 911, 912, 913, 950, 951, 960, 963, 968, 972, 974, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1014, 1016, 1017, 1020, 1021, 1023, 1024, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "impli": [43, 170, 186, 352, 353, 354, 415, 417, 420, 476, 576, 585, 613, 614, 625, 738, 937, 1000, 1001, 1046], "implic": [361, 378], "implicit": [2, 213, 392, 417, 418, 575, 685, 686, 998, 1003, 1023, 1044], "implicitli": [354, 387, 417, 600, 635, 636, 886, 994, 996, 1011, 1014, 1019, 1053], "import": [2, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 367, 372, 373, 374, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 395, 396, 397, 401, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 964, 965, 966, 967, 968, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1028, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1053], "importance_gett": [419, 596, 597, 600, 1047], "importances_mean": [141, 147, 188, 189, 320, 637, 1012], "importances_std": [141, 637, 1012], "important_word": 57, "importantli": [43, 53, 121, 176, 187, 191, 311, 378, 410, 1053], "importerror": [50, 86, 123, 291, 304, 386], "importlib": 1048, "impos": [74, 90, 151, 201, 207, 217, 317, 390, 410, 415, 417, 418, 530, 660, 1000], "imposs": [146, 354, 1024], "impract": 912, "impress": 1028, "improp": [392, 1042], "improv": [0, 30, 43, 61, 62, 69, 109, 110, 113, 125, 130, 134, 135, 140, 142, 144, 145, 146, 148, 149, 154, 164, 182, 186, 191, 199, 213, 221, 231, 265, 272, 274, 288, 291, 294, 309, 316, 326, 344, 345, 353, 361, 366, 376, 381, 383, 384, 386, 387, 390, 392, 393, 404, 415, 417, 419, 451, 452, 534, 535, 537, 540, 541, 542, 544, 545, 546, 549, 557, 560, 561, 562, 563, 564, 565, 567, 568, 613, 614, 646, 655, 667, 669, 670, 671, 675, 676, 677, 678, 679, 681, 688, 690, 695, 732, 733, 786, 787, 790, 791, 856, 864, 865, 881, 883, 895, 915, 916, 918, 951, 993, 998, 1000, 1001, 1004, 1007, 1008, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "improvis": [50, 304], "impur": [147, 189, 360, 395, 417, 419, 556, 557, 560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918, 919, 921, 1020, 1030, 1040, 1041, 1042, 1043], "imput": [2, 103, 149, 154, 188, 242, 252, 254, 321, 324, 370, 382, 391, 392, 401, 411, 417, 492, 504, 568, 583, 630, 631, 632, 633, 642, 648, 675, 829, 850, 868, 932, 934, 1023, 1024, 1025, 1030, 1037, 1038], "imputation_const": 252, "imputation_mean": 252, "imputation_ord": [630, 1045], "imputation_sequence_": 630, "impute_estim": 181, "impute_scor": 182, "imran": [1037, 1038, 1039], "imread": 68, "imshow": [44, 45, 53, 68, 75, 80, 81, 83, 84, 86, 87, 91, 113, 120, 123, 130, 172, 173, 174, 178, 189, 204, 229, 234, 249, 282, 295, 309, 330, 331, 341, 349, 372, 635, 700, 1049], "in1d": 1042, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 88, "inact": [354, 372, 378], "inadvert": [185, 392], "inadvis": 404, "inappropri": [373, 414, 420, 712, 824], "inbuilt": 414, "inc": [0, 102, 270, 994, 1016, 1028], "incap": 88, "incentiv": 382, "incept": 1024, "includ": [0, 11, 18, 43, 68, 70, 88, 111, 140, 143, 144, 145, 185, 186, 188, 198, 213, 217, 231, 247, 272, 288, 291, 307, 311, 323, 324, 326, 341, 346, 352, 354, 361, 365, 366, 372, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 392, 393, 396, 404, 407, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 446, 448, 452, 458, 468, 471, 472, 473, 474, 475, 476, 477, 478, 491, 492, 493, 499, 503, 504, 505, 507, 508, 513, 537, 544, 560, 567, 577, 635, 641, 649, 650, 655, 663, 664, 665, 668, 684, 691, 692, 700, 716, 732, 733, 738, 740, 741, 774, 786, 787, 790, 798, 803, 805, 806, 807, 816, 817, 820, 823, 830, 833, 855, 857, 858, 859, 880, 881, 882, 886, 904, 907, 908, 915, 917, 919, 921, 933, 934, 937, 939, 943, 945, 946, 960, 993, 1000, 1003, 1004, 1005, 1007, 1008, 1014, 1018, 1019, 1020, 1023, 1024, 1027, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "include_bia": [43, 193, 286, 882, 886, 1049], "include_boundari": [937, 1049], "include_self": [74, 79, 100, 698, 860, 861, 1039], "include_valu": 700, "inclus": [0, 378, 380, 386, 452, 458, 757, 789, 1004, 1005, 1035, 1049], "incom": [311, 373, 442], "incoming_count": 55, "incompat": [499, 994, 1043, 1044], "incomplet": [378, 396, 406, 410, 708, 798, 994, 1001, 1039, 1041], "inconsist": [2, 392, 404, 418, 511, 512, 579, 909, 912, 937, 1010, 1019, 1030, 1035, 1040, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "inconsistentversionwarn": [2, 404, 1051], "incorpor": [326, 378, 411, 417, 1003, 1023, 1028], "incorrect": [134, 185, 333, 361, 378, 410, 610, 611, 635, 636, 737, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "incorrectli": [195, 278, 417, 418, 556, 562, 564, 737, 743, 1004, 1036, 1041, 1043, 1044, 1046, 1051], "incr_mean_variance_axi": [2, 1041, 1047], "increas": [2, 43, 46, 54, 63, 72, 78, 88, 90, 91, 94, 107, 123, 134, 135, 137, 140, 142, 144, 149, 151, 164, 168, 170, 174, 175, 176, 186, 187, 191, 194, 196, 204, 213, 214, 215, 217, 231, 238, 244, 257, 258, 265, 271, 272, 273, 278, 284, 285, 306, 312, 313, 316, 322, 328, 331, 341, 348, 353, 354, 356, 365, 366, 367, 377, 386, 387, 392, 408, 410, 412, 415, 417, 418, 421, 442, 446, 448, 454, 465, 473, 474, 480, 535, 539, 556, 557, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 630, 638, 639, 640, 648, 653, 654, 657, 658, 659, 661, 662, 669, 670, 671, 679, 680, 681, 685, 686, 688, 689, 695, 709, 710, 715, 781, 785, 792, 806, 807, 836, 855, 857, 858, 859, 862, 864, 865, 881, 907, 915, 916, 917, 918, 951, 993, 995, 999, 1000, 1001, 1003, 1004, 1007, 1014, 1018, 1019, 1020, 1028, 1035, 1037, 1040, 1044, 1046, 1047, 1050, 1053], "increasing_": 638, "increasing_bool": 639, "increment": [2, 104, 119, 125, 126, 127, 128, 183, 274, 382, 384, 444, 449, 465, 507, 536, 537, 538, 539, 542, 544, 547, 605, 649, 661, 669, 809, 831, 839, 840, 842, 843, 844, 845, 846, 876, 877, 887, 907, 908, 978, 1000, 1006, 1025, 1038, 1039], "incrementalpca": [2, 124, 367, 415, 536, 538, 542, 544, 547, 1039, 1042, 1043, 1045, 1046, 1049], "incur": [63, 622, 907, 1019, 1043], "ind": [53, 77, 145, 156, 353, 847, 848], "inde": [44, 46, 62, 64, 70, 74, 75, 86, 88, 91, 113, 116, 125, 134, 137, 167, 168, 170, 186, 188, 193, 198, 200, 202, 213, 215, 273, 274, 278, 280, 288, 291, 311, 316, 348, 353, 361, 365, 377, 383, 391, 392, 393, 410, 412, 417, 570, 571, 1000, 1014, 1018, 1049], "indecisiveus": [1046, 1047], "indefinit": 382, "indent": [380, 969], "independ": [2, 32, 52, 62, 64, 72, 80, 121, 122, 124, 139, 142, 177, 187, 249, 250, 271, 274, 276, 280, 290, 311, 318, 320, 353, 361, 365, 366, 374, 380, 391, 392, 396, 404, 407, 408, 410, 411, 412, 413, 414, 418, 422, 451, 466, 490, 506, 518, 519, 520, 521, 523, 535, 536, 538, 540, 542, 543, 549, 550, 554, 555, 607, 610, 611, 628, 643, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 675, 676, 677, 678, 707, 708, 720, 739, 740, 758, 760, 798, 805, 832, 836, 838, 840, 841, 879, 883, 884, 885, 887, 891, 892, 893, 894, 896, 897, 898, 901, 909, 910, 911, 912, 913, 945, 993, 996, 998, 1000, 1001, 1004, 1005, 1006, 1009, 1011, 1014, 1019, 1020, 1029, 1030, 1035, 1036, 1041, 1043, 1045, 1050], "inder128": 1045, "inderjeet": 1046, "inderjit": [407, 455], "indeterminaci": 547, "index": [2, 51, 54, 55, 72, 73, 74, 75, 76, 82, 83, 91, 103, 104, 134, 139, 141, 149, 165, 168, 181, 185, 186, 187, 188, 189, 213, 217, 231, 251, 254, 257, 258, 262, 266, 269, 270, 271, 272, 274, 282, 283, 284, 285, 291, 311, 316, 317, 318, 324, 328, 330, 331, 353, 354, 373, 375, 376, 378, 380, 382, 387, 390, 392, 407, 411, 414, 415, 417, 418, 425, 445, 449, 450, 451, 452, 453, 455, 456, 459, 461, 462, 466, 469, 506, 512, 560, 561, 562, 563, 567, 568, 569, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 620, 635, 636, 643, 700, 707, 708, 715, 719, 721, 734, 741, 760, 782, 783, 789, 791, 797, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 833, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 880, 915, 916, 917, 918, 924, 955, 974, 977, 982, 983, 1004, 1006, 1007, 1008, 1018, 1020, 1023, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "index_alpha_path_a": 200, "index_alpha_path_b": 200, "index_map": 55, "indexerror": [1043, 1044], "indexhash": 643, "indexhash_": 643, "indian": 373, "indic": [2, 51, 57, 58, 62, 63, 92, 93, 99, 107, 116, 120, 126, 134, 139, 144, 175, 178, 182, 185, 187, 210, 235, 244, 247, 264, 265, 273, 274, 277, 278, 291, 304, 330, 331, 334, 352, 353, 354, 360, 366, 373, 378, 379, 380, 382, 386, 387, 390, 392, 406, 407, 408, 410, 412, 414, 415, 417, 418, 421, 425, 430, 439, 442, 446, 452, 453, 454, 455, 457, 458, 459, 462, 466, 469, 474, 489, 511, 512, 514, 515, 516, 526, 535, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 584, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 623, 630, 631, 632, 633, 635, 636, 642, 649, 650, 653, 654, 655, 656, 657, 658, 664, 666, 668, 676, 678, 685, 686, 693, 695, 697, 699, 706, 710, 715, 716, 721, 722, 723, 725, 728, 731, 732, 733, 734, 737, 741, 742, 743, 744, 757, 774, 781, 782, 783, 784, 786, 787, 788, 790, 791, 795, 796, 797, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 840, 841, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 871, 874, 878, 880, 888, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 923, 924, 929, 933, 934, 939, 955, 966, 967, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 994, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1015, 1018, 1019, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "indicator_": [630, 631, 633], "indicator_matrix_": 1040, "indigo": 230, "indirect": [274, 379, 392], "indirectli": [231, 345], "indispens": 1028, "indistinguish": 311, "individu": [2, 43, 80, 93, 111, 133, 135, 137, 154, 163, 166, 179, 183, 184, 186, 189, 213, 231, 241, 250, 251, 265, 274, 276, 290, 320, 327, 328, 345, 348, 366, 379, 380, 382, 385, 387, 392, 395, 401, 407, 411, 414, 417, 418, 439, 454, 464, 466, 499, 504, 506, 512, 558, 559, 562, 563, 565, 566, 568, 570, 571, 572, 573, 606, 612, 613, 635, 636, 646, 648, 660, 661, 662, 671, 674, 675, 676, 677, 678, 679, 680, 681, 690, 715, 722, 731, 737, 753, 754, 788, 793, 794, 803, 817, 835, 839, 840, 842, 843, 844, 845, 846, 865, 868, 876, 877, 879, 880, 881, 884, 886, 887, 892, 893, 894, 907, 908, 1004, 1005, 1014, 1019, 1025, 1030, 1036, 1039, 1041, 1047, 1049, 1051], "indptr": [55, 291, 360, 978, 979, 980, 981, 982, 983, 984, 985, 986, 1043, 1051], "induc": [25, 63, 89, 186, 198, 204, 206, 211, 214, 228, 246, 250, 348, 354, 407, 415, 417, 448, 451, 542, 546, 556, 560, 561, 562, 563, 567, 568, 569, 646, 729, 759, 880, 915, 916, 917, 918, 997, 1004, 1018], "induct": [43, 71, 132, 146, 178, 183, 392, 410, 417, 424, 443, 515, 567, 630, 634, 902, 903, 964, 987, 1000, 1017, 1025, 1037], "inductive_learn": 89, "inductivecluster": 89, "industri": [410, 1023], "ineffect": [315, 408, 1014, 1043, 1044], "ineffici": [2, 417, 445, 577, 835, 836, 1007, 1009], "inequ": [360, 392, 410, 445, 449, 461, 702, 1001, 1002, 1007], "inertia": [90, 91, 94, 353, 410, 445, 449, 451, 454, 461, 462, 464, 465, 1046], "inertia_": [91, 94, 97, 445, 449, 451, 1046], "inf": [107, 173, 301, 387, 410, 420, 448, 452, 457, 458, 459, 463, 473, 474, 480, 556, 557, 562, 563, 596, 597, 600, 609, 610, 611, 622, 630, 638, 640, 651, 652, 653, 655, 672, 674, 675, 679, 680, 681, 683, 690, 731, 733, 749, 781, 788, 792, 863, 872, 879, 931, 932, 933, 934, 949, 1004, 1014, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "infant": 1014, "infeas": [1000, 1007, 1009], "infer": [25, 183, 184, 186, 208, 257, 261, 262, 271, 357, 372, 380, 390, 404, 414, 415, 494, 499, 511, 512, 518, 537, 539, 541, 543, 550, 552, 553, 556, 562, 563, 635, 638, 660, 712, 725, 726, 744, 788, 800, 801, 809, 826, 833, 843, 881, 888, 902, 903, 915, 916, 917, 918, 966, 994, 1000, 1003, 1004, 1009, 1014, 1017, 1020, 1023, 1024, 1025, 1036, 1040, 1041, 1046, 1049, 1052], "inferencesess": 404, "inferenti": 89, "inferior": [443, 447, 1046], "infin": [2, 271, 348, 544, 685, 686, 715, 828, 914, 932, 1007], "infinit": [64, 214, 256, 274, 345, 365, 420, 448, 625, 626, 781, 800, 931, 933, 934, 996, 1003, 1014, 1019, 1043, 1045, 1048, 1049, 1050, 1052, 1053], "inflammatori": 373, "inflat": [90, 185, 186, 188, 410, 414, 1004, 1014], "inflect": 273, "influenc": [42, 48, 52, 111, 112, 134, 183, 186, 196, 246, 256, 279, 311, 318, 341, 345, 348, 361, 367, 412, 415, 417, 433, 442, 456, 467, 484, 485, 486, 491, 504, 557, 559, 561, 563, 565, 568, 571, 573, 614, 631, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 679, 681, 682, 737, 753, 833, 840, 841, 849, 850, 857, 858, 865, 884, 885, 896, 908, 910, 913, 916, 918, 933, 993, 998, 999, 1000, 1007, 1010, 1014, 1018, 1019, 1025, 1028, 1038, 1043, 1044], "influenti": [217, 353, 1028], "info": [2, 45, 77, 103, 120, 186, 187, 247, 265, 269, 375, 377, 382, 392, 418, 466, 499, 564, 565, 959], "inform": [2, 3, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 82, 86, 91, 99, 100, 102, 103, 116, 140, 141, 162, 164, 165, 167, 168, 170, 175, 183, 186, 187, 189, 191, 192, 193, 194, 198, 214, 217, 228, 230, 231, 247, 251, 258, 259, 261, 265, 266, 268, 271, 272, 273, 276, 278, 280, 284, 294, 297, 298, 301, 318, 323, 327, 344, 348, 352, 353, 354, 357, 360, 361, 365, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 386, 390, 391, 392, 393, 401, 404, 407, 409, 414, 415, 417, 418, 419, 420, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 495, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 513, 518, 527, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 610, 611, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 698, 700, 704, 707, 708, 718, 729, 733, 746, 758, 759, 760, 789, 791, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 926, 960, 987, 992, 994, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1018, 1020, 1024, 1025, 1027, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "informatik": 1004, "informed": 1004, "infrastructur": [308, 326, 1023, 1024], "infrequ": [880, 881, 888, 1004, 1035, 1049, 1050, 1051], "infrequent_categories_": [324, 326, 880, 881, 888, 1014], "infrequent_if_exist": [880, 1014], "infrequent_sklearn": [880, 1014], "infti": [231, 420, 622, 1000, 1014, 1042], "ing": 418, "ingela": 1049, "ingest": 418, "ingredi": 420, "ingrid": 1045, "inher": [130, 208, 361, 410, 415, 566, 994, 996, 998, 999, 1001, 1005], "inherit": [247, 378, 380, 391, 392, 424, 580, 679, 927, 943, 945, 956, 1000, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052], "inhibit": [421, 446], "inhomogen": [420, 617], "ini": 259, "init": [2, 54, 77, 91, 92, 94, 97, 187, 194, 233, 234, 236, 237, 238, 257, 259, 291, 353, 381, 386, 410, 415, 417, 445, 449, 451, 453, 455, 461, 462, 541, 543, 550, 551, 562, 563, 635, 636, 693, 695, 697, 856, 1001, 1035, 1044, 1047, 1049, 1050, 1051], "init_": [562, 563], "init_param": [256, 259, 262, 800, 801], "init_s": [94, 353, 451], "init_size_": 1047, "init_tim": 259, "initi": [0, 46, 51, 55, 71, 77, 78, 90, 91, 93, 96, 97, 112, 147, 155, 156, 157, 171, 176, 183, 186, 194, 206, 228, 233, 234, 238, 255, 257, 258, 271, 291, 322, 332, 341, 353, 361, 366, 373, 378, 380, 386, 387, 390, 392, 410, 415, 417, 419, 420, 422, 444, 445, 449, 450, 451, 452, 453, 454, 455, 461, 462, 463, 464, 515, 518, 534, 535, 536, 540, 541, 543, 546, 548, 549, 550, 551, 556, 557, 562, 563, 566, 596, 610, 611, 613, 614, 622, 623, 630, 643, 648, 649, 650, 651, 655, 656, 661, 663, 664, 665, 666, 669, 670, 671, 672, 674, 679, 680, 681, 683, 684, 687, 693, 694, 695, 697, 698, 800, 801, 837, 856, 863, 864, 865, 903, 936, 950, 951, 972, 977, 978, 996, 1000, 1001, 1003, 1008, 1009, 1010, 1018, 1020, 1023, 1025, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "initial_imputer_": 630, "initial_strategi": 630, "initial_theta": [613, 614], "initialis": [120, 541, 543, 550, 1035, 1043, 1044], "initializedcheck": 379, "inject": [250, 373, 417], "inki": 1041, "inli": [240, 1000, 1010], "inlier": [111, 150, 216, 240, 250, 311, 392, 412, 432, 471, 566, 674, 680, 853, 884, 896, 910, 911, 913, 1000, 1010, 1042, 1043, 1048], "inlier_mask": 216, "inlier_mask_": [216, 674], "inlier_plot": 111, "inliers_mask": 112, "inlin": [224, 378, 379, 1020], "inner": [64, 125, 146, 149, 272, 276, 290, 332, 365, 418, 445, 517, 585, 592, 621, 651, 672, 683, 778, 780, 996, 1004, 1014, 1019, 1036, 1039, 1049, 1052], "inner_clf": 1004, "inner_cv": [276, 327], "inner_it": 384, "inner_numb": 332, "inner_stat": 1049, "inner_stats_": 1049, "inpaint": 415, "inplac": [2, 231, 250, 283, 456, 484, 485, 486, 487, 862, 870, 873, 876, 877, 879, 883, 884, 885, 887, 976, 979, 980, 981, 985, 986, 1044], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 387], "inplace_csr_row_normalize_l1": [2, 387], "inplace_csr_row_normalize_l2": [2, 387], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 43, 45, 49, 64, 67, 69, 105, 120, 124, 142, 146, 147, 176, 177, 178, 186, 191, 193, 213, 216, 217, 221, 228, 231, 243, 244, 246, 247, 254, 266, 284, 288, 295, 296, 308, 312, 313, 314, 315, 320, 323, 325, 328, 341, 345, 349, 354, 372, 375, 378, 381, 383, 387, 388, 390, 391, 392, 404, 407, 408, 411, 414, 415, 416, 417, 418, 419, 420, 422, 428, 431, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 447, 450, 451, 452, 456, 459, 460, 463, 466, 467, 469, 470, 471, 473, 474, 484, 485, 486, 491, 506, 512, 519, 520, 521, 523, 527, 531, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 623, 625, 630, 631, 632, 633, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 688, 689, 690, 691, 692, 693, 695, 696, 699, 700, 701, 702, 703, 704, 705, 724, 725, 726, 727, 731, 748, 749, 751, 753, 754, 756, 757, 764, 770, 774, 775, 777, 781, 782, 783, 784, 788, 793, 794, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 895, 899, 900, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 939, 945, 948, 950, 960, 962, 963, 967, 976, 978, 984, 985, 986, 989, 990, 992, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "input_featur": [193, 380, 392, 426, 431, 444, 445, 447, 449, 451, 466, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 569, 570, 571, 572, 573, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 1051], "input_nam": [932, 934, 966, 1049], "input_tag": 926, "input_typ": [354, 418, 585], "inputtag": [2, 926], "inria": [0, 661, 1035], "insensit": [246, 646, 679, 681, 791, 908, 997, 1018, 1019, 1035], "insepar": [168, 375], "insert": [93, 186, 213, 390, 410, 489, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 922], "insid": [2, 55, 57, 63, 187, 215, 247, 271, 332, 341, 367, 372, 373, 380, 384, 401, 410, 418, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 960, 963, 1011, 1028, 1052], "insight": [43, 46, 186, 187, 201, 214, 215, 231, 265, 308, 311, 352, 360, 408, 409, 803, 806, 807, 817, 830, 1011, 1020, 1028], "insist": 102, "inspect": [2, 43, 48, 66, 67, 70, 89, 94, 136, 141, 147, 149, 150, 151, 155, 165, 170, 175, 176, 186, 187, 188, 189, 197, 205, 222, 227, 251, 265, 271, 274, 283, 294, 299, 302, 316, 320, 321, 322, 323, 325, 327, 337, 338, 339, 340, 342, 343, 345, 352, 357, 366, 380, 392, 410, 411, 417, 418, 466, 556, 557, 560, 561, 562, 563, 567, 568, 569, 634, 635, 636, 637, 836, 867, 868, 915, 916, 917, 918, 991, 1004, 1005, 1008, 1011, 1012, 1019, 1023, 1025, 1030, 1038], "inspir": [110, 151, 187, 231, 378, 390, 417, 564, 565, 938, 994, 1044], "instabl": [74, 186, 301, 420, 454, 538, 542, 546, 698, 1042, 1045, 1048], "instal": [86, 254, 291, 320, 321, 322, 323, 324, 325, 326, 327, 328, 365, 366, 378, 379, 381, 382, 384, 386, 390, 391, 397, 403, 404, 406, 410, 418, 454, 464, 499, 694, 698, 1020, 1042, 1043, 1044, 1048, 1049], "installment_commit": 265, "instanc": [2, 43, 47, 49, 52, 61, 63, 64, 86, 89, 91, 137, 149, 165, 168, 182, 187, 188, 197, 198, 242, 247, 250, 265, 267, 269, 280, 282, 283, 302, 320, 327, 335, 337, 338, 344, 345, 352, 353, 354, 364, 365, 366, 372, 373, 375, 376, 377, 378, 380, 383, 384, 386, 387, 390, 392, 396, 401, 404, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 424, 434, 435, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 490, 493, 495, 498, 499, 500, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 623, 630, 631, 632, 633, 635, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 710, 723, 732, 733, 741, 774, 777, 781, 782, 783, 784, 786, 787, 790, 791, 792, 795, 796, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 933, 934, 936, 945, 946, 950, 951, 959, 960, 961, 962, 972, 973, 974, 977, 987, 988, 992, 993, 994, 1000, 1001, 1004, 1006, 1007, 1010, 1012, 1014, 1018, 1019, 1020, 1024, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instanci": 1044, "instant": 207, "instantan": 511, "instanti": [104, 173, 323, 381, 401, 417, 452, 570, 571, 605, 633, 803, 806, 807, 809, 817, 826, 828, 829, 830, 831, 832, 834, 941, 1010, 1035, 1043, 1047, 1051], "instead": [0, 43, 44, 45, 52, 58, 86, 88, 89, 90, 103, 125, 137, 151, 165, 168, 170, 213, 215, 228, 231, 237, 250, 262, 267, 268, 272, 273, 284, 290, 296, 311, 320, 321, 322, 323, 324, 341, 343, 345, 352, 354, 360, 361, 365, 366, 372, 373, 376, 377, 378, 379, 380, 382, 383, 386, 387, 390, 391, 392, 401, 404, 406, 410, 411, 413, 414, 415, 416, 417, 418, 419, 421, 433, 439, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 458, 461, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 512, 513, 536, 537, 538, 541, 543, 544, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 610, 611, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 633, 635, 638, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 695, 697, 710, 712, 749, 777, 781, 782, 783, 785, 786, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 815, 817, 819, 821, 822, 823, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 868, 869, 870, 872, 873, 874, 879, 880, 885, 886, 887, 897, 898, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 921, 939, 946, 951, 960, 978, 993, 994, 996, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1014, 1018, 1019, 1020, 1023, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instinct": 352, "institut": [0, 265, 375, 1007], "instruct": [365, 378, 379, 380, 381, 382, 383, 386, 390, 391, 392, 506, 591, 592, 594, 1027, 1035], "instrument": [51, 102, 121, 185], "insuffici": [395, 1003], "insur": [183, 192, 213, 409, 466, 499, 555, 651, 672, 683, 709, 748, 753, 755, 833, 868, 871, 872, 880, 887, 1000, 1025], "int": [47, 49, 52, 53, 55, 72, 79, 95, 112, 137, 145, 149, 150, 160, 161, 171, 172, 173, 179, 182, 185, 195, 204, 206, 213, 231, 238, 240, 246, 250, 256, 265, 266, 269, 270, 271, 291, 296, 298, 304, 318, 331, 354, 373, 378, 380, 390, 392, 408, 411, 414, 418, 421, 422, 425, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 505, 506, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 610, 611, 613, 614, 620, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 710, 712, 716, 729, 730, 732, 733, 734, 737, 741, 759, 760, 772, 777, 781, 782, 783, 784, 785, 786, 787, 790, 792, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 929, 933, 934, 936, 937, 950, 951, 953, 954, 955, 957, 968, 972, 974, 977, 982, 983, 1000, 1011, 1035, 1041, 1045, 1046], "int32": [250, 291, 318, 378, 392, 445, 449, 451, 453, 455, 461, 909, 910, 911, 912, 913, 968, 1019, 1044, 1050, 1051, 1052], "int64": [43, 53, 87, 103, 186, 187, 265, 280, 285, 288, 317, 327, 360, 392, 418, 428, 444, 450, 452, 499, 517, 518, 522, 588, 591, 643, 649, 650, 655, 656, 668, 717, 718, 721, 747, 797, 843, 872, 901, 931, 958, 989, 1005, 1043, 1046, 1048, 1050, 1051, 1052], "int64dtyp": 1052, "intact": 880, "integ": [2, 43, 55, 86, 103, 186, 213, 231, 321, 322, 361, 365, 372, 373, 375, 380, 383, 387, 391, 392, 410, 411, 414, 415, 417, 418, 435, 439, 464, 466, 469, 474, 489, 499, 501, 504, 505, 506, 508, 511, 512, 515, 517, 518, 522, 525, 553, 562, 563, 564, 565, 566, 570, 571, 575, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 635, 636, 647, 654, 658, 662, 668, 676, 678, 679, 681, 702, 717, 738, 803, 805, 806, 807, 808, 810, 812, 817, 818, 819, 822, 823, 825, 827, 830, 838, 841, 843, 846, 847, 848, 872, 880, 881, 886, 887, 888, 891, 901, 903, 915, 916, 917, 918, 929, 966, 967, 968, 972, 994, 1000, 1005, 1007, 1014, 1017, 1019, 1020, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "integr": [0, 52, 77, 103, 165, 178, 202, 308, 322, 366, 376, 380, 381, 382, 384, 386, 392, 396, 415, 420, 448, 718, 758, 789, 978, 1003, 1011, 1028, 1036, 1038, 1039, 1047, 1048, 1052], "intel": [1004, 1023], "intelex": [396, 1023], "intellectu": 185, "intellig": [96, 168, 265, 352, 375, 410, 417, 450, 558, 559, 641, 699, 728, 837, 864, 865, 1005, 1016, 1024, 1028], "intend": [90, 91, 124, 214, 254, 345, 352, 378, 379, 385, 390, 392, 410, 414, 470, 585, 676, 702, 876, 877, 887, 905, 924, 999, 1000, 1004, 1008, 1015, 1023], "intens": [99, 123, 291, 375, 379, 390, 392, 415, 445, 449, 461, 610, 611, 635, 636, 805, 993, 1011, 1028, 1043], "intention": 64, "inter": [2, 75, 141, 361, 417, 719], "interact": [2, 42, 147, 149, 183, 213, 238, 242, 272, 321, 377, 379, 380, 382, 384, 390, 392, 393, 404, 411, 562, 563, 564, 565, 635, 636, 882, 886, 993, 996, 1000, 1001, 1002, 1009, 1011, 1014, 1022, 1024, 1037, 1042, 1049, 1050], "interaction_cst": [187, 325, 417, 564, 565, 1050], "interaction_onli": [43, 882, 1000, 1014], "interactiveshellapp": 384, "intercept": [123, 205, 222, 230, 349, 392, 484, 485, 486, 552, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 882, 886, 889, 907, 908, 914, 1000, 1002, 1004, 1009, 1018, 1019, 1038, 1040, 1044, 1045], "intercept_": [196, 203, 205, 222, 248, 339, 346, 349, 380, 392, 484, 485, 486, 552, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 907, 908, 909, 910, 911, 912, 913, 998, 1000, 1018, 1019, 1035, 1042, 1047, 1049, 1052], "intercept_hidden_": 863, "intercept_init": [669, 670, 671, 679, 681], "intercept_sc": [206, 661, 662, 907, 908, 914, 1000, 1019], "intercept_visible_": 863, "intercepts_": [864, 865, 1008], "interchang": [1023, 1052], "interclass": 75, "interdepend": 518, "interest": [0, 43, 45, 52, 77, 79, 83, 88, 95, 99, 104, 134, 146, 154, 165, 168, 175, 181, 186, 187, 188, 202, 213, 214, 215, 231, 234, 245, 264, 265, 268, 271, 272, 274, 280, 285, 288, 328, 341, 348, 353, 360, 365, 373, 375, 378, 383, 384, 386, 390, 393, 409, 410, 412, 415, 418, 420, 496, 497, 503, 507, 513, 649, 650, 907, 994, 1000, 1001, 1004, 1009, 1010, 1011, 1024, 1028, 1035, 1052], "interestingli": [109, 168, 1014], "interfac": [2, 42, 134, 183, 371, 372, 379, 380, 382, 387, 390, 392, 414, 420, 421, 443, 447, 452, 499, 556, 702, 803, 806, 807, 817, 867, 868, 893, 988, 993, 1007, 1019, 1023, 1024, 1028, 1035, 1037, 1040, 1041, 1043, 1044, 1049, 1051], "interfer": [327, 1045], "interim": 1042, "interior": [673, 1000, 1050], "interleav": [2, 374, 390, 525], "intermedi": [43, 46, 85, 88, 139, 146, 250, 341, 390, 418, 562, 563, 622, 867, 1004, 1047, 1053], "intern": [0, 43, 63, 103, 113, 125, 140, 144, 147, 149, 159, 168, 171, 181, 183, 213, 247, 265, 285, 291, 293, 310, 317, 332, 354, 361, 366, 373, 375, 380, 384, 387, 390, 392, 401, 406, 407, 410, 414, 415, 417, 418, 419, 420, 421, 439, 441, 446, 467, 470, 514, 537, 538, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 596, 597, 613, 614, 643, 646, 649, 655, 671, 675, 679, 681, 699, 711, 734, 737, 761, 762, 786, 833, 847, 848, 863, 864, 865, 867, 868, 872, 886, 888, 902, 903, 905, 907, 908, 909, 912, 915, 916, 917, 918, 1000, 1001, 1002, 1004, 1007, 1010, 1014, 1016, 1019, 1020, 1025, 1028, 1035, 1038, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "internet": [373, 383, 1014], "interop": 1023, "interoper": [404, 420, 1024], "interp": [280, 281, 341], "interp1d": [656, 666, 687], "interp_tpr": 281, "interpol": [43, 53, 68, 75, 83, 84, 87, 91, 113, 120, 123, 174, 177, 183, 192, 193, 204, 229, 243, 249, 280, 286, 295, 296, 303, 309, 331, 341, 420, 638, 648, 656, 666, 675, 687, 703, 710, 850, 858, 868, 882, 886, 995, 1000, 1004, 1014, 1025, 1042, 1047], "interpret": [43, 64, 149, 168, 177, 183, 184, 185, 187, 209, 213, 214, 218, 229, 231, 264, 271, 273, 274, 285, 309, 312, 315, 322, 352, 354, 365, 376, 378, 379, 384, 386, 387, 392, 395, 408, 410, 411, 416, 418, 454, 466, 467, 469, 499, 544, 575, 614, 642, 646, 656, 675, 676, 694, 695, 698, 704, 732, 756, 761, 762, 786, 795, 796, 809, 818, 830, 831, 833, 836, 868, 880, 887, 998, 1000, 1004, 1005, 1011, 1012, 1014, 1020, 1023, 1025, 1035, 1036, 1040, 1043, 1048, 1049, 1050], "interquartil": [250, 885, 897], "interquartile_rang": 885, "interrog": 418, "interrupt": 1000, "intersect": [272, 338, 407, 410, 741], "interv": [2, 52, 64, 133, 149, 177, 183, 198, 213, 214, 215, 231, 271, 373, 392, 408, 414, 417, 420, 440, 441, 519, 520, 521, 560, 561, 563, 565, 567, 568, 638, 639, 641, 680, 745, 751, 753, 807, 824, 833, 870, 872, 886, 909, 910, 911, 937, 996, 1000, 1004, 1014, 1020, 1025, 1042, 1046], "intervent": [88, 186], "intl": [64, 414], "intp": [425, 453, 455], "intra": [43, 591, 594, 795, 796], "intract": [89, 415, 1001, 1009], "intric": [217, 515], "intricaci": 378, "intrins": [193, 392, 415, 417, 1007, 1012, 1018, 1047], "introduc": [43, 109, 111, 112, 125, 149, 167, 183, 188, 193, 198, 217, 239, 244, 247, 250, 252, 278, 325, 326, 354, 374, 376, 378, 380, 382, 383, 386, 390, 392, 401, 408, 410, 412, 414, 415, 417, 418, 434, 443, 444, 445, 447, 449, 451, 461, 466, 470, 484, 485, 486, 487, 499, 507, 518, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 558, 559, 569, 570, 571, 572, 573, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 661, 667, 688, 689, 691, 692, 695, 833, 851, 856, 859, 863, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 901, 905, 998, 1000, 1003, 1006, 1007, 1010, 1014, 1016, 1018, 1019, 1025, 1035, 1036, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "introduct": [167, 231, 269, 378, 409, 414, 415, 418, 593, 791, 792, 842, 846, 1000, 1002, 1004, 1006, 1022, 1029, 1030], "introductori": [146, 169, 170, 175, 176, 178, 179, 183, 239, 420, 614, 625, 1025, 1028], "introspect": [43, 45, 103, 384, 562, 563, 592, 1014], "intrus": 373, "intuit": [43, 52, 67, 79, 85, 95, 125, 134, 137, 143, 163, 170, 186, 187, 214, 215, 235, 240, 272, 288, 296, 313, 316, 338, 341, 345, 353, 378, 392, 408, 410, 412, 414, 416, 648, 785, 786, 787, 790, 878, 907, 909, 910, 912, 913, 996, 1000, 1001, 1004, 1005, 1011, 1014, 1015, 1019, 1028, 1035], "inv": [109, 113, 307], "inv_kw_arg": 871, "invalid": [2, 47, 213, 392, 448, 581, 674, 715, 777, 992, 1000, 1004, 1041, 1043, 1045, 1046, 1048, 1049, 1051], "invalidparametererror": 1004, "invalu": 1028, "invari": [75, 375, 392, 410, 420, 617, 692, 750, 821, 822, 1000, 1001, 1004, 1019, 1024, 1043, 1046, 1047, 1048], "invent": 1007, "inventor": 1006, "inventori": 1028, "invers": [2, 8, 51, 87, 108, 109, 110, 134, 183, 261, 278, 280, 294, 341, 353, 354, 370, 392, 411, 413, 414, 415, 417, 418, 422, 447, 467, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 530, 536, 537, 538, 542, 544, 546, 560, 564, 567, 592, 593, 594, 631, 647, 648, 661, 662, 669, 671, 677, 678, 679, 680, 681, 683, 727, 746, 755, 800, 801, 849, 850, 857, 858, 864, 865, 867, 871, 874, 880, 881, 883, 899, 900, 907, 908, 909, 912, 913, 915, 917, 939, 998, 1000, 1004, 1007, 1008, 1014, 1018, 1019, 1025, 1029, 1030, 1035, 1038, 1043, 1046, 1047, 1049, 1053], "inverse_components_": [899, 900, 1016, 1049], "inverse_func": [107, 186, 411, 467, 871, 1014, 1043, 1053], "inverse_transform": [44, 84, 87, 125, 165, 295, 353, 401, 415, 418, 447, 467, 484, 485, 486, 536, 537, 538, 541, 542, 543, 544, 546, 547, 584, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 633, 803, 806, 807, 817, 867, 871, 872, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 887, 899, 900, 1014, 1015, 1016, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "invert": [113, 125, 165, 234, 353, 354, 390, 412, 418, 633, 692, 696, 1014, 1044], "invert_yaxi": [182, 354], "invest": [384, 1028], "investig": [125, 130, 134, 182, 348, 378, 404, 1000], "invok": [380, 534, 540, 542, 548, 549, 570, 572, 573, 802, 825, 828, 904, 1047, 1052], "involv": [316, 318, 320, 328, 341, 345, 365, 367, 373, 378, 392, 393, 404, 413, 420, 702, 835, 836, 1001, 1005, 1007, 1011, 1012, 1019, 1023, 1028, 1043], "invscal": [307, 679, 680, 681, 864, 865, 1018], "io": [372, 375, 378, 382, 384, 386, 392, 695, 1023, 1030, 1033], "ioangatop": 1052, "ioanni": 737, "ioerror": 1051, "iofal": 1049, "ion": 1050, "ionescu": [645, 996, 1045], "iowa": [143, 154, 250], "ipca": [2, 124, 536, 537], "ipdb": 386, "ipm": 673, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360], "ipython": [380, 383, 384, 386], "ipython_config": 384, "iq": 185, "iqbal": 1047, "iqr": [250, 885, 897], "ir": [243, 415, 593, 729, 759, 842, 846, 1002, 1004], "iren": [1050, 1051], "iri": [2, 50, 55, 66, 67, 69, 76, 106, 119, 122, 124, 130, 133, 134, 135, 136, 138, 152, 155, 161, 164, 169, 171, 174, 175, 178, 183, 191, 192, 197, 205, 206, 210, 245, 248, 254, 258, 264, 276, 277, 280, 281, 294, 300, 302, 306, 307, 313, 322, 329, 334, 336, 337, 339, 341, 343, 344, 345, 355, 356, 358, 359, 360, 371, 372, 391, 404, 410, 411, 414, 415, 417, 499, 507, 544, 552, 556, 560, 567, 613, 625, 634, 679, 803, 817, 902, 903, 904, 907, 912, 915, 919, 920, 921, 922, 993, 994, 998, 1003, 1004, 1007, 1011, 1014, 1017, 1018, 1019, 1020, 1025, 1030, 1048], "iris": [126, 277, 278], "iris_61": 372, "iris_969": 372, "iris_version_3": 372, "irreduc": [137, 1004], "irregular": [175, 345, 410, 1007], "irregularities_kernel": 175, "irrelev": [163, 198, 361, 384, 412, 417, 419, 607, 743, 1004], "irrespect": [213, 244, 265, 280, 291, 609], "irvin": 375, "is_categor": 635, "is_categorical_": [564, 565], "is_classifi": [2, 380, 392], "is_cluster": 2, "is_data_valid": [674, 1000], "is_fit": [2, 987], "is_fitted_": [424, 427, 429, 432, 433], "is_inli": [471, 566, 853], "is_leav": 360, "is_max_test_scor": 105, "is_model_valid": [674, 1000], "is_multilabel": [2, 387, 1052], "is_paramet": 991, "is_pypi": 1053, "is_regressor": [2, 392], "is_scalar_nan": 1048, "is_sh": 282, "is_split_nod": 360, "is_stationari": [178, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "isa": 57, "isaac": [1041, 1042, 1044, 1045, 1052], "isaack": 1048, "isaactrost": 1052, "isakov": 1047, "isbn": [375, 410, 1000], "isclos": 55, "isdigit": [57, 418], "ish": 69, "ishaan": 1048, "ishan": [1048, 1049], "ishank": [1040, 1041, 1042], "ishikawa": [1047, 1048], "isin": 331, "isinst": [70, 142, 231, 392], "islic": [47, 79, 95], "ism": 1039, "isn": [168, 320, 352, 354, 361, 366, 378, 382, 386, 518, 564, 565, 597, 797, 806, 807, 880, 1007, 1019, 1045, 1053], "iso": [169, 183, 225, 235, 613, 616, 617, 1025], "iso_reg": 638, "isoformat": 55, "isol": [2, 143, 150, 240, 250, 353, 376, 384, 396, 566, 853, 911, 1044, 1045], "isolationforest": [2, 133, 136, 183, 216, 240, 250, 311, 634, 833, 911, 1010, 1025, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052], "isolationforestifittedisolationforest": 150, "isomap": [2, 51, 85, 139, 183, 232, 235, 237, 244, 301, 320, 324, 417, 505, 547, 552, 569, 692, 693, 694, 695, 856, 868, 877, 900, 1007, 1025, 1029, 1030, 1043, 1045, 1048, 1049, 1050, 1051, 1052], "isomap__n_neighbor": 320, "isometr": [233, 691, 693, 694, 695, 1001], "isoton": [2, 61, 62, 107, 183, 239, 439, 638, 639, 640, 660, 936, 1025, 1026, 1030, 1036, 1037, 1038, 1039, 1041, 1048, 1051], "isotonic_regress": [2, 638, 1048], "isotonicregress": [2, 243, 995, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1049, 1050, 1051], "isotonicregression0": 638, "isotrop": [2, 70, 88, 90, 94, 125, 172, 174, 233, 235, 410, 412, 420, 515, 522, 535, 618, 622, 623, 625, 626], "isotropi": 415, "isr": 419, "issam": [0, 1041], "issu": [0, 2, 43, 62, 110, 116, 213, 231, 276, 318, 366, 372, 381, 382, 383, 387, 390, 392, 393, 395, 396, 401, 404, 406, 410, 412, 413, 418, 451, 454, 464, 475, 484, 485, 486, 537, 542, 546, 576, 591, 592, 594, 614, 630, 694, 698, 772, 878, 880, 883, 895, 941, 994, 1001, 1012, 1014, 1019, 1023, 1024, 1027, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1052, 1053], "issuenumb": 386, "ist": 419, "isupp": 418, "isuru": 1047, "itakura": [415, 541, 543, 550, 1042], "itali": 375, "item": [2, 47, 48, 49, 50, 51, 52, 55, 66, 78, 88, 107, 138, 140, 143, 146, 154, 186, 211, 215, 221, 234, 246, 247, 249, 258, 268, 274, 278, 324, 331, 353, 371, 378, 379, 380, 387, 411, 466, 529, 564, 565, 591, 592, 594, 635, 815, 880, 902, 903, 922, 929, 957, 996, 1017, 1024], "item_idx": 311, "iter": [2, 47, 54, 55, 67, 80, 104, 113, 120, 123, 134, 137, 140, 142, 144, 145, 147, 148, 149, 168, 181, 183, 193, 194, 221, 228, 258, 259, 263, 266, 279, 282, 306, 308, 309, 313, 322, 331, 333, 334, 341, 378, 380, 384, 386, 387, 391, 392, 405, 410, 413, 415, 417, 419, 422, 439, 442, 443, 445, 447, 449, 450, 451, 454, 456, 461, 463, 464, 465, 473, 474, 480, 484, 485, 486, 518, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 562, 563, 564, 565, 567, 570, 571, 584, 585, 591, 592, 594, 596, 597, 605, 613, 630, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 841, 856, 863, 864, 865, 866, 867, 871, 878, 880, 882, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 922, 950, 951, 958, 959, 960, 961, 969, 993, 994, 1000, 1001, 1003, 1004, 1007, 1008, 1009, 1017, 1018, 1019, 1020, 1024, 1025, 1028, 1030, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "iter_minibatch": 47, "iter_offset": 1049, "iter_offset_": 1049, "iterated_pow": [104, 535, 538, 544, 1041], "iterative_impute_scor": 182, "iterativeimput": [2, 180, 182, 183, 382, 401, 492, 568, 583, 631, 632, 633, 642, 648, 675, 829, 850, 868, 1025, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "itergrid": 1037, "itertool": [47, 77, 79, 95, 155, 187, 201, 257, 262, 271, 278, 280, 417], "ith": [499, 777, 781, 843, 864, 865, 880, 881], "ith_cluster_silhouette_valu": 93, "itk": [1045, 1046, 1047], "its": [0, 2, 7, 25, 43, 48, 51, 52, 53, 57, 63, 64, 70, 72, 88, 98, 99, 109, 111, 113, 116, 118, 125, 126, 132, 134, 140, 142, 144, 146, 149, 159, 168, 170, 175, 177, 186, 187, 189, 191, 193, 202, 226, 230, 231, 235, 240, 247, 249, 250, 252, 254, 256, 261, 262, 265, 270, 274, 276, 278, 280, 285, 291, 293, 297, 298, 313, 323, 333, 338, 345, 350, 352, 353, 356, 360, 361, 366, 367, 371, 372, 373, 374, 378, 379, 380, 382, 383, 386, 390, 391, 392, 393, 396, 398, 401, 404, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 426, 442, 444, 446, 448, 452, 456, 458, 462, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 500, 506, 526, 534, 536, 537, 538, 540, 541, 543, 544, 545, 547, 553, 556, 558, 559, 560, 561, 562, 563, 567, 568, 569, 586, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 647, 648, 674, 675, 677, 688, 689, 690, 691, 695, 699, 702, 711, 728, 732, 733, 739, 740, 744, 781, 784, 786, 800, 801, 803, 828, 835, 836, 838, 849, 850, 851, 853, 854, 855, 857, 858, 859, 866, 867, 871, 876, 879, 880, 882, 899, 900, 903, 907, 908, 915, 917, 933, 934, 939, 946, 973, 993, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1023, 1028, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "itsaphel": 1053, "itself": [27, 61, 64, 82, 88, 134, 146, 150, 187, 198, 211, 247, 253, 265, 280, 291, 318, 341, 353, 365, 367, 377, 378, 380, 392, 401, 404, 408, 410, 421, 442, 443, 446, 447, 448, 471, 472, 473, 474, 475, 476, 477, 478, 530, 534, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 554, 569, 572, 586, 595, 598, 599, 601, 602, 603, 605, 606, 642, 643, 644, 645, 646, 648, 658, 692, 694, 795, 796, 842, 843, 844, 845, 846, 847, 848, 852, 860, 861, 872, 873, 874, 902, 903, 960, 996, 1000, 1001, 1003, 1007, 1008, 1012, 1023, 1039, 1050], "iv": [185, 1004], "ivan": [1043, 1044, 1047, 1050, 1053], "ivanllt": 1050, "iver": 1041, "iverson": 1000, "ivicajov": 1038, "ivl": 189, "ivt": 537, "iv\u00e1n": [1042, 1048], "iwhalv": 1048, "iwona": 1052, "ix": [50, 280, 347], "iy_j": 1014, "iyer": 1046, "izadifar": 1053, "j": [0, 50, 55, 72, 73, 75, 78, 94, 102, 110, 111, 112, 134, 137, 138, 148, 166, 171, 182, 187, 225, 236, 249, 256, 270, 271, 276, 282, 295, 301, 304, 315, 325, 360, 366, 372, 373, 375, 382, 384, 390, 399, 407, 408, 410, 412, 414, 415, 417, 418, 420, 421, 439, 442, 446, 448, 455, 456, 471, 476, 501, 516, 519, 520, 521, 523, 531, 534, 537, 539, 540, 541, 543, 544, 550, 556, 562, 563, 596, 597, 635, 636, 640, 647, 648, 651, 652, 669, 670, 672, 683, 691, 692, 693, 695, 696, 697, 699, 708, 711, 713, 717, 719, 721, 724, 726, 727, 729, 758, 759, 761, 762, 777, 781, 791, 792, 795, 796, 836, 837, 844, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 878, 887, 888, 915, 916, 993, 994, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j0rd1smit": 1047, "ja": [413, 1042], "jaccard": [2, 290, 407, 452, 459, 702, 706, 722, 732, 737, 741, 781, 782, 783, 799, 1007, 1043, 1044], "jaccard_scor": [2, 290, 706, 732, 737, 799, 1004, 1044, 1047], "jaccard_similarity_scor": [1037, 1039, 1044], "jaccarddist": 702, "jack": [1037, 1040, 1048, 1049, 1050, 1051, 1053], "jacklangerman": [1043, 1044], "jackman": 1036, "jackmartin": 1041, "jackson": [1041, 1042, 1044], "jacob": [0, 400, 1040, 1041, 1042], "jacobi": 1050, "jacobsen": 1038, "jacopo": [1043, 1044], "jacqu": [1036, 1038], "jaehong": 1045, "jaehyun": 1047, "jaewon": 1043, "jai": [1045, 1049], "jaidev": 1040, "jaim": 1045, "jain": [1041, 1042, 1043, 1047, 1049, 1050], "jair": 1042, "jake": [0, 400, 1022, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049], "jakemick": 1037, "jakhar": 1047, "jakirkham": [1042, 1043, 1044, 1050, 1051], "jakub": 1052, "jakubek": [1048, 1049], "jalali": [0, 393, 399, 404, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "jalexand3r": 1049, "jamaoui": [1043, 1044, 1047], "jame": [0, 375, 414, 837, 1005, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052], "jamestwebb": [1037, 1038], "jami": 1043, "jamieson": 993, "jan": [0, 214, 288, 399, 886, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1051], "jana": 1045, "janet": 375, "jane\u017e": [1036, 1037], "janfidor": [1050, 1051], "janhang": 1045, "janin": 1042, "janna": 1041, "jannik": 1048, "janso": 1035, "jansson": [1038, 1050], "januari": [376, 378, 1035, 1036, 1045, 1047, 1050, 1052], "janvanrijn": [1043, 1044], "jaqu": [0, 400, 1035, 1036, 1037, 1038], "jardim": 1048, "jare": 1050, "jarfa": 1041, "jarir": 1048, "jarkko": 699, "jarosch": 1037, "jaroslaw": 1042, "jarrod": [0, 400, 1044, 1051, 1052], "jarvelin": [729, 759, 1004], "jaskowiak": 448, "jason": [44, 415, 538, 903, 1041, 1043, 1047, 1050], "jatin": [1039, 1041], "jauhar": 1049, "jauvin": 1036, "java": [410, 444], "javier": [1039, 1053], "jawahar": 996, "jax": 1052, "jay": 1042, "jaya": 1049, "jayaratn": [1046, 1047, 1050, 1051], "jayratn": 1047, "jayzed82": 1042, "jb": [1051, 1052], "jbdelafoss": 1042, "jbirch": [410, 444], "jblackburn": 1041, "jc": [1042, 1043], "jdcaballero": 1039, "jdethuren": [1043, 1044], "je": 1049, "jean": [1035, 1038, 1039, 1040, 1041, 1042, 1048], "jeann": 1049, "jeanselm": 1045, "jeb": 1043, "jeevan": 1047, "jeff": [1039, 1041, 1048, 1049], "jeffrei": [1038, 1041], "jeffrey04": [1040, 1041], "jelfner": 1049, "jell": 1038, "jen": [661, 1043], "jen09": 415, "jenatton": 415, "jenni": 1049, "jennif": 1048, "jensen": [1041, 1047], "jeong": 1045, "jeremi": [1028, 1040, 1041, 1042, 1043, 1046, 1047], "jeremiedbb": [1043, 1044, 1045], "jeremynixon": 1041, "jeroen": 1041, "jeroenpeterbo": 1047, "jeroko": 1042, "jeromedock": 1045, "jerphanion": [0, 399, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "jerryzhu": 902, "jesper": 1045, "jess": [838, 1005, 1048], "jess010": 1038, "jessica": 1041, "jessicakk0711": 1051, "jesu": [57, 352, 353], "jet": 100, "jevnik": 1040, "jewalikar": 1041, "jf": 1044, "jfraj": 1040, "jha": [1039, 1045, 1049], "jhay": 1047, "jhun": 476, "jia": 1041, "jiacheng": 1042, "jiali": 1040, "jian": 410, "jianbo": [410, 454, 464, 694], "jiang": [408, 1039, 1046], "jianzhu": 1048, "jiawei": [1051, 1052, 1053], "jiaxiang": 1047, "jie": [1043, 1044, 1047], "jiefangxuanyan": 1048, "jigna": 1047, "jihan": 1049, "jill": 1041, "jim": 1037, "jim0421": 1047, "jimenez": [1048, 1049], "jimmi": [864, 865, 1008, 1041, 1043], "jim\u00e9nez": [0, 368, 1043, 1046, 1047, 1048, 1049, 1050], "jin": [642, 1046, 1047], "jindal": 1047, "jinkun": 1043, "jiongyan": 1043, "jiquan": 1008, "jirka": 1049, "jiten": 1050, "jitendra": [410, 454, 464, 694], "jitter": [134, 653, 657, 1046], "jiyuan": 1041, "jjabl": 1043, "jjmistri": 1046, "jk": 1001, "jkarolczak": 1050, "jkleint": [1042, 1043], "jl": [244, 900], "jmlr": [0, 410, 669, 670, 679, 707, 1000, 1019], "jmlr_2014": 695, "jmontoyam": 1042, "jnboehm": 1048, "jnt": 414, "joaak": [1043, 1044], "joan": [1042, 1043, 1044, 1045], "joanna": 1045, "joaquin": 1047, "job": [149, 186, 259, 265, 378, 382, 386, 398, 417, 421, 439, 446, 448, 450, 452, 454, 459, 460, 463, 466, 469, 470, 474, 534, 538, 539, 540, 542, 545, 546, 548, 549, 551, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 605, 610, 611, 613, 637, 642, 660, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 866, 869, 902, 903, 905, 969, 1028], "joblib": [2, 41, 77, 87, 104, 140, 291, 321, 373, 376, 378, 381, 387, 390, 392, 396, 403, 411, 421, 439, 443, 446, 447, 448, 450, 452, 454, 459, 460, 463, 466, 469, 474, 511, 512, 534, 538, 539, 540, 542, 545, 546, 548, 549, 551, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 597, 605, 610, 611, 613, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 853, 855, 857, 858, 860, 861, 866, 867, 868, 869, 902, 903, 969, 970, 973, 988, 1004, 1024, 1030, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1050, 1052, 1053], "joblib_start_method": 390, "jochen": 1037, "jock": 102, "joe": [1040, 1053], "joei": 1051, "joel": [0, 393, 399, 418, 538, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "johann": [1037, 1038, 1043, 1045, 1046, 1049], "johanna": [112, 1053], "johannah": 1041, "johanwork": 1048, "john": [375, 418, 539, 711, 738, 772, 882, 909, 910, 912, 913, 994, 1000, 1004, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1048, 1050, 1051, 1052, 1053], "johnathanpi": [1050, 1051], "johnson": [37, 183, 239, 311, 315, 370, 491, 505, 883, 895, 899, 900, 901, 1014, 1021, 1025, 1030, 1043, 1049, 1051], "johnson_lindenstrauss_min_dim": [2, 244, 1016, 1036], "johnston": [168, 375, 1000, 1044], "johnstott": 1043, "johnthagen": 1050, "johnwon": 315, "join": [50, 51, 57, 88, 181, 231, 271, 313, 373, 393, 465, 1027, 1035, 1043], "joint": [146, 183, 187, 192, 198, 199, 202, 212, 233, 265, 411, 614, 655, 665, 695, 842, 843, 844, 845, 846, 907, 1000, 1001, 1005, 1009, 1011, 1015, 1025, 1035], "jointli": [25, 207, 278, 410, 415, 1000], "joli": [0, 400, 1036, 1037, 1038, 1039, 1040, 1041], "jon": [352, 1042, 1045, 1046, 1048, 1049, 1052], "jona": [1047, 1052], "jonatan": 1043, "jonathan": [373, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051], "joncral": 1041, "jone": [0, 373, 400, 1035], "jong": 1042, "jonker": [407, 722], "joona": 1035, "jordal": 1041, "jordan": [410, 415, 694, 800, 1045, 1046, 1049, 1050], "jordi": 1041, "jorg": [661, 1038, 1047, 1049], "jori": [0, 399, 1042, 1043, 1044, 1047, 1048], "jose": [168, 375, 661, 1004, 1043, 1045], "joseph": [1038, 1039, 1040, 1041, 1047, 1049, 1050], "josephsalmon": [1042, 1043, 1044], "josh": [418, 1042], "joshi": [1041, 1043, 1049, 1052, 1053], "joshua": [325, 373, 1037, 1038, 1040, 1041, 1047, 1050, 1051], "joshuakennethjon": 1044, "jos\u00e9": [726, 1038, 1048, 1053], "jotasi": 1043, "joudet": [1042, 1043], "journal": [0, 112, 187, 271, 277, 288, 372, 373, 375, 408, 410, 412, 417, 454, 464, 475, 537, 544, 630, 638, 648, 692, 695, 696, 708, 718, 734, 737, 738, 761, 762, 789, 832, 837, 883, 895, 993, 994, 998, 1000, 1001, 1002, 1005, 1011, 1016, 1018, 1019], "jovan": [1049, 1050], "joydeep": 410, "jo\u00e3o": [1050, 1053], "jo\u00ebl": 1043, "jpcar": 1053, "jpeg": [372, 373, 496, 497], "jpfrancoia": [1041, 1042], "jpg": [509, 587, 590], "jpienaar": 1053, "jpm": 51, "jpmml": 1023, "jpmorgan": [51, 1028], "jr": 1000, "jrenni": 844, "jrfiedler": 1041, "jschendel": [1042, 1043], "jschuerz": 1049, "json": [52, 372, 378, 396], "jth": [777, 781], "juan": [0, 368, 1035, 1046, 1047, 1048, 1049, 1050], "juanfe88": 1050, "judg": [91, 219, 410], "judgment": [262, 1004], "judithabk6": 1046, "juergen": [1045, 1050], "jul": 280, "juli": [168, 375, 419, 737, 888, 1014, 1038, 1042, 1043, 1044, 1053], "julia": [410, 720, 740, 798], "julian": [1042, 1043, 1053], "juliankahnert": 1041, "juliaschoepp": [1050, 1051], "juliathebrav": 1041, "julien": [0, 399, 661, 1000, 1028, 1035, 1038, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "juliet": 1043, "julietcl": 1043, "julio": 1048, "julyrashchenko": 1048, "jumon": 1046, "jump": [43, 214, 311, 375, 378, 418, 886], "jumpi": 418, "june": [410, 1001, 1041, 1051], "juneja": 1053, "jung": [1042, 1046, 1050], "jungkook": 1040, "jungl": 1001, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 379, 380, 411, 470, 905, 1020, 1023, 1024, 1046, 1049], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360], "jurgen": 1028, "juri": 569, "jurman": 746, "just": [43, 52, 67, 102, 116, 120, 140, 143, 149, 168, 203, 210, 234, 245, 265, 271, 278, 282, 291, 306, 341, 352, 353, 360, 361, 373, 377, 378, 379, 380, 382, 383, 386, 390, 391, 392, 407, 409, 410, 411, 414, 417, 419, 422, 470, 536, 538, 545, 549, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 582, 587, 613, 614, 649, 655, 660, 661, 663, 665, 669, 670, 671, 679, 680, 681, 809, 826, 856, 864, 865, 993, 1000, 1003, 1004, 1005, 1008, 1012, 1014, 1018, 1024, 1035, 1039, 1041, 1043, 1047, 1051], "justglow": 1044, "justif": 679, "justifi": [378, 384, 408, 568], "justin": [1037, 1043, 1047], "jvm": 1048, "jygerardi": [1050, 1051], "j\u00e9r\u00e9mie": [0, 399, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j\u00e9r\u00f4me": [1044, 1045, 1046, 1052, 1053], "j\u00eann": 1041, "j\u00f6rg": [410, 452, 459, 1043], "j\u00f6rn": 1042, "j\u00f8rgensen": [1000, 1052], "k": [2, 33, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 75, 77, 80, 82, 83, 86, 88, 89, 93, 96, 98, 106, 107, 111, 118, 120, 127, 134, 136, 142, 146, 150, 152, 153, 155, 156, 159, 161, 164, 165, 168, 171, 173, 174, 178, 179, 182, 183, 186, 187, 188, 189, 194, 196, 197, 201, 207, 210, 225, 227, 244, 246, 248, 249, 250, 256, 259, 267, 271, 274, 275, 280, 281, 284, 285, 291, 293, 296, 297, 298, 299, 300, 302, 303, 304, 312, 313, 314, 315, 318, 320, 324, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 351, 352, 354, 360, 361, 366, 373, 375, 378, 386, 387, 390, 392, 401, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 442, 445, 448, 449, 450, 451, 452, 453, 454, 455, 461, 462, 464, 471, 474, 490, 505, 515, 526, 534, 540, 544, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 584, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 634, 642, 643, 651, 653, 654, 656, 657, 658, 659, 661, 662, 666, 667, 668, 669, 670, 672, 682, 683, 685, 686, 687, 688, 689, 691, 694, 698, 699, 707, 708, 711, 720, 729, 740, 746, 759, 761, 762, 764, 769, 772, 777, 778, 779, 780, 782, 796, 797, 798, 800, 801, 804, 808, 810, 811, 812, 815, 818, 819, 821, 822, 824, 825, 831, 842, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 868, 872, 873, 874, 878, 879, 880, 882, 883, 887, 895, 900, 914, 922, 936, 946, 951, 977, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1012, 1017, 1018, 1019, 1020, 1023, 1025, 1029, 1030, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "k0": 998, "k1": [420, 624, 627], "k1__": 420, "k1__constant_valu": 174, "k1__k1": 420, "k1__k1__constant_valu": 420, "k1__k1__constant_value_bound": 420, "k1__k2": 420, "k1__k2__length_scal": [176, 420], "k1__k2__length_scale_bound": 420, "k2": [420, 624, 627], "k2__": 420, "k2__length_scal": 420, "k2__length_scale_bound": 420, "k_": [407, 420, 619, 622, 624, 627, 777, 996, 1014], "k_1": [2, 420, 624, 627], "k_2": [2, 420, 624, 627], "k_best": [595, 904, 1017, 1052], "k_diag": [615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "k_fit_all_": 873, "k_fit_rows_": 873, "k_fold": 159, "k_gradient": [615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628], "k_init": [445, 461], "k_mean": [2, 97, 387, 392, 1043, 1051], "k_means_cluster_cent": 97, "k_means_elkan": 1043, "k_means_label": 97, "k_new": 873, "k_ret": [847, 848], "k_true": [847, 848], "ka00ri": [1050, 1051], "kachaiev": 1052, "kaczmarzyk": 1052, "kadatatlu": 1048, "kadota": 1049, "kaggl": [154, 391], "kahni": 1047, "kai": [375, 566, 1010, 1042], "kaicheng": 1039, "kaichogami": 1041, "kailasa": [1049, 1050], "kaim": [864, 865], "kaiser": [415, 535], "kakati": 1050, "kalli": [1043, 1044], "kalyan": 1041, "kamalakerdadi": [1040, 1041], "kamar": 1043, "kamchyev": 1052, "kamel": 1035, "kamishima": [1041, 1042], "kamm": 1004, "kanai": [1041, 1042, 1043], "kanazu": [1050, 1051], "kanchimo": 1053, "kang": [1043, 1045], "kania": [1050, 1051], "kanika": 1045, "kanishk": 1050, "kanissh": 1050, "kanji": 1048, "kanniah": [1038, 1039], "kansal": 1041, "kapadni": 1050, "kapeln": [187, 1011], "kapoor": [1043, 1044], "kappa": [2, 539, 719], "kapur": 1042, "kar": 1041, "karan": [1042, 1043, 1044], "karayev": 1037, "karbownik": 1048, "karen": 1048, "karger": [844, 1006], "karhunen": 537, "karin": [630, 994], "karl": 1043, "karlo": [1052, 1053], "karnofski": 1042, "karnowski": 1047, "karol": 1038, "kartik": 1047, "karypi": 410, "kaseorg": 1045, "kashif": 1040, "kasim": 1039, "kaski": 699, "kasper": 1043, "kassa": [1050, 1051], "kastner": [0, 400, 1037, 1038, 1039, 1046, 1047], "kat": 1042, "kataev": [1043, 1044], "kataki": [723, 737, 743, 1004], "katarina": [1045, 1047], "katheleen": 372, "kathi": [1042, 1045], "kathleen": 1042, "kathryn": 1046, "kati": 1042, "katotten": 1049, "katrin": [1043, 1044], "katrina": 1046, "katriopla": 1043, "katyal": 1045, "katz": [1040, 1047, 1048], "kaufmann": [1016, 1020, 1047], "kaushik": [1042, 1049, 1050, 1051, 1053], "kaushik94": 1038, "kawamura": 1048, "kawwa": 1048, "kayawari": 1048, "kaylani2": 1047, "kaynak": 375, "kazmar": 1039, "kb": [103, 186, 187, 265], "kbest": [104, 595], "kbin": [318, 325], "kbinsdiscret": [2, 43, 86, 118, 183, 194, 213, 231, 251, 310, 313, 318, 325, 515, 660, 870, 886, 916, 1014, 1025, 1043, 1047, 1048, 1049, 1051, 1053], "kbinsdiscretizer__n_bin": 313, "kcachegrind": 381, "kd": [296, 410, 416, 1007, 1043, 1044, 1045], "kd_tree": [421, 446, 448, 452, 459, 691, 692, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1007, 1048, 1052], "kdd": [191, 373, 408, 439, 1016], "kdd06_rp": 900, "kddcup": [250, 371, 495, 1030], "kddcup99": [2, 373, 495], "kde": [185, 186, 285, 288, 295, 296, 304, 416, 852], "kdt": 1007, "kdtree": [2, 448, 452, 459, 691, 692, 847, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1037, 1039, 1043, 1047, 1048, 1051, 1052], "ke": [417, 1046, 1047], "kearn": 1038, "keat": [1050, 1051], "keep": [0, 45, 52, 64, 77, 107, 123, 125, 140, 149, 167, 176, 181, 185, 186, 187, 188, 189, 198, 213, 214, 215, 221, 231, 254, 261, 266, 269, 315, 316, 323, 331, 341, 352, 353, 356, 361, 365, 366, 370, 378, 382, 391, 392, 408, 410, 411, 412, 413, 414, 415, 433, 452, 467, 484, 485, 486, 487, 496, 497, 537, 543, 544, 547, 550, 557, 559, 561, 563, 565, 568, 571, 573, 598, 601, 603, 606, 614, 637, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 679, 680, 681, 682, 711, 821, 840, 841, 850, 858, 864, 865, 903, 908, 910, 913, 916, 918, 1000, 1005, 1009, 1012, 1014, 1024, 1027, 1028, 1030, 1035, 1040, 1043, 1044, 1048, 1049, 1051, 1053], "keep_empty_featur": [630, 631, 633, 994, 1050], "keerti": 1050, "kegl": 1039, "kei": [2, 47, 49, 52, 55, 77, 126, 140, 143, 154, 181, 185, 231, 247, 250, 253, 272, 274, 275, 321, 322, 323, 324, 325, 326, 327, 328, 367, 371, 380, 383, 384, 385, 390, 392, 393, 396, 401, 410, 411, 414, 420, 466, 474, 564, 565, 570, 571, 572, 573, 591, 594, 597, 620, 629, 635, 637, 662, 714, 803, 806, 807, 815, 817, 825, 830, 866, 867, 922, 938, 968, 1012, 1024, 1030, 1032, 1041, 1047, 1048, 1050, 1051, 1053], "keith": [352, 1035, 1040], "kekalainen": [729, 759, 1004], "kelkar": [1042, 1043, 1045], "kelleh": [711, 1004], "kelleher2015": 1004, "kellei": [373, 1037, 1038], "keller": 1047, "kellogg": 51, "kellycarmodi": 1045, "kemal": [0, 1037, 1038], "kemenad": 1046, "kemk": 1046, "ken": [375, 1037, 1044], "ken4git": 1049, "kendal": 1050, "kendrick": 1047, "kennedi": [1042, 1045, 1052], "kennel": 1046, "kenneth": [1016, 1035, 1036, 1041, 1042, 1049, 1050], "kenni": 1047, "kensuk": 1045, "kent": 57, "kenta": 1038, "kento": [1050, 1051], "kept": [64, 261, 291, 348, 372, 404, 420, 499, 538, 541, 543, 544, 550, 600, 613, 614, 622, 623, 647, 698, 800, 801, 934, 1014, 1043, 1044], "kera": [390, 1023], "kerimov": [1042, 1043], "kernal": 125, "kernc": [1035, 1049, 1050], "kernel": [2, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 84, 99, 106, 116, 119, 121, 129, 132, 155, 161, 166, 169, 171, 172, 173, 174, 177, 181, 196, 197, 214, 227, 239, 240, 248, 252, 264, 269, 271, 273, 276, 277, 281, 286, 292, 297, 302, 316, 323, 332, 335, 336, 338, 339, 341, 342, 343, 344, 346, 349, 361, 365, 370, 380, 390, 392, 398, 408, 410, 411, 414, 417, 418, 433, 442, 450, 454, 463, 464, 467, 484, 485, 486, 493, 499, 501, 505, 507, 517, 536, 537, 538, 544, 547, 557, 559, 561, 563, 565, 568, 571, 573, 596, 597, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 679, 680, 681, 682, 691, 693, 694, 695, 698, 738, 761, 762, 764, 769, 770, 777, 778, 779, 780, 803, 809, 814, 817, 833, 835, 840, 841, 847, 848, 850, 852, 858, 865, 867, 868, 873, 877, 879, 880, 882, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 916, 918, 924, 993, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1017, 1018, 1025, 1026, 1029, 1030, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "kernel_": [170, 171, 172, 173, 174, 175, 176, 177, 179, 613, 614], "kernel__length_scal": 170, "kernel__period": 170, "kernel_approxim": [2, 43, 181, 183, 190, 191, 227, 240, 245, 322, 641, 642, 643, 644, 645, 680, 761, 762, 873, 996, 1025, 1036, 1042, 1052], "kernel_dens": [847, 848], "kernel_label": 347, "kernel_metr": [2, 642, 643, 644, 645], "kernel_param": [454, 538, 642, 646], "kernel_pca": [44, 125, 411], "kernel_pca_": 691, "kernel_pca_back_proj_ax": 125, "kernel_pca_proj_ax": 125, "kernel_ridg": [2, 170, 246, 646, 1005, 1039], "kernel_ridge_tun": 170, "kernel_svm": 245, "kernel_svm_scor": 245, "kernel_svm_tim": 245, "kernelapproximationkernel": 398, "kernelcenter": [2, 406, 1014, 1045, 1049, 1051, 1052], "kerneldens": [2, 295, 296, 304, 416, 1037, 1043, 1044, 1048, 1049, 1050], "kernelpca": [2, 44, 411, 415, 536, 537, 544, 547, 691, 693, 695, 873, 1014, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "kernelridg": [2, 125, 170, 246, 675, 997, 1005, 1039, 1052], "kertesz": 1049, "keshat": [669, 670, 1000], "keshavan": 1045, "kesshi": [1045, 1046], "kevad": 1045, "kevin": [646, 1037, 1039, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1052], "kevlani": 1043, "keyber": 1053, "keyerror": [922, 1045], "keyword": [352, 372, 378, 380, 383, 385, 392, 410, 421, 424, 440, 446, 447, 452, 454, 459, 466, 469, 499, 506, 538, 541, 543, 562, 563, 570, 571, 572, 573, 623, 634, 635, 642, 646, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 691, 695, 700, 701, 702, 703, 704, 705, 777, 781, 782, 783, 784, 795, 796, 809, 826, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 867, 871, 946, 970, 993, 1001, 1004, 1007, 1017, 1035, 1039, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "kf": [414, 808], "kfold": [2, 87, 140, 145, 159, 266, 276, 361, 414, 439, 474, 570, 571, 597, 605, 650, 654, 656, 658, 664, 666, 668, 676, 803, 806, 807, 809, 811, 813, 817, 822, 824, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 888, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1053], "khaja": 1050, "khan": [1050, 1051], "khandelw": 1047, "khanduja": 1038, "khant": 1050, "kharsa": 1049, "khedkar": 1049, "khine": 1049, "kho": 1050, "khoo": 1047, "khosasi": 1048, "khosrow": 1004, "khoual": 1048, "khwaja": 1050, "ki": 1004, "kian": [1040, 1050, 1051, 1052], "kid": 1014, "kieker": [1043, 1044], "kielczewski": 1041, "kie\u00dfl": 1046, "kilian": [418, 1050, 1051], "kill": [352, 390], "killer": [378, 1028], "kilobyt": 86, "kilomet": 767, "kim": [1000, 1043, 1044, 1045, 1049], "kimayoung": 1049, "kimberli": 51, "kimbinyi": 1047, "kind": [43, 48, 51, 52, 61, 62, 107, 128, 140, 154, 163, 186, 187, 261, 264, 265, 267, 280, 318, 322, 325, 338, 341, 352, 366, 367, 371, 373, 378, 380, 384, 390, 391, 408, 410, 413, 414, 415, 417, 418, 419, 490, 491, 506, 511, 512, 524, 527, 591, 635, 636, 704, 943, 1000, 1006, 1011, 1020, 1038, 1047, 1049, 1050, 1051], "king": 938, "kingjr": 1041, "kingma": [864, 865, 1008], "kink": 202, "kiragu": 1047, "kiran": 1047, "kirandevraj": 1050, "kiril": [1042, 1043, 1045, 1047], "kirkbi": [1042, 1043], "kirkham": [1040, 1041, 1043], "kirthi": 1045, "kishan": 1052, "kishimoto": 1047, "kishor": 1048, "kislovskii": 1052, "kit": 390, "kitchen": [644, 996], "kj": [372, 1006], "kjell": 1041, "kk": 1004, "kl": [415, 1001, 1043], "kl_divergence_": [695, 1042], "klarup": 1042, "klass": 98, "klau": [415, 538, 873], "kleczewski": [1042, 1043], "kleiber": 1049, "klevebr": 1043, "klima": 1050, "klopfer": 1044, "kluge": [1050, 1051], "kluger": [2, 407, 453, 516], "klusacek": 1004, "km": [94, 324, 353], "kmatt10": 1048, "kmb": 51, "kmean": [2, 57, 58, 71, 78, 80, 83, 86, 90, 91, 94, 183, 259, 262, 314, 324, 353, 387, 401, 410, 436, 437, 438, 442, 445, 450, 451, 454, 464, 515, 713, 795, 796, 800, 801, 872, 1007, 1014, 1024, 1025, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "kmeans_estim": 120, "kmeans_model": 410, "kmeans_plusplu": [2, 92, 410, 1047, 1052], "kmode": 1023, "kms15": [1043, 1044], "knee": 410, "kneighbor": [316, 324, 849, 850, 851, 853, 855, 1007, 1039, 1044, 1048, 1049, 1050, 1051], "kneighbors_graph": [2, 74, 79, 95, 100, 291, 392, 410, 443, 447, 698, 849, 850, 851, 853, 855, 857, 858, 859, 861, 1007, 1035, 1039, 1044], "kneighborsclassifi": [2, 67, 155, 160, 293, 294, 299, 300, 316, 322, 324, 352, 417, 605, 850, 854, 855, 856, 857, 858, 1005, 1007, 1035, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kneighborsclassifierkneighbor": 398, "kneighborsregressor": [2, 181, 249, 303, 324, 417, 573, 849, 855, 857, 858, 1005, 1007, 1035, 1037, 1039, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kneighborstransform": [2, 291, 293, 320, 695, 859, 1007, 1045, 1049, 1050], "knight": 317, "knn": [137, 155, 160, 181, 294, 299, 300, 303, 316, 322, 332, 352, 417, 605, 856, 902, 903, 1007, 1017, 1041], "knn__weight": 294, "knn_graph": 74, "knn_impute_scor": 182, "knnimput": [2, 182, 320, 630, 633, 994, 1045, 1046, 1049, 1050, 1051, 1052], "knnquerybatch": 291, "knot": [43, 214, 323, 886, 1014, 1048], "know": [86, 99, 165, 168, 170, 179, 186, 231, 247, 248, 265, 271, 284, 288, 290, 324, 330, 348, 353, 365, 378, 390, 401, 404, 410, 413, 414, 415, 418, 503, 507, 513, 649, 655, 661, 662, 729, 759, 803, 817, 892, 893, 895, 896, 897, 898, 915, 916, 917, 918, 993, 1003, 1004, 1005, 1007, 1016, 1041, 1042, 1045, 1047], "knowledg": [90, 149, 186, 230, 250, 265, 271, 284, 285, 373, 378, 381, 384, 391, 392, 410, 414, 417, 421, 446, 514, 558, 559, 566, 723, 739, 743, 786, 836, 1004, 1005, 1016, 1053], "known": [2, 50, 55, 62, 64, 74, 82, 90, 91, 112, 126, 128, 129, 154, 175, 177, 182, 198, 213, 214, 231, 240, 265, 271, 273, 280, 300, 304, 312, 323, 328, 330, 338, 345, 353, 367, 373, 375, 376, 378, 386, 390, 392, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 420, 440, 465, 484, 486, 501, 511, 512, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 591, 592, 594, 597, 612, 625, 636, 661, 662, 675, 685, 686, 697, 707, 713, 716, 721, 732, 746, 758, 760, 798, 836, 842, 843, 844, 845, 846, 849, 854, 857, 863, 891, 915, 916, 917, 918, 951, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1019, 1020], "known_val": 630, "knox": 1047, "knp": 630, "knr": 417, "knyazev": [410, 454, 464, 698, 1045, 1048, 1049], "ko": [51, 63, 171], "kobak": [695, 1048], "kobaski": 1048, "kobayashi": [1047, 1048], "kober": 1043, "kobi": 738, "koch": [1037, 1043, 1044, 1046, 1047], "kocot": 1046, "koehler": 1039, "koen": [1043, 1044], "koenker": [726, 1000], "koh": [1000, 1028], "kohavi": 414, "kohli": [1052, 1053], "koi8": 418, "koivunen": 112, "kokhlikyan": [1042, 1043], "koki": 1047, "koko": [1043, 1049, 1050], "kolawol": 1048, "kolganov": 1040, "kolh": 1037, "kolstad": 57, "komarov": 1053, "komey": [1049, 1050], "kommireddi": 1049, "kondratyev": 1049, "kong": 1048, "konstantin": [1040, 1041, 1042], "konstantino": [1043, 1052], "konwar": 1046, "koonc": 1043, "korba": 373, "korean": 1023, "kornel": 1041, "kornev": 1050, "korobko": [1052, 1053], "korobov": [1036, 1037, 1038, 1041, 1042], "korolev": 1045, "kosic": 1047, "kosobrodov": 1043, "kossaifi": [1035, 1039, 1040], "kossen": [1050, 1051], "kossori": [1043, 1044], "kostelac": [1050, 1051], "kot271828": 1048, "kothari": 1046, "kotwalia": [1043, 1044], "koumenti": 1050, "koushik": 1049, "koustav": [1052, 1053], "kovalevskyi": 1041, "kowalski87": 1038, "koyama": 1049, "kozachenko": [610, 611], "kozynet": [1047, 1049], "kpca": [2, 536, 537, 538, 1029, 1030, 1035], "kr": [246, 271, 1049], "kr_fit": 246, "kr_predict": 246, "kraig": 1050, "kraktu": 1053, "kranthi": 1049, "kranz": 1028, "kraskov": [610, 611], "krasouli": [1042, 1043, 1044, 1045, 1047, 1048], "kratzwald": 1041, "krawczyk": 1049, "krawutschk": [1050, 1051], "krell": [1039, 1041], "kriegel": [410, 421, 446, 452, 459, 853, 1010], "krinitsyn": 1043, "krishna": [1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "krishnachaitanya9": 1046, "krishnakalyan3": 1041, "krishnan": 1045, "krivich": [1041, 1042, 1044], "kronovet": 1040, "krr": [246, 646, 997], "krsto": 1053, "krum": [1047, 1049], "krumetoft": 1049, "krump": 1040, "kruskal": [638, 693, 697, 1001], "krzeminski": 1042, "krzysztof": 372, "ksemb": 1043, "kshitij": [1050, 1051, 1053], "ksvd": [667, 688, 689, 1000], "ksvm": 191, "ksvm_score": 191, "ksvm_time": 191, "kth": [57, 824], "ku": [1039, 1040], "kuai": [1043, 1044], "kubin": 1046, "kuhlmann": [1042, 1043], "kulbear": 1044, "kulkarni": 1043, "kull": [408, 1004], "kullback": [54, 233, 415, 541, 543, 550, 695, 1001, 1042], "kulsinski": [452, 459, 702, 781, 782, 783], "kulsinskidist": [702, 1051], "kumar": [0, 168, 373, 400, 410, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kumaresshan": [1043, 1044, 1047], "kumawat": 1049, "kund": [1051, 1052], "kunj": 1048, "kuno": 1053, "kuo": 1039, "kurumeyuta": 1048, "kurz": [1049, 1050], "kusanagi": [1046, 1048], "kusanagi2": 1047, "kushal": [1043, 1044], "kushan": 1052, "kushwah": [1051, 1052], "kushwaha": 1047, "kusterl": 1045, "kuth": 1041, "kvam": [1036, 1038], "kvle": 1041, "kw_arg": [139, 871, 1014, 1041], "kwarg": [76, 123, 247, 380, 385, 424, 428, 432, 440, 444, 450, 452, 466, 471, 538, 541, 543, 566, 634, 649, 650, 655, 656, 663, 664, 665, 666, 680, 684, 687, 701, 702, 703, 705, 745, 866, 867, 871, 911, 922, 963, 969, 971, 992, 1042, 1046, 1048, 1052], "kwd": [774, 777, 781, 784, 795, 796], "kwei": [1038, 1039, 1040, 1041, 1042], "kxytim": 1048, "kybernetika": 375, "kye": 1043, "kyeongpil": 1043, "kyle": [0, 400, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047], "kyledrogo": 1043, "kyler": 1040, "k\u00e4rkk\u00e4inen": 1000, "l": [0, 46, 53, 55, 75, 80, 81, 99, 100, 112, 137, 168, 188, 205, 208, 217, 222, 223, 276, 277, 278, 288, 307, 315, 348, 375, 376, 384, 386, 407, 408, 410, 414, 415, 417, 420, 476, 519, 520, 521, 541, 543, 550, 558, 559, 560, 561, 568, 569, 593, 610, 611, 613, 614, 618, 622, 625, 626, 637, 651, 652, 661, 672, 675, 677, 683, 690, 692, 695, 696, 708, 718, 728, 729, 734, 759, 789, 844, 878, 915, 916, 917, 918, 993, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1012, 1016, 1018, 1020, 1038, 1043, 1047, 1048, 1049, 1050, 1052], "l1": [2, 25, 42, 46, 55, 66, 75, 99, 113, 115, 183, 192, 193, 199, 200, 201, 202, 207, 217, 224, 228, 242, 272, 284, 291, 308, 323, 387, 390, 410, 412, 415, 443, 447, 452, 459, 466, 471, 472, 473, 474, 475, 476, 477, 478, 480, 499, 505, 507, 534, 540, 541, 542, 543, 545, 546, 550, 551, 561, 568, 592, 593, 594, 600, 647, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 675, 679, 680, 681, 682, 684, 691, 738, 765, 771, 776, 781, 782, 783, 788, 817, 824, 833, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 879, 887, 894, 907, 908, 914, 916, 918, 936, 985, 1000, 1002, 1004, 1007, 1014, 1018, 1019, 1020, 1025, 1040, 1042, 1048, 1051], "l1_color": 224, "l1_contour": 224, "l1_distanc": 1035, "l1_min_c": [2, 206, 1000, 1019, 1035], "l1_plot": 229, "l1_ratio": [46, 49, 54, 198, 201, 204, 279, 284, 365, 390, 415, 541, 543, 550, 649, 650, 655, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 1000, 1018, 1036, 1038, 1040, 1047, 1049], "l1_ratio_": [650, 662, 664], "l1_ratios_": 662, "l2": [2, 53, 66, 75, 113, 115, 183, 185, 186, 192, 193, 198, 201, 204, 206, 209, 213, 218, 224, 228, 229, 231, 272, 284, 291, 311, 318, 334, 352, 353, 380, 387, 390, 410, 412, 415, 417, 418, 443, 447, 452, 459, 527, 541, 543, 550, 561, 564, 565, 568, 592, 593, 594, 646, 649, 650, 651, 652, 655, 660, 661, 662, 663, 664, 665, 666, 671, 672, 675, 679, 681, 683, 684, 689, 690, 691, 738, 753, 764, 765, 781, 782, 783, 817, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 865, 879, 887, 894, 907, 908, 912, 913, 914, 916, 918, 986, 993, 997, 1000, 1002, 1007, 1008, 1014, 1018, 1020, 1025, 1037, 1039, 1040, 1042, 1044], "l2014": 417, "l2_color": 224, "l2_contour": 224, "l2_regular": [323, 417, 564, 565], "l_": [407, 614, 655, 744, 1004], "l_i": 1014, "l_inf": 55, "l_m": 417, "l_p": [452, 459, 691, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861], "l_x": 53, "la": [0, 317, 375, 399, 1028, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "lab": [0, 373, 470, 539, 905, 1028, 1046], "labb\u00e9": 1053, "label": [2, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 84, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 105, 107, 109, 110, 111, 112, 115, 116, 118, 122, 124, 127, 128, 129, 134, 135, 136, 137, 138, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 157, 164, 166, 170, 171, 175, 176, 177, 178, 179, 181, 183, 186, 189, 191, 193, 194, 196, 197, 198, 200, 202, 203, 207, 213, 214, 215, 216, 219, 220, 221, 222, 223, 227, 228, 230, 231, 234, 235, 236, 240, 241, 245, 246, 248, 250, 251, 258, 264, 265, 266, 269, 270, 272, 273, 274, 275, 277, 280, 281, 282, 283, 284, 285, 286, 290, 296, 298, 300, 303, 307, 309, 311, 312, 316, 320, 321, 324, 327, 329, 333, 334, 335, 343, 345, 347, 348, 352, 353, 356, 357, 358, 359, 367, 370, 371, 372, 377, 378, 380, 382, 383, 387, 392, 393, 407, 408, 409, 420, 421, 427, 428, 432, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 464, 467, 471, 489, 490, 491, 496, 497, 498, 499, 505, 506, 511, 512, 515, 517, 518, 522, 525, 526, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 572, 573, 595, 596, 597, 598, 599, 601, 602, 603, 607, 608, 609, 612, 613, 634, 661, 662, 669, 670, 671, 676, 677, 678, 679, 680, 681, 700, 701, 703, 705, 706, 707, 708, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 725, 728, 729, 730, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 757, 758, 759, 760, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 818, 819, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 856, 857, 864, 865, 867, 871, 874, 875, 878, 880, 881, 888, 891, 902, 903, 904, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 923, 927, 933, 938, 939, 966, 967, 974, 993, 1000, 1001, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1020, 1023, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "label1": 392, "label2": 392, "label_a": 280, "label_b": 280, "label_binar": [2, 278, 280, 874, 1039], "label_binarizer_": 836, "label_distributions_": [330, 331, 902, 903, 1046], "label_im": 99, "label_out": 78, "label_pr": [720, 739, 740, 758, 760, 798], "label_prop_model": [902, 903], "label_propag": 1036, "label_ranking_average_precision_scor": [2, 1004, 1039, 1043, 1044, 1050], "label_ranking_loss": [2, 1004, 1040], "label_spread": 332, "label_tru": [707, 720, 740, 758, 760, 798], "labelbinar": [2, 280, 392, 725, 744, 836, 871, 880, 888, 891, 1005, 1038, 1039, 1040, 1044, 1049], "labelbottom": [157, 271], "labeled_iter_": [333, 904], "labelencod": [2, 392, 572, 881, 1015, 1035, 1043, 1050, 1051], "labeling1": 1004, "labeling2": 1004, "labelkfold": [1040, 1041], "labelleft": 256, "labelpad": 271, "labelpropag": [2, 324, 332, 903, 904, 1005, 1017, 1036, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1051], "labels": [54, 315], "labels_": [73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 91, 94, 95, 96, 98, 100, 324, 326, 353, 378, 392, 410, 428, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 713, 1040], "labels_050": 98, "labels_200": 98, "labels_a": 72, "labels_b": 72, "labels_pr": [410, 707, 708, 717, 718, 720, 734, 739, 740, 758, 760, 789, 798], "labels_tru": [73, 82, 88, 97, 410, 707, 708, 717, 718, 720, 734, 739, 740, 758, 760, 789, 798], "labels_uniqu": 96, "labelshufflesplit": [1040, 1041], "labelspread": [2, 324, 330, 331, 332, 334, 335, 902, 904, 1005, 1017, 1036, 1041, 1042, 1045, 1046, 1049, 1050, 1051], "labelspreadingifittedlabelspread": 332, "labex": 0, "labl": 149, "laboratori": [373, 1023], "lacchia": 1042, "lack": [43, 64, 345, 378, 390, 414, 832, 922, 1019, 1049], "lacost": [661, 1000], "lacouth": 1048, "lacrosse91": 1048, "lad": 1048, "lag": [42, 43, 146, 149, 183, 215, 494, 565, 704, 745, 748, 749, 751, 793, 824, 829, 830, 833, 1025], "lagacheri": 1039, "lagard": 1038, "lagat": 1045, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 316, 345, 1010], "laid": [0, 185, 378], "lakhotia": [1045, 1046], "lakshmi": 1045, "lakshmikanth": 1042, "lakshya": [1043, 1044, 1045], "lal": 903, "lalliacqua": [1045, 1048], "lam": [321, 322, 1046, 1053], "lama": 497, "lamb": [1040, 1048], "lambda": [43, 46, 47, 49, 57, 89, 145, 194, 231, 271, 272, 315, 334, 404, 406, 410, 415, 417, 418, 647, 648, 649, 650, 871, 883, 996, 1000, 1014, 1043, 1049], "lambda_": [194, 647, 648, 883, 1000, 1042], "lambda_1": [647, 648, 1000], "lambda_2": [647, 648, 1000], "lambda_i": [1000, 1014], "lambda_init": [193, 194, 648, 1000, 1045], "lambdas_": [315, 883, 1048, 1051], "lami": 1043, "lamond": 1039, "lamp": 1028, "lamu": 1041, "lan": [661, 1050, 1051], "land": [50, 304, 382, 393, 417], "land_mask": 304, "land_refer": [50, 304], "landeau": 1052, "landmark": [884, 896, 1014], "landscap": 171, "lane": 1041, "langford": [418, 691, 1001], "langl": [996, 1004, 1018, 1019], "languag": [0, 354, 383, 415, 418, 1018, 1023, 1024, 1028], "language_level": 379, "lanigan": 1042, "lanl": 55, "lannuzel": 1047, "lanterni": 1049, "lanzani": 1041, "lapack": [365, 366, 376, 535, 538, 544, 691, 1050], "lapack_lit": 384, "lapack_svd_driv": 1050, "laplac": [2, 171, 420, 613, 614, 842, 843, 844, 846, 1006], "laplacian": [2, 233, 370, 407, 442, 454, 464, 623, 642, 646, 694, 698, 768, 769, 777, 903, 1000, 1001, 1017, 1030, 1036, 1041], "laplacian_kernel": [2, 768, 1002, 1040], "laptop": [52, 386, 470, 905, 1049, 1050, 1051], "lar": [0, 2, 123, 168, 183, 192, 198, 199, 202, 204, 207, 375, 400, 473, 474, 480, 504, 534, 540, 542, 545, 546, 548, 549, 551, 654, 655, 656, 657, 658, 659, 666, 667, 668, 681, 684, 685, 686, 687, 688, 689, 1005, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1053], "laradji": [0, 1041], "larg": [0, 2, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 81, 82, 83, 85, 86, 88, 105, 107, 120, 124, 137, 139, 140, 146, 149, 150, 152, 164, 175, 176, 188, 189, 193, 194, 202, 204, 213, 215, 217, 218, 219, 231, 245, 250, 265, 268, 274, 277, 280, 293, 300, 308, 311, 313, 323, 324, 327, 341, 346, 348, 353, 354, 365, 373, 378, 384, 387, 390, 391, 392, 396, 404, 410, 412, 414, 415, 416, 417, 419, 421, 423, 444, 446, 448, 449, 452, 453, 454, 455, 460, 464, 475, 477, 502, 517, 537, 539, 541, 543, 544, 547, 550, 552, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 585, 592, 637, 644, 646, 649, 650, 653, 655, 656, 657, 660, 661, 662, 667, 674, 675, 677, 680, 682, 688, 690, 692, 694, 695, 696, 698, 749, 782, 783, 803, 811, 813, 817, 821, 832, 842, 843, 844, 845, 846, 847, 848, 853, 864, 865, 872, 876, 877, 885, 887, 899, 900, 907, 908, 912, 913, 915, 916, 917, 918, 950, 951, 993, 996, 998, 1000, 1001, 1003, 1006, 1007, 1008, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "larger": [43, 46, 64, 72, 74, 77, 81, 88, 111, 113, 118, 129, 137, 147, 149, 171, 176, 177, 182, 186, 187, 191, 194, 198, 228, 229, 230, 238, 244, 246, 256, 262, 265, 272, 274, 280, 281, 288, 291, 293, 306, 307, 309, 311, 341, 345, 353, 354, 371, 373, 378, 384, 392, 407, 408, 410, 411, 412, 414, 415, 417, 418, 420, 442, 445, 451, 452, 454, 456, 458, 518, 530, 544, 547, 564, 565, 566, 570, 571, 585, 592, 646, 655, 675, 676, 677, 678, 682, 690, 695, 707, 722, 739, 800, 852, 853, 884, 886, 887, 888, 896, 901, 950, 951, 974, 977, 996, 997, 1000, 1001, 1003, 1004, 1007, 1008, 1012, 1014, 1018, 1019, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1052, 1053], "largest": [113, 122, 140, 168, 215, 375, 410, 412, 415, 445, 530, 544, 560, 561, 562, 563, 567, 568, 591, 712, 800, 801, 822, 845, 877, 915, 916, 917, 918, 951, 1001, 1004, 1014, 1019, 1020], "largest_clust": [410, 445], "largest_coef": [113, 530], "larrald": 1052, "lars_path": [2, 201, 387, 534, 540, 542, 545, 546, 548, 549, 551, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 686, 687, 688, 689, 1000, 1035, 1037, 1040, 1044, 1046], "lars_path_gram": [2, 685, 1000, 1044], "larscv": [2, 401, 653, 668, 685, 686, 1042, 1048, 1052], "larson": [1040, 1044, 1045, 1047, 1049], "larsson": [1047, 1048, 1049], "lasagna": 1041, "laska": 1041, "lasso": [2, 42, 55, 99, 129, 154, 159, 183, 186, 192, 204, 212, 221, 261, 323, 327, 348, 365, 390, 412, 413, 415, 417, 418, 419, 473, 474, 480, 504, 527, 534, 540, 542, 545, 546, 548, 549, 551, 600, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 673, 675, 681, 684, 685, 686, 687, 688, 689, 724, 726, 727, 828, 829, 830, 868, 887, 993, 1004, 1005, 1018, 1025, 1026, 1030, 1035, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1053], "lasso_cd": [534, 540, 545, 551], "lasso_cv": 159, "lasso_lar": [129, 534, 540, 545, 551, 1045], "lasso_lars_": [200, 202], "lasso_path": [2, 201, 654, 655, 656, 657, 658, 659, 666, 685, 686, 1000, 1035, 1037, 1039, 1048], "lasso_pipelin": 154, "lassocolumntransform": 154, "lassocv": [2, 53, 154, 159, 186, 198, 202, 401, 417, 419, 654, 655, 657, 658, 659, 666, 687, 1000, 1035, 1038, 1042, 1045, 1046, 1048, 1049, 1052, 1053], "lassocvlassocv": 154, "lassolar": [2, 654, 655, 656, 658, 659, 666, 667, 668, 685, 686, 687, 1000, 1005, 1035, 1036, 1038, 1042, 1045, 1046, 1048], "lassolars": [2, 200, 202, 419, 654, 657, 658, 1000, 1035, 1042, 1044, 1048, 1049], "lassolarscv": [2, 202, 401, 419, 655, 656, 657, 659, 666, 668, 685, 686, 687, 1000, 1035, 1042, 1048, 1052], "lassolarsic__criterion": [200, 202], "last": [43, 58, 79, 91, 146, 186, 193, 213, 214, 221, 226, 240, 262, 274, 282, 283, 316, 322, 324, 333, 356, 365, 373, 376, 380, 382, 383, 386, 392, 396, 404, 410, 411, 418, 422, 440, 444, 449, 461, 466, 469, 470, 518, 536, 562, 563, 564, 565, 586, 587, 590, 596, 597, 600, 613, 685, 686, 688, 689, 700, 701, 703, 704, 705, 710, 785, 800, 801, 806, 807, 822, 847, 848, 852, 867, 868, 872, 880, 886, 922, 954, 978, 992, 993, 999, 1000, 1001, 1003, 1005, 1008, 1018, 1024, 1035, 1041, 1042, 1043, 1044, 1049, 1051, 1052], "last_hour": [43, 52], "last_mean": 978, "last_n": 978, "last_var": 978, "lat": [50, 304, 501, 767], "late": [317, 367], "latenc": [42, 46, 47, 183, 364, 527, 568, 675, 681, 833, 887, 913, 968, 977, 1023, 1025, 1030, 1038], "latent": [2, 42, 45, 55, 130, 183, 309, 353, 413, 418, 420, 490, 535, 539, 541, 542, 543, 546, 547, 591, 594, 863, 1003, 1023, 1025, 1029, 1030, 1037, 1040], "latentdirichletalloc": [2, 54, 367, 383, 415, 1023, 1040, 1042, 1049, 1050], "later": [0, 50, 86, 134, 139, 147, 170, 187, 191, 193, 250, 265, 288, 304, 354, 361, 376, 384, 390, 391, 404, 417, 853, 876, 877, 885, 887, 996, 1014, 1038, 1041, 1043, 1047], "latest": [320, 321, 322, 323, 324, 325, 326, 327, 328, 376, 378, 382, 384, 386, 1020, 1049], "latestst": 382, "latex": 1035, "latexpdf": 378, "latin": [47, 418], "latitud": [304, 311, 373, 501, 702, 767], "lattarini": 1037, "latter": [43, 54, 261, 271, 280, 281, 299, 316, 348, 367, 375, 392, 409, 414, 417, 418, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 745, 800, 801, 802, 803, 806, 807, 812, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 970, 1007, 1012, 1044], "laughlin": 1042, "launch": [352, 353, 396, 1028], "laur": 1035, "lauren": [0, 362, 695, 699, 1001, 1047, 1050], "laurent": [1038, 1039, 1042, 1043, 1050, 1051], "laurenz": 1047, "lauritzen": 1043, "laveen": 1048, "law": 1028, "lawrenc": 265, "lawson": [1042, 1043, 1044], "lawton": 1043, "layer": [2, 43, 67, 142, 152, 161, 172, 174, 183, 220, 229, 251, 305, 308, 309, 313, 314, 335, 346, 365, 386, 417, 517, 518, 525, 570, 833, 863, 864, 865, 868, 887, 1009, 1025, 1026, 1030, 1041], "layout": [134, 311, 390, 907, 908, 909, 912, 934, 1019, 1038, 1040, 1052], "layton": [0, 400, 1035, 1036, 1037, 1038, 1040], "lazaru": 1053, "lazebnik": [761, 762, 1002], "lazi": [52, 393, 418, 1018, 1039], "lazyfram": 105, "lazz": 1050, "lb": [874, 1015], "lbfg": [306, 380, 651, 652, 661, 662, 672, 675, 677, 683, 690, 838, 841, 864, 865, 1000, 1008, 1039, 1040, 1042, 1043, 1048, 1049, 1050, 1052], "lbfgsb": 661, "lbfin": 1045, "lc": [51, 236, 243], "lceil": [407, 1010], "lda": [54, 69, 119, 122, 124, 126, 130, 183, 300, 361, 375, 406, 507, 539, 544, 552, 553, 856, 1023, 1025, 1026, 1029, 1030, 1040], "lda_featur": 383, "lda_model": 383, "lda_np": 406, "ldavid": 1041, "ldflag": 376, "ldirer": 1042, "ldl": [168, 375], "ldot": [1000, 1004, 1006, 1008, 1018], "ldwy4": [1052, 1053], "le": [661, 875, 995, 1000, 1007, 1015, 1017, 1043, 1047, 1048, 1052], "le_": 572, "lead": [0, 46, 62, 64, 67, 72, 85, 88, 94, 104, 140, 143, 144, 146, 167, 168, 186, 187, 188, 193, 198, 202, 204, 213, 217, 245, 247, 250, 265, 271, 272, 274, 278, 284, 296, 297, 308, 311, 313, 316, 317, 322, 341, 348, 353, 356, 361, 365, 366, 372, 377, 386, 387, 391, 392, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 454, 464, 467, 470, 499, 518, 530, 538, 541, 542, 543, 546, 550, 554, 560, 561, 562, 563, 566, 567, 568, 569, 609, 633, 649, 650, 653, 655, 656, 657, 663, 664, 665, 666, 682, 694, 698, 749, 800, 806, 807, 835, 847, 848, 852, 871, 878, 888, 899, 900, 905, 907, 915, 916, 917, 918, 993, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1012, 1014, 1017, 1018, 1020, 1028, 1038, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053], "leader": [378, 1028], "leadership": 0, "leaf": [76, 139, 150, 152, 356, 360, 410, 417, 421, 443, 444, 445, 446, 447, 448, 452, 459, 465, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 915, 916, 917, 918, 919, 920, 1007, 1020, 1038, 1040, 1042, 1046, 1049], "leaf_id": 360, "leaf_rot": 189, "leaf_siz": [421, 446, 448, 452, 457, 458, 459, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1007], "leagu": 373, "leak": [139, 276, 352, 361, 411, 414, 867, 892, 893, 895, 896, 897, 898, 1014, 1035, 1042, 1045, 1051, 1052, 1053], "leakag": [391, 392, 411, 1030], "lean": 404, "leandro": [1044, 1048], "lear": 1028, "learn": [2, 15, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 329, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 366, 370, 371, 372, 373, 375, 377, 381, 384, 385, 386, 387, 391, 392, 395, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 420, 424, 425, 427, 428, 429, 430, 432, 433, 434, 439, 440, 441, 444, 445, 448, 449, 451, 452, 459, 466, 467, 469, 470, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 511, 512, 513, 515, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 579, 584, 585, 586, 587, 590, 591, 592, 593, 594, 596, 597, 602, 605, 606, 613, 614, 617, 622, 625, 629, 631, 633, 635, 637, 641, 643, 644, 646, 647, 648, 649, 651, 655, 660, 661, 671, 672, 679, 680, 681, 683, 691, 692, 693, 694, 695, 699, 700, 703, 704, 705, 711, 716, 720, 721, 724, 726, 727, 729, 735, 738, 744, 745, 746, 751, 759, 781, 782, 783, 787, 788, 790, 791, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 842, 843, 844, 845, 846, 849, 851, 856, 863, 864, 865, 866, 867, 868, 870, 872, 874, 877, 879, 880, 881, 882, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 905, 907, 908, 909, 912, 915, 916, 917, 918, 923, 925, 936, 945, 946, 956, 969, 970, 993, 994, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1025, 1027, 1030, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "learn_rat": 1036, "learnalgorithm": 398, "learner": [2, 47, 135, 144, 154, 367, 557, 562, 563, 564, 565, 585, 592, 633, 849, 850, 855, 857, 858, 1006, 1009, 1020, 1023, 1024, 1051], "learning_curv": [2, 273, 325, 401, 809, 999, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1052], "learning_decai": 539, "learning_method": [54, 383, 539], "learning_offset": [54, 539], "learning_r": [46, 134, 144, 145, 146, 147, 148, 149, 238, 291, 307, 309, 321, 323, 417, 556, 557, 562, 563, 564, 565, 671, 679, 680, 681, 695, 863, 864, 865, 1001, 1011, 1018, 1036, 1044, 1048], "learning_rate_": [695, 865], "learning_rate_init": [187, 307, 308, 864, 865], "learningcurvedisplai": [2, 246, 273, 325, 999, 1050, 1051], "learnt": [149, 186, 318, 361, 392, 414, 888, 993, 1014], "least": [2, 37, 44, 52, 54, 111, 112, 114, 115, 122, 123, 137, 147, 166, 168, 178, 183, 185, 192, 193, 196, 198, 203, 206, 209, 210, 213, 215, 217, 218, 221, 230, 231, 244, 250, 271, 284, 288, 290, 316, 322, 323, 341, 353, 354, 365, 371, 373, 375, 377, 378, 382, 384, 386, 390, 392, 393, 401, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 446, 450, 452, 458, 459, 460, 463, 476, 483, 484, 485, 486, 487, 497, 519, 534, 540, 542, 544, 545, 546, 548, 549, 550, 551, 552, 560, 561, 562, 563, 565, 567, 568, 569, 596, 597, 605, 638, 646, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 695, 700, 715, 719, 721, 788, 804, 808, 809, 815, 817, 818, 819, 821, 822, 824, 828, 831, 832, 833, 864, 865, 868, 879, 887, 912, 915, 916, 917, 918, 943, 966, 994, 997, 1001, 1004, 1007, 1016, 1018, 1019, 1020, 1024, 1025, 1026, 1028, 1030, 1035, 1037, 1038, 1041, 1042, 1046], "least_absolute_devi": [1045, 1047, 1048], "least_angl": 387, "least_squar": 1048, "leastangle_2002": [168, 375], "leastsquareserror": 1044, "leav": [2, 86, 134, 139, 147, 187, 189, 231, 278, 316, 360, 361, 365, 375, 377, 383, 392, 410, 417, 443, 444, 447, 448, 465, 506, 560, 561, 562, 563, 564, 565, 567, 568, 569, 676, 678, 805, 810, 811, 812, 813, 821, 822, 847, 848, 915, 916, 917, 918, 993, 1001, 1007, 1011, 1020, 1035, 1042, 1044, 1046, 1047, 1051], "leaveonegroupout": [2, 276, 414, 804, 811, 812, 1041], "leaveonelabelout": 1041, "leaveoneout": [2, 276, 414, 1053], "leavepgroupsout": [2, 414, 805, 1041], "leaveplabelout": 1041, "leaveplabelsout": 1041, "leavepout": [2, 414, 811], "leaves_parallel": 919, "lebedev": [1041, 1042], "lebel": 1050, "lebourgeoi": 1028, "lectur": [410, 647, 996, 1022], "lecture2": 647, "lecun": [1008, 1018], "led": 1035, "ledoit": [2, 49, 65, 70, 108, 109, 112, 113, 183, 300, 475, 477, 481, 482, 515, 552, 998, 1025], "ledoit_wolf": [2, 113, 412, 1048], "ledoit_wolf_shrinkag": [2, 1048], "ledoitwolf": [2, 69, 108, 110, 113, 127, 148, 183, 302, 412, 471, 472, 476, 477, 478, 479, 803, 1025, 1039], "lee": [415, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1050], "leepei": 1039, "leereev": 1042, "leeuw": 638, "lefebvr": [1048, 1049], "lefevr": [415, 541], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 84, 88, 95, 97, 104, 107, 112, 113, 118, 122, 123, 134, 137, 139, 140, 141, 143, 146, 149, 154, 156, 173, 179, 182, 186, 189, 206, 213, 214, 215, 217, 224, 226, 227, 230, 231, 240, 244, 248, 250, 251, 256, 258, 259, 262, 267, 268, 269, 270, 272, 280, 281, 283, 294, 296, 297, 304, 306, 309, 311, 324, 326, 327, 331, 340, 341, 345, 360, 373, 378, 380, 382, 407, 410, 413, 414, 416, 417, 418, 420, 427, 433, 448, 474, 484, 485, 486, 487, 496, 501, 552, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 590, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 638, 642, 646, 654, 658, 800, 801, 803, 806, 807, 810, 817, 824, 880, 887, 915, 916, 917, 918, 919, 937, 951, 974, 977, 993, 996, 998, 1000, 1002, 1004, 1006, 1011, 1016, 1018, 1020, 1042, 1044, 1049], "left_h": 311, "left_impur": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918], "leftarrow": [410, 1008, 1018], "leftmost": 1008, "legaci": [372, 382, 392, 945, 946, 1035, 1042, 1047], "legarreta": [1046, 1048, 1049], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 69, 72, 75, 94, 104, 105, 107, 109, 110, 111, 112, 115, 116, 122, 124, 126, 127, 128, 129, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 164, 170, 171, 175, 176, 177, 178, 179, 186, 187, 191, 193, 194, 196, 200, 201, 202, 203, 207, 213, 214, 215, 216, 219, 220, 221, 222, 223, 226, 227, 228, 230, 231, 236, 241, 243, 244, 245, 246, 248, 251, 258, 265, 266, 268, 270, 271, 273, 274, 275, 276, 278, 281, 283, 284, 285, 286, 288, 294, 296, 297, 298, 303, 307, 312, 316, 321, 324, 327, 332, 340, 343, 345, 347, 352, 356, 357, 358, 359, 703, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "legend1": 126, "legend_el": [126, 150, 226, 274, 294, 345], "legend_handl": 298, "legend_lin": 48, "legend_titl": 219, "legitim": [265, 1001], "legitimate_accept": 265, "legitimate_refus": 265, "lego": 1023, "lehoucq": 415, "leibler": [54, 233, 415, 541, 543, 550, 695, 1001, 1042], "leibniz": 1004, "leig": 1041, "leightonzhang": 1041, "leinweb": [1043, 1044], "leisur": 43, "lejeun": 1042, "lekhwani": 1044, "leland": [1041, 1042, 1043, 1045, 1046, 1051], "lemaitr": [0, 399, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lemir": 1046, "lemma": [37, 244, 370, 537, 544, 552, 899, 900, 901, 998, 1030, 1038], "lemmat": 418, "lemmatoken": 418, "lemo": [1051, 1052], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 82, 83, 84, 88, 93, 94, 95, 96, 97, 98, 102, 104, 123, 129, 130, 132, 137, 140, 142, 143, 149, 160, 161, 166, 170, 178, 182, 187, 189, 212, 213, 231, 236, 240, 243, 244, 245, 247, 249, 250, 256, 258, 259, 266, 269, 271, 272, 279, 280, 282, 286, 290, 291, 298, 300, 301, 306, 312, 313, 314, 317, 326, 328, 330, 331, 334, 341, 347, 350, 352, 353, 354, 360, 390, 392, 417, 420, 428, 432, 434, 439, 447, 452, 458, 466, 510, 518, 553, 572, 573, 585, 600, 635, 636, 785, 803, 817, 829, 833, 835, 837, 838, 888, 902, 903, 1044, 1047], "lenail": [1043, 1047], "lend": 1028, "lene": 1051, "length": [2, 102, 118, 126, 128, 130, 142, 168, 170, 171, 172, 175, 176, 178, 191, 197, 247, 248, 251, 254, 294, 322, 325, 338, 354, 371, 375, 378, 386, 387, 392, 411, 415, 417, 418, 420, 447, 492, 511, 512, 515, 518, 526, 554, 566, 584, 585, 592, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 635, 649, 650, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 684, 687, 784, 803, 806, 807, 817, 833, 835, 838, 839, 841, 849, 850, 851, 853, 855, 894, 920, 933, 935, 939, 957, 958, 974, 977, 1003, 1010, 1014, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1051], "length_scal": [170, 171, 174, 175, 176, 177, 179, 420, 615, 618, 621, 622, 624, 625, 626, 627], "length_scale_bound": [170, 176, 177, 179, 420, 614, 618, 622, 625, 626], "length_scale_grid": 176, "lengthi": [378, 390], "lenient": [881, 1024, 1052], "lenz": [1046, 1050], "leo": 1052, "leogrin": 1053, "leon": [679, 680, 681, 1035, 1053], "leonardo": 1048, "leonenko": [610, 611], "leonieborn": 1041, "leopoldo": 1048, "leq": [173, 415, 417, 1000, 1004, 1007, 1018, 1019, 1020], "lera": 1042, "leriqu": [1041, 1043], "lernen": 452, "lesne": 1049, "less": [43, 44, 47, 64, 85, 86, 93, 118, 120, 123, 130, 134, 141, 146, 147, 149, 170, 177, 186, 196, 198, 213, 215, 217, 246, 250, 257, 259, 265, 271, 272, 280, 282, 285, 286, 312, 315, 316, 317, 322, 324, 328, 345, 352, 353, 361, 365, 367, 373, 378, 380, 390, 392, 404, 410, 414, 415, 417, 418, 422, 441, 443, 445, 447, 450, 452, 454, 459, 462, 464, 465, 484, 485, 486, 499, 518, 534, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 593, 599, 622, 630, 637, 650, 664, 679, 681, 695, 704, 724, 725, 726, 727, 728, 739, 755, 767, 782, 783, 788, 798, 800, 801, 805, 806, 807, 813, 831, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 870, 882, 884, 885, 887, 890, 896, 897, 907, 908, 915, 916, 917, 918, 939, 954, 993, 994, 996, 997, 998, 1001, 1003, 1004, 1007, 1009, 1014, 1018, 1019, 1020, 1023, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1050, 1052], "lessen": [219, 661, 662], "lesser": [306, 392, 444, 544, 1000], "let": [43, 44, 52, 86, 88, 97, 103, 107, 120, 125, 126, 141, 143, 146, 147, 149, 151, 170, 176, 177, 182, 186, 187, 188, 195, 202, 213, 215, 231, 233, 237, 247, 254, 265, 266, 271, 274, 278, 284, 285, 328, 352, 354, 360, 361, 373, 378, 380, 384, 390, 404, 407, 409, 410, 414, 417, 418, 447, 493, 503, 507, 513, 537, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 684, 687, 873, 880, 881, 1000, 1001, 1002, 1003, 1004, 1011, 1012, 1014, 1019, 1020, 1028, 1045], "letelli": 1041, "letter": [168, 178, 373, 375, 382, 418, 791, 792, 809, 826, 1004], "leu": 1049, "leung": 1046, "lev_metr": 390, "levarag": 327, "level": [43, 48, 50, 51, 64, 70, 76, 86, 120, 139, 142, 161, 168, 169, 170, 171, 174, 177, 179, 183, 186, 187, 224, 225, 226, 227, 228, 231, 240, 244, 245, 260, 265, 271, 274, 280, 281, 297, 304, 339, 340, 342, 343, 345, 348, 353, 360, 365, 373, 375, 378, 380, 384, 390, 392, 395, 396, 401, 408, 415, 418, 420, 424, 456, 470, 496, 497, 499, 506, 524, 534, 539, 540, 548, 549, 550, 564, 565, 570, 571, 614, 618, 625, 626, 628, 669, 670, 671, 679, 680, 681, 690, 693, 695, 697, 703, 705, 719, 726, 731, 788, 828, 829, 830, 832, 835, 836, 863, 864, 865, 905, 920, 993, 1000, 1004, 1005, 1007, 1012, 1018, 1020, 1023, 1024, 1025, 1038, 1046, 1049, 1050, 1051], "levelnam": 120, "leven": 390, "levenshtein": [328, 390], "levenshtein_dist": 328, "levequ": [845, 887], "leverag": [43, 47, 72, 82, 116, 231, 328, 352, 353, 365, 366, 376, 392, 414, 417, 882, 993, 1000, 1038, 1050, 1053], "levesqu": 1041, "levi": [537, 1042], "levinson": [1043, 1044], "levitski": [1050, 1051, 1052], "levitskii": 1048, "lewi": [373, 1042, 1046], "lex": [410, 454, 464], "lexicograph": [392, 570, 791, 797, 849, 857], "lexicon": 1014, "lexsort": 61, "lf": 386, "lfw": [2, 45, 373, 496, 497, 1035], "lfw_home": 373, "lfw_pairs_train": [373, 496], "lfw_peopl": [45, 373, 497], "lg2012": 417, "lgtm": 1042, "li": [0, 333, 373, 399, 400, 642, 645, 699, 729, 759, 900, 993, 996, 1004, 1007, 1014, 1016, 1019, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "liabil": 231, "liac": [325, 372, 378, 499, 1050, 1051], "liam": [1043, 1044], "liang": [1041, 1046, 1047, 1052, 1053], "liau": 1038, "lib": [366, 376, 396, 1023], "liberti": 262, "libisel": 1053, "liblinear": [206, 339, 384, 661, 662, 791, 907, 908, 909, 912, 913, 1000, 1004, 1019, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1051], "libomp": [376, 1047], "librari": [45, 265, 271, 323, 325, 358, 361, 370, 372, 373, 376, 377, 378, 379, 384, 386, 390, 391, 392, 396, 404, 406, 466, 661, 907, 908, 909, 910, 912, 913, 1000, 1004, 1019, 1020, 1023, 1024, 1028, 1033, 1038, 1042, 1043, 1044, 1045, 1046, 1048, 1052], "libsvm": [2, 191, 339, 371, 384, 489, 511, 566, 907, 908, 909, 910, 911, 912, 913, 1019, 1030, 1035, 1037, 1043, 1046, 1049], "libsvmtool": [191, 372, 489, 511, 512], "licenc": 372, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 372, 390, 392, 1020, 1028], "lichman": 375, "liddel": 1043, "lidston": [842, 843, 844, 846, 1006], "lie": [52, 93, 115, 167, 186, 245, 311, 332, 339, 341, 415, 417, 609, 855, 857, 858, 859, 907, 908, 998, 1001, 1004, 1014, 1019], "lieg": 417, "lieret": 1050, "lieu": [1041, 1042], "life": [52, 149, 264, 328, 386, 1001], "lifecycl": [1023, 1024], "lifo": 922, "lift": 396, "light": [137, 373], "lighter": [365, 703, 705, 785, 792, 1051], "lightfm": 1023, "lightgbm": [149, 417, 564, 565, 1023, 1044, 1051], "lightgreen": [156, 219, 230], "lightgrei": 49, "lightweight": [379, 803, 817, 828, 829], "ligo": 1042, "lihaitao": 1053, "lik_max": 109, "lik_min": 109, "like": [0, 2, 43, 51, 52, 85, 88, 91, 93, 102, 118, 123, 127, 129, 132, 134, 136, 141, 146, 149, 150, 170, 176, 186, 194, 213, 247, 262, 265, 271, 274, 275, 278, 279, 286, 300, 309, 311, 316, 317, 320, 333, 341, 345, 352, 353, 361, 365, 367, 370, 372, 373, 377, 378, 380, 382, 385, 386, 387, 390, 391, 392, 401, 404, 406, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 518, 522, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 582, 584, 585, 586, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 929, 931, 938, 939, 953, 957, 966, 967, 974, 975, 976, 988, 990, 992, 993, 996, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1011, 1014, 1019, 1020, 1024, 1028, 1032, 1035, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "likelihood": [2, 69, 90, 108, 110, 111, 112, 113, 127, 148, 170, 171, 172, 174, 175, 176, 177, 179, 183, 200, 231, 260, 263, 271, 277, 302, 309, 311, 380, 392, 408, 412, 415, 417, 420, 439, 471, 472, 473, 474, 475, 476, 477, 478, 479, 518, 535, 539, 544, 552, 553, 554, 613, 614, 634, 648, 661, 715, 744, 800, 801, 803, 830, 833, 852, 863, 883, 895, 909, 910, 912, 913, 1000, 1003, 1006, 1014, 1019, 1025, 1038, 1039, 1044, 1050], "likewis": [248, 410, 526], "lil": [392, 556, 557, 874, 929, 957, 1007], "lil_matrix": 55, "lili": [1043, 1044], "lilian": [1040, 1041, 1052], "lim": [173, 537], "lima": [1048, 1049], "limit": [43, 47, 55, 64, 72, 77, 90, 99, 113, 134, 141, 147, 154, 181, 186, 187, 188, 193, 213, 214, 230, 244, 278, 313, 317, 323, 348, 354, 361, 366, 379, 380, 383, 390, 392, 393, 408, 409, 410, 413, 415, 419, 448, 465, 470, 562, 563, 564, 565, 635, 653, 682, 685, 686, 691, 781, 824, 855, 857, 858, 859, 880, 881, 905, 909, 910, 911, 912, 913, 993, 1000, 1001, 1003, 1004, 1011, 1012, 1014, 1024, 1030, 1043, 1045, 1048, 1049, 1052], "limits_": 1007, "lin": [0, 537, 661, 1019, 1040, 1041, 1042, 1043], "lin_clf": 1019, "linalg": [70, 87, 109, 110, 113, 127, 129, 199, 256, 257, 258, 261, 262, 327, 378, 384, 415, 453, 454, 455, 464, 524, 535, 538, 544, 547, 660, 675, 677, 690, 694, 698, 949], "linalgerror": 1045, "lincoln": 373, "lindenbaum": 537, "lindenstrauss": [37, 183, 239, 370, 491, 505, 899, 900, 901, 1021, 1025, 1030], "lindgren": 1053, "lindquist": 1050, "line": [48, 50, 52, 55, 75, 78, 93, 102, 111, 120, 125, 134, 140, 145, 169, 181, 182, 183, 186, 187, 200, 202, 203, 205, 208, 209, 211, 214, 216, 221, 222, 224, 225, 227, 240, 244, 245, 248, 250, 268, 275, 277, 278, 284, 297, 301, 304, 312, 322, 340, 343, 345, 346, 349, 350, 352, 372, 373, 376, 378, 379, 380, 382, 383, 384, 385, 386, 390, 415, 416, 417, 440, 489, 490, 491, 511, 512, 545, 556, 557, 558, 559, 613, 616, 617, 635, 673, 689, 703, 704, 705, 809, 826, 998, 1004, 1008, 1011, 1018, 1023, 1025, 1027, 1037, 1046, 1048, 1051, 1052], "line0": [51, 236], "line1": [46, 51, 236], "line2": [46, 51, 236, 349], "line2d": [48, 111, 227, 297, 340, 343, 809, 826], "line_": [385, 440, 701, 703, 704, 705, 809, 826], "line_bin": 312, "line_fig": 140, "line_i": 216, "line_kw": [149, 151, 251, 273, 321, 327, 635, 809, 826], "line_kwarg": [154, 704], "line_profil": 384, "line_trac": 140, "line_x": [216, 230], "line_y_ransac": 216, "linea": 398, "linear": [2, 12, 44, 48, 49, 51, 52, 53, 64, 65, 66, 67, 72, 85, 90, 106, 107, 109, 110, 111, 112, 113, 116, 120, 125, 126, 128, 137, 139, 152, 154, 157, 159, 161, 163, 168, 174, 176, 181, 182, 184, 185, 187, 191, 194, 196, 198, 199, 200, 202, 203, 208, 210, 211, 214, 215, 217, 218, 221, 225, 227, 229, 230, 231, 232, 235, 237, 243, 244, 246, 248, 249, 252, 261, 264, 267, 268, 269, 271, 274, 276, 277, 278, 279, 280, 281, 284, 286, 296, 297, 299, 300, 301, 309, 311, 312, 313, 316, 318, 322, 323, 336, 338, 341, 342, 343, 346, 348, 349, 352, 358, 359, 366, 370, 374, 375, 376, 380, 381, 383, 392, 395, 398, 408, 410, 413, 414, 415, 416, 417, 418, 419, 420, 422, 444, 446, 457, 467, 469, 477, 484, 485, 486, 499, 504, 505, 515, 518, 524, 527, 535, 536, 537, 538, 539, 542, 544, 546, 547, 551, 552, 553, 557, 569, 585, 592, 596, 597, 609, 612, 617, 623, 634, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 692, 693, 694, 695, 696, 704, 710, 719, 722, 753, 756, 768, 770, 777, 788, 803, 814, 818, 830, 833, 847, 848, 852, 856, 863, 864, 865, 868, 872, 873, 874, 877, 880, 882, 884, 885, 886, 887, 896, 900, 907, 908, 909, 910, 911, 912, 913, 993, 995, 996, 997, 999, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1018, 1019, 1025, 1026, 1028, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "linear_baselin": 322, "linear_kernel": [2, 406, 764, 768, 1002, 1043], "linear_model": [2, 43, 46, 47, 49, 53, 62, 64, 66, 87, 103, 105, 107, 116, 139, 154, 156, 157, 159, 160, 166, 167, 168, 170, 181, 183, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 240, 241, 242, 243, 247, 249, 252, 254, 265, 267, 274, 279, 280, 284, 285, 286, 290, 309, 312, 313, 316, 318, 320, 321, 322, 323, 324, 326, 327, 328, 334, 352, 361, 365, 367, 377, 378, 380, 384, 386, 387, 391, 392, 401, 406, 409, 411, 417, 430, 435, 440, 467, 540, 542, 545, 546, 548, 549, 551, 570, 571, 572, 573, 600, 634, 635, 637, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 703, 704, 791, 802, 817, 826, 828, 829, 830, 832, 834, 838, 839, 840, 841, 865, 882, 886, 907, 908, 911, 914, 943, 945, 946, 947, 987, 996, 1000, 1004, 1005, 1010, 1012, 1014, 1018, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "linear_model_preprocessor": 213, "linear_pca": 411, "linear_preprocessor": 154, "linear_regress": [215, 286], "linear_sum_assign": [407, 722], "linear_svc": 1019, "linear_svm": 245, "linear_svm_scor": 245, "linear_svm_tim": 245, "lineardiscriminantanalysi": [2, 69, 70, 128, 234, 300, 361, 406, 539, 553, 856, 998, 1005, 1007, 1035, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1049, 1050, 1051], "linearli": [67, 125, 136, 168, 186, 193, 227, 234, 240, 280, 281, 313, 316, 345, 352, 365, 375, 390, 415, 417, 518, 556, 645, 710, 876, 877, 1004, 1007, 1010, 1019, 1042, 1051], "linearly_separ": [67, 306], "linearmodel": 1048, "linearoper": [327, 690], "linearregress": [2, 116, 157, 185, 193, 203, 208, 209, 210, 211, 216, 219, 230, 243, 247, 249, 267, 286, 312, 361, 378, 390, 391, 411, 417, 467, 573, 635, 638, 649, 652, 655, 657, 674, 675, 690, 1000, 1004, 1005, 1014, 1039, 1040, 1044, 1047, 1048, 1049, 1051], "linearregressionifittedlinearregress": 243, "linearregressionlinearregress": 157, "linearsvc": [2, 62, 64, 102, 104, 164, 165, 183, 191, 245, 268, 270, 278, 313, 320, 336, 338, 342, 343, 348, 352, 365, 380, 384, 408, 418, 419, 439, 515, 570, 580, 634, 642, 646, 655, 675, 676, 677, 678, 679, 690, 738, 745, 830, 835, 908, 909, 912, 914, 1000, 1004, 1005, 1019, 1025, 1035, 1036, 1037, 1041, 1043, 1046, 1051], "linearsvc__c": 313, "linearsvclinearsvc": [104, 165, 278], "linearsvr": [2, 571, 913, 1019, 1039, 1041, 1046, 1051], "linecollect": [51, 236, 243, 635], "linen": [51, 236], "lineno": 384, "lineplot": [149, 271], "liner": [380, 833], "lines_": [385, 635, 809, 826], "linestyl": [49, 50, 69, 93, 105, 111, 127, 129, 134, 145, 156, 159, 161, 170, 173, 175, 177, 179, 188, 189, 200, 201, 202, 213, 214, 215, 219, 223, 225, 226, 231, 248, 250, 265, 268, 270, 274, 275, 280, 284, 285, 296, 304, 307, 312, 339, 342, 343, 345, 346, 348], "linewidth": [61, 69, 70, 72, 75, 91, 105, 109, 116, 118, 122, 135, 146, 149, 151, 170, 174, 178, 202, 203, 207, 208, 209, 211, 214, 216, 219, 227, 230, 240, 248, 250, 280, 284, 297, 301, 312, 321, 327, 339, 340, 342, 358], "linger": 215, "linguist": [719, 904, 1017], "lingyi1110": 1050, "link": [51, 55, 134, 186, 187, 193, 213, 217, 231, 256, 265, 274, 301, 356, 366, 372, 377, 378, 379, 380, 382, 386, 392, 408, 410, 412, 415, 417, 420, 564, 565, 613, 651, 672, 683, 691, 708, 932, 934, 1000, 1007, 1020, 1021, 1023, 1027, 1033, 1035, 1038, 1039, 1042, 1043, 1046, 1052], "link_thickness_i": 301, "linkag": [71, 74, 75, 76, 79, 81, 85, 88, 89, 90, 100, 183, 189, 442, 443, 447, 448, 465, 515, 517, 525, 887, 1023, 1025, 1038, 1043, 1046], "linkage_matrix": 76, "linkage_tre": 1039, "linkedin": 382, "linker": 379, "linnerrud": [371, 1030], "linnerud": [2, 375, 508], "linprog": [673, 1000], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 82, 88, 111, 112, 121, 129, 135, 146, 170, 171, 173, 174, 175, 176, 177, 179, 187, 193, 194, 196, 198, 203, 207, 213, 214, 215, 219, 223, 224, 225, 226, 227, 231, 238, 240, 243, 244, 246, 248, 260, 271, 273, 274, 278, 279, 280, 281, 286, 296, 297, 303, 304, 312, 314, 324, 325, 340, 341, 344, 345, 346, 348, 349, 350, 634, 635, 809, 831, 847, 848], "lint": [378, 386], "linter": 582, "linthresh": [193, 198], "linu": [1051, 1052, 1053], "linux": [378, 380, 381, 386, 1023, 1035], "lipoprotein": [168, 375], "lippert": 1000, "lippmann": 373, "lipschitz": [37, 1016], "lisa": [1043, 1044, 1046, 1047, 1049, 1050], "lise": 1049, "list": [0, 2, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 82, 95, 102, 129, 130, 138, 140, 145, 154, 189, 217, 250, 251, 266, 269, 271, 272, 274, 275, 280, 300, 313, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 344, 353, 354, 367, 372, 373, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 390, 391, 392, 393, 396, 397, 401, 408, 410, 411, 414, 416, 417, 418, 433, 435, 439, 452, 458, 459, 466, 467, 468, 469, 473, 474, 480, 484, 485, 486, 490, 491, 492, 493, 495, 496, 499, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 526, 535, 553, 554, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 594, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 635, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 684, 687, 689, 690, 695, 699, 700, 702, 713, 714, 715, 716, 719, 721, 728, 736, 745, 749, 757, 781, 784, 786, 791, 797, 800, 801, 803, 806, 807, 809, 814, 815, 817, 826, 828, 829, 830, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 871, 875, 878, 880, 881, 886, 888, 904, 908, 910, 913, 915, 916, 917, 918, 921, 928, 929, 933, 934, 935, 939, 942, 943, 944, 946, 954, 955, 958, 969, 974, 977, 987, 993, 994, 1000, 1004, 1006, 1007, 1008, 1011, 1012, 1015, 1020, 1023, 1024, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "list_param": 378, "listedcolormap": [67, 70, 142, 299, 302, 306, 313], "listen": 352, "listinfo": 386, "lite": 1035, "liter": [378, 1028], "literatur": [175, 271, 288, 353, 375, 378, 384, 386, 390, 391, 410, 413, 415, 417, 445, 449, 451, 504, 539, 541, 543, 550, 558, 559, 591, 594, 711, 800, 993, 996, 1000, 1004, 1045], "litsidi": [1050, 1051], "littl": [186, 187, 188, 189, 240, 373, 418, 464, 647, 803, 817, 951, 994, 1001, 1003, 1019, 1020, 1036, 1047, 1052], "lituiev": 1048, "liu": [0, 368, 389, 399, 566, 729, 759, 1004, 1010, 1038, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "liutong": 1043, "live": [50, 102, 186, 265, 304, 373, 378, 410, 501, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 1027], "livesei": 352, "livni": [410, 444], "lizao": 1043, "lizsz": 1041, "lj2017": 410, "lk": 1038, "lkjcalc": 1043, "lkubin": 1046, "ll": [50, 88, 266, 284, 304, 378, 390, 535, 544, 996, 1007, 1020], "llcrnrlat": [50, 304], "llcrnrlon": [50, 304], "lle": [233, 234, 235, 237, 533, 692, 696, 1001, 1047], "lle_hessian": 233, "lle_ltsa": 233, "lle_method": 233, "lle_mod": 233, "lle_standard": 233, "lloyd": [410, 445, 449, 451, 461, 1049, 1050], "llvm": 376, "lm": 195, "lmbda": 315, "lmbda_bc": 315, "lmbda_yj": 315, "lml": [171, 172, 176, 420], "ln": [382, 1000, 1008, 1014], "loa": [169, 177, 183, 420, 499, 614, 618, 625, 626, 628, 1025], "load": [2, 10, 43, 45, 50, 51, 52, 54, 63, 68, 80, 86, 103, 104, 120, 130, 139, 141, 142, 144, 150, 151, 154, 155, 157, 165, 166, 175, 186, 187, 191, 195, 209, 210, 213, 221, 229, 242, 243, 247, 249, 250, 251, 252, 254, 261, 265, 267, 269, 271, 276, 278, 283, 285, 288, 291, 295, 300, 307, 308, 309, 321, 322, 324, 325, 327, 332, 333, 334, 357, 360, 365, 370, 373, 375, 381, 384, 391, 404, 413, 414, 415, 417, 484, 485, 486, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 535, 537, 546, 847, 848, 951, 1014, 1024, 1030, 1035, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "load_ames_h": 154, "load_boston": [1041, 1043, 1048], "load_breast_canc": [2, 168, 189, 333, 356, 383, 595, 598, 599, 601, 677, 678, 791, 1004, 1040, 1041, 1046], "load_cont": 506, "load_dataset": 352, "load_diabet": [2, 46, 147, 157, 159, 168, 182, 200, 201, 202, 209, 210, 251, 267, 325, 417, 561, 565, 571, 676, 704, 828, 829, 830, 916, 918, 1012, 1041, 1046, 1049], "load_digit": [2, 68, 84, 85, 91, 104, 105, 160, 166, 204, 220, 234, 244, 245, 269, 270, 273, 279, 293, 295, 300, 307, 309, 326, 330, 331, 384, 411, 422, 447, 448, 535, 536, 537, 538, 602, 603, 641, 642, 671, 691, 692, 693, 694, 696, 698, 1041, 1046], "load_fil": [2, 372, 373, 1037, 1049], "load_iri": [2, 66, 76, 106, 124, 126, 128, 130, 142, 155, 161, 164, 172, 197, 206, 222, 254, 258, 264, 276, 277, 278, 280, 281, 294, 299, 302, 307, 320, 322, 325, 335, 337, 338, 341, 344, 357, 360, 391, 404, 410, 411, 414, 417, 419, 430, 564, 570, 604, 605, 613, 622, 623, 625, 626, 634, 661, 662, 714, 791, 803, 806, 807, 809, 817, 835, 856, 902, 903, 904, 915, 917, 919, 920, 921, 994, 999, 1004, 1005, 1006, 1007, 1011, 1014, 1020, 1041, 1043, 1046], "load_lfw_pair": 1040, "load_linnerud": [2, 840, 1041, 1046], "load_mnist": [221, 291], "load_mtpl2": 231, "load_sample_imag": [2, 586, 587, 590, 1044], "load_svmlight_fil": [2, 372, 1035, 1036, 1041, 1042, 1043, 1050], "load_win": [2, 48, 253, 316, 851, 859, 1032, 1046], "loader": [2, 272, 334, 352, 371, 372, 373, 501, 502, 511, 1024, 1035, 1040, 1042, 1043, 1046], "loan": [417, 537, 1000, 1028], "loayza": 1049, "lobpcg": [80, 454, 464, 691, 694, 698, 1045, 1048, 1049, 1050], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 104, 107, 110, 111, 112, 115, 122, 124, 126, 127, 128, 129, 134, 136, 137, 138, 145, 146, 147, 148, 149, 151, 154, 156, 157, 164, 170, 171, 177, 179, 186, 187, 196, 201, 203, 207, 213, 214, 215, 216, 219, 220, 223, 226, 227, 230, 231, 236, 243, 244, 245, 246, 248, 250, 258, 259, 266, 269, 270, 271, 274, 275, 278, 281, 284, 285, 286, 294, 296, 297, 307, 312, 315, 316, 321, 324, 327, 332, 340, 343, 345, 347, 348, 352, 357, 359, 817, 884, 896], "loc_a": 315, "loc_b": 315, "local": [2, 43, 48, 51, 58, 74, 85, 90, 94, 120, 123, 139, 140, 151, 168, 175, 176, 183, 187, 214, 227, 232, 235, 237, 240, 244, 250, 292, 301, 340, 358, 359, 366, 375, 376, 378, 382, 384, 386, 396, 410, 415, 417, 418, 420, 449, 454, 464, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 505, 541, 543, 547, 550, 552, 562, 563, 566, 569, 613, 614, 691, 692, 693, 694, 695, 696, 698, 699, 761, 762, 850, 853, 856, 858, 868, 877, 900, 903, 911, 969, 1002, 1003, 1007, 1008, 1020, 1025, 1027, 1029, 1030, 1039, 1043, 1047, 1050, 1053], "local_filenam": 494, "localcach": 396, "locally_linear_embed": [2, 237, 1001], "locallylinearembed": [2, 51, 233, 234, 235, 324, 691, 693, 695, 1001, 1007, 1040, 1041, 1049, 1050, 1051], "localoutlierfactor": [2, 240, 250, 297, 298, 324, 392, 566, 911, 1010, 1042, 1043, 1045, 1049, 1050, 1051, 1052], "localoutlierfactor__n_neighbor": 250, "locat": [48, 62, 86, 87, 104, 111, 112, 207, 304, 322, 341, 371, 373, 376, 378, 382, 383, 386, 387, 396, 397, 410, 412, 416, 450, 462, 463, 471, 472, 473, 474, 475, 476, 477, 478, 490, 503, 504, 507, 508, 515, 518, 988, 994, 1000, 1005, 1010, 1014, 1020, 1043], "location_": [111, 112, 471, 472, 473, 474, 475, 476, 477, 478], "location_reweight": [471, 476], "lock": [381, 396, 403, 404, 969, 1053], "loev": 537, "lof": [2, 48, 183, 227, 240, 250, 292, 340, 566, 853, 911, 1010, 1025], "lof_kw": 250, "lofti": [1045, 1046], "log": [2, 43, 58, 62, 63, 64, 109, 120, 134, 144, 146, 154, 164, 168, 171, 172, 174, 175, 176, 179, 200, 202, 206, 213, 218, 223, 231, 244, 246, 260, 265, 301, 316, 352, 373, 375, 376, 378, 386, 387, 392, 407, 408, 410, 411, 412, 415, 417, 418, 420, 450, 453, 462, 467, 472, 473, 474, 475, 476, 477, 478, 535, 539, 544, 552, 553, 554, 556, 558, 560, 562, 565, 567, 593, 594, 596, 597, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 645, 648, 651, 661, 662, 672, 674, 679, 683, 725, 744, 758, 800, 801, 803, 806, 807, 817, 842, 843, 844, 845, 846, 847, 848, 852, 863, 864, 871, 872, 901, 904, 909, 912, 914, 915, 917, 949, 993, 996, 998, 1000, 1001, 1006, 1007, 1009, 1012, 1014, 1018, 1020, 1023, 1024, 1037, 1038, 1039, 1044, 1045, 1046, 1049, 1052, 1053], "log10": [164, 176, 186, 206, 272, 341], "log1p": [107, 243, 871, 1004, 1014], "log2": [138, 223, 252, 560, 561, 562, 563, 567, 568, 915, 916, 917, 918, 1005], "log_": 1004, "log_2": [407, 566, 1010], "log_bas": 729, "log_den": 296, "log_dens": 852, "log_likelihood": [109, 613, 614, 800, 801], "log_likelihood_gradi": [613, 614], "log_logist": 1052, "log_loss": [2, 62, 63, 145, 148, 171, 316, 334, 352, 392, 408, 417, 560, 562, 564, 567, 649, 661, 679, 915, 917, 993, 1000, 1004, 1018, 1020, 1037, 1039, 1041, 1049, 1050, 1051, 1052], "log_marginal_likelihood": [171, 172, 174, 176, 179, 420, 613, 614, 1045], "log_marginal_likelihood_value_": [613, 614], "log_prob": [800, 801, 802, 825], "log_reg": [254, 324], "log_reg_input_featur": 324, "log_scal": 1051, "log_scale_transform": [213, 231], "log_scaled_numer": [213, 231], "log_y_prob": 864, "logaddexp": 1052, "logan": [1049, 1050, 1051], "logarithm": [2, 107, 154, 186, 217, 244, 272, 341, 392, 419, 462, 593, 661, 662, 679, 707, 729, 744, 754, 758, 759, 760, 794, 802, 825, 838, 847, 848, 949, 1020, 1042], "logcosh": [422, 536], "logdet": 949, "logged_in": 373, "logger": 1046, "logic": [132, 366, 379, 380, 385, 406, 417, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "logical_and": [53, 146], "logical_not": [57, 97, 129, 216], "logical_or": [215, 221, 280, 384], "logical_xor": [53, 174, 345], "loginov": 1041, "logist": [2, 62, 64, 66, 101, 103, 107, 126, 128, 130, 139, 160, 166, 183, 192, 201, 208, 210, 211, 217, 219, 222, 224, 230, 241, 243, 254, 265, 279, 282, 284, 285, 290, 308, 309, 316, 324, 337, 338, 348, 349, 352, 392, 393, 408, 411, 417, 419, 420, 439, 491, 499, 505, 507, 515, 544, 562, 564, 613, 634, 649, 660, 661, 662, 669, 671, 679, 744, 803, 817, 833, 836, 863, 864, 865, 867, 887, 914, 936, 938, 1004, 1008, 1009, 1018, 1019, 1025, 1026, 1028, 1030, 1039, 1042, 1043, 1045, 1046], "logistic__c": 105, "logistic_regress": [265, 826, 834], "logistic_regression_path": [1043, 1044], "logisticregress": [2, 62, 66, 103, 105, 139, 156, 160, 166, 167, 168, 197, 203, 204, 205, 206, 220, 228, 229, 241, 242, 252, 254, 265, 274, 280, 285, 309, 313, 320, 321, 322, 323, 324, 326, 328, 352, 365, 378, 380, 384, 386, 391, 401, 408, 409, 411, 417, 419, 430, 435, 440, 570, 572, 600, 634, 637, 646, 655, 662, 675, 676, 677, 678, 679, 690, 703, 791, 802, 817, 826, 832, 834, 838, 839, 841, 892, 893, 895, 896, 897, 898, 914, 945, 946, 947, 987, 1000, 1004, 1005, 1014, 1018, 1019, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "logisticregression__c": [265, 313], "logisticregressioncv": [2, 64, 316, 392, 401, 661, 1000, 1005, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1050, 1052, 1053], "logisticregressionifittedlogisticregress": 309, "logisticregressionlogisticregress": [103, 139, 241, 242, 252, 254, 265, 285, 321, 324], "logit": [2, 408, 420, 661, 662, 1000], "loglik_lw": 109, "loglik_oa": 109, "loglik_r": 109, "loglike_": 535, "loglog": [109, 244], "logloss": 1046, "lognorm": [146, 176, 195, 260, 315, 1014], "logo": [0, 414, 810], "logprob": 852, "logreg": [197, 841], "logspac": [43, 51, 64, 105, 109, 127, 159, 168, 171, 176, 186, 206, 217, 218, 244, 246, 260, 265, 272, 284, 295, 306, 313, 316, 341, 348, 826, 834, 999, 1000], "logsumexp": [301, 1042], "loguniform": [45, 170, 279, 993, 1045], "logx": [217, 348], "lohit": 1052, "loic": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "loki": [366, 1004, 1043, 1046], "lomp": 376, "lon": 767, "london": [411, 418, 468], "londschien": [1048, 1052], "lone": [1050, 1051], "long": [0, 30, 43, 50, 51, 79, 95, 146, 175, 182, 186, 188, 213, 247, 248, 250, 274, 304, 311, 321, 352, 353, 361, 366, 376, 378, 386, 390, 392, 393, 404, 410, 455, 501, 541, 679, 680, 681, 806, 807, 842, 843, 844, 845, 846, 864, 865, 875, 1004, 1010, 1014, 1015, 1017, 1018, 1022, 1037, 1041, 1047, 1049], "long_term_trend_kernel": 175, "long_titl": 345, "longer": [0, 43, 70, 86, 137, 186, 187, 201, 308, 323, 378, 380, 410, 414, 417, 418, 451, 539, 566, 999, 1003, 1004, 1006, 1009, 1019, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "longest": 291, "longitud": [304, 311, 373, 501, 702, 767], "longpathsen": 396, "longstand": [1036, 1042], "loo": [392, 811, 1046], "look": [43, 44, 64, 86, 88, 120, 123, 125, 146, 147, 170, 175, 176, 182, 186, 187, 215, 233, 237, 240, 247, 262, 265, 266, 271, 273, 285, 308, 327, 352, 353, 361, 366, 367, 372, 373, 378, 379, 380, 382, 384, 386, 390, 391, 410, 413, 415, 416, 417, 418, 450, 490, 491, 560, 561, 562, 563, 567, 568, 605, 606, 634, 662, 695, 887, 915, 916, 917, 918, 1000, 1001, 1014, 1018, 1019, 1021, 1035, 1043, 1045], "lookup": [387, 968, 1044], "loop": [46, 47, 137, 146, 186, 266, 276, 352, 360, 365, 378, 379, 384, 410, 414, 419, 649, 650, 655, 656, 662, 663, 664, 665, 666, 993, 1017, 1018, 1038, 1039, 1042, 1047, 1048, 1051, 1052], "loopym": 1045, "loos": [262, 268, 1019, 1043], "looser": 206, "lopusz": 1046, "lorain": 325, "lorek": 1042, "lorentzen": [0, 399, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lorenz": [213, 231, 1040, 1052], "lorenz_curv": [213, 231], "lose": [217, 230, 354, 373, 392, 413, 418, 420, 950, 951, 994, 1000], "losi": [0, 400, 1035], "loss": [2, 25, 46, 52, 61, 62, 63, 64, 129, 140, 145, 146, 147, 148, 170, 171, 183, 192, 196, 203, 206, 215, 217, 218, 220, 221, 225, 231, 246, 265, 279, 307, 308, 316, 323, 327, 328, 334, 338, 339, 343, 345, 348, 352, 390, 392, 408, 415, 420, 466, 467, 499, 511, 512, 535, 541, 542, 543, 546, 550, 555, 556, 557, 561, 562, 563, 564, 565, 568, 646, 649, 652, 661, 662, 669, 670, 671, 672, 673, 674, 675, 679, 680, 681, 682, 706, 709, 712, 725, 726, 737, 738, 743, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 793, 794, 799, 803, 806, 807, 817, 829, 830, 833, 864, 865, 867, 868, 871, 872, 880, 881, 882, 887, 907, 908, 913, 914, 916, 918, 951, 955, 997, 1000, 1008, 1012, 1017, 1018, 1019, 1020, 1025, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "loss_": [307, 864, 865, 1008, 1049], "loss_curve_": [307, 864, 865], "loss_func": 52, "loss_funct": 52, "loss_function_": 1052, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1044, "lossi": 410, "lossili": 392, "lost": [58, 90, 113, 373, 379, 390, 404, 1001, 1004], "lostanlen": 1045, "lostcoast": 1045, "lot": [43, 113, 149, 186, 217, 373, 378, 379, 380, 386, 415, 417, 806, 807, 899, 900, 993, 1016, 1018, 1019, 1023, 1024, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1047], "lot_area": 250, "lotan": 1028, "lotconfig": 143, "lotfrontag": 107, "loui": [325, 1040, 1041, 1045, 1047, 1049, 1051, 1052], "louib": [1043, 1044], "loupp": [0, 400, 417, 558, 559, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "lourida": 1041, "low": [2, 37, 43, 50, 51, 72, 83, 112, 116, 122, 124, 127, 134, 137, 150, 168, 188, 206, 208, 213, 215, 217, 227, 233, 235, 240, 244, 250, 256, 257, 259, 262, 264, 265, 271, 273, 277, 278, 297, 298, 308, 315, 317, 318, 326, 333, 340, 341, 352, 360, 374, 375, 378, 383, 386, 390, 392, 396, 407, 408, 409, 414, 415, 418, 444, 446, 451, 470, 524, 527, 538, 585, 592, 606, 682, 695, 699, 708, 729, 745, 792, 852, 881, 888, 905, 951, 968, 993, 999, 1000, 1001, 1003, 1004, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1019, 1020, 1026, 1030, 1036, 1039, 1040, 1041, 1043, 1044, 1049, 1050], "low_cardin": 317, "low_cardinality_featur": 317, "low_cardinalityindex": 317, "low_i": 208, "low_x": 208, "lower": [37, 44, 52, 63, 64, 67, 69, 91, 110, 116, 120, 122, 127, 134, 137, 140, 142, 146, 149, 150, 166, 170, 172, 174, 176, 178, 186, 187, 188, 198, 199, 201, 203, 213, 214, 215, 216, 226, 233, 237, 243, 244, 249, 258, 262, 265, 270, 271, 273, 274, 278, 279, 281, 284, 285, 294, 295, 297, 298, 313, 316, 324, 328, 333, 341, 352, 353, 354, 357, 373, 378, 392, 408, 409, 410, 413, 414, 415, 416, 417, 418, 421, 446, 450, 466, 469, 501, 512, 535, 537, 544, 547, 562, 563, 564, 565, 566, 591, 592, 594, 606, 614, 616, 617, 618, 620, 622, 623, 625, 626, 628, 635, 636, 638, 640, 680, 682, 715, 719, 728, 731, 737, 742, 800, 801, 853, 855, 857, 858, 859, 861, 888, 907, 908, 909, 910, 911, 914, 937, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019, 1020, 1037, 1038, 1043, 1050, 1052], "lower_bound": 270, "lower_bound_": [800, 801, 1043], "lowercas": [418, 426, 444, 445, 447, 449, 451, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 591, 592, 594, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 868, 873, 899, 900, 1048], "lowest": [2, 107, 116, 187, 198, 261, 372, 410, 414, 638, 640, 806, 807, 810, 914, 915, 1001, 1004, 1020, 1050], "loyal": 1040, "loyola": [0, 368, 1048, 1049], "lo\u00efc": [0, 399, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "lp_model": [330, 331], "lpgo": [414, 812], "lpo": 813, "lprun": 384, "lr": [62, 64, 139, 156, 157, 216, 242, 243, 267, 274, 391, 401, 417, 571, 572, 573, 715, 987], "lr_": 1004, "lr__c": 417, "lr_base": 274, "lrap": [742, 1004], "lrjball": [1045, 1046], "lrlinearregress": 157, "ls100": 335, "ls2010": 996, "ls30": 335, "ls50": 335, "ls_pipelin": 334, "lsa": [2, 415, 547, 1037], "lsa_vector": 353, "lshforest": [1039, 1042], "lsi": 415, "lsqr": [69, 318, 552, 675, 677, 690, 998, 1036, 1042, 1049], "lstrip": [67, 79, 95, 240, 306, 313], "lstsq": [129, 378, 660, 673], "lsturtew": 1048, "lsvc": 419, "lsvm": 191, "lsvm_score": 191, "lsvm_time": 191, "lt": [103, 104, 139, 154, 186, 261, 269, 283, 378, 398], "ltd": [265, 373], "ltg": [168, 375, 504], "ltorgo": 373, "ltsa": [233, 234, 235, 692, 696, 1001], "lu": [544, 547, 950, 951, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "luangkot": 1042, "luca": [1035, 1045, 1046, 1047, 1048], "lucca": 1048, "luce": 1038, "lucen": 418, "lucgiffon": 1046, "luci": [0, 368, 389, 399, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "luciano": [1043, 1050], "lucieclair": 1049, "lucija": 1043, "lucio": 1044, "lucki": 361, "lucyleeow": 1046, "ludwig": 1035, "luessi": 1037, "lui": [661, 1036, 1038, 1039, 1043, 1052], "luiz": 1049, "luk": 1044, "luka": [1039, 1046, 1052, 1053], "luke": 1043, "lukowski": 1050, "luk\u00e1\u0161": 1052, "luna": 1049, "lunt": 1038, "luo": 1039, "lupo": 1047, "luqi": 1044, "luqu": 1045, "lurk": 1035, "lustig": 1000, "lutz": [1041, 1045, 1048, 1052], "luxburg": [410, 454, 464, 694], "luzgin": 1045, "lv_ep": 245, "lvdmaaten": [695, 1042], "lw": [93, 109, 110, 112, 124, 128, 129, 207, 214, 216, 219, 223, 230, 236, 259, 266, 281, 296, 311, 332, 347], "lw_cov_": 113, "lw_mse": 110, "lw_prec_": 113, "lw_score": 127, "lw_shrinkag": 110, "lwda": 452, "lx": 1007, "ly": [245, 855, 857, 858, 859, 1039], "ly648499246": 1048, "lynch": [1036, 1042], "lyon": [1041, 1042], "lyra": [1036, 1039, 1040], "lyrl2004": [373, 500], "l\u00e9o": 1043, "l\u00e9on": [1018, 1049, 1050, 1051], "l\u00e9onard": [1045, 1050], "l\u00e9one": 1041, "l\u00e9oni": 1041, "l\u00f3pez": [1039, 1043, 1044, 1047], "l\u00f6fstedt": 1042, "l\u00f6ning": 1047, "m": [0, 43, 47, 50, 57, 63, 64, 79, 91, 92, 96, 97, 98, 111, 112, 120, 134, 157, 196, 213, 231, 271, 275, 304, 327, 334, 337, 347, 352, 365, 366, 372, 373, 375, 376, 378, 382, 384, 392, 396, 407, 408, 410, 412, 415, 417, 419, 421, 446, 447, 448, 452, 459, 475, 476, 503, 516, 531, 535, 537, 539, 544, 642, 648, 652, 667, 674, 688, 689, 692, 696, 711, 719, 729, 744, 759, 761, 762, 800, 801, 853, 878, 951, 982, 983, 994, 996, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1014, 1018, 1020, 1028, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "m1": [376, 406], "m11": 373, "m2": 406, "m2012": 997, "m2019": 1011, "m_max": 172, "ma": [113, 317, 341, 1000, 1041, 1046], "maascha": 1050, "maaten": [695, 699, 1001], "mabel": [1043, 1047], "mabu": 1048, "mac": [57, 317, 334, 373, 378, 711, 1004], "macaulei": 317, "macbook": 1043, "macdonald": [1045, 1046], "mach": [276, 408, 414, 596, 597], "machado": [408, 726], "machin": [0, 2, 39, 43, 45, 47, 48, 52, 64, 96, 105, 140, 160, 164, 165, 168, 170, 175, 184, 188, 203, 208, 225, 253, 265, 271, 274, 277, 288, 305, 311, 316, 318, 322, 325, 328, 337, 342, 345, 348, 352, 354, 365, 366, 371, 372, 373, 375, 378, 381, 385, 390, 391, 392, 395, 398, 404, 408, 410, 414, 415, 417, 418, 420, 439, 441, 450, 473, 474, 480, 505, 507, 513, 519, 520, 521, 533, 535, 537, 544, 547, 558, 559, 560, 561, 562, 563, 567, 568, 569, 596, 597, 613, 614, 617, 622, 625, 637, 641, 642, 644, 646, 647, 648, 653, 654, 657, 658, 659, 660, 661, 662, 679, 685, 686, 695, 711, 716, 728, 738, 744, 746, 788, 791, 800, 832, 833, 847, 848, 853, 856, 863, 864, 865, 867, 885, 887, 893, 907, 908, 909, 910, 912, 913, 917, 918, 993, 994, 996, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1014, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1035, 1037, 1047, 1048, 1049, 1050, 1052], "machineri": 956, "maciej": 1046, "maci\u00e0": [1004, 1048, 1050], "mackai": [647, 648, 1000], "mackenbach": 1046, "maco": [379, 381, 396, 406, 1043, 1047, 1049], "macosx": 1035, "macro": [45, 68, 102, 165, 269, 309, 320, 330, 331, 373, 414, 710, 716, 732, 733, 741, 786, 787, 790, 791, 825, 1004, 1035, 1043, 1051], "macro_roc_auc_ovo": 280, "macro_roc_auc_ovr": 280, "macroscop": 410, "macsween": [1044, 1045], "mad": [674, 1041], "madan": 1047, "made": [0, 52, 64, 102, 112, 125, 126, 134, 140, 157, 177, 186, 187, 213, 231, 250, 262, 275, 317, 321, 341, 357, 365, 373, 375, 378, 382, 392, 393, 401, 410, 417, 418, 422, 445, 448, 449, 451, 461, 499, 506, 591, 592, 594, 633, 634, 659, 668, 682, 688, 689, 738, 786, 803, 806, 807, 817, 821, 822, 823, 844, 847, 848, 1005, 1010, 1020, 1023, 1028, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1048, 1049, 1053], "madelon": 518, "madhura": [1044, 1046, 1047, 1050, 1051], "madinak": 1050, "madsen": [1041, 1043], "mae": [43, 52, 154, 213, 215, 561, 568, 748, 916, 918, 1004, 1020, 1042, 1043, 1047, 1048], "mae_test": 186, "mae_train": 186, "maennel": 1050, "magali": 1049, "magazin": [112, 419], "magda": 1046, "magenta": [109, 148], "maggi": [1049, 1053], "maggiecheg": [1045, 1049], "maggio": [1046, 1047, 1048], "magic": [247, 379, 384, 420, 619, 624, 627], "magnesium": 375, "magnitud": [43, 129, 136, 171, 182, 186, 230, 250, 276, 311, 316, 323, 328, 365, 373, 384, 410, 417, 420, 616, 655, 707, 887, 1000, 1004, 1008, 1014, 1018, 1020, 1037, 1044, 1053], "mahajan": [1043, 1045, 1052], "mahal": 111, "mahal_emp_cov": 111, "mahal_robust_cov": 111, "mahalanobi": [108, 112, 183, 216, 410, 412, 452, 459, 471, 472, 473, 474, 475, 476, 477, 478, 702, 781, 782, 783, 998, 1007, 1010, 1025, 1043, 1046, 1047], "mahalanobisdist": 702, "mahapatra": 1042, "mahdavi": 642, "maheshakya": [0, 1038, 1039, 1040], "mahieux": 1028, "mahimkar": 1053, "mahmood": 1053, "mahout": 844, "mai": [0, 2, 25, 47, 57, 62, 74, 79, 80, 89, 103, 116, 120, 143, 144, 149, 168, 174, 176, 178, 186, 189, 191, 194, 198, 202, 217, 219, 238, 247, 250, 274, 276, 278, 279, 285, 306, 316, 331, 341, 345, 348, 352, 353, 354, 361, 365, 366, 367, 370, 372, 373, 374, 375, 377, 378, 380, 382, 383, 386, 390, 392, 393, 396, 401, 404, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 433, 441, 442, 443, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 461, 464, 467, 471, 474, 484, 485, 486, 489, 490, 491, 499, 511, 512, 518, 537, 538, 541, 543, 544, 547, 550, 551, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 577, 584, 597, 600, 605, 613, 614, 620, 623, 637, 638, 640, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 679, 680, 681, 682, 684, 687, 689, 691, 692, 694, 695, 696, 698, 700, 708, 714, 715, 718, 719, 721, 722, 724, 725, 726, 727, 729, 741, 759, 766, 788, 789, 803, 805, 806, 807, 808, 817, 818, 819, 822, 823, 828, 832, 835, 840, 841, 842, 843, 844, 846, 849, 850, 851, 853, 855, 857, 858, 859, 865, 866, 867, 870, 872, 882, 884, 885, 886, 887, 888, 890, 896, 899, 900, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 931, 933, 934, 940, 954, 955, 993, 994, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "maikia": [1043, 1044, 1046, 1047], "mail": [373, 378, 382, 386, 390, 393, 1043, 1044], "mailhot": 1035, "mailman": 386, "main": [2, 37, 48, 68, 95, 116, 124, 143, 183, 240, 280, 290, 319, 348, 352, 365, 366, 367, 371, 376, 378, 380, 382, 384, 386, 390, 391, 392, 395, 396, 408, 410, 415, 417, 418, 420, 506, 528, 533, 552, 553, 628, 716, 837, 907, 908, 993, 1001, 1003, 1004, 1011, 1016, 1024, 1027, 1035, 1038, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mainak": 1042, "maingret": 1046, "mainli": [64, 86, 134, 137, 170, 280, 288, 365, 380, 408, 614, 1006, 1011], "maint": 382, "maintain": [88, 218, 231, 233, 247, 271, 366, 377, 381, 384, 385, 386, 390, 392, 393, 396, 410, 417, 442, 444, 876, 877, 883, 884, 887, 892, 895, 896, 898, 1000, 1001, 1014, 1023, 1024, 1030, 1050], "mainten": [0, 378, 386, 390, 396, 403, 1000, 1024, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "mainy": 1047, "mair": 638, "mairal": [415, 534, 540], "maisonneuv": 1047, "maithreyi": 1045, "maj": 572, "major": [2, 49, 54, 70, 140, 265, 278, 311, 315, 320, 321, 322, 323, 324, 325, 326, 327, 345, 354, 365, 373, 377, 378, 382, 384, 390, 393, 404, 410, 414, 416, 418, 554, 572, 573, 697, 919, 921, 1004, 1007, 1018, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "majorfeatur": 382, "make": [0, 2, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 89, 94, 95, 100, 105, 125, 134, 140, 143, 146, 149, 152, 165, 168, 170, 175, 178, 185, 186, 187, 188, 193, 198, 199, 202, 205, 206, 207, 209, 213, 214, 215, 217, 219, 231, 234, 242, 244, 246, 247, 248, 250, 256, 258, 261, 262, 265, 266, 271, 273, 274, 280, 281, 282, 285, 290, 300, 308, 311, 312, 317, 324, 326, 328, 341, 350, 352, 353, 354, 361, 365, 366, 367, 372, 373, 376, 377, 379, 380, 381, 382, 383, 384, 386, 390, 392, 396, 401, 404, 407, 408, 410, 411, 412, 414, 415, 417, 418, 419, 422, 442, 443, 444, 445, 447, 449, 451, 453, 454, 455, 460, 461, 462, 464, 490, 506, 517, 518, 525, 526, 530, 535, 537, 544, 554, 555, 558, 559, 564, 565, 586, 587, 610, 611, 634, 652, 658, 659, 674, 694, 698, 733, 740, 745, 771, 772, 784, 800, 801, 803, 805, 808, 814, 818, 819, 822, 823, 829, 830, 837, 838, 841, 874, 883, 886, 887, 891, 895, 897, 898, 899, 900, 913, 921, 926, 933, 934, 945, 951, 958, 964, 989, 994, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "make_": 1044, "make_biclust": [2, 59, 516, 1037], "make_blob": [2, 61, 63, 69, 73, 77, 78, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 205, 225, 240, 259, 314, 321, 324, 339, 342, 343, 349, 374, 381, 417, 518, 699, 713, 795, 796, 923, 1043, 1046, 1049], "make_cbar": 282, "make_checkerboard": [2, 58, 514, 1037], "make_circl": [2, 67, 79, 95, 125, 152, 238, 306, 307, 313, 332, 374, 1036, 1043, 1046], "make_classif": [2, 62, 64, 67, 138, 139, 141, 165, 167, 268, 274, 282, 283, 301, 306, 313, 320, 322, 326, 328, 348, 361, 374, 381, 406, 409, 417, 439, 440, 489, 515, 556, 558, 560, 567, 608, 610, 669, 700, 701, 703, 705, 802, 825, 826, 831, 832, 834, 837, 864, 867, 907, 914, 993, 1004, 1005, 1014, 1019, 1041, 1042, 1043, 1045], "make_column_selector": [2, 103, 143, 154, 250, 411, 466, 469, 1045], "make_column_transform": [2, 143, 154, 186, 242, 321, 411, 466, 468, 1043], "make_data": [70, 94], "make_dataset": 1044, "make_default": 973, "make_ellips": 258, "make_estim": 250, "make_friedman1": [2, 374, 417, 542, 546, 596, 597, 635], "make_friedman2": [2, 374, 614, 616, 617, 618, 619, 620, 624, 627, 628], "make_friedman3": [2, 374], "make_gaussian_quantil": [2, 134, 136, 374, 472, 476, 477, 478, 483, 523], "make_hastie_10_2": [2, 148, 275, 374, 417, 562, 1011], "make_heatmap": 282, "make_low_rank_matrix": [2, 326, 328, 527], "make_ml_clf": 118, "make_moon": [2, 67, 79, 95, 240, 271, 306, 307, 313, 374, 993, 1042, 1046], "make_multilabel_classif": [2, 118, 248, 374, 518, 539, 791, 838, 839, 1004, 1037, 1038, 1040, 1046], "make_pipelin": [2, 43, 67, 91, 116, 139, 143, 154, 164, 165, 168, 181, 182, 186, 187, 191, 193, 200, 202, 213, 214, 219, 227, 231, 234, 240, 241, 242, 250, 251, 252, 254, 265, 268, 278, 285, 291, 300, 306, 313, 316, 317, 318, 320, 321, 322, 323, 324, 325, 353, 361, 391, 401, 411, 414, 570, 679, 681, 859, 867, 892, 893, 895, 896, 897, 898, 907, 908, 909, 910, 912, 913, 994, 1007, 1014, 1018, 1019, 1038, 1045, 1048], "make_plot": 311, "make_regress": [2, 49, 107, 193, 195, 196, 199, 216, 217, 284, 321, 327, 361, 374, 381, 391, 557, 559, 563, 568, 609, 611, 612, 638, 649, 650, 652, 654, 655, 656, 658, 663, 664, 665, 666, 667, 668, 670, 674, 682, 684, 685, 686, 688, 689, 690, 865, 908, 925, 1004, 1005, 1007], "make_s_curv": [2, 233, 238], "make_scor": [2, 52, 146, 149, 265, 275, 328, 401, 409, 414, 714, 803, 825, 829, 830, 1004, 1044, 1052], "make_sparse_coded_sign": [2, 212, 534, 540, 548, 549, 1049, 1051], "make_sparse_spd_matrix": [2, 113, 480, 532, 1052], "make_sparse_uncorrel": [2, 374], "make_spd_matrix": [2, 530], "make_subplot": 140, "make_swiss_rol": [2, 100, 237, 1049], "make_union": [2, 411, 866, 1038, 1042], "makedir": 1042, "maker": [185, 186], "makhija": 1050, "makoeppel": 1048, "maksym": 1050, "maladier": 1050, "maladi\u00e8r": [1050, 1051], "malcolm": 1043, "maldonado": [1045, 1048], "male": [103, 186, 325, 383, 880, 881, 1014], "malem": 1052, "malet": 1035, "malform": [55, 1039], "malic": [316, 375], "malic_acid": 48, "malici": 404, "malign": [168, 375, 503], "malik": [410, 454, 464, 694], "mallat": [667, 688, 689, 1000], "mallatpursuit93": [667, 688, 689], "mallow": [734, 1041], "maloo": [1043, 1044], "malt": [1048, 1049, 1050, 1052], "maltimor": 1045, "malu": 231, "malzer": 448, "mal\u00e9zieux": 1048, "mamba": 404, "mame": 1052, "mammal": 50, "mammalian": 415, "man": [415, 593, 772, 842, 846, 1002, 1004, 1006], "manag": [0, 2, 116, 254, 364, 372, 376, 379, 380, 382, 386, 390, 392, 393, 404, 417, 452, 470, 629, 905, 998, 1020, 1023, 1024, 1028, 1030, 1048, 1051], "manaileng": 1048, "manasimj": 1053, "mandal": 1045, "mandatori": [378, 418], "mandatorili": 1042, "mandera": 1038, "mandi": [1046, 1049], "mandjev": 1049, "mandyam": 1045, "mangasarian": [168, 375], "mangipudi": 1041, "manh": 1043, "manhattan": [410, 443, 447, 452, 459, 702, 765, 774, 781, 782, 783, 854, 1002, 1007, 1039, 1044, 1051], "manhattan_dist": [2, 452, 459, 691, 765, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 1035, 1045, 1050, 1051], "manhattandist": 702, "mani": [43, 46, 49, 57, 88, 89, 106, 109, 113, 134, 140, 141, 142, 147, 164, 168, 188, 213, 233, 244, 257, 264, 265, 271, 279, 283, 284, 291, 311, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 352, 361, 365, 367, 373, 375, 377, 378, 380, 391, 392, 393, 396, 404, 407, 408, 410, 411, 412, 415, 417, 418, 419, 420, 422, 506, 544, 556, 557, 560, 561, 562, 563, 567, 568, 569, 609, 612, 630, 642, 653, 657, 661, 662, 669, 670, 671, 679, 680, 681, 695, 698, 777, 781, 803, 807, 817, 864, 865, 880, 885, 887, 907, 915, 916, 917, 918, 993, 994, 996, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1017, 1019, 1021, 1022, 1023, 1024, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051], "manideep": 1053, "manifest": [386, 1001, 1007], "manifold": [2, 51, 74, 85, 100, 139, 236, 237, 238, 244, 291, 301, 320, 324, 325, 332, 371, 392, 410, 415, 417, 505, 528, 533, 547, 552, 569, 691, 692, 693, 694, 695, 696, 697, 698, 699, 856, 868, 877, 900, 936, 1007, 1025, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1052], "manimaran": [1044, 1046, 1047, 1048, 1049], "manipul": [2, 372, 406, 510, 1023, 1041], "manish": 1046, "maniteja": [1041, 1042, 1043], "mankoo": 1050, "mann": 1045, "mannbi": 1043, "manner": [43, 107, 120, 165, 187, 191, 258, 324, 325, 366, 378, 384, 410, 415, 417, 418, 712, 847, 848, 993, 1004, 1020, 1038, 1045], "mannila": 1016, "manning2008": 1004, "manoharan": [1042, 1043], "manoj": [0, 168, 400, 1038, 1039, 1040, 1041, 1042], "manraj": 1042, "mansi": 1050, "mansingh": 1049, "mansouri": 1051, "mantovani": 1050, "manu": 373, "manual": [2, 43, 80, 88, 186, 187, 189, 214, 224, 273, 291, 333, 339, 352, 354, 365, 366, 373, 378, 382, 383, 390, 391, 396, 404, 410, 414, 415, 416, 439, 451, 570, 802, 825, 857, 880, 886, 993, 998, 999, 1000, 1003, 1004, 1007, 1014, 1024, 1043, 1045, 1051, 1053], "manuel": [1035, 1039, 1043, 1044, 1047, 1048, 1053], "manufactur": [186, 417], "manvendra": [1041, 1042], "maocx": 1045, "map": [2, 23, 37, 43, 44, 49, 50, 55, 57, 63, 86, 116, 125, 138, 145, 148, 152, 170, 183, 191, 213, 231, 233, 235, 239, 247, 250, 272, 275, 280, 299, 302, 304, 310, 311, 334, 341, 345, 353, 354, 372, 373, 379, 390, 392, 401, 404, 408, 410, 411, 414, 415, 417, 418, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 499, 501, 505, 512, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 765, 768, 800, 801, 802, 803, 806, 807, 814, 815, 817, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 895, 896, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 957, 960, 961, 993, 996, 1001, 1004, 1006, 1016, 1019, 1020, 1025, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "mapd": 1004, "mape": [2, 52, 749, 1004], "mape_cv_mean": 143, "mape_cv_std": 143, "mapi": 52, "mar": 51, "marc": [1042, 1044, 1045, 1051], "march": [175, 729, 759, 1004, 1035, 1039, 1043, 1045, 1050], "marchand": 1049, "marchman": [1036, 1037], "marco": [1041, 1043, 1044, 1048, 1049, 1050, 1053], "marcofalk": 1042, "marcogorelli": [1043, 1044], "marcolini": 1048, "marcom": 1049, "marcu": [1043, 1052], "mare": 1052, "marek": [1035, 1052], "maren": [0, 368, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "margeta": 1043, "margin": [30, 43, 51, 62, 64, 136, 161, 171, 172, 173, 174, 175, 176, 183, 186, 187, 192, 223, 224, 226, 248, 250, 271, 288, 311, 314, 317, 336, 337, 339, 340, 341, 343, 345, 349, 350, 375, 408, 415, 417, 420, 515, 613, 614, 634, 648, 679, 738, 836, 884, 896, 909, 912, 1000, 1004, 1006, 1010, 1011, 1014, 1018, 1019, 1025, 1042, 1044], "marguli": 1045, "mari": [102, 1043, 1044, 1045, 1046, 1049], "maria": [168, 410, 1046, 1047, 1048, 1049, 1050], "mariam": 1047, "mariana": 1046, "mariangela": 1048, "mariano": 271, "mariel": 1046, "marielaraj": 1048, "marija": [1046, 1047, 1053], "marijn": 1047, "marin": [531, 1053], "marina": 410, "marinelm": 1044, "mario": [408, 1039, 1041, 1049, 1050, 1051], "marit": [327, 499], "mari\u00e9": [0, 368, 1044, 1045, 1046, 1047, 1048, 1049], "mark": [2, 70, 91, 118, 163, 182, 275, 282, 370, 378, 382, 386, 387, 392, 410, 538, 610, 611, 614, 635, 661, 860, 861, 902, 903, 920, 926, 941, 946, 951, 1000, 1028, 1030, 1035, 1036, 1041, 1043, 1044, 1051, 1052, 1053], "markdown": 381, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 85, 88, 91, 92, 93, 96, 97, 115, 118, 122, 140, 153, 177, 178, 191, 200, 206, 208, 210, 211, 213, 215, 216, 228, 230, 234, 256, 258, 259, 265, 266, 271, 273, 274, 275, 298, 311, 316, 332, 356, 381, 382, 418, 1043, 1045, 1046, 1051], "markeredgecolor": [82, 88, 94, 96, 97], "markeredgewidth": [111, 275], "markerfacecolor": [82, 88, 94, 96, 97], "markers": [82, 88, 91, 94, 96, 97, 146, 173, 177, 243, 265, 324], "markerstyl": 265, "market": [42, 80, 85, 149, 183, 233, 234, 410, 412, 456, 473, 474, 692, 1001, 1025, 1028], "marketplac": 1028, "markham": [1039, 1046, 1047], "markiwanchyshyn": 1043, "marko": [1035, 1044, 1045, 1051], "markou": 1048, "markov": [420, 614, 1009, 1023, 1035], "markovtsev": 1043, "marktab": 1040, "marku": [410, 452, 459, 1043, 1045, 1046, 1047], "marmo": [0, 369, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "maron": [410, 444], "marr": 186, "marr_unmarri": 186, "marreddi": 1049, "marri": 186, "marriott": 51, "marsgui": 1043, "marsh": 1046, "marshal": 375, "marsi": 1038, "marsland": 533, "marslast": 533, "marszalek": [761, 762, 1002], "mart": [51, 1045], "martel": 1049, "martha": 317, "martian": 1045, "martin": [0, 368, 724, 726, 727, 1000, 1004, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "martin1997": 1004, "martina": [1045, 1047], "martinbpr": [1040, 1041], "martinez": 1042, "martino": 1040, "martinosorb": 1040, "martinsson": [55, 538, 544, 951], "martynov": 1048, "mart\u00edn": [1048, 1049], "marufo": 1050, "marufur": 1042, "marvin": [1050, 1051], "marwaha": 1043, "marx": 1014, "maryanmorel": [1040, 1041], "marzinotto": [1043, 1044], "mar\u00eda": [1049, 1050, 1051], "mas_vnr_typ": 250, "masafumi": 1040, "masanori": [1050, 1051], "masashi": [1045, 1047], "masecchia": 1035, "mash": 418, "mask": [2, 53, 77, 99, 213, 221, 250, 269, 270, 334, 387, 392, 411, 417, 466, 471, 476, 564, 565, 584, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 632, 633, 635, 636, 652, 674, 803, 806, 807, 817, 975, 994, 1011, 1035, 1038, 1040, 1041, 1043, 1045, 1053], "mask_al": 994, "mask_false_neg": 265, "mask_false_posit": 265, "mask_missing_values_onli": 994, "mask_out": 53, "mask_test": 231, "mask_train": [187, 231], "mask_true_neg": 265, "mask_true_posit": 265, "mask_y_pr": 66, "maskani": [1043, 1045, 1046, 1047], "masked_arrai": [341, 803, 817], "masked_equ": 113, "maskedarrai": [275, 1041], "mason": 1039, "mass": [168, 251, 375, 448, 800, 1000, 1011], "massachusett": 373, "massia": [0, 1046, 1048, 1049], "massich": [1042, 1043, 1044, 1045], "massil": 1041, "masstran": 1044, "master": [51, 291, 325, 378, 1028], "masurel": 1036, "masvnrarea": [107, 154], "masvnrtyp": [143, 154], "mat": [372, 418], "match": [2, 43, 58, 72, 87, 120, 121, 123, 129, 140, 183, 191, 192, 213, 235, 243, 250, 345, 354, 373, 376, 380, 410, 415, 417, 418, 431, 451, 466, 468, 494, 511, 512, 518, 529, 534, 540, 545, 551, 554, 570, 571, 575, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 661, 667, 668, 688, 689, 702, 706, 707, 708, 716, 718, 722, 737, 781, 782, 783, 789, 847, 848, 852, 856, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 907, 914, 920, 937, 1001, 1003, 1004, 1006, 1007, 1025, 1026, 1030, 1035, 1041, 1042, 1043, 1045, 1047, 1048, 1051, 1053], "matchingdist": 702, "matchmak": 1028, "matcovici": 1045, "mate": 352, "matem\u00e1tica": 1000, "mateo": 1048, "materi": [53, 186, 327, 393, 544, 584, 897, 898], "matern": [2, 179, 420, 1046, 1050], "mateusz": [1039, 1046, 1047, 1052, 1053], "math": [82, 102, 149, 168, 250, 271, 272, 375, 396, 767], "mathbb": [120, 137, 173, 413, 1004, 1011, 1019], "mathbf": [173, 345, 415, 1000, 1004, 1008, 1009, 1018], "mathcal": [217, 348, 415, 417, 630, 699, 996, 998, 1000, 1004, 1018, 1048], "mathemat": [37, 134, 186, 200, 230, 274, 370, 375, 378, 392, 395, 410, 412, 415, 416, 420, 552, 553, 560, 567, 638, 649, 659, 795, 796, 801, 865, 909, 912, 915, 917, 1000, 1004, 1008, 1014, 1016, 1026, 1028, 1030, 1049], "matheu": 1041, "mathew": 1050, "mathi": 1048, "mathia": 1049, "mathieu": [0, 400, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "mathrm": [410, 412, 415, 419, 1000, 1020], "mathschi": 1047, "mathur": [1042, 1044, 1045, 1050, 1051, 1053], "mathurin": [0, 1046, 1048, 1049], "mathurinm": [1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matjansen": 1049, "mato": 1047, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 327, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 372, 374, 378, 385, 396, 403, 440, 505, 634, 635, 700, 701, 703, 704, 705, 809, 826, 921, 999, 1023, 1032, 1044, 1047, 1048, 1049, 1050, 1053], "matric": [2, 37, 70, 74, 75, 111, 113, 120, 218, 257, 258, 260, 261, 262, 291, 304, 321, 327, 334, 352, 353, 370, 372, 380, 381, 390, 391, 392, 410, 411, 412, 413, 415, 418, 419, 425, 452, 453, 455, 466, 475, 483, 484, 485, 486, 529, 537, 538, 541, 543, 544, 547, 550, 552, 553, 558, 559, 566, 569, 584, 585, 592, 646, 649, 650, 655, 656, 661, 667, 675, 677, 690, 757, 763, 771, 777, 781, 782, 783, 784, 795, 800, 801, 833, 851, 854, 859, 870, 874, 876, 879, 882, 884, 885, 887, 890, 892, 894, 896, 897, 898, 899, 900, 909, 910, 912, 913, 929, 951, 958, 967, 974, 976, 977, 994, 996, 998, 1001, 1002, 1003, 1005, 1007, 1008, 1016, 1018, 1019, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "matrix": [2, 8, 11, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 87, 95, 102, 110, 111, 112, 113, 115, 120, 121, 122, 130, 177, 183, 189, 192, 199, 214, 218, 241, 244, 245, 247, 261, 263, 265, 278, 308, 324, 327, 330, 331, 345, 352, 353, 354, 360, 365, 373, 374, 375, 378, 380, 384, 387, 390, 391, 392, 407, 411, 412, 413, 418, 419, 420, 421, 422, 432, 433, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 456, 459, 461, 462, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 495, 499, 500, 503, 504, 505, 506, 507, 508, 511, 512, 513, 522, 524, 526, 527, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 588, 589, 591, 592, 593, 594, 596, 597, 606, 607, 608, 609, 610, 611, 612, 614, 623, 632, 633, 634, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 715, 716, 717, 718, 719, 721, 725, 732, 733, 734, 737, 741, 742, 743, 744, 757, 758, 761, 762, 763, 764, 766, 767, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 790, 791, 795, 796, 799, 800, 801, 802, 803, 806, 807, 817, 825, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 871, 872, 873, 874, 876, 878, 879, 880, 882, 884, 885, 886, 887, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 929, 931, 932, 933, 934, 939, 948, 949, 950, 951, 952, 955, 957, 958, 966, 967, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 992, 994, 996, 998, 1000, 1001, 1005, 1006, 1007, 1008, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matrixorz": 1038, "matshow": [58, 59, 99, 166, 308, 505], "matsubara": 1004, "matt": [1038, 1039, 1040, 1045, 1046, 1050, 1051], "matteo": [1039, 1041, 1049], "matter": [129, 262, 345, 361, 410, 411, 417, 570, 671, 679, 681, 1000, 1039], "matthew": [2, 377, 383, 539, 746, 1035, 1038, 1042, 1044, 1048, 1049, 1053], "matthews_corrcoef": [2, 1004, 1035, 1041, 1042, 1049], "matthia": [1035, 1037, 1038, 1041, 1042, 1043, 1047, 1050], "matthieu": [0, 400, 1035, 1039, 1050], "matti": [1036, 1039, 1040], "matur": [378, 1023, 1024], "mat\u00e9rn": 622, "mat\u00eda": 1049, "maud": 1038, "mauna": 175, "maura": 1046, "mauroantonioserrano": 1050, "mav": 1053, "mavani": 1043, "mavroforaki": [1039, 1041], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 67, 69, 75, 79, 85, 91, 95, 100, 104, 105, 108, 110, 113, 120, 123, 127, 130, 134, 136, 142, 148, 152, 159, 160, 161, 163, 164, 168, 172, 174, 175, 182, 183, 186, 196, 200, 202, 206, 208, 215, 216, 219, 227, 229, 231, 236, 244, 248, 269, 270, 271, 282, 290, 291, 293, 297, 298, 302, 304, 306, 308, 311, 313, 314, 316, 323, 328, 333, 335, 349, 365, 410, 412, 415, 471, 472, 473, 474, 475, 476, 477, 478, 479, 515, 539, 558, 559, 560, 561, 562, 563, 566, 567, 568, 609, 630, 634, 635, 651, 652, 672, 675, 677, 683, 694, 695, 699, 702, 707, 708, 760, 795, 796, 803, 864, 865, 876, 877, 879, 886, 893, 894, 915, 916, 917, 918, 1000, 1002, 1007, 1014, 1018, 1019, 1025, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "max_": [410, 1004], "max_abs_": 876, "max_abs_scal": 1014, "max_bin": [323, 324, 417, 564, 565, 1052], "max_categori": [317, 324, 326, 880, 881, 1014, 1049, 1051], "max_cluster_s": 448, "max_column": 231, "max_degre": [882, 1048], "max_depth": [46, 67, 135, 136, 139, 142, 143, 144, 145, 146, 147, 148, 152, 153, 155, 181, 234, 268, 283, 288, 322, 323, 356, 358, 359, 360, 391, 392, 409, 417, 556, 557, 560, 561, 562, 563, 564, 565, 567, 568, 569, 714, 806, 807, 831, 915, 916, 917, 918, 919, 920, 921, 993, 1011, 1020, 1044, 1046], "max_df": [54, 272, 334, 352, 353, 591, 594, 1046, 1053], "max_dist": 244, "max_doc_update_it": 539, "max_ep": [410, 452, 457, 458, 459], "max_error": [2, 406, 1004, 1044], "max_estim": 138, "max_featur": [54, 67, 138, 148, 249, 268, 283, 322, 417, 419, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 591, 594, 600, 915, 916, 917, 918, 993, 1000, 1035, 1037, 1038, 1042, 1043, 1046, 1049, 1052], "max_features_": [562, 563, 600, 915, 916, 917, 918, 1049], "max_fpr": [791, 1004, 1043], "max_fun": [864, 865, 1045], "max_i": [248, 1006], "max_idf": 1048, "max_it": [43, 47, 52, 54, 55, 62, 64, 66, 67, 104, 105, 120, 123, 139, 140, 143, 149, 156, 159, 160, 181, 182, 186, 187, 193, 199, 205, 206, 220, 221, 222, 225, 226, 228, 233, 234, 235, 236, 238, 251, 252, 256, 257, 258, 259, 262, 284, 301, 306, 307, 308, 317, 322, 323, 324, 330, 331, 338, 352, 353, 384, 392, 417, 422, 442, 445, 449, 450, 451, 456, 461, 463, 473, 474, 480, 484, 485, 486, 534, 535, 536, 538, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 564, 565, 630, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 675, 677, 679, 680, 681, 682, 683, 685, 686, 690, 691, 692, 693, 695, 696, 697, 800, 801, 817, 856, 864, 865, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 994, 996, 1000, 1007, 1008, 1017, 1018, 1036, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "max_iter": 331, "max_iter_list": 149, "max_iter_predict": 613, "max_j": [649, 655], "max_leaf_nod": [134, 140, 148, 213, 323, 360, 417, 560, 561, 562, 563, 564, 565, 567, 568, 569, 915, 916, 917, 918, 1038, 1044, 1046], "max_n": [591, 592, 594, 1035], "max_n_alpha": [654, 658], "max_nbyt": 969, "max_no_improv": [77, 94, 97, 451, 540, 541, 542, 549, 1049, 1050], "max_patch": [83, 418, 586, 587, 1043], "max_resourc": [146, 806, 807, 993], "max_resources_": [806, 807], "max_sampl": [150, 181, 417, 558, 559, 560, 561, 566, 567, 568, 637, 1045, 1048, 1051], "max_samples_": 566, "max_skip": 674, "max_subpopul": [230, 682, 1049], "max_thread": [366, 379], "max_train_s": [43, 52, 414, 824, 1042], "max_trial": [674, 1000], "max_val": 937, "max_valu": [630, 1046, 1047], "max_x": 248, "maxabs_scal": [2, 392, 876, 1043], "maxabsscal": [2, 367, 406, 871, 892, 994, 1014, 1040, 1043, 1044, 1045, 1046, 1051, 1052], "maxent": [2, 661, 662, 1000], "maxent_du": 661, "maxi": 1050, "maxim": [115, 116, 120, 126, 130, 146, 193, 261, 262, 265, 272, 276, 280, 281, 284, 285, 301, 316, 322, 341, 345, 356, 360, 375, 392, 407, 409, 410, 413, 415, 417, 419, 420, 552, 597, 613, 614, 647, 648, 651, 672, 682, 683, 723, 803, 806, 807, 817, 876, 882, 892, 998, 1000, 1003, 1004, 1007, 1009, 1019, 1038, 1040, 1045, 1048, 1050, 1053], "maxima": 410, "maximesaur": [1050, 1051], "maximis": [159, 257, 299, 998, 1007], "maximum": [2, 43, 47, 50, 64, 69, 72, 90, 109, 110, 111, 112, 113, 122, 134, 136, 139, 140, 142, 149, 171, 173, 176, 177, 183, 192, 200, 250, 265, 281, 293, 297, 298, 304, 311, 336, 337, 339, 340, 343, 353, 356, 358, 359, 365, 373, 383, 384, 391, 392, 407, 408, 410, 412, 413, 415, 417, 418, 420, 421, 422, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 456, 459, 461, 463, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 485, 486, 501, 512, 514, 515, 516, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 586, 587, 600, 613, 630, 634, 635, 638, 640, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 677, 679, 680, 681, 682, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 719, 747, 784, 800, 803, 806, 807, 809, 817, 824, 831, 856, 863, 864, 865, 871, 872, 876, 877, 879, 882, 883, 884, 886, 895, 896, 901, 902, 903, 904, 907, 908, 912, 915, 916, 917, 918, 919, 921, 930, 937, 993, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1014, 1018, 1019, 1020, 1025, 1042, 1043, 1045, 1046, 1049, 1050, 1052], "maxin": [1045, 1046], "maxsiz": 620, "maxval": [514, 516], "maxwel": [0, 368, 1045, 1048, 1049, 1050, 1051], "maxwelllzh": 1050, "may_share_memori": 1052, "mayb": [106, 308, 392, 418, 1019, 1024], "mayer": [417, 1047, 1049, 1052, 1053], "mayer2022": 417, "mayilvahanan": 410, "mayorov": [1038, 1039, 1040, 1041], "mayur": 1043, "mazari": 1043, "mb": [47, 244, 265, 352, 354, 373, 384, 499, 909, 910, 911, 912, 913, 1019, 1025, 1031], "mbilling": 1040, "mbillingr": 1045, "mbk": [77, 97], "mbk_means_cluster_cent": 97, "mbk_means_label": 97, "mbk_means_labels_uniqu": 77, "mblondel": [372, 511], "mbnmf": 54, "mc4229": 1046, "mc_clf": 1011, "mcar": 149, "mcc": [2, 746, 1004, 1049], "mccall": 102, "mccallum": [842, 1006], "mccarthi": [0, 362, 1035, 1043], "mcclish": [280, 791], "mcconaghi": 1028, "mccullagh": 1000, "mcculloh": [1040, 1041], "mcd": [2, 51, 111, 112, 412, 471, 476], "mcdermott": [1037, 1052], "mcdonald": 51, "mcdowel": 1043, "mcfadden": 1004, "mcfee": [1040, 1041], "mcgibbon": [1037, 1038, 1041], "mcgushion": 1044, "mcinn": [410, 1041, 1042, 1043, 1045, 1046, 1051], "mcivor": [1050, 1051], "mcm": [757, 1004], "mcm_": 757, "mcmahon": 1052, "mcsherri": [729, 759, 1004], "mctiernan": [1049, 1050], "mcve": [383, 390], "md": [2, 233, 234, 235, 236, 382, 691, 695, 697, 1029, 1030, 1035, 1047, 1050], "md5": 1047, "md5_checksum": 372, "md_scale": 233, "mdarii": 1051, "mdbecker": 1028, "mdi": [141, 147, 183, 184, 189, 417, 419, 466, 499, 567, 633, 637, 833, 867, 881, 1012, 1025], "mdi_import": [188, 189], "mds_result": 697, "me": 352, "me1": 288, "me2": 288, "me3": 288, "mea": 91, "mean": [2, 43, 44, 47, 50, 52, 53, 54, 57, 61, 62, 64, 70, 71, 72, 73, 75, 77, 79, 80, 82, 83, 86, 87, 88, 93, 103, 110, 111, 112, 113, 116, 118, 120, 123, 124, 125, 127, 134, 136, 137, 140, 142, 143, 146, 147, 149, 154, 155, 156, 167, 168, 170, 175, 176, 177, 179, 181, 183, 186, 187, 194, 196, 202, 204, 206, 209, 213, 215, 219, 220, 222, 228, 229, 230, 231, 236, 238, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 256, 257, 258, 259, 261, 262, 265, 267, 268, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 302, 311, 314, 316, 317, 318, 320, 323, 326, 328, 333, 341, 344, 345, 348, 350, 351, 352, 354, 361, 365, 370, 372, 373, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 390, 391, 392, 401, 407, 408, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 433, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 461, 462, 463, 464, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 490, 504, 505, 515, 522, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 591, 592, 593, 594, 597, 600, 605, 609, 610, 611, 612, 613, 614, 616, 625, 630, 631, 633, 635, 636, 637, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 687, 691, 692, 693, 694, 695, 696, 697, 698, 707, 708, 710, 712, 715, 716, 719, 720, 727, 729, 732, 733, 734, 739, 740, 741, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 777, 781, 782, 784, 786, 787, 788, 790, 791, 793, 794, 795, 796, 798, 800, 801, 802, 803, 806, 807, 809, 817, 821, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 857, 858, 860, 861, 863, 864, 865, 866, 868, 869, 871, 872, 876, 877, 879, 883, 885, 887, 888, 893, 895, 896, 898, 900, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 929, 933, 934, 936, 977, 978, 984, 988, 993, 994, 995, 998, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1011, 1012, 1017, 1018, 1019, 1020, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mean_": [121, 275, 535, 536, 537, 542, 544, 546, 887, 1014, 1043], "mean_absolute_error": [2, 52, 213, 215, 231, 406, 1004, 1036, 1038], "mean_absolute_percentage_error": [2, 52, 143, 406, 1004, 1047, 1049], "mean_auc": 281, "mean_change_tol": 539, "mean_fit_tim": [140, 293, 803, 817], "mean_fpr": 281, "mean_gamma_devi": [2, 406, 1004, 1045], "mean_impute_scor": 182, "mean_l1_ratio": 1038, "mean_pinball_loss": [2, 52, 146, 149, 323, 1000, 1004, 1048], "mean_pinball_loss_95p": 1004, "mean_poisson_devi": [2, 213, 406, 1004, 1045], "mean_precis": 269, "mean_precision_": 800, "mean_precision_prior": [256, 262, 800], "mean_precision_prior_": 800, "mean_predict": [52, 177], "mean_predictions_gpr": 170, "mean_prior": 800, "mean_prior_": 800, "mean_recal": 269, "mean_scor": [104, 280, 283, 353, 1048], "mean_score_tim": [140, 269, 272, 803, 817], "mean_shift": [2, 1040, 1043], "mean_square_error": 1036, "mean_squared_error": [2, 46, 144, 146, 147, 209, 213, 215, 217, 219, 231, 361, 406, 417, 755, 1004, 1036, 1038, 1045, 1046, 1052], "mean_squared_log_error": [2, 406, 714, 1004, 1042, 1048, 1052], "mean_test_": 275, "mean_test_precis": [269, 275], "mean_test_recal": 269, "mean_test_scor": [103, 104, 105, 113, 140, 159, 167, 261, 270, 271, 272, 279, 282, 283, 293, 341, 474, 597, 803, 817, 993, 1041, 1048], "mean_tim": 1041, "mean_tpr": [280, 281], "mean_train_precis": [803, 817], "mean_train_scor": [803, 817, 1041], "mean_tweedie_devi": [2, 231, 406, 1004, 1045], "mean_variance_axi": [2, 387, 1041, 1048], "mean_y_pr": 175, "meaning": [72, 189, 238, 300, 328, 354, 407, 409, 414, 418, 419, 551, 732, 733, 741, 786, 787, 790, 856, 1008, 1018, 1019, 1035, 1051], "meaningfulli": [213, 1004], "meaningless": [187, 418, 909, 912, 1038], "means_": [70, 256, 257, 258, 259, 261, 262, 552, 553, 800, 801], "means_init": [258, 259, 801], "meanshift": [2, 79, 324, 410, 442, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050, 1051, 1053], "meant": [90, 149, 168, 250, 328, 373, 387, 476, 496, 680, 853, 926, 969, 970, 992, 994, 1008, 1010, 1014, 1036], "meanwhil": [390, 1019], "measur": [2, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 82, 91, 93, 94, 121, 137, 138, 146, 150, 157, 168, 170, 175, 183, 185, 186, 187, 191, 202, 207, 212, 213, 217, 219, 231, 263, 269, 271, 277, 278, 316, 345, 352, 353, 365, 373, 375, 380, 384, 392, 407, 412, 414, 415, 416, 417, 418, 451, 454, 464, 501, 518, 541, 543, 550, 554, 560, 561, 562, 563, 566, 567, 568, 607, 610, 611, 614, 630, 634, 661, 693, 695, 701, 705, 707, 708, 710, 712, 715, 716, 719, 720, 723, 728, 729, 730, 732, 734, 739, 740, 742, 743, 746, 750, 758, 759, 760, 785, 786, 787, 789, 790, 791, 792, 795, 798, 828, 830, 833, 853, 884, 896, 915, 916, 917, 918, 924, 994, 1000, 1002, 1007, 1009, 1010, 1012, 1018, 1020, 1025, 1035, 1038, 1040, 1041, 1043, 1045], "mechan": [74, 247, 349, 352, 366, 378, 380, 404, 408, 410, 418, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1002, 1020, 1028], "mecopur": 1052, "med": [57, 102, 280, 373, 1014], "meda": [107, 186, 1004], "media": [410, 1028], "median": [2, 43, 52, 72, 103, 107, 111, 112, 146, 181, 182, 186, 215, 219, 230, 242, 250, 311, 321, 323, 324, 373, 412, 417, 419, 442, 456, 460, 463, 476, 555, 557, 561, 568, 600, 630, 633, 638, 673, 674, 682, 724, 756, 854, 885, 897, 916, 918, 994, 1014, 1020, 1038, 1039], "median_absolute_error": [2, 107, 186, 1004, 1039, 1045, 1047], "median_predict": 52, "medic": [274, 414, 715, 1000, 1028], "medicin": [274, 715, 1004], "medina": [1035, 1037], "medinc": [311, 322, 373, 492], "medium": [42, 183, 246, 318, 341, 410, 646, 881, 997, 1000], "medoid": 448, "medoids_": 448, "medri": 1038, "meekail": [0, 399, 1049, 1050, 1051, 1052], "meer": [96, 410, 450], "meet": [378, 390, 393, 419, 575, 606, 864, 865, 904, 1004, 1017, 1028, 1043, 1044, 1045], "megabyt": 1049, "megasari": 1047, "meghann": [1043, 1045], "mehak": 1042, "mehdi": [1039, 1048], "mehgarg": 1050, "mehmet": [1042, 1048], "mehmetcanakbai": 1050, "mehrdad": 1049, "mehta": [1039, 1040, 1041, 1043, 1044, 1045, 1046, 1050, 1051], "mehul": 1042, "mei": [1040, 1045], "meier": 1042, "meila": 410, "mein": 418, "meinshausen": 198, "meirel": 1046, "meketon": 1042, "melani": [1028, 1042, 1043], "melderi": 1043, "melemo2": 1049, "meli": [1048, 1049, 1050], "melissa": 1043, "mellon": 902, "melnik": 1050, "melsyt": [1043, 1044], "mem": [87, 384, 511, 512, 1025], "member": [0, 352, 353, 373, 378, 381, 393, 410, 425, 444, 448, 450, 453, 455, 495, 558, 559, 560, 561, 566, 567, 568, 569, 584, 661, 662, 669, 670, 671, 679, 680, 681, 707, 708, 718, 720, 734, 739, 740, 760, 789, 798, 803, 907, 1000, 1007, 1035, 1047, 1050], "membership": [30, 89, 393, 407, 410, 514, 515, 516, 517, 518, 522, 525, 1019], "memit": 384, "memmap": [366, 373, 392, 415, 511, 537, 1043, 1052], "memoiz": [104, 373, 392], "memor": 188, "memori": [2, 47, 87, 103, 104, 124, 186, 187, 265, 293, 317, 320, 322, 324, 325, 328, 352, 353, 354, 366, 367, 372, 378, 381, 387, 390, 392, 404, 410, 411, 414, 415, 418, 421, 422, 443, 444, 445, 446, 447, 448, 449, 451, 452, 456, 459, 461, 470, 475, 481, 499, 506, 511, 512, 536, 537, 538, 541, 544, 558, 559, 560, 561, 566, 567, 568, 569, 584, 585, 591, 592, 594, 649, 650, 651, 655, 656, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 679, 680, 681, 682, 683, 684, 687, 781, 782, 783, 784, 803, 809, 817, 826, 828, 829, 830, 831, 834, 835, 836, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 867, 868, 885, 887, 897, 898, 900, 905, 907, 908, 915, 916, 917, 918, 934, 972, 988, 1000, 1006, 1007, 1014, 1016, 1017, 1019, 1020, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "memory_profil": [384, 396, 403], "memoryerror": [1043, 1047], "memoryview": 379, "memorywis": 404, "men": 375, "menes": 1050, "meng": [1035, 1036, 1039, 1041, 1042], "menoci": 1053, "menon": 408, "mensch": [1040, 1041, 1042, 1043], "mention": [88, 116, 134, 231, 285, 321, 361, 365, 378, 382, 383, 390, 410, 699, 899, 900, 993, 998, 1000, 1024, 1027, 1028, 1042, 1043, 1044], "menu": 396, "menuet": 1044, "mercer": 996, "mere": [43, 271, 392, 834, 1018], "merg": [74, 76, 80, 84, 323, 376, 378, 381, 386, 390, 393, 410, 442, 443, 444, 447, 448, 465, 823, 1035, 1042], "merit": [378, 382, 393], "meritocrat": 393, "merritt": 1041, "mersenn": 1046, "merz": 408, "mesfer": 1048, "mesh": [91, 142, 152, 172, 245, 299, 306, 313, 335, 337], "meshgrid": [50, 63, 77, 91, 111, 142, 152, 171, 172, 173, 174, 176, 187, 224, 225, 226, 227, 238, 240, 260, 297, 304, 306, 313, 314, 335, 340, 341, 345, 346, 349, 350, 634], "meshulam": 1038, "meson": [376, 381, 396, 403], "mess": 1049, "messag": [73, 79, 95, 102, 120, 247, 352, 353, 373, 376, 377, 381, 382, 383, 386, 387, 410, 442, 456, 470, 542, 546, 551, 577, 630, 715, 803, 806, 807, 809, 817, 826, 831, 834, 836, 856, 864, 865, 905, 932, 933, 934, 937, 941, 966, 987, 992, 1004, 1014, 1035, 1039, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "met": [247, 380, 419, 537, 544, 630, 674, 1000, 1004, 1043], "meta": [2, 7, 30, 31, 89, 102, 133, 157, 183, 213, 276, 280, 285, 287, 290, 326, 327, 359, 361, 372, 376, 380, 382, 390, 392, 401, 408, 419, 420, 430, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 499, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 578, 584, 585, 591, 593, 594, 600, 606, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 803, 804, 805, 810, 812, 819, 821, 825, 830, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 924, 956, 963, 992, 993, 1005, 1024, 1025, 1026, 1030, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1052], "meta_clf_sample_weight": 247, "meta_est": 247, "meta_meta_est": 247, "metaclassifi": [247, 248], "metaclassifierifittedmetaclassifi": 247, "metadata": [2, 61, 132, 183, 195, 239, 265, 328, 353, 372, 373, 404, 424, 427, 430, 433, 434, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 490, 491, 499, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 961, 962, 963, 987, 1004, 1023, 1024, 1025, 1030, 1051], "metadata_rout": [2, 247, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 961, 962, 963], "metadatarequest": [2, 247, 424, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 471, 472, 473, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 567, 568, 569, 584, 585, 586, 591, 592, 593, 594, 595, 598, 599, 601, 602, 603, 606, 613, 614, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 657, 659, 660, 661, 663, 665, 667, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 960, 962, 1052], "metadatarout": [2, 247, 439, 466, 467, 474, 558, 559, 566, 570, 571, 572, 573, 596, 597, 600, 605, 630, 650, 654, 656, 658, 662, 664, 666, 668, 674, 676, 678, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 866, 867, 904, 962, 1052], "metaestim": [2, 89, 392, 904, 924, 964, 1039, 1048, 1049, 1052], "metaestimatormixin": [2, 247], "metaireau": [1035, 1038], "metal": 406, "metaregressor": 247, "metatransfom": 1040, "meteorologi": 408, "meth_nam": 315, "method": [2, 5, 8, 14, 18, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 94, 98, 101, 104, 110, 111, 114, 116, 120, 123, 125, 128, 129, 130, 132, 134, 139, 141, 147, 154, 163, 164, 168, 181, 191, 201, 202, 214, 221, 230, 232, 234, 236, 237, 238, 240, 244, 246, 247, 248, 250, 254, 255, 258, 265, 273, 276, 278, 279, 280, 285, 288, 291, 297, 298, 300, 311, 315, 318, 320, 322, 323, 344, 352, 353, 354, 360, 361, 365, 366, 367, 370, 375, 376, 378, 379, 380, 384, 385, 387, 390, 391, 395, 401, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 427, 428, 429, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 464, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 507, 515, 517, 525, 528, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 708, 713, 714, 725, 734, 735, 738, 739, 744, 745, 766, 771, 772, 777, 781, 786, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 895, 896, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 924, 927, 936, 940, 941, 951, 959, 960, 961, 962, 963, 964, 969, 972, 987, 988, 991, 992, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1025, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "method_map": [247, 960], "method_max_it": [548, 549, 1045], "method_nam": [247, 960, 963], "methodmap": [2, 247, 960], "methodmetadatarequest": 959, "methodol": 1014, "methodolog": [414, 1027], "methodologi": [544, 880, 994, 1004, 1028], "methodpair": 961, "metric": [2, 13, 43, 45, 46, 50, 52, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 81, 82, 85, 91, 93, 97, 102, 107, 113, 134, 139, 144, 145, 147, 148, 149, 154, 165, 168, 171, 181, 183, 185, 186, 188, 198, 202, 208, 209, 213, 215, 217, 219, 231, 236, 241, 244, 245, 250, 253, 263, 264, 267, 268, 269, 271, 272, 274, 278, 280, 281, 285, 290, 291, 293, 301, 304, 309, 311, 316, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 352, 353, 361, 365, 370, 373, 378, 380, 390, 391, 392, 395, 401, 405, 408, 409, 415, 416, 417, 420, 421, 427, 439, 443, 446, 447, 448, 452, 456, 457, 458, 459, 464, 471, 523, 538, 552, 553, 554, 556, 558, 560, 561, 562, 564, 565, 567, 568, 570, 572, 581, 605, 613, 623, 631, 634, 637, 641, 642, 643, 644, 645, 646, 661, 662, 666, 669, 671, 677, 678, 679, 691, 693, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 832, 835, 836, 837, 838, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 873, 879, 902, 903, 907, 909, 912, 915, 917, 924, 994, 996, 999, 1001, 1005, 1007, 1010, 1012, 1023, 1024, 1025, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "metric_kwarg": [782, 783], "metric_obj": 702, "metric_param": [421, 446, 448, 452, 457, 458, 459, 691, 695, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 1039, 1042, 1049], "metsi": [842, 1006], "metzen": [0, 399, 1035, 1038, 1039, 1040, 1041], "mexican": 129, "meyer89": 1046, "mferrari3": [1043, 1044], "mgrid": [53, 161], "mhg": 1040, "mi": [64, 72, 163, 410, 610, 611, 707, 758, 760, 994, 1004, 1018], "mia": 1050, "miao": 1048, "mib": [365, 470, 905], "mic": [888, 1014], "micah": 1045, "micci": [888, 1014], "mice": [372, 630, 994], "miceprotein": 372, "michael": [375, 408, 410, 452, 631, 640, 694, 800, 994, 1000, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1052, 1053], "michal": [1039, 1042, 1048, 1049], "michali": 410, "michalkrawczyk": [1048, 1049], "micha\u0142": 1046, "micha\u0142owski": 1044, "michel": [0, 400, 1035, 1037, 1038, 1040, 1042, 1049, 1050], "michelbach": 1039, "michiaki": 1041, "micka\u00ebl": [1043, 1044], "micky774": [1049, 1050], "micro": [49, 304, 334, 365, 382, 710, 716, 732, 733, 741, 786, 787, 790, 791, 1004, 1035, 1043, 1044, 1050, 1053], "micro_roc_auc_ovr": 280, "microarrai": [407, 453, 516, 631, 994], "microcontrol": 1023, "microphon": 121, "microryzomi": [50, 304, 373, 501], "microryzomys_minutu": 501, "microryzomys_minutus_0": 50, "microsoft": [0, 51, 376, 379, 396], "mid": [63, 341, 1004, 1006], "middl": [43, 61, 70, 93, 125, 198, 349, 375, 1011, 1014], "mideast": [57, 373], "midina": 1042, "midnight": 43, "midpoint": 341, "midpointnorm": 341, "midvidi": 1048, "midwest": [168, 375], "might": [0, 43, 44, 52, 67, 77, 79, 93, 95, 102, 142, 149, 152, 165, 176, 182, 186, 187, 188, 191, 213, 231, 240, 265, 271, 273, 285, 294, 307, 322, 328, 345, 350, 361, 365, 366, 372, 376, 378, 379, 380, 382, 383, 384, 386, 390, 392, 393, 396, 404, 408, 409, 411, 414, 415, 416, 417, 418, 420, 435, 445, 490, 499, 504, 506, 511, 518, 526, 539, 558, 559, 560, 564, 565, 567, 582, 583, 585, 613, 614, 630, 653, 657, 658, 659, 661, 662, 679, 681, 695, 760, 797, 805, 806, 807, 820, 823, 831, 856, 872, 887, 900, 919, 921, 923, 925, 929, 933, 934, 951, 972, 993, 994, 996, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1011, 1012, 1014, 1019, 1020, 1036, 1038, 1043, 1044, 1046, 1049, 1050, 1051, 1052], "mignon": [1035, 1038, 1039, 1042], "migrat": [378, 1035], "miguel": [1045, 1053], "miguelbarao": 1045, "miguelcsilva": 1053, "mihael": [410, 452, 459], "mihevc": 1045, "mike": 1042, "mikebenfield": 1042, "miketip": [537, 544], "mikhail": [1036, 1037, 1038, 1041, 1042, 1050, 1051], "miki": [1052, 1053], "mikulski": 1046, "milajev": 1039, "milan": 1047, "milana2": 1049, "mileag": 365, "milen": 1042, "mileston": 382, "militari": 102, "mill": 1045, "millawel": 1049, "miller": [373, 1043, 1044, 1048], "million": [77, 89, 175, 191, 418, 695, 1001, 1019, 1028, 1049, 1050], "millman": [0, 400, 1044, 1051, 1052], "milman": 1043, "miln": 373, "miltenberg": 1050, "milton": 1052, "milutinov": 1044, "mimic": [181, 213, 352, 821], "mimicri": 352, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 85, 91, 107, 120, 123, 134, 136, 142, 145, 146, 152, 161, 168, 172, 174, 175, 176, 182, 186, 196, 200, 202, 208, 215, 216, 219, 234, 244, 245, 248, 290, 297, 298, 304, 306, 308, 311, 313, 314, 316, 328, 335, 349, 387, 410, 413, 415, 484, 485, 487, 515, 537, 538, 541, 543, 544, 552, 553, 566, 630, 634, 635, 657, 658, 659, 660, 685, 686, 707, 760, 783, 806, 807, 856, 864, 865, 877, 886, 893, 951, 968, 995, 1000, 1004, 1007, 1014, 1041, 1044, 1046, 1047, 1050], "min_": [323, 410, 417, 877, 1000, 1014, 1018, 1019, 1020], "min_arg": 52, "min_batch_s": 954, "min_bin_freq": [450, 463], "min_c": 1006, "min_categori": [843, 1047], "min_cluster_s": [79, 98, 326, 410, 448, 452, 458, 1044], "min_degre": [882, 1048], "min_df": [54, 57, 102, 272, 334, 352, 353, 418, 591, 594, 1035, 1037, 1046, 1053], "min_dist": 244, "min_estim": 138, "min_faces_per_person": [45, 373, 497], "min_features_to_select": [167, 597, 1043], "min_frequ": [324, 326, 880, 881, 1014, 1049, 1051], "min_grad_norm": [695, 1041], "min_i": 248, "min_idf": 1048, "min_impurity_decreas": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918, 1020, 1042], "min_impurity_split": 1042, "min_max_axi": 1044, "min_max_scal": 1014, "min_n": [591, 592, 594, 1035], "min_n_compon": 244, "min_po": [2, 387], "min_resourc": [146, 806, 807, 993], "min_resources_": [806, 807], "min_sampl": [79, 82, 98, 390, 392, 410, 421, 446, 448, 452, 457, 458, 459, 674, 1000, 1044, 1048], "min_sample_split": 1050, "min_samples_leaf": [140, 145, 146, 188, 320, 323, 356, 417, 560, 561, 562, 563, 564, 565, 567, 568, 569, 915, 916, 917, 918, 1020, 1041], "min_samples_split": [146, 147, 148, 275, 283, 312, 322, 417, 560, 561, 562, 563, 567, 568, 569, 806, 807, 915, 916, 917, 918, 993, 1020, 1041], "min_val": [930, 937], "min_valu": [630, 1046, 1047], "min_w": 1000, "min_weight_fraction_leaf": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918, 1020, 1038, 1041, 1042], "min_x": 248, "mina": [1045, 1046], "mincovdet": [2, 111, 112, 412, 471, 472, 475, 477, 478, 1010, 1035, 1042], "mind": [125, 149, 185, 186, 187, 231, 315, 316, 352, 353, 361, 378, 404, 412, 414, 417, 649, 650, 707, 1000, 1019, 1023], "minden": [410, 454, 464], "mine": [0, 271, 353, 373, 410, 421, 446, 514, 566, 723, 737, 743, 786, 1000, 1004, 1010, 1016], "ming": [566, 1010, 1039, 1043, 1044, 1045, 1049], "minghui": [1042, 1043], "mingw": 1038, "minh": 1043, "mini": [2, 47, 97, 120, 324, 367, 392, 418, 442, 444, 449, 451, 453, 455, 534, 536, 539, 540, 541, 542, 543, 545, 546, 548, 549, 1008, 1009, 1035, 1046, 1048], "mini_batch": [453, 455], "minibatch": [47, 79, 410, 415, 451, 537, 679, 863, 864, 865, 1035], "minibatch_iter": 47, "minibatch_kmean": 353, "minibatch_s": [47, 367], "minibatchdictionarylearn": [2, 120, 123, 367, 415, 534, 541, 545, 548, 549, 1036, 1038, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "minibatchkmean": [2, 57, 71, 73, 78, 79, 83, 91, 92, 94, 96, 183, 353, 367, 410, 415, 442, 444, 449, 515, 782, 1025, 1036, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "minibatchnmf": [2, 54, 367, 415, 1049, 1051, 1052, 1053], "minibatchsparsepca": [2, 534, 536, 540, 543, 545, 546, 548, 549, 1035, 1036, 1046, 1048, 1049, 1050, 1051, 1052], "miniforg": [376, 386, 396, 397], "miniforge3": [376, 386], "minim": [2, 43, 51, 52, 64, 90, 99, 109, 110, 146, 170, 178, 193, 209, 211, 213, 215, 217, 221, 231, 233, 243, 244, 256, 261, 265, 272, 280, 281, 311, 320, 323, 338, 345, 348, 356, 377, 378, 381, 386, 390, 392, 404, 408, 410, 412, 415, 417, 442, 443, 447, 448, 452, 465, 541, 543, 550, 560, 561, 562, 563, 567, 568, 612, 613, 614, 644, 649, 652, 660, 661, 670, 674, 675, 677, 681, 682, 690, 695, 697, 698, 751, 783, 854, 856, 865, 883, 895, 901, 915, 916, 917, 918, 1000, 1001, 1004, 1007, 1008, 1014, 1016, 1017, 1018, 1019, 1023, 1026, 1030, 1039, 1044, 1045], "minima": [176, 200, 415, 449, 695, 1001, 1043], "minimal_reproduc": 386, "minimalist": [383, 418, 1027], "minimis": [52, 270, 410, 414, 661, 662, 1020], "minimum": [2, 48, 88, 90, 111, 146, 147, 149, 167, 202, 223, 244, 250, 281, 297, 298, 380, 387, 396, 403, 407, 410, 417, 418, 443, 447, 448, 452, 456, 458, 471, 472, 475, 476, 477, 478, 514, 516, 544, 555, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 597, 630, 634, 635, 638, 640, 671, 674, 679, 681, 682, 685, 686, 695, 708, 728, 782, 783, 806, 807, 828, 843, 864, 865, 876, 877, 880, 881, 882, 886, 900, 901, 914, 915, 916, 917, 918, 930, 933, 934, 937, 954, 1001, 1004, 1008, 1010, 1014, 1016, 1020, 1035, 1038, 1042, 1043, 1047, 1048, 1052], "minimum_cluster_s": 410, "minka": [127, 544, 1000], "minknowski": 1048, "minkowski": [421, 446, 452, 457, 458, 459, 691, 702, 781, 782, 783, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 1007, 1035, 1038, 1049, 1050, 1051], "minkowski_dist": [452, 459, 691, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861], "minkowskidist": [702, 1048], "minmax_scal": [2, 309, 311, 877, 1040, 1043], "minmaxscal": [2, 43, 44, 104, 164, 166, 191, 234, 250, 307, 322, 367, 406, 411, 466, 893, 994, 1014, 1037, 1040, 1043, 1045, 1046, 1047, 1051, 1052], "minmaxscalerminmaxscal": 104, "minnesota": 410, "minor": [250, 265, 274, 278, 373, 382, 393, 499, 1004, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "minu": [271, 763, 1004], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 373, 378, 1001, 1022], "minutu": [50, 304, 373, 501], "minval": [514, 516], "minwoo": 1035, "minyushkin": 1041, "miola": 1050, "miott": [1035, 1038], "miotto": 1046, "mir": 418, "miroslav": [1036, 1037, 1040], "mirror": [844, 993], "mirza": 1048, "misa": 1050, "misc": [57, 86, 123, 272, 334, 352, 353, 354, 373], "misc_featur": 250, "miscalibr": 64, "miscellan": [371, 372, 1025, 1041, 1042, 1049, 1050, 1052, 1053, 1054], "miscfeatur": 154, "misclassif": [46, 134, 265, 345, 799, 1018, 1019, 1020, 1036], "misclassifi": [70, 134, 264, 265, 345, 352, 1019], "misclassification_error": 134, "misdetect": 1052, "mish": 418, "mishra": [1047, 1048], "mislabel": [264, 417, 1006], "mislead": [72, 141, 147, 186, 379, 395, 417, 556, 557, 560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918, 1030, 1048], "mismatch": [79, 1003, 1044], "misread": 238, "miss": [2, 20, 103, 154, 168, 188, 242, 252, 265, 271, 291, 321, 325, 328, 361, 365, 370, 373, 375, 377, 378, 383, 392, 406, 409, 410, 411, 412, 448, 474, 492, 499, 501, 504, 560, 561, 564, 565, 567, 568, 569, 630, 631, 632, 633, 642, 648, 675, 693, 697, 730, 772, 829, 850, 868, 876, 877, 881, 883, 884, 887, 888, 892, 895, 896, 898, 915, 916, 917, 918, 924, 1000, 1001, 1004, 1023, 1024, 1025, 1026, 1028, 1030, 1037, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "missclassif": 134, "missforest": [181, 994], "missing": [149, 417, 630, 631, 633, 1044], "missing_featur": [181, 182], "missing_fract": 149, "missing_fraction_list": 149, "missing_r": 182, "missing_sampl": [181, 182], "missing_valu": [181, 182, 252, 392, 630, 631, 632, 633, 772, 994, 1043, 1044], "missingind": [2, 630, 631, 633, 994, 1043, 1044, 1045, 1049, 1051], "mission": [0, 353, 1028], "misspecifi": 64, "misspel": 418, "mistak": [134, 165, 285, 331, 361, 410, 414, 738, 878, 892, 893, 895, 896, 897, 898, 1000, 1005], "misti": [43, 187], "mit": [288, 373, 384, 410, 420, 613, 614, 617, 622, 625, 646, 669, 670, 679, 844, 997], "mitar": 1044, "mitig": [64, 88, 149, 188, 318, 366, 367, 1001, 1020, 1047], "mitra": [1045, 1046, 1050], "mitrov": 1044, "mitzi": [1048, 1049], "miwojc": 1049, "mix": [2, 43, 95, 101, 102, 121, 122, 143, 183, 186, 213, 242, 252, 254, 272, 311, 317, 372, 380, 390, 392, 411, 415, 422, 466, 468, 469, 499, 536, 541, 543, 550, 603, 607, 633, 649, 650, 655, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 803, 817, 833, 867, 880, 881, 887, 888, 967, 974, 977, 1000, 1009, 1025, 1047, 1049, 1050], "mixed_encoded_preprocessor": 317, "mixed_pip": 317, "mixed_target": 317, "mixin": [2, 378, 392, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 604, 945, 1037, 1046, 1050], "mixing_": [121, 122, 536], "mixtur": [2, 46, 48, 70, 79, 88, 90, 98, 118, 173, 182, 200, 258, 259, 282, 301, 327, 373, 374, 392, 410, 415, 416, 420, 626, 800, 801, 803, 1024, 1025, 1029, 1030, 1035, 1039, 1040, 1041, 1042], "mizil": [62, 64, 408, 439, 441], "mizuki": 1049, "mk": 1020, "mkdir": [47, 384, 386], "mkdtemp": [87, 411], "mkl": [365, 366, 376, 386, 390, 1035], "mkl_num_thread": 366, "mksol": 102, "ml": [47, 168, 288, 372, 375, 383, 503, 505, 513, 1000, 1002, 1023, 1024, 1028], "ml_map": 398, "mlant": 1049, "mlb": [373, 878], "mlc": 375, "mlcomp": 1035, "mld": 47, "mldata": [1035, 1043], "mle": [111, 127, 544, 1043, 1046], "mlewis1729": 1042, "mlflow": 1023, "mlg": 1039, "mlinari\u0107": 1050, "mline": [48, 111, 227, 297, 340, 343], "mljar": 1023, "mlle": [692, 696, 1001], "mlliou112": 1042, "mlo": 175, "mlondschien": 1048, "mlop": 1023, "mlp": [183, 187, 251, 305, 307, 499, 833, 864, 865, 1008, 1025], "mlp_disp": 251, "mlp_model": 187, "mlp_preprocessor": 187, "mlpclassifi": [2, 67, 148, 160, 183, 305, 306, 308, 367, 505, 507, 517, 525, 863, 865, 877, 1005, 1008, 1025, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mlpregressor": [2, 43, 187, 251, 367, 863, 864, 1008, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mlpregressormlpregressor": 251, "mlxtend": 1023, "mm": 191, "mm_bunch": 50, "mmap_mod": [404, 969], "mmm": 51, "mmse": [110, 412, 423, 477], "mn193": 1052, "mnb": 1006, "mnist": [183, 192, 204, 206, 221, 228, 291, 305, 307, 499, 661, 833, 864, 887, 936, 1000, 1008, 1025], "mnist_10000": 291, "mnist_20000": 291, "mnist_784": [221, 229, 291, 308], "mo": [325, 1046], "mobil": 386, "mock": 1045, "mockdatafram": 1045, "modal": [2, 240, 476, 953], "mode": [2, 48, 49, 80, 81, 111, 213, 240, 291, 293, 309, 320, 376, 378, 382, 386, 387, 390, 407, 413, 417, 421, 445, 446, 449, 451, 454, 461, 464, 473, 474, 480, 484, 489, 511, 512, 560, 564, 567, 595, 598, 599, 601, 602, 603, 613, 630, 647, 648, 661, 662, 669, 671, 676, 677, 678, 679, 682, 685, 686, 692, 696, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 863, 907, 909, 912, 915, 917, 939, 950, 951, 953, 1007, 1010, 1023, 1036, 1044, 1049, 1052], "model": [2, 7, 8, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 64, 70, 74, 75, 76, 82, 87, 88, 89, 91, 94, 101, 103, 104, 105, 109, 113, 116, 119, 120, 129, 130, 133, 134, 135, 137, 139, 142, 145, 146, 148, 149, 151, 153, 154, 157, 159, 161, 162, 164, 165, 173, 174, 176, 177, 178, 179, 182, 184, 185, 189, 194, 196, 199, 201, 203, 204, 206, 208, 209, 210, 214, 215, 217, 218, 219, 221, 225, 226, 228, 229, 230, 240, 243, 248, 256, 258, 259, 260, 264, 266, 267, 269, 272, 274, 275, 276, 277, 279, 280, 285, 286, 288, 291, 293, 294, 295, 297, 300, 304, 312, 315, 317, 318, 320, 322, 324, 325, 326, 328, 330, 331, 338, 340, 341, 342, 343, 344, 346, 348, 350, 353, 354, 357, 358, 359, 361, 370, 372, 373, 381, 384, 392, 395, 401, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 429, 433, 435, 439, 444, 451, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 490, 491, 492, 499, 501, 503, 504, 505, 506, 512, 525, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 591, 592, 596, 597, 600, 605, 609, 612, 613, 614, 618, 630, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 704, 709, 714, 724, 725, 726, 727, 737, 738, 744, 753, 756, 788, 791, 792, 795, 800, 801, 802, 803, 806, 807, 808, 809, 817, 818, 819, 820, 824, 825, 826, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 852, 853, 854, 856, 858, 863, 864, 865, 867, 868, 870, 872, 874, 879, 880, 882, 883, 884, 886, 887, 888, 892, 893, 895, 896, 897, 898, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 987, 994, 996, 997, 998, 1001, 1002, 1005, 1007, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040], "model_1": 271, "model_1_scor": 271, "model_2": 271, "model_2_scor": 271, "model__estimator__max_depth": 993, "model_coef": 185, "model_color": 347, "model_detail": 142, "model_displai": 139, "model_fixed_threshold": 265, "model_from_prevision_vers": 404, "model_i": 271, "model_i_scor": 271, "model_idx": 250, "model_k": 271, "model_k_scor": 271, "model_l1": 348, "model_l2": 348, "model_nam": [140, 250, 290], "model_no_cf": 318, "model_param": 228, "model_prop": 43, "model_scor": [271, 290], "model_select": [2, 43, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 87, 103, 104, 105, 106, 107, 109, 116, 125, 127, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 159, 164, 165, 167, 170, 181, 182, 183, 185, 186, 188, 189, 191, 198, 208, 213, 215, 220, 221, 228, 229, 231, 241, 246, 247, 250, 252, 253, 254, 258, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 293, 294, 295, 299, 300, 306, 308, 309, 313, 315, 316, 317, 318, 320, 321, 322, 325, 326, 327, 328, 333, 334, 341, 344, 348, 356, 360, 361, 378, 380, 383, 391, 392, 401, 406, 409, 411, 414, 417, 439, 440, 561, 563, 570, 571, 582, 662, 700, 701, 703, 705, 745, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 856, 864, 865, 867, 915, 916, 917, 918, 993, 994, 999, 1004, 1006, 1007, 1012, 1014, 1019, 1024, 1025, 1032, 1039, 1041, 1042], "model_selection_tut": 159, "model_step": 43, "model_titl": 142, "model_with_cf": 318, "moder": [271, 378, 420, 456, 1010], "modern": [43, 149, 418, 470, 506, 593, 693, 697, 733, 905, 1001, 1023, 1024, 1051], "modif": [378, 413, 417, 418, 448, 1017, 1052, 1053], "modifi": [107, 198, 223, 233, 234, 235, 247, 250, 326, 350, 378, 380, 392, 407, 410, 417, 420, 445, 449, 456, 461, 470, 484, 485, 486, 487, 498, 513, 584, 613, 614, 616, 622, 679, 681, 692, 696, 722, 732, 733, 771, 786, 787, 790, 931, 985, 986, 1000, 1017, 1018, 1024, 1029, 1030, 1035, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050], "modified_fil": 378, "modified_hub": [46, 679, 1018], "modified_huber_loss": 223, "modified_tol": [692, 696], "modrak": [1050, 1051], "modroiu": 1004, "modul": [7, 11, 16, 30, 31, 71, 72, 82, 86, 108, 114, 117, 119, 120, 133, 162, 169, 180, 183, 184, 190, 192, 228, 232, 233, 255, 263, 287, 288, 289, 292, 305, 307, 308, 310, 329, 336, 351, 355, 358, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 390, 392, 395, 396, 404, 408, 410, 413, 417, 418, 419, 421, 446, 506, 538, 582, 583, 662, 943, 993, 998, 1000, 1002, 1004, 1005, 1008, 1010, 1011, 1014, 1016, 1018, 1020, 1021, 1028, 1036, 1037, 1038, 1040, 1041, 1045, 1049], "modulo": [418, 1046], "moeller": 1041, "mogavero": 1045, "moham": [1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "mohamedbsh": 1050, "mohammad": [1043, 1044], "mohit": [1049, 1052], "mohn": [1043, 1047], "mohr": 1041, "moin": 1047, "mois\u00e9": 1016, "moitra": [1035, 1036, 1037], "mojca": 1046, "mojdeh": 1052, "mola": [1046, 1052], "molden": 1037, "molecul": 1001, "molin": 1050, "molla": [1036, 1037], "molnar": [187, 1011], "moment": [365, 415, 420, 442, 618, 626, 864, 865, 967, 1008, 1009], "momentum": [307, 864, 865, 1008], "mon": [43, 149, 187], "mona": [169, 177, 183, 420, 499, 614, 618, 625, 626, 628, 1025], "monaf": 1050, "monei": [0, 231, 1028], "monitor": [144, 198, 221, 381, 392, 556, 557, 562, 563, 564, 565, 1008, 1027, 1038, 1043, 1045, 1047], "mono": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687], "monografia": 1000, "monomi": 214, "monotoinc": 321, "monoton": [2, 22, 43, 62, 133, 183, 187, 231, 243, 251, 321, 408, 560, 561, 562, 563, 564, 565, 567, 568, 635, 638, 639, 697, 709, 883, 895, 909, 912, 915, 916, 917, 918, 1001, 1005, 1014, 1019, 1025, 1042, 1046, 1050, 1052], "monotonic_cst": [149, 151, 321, 323, 327, 417, 560, 561, 564, 565, 567, 568, 915, 916, 917, 918, 1050, 1053], "mont": [245, 420, 614, 644, 645, 996, 1009], "montecchio": 1039, "montesel": 1053, "month": [0, 43, 175, 187, 317, 373, 378, 382, 393, 1035], "month_co": 43, "month_sin": 43, "monthli": [175, 393, 1004], "montoya": 1042, "montreal": 325, "moodi": 1040, "moon": [271, 307, 313, 352, 353, 525], "moonkyung94": 1049, "moor": [0, 738, 1004, 1028, 1052], "moosmann": 569, "moradizadeh": 1049, "morai": 1053, "moral": [57, 352, 661, 1043, 1047, 1048, 1053], "morawiec": [1042, 1043], "more": [0, 2, 11, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 66, 67, 72, 74, 75, 78, 79, 80, 82, 85, 86, 88, 90, 93, 100, 107, 111, 118, 120, 123, 127, 134, 135, 137, 140, 141, 143, 145, 146, 147, 148, 149, 150, 154, 166, 168, 170, 176, 179, 182, 183, 186, 187, 189, 191, 193, 194, 198, 199, 202, 204, 207, 211, 213, 214, 215, 217, 228, 229, 230, 231, 233, 237, 240, 245, 246, 247, 248, 250, 252, 256, 258, 259, 261, 262, 264, 265, 269, 271, 272, 273, 274, 278, 280, 285, 288, 290, 291, 293, 294, 301, 306, 307, 309, 311, 312, 313, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 331, 338, 341, 345, 346, 348, 350, 352, 353, 354, 356, 357, 360, 361, 365, 366, 367, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 391, 392, 393, 396, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 433, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 923, 925, 926, 947, 949, 951, 953, 966, 969, 987, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "moreau": [1041, 1042, 1043, 1044, 1045], "moreov": [159, 176, 313, 324, 361, 410, 414, 420, 900, 973, 1004, 1012, 1028, 1043, 1049, 1050], "moreyra": 1048, "morgan": [1016, 1020], "mori": 1050, "morikko": 1042, "morina": 1048, "moritz": [1048, 1050], "morn": 43, "moroz": 1041, "morril": 1035, "mors": 1046, "moslei": 1004, "mosley2013": 1004, "mosold": 154, "most": [2, 11, 43, 45, 47, 51, 53, 57, 61, 64, 85, 86, 88, 95, 109, 115, 116, 126, 128, 134, 140, 141, 147, 149, 154, 163, 164, 165, 167, 168, 175, 182, 185, 186, 187, 188, 189, 191, 198, 213, 214, 231, 247, 251, 256, 262, 265, 268, 269, 274, 278, 279, 281, 285, 288, 290, 300, 311, 317, 318, 320, 323, 326, 328, 331, 341, 345, 352, 353, 354, 361, 365, 366, 367, 373, 374, 376, 378, 379, 380, 382, 383, 384, 386, 390, 392, 393, 396, 401, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 445, 446, 448, 452, 458, 459, 462, 470, 499, 506, 524, 527, 535, 537, 542, 546, 552, 554, 564, 565, 569, 570, 591, 592, 594, 596, 607, 614, 630, 633, 652, 661, 675, 677, 679, 681, 690, 691, 695, 698, 728, 731, 761, 762, 766, 788, 797, 800, 801, 806, 807, 822, 835, 836, 849, 850, 851, 853, 855, 856, 857, 858, 859, 882, 884, 892, 893, 895, 896, 897, 898, 905, 924, 950, 951, 953, 966, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1052], "most_common": 57, "most_frequ": [274, 554, 630, 633, 857, 994, 1004, 1043, 1045, 1047], "mostli": [0, 2, 80, 102, 213, 231, 316, 380, 386, 390, 392, 415, 417, 418, 524, 782, 783, 1019, 1023, 1028, 1043, 1044, 1045, 1051], "mother": 1001, "motiv": [129, 378, 380, 392, 996, 1004, 1014, 1028, 1048], "motmoti": 1045, "motoda": 410, "motor": 231, "motorcycl": [57, 373], "mottl": [1043, 1044], "moudgalya": [1051, 1052], "moufad": 1050, "moulavi": [410, 448], "mount": 386, "mountain": 1043, "mountford": [1051, 1052], "mous": 372, "mouseid": 372, "moussa": 1041, "move": [64, 142, 272, 309, 341, 377, 378, 384, 408, 410, 552, 553, 574, 575, 576, 578, 580, 581, 945, 946, 970, 1035, 1036, 1040, 1043, 1045, 1048, 1049], "moveabl": 411, "movelikeriv": 1044, "movement": 373, "movi": 418, "movie_entri": 418, "moya": 1047, "mp": 1000, "mpce": 57, "mpl": [70, 256, 257, 258, 262, 311], "mpl_toolkit": [50, 100, 126, 187, 210, 233, 235, 304], "mplot3d": [100, 126, 187, 210, 233, 235], "mpoemsl": 1049, "mppca": [537, 544], "mprun": 384, "mpy": 418, "mr": [325, 1036, 1039, 1049], "mrandrewandrad": 1041, "mrastgoo": [1050, 1052], "mrg": 386, "mridul": 1041, "mrinal": 1049, "mrinaltyagi": 1049, "mrl09": 415, "mrmjauh": 1042, "mro": [380, 427, 433, 1045, 1046], "mrs2008": 593, "msabati": 1049, "msc": 375, "mschaffenroth": 1045, "mse": [44, 46, 109, 110, 144, 146, 147, 181, 182, 213, 215, 217, 219, 286, 327, 650, 656, 1004, 1020, 1046, 1048], "mse_path_": [202, 650, 654, 656, 658, 664, 666], "mse_valu": 46, "mses_california": 182, "mses_diabet": 182, "msft": 51, "msg": [291, 987], "msle": 1004, "msm": [168, 375], "mssubclass": 154, "mst": 410, "msvc": 1038, "msvcp140": 1049, "mt19937": [278, 283, 936, 1046], "mthorrel": [1042, 1045], "mtrand": 361, "mtse": 682, "mu": [54, 111, 112, 271, 415, 423, 475, 477, 478, 481, 482, 483, 543, 550, 998, 1000, 1042, 1045], "mu_i": 1006, "mu_j": 410, "mu_k": 998, "muayyad": 1043, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 88, 111, 113, 118, 123, 129, 139, 146, 147, 154, 155, 156, 170, 181, 182, 186, 187, 188, 189, 191, 210, 211, 215, 244, 247, 250, 265, 271, 273, 274, 277, 282, 284, 308, 312, 316, 317, 318, 322, 323, 325, 341, 346, 352, 353, 361, 365, 366, 367, 373, 378, 379, 380, 383, 386, 390, 391, 396, 404, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 449, 450, 499, 537, 538, 539, 541, 562, 563, 564, 565, 661, 662, 669, 670, 671, 679, 680, 681, 695, 782, 783, 806, 807, 821, 882, 900, 907, 993, 996, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1012, 1016, 1017, 1019, 1020, 1024, 1028, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "mudd": 1048, "mueller": [0, 399, 1028, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "muhammad": [1043, 1044, 1048], "mukherje": 1046, "mula": 1047, "multi": [2, 50, 67, 124, 133, 135, 142, 152, 155, 157, 161, 172, 174, 183, 192, 198, 199, 202, 205, 212, 220, 229, 232, 235, 239, 240, 248, 251, 263, 268, 280, 290, 305, 312, 313, 314, 320, 325, 335, 346, 352, 355, 356, 357, 358, 360, 366, 373, 375, 381, 387, 392, 396, 410, 417, 418, 420, 427, 439, 454, 464, 471, 476, 498, 499, 507, 508, 513, 517, 518, 522, 523, 525, 544, 552, 553, 554, 556, 558, 560, 561, 562, 564, 567, 568, 570, 572, 613, 634, 636, 646, 649, 650, 655, 656, 660, 661, 663, 664, 665, 666, 669, 671, 675, 676, 677, 678, 679, 684, 687, 693, 706, 716, 723, 737, 743, 745, 786, 802, 803, 817, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 855, 857, 863, 864, 865, 868, 874, 887, 891, 902, 903, 907, 909, 912, 915, 916, 917, 919, 920, 921, 923, 927, 933, 936, 939, 993, 1005, 1007, 1011, 1014, 1018, 1023, 1024, 1025, 1026, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "multi_class": [205, 280, 320, 613, 661, 662, 791, 907, 923, 1000, 1005, 1019, 1035, 1039, 1043, 1048, 1050, 1053], "multi_confus": 757, "multi_label": [923, 925], "multi_layer_regressor": 417, "multi_output": [387, 927, 933, 992], "multi_target_forest": 1005, "multialign": 283, "multiarch": 386, "multiclass": [2, 31, 63, 66, 140, 192, 205, 229, 241, 248, 250, 253, 263, 268, 276, 278, 281, 290, 309, 338, 349, 373, 374, 380, 381, 383, 392, 401, 410, 417, 439, 454, 464, 491, 499, 507, 560, 562, 564, 567, 570, 571, 597, 605, 613, 634, 635, 636, 661, 662, 669, 671, 676, 677, 678, 679, 705, 709, 711, 732, 733, 737, 738, 741, 746, 757, 786, 787, 790, 791, 792, 797, 803, 804, 806, 807, 808, 809, 817, 819, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 874, 888, 907, 909, 912, 915, 917, 965, 966, 967, 998, 1000, 1014, 1015, 1019, 1020, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1052], "multicollinear": [141, 147, 183, 184, 188, 277, 333, 413, 503, 567, 637, 658, 833, 1000, 1012, 1025], "multicor": [1047, 1048], "multidimension": [2, 413, 691, 693, 695, 697, 1001, 1007], "multigrid": 464, "multiindex": 1049, "multilabel": [2, 30, 31, 115, 117, 183, 239, 278, 288, 289, 333, 373, 380, 381, 392, 405, 484, 489, 499, 500, 511, 512, 518, 526, 544, 560, 567, 570, 661, 677, 678, 706, 710, 716, 729, 732, 733, 737, 738, 741, 742, 757, 759, 786, 787, 790, 791, 797, 799, 833, 836, 838, 840, 864, 871, 874, 878, 880, 891, 912, 915, 917, 925, 939, 965, 966, 967, 1015, 1025, 1026, 1030, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "multilabel_": [836, 1040], "multilabel_confusion_matrix": [2, 716, 732, 733, 741, 787, 790, 1004, 1044], "multilabelbinar": [2, 392, 836, 871, 880, 1005, 1038, 1040, 1041, 1043, 1044], "multilay": [390, 1002], "multilearn": 1023, "multimetr": [714, 993, 1045, 1050], "multimetric_": [803, 806, 807, 817], "multimod": 240, "multinomi": [2, 47, 66, 183, 192, 204, 206, 222, 228, 248, 266, 280, 308, 349, 373, 374, 378, 415, 417, 499, 515, 526, 554, 556, 562, 564, 634, 661, 662, 744, 833, 836, 842, 843, 844, 845, 846, 887, 936, 1004, 1020, 1025, 1026, 1030, 1035, 1039, 1041, 1042, 1043, 1048, 1049, 1053], "multinomialdevi": 1046, "multinomialhmm": 1035, "multinomialnb": [2, 47, 367, 373, 418, 842, 843, 844, 845, 1006, 1037, 1039, 1042, 1043, 1047, 1048, 1050], "multiouput": 1045, "multioutput": [2, 41, 153, 280, 290, 392, 401, 433, 467, 484, 485, 486, 554, 557, 559, 560, 561, 563, 565, 567, 568, 571, 573, 614, 635, 636, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 791, 793, 794, 828, 836, 838, 839, 840, 841, 850, 858, 865, 874, 908, 910, 913, 915, 916, 917, 918, 939, 966, 967, 1004, 1025, 1026, 1030, 1035, 1036, 1037, 1041, 1042, 1048, 1049], "multioutput_arrai": 378, "multioutputclassifi": [2, 401, 791, 836, 838, 840, 1004, 1042, 1044, 1045, 1046, 1047, 1051, 1052], "multioutputregressor": [2, 153, 401, 433, 467, 484, 485, 486, 557, 559, 561, 563, 565, 568, 571, 573, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 839, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1041, 1042, 1044, 1046, 1047, 1051, 1052], "multipl": [2, 25, 52, 80, 101, 104, 118, 129, 134, 140, 142, 144, 164, 183, 186, 207, 245, 265, 271, 276, 279, 283, 288, 290, 293, 320, 326, 344, 365, 366, 367, 372, 374, 375, 378, 380, 381, 382, 383, 390, 392, 404, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 446, 462, 466, 468, 469, 471, 476, 490, 493, 495, 498, 499, 500, 506, 507, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 554, 556, 557, 558, 559, 562, 563, 564, 565, 566, 584, 602, 610, 611, 613, 614, 630, 635, 637, 642, 643, 644, 645, 649, 650, 653, 655, 656, 657, 660, 663, 664, 665, 666, 669, 670, 671, 674, 676, 679, 681, 682, 692, 693, 695, 696, 697, 714, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 791, 793, 794, 796, 800, 801, 803, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 829, 830, 831, 833, 837, 838, 839, 840, 841, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 869, 872, 884, 888, 896, 899, 900, 907, 908, 909, 912, 929, 945, 950, 951, 974, 977, 996, 999, 1000, 1001, 1005, 1006, 1007, 1011, 1012, 1017, 1018, 1020, 1023, 1024, 1025, 1035, 1036, 1038, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "multipleloc": [233, 296], "multiplex": 1020, "multipli": [186, 217, 231, 271, 360, 365, 387, 392, 415, 417, 418, 423, 466, 477, 518, 541, 543, 544, 550, 560, 564, 567, 649, 651, 655, 657, 661, 662, 663, 665, 671, 672, 673, 675, 679, 680, 681, 683, 689, 690, 692, 696, 767, 909, 912, 915, 917, 939, 979, 980, 981, 993, 996, 1000, 1004, 1018, 1046], "multiprocess": [390, 392, 969, 1007, 1035, 1043, 1049], "multirespons": 1000, "multiscal": 464, "multisurfac": [168, 375], "multitarget": 387, "multitask": [290, 418, 1005], "multitaskelasticnet": [2, 649, 650, 655, 664, 665, 666, 684, 1000, 1005, 1035, 1042, 1043, 1046, 1048], "multitaskelasticnetcv": [2, 401, 649, 650, 655, 663, 665, 666, 684, 1000, 1005, 1038, 1045, 1046, 1048, 1052], "multitasklasso": [2, 207, 655, 663, 666, 1000, 1005, 1035, 1043, 1046, 1048], "multitasklassocv": [2, 401, 664, 665, 1005, 1038, 1045, 1046, 1048, 1052], "multithread": [365, 410, 777, 781, 907, 908, 909, 910, 911, 912, 913], "multivari": [2, 120, 186, 370, 412, 415, 418, 475, 519, 520, 521, 630, 631, 632, 633, 652, 674, 681, 682, 842, 843, 844, 845, 846, 998, 1000, 1003, 1006, 1023, 1030], "multivariate_norm": [113, 116, 256, 423, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483], "multiwai": 1020, "muma": 112, "mungui": 1048, "munoz": [1041, 1047], "muoki": 1047, "murad": 1038, "murashkin": 1039, "murata": [1048, 1049], "murder": 352, "murezzda": 1051, "murmurhash": 387, "murmurhash3": [2, 418, 585, 592, 968], "murmurhash3_32": [2, 387], "murmurhash3_x86_32": [387, 968], "murphi": [408, 646, 997], "murrai": [1041, 1042], "music": 1028, "must": [88, 186, 187, 189, 195, 198, 230, 231, 240, 251, 266, 297, 312, 317, 352, 361, 373, 377, 378, 379, 380, 382, 384, 386, 392, 393, 401, 406, 408, 410, 411, 414, 415, 417, 418, 419, 420, 421, 431, 440, 443, 446, 447, 448, 449, 451, 452, 453, 457, 459, 461, 463, 464, 466, 468, 469, 471, 476, 489, 511, 512, 515, 526, 534, 540, 541, 542, 543, 544, 546, 547, 550, 556, 557, 562, 563, 564, 565, 570, 571, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 614, 620, 623, 630, 631, 632, 633, 634, 635, 636, 641, 645, 646, 651, 652, 655, 661, 662, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 685, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 702, 706, 709, 712, 738, 749, 767, 774, 777, 781, 784, 791, 795, 796, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 812, 813, 815, 817, 818, 819, 821, 822, 824, 828, 831, 833, 834, 842, 843, 844, 845, 846, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 870, 871, 872, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 907, 908, 909, 910, 911, 912, 913, 914, 920, 978, 987, 989, 992, 993, 994, 1000, 1001, 1002, 1004, 1007, 1008, 1010, 1011, 1018, 1019, 1020, 1035, 1038, 1042, 1046, 1048, 1049, 1052], "mutat": [361, 992, 1043], "mutual": [2, 72, 73, 82, 88, 91, 162, 183, 392, 417, 419, 448, 595, 598, 599, 602, 603, 609, 610, 611, 612, 707, 708, 718, 758, 760, 789, 798, 805, 820, 823, 993, 1000, 1004, 1005, 1025, 1035, 1041, 1051], "mutual_info_classif": [2, 104, 419, 595, 598, 599, 602, 603, 1041, 1047, 1050, 1053], "mutual_info_regress": [2, 163, 324, 419, 595, 598, 599, 602, 603, 612, 1041, 1042, 1047, 1049, 1050, 1051, 1053], "mutual_info_scor": [2, 72, 410, 707, 1004, 1043, 1046, 1047], "mu\u00f1oz": [1048, 1050], "mwestt": 1044, "my": [372, 378, 383, 386, 499], "my_custom_loss_func": 1004, "my_data": 383, "my_dataset": 489, "my_estim": [380, 411], "my_extra_param": 380, "my_featur": 378, "my_fil": 384, "my_func": [379, 384], "my_g": [422, 536], "my_group": [247, 401], "my_kernel": [337, 1019], "my_memb": [94, 96, 97], "my_other_weight": [247, 401], "my_pipelin": 1044, "my_script": 366, "my_test_script": 386, "my_token": 418, "my_weight": [247, 401], "myatt": [1044, 1045], "mycach": [511, 512], "mycluster": 428, "myenugula": 1053, "myer": [1038, 1042], "myestim": [380, 424, 426, 427, 429, 430, 431, 432, 433], "myestimator0": 426, "myestimator1": 426, "mymultioutputestim": 380, "mypi": [378, 382, 396, 403, 1046], "myself": 378, "mysvmlightfil": 511, "mytransform": [380, 434], "m\u00e9hault": [1043, 1044], "m\u00f6rtberg": 1041, "m\u00fcller": [0, 393, 415, 538, 873, 1008, 1014, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "n": [2, 43, 44, 46, 47, 49, 50, 54, 55, 57, 68, 69, 72, 74, 75, 91, 102, 107, 111, 115, 118, 120, 123, 125, 127, 129, 130, 134, 136, 137, 141, 156, 163, 166, 168, 170, 174, 179, 187, 189, 194, 198, 209, 213, 214, 217, 228, 230, 231, 233, 243, 244, 245, 248, 256, 258, 259, 269, 271, 274, 276, 277, 278, 280, 281, 284, 291, 294, 296, 309, 313, 315, 316, 322, 325, 327, 331, 345, 348, 360, 365, 372, 375, 376, 378, 382, 384, 386, 387, 392, 396, 397, 401, 407, 408, 410, 413, 414, 415, 416, 417, 418, 420, 421, 446, 447, 449, 450, 452, 471, 473, 476, 480, 491, 518, 519, 520, 521, 526, 531, 541, 543, 544, 550, 560, 561, 562, 563, 566, 567, 568, 569, 591, 592, 593, 594, 610, 611, 617, 630, 652, 674, 682, 695, 699, 702, 709, 710, 758, 808, 811, 813, 818, 819, 822, 843, 847, 848, 852, 872, 899, 901, 915, 916, 917, 918, 930, 949, 954, 955, 978, 982, 983, 993, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "n1": 123, "n2": 123, "n4": 123, "n_": [111, 112, 189, 271, 323, 410, 415, 417, 649, 655, 688, 699, 996, 1000, 1004, 1006, 1007, 1011, 1014, 1016, 1019, 1020], "n_alpha": [218, 474, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 676, 678, 684, 685, 686, 687, 1038], "n_atom": 1036, "n_averag": 69, "n_bar": 182, "n_batch_iter_": 539, "n_best": 453, "n_bin": [61, 62, 64, 86, 213, 231, 312, 314, 318, 440, 441, 872, 1014], "n_bins_": 872, "n_bootstrap": [274, 1036], "n_bulk_repeat": 49, "n_byte": 244, "n_c": [410, 662], "n_call": [847, 848], "n_candid": [806, 807, 993], "n_candidates_": [283, 806, 807, 993], "n_candidates_0": 993, "n_candidates_i": 993, "n_categori": [318, 843, 881, 1014], "n_categorical_featur": [143, 564, 565, 635, 636], "n_categories_": 843, "n_center": [77, 515], "n_channel": [586, 587, 590], "n_class": [2, 45, 72, 118, 134, 136, 141, 142, 165, 167, 228, 234, 245, 248, 258, 278, 279, 280, 300, 301, 320, 357, 360, 361, 374, 378, 380, 392, 417, 439, 490, 491, 505, 518, 522, 526, 552, 553, 554, 556, 558, 560, 562, 564, 567, 570, 572, 596, 597, 607, 613, 637, 642, 661, 662, 669, 670, 671, 677, 678, 679, 680, 700, 710, 719, 721, 725, 738, 741, 744, 757, 791, 797, 802, 803, 806, 807, 817, 825, 828, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 849, 854, 856, 857, 864, 867, 874, 875, 878, 881, 888, 891, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 917, 919, 920, 938, 939, 1000, 1004, 1005, 1008, 1015, 1018, 1019, 1040, 1041, 1042, 1044, 1045, 1046, 1052], "n_classes_": [554, 556, 558, 560, 562, 567, 613, 835, 836, 915, 917, 1036, 1045, 1047], "n_classes_pr": [717, 758], "n_classes_tru": [717, 758], "n_classifi": [66, 572, 573], "n_cluster": [2, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 120, 324, 353, 378, 392, 410, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 462, 463, 464, 465, 514, 516, 713, 795, 796, 1035, 1039, 1041, 1043, 1044, 1046, 1049], "n_clusters_": [73, 82, 88, 96, 443, 447], "n_clusters_list": 78, "n_clusters_per_class": [67, 138, 165, 167, 268, 301, 306, 313, 374, 383, 518, 608, 610], "n_clusters_rang": 72, "n_clusters_tru": 94, "n_col": [45, 57, 120, 249, 425, 453, 455, 514, 516, 635], "n_column": [407, 453, 455], "n_column_clust": [453, 455, 516], "n_comp": [130, 191], "n_comparison": 271, "n_compon": [43, 44, 45, 51, 54, 79, 85, 90, 91, 92, 102, 104, 105, 106, 115, 116, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 152, 191, 212, 233, 234, 235, 236, 237, 238, 240, 244, 245, 248, 252, 256, 257, 258, 259, 260, 261, 262, 270, 295, 300, 309, 316, 322, 324, 327, 328, 353, 380, 383, 384, 392, 411, 413, 415, 422, 453, 454, 464, 466, 484, 485, 486, 487, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 642, 643, 644, 645, 691, 692, 693, 694, 695, 696, 697, 698, 699, 800, 801, 856, 863, 866, 899, 900, 901, 951, 996, 998, 1001, 1003, 1007, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1052, 1053], "n_components_": [105, 127, 392, 443, 447, 537, 541, 542, 543, 544, 545, 546, 899, 900, 1044, 1046], "n_components_fa": 127, "n_components_pca": 127, "n_components_pca_ml": 127, "n_components_rang": 244, "n_connected_compon": 465, "n_connected_components_": [443, 447, 1044], "n_core": 140, "n_core_sampl": [421, 446], "n_cpu": [366, 392], "n_cv": [414, 439], "n_cv_alpha": [654, 658], "n_cv_fold": [143, 317, 809, 826, 831, 834], "n_digit": 91, "n_dim": [480, 530, 532, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 1052], "n_dimens": [800, 801], "n_dimensions_of_x": [909, 910, 911, 912, 913], "n_dir": 53, "n_e": 410, "n_element": [420, 620], "n_encoded_featur": [880, 881], "n_error": 298, "n_error_outli": [227, 297, 340], "n_error_outliers_sgd": 227, "n_error_test": [227, 297, 340], "n_error_test_sgd": 227, "n_error_train": [227, 340], "n_error_train_sgd": 227, "n_estim": [46, 49, 63, 67, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 152, 153, 156, 181, 189, 234, 249, 253, 258, 268, 283, 313, 320, 322, 365, 391, 392, 417, 419, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 635, 806, 807, 993, 1010, 1011, 1032, 1043, 1051], "n_estimators_": [144, 562, 563], "n_estimators_ful": 144, "n_exampl": 47, "n_face": 249, "n_featur": [45, 47, 54, 62, 63, 64, 66, 67, 68, 69, 70, 75, 85, 91, 93, 94, 109, 110, 111, 112, 113, 118, 120, 127, 134, 136, 138, 140, 141, 165, 167, 168, 181, 182, 191, 193, 196, 198, 199, 207, 208, 212, 216, 217, 228, 230, 234, 240, 244, 245, 247, 256, 261, 268, 274, 278, 280, 281, 283, 284, 301, 306, 313, 320, 321, 322, 324, 326, 327, 328, 348, 352, 353, 354, 361, 365, 371, 372, 374, 378, 380, 383, 390, 391, 392, 401, 410, 412, 413, 415, 417, 418, 421, 422, 423, 425, 427, 428, 429, 432, 433, 434, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 461, 462, 463, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 491, 492, 493, 495, 497, 504, 507, 511, 512, 515, 518, 519, 522, 524, 526, 527, 529, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 703, 704, 705, 713, 728, 761, 762, 763, 764, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 925, 951, 978, 979, 980, 981, 982, 983, 984, 985, 986, 992, 996, 1000, 1005, 1007, 1008, 1014, 1018, 1019, 1020, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "n_feature_influ": 49, "n_features_": [167, 596, 597, 1048, 1050], "n_features_a": 856, "n_features_b": 856, "n_features_in_": [380, 392, 431, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 992, 1046, 1048, 1050, 1053], "n_features_max": 69, "n_features_missing_ind": 633, "n_features_new": [434, 444, 447, 535, 537, 539, 540, 542, 545, 546, 552, 570, 572, 573, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 633, 638, 641, 642, 643, 644, 645, 856, 863, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 899, 900], "n_features_opt": 104, "n_features_out": 633, "n_features_out_": 886, "n_features_rang": 69, "n_features_to_comput": 1043, "n_features_to_select": [166, 168, 322, 419, 596, 605, 1047, 1049], "n_features_to_select_": 605, "n_features_with_miss": 632, "n_features_with_missing_": 630, "n_fold": [159, 650, 654, 656, 658, 662, 664, 666, 1036, 1037, 1041], "n_gram_rang": 1035, "n_group": [414, 812, 1041], "n_i": [1006, 1014], "n_imag": 269, "n_index": [849, 850, 851, 853, 855, 857, 858], "n_inform": [62, 64, 67, 138, 141, 165, 167, 193, 198, 216, 217, 268, 274, 284, 301, 306, 313, 320, 348, 374, 383, 518, 527, 556, 557, 558, 559, 567, 568, 608, 609, 610, 611, 612, 649, 650, 655, 663, 664, 665, 668, 684, 685, 686, 837, 925, 1005, 1043], "n_init": [57, 77, 78, 83, 90, 91, 94, 97, 233, 234, 235, 236, 321, 324, 353, 410, 445, 449, 451, 453, 454, 455, 461, 464, 693, 697, 800, 801, 1035, 1043, 1049, 1050, 1051], "n_init_rang": 94, "n_inlier": 240, "n_input_features_": 1048, "n_instanc": [49, 636], "n_iter": [45, 55, 103, 149, 170, 221, 272, 279, 291, 309, 343, 380, 384, 391, 422, 456, 480, 535, 536, 547, 548, 549, 550, 649, 650, 655, 656, 663, 664, 665, 666, 684, 685, 686, 687, 688, 689, 690, 695, 697, 806, 807, 815, 817, 863, 865, 950, 951, 993, 1018, 1036, 1041, 1042, 1043, 1047, 1049, 1050, 1051, 1053], "n_iter_": [43, 123, 149, 221, 259, 392, 442, 449, 450, 451, 473, 474, 484, 485, 486, 534, 535, 536, 539, 540, 541, 542, 543, 546, 564, 565, 630, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 682, 683, 693, 695, 800, 801, 856, 864, 865, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 1039, 1042, 1043, 1045, 1048, 1049, 1051], "n_iter_no_chang": [46, 140, 144, 149, 221, 323, 352, 383, 392, 417, 562, 563, 564, 565, 669, 670, 671, 679, 680, 681, 864, 865, 1018, 1043, 1046], "n_iter_search": 279, "n_iter_without_progress": [234, 695, 1040, 1041], "n_iterations_": [283, 806, 807], "n_iters_": 1041, "n_job": [52, 87, 104, 105, 140, 141, 146, 147, 154, 167, 168, 181, 186, 187, 188, 189, 234, 236, 252, 265, 270, 272, 273, 275, 284, 288, 291, 320, 321, 322, 325, 348, 366, 378, 392, 417, 421, 439, 446, 448, 450, 452, 454, 457, 458, 459, 460, 463, 466, 469, 474, 534, 538, 539, 540, 542, 545, 546, 548, 549, 551, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 597, 605, 610, 611, 613, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 866, 869, 902, 903, 969, 993, 1004, 1005, 1007, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1053], "n_k": [410, 553], "n_kernel": 615, "n_kernel_param": [613, 614], "n_knot": [43, 214, 323, 886, 1014, 1048], "n_l1_ratio": [650, 662, 664, 1038], "n_l1_ratios_": 662, "n_label": [51, 118, 248, 392, 489, 526, 716, 723, 729, 742, 743, 757, 759, 795, 796, 823, 1004, 1041, 1043], "n_labeled_point": [330, 331], "n_layer": [864, 865], "n_layers_": [864, 865], "n_leav": [465, 915, 916, 917, 918], "n_leaves_": [443, 447], "n_left": 566, "n_local_tri": 462, "n_m": 1020, "n_mask": 213, "n_missing_featur": 632, "n_missing_sampl": 182, "n_nearest_featur": [182, 630], "n_neighbor": [51, 79, 95, 100, 155, 181, 233, 234, 235, 237, 240, 250, 291, 293, 294, 297, 298, 299, 300, 303, 316, 320, 322, 352, 417, 454, 605, 610, 611, 631, 691, 692, 694, 696, 698, 699, 849, 850, 851, 853, 855, 856, 860, 902, 903, 994, 1001, 1007, 1010, 1017, 1042, 1049, 1051, 1052], "n_neighbors_": [694, 853], "n_neighbors_list": [250, 293], "n_neighbour": 1049, "n_node": [360, 443, 447, 465, 560, 561, 567, 568, 569, 915, 916, 917, 918, 957], "n_node_sampl": 360, "n_nodes_ptr": [560, 561, 567, 568, 569], "n_noise_": 82, "n_nonzero": 129, "n_nonzero_coef": [212, 529, 534, 540, 545, 548, 549, 551, 653, 667, 688, 689, 1053], "n_nonzero_coefs_": [667, 668, 1053], "n_nonzero_column": 354, "n_numerical_featur": 143, "n_order": 194, "n_original_featur": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "n_out": 569, "n_outlier": [111, 112, 150, 216, 240, 298], "n_output": [360, 392, 417, 427, 433, 434, 439, 444, 447, 467, 471, 484, 485, 486, 535, 537, 539, 540, 542, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 631, 633, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 681, 682, 724, 726, 731, 748, 749, 751, 753, 754, 756, 757, 788, 791, 793, 794, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 856, 857, 858, 863, 864, 865, 866, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 899, 900, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 939, 974, 1004, 1005, 1020, 1042, 1045], "n_output_featur": 631, "n_output_features_": 882, "n_outputs_": [554, 555, 560, 561, 567, 568, 569, 864, 865, 915, 916, 917, 918], "n_oversampl": [453, 455, 544, 547, 951, 1049], "n_pack": [2, 954, 955], "n_patch": [586, 587, 590], "n_permut": [277, 414, 832], "n_pixel": [249, 269], "n_point": [266, 847, 848], "n_points_per_clust": 98, "n_popul": [387, 972], "n_possible_iterations_": [806, 807], "n_predict": 49, "n_pt": 53, "n_q": 410, "n_quantil": [107, 187, 315, 884, 896, 1044], "n_quantiles_": 884, "n_queri": [691, 849, 850, 851, 853, 855, 857, 858, 859], "n_random_featur": 202, "n_redund": [62, 64, 67, 141, 165, 167, 268, 274, 301, 306, 313, 374, 383, 439, 518, 556, 558, 567, 837], "n_refin": 474, "n_region": 80, "n_regions_plu": 80, "n_regressor": 573, "n_relevant_featur": 207, "n_remaining_candidates_": [806, 807], "n_repeat": [137, 141, 147, 167, 186, 188, 189, 271, 285, 288, 320, 414, 518, 637, 818, 819, 1012], "n_required_iterations_": [806, 807], "n_resourc": 993, "n_resources_": [283, 806, 807, 993], "n_resources_0": 993, "n_resources_i": 993, "n_restarts_optim": [176, 177, 420, 613, 614], "n_retri": [490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 1049, 1053], "n_row": [45, 57, 120, 407, 425, 453, 455, 514, 516], "n_row_clust": [453, 455, 516], "n_run": [72, 94, 191, 353], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 107, 109, 110, 111, 112, 113, 116, 118, 120, 121, 125, 127, 134, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 160, 161, 167, 168, 179, 181, 182, 185, 193, 195, 196, 198, 199, 200, 203, 205, 207, 208, 212, 213, 214, 216, 217, 221, 225, 228, 230, 231, 233, 234, 235, 236, 237, 238, 240, 244, 245, 247, 250, 257, 259, 260, 261, 262, 268, 269, 271, 274, 275, 278, 280, 281, 282, 283, 284, 286, 291, 301, 313, 314, 315, 318, 321, 322, 324, 326, 327, 328, 332, 339, 342, 343, 348, 352, 353, 361, 371, 375, 378, 380, 383, 387, 390, 391, 392, 401, 409, 410, 412, 413, 414, 415, 417, 421, 422, 423, 425, 427, 428, 429, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 497, 504, 507, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 624, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 773, 774, 775, 776, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 923, 925, 938, 939, 951, 953, 955, 965, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 992, 993, 996, 1000, 1004, 1005, 1007, 1008, 1014, 1015, 1016, 1018, 1019, 1020, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "n_samples1": 873, "n_samples2": 873, "n_samples_": 544, "n_samples_1": [343, 1019], "n_samples_2": [343, 1019], "n_samples_a": [795, 796], "n_samples_fit": [433, 467, 484, 485, 486, 557, 559, 561, 563, 565, 568, 571, 573, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 691, 840, 841, 849, 850, 851, 853, 855, 857, 858, 859, 865, 908, 910, 913, 916, 918], "n_samples_fit_": [291, 849, 850, 851, 853, 855, 857, 858, 859], "n_samples_i": [615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784], "n_samples_per_cent": 94, "n_samples_rang": [110, 244], "n_samples_seen": 887, "n_samples_seen_": [537, 876, 877, 887, 1043], "n_samples_test": [284, 909, 910, 911, 912, 913, 1007, 1014], "n_samples_train": [284, 909, 910, 911, 912, 913], "n_samples_transform": [291, 851, 859], "n_samples_x": [614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784], "n_seed": 463, "n_selected_featur": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "n_skips_": 1042, "n_skips_invalid_data_": 674, "n_skips_invalid_model_": 674, "n_skips_no_inliers_": 674, "n_spline": [43, 886], "n_split": [43, 52, 140, 145, 149, 181, 182, 186, 258, 266, 271, 273, 276, 281, 285, 288, 327, 333, 341, 348, 361, 414, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 830, 1041, 1043, 1053], "n_splits_": [803, 806, 807, 817], "n_steps_": [123, 451, 540, 541, 1048], "n_subpopulation_": 682, "n_subsampl": [682, 939], "n_subsets_of_featur": 597, "n_support_": [909, 910, 911, 912, 913, 1019, 1045], "n_support_vector": 46, "n_sv": [909, 910, 911, 912, 913, 1019, 1045], "n_svd_vec": [453, 455], "n_t": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918], "n_t_l": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918], "n_t_r": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918], "n_target": [392, 413, 484, 485, 486, 487, 527, 559, 614, 646, 649, 650, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 674, 675, 676, 677, 678, 684, 687, 688, 689, 690, 1005, 1047, 1049, 1051], "n_task": [207, 1000], "n_test": [47, 49, 69, 137, 271, 1035, 1038], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [638, 730, 785, 792], "n_tick": [809, 826, 831, 834], "n_top": 279, "n_top_word": 54, "n_topic": [383, 539, 1042], "n_tot": 702, "n_total_sampl": [330, 331], "n_train": [47, 49, 69, 137, 271, 1035, 1038], "n_train_po": 47, "n_transformed_featur": 867, "n_tree": 46, "n_trees_per_iter": 564, "n_trees_per_iteration_": [562, 563, 564, 565], "n_trials_": 674, "n_uncorrelated_featur": 277, "n_unequ": 702, "n_unique_categori": 317, "n_unique_label": [732, 733, 741, 786, 787, 790, 967], "n_unique_tick": [809, 831], "n_valu": [826, 834, 1043], "n_values_": 1043, "n_values_feature_j": 636, "n_x": [87, 588], "n_y": [87, 588, 1006, 1014], "n_z": 588, "na": [630, 631, 632, 633, 772, 781, 931, 933, 934, 1045, 1046, 1049, 1050, 1051, 1052], "nabarun": 1043, "nabla": 1008, "nabsolut": 219, "nacross": 285, "nada": 57, "nadeau": [271, 1043], "nadia": 1047, "nadim": 1048, "nadirhan": 1049, "nadya": 1041, "nagarajan": [648, 1000], "nagarjuna": [1042, 1043], "nagasaka": 1048, "naghshhnejad": [1045, 1046], "naipawat": [1049, 1050], "naiv": [2, 32, 64, 67, 152, 271, 273, 290, 352, 354, 373, 408, 417, 418, 439, 547, 842, 843, 844, 845, 846, 998, 999, 1007, 1012, 1026, 1030, 1035, 1036, 1037, 1038, 1043, 1045, 1048, 1050], "naive_bay": [2, 47, 61, 62, 64, 67, 152, 156, 272, 273, 352, 361, 367, 373, 417, 439, 572, 842, 843, 844, 845, 846, 868, 998, 1005, 1006, 1036, 1037, 1039, 1040, 1041, 1042], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 367, "naivebayesna": 398, "naivelycalibratedlinearsvc": [62, 64], "najera": 1042, "najork": [729, 759, 1004], "naka": 1048, "nakamura": 1049, "nakano": [1042, 1043], "nalepa": 1042, "naman": 1052, "name": [2, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 91, 95, 103, 105, 107, 113, 121, 126, 137, 138, 139, 140, 143, 146, 149, 154, 186, 187, 188, 202, 211, 213, 215, 217, 219, 220, 228, 230, 231, 233, 234, 240, 246, 247, 249, 250, 254, 258, 265, 266, 268, 269, 272, 274, 275, 278, 280, 281, 285, 288, 291, 299, 300, 306, 307, 313, 315, 317, 324, 325, 328, 334, 346, 352, 353, 354, 366, 367, 372, 373, 376, 378, 380, 382, 383, 385, 386, 392, 396, 401, 407, 410, 414, 417, 418, 420, 424, 426, 431, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 700, 701, 702, 703, 705, 711, 712, 714, 716, 735, 736, 745, 782, 783, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 825, 826, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 932, 933, 934, 937, 942, 943, 944, 946, 959, 960, 961, 963, 966, 973, 987, 991, 992, 993, 998, 1000, 1004, 1005, 1011, 1012, 1014, 1020, 1024, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "name_to_color": 317, "named_estim": [570, 571, 572, 573], "named_estimators_": [570, 571, 572, 573, 1043, 1045], "named_step": [105, 116, 166, 411, 596, 597, 600, 867, 868, 907, 908, 1000, 1042, 1044], "named_transform": [866, 1050], "named_transformers_": 466, "namedtupl": [2, 620, 1051], "namespac": 406, "namiya": 1042, "nan": [2, 107, 143, 149, 181, 182, 186, 231, 250, 252, 254, 266, 274, 317, 320, 325, 326, 327, 328, 365, 370, 387, 392, 417, 448, 470, 499, 558, 559, 560, 564, 565, 567, 596, 597, 600, 606, 609, 612, 630, 631, 632, 633, 638, 715, 716, 717, 719, 724, 725, 726, 727, 731, 732, 733, 772, 781, 786, 787, 788, 790, 803, 806, 807, 809, 817, 826, 829, 830, 831, 834, 876, 877, 881, 883, 884, 887, 888, 892, 895, 896, 898, 924, 931, 932, 933, 934, 978, 993, 1004, 1014, 1020, 1030, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "nan_euclidean": [631, 765, 781], "nan_euclidean_dist": [2, 320, 765, 994, 1045], "nandana": [1041, 1042, 1043], "nanshan": 1048, "nanta": 1038, "nanxin": 1043, "nanyang": 375, "naois": [1050, 1052], "naoki": [1037, 1047], "naoya": [1041, 1042, 1043, 1044], "naozin555": 1048, "napa": 317, "narasimhan": 854, "nardelli": 1038, "narendra": [1046, 1052], "narendramukherje": 1046, "narendran": 1043, "narin": [1042, 1043], "narinek": [1042, 1043], "narr": [378, 392, 661, 907, 912, 1035, 1036], "narrai": 597, "narrow": [52, 137, 146, 311, 313, 383, 847, 848], "nartayxd": 1049, "nasa": [102, 352, 353, 375], "nasdaq": 51, "naser": 1045, "nasir": 1043, "nass": 1050, "nastegiano": 1049, "nat": [610, 611, 707, 758, 760, 1049], "natasha": 1045, "natchiappan": [1048, 1049], "nate": [1041, 1042, 1048], "nath": 1043, "nathan": [538, 1043, 1047, 1050, 1053], "nathaniel": [1042, 1043, 1045], "nathansquan": 1049, "nati": 1050, "nation": [50, 111, 304, 373, 854], "nativ": [43, 149, 153, 175, 181, 265, 366, 373, 392, 404, 417, 499, 564, 565, 839, 840, 1000, 1004, 1005, 1023, 1045, 1047], "native_result": 143, "natl": [692, 696, 1001], "natur": [43, 64, 67, 140, 146, 177, 186, 187, 191, 198, 213, 214, 230, 231, 237, 250, 256, 262, 280, 290, 352, 378, 380, 392, 415, 417, 418, 421, 446, 452, 459, 554, 593, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 695, 707, 744, 758, 760, 849, 850, 851, 853, 855, 857, 858, 859, 886, 949, 1000, 1001, 1003, 1004, 1007, 1009, 1014, 1018, 1023, 1035, 1043], "naul": [1040, 1041], "nav": 51, "navarret": [1043, 1044, 1045], "navarro": 1050, "navi": [69, 102, 110, 124, 128, 129, 153, 193, 216, 224, 236, 257, 258, 259, 262, 278, 280, 296, 303, 332, 359], "navig": [386, 1037], "navin": 903, "navistar": 51, "navkal": 1043, "navractil": 1004, "navratil2007": 1004, "nawazish": [1050, 1051], "naziya": 1053, "nb": [47, 127, 152, 361, 844, 1006], "nbclaim": 231, "nber": 49, "nbr": [855, 1007], "nbrown": 1053, "nbrs_": [691, 692], "nbsp": [146, 202], "nbviewer": [51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 325, 327, 332, 360], "nbyte": [86, 244], "nca": [234, 299, 300, 301, 856, 1007], "nca_pip": 1007, "ncall": 384, "ncanip": 856, "nclass": 266, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 86, 90, 99, 120, 125, 130, 144, 187, 213, 214, 215, 221, 231, 233, 234, 243, 250, 265, 267, 273, 274, 282, 284, 285, 291, 294, 307, 312, 313, 315, 316, 325, 347, 348, 353, 374], "ncorrect": 271, "ncsu": [168, 375], "ncv": [453, 455], "nd": [1048, 1052], "ndarrai": [86, 91, 213, 254, 269, 270, 271, 378, 379, 380, 384, 385, 406, 418, 421, 422, 425, 426, 428, 431, 432, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 718, 721, 724, 725, 726, 727, 730, 731, 741, 748, 749, 751, 754, 756, 757, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 792, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 930, 931, 932, 933, 938, 939, 948, 950, 951, 952, 953, 958, 965, 967, 968, 972, 975, 976, 978, 979, 980, 981, 984, 989, 990, 992, 1004, 1019, 1024, 1038, 1042, 1045, 1046, 1049, 1050, 1051, 1052], "ndata": 277, "ndataset": [228, 313], "ndbscan": 98, "ndcg": [729, 759, 1004, 1042], "ndcg_score": [2, 729, 1004, 1042, 1045, 1050, 1051], "ndenumer": 225, "ndepend": 187, "ndim": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 933, 934], "ndimag": [53, 80, 81, 87, 309], "ndingwal": 1042, "ndirangu": [1045, 1049], "ne": [1004, 1007], "neal": [1000, 1048], "near_uniqu": 318, "nearbi": [410, 1007], "nearer": [2, 851, 859, 1007], "nearest": [2, 33, 51, 53, 67, 68, 74, 75, 83, 84, 87, 91, 94, 99, 104, 109, 113, 120, 123, 150, 160, 174, 182, 195, 204, 225, 229, 235, 238, 249, 250, 264, 274, 295, 297, 300, 301, 308, 309, 316, 341, 346, 350, 370, 375, 387, 390, 392, 410, 416, 417, 421, 424, 434, 446, 448, 450, 452, 454, 459, 463, 464, 499, 505, 507, 610, 611, 630, 631, 633, 634, 638, 691, 692, 694, 695, 699, 795, 796, 803, 833, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 867, 868, 872, 887, 977, 1001, 1010, 1019, 1024, 1025, 1026, 1030, 1035, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1047], "nearest_neighbor": [79, 454, 694], "nearest_neighbor_algorithm": [849, 857, 858], "nearest_neighbors_algorithm": [850, 855], "nearestcentroid": [2, 302, 352, 1005, 1007, 1035, 1039, 1042, 1047, 1050], "nearestneighbor": [2, 291, 324, 396, 410, 421, 446, 448, 450, 463, 691, 692, 696, 849, 850, 851, 853, 857, 858, 859, 1007, 1035, 1039, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "nearli": [37, 62, 274, 373, 392, 767, 1004, 1007, 1016], "neat": 1035, "necess": [1001, 1007], "necessari": [46, 53, 138, 198, 213, 218, 256, 265, 271, 272, 278, 293, 345, 358, 365, 373, 376, 377, 378, 379, 380, 381, 382, 386, 390, 410, 412, 417, 454, 464, 490, 491, 493, 495, 496, 497, 498, 500, 537, 647, 648, 649, 655, 659, 660, 663, 664, 665, 666, 667, 668, 674, 676, 678, 679, 694, 698, 798, 870, 879, 890, 894, 900, 993, 996, 1000, 1003, 1006, 1014, 1020, 1035, 1043], "necessarili": [43, 67, 104, 123, 186, 213, 221, 231, 245, 246, 257, 278, 313, 352, 353, 372, 404, 406, 408, 410, 417, 630, 855, 857, 858, 859, 998, 1001, 1003, 1004], "need": [0, 30, 43, 48, 51, 68, 80, 86, 88, 90, 113, 122, 132, 140, 143, 145, 146, 147, 149, 154, 168, 170, 175, 181, 182, 186, 200, 215, 230, 231, 234, 240, 243, 245, 247, 250, 251, 256, 257, 261, 262, 265, 269, 271, 273, 274, 276, 288, 290, 291, 293, 316, 320, 327, 333, 341, 352, 353, 361, 365, 366, 367, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 401, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 426, 439, 443, 447, 451, 466, 467, 469, 506, 544, 554, 575, 585, 586, 591, 592, 593, 594, 630, 638, 641, 642, 643, 645, 652, 669, 671, 674, 679, 682, 695, 714, 723, 724, 725, 726, 727, 784, 788, 800, 801, 803, 806, 807, 817, 818, 819, 828, 836, 839, 847, 848, 864, 867, 870, 874, 879, 880, 884, 902, 909, 912, 924, 960, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1024, 1028, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "needl": [168, 375], "needs_proba": [1044, 1052], "needs_threshold": 1052, "neeraj": 1042, "neg": [2, 42, 43, 45, 61, 93, 107, 109, 116, 140, 145, 146, 151, 183, 185, 186, 192, 203, 209, 210, 211, 213, 231, 260, 261, 265, 268, 271, 274, 278, 280, 281, 285, 291, 311, 315, 324, 328, 352, 384, 392, 393, 410, 414, 417, 418, 419, 421, 422, 433, 442, 446, 454, 467, 471, 484, 485, 486, 490, 534, 536, 538, 539, 540, 541, 543, 545, 547, 550, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 591, 594, 595, 598, 599, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 680, 681, 682, 683, 690, 701, 702, 707, 708, 715, 716, 718, 719, 721, 722, 724, 725, 726, 727, 730, 732, 733, 734, 738, 741, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 785, 786, 787, 788, 790, 793, 794, 796, 800, 801, 809, 826, 828, 833, 840, 841, 850, 853, 858, 865, 874, 883, 885, 886, 891, 895, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 934, 949, 951, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1018, 1019, 1025, 1029, 1030, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "neg_": [809, 826, 1041], "neg_brier_scor": [1004, 1045], "neg_label": [265, 285, 874, 891], "neg_log_loss": [64, 265, 1004], "neg_lr": 274, "neg_lr_bas": 274, "neg_lr_base_std": 274, "neg_max_error": 1004, "neg_mean_absolute_error": [43, 154, 215, 1004], "neg_mean_absolute_percentage_error": [52, 143, 1004, 1012], "neg_mean_gamma_devi": 1004, "neg_mean_pinball_loss_05p_scor": 146, "neg_mean_pinball_loss_95p_scor": 146, "neg_mean_poisson_devi": 1004, "neg_mean_squared_error": [181, 182, 215, 246, 286, 327, 830, 1004, 1012, 1041], "neg_mean_squared_log_error": 1004, "neg_median_absolute_error": 1004, "neg_root_mean_squared_error": [43, 149, 317, 1004], "neg_root_mean_squared_log_error": 1004, "neg_root_mean_squared_log_error_scor": 1052, "negat": [392, 809, 826, 1004], "negate_scor": [246, 809, 826], "negative_class": 715, "negative_likelihood_ratio": [274, 715], "negative_linestyl": 240, "negative_loglik": 109, "negative_mahal_dist": 471, "negative_outlier_factor": 853, "negative_outlier_factor_": [250, 298, 853, 1010], "neglig": [186, 1007, 1038, 1052], "neigh": [784, 849, 850, 851, 853, 855, 857, 858, 859], "neigh_dist": [849, 850, 851, 853, 855, 857, 858, 859], "neigh_ind": [849, 850, 851, 853, 855, 857, 858, 859], "neighbor": [2, 51, 67, 74, 79, 81, 93, 99, 104, 149, 150, 152, 155, 160, 181, 182, 195, 234, 235, 237, 238, 240, 249, 250, 264, 274, 295, 296, 297, 298, 300, 301, 302, 304, 308, 322, 324, 325, 352, 370, 375, 387, 390, 392, 396, 410, 416, 417, 418, 421, 424, 434, 443, 446, 447, 448, 450, 452, 454, 459, 460, 463, 465, 499, 505, 507, 566, 573, 605, 610, 611, 630, 631, 634, 691, 692, 693, 694, 695, 696, 698, 699, 784, 803, 833, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 868, 887, 903, 911, 977, 1005, 1010, 1024, 1025, 1026, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "neighbor_feat_idx": 630, "neighborhood": [2, 88, 113, 128, 160, 183, 233, 291, 292, 293, 294, 302, 303, 375, 392, 410, 415, 421, 446, 452, 459, 505, 507, 518, 544, 552, 631, 634, 699, 833, 849, 850, 853, 855, 856, 857, 858, 859, 861, 867, 868, 887, 1001, 1010, 1025, 1026, 1030, 1044], "neighborhoodcomponentanalysi": 300, "neighborhoodcomponentsanalysi": [2, 234, 299, 300, 301, 1007, 1044, 1049, 1053], "neighbors_algorithm": [691, 692], "neighborsbas": [1047, 1050], "neighborsclassifi": [855, 857, 858, 859, 1035], "neighborsregressor": 1035, "neighbour": [448, 464, 695, 1009], "neighbourhood": [856, 1007], "neighbourhood_components_analysi": 856, "neil": 1047, "neill": 1047, "neither": [182, 186, 320, 352, 361, 390, 408, 439, 597, 631, 937, 1007, 1020], "nelder": 1000, "nell": [0, 399, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047], "nelson": [0, 1041, 1042, 1047, 1053], "nemour": 51, "neo": 1043, "nep": 1045, "neptun": 1023, "neq": [410, 1004, 1006, 1014], "ness": [182, 231], "nest": [125, 134, 183, 202, 247, 263, 265, 266, 288, 327, 366, 384, 392, 396, 410, 414, 420, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 464, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 507, 522, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 808, 817, 825, 829, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1004, 1007, 1025, 1035, 1036, 1039, 1041, 1042, 1043, 1049], "nested_lin": 276, "nested_scor": 276, "nesterov": [307, 864, 865, 1008, 1051, 1052], "nesterovs_momentum": [307, 864, 865], "nestor": 1050, "net": [2, 25, 67, 183, 192, 198, 199, 202, 204, 207, 224, 247, 284, 384, 414, 473, 474, 480, 504, 527, 560, 561, 562, 563, 567, 568, 569, 649, 650, 655, 660, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 685, 687, 863, 915, 916, 917, 918, 993, 1004, 1009, 1018, 1025, 1026, 1028, 1030, 1035, 1040, 1044, 1045, 1047], "netbsd": 1035, "neto": [593, 733, 1053], "nettei": 1048, "network": [34, 45, 250, 308, 365, 366, 367, 372, 373, 382, 392, 393, 404, 410, 415, 417, 422, 499, 536, 538, 570, 571, 699, 744, 864, 865, 1000, 1002, 1004, 1018, 1020, 1023, 1026, 1029, 1030, 1035, 1049, 1053], "networkx": [55, 387], "neural": [34, 44, 45, 67, 271, 308, 392, 404, 414, 415, 417, 422, 536, 538, 541, 543, 550, 570, 571, 642, 648, 699, 744, 800, 856, 863, 864, 865, 873, 996, 1000, 1001, 1002, 1004, 1007, 1010, 1014, 1018, 1020, 1023, 1026, 1028, 1029, 1030, 1035, 1047], "neural_network": [2, 67, 183, 187, 251, 305, 306, 307, 308, 309, 367, 390, 863, 864, 865, 1005, 1008, 1025, 1037, 1052], "neuro": 1023, "neurodebian": 0, "neuroimag": [1022, 1028], "neuron": [864, 865, 1002, 1008], "neutral": 719, "nevalu": 154, "never": [140, 248, 328, 361, 378, 387, 390, 404, 409, 410, 411, 413, 414, 452, 459, 526, 558, 559, 560, 567, 867, 868, 992, 996, 1014, 1045, 1048], "nevertheless": [43, 189, 417], "new": [2, 43, 46, 47, 49, 83, 89, 91, 93, 102, 103, 126, 127, 134, 136, 138, 139, 140, 144, 146, 149, 153, 154, 165, 168, 170, 176, 182, 188, 189, 213, 219, 227, 240, 247, 254, 265, 270, 273, 278, 290, 295, 297, 317, 321, 324, 327, 328, 331, 334, 340, 345, 361, 366, 367, 372, 373, 375, 376, 377, 380, 381, 382, 384, 386, 387, 391, 392, 393, 396, 404, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 435, 439, 440, 442, 444, 445, 447, 449, 450, 451, 454, 464, 465, 466, 474, 484, 485, 486, 507, 511, 512, 537, 544, 547, 558, 559, 560, 561, 566, 567, 568, 569, 584, 605, 633, 634, 638, 643, 644, 645, 648, 649, 655, 691, 692, 693, 700, 701, 703, 704, 705, 791, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 837, 853, 876, 877, 882, 883, 884, 886, 887, 888, 895, 896, 904, 922, 931, 936, 973, 978, 993, 994, 996, 1000, 1004, 1005, 1007, 1008, 1009, 1010, 1014, 1016, 1017, 1018, 1019, 1024, 1028, 1030, 1033, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "new_data": [295, 380], "new_valu": [570, 571, 572, 573], "newaxi": [51, 53, 57, 61, 77, 113, 129, 135, 171, 195, 203, 209, 214, 215, 216, 218, 219, 230, 243, 245, 286, 296, 303, 358, 359, 407, 539, 1000], "newei": 1043, "newer": [170, 377, 396, 415], "newgroups20": 228, "newli": [376, 391, 417, 465, 1011, 1041, 1042, 1050], "newsgroup": [2, 46, 54, 57, 244, 272, 334, 353, 354, 371, 407, 418, 490, 491, 1030], "newsgroups_test": 373, "newsgroups_train": [373, 490], "newsgroups_vector": 491, "newsl": [888, 1014], "newslett": 372, "newswir": 373, "newton": [213, 231, 309, 613, 651, 661, 662, 672, 683, 864, 865, 1000, 1039, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "newton_cg": 1045, "next": [46, 62, 93, 111, 142, 143, 147, 157, 177, 185, 189, 206, 210, 213, 241, 247, 249, 253, 254, 258, 266, 277, 290, 316, 317, 318, 322, 331, 352, 356, 360, 361, 376, 378, 380, 382, 398, 404, 407, 410, 411, 414, 417, 511, 512, 613, 637, 695, 701, 703, 705, 784, 800, 801, 833, 969, 993, 997, 1003, 1004, 1014, 1028, 1032, 1035, 1048, 1049], "nezar": 1045, "nff": 702, "nfit": 331, "nfkd": [591, 592, 594, 1045], "nfor": 248, "nfrom": 175, "nft": 702, "ng": [410, 415, 694, 853, 1008, 1010, 1046], "ngiam": 1008, "ngo": 1047, "ngram_rang": [272, 334, 418, 591, 592, 594], "ngram_vector": 418, "ngroup": 266, "ngshya": 1046, "nguyen": [1045, 1046, 1049, 1050], "nguy\u1ec5n": 1050, "ni": [1041, 1046], "nic": 1048, "nice": [43, 100, 214, 247, 311, 365, 415], "nicer": 634, "nichol": 1039, "nichola": [1043, 1044, 1046], "nicholson": [1041, 1042, 1043], "nick": [168, 375, 1035, 1041, 1042, 1043, 1044], "nicki": 1049, "nickledav": 1041, "nicknam": 373, "nico": [1041, 1048], "nicol": 1042, "nicola": [0, 168, 399, 661, 1000, 1017, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "nicolashug": 1044, "nicolasservel": 1046, "nicolau": 1043, "nicula": [0, 120, 399, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "niculescu": [62, 64, 408, 439, 441], "nidhin": 1045, "niederb\u00fchl": 1043, "niederhut": [1043, 1045], "nielsen": [746, 1043], "nielsenmarkus11": [1042, 1043], "nigam": [842, 1006], "nigel": 1048, "night": 52, "nightli": [0, 366, 381, 382], "nightwalkx": 1051, "nihal": 1050, "nihar": 1043, "niket": 1049, "nikhil": 1049, "nikita": [1042, 1043, 1045, 1048, 1049, 1050], "nikla": [1045, 1046], "nikolai": [1038, 1039, 1040, 1041, 1043, 1044, 1049, 1051], "nil": 1047, "nilearn": 1023, "nilesh": 1043, "nilotp": [638, 640], "nima": 1050, "nima10khodaveisi": 1050, "ninertia": 97, "ningchi": 1041, "ninh": 191, "ninja": [376, 1028], "nip": [127, 375, 518, 544, 569, 644, 1004], "nipal": [413, 485, 486], "nipy_spectr": [51, 74, 80, 81, 84, 85, 93, 94], "nirvan": [1043, 1047], "nishan": 1045, "nishihara": 1047, "nishu": 1051, "nist": [375, 1004], "nistir": 375, "nit": 378, "nithish": 1053, "nitinramvelraj": 1050, "nitish": 1042, "nitya": 1045, "niuk": 1051, "niyogi": 1001, "nizam": 1043, "nizhibitski": 1036, "nk": 699, "nkish": 1046, "nkmean": 79, "nl": [52, 384], "nl1_ratio": 204, "nlasso": 198, "nlathia": 1041, "nlearn": 307, "nlog": 176, "nlogn": 695, "nlp": [373, 415, 418, 842, 846, 1002, 1028], "nls_max_it": 1040, "nltk": [418, 1022, 1023], "nm": 365, "nmcd": 111, "nmd": 236, "nmean": 124, "nmf": [2, 11, 54, 104, 384, 418, 538, 541, 547, 550, 1029, 1030, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "nmf_estim": 120, "nmi": [72, 410, 720, 739, 740, 760], "nmixtur": 79, "nmle": 111, "nmse": [44, 286], "nmslib": 291, "nmslib_": 291, "nmslibtransform": 291, "nn": [249, 418, 698], "nn_candid": 283, "nn_compon": [244, 245], "nn_sampl": [244, 283], "nndsvd": [415, 541, 543, 550, 1044, 1047], "nndsvda": [54, 415, 541, 543, 550, 1044, 1047], "nndsvdar": [415, 541, 543, 550, 1044], "nneq": 702, "nnl": [208, 660], "nnlnr": [1050, 1051], "nnmf": [418, 1029, 1030, 1035], "nntp": [352, 373], "nnz": [199, 353, 373, 702], "no_chang": 904, "no_interact": [564, 565, 1050], "no_mathjax": 378, "no_structur": [79, 95], "no_valid": [926, 992], "no_weight": 226, "no_weights_handl": 226, "noa": [1046, 1052], "noah": 1000, "noc": 51, "noced": 661, "nodar": 1048, "node": [2, 51, 76, 143, 147, 198, 320, 326, 327, 356, 360, 386, 387, 410, 412, 415, 417, 443, 444, 447, 465, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 653, 657, 659, 685, 686, 695, 847, 848, 915, 916, 917, 918, 919, 921, 957, 1007, 1009, 1010, 1011, 1020, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1052], "node_count": [320, 356, 360, 915, 916, 917, 918], "node_depth": 360, "node_id": [360, 919, 921], "node_idx": 360, "node_ind": 360, "node_index": 360, "node_position_model": 51, "noel": [0, 400, 1035, 1036, 1037, 1038, 1039, 1047], "noelano": 1047, "nof": 150, "nogil": 379, "noinfo": 250, "noir": 317, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 82, 85, 87, 88, 94, 95, 100, 107, 116, 120, 121, 123, 125, 127, 135, 137, 146, 151, 152, 169, 170, 171, 175, 179, 183, 193, 195, 196, 198, 202, 203, 208, 211, 212, 215, 216, 217, 218, 230, 236, 238, 240, 242, 243, 246, 271, 279, 284, 286, 303, 306, 307, 313, 318, 321, 327, 347, 358, 359, 361, 374, 380, 383, 408, 410, 415, 417, 419, 420, 421, 446, 448, 454, 514, 516, 517, 518, 519, 520, 521, 525, 527, 528, 533, 535, 537, 544, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 624, 625, 627, 628, 647, 648, 652, 653, 654, 656, 657, 658, 659, 666, 667, 668, 674, 682, 688, 689, 695, 884, 896, 902, 925, 997, 999, 1000, 1001, 1004, 1007, 1017, 1025, 1036, 1041, 1046, 1048, 1049], "noise_coef": 87, "noise_kernel": 175, "noise_level": [170, 175, 176, 615, 628], "noise_level_bound": [175, 176, 628], "noise_level_grid": 176, "noise_std": 177, "noise_vari": [200, 535, 659, 1000, 1049], "noise_variance_": [120, 200, 535, 537, 544, 659, 1042, 1049], "noise_variance_init": 535, "noiseless": [123, 1002], "noisi": [44, 69, 82, 88, 95, 121, 134, 164, 170, 176, 198, 212, 215, 236, 243, 262, 272, 278, 280, 281, 284, 316, 358, 359, 361, 410, 418, 420, 421, 446, 448, 452, 524, 527, 951, 999, 1001, 1007, 1019], "noisier": 1001, "noisili": 187, "noisy_circl": [79, 95], "noisy_moon": [79, 95], "noiz": 115, "nolan": 1052, "noll": [213, 231], "nomenclatur": [1000, 1041], "nomin": [187, 372, 392, 393, 417, 418, 584, 585, 719, 1014, 1024], "non": [0, 2, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 69, 70, 72, 82, 90, 95, 103, 107, 111, 113, 121, 122, 123, 125, 136, 143, 151, 152, 154, 164, 165, 167, 174, 176, 182, 183, 185, 186, 187, 188, 189, 192, 193, 198, 199, 201, 203, 206, 207, 209, 210, 211, 212, 214, 215, 219, 227, 228, 229, 231, 236, 237, 241, 242, 243, 244, 246, 250, 256, 258, 262, 263, 264, 265, 266, 271, 280, 288, 291, 295, 297, 309, 311, 313, 315, 316, 321, 322, 323, 324, 326, 327, 334, 336, 338, 343, 344, 345, 348, 349, 352, 353, 354, 360, 361, 365, 366, 370, 373, 374, 378, 379, 380, 383, 384, 386, 387, 390, 392, 393, 404, 408, 410, 411, 414, 416, 417, 418, 419, 420, 422, 439, 443, 447, 448, 452, 454, 458, 464, 465, 466, 467, 469, 470, 490, 499, 500, 506, 507, 511, 529, 535, 538, 539, 541, 543, 547, 550, 552, 554, 555, 556, 560, 561, 562, 563, 564, 565, 567, 568, 569, 575, 591, 592, 594, 595, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 633, 634, 638, 641, 646, 653, 655, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 675, 679, 680, 681, 688, 689, 690, 691, 692, 693, 694, 695, 697, 701, 702, 705, 709, 710, 715, 718, 720, 722, 723, 729, 730, 731, 738, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 781, 785, 788, 791, 792, 793, 794, 797, 800, 801, 803, 804, 808, 810, 811, 812, 813, 815, 821, 829, 833, 836, 855, 857, 858, 859, 862, 867, 868, 870, 871, 872, 875, 879, 880, 881, 882, 883, 884, 886, 887, 894, 895, 896, 897, 898, 900, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 932, 933, 934, 949, 951, 955, 958, 966, 993, 994, 995, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "non_determinist": [380, 926, 1049], "non_neg": [585, 1042], "non_negative_factor": [2, 1044, 1046, 1047, 1048, 1052], "non_nest": 276, "non_nested_scor": 276, "non_nested_scores_lin": 276, "non_noisy_label": 326, "non_outliers_mask": 311, "non_zero": [46, 51], "nonblasdotwarn": 1047, "none": [43, 47, 48, 49, 52, 55, 63, 66, 69, 74, 76, 77, 79, 85, 87, 88, 89, 95, 122, 125, 129, 138, 142, 143, 145, 148, 149, 161, 168, 171, 177, 178, 189, 193, 213, 214, 221, 224, 231, 233, 246, 247, 248, 250, 264, 266, 271, 272, 283, 296, 298, 302, 315, 318, 322, 323, 331, 334, 339, 341, 342, 345, 346, 347, 352, 353, 373, 374, 375, 378, 380, 385, 387, 392, 401, 404, 410, 414, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 506, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 710, 711, 712, 714, 715, 716, 717, 719, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 737, 738, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 926, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 943, 945, 950, 951, 954, 955, 957, 958, 962, 963, 966, 969, 972, 974, 977, 978, 984, 987, 988, 990, 992, 993, 1000, 1004, 1014, 1017, 1020, 1030, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "nonecheck": 379, "nonetheless": [392, 1004], "nonexist": 635, "nonflavanoid": 375, "nonlinear": [286, 323, 647, 691, 692, 696, 699, 873, 1000, 1001, 1009, 1014], "nonmetr": [693, 697, 1001], "nonneg": [410, 415, 455, 541, 543, 550, 884], "nonner": 1046, "nono": 398, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 398, "nonoisomapisomapspectralembeddingspectr": 398, "nonojustlookingjust": 398, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 398, "nonolinearsvclinear": 398, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 398, "nonopredict": 398, "nonopredictingstructurepredict": 398, "nonosvcsvcensembleclassifiersensembl": 398, "nonosvr": 398, "nonotoughlucktough": 398, "nonoverlap": 375, "nonparametr": [419, 420, 610, 611], "nonzero": [55, 57, 129, 212, 244, 275, 354, 407, 421, 446, 526, 527, 534, 540, 545, 551, 591, 594, 688, 689, 702, 849, 850, 853, 855, 857, 858, 1004], "nonzero_coef": 1000, "noptic": 98, "noptimum": 176, "noqa": [100, 126, 146, 168, 181, 182, 187, 210, 233, 235, 282, 283, 322, 352, 382, 582, 583, 630, 806, 807, 993, 1044], "nor": [146, 274, 352, 361, 365, 383, 390, 408, 418, 439, 448, 597, 937, 1008, 1020, 1046], "norbert": [0, 368, 1037, 1047, 1048, 1049], "nordbi": 1052, "nore\u00f1a": 1048, "norm": [2, 51, 53, 54, 55, 66, 70, 75, 87, 123, 173, 176, 193, 198, 199, 204, 236, 256, 257, 258, 260, 262, 268, 272, 296, 311, 341, 353, 384, 387, 392, 410, 418, 419, 444, 445, 449, 461, 462, 466, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 491, 534, 537, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 592, 593, 594, 600, 646, 649, 650, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 675, 677, 679, 681, 684, 687, 688, 689, 693, 695, 696, 697, 773, 844, 879, 894, 907, 909, 912, 985, 986, 997, 1000, 1002, 1004, 1014, 1018, 1038, 1040, 1042, 1046], "norm1": 466, "norm2": 466, "norm_diag": 530, "norm_laplacian": 698, "norm_ord": [600, 1042], "norm_y_weight": 1047, "normal": [2, 25, 36, 44, 49, 51, 55, 57, 58, 63, 65, 70, 72, 75, 79, 80, 90, 94, 95, 99, 105, 107, 109, 110, 111, 115, 116, 121, 134, 135, 137, 140, 145, 146, 149, 150, 151, 163, 173, 176, 177, 182, 183, 185, 186, 192, 193, 194, 195, 196, 198, 203, 206, 208, 211, 215, 216, 217, 219, 227, 231, 236, 250, 256, 261, 262, 264, 265, 268, 271, 277, 296, 297, 300, 310, 312, 316, 321, 324, 327, 328, 333, 341, 353, 354, 361, 370, 373, 374, 375, 378, 383, 387, 391, 392, 406, 407, 408, 410, 411, 413, 416, 417, 418, 422, 442, 451, 453, 454, 455, 464, 466, 467, 477, 484, 485, 486, 491, 499, 515, 518, 522, 529, 530, 536, 539, 544, 545, 547, 551, 552, 555, 556, 557, 560, 561, 562, 563, 565, 566, 567, 568, 569, 582, 583, 585, 591, 592, 593, 594, 614, 628, 630, 642, 661, 662, 672, 675, 679, 683, 690, 694, 698, 700, 706, 707, 709, 721, 727, 729, 737, 739, 744, 748, 752, 753, 755, 758, 759, 760, 764, 773, 797, 798, 799, 806, 807, 833, 835, 844, 846, 852, 853, 856, 867, 868, 871, 872, 875, 877, 880, 881, 882, 883, 884, 885, 887, 892, 893, 895, 896, 897, 898, 902, 903, 915, 916, 917, 918, 950, 951, 955, 979, 980, 985, 986, 996, 998, 1000, 1001, 1002, 1003, 1006, 1010, 1015, 1017, 1019, 1020, 1025, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "normalis": [186, 614, 791], "normalization_": [642, 996], "normalize_compon": [1043, 1045], "normalize_i": [175, 179, 420, 614, 1049], "normalized_discounted_cumulative_gain": 759, "normalized_mutual_info_scor": [2, 72, 410, 739, 758, 798, 1004, 1043, 1049], "normalized_stress": [233, 693, 697, 1001, 1050], "normalized_weight": 195, "norms_squar": 689, "north": [375, 410], "northern": 317, "northrop": 51, "northwestern": 661, "norvan": 1045, "nose": [375, 1038, 1042], "nosetest": 1037, "not_memb": 186, "notabl": [247, 311, 372, 392, 409, 499, 731, 880, 1001, 1003, 1007, 1039, 1042, 1049], "notarstefano": [1043, 1044], "notat": [150, 392, 411, 415, 418, 593, 715, 1000, 1004, 1044, 1051], "notch": 1028, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 86, 99, 103, 104, 111, 113, 115, 116, 118, 123, 137, 138, 140, 142, 146, 147, 151, 168, 170, 177, 181, 185, 186, 187, 188, 189, 191, 200, 202, 206, 213, 214, 215, 217, 221, 227, 229, 231, 233, 234, 235, 237, 240, 241, 243, 245, 246, 247, 248, 250, 257, 265, 266, 267, 271, 274, 277, 279, 285, 290, 291, 293, 297, 298, 307, 311, 312, 315, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 333, 335, 341, 345, 352, 360, 365, 366, 372, 375, 376, 378, 379, 380, 382, 384, 385, 390, 391, 392, 396, 401, 404, 405, 408, 410, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 435, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 489, 492, 499, 501, 512, 518, 522, 530, 533, 536, 537, 541, 542, 543, 544, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 600, 602, 603, 605, 606, 607, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 632, 633, 635, 636, 638, 639, 641, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 702, 703, 710, 711, 716, 718, 723, 724, 725, 726, 727, 731, 732, 733, 735, 737, 741, 744, 749, 757, 758, 761, 766, 767, 771, 773, 777, 781, 785, 786, 787, 788, 790, 791, 792, 795, 796, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 923, 924, 926, 929, 939, 941, 950, 951, 963, 966, 978, 987, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1030, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 379, 380, 384, 411, 470, 905, 1020, 1022, 1023, 1024, 1046, 1049], "notes_neighbor": 1035, "notfittederror": [2, 132, 392, 856, 987, 1039, 1041, 1044, 1045, 1051, 1052], "noth": [57, 102, 328, 352, 353, 383, 545, 717, 870, 879, 934, 1014], "nothman": [0, 393, 399, 418, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "notic": [46, 52, 62, 63, 70, 86, 90, 111, 137, 139, 140, 146, 149, 167, 193, 198, 240, 253, 268, 269, 271, 272, 274, 280, 281, 291, 316, 345, 352, 353, 354, 361, 380, 383, 393, 409, 414, 417, 499, 544, 566, 993, 1003, 1004, 1010, 1032, 1048], "notif": 382, "notifi": [2, 575, 576, 577, 1033, 1045], "notimplementederror": [556, 557, 894, 1042, 1052], "notin": 410, "notion": [280, 345, 353, 367, 390, 410, 415, 417, 1000, 1004], "notmatthancock": [1043, 1045], "noto": 1048, "notplancha": 1053, "noun": 392, "nouri": [365, 1036, 1038], "novak": 1038, "novarti": 51, "novaya": [1045, 1048], "novel": [227, 297, 340, 361, 408, 993], "novelti": [183, 227, 240, 250, 292, 298, 340, 853, 1025, 1026, 1029, 1030, 1035, 1043], "novemb": [168, 213, 231, 375, 382, 1040, 1041, 1043], "novic": 1037, "now": [43, 44, 46, 52, 55, 58, 86, 90, 103, 116, 125, 134, 135, 139, 141, 142, 143, 146, 147, 154, 157, 168, 170, 175, 176, 177, 182, 185, 186, 187, 188, 191, 193, 195, 199, 200, 202, 214, 215, 217, 237, 245, 247, 265, 267, 271, 274, 282, 283, 284, 285, 288, 294, 316, 321, 322, 324, 325, 326, 327, 328, 332, 341, 352, 353, 354, 361, 365, 367, 373, 378, 379, 380, 384, 390, 391, 392, 396, 407, 410, 414, 415, 417, 418, 422, 430, 496, 511, 512, 515, 539, 552, 582, 583, 585, 630, 633, 652, 656, 661, 666, 687, 729, 759, 800, 801, 806, 807, 839, 854, 866, 867, 978, 994, 1000, 1004, 1010, 1013, 1014, 1019, 1020, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "nowadai": 378, "nozawa": [1050, 1051], "np": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 124, 127, 129, 130, 135, 136, 137, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 161, 163, 164, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 250, 252, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 290, 291, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 309, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 359, 360, 361, 365, 372, 373, 378, 380, 383, 384, 387, 390, 392, 401, 407, 410, 411, 414, 415, 416, 417, 418, 420, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 487, 496, 499, 500, 503, 507, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 564, 566, 567, 568, 569, 572, 573, 584, 585, 588, 589, 591, 592, 596, 597, 600, 604, 607, 609, 612, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 690, 694, 695, 697, 698, 702, 705, 706, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 747, 751, 756, 757, 758, 759, 766, 772, 776, 781, 784, 785, 786, 787, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 829, 830, 831, 833, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 852, 853, 854, 855, 857, 858, 859, 863, 864, 871, 872, 874, 875, 880, 881, 882, 883, 884, 886, 887, 888, 895, 896, 899, 900, 901, 902, 903, 904, 907, 909, 910, 912, 913, 915, 916, 917, 918, 924, 929, 930, 931, 932, 933, 934, 936, 938, 939, 949, 950, 951, 957, 958, 965, 966, 968, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 993, 994, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1014, 1015, 1016, 1018, 1019, 1020, 1036, 1038, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "npach": [1050, 1051], "npo": 236, "npolynomi": 43, "nprior": 256, "npropag": 79, "nqy18": 418, "nreceiv": 280, "nrow": [43, 44, 66, 68, 70, 90, 99, 105, 120, 149, 179, 187, 213, 215, 221, 231, 233, 234, 237, 250, 265, 273, 274, 291, 313, 315, 316, 325, 331, 347, 348, 374], "nsampl": [380, 800, 801], "nswdemand": 149, "nswprice": 149, "nt": 55, "nt_uri": 55, "ntest": 300, "ntf": 702, "nth": [278, 710, 1004], "nthe": [187, 269, 360], "ntime": [50, 282], "nto": [219, 280], "ntol": 168, "ntrain": 83, "ntree": 43, "ntrue": [45, 330, 331], "ntt": 702, "ntu": [191, 372, 489, 511, 512, 661], "ntwo": 374, "nu": [2, 46, 48, 50, 179, 227, 240, 340, 365, 417, 420, 622, 680, 909, 910, 911, 1010, 1018, 1019, 1046, 1050], "nuanc": 392, "nuc": 288, "nuclear": [168, 375], "nuclei": [168, 375], "nudge_dataset": 309, "nuff": 1042, "nugmanov": [1043, 1044], "nuisanc": 420, "nukariya": [1047, 1048], "null": [79, 103, 186, 187, 188, 265, 271, 277, 410, 414, 499, 651, 672, 683, 707, 734, 760, 798, 832, 1000, 1001, 1004, 1019, 1045], "null_count": 52, "nullabl": [630, 631, 632, 633, 1046, 1050], "nullformatt": [233, 235, 238, 291], "nullloc": 296, "num": [43, 51, 103, 168, 170, 175, 176, 177, 187, 188, 215, 278, 279, 324, 326, 327, 417, 499, 635], "num_col": 254, "num_cor": 384, "num_depend": 265, "num_featur": [1002, 1050], "num_linear_processor": 154, "num_missing_cel": 149, "num_pip": 254, "num_preprocess": 466, "num_proc": [242, 321], "num_sampl": [803, 817, 1050], "num_selector": 154, "num_sent": 102, "num_thread": 291, "num_tree_processor": 154, "num_trial": 276, "numba": [291, 1024], "number": [2, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 94, 95, 96, 100, 102, 103, 104, 105, 107, 113, 115, 116, 118, 120, 122, 124, 125, 127, 134, 135, 137, 140, 142, 144, 145, 146, 147, 150, 154, 156, 164, 165, 166, 168, 178, 179, 182, 183, 186, 187, 191, 198, 202, 212, 213, 214, 215, 220, 221, 227, 228, 229, 230, 231, 233, 240, 244, 248, 250, 251, 256, 257, 259, 261, 262, 264, 265, 266, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 284, 288, 291, 293, 297, 298, 311, 313, 314, 317, 320, 321, 322, 323, 324, 325, 326, 328, 334, 341, 346, 348, 353, 354, 356, 360, 361, 366, 367, 370, 372, 373, 374, 375, 376, 378, 381, 382, 384, 385, 386, 387, 390, 391, 392, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 433, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 584, 585, 586, 587, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 706, 707, 708, 710, 715, 716, 717, 719, 721, 723, 727, 731, 732, 733, 734, 737, 738, 741, 743, 755, 758, 777, 781, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 933, 934, 937, 950, 951, 954, 955, 972, 974, 977, 978, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "number_norm": 57, "numbernormalizingvector": 57, "numer": [2, 43, 52, 57, 99, 103, 107, 143, 154, 168, 175, 178, 187, 188, 202, 213, 231, 250, 252, 254, 278, 301, 317, 323, 327, 354, 372, 373, 375, 381, 383, 384, 390, 391, 392, 406, 410, 412, 417, 418, 419, 420, 422, 423, 442, 445, 449, 461, 473, 474, 477, 480, 491, 492, 493, 499, 503, 504, 505, 507, 508, 513, 534, 536, 538, 543, 544, 550, 564, 565, 570, 584, 593, 614, 620, 623, 630, 633, 635, 636, 649, 655, 657, 675, 690, 693, 697, 717, 781, 791, 797, 803, 806, 807, 809, 817, 826, 829, 830, 831, 834, 842, 843, 844, 845, 846, 864, 865, 870, 875, 880, 881, 888, 919, 920, 921, 933, 934, 950, 951, 993, 994, 1000, 1001, 1005, 1012, 1014, 1015, 1020, 1027, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "numeric_featur": [103, 324], "numeric_onli": 187, "numeric_preprocessor": 252, "numeric_transform": [103, 324], "numerical_column": [186, 188, 469], "numerical_columns_subset": 143, "numerical_featur": [187, 317], "numerical_pip": 188, "numerical_transform": 103, "numfocu": 0, "numpi": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 130, 135, 136, 137, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 161, 163, 164, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 290, 291, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 309, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 359, 360, 361, 365, 371, 372, 373, 376, 378, 379, 380, 381, 384, 386, 387, 390, 391, 392, 396, 401, 403, 404, 406, 407, 410, 411, 414, 415, 416, 417, 418, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 487, 492, 496, 497, 499, 506, 509, 511, 512, 524, 530, 534, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 572, 573, 584, 585, 588, 589, 591, 592, 594, 604, 607, 621, 630, 631, 632, 633, 634, 635, 636, 646, 649, 650, 652, 655, 656, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 675, 679, 680, 681, 687, 690, 691, 694, 695, 696, 697, 698, 702, 705, 706, 709, 710, 712, 715, 717, 729, 730, 732, 733, 735, 737, 738, 741, 742, 757, 759, 776, 782, 784, 785, 786, 787, 790, 791, 792, 797, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 909, 910, 912, 913, 915, 929, 930, 931, 932, 936, 938, 948, 949, 950, 951, 955, 957, 958, 965, 966, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 993, 994, 999, 1000, 1002, 1004, 1005, 1007, 1010, 1014, 1016, 1019, 1020, 1022, 1024, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "numpydoc": [378, 392, 396, 403], "nune": 1036, "nuniformli": 150, "nuniqu": 317, "nurseit": 1052, "nusvc": [2, 365, 439, 910, 1005, 1019, 1035, 1036, 1037, 1040, 1043, 1045, 1046, 1047, 1049], "nusvr": [2, 46, 365, 913, 1019, 1037, 1043, 1045, 1046, 1047, 1049, 1050], "nutshel": 1002, "nv": 51, "nvidia": [0, 390], "nvirginica": 280, "nwanna": 1050, "nweight": 156, "nwith": [72, 90, 94, 167, 353], "nx": [50, 304, 373, 501], "nxorabl": 1045, "ny": [50, 52, 270, 304, 373, 375, 501, 994, 1016], "nyc": [1022, 1028], "nymark": 1050, "nystroem": [2, 43, 181, 227, 240, 245, 370, 643, 644, 645, 680, 873, 912, 913, 1030, 1036, 1042, 1045, 1047, 1048, 1049], "nystroem_approx_svm": 245, "nystroem_scor": 245, "nystroem_tim": 245, "nystrom": [882, 1044, 1045], "nystr\u00f6m": [43, 996], "nyu": [0, 856], "nz": 533, "nzw": 1043, "n\u00e1jera": [1039, 1040, 1041, 1042], "n\u00e1pole": 1048, "o": [0, 55, 57, 64, 66, 73, 82, 88, 93, 94, 96, 97, 113, 115, 122, 151, 168, 178, 200, 206, 211, 213, 228, 246, 256, 265, 271, 273, 280, 311, 312, 316, 321, 324, 327, 334, 345, 356, 365, 373, 375, 378, 386, 396, 410, 412, 415, 417, 421, 423, 446, 449, 450, 452, 475, 477, 502, 537, 607, 630, 669, 670, 695, 835, 863, 878, 919, 972, 996, 998, 1000, 1001, 1004, 1005, 1007, 1008, 1018, 1019, 1020, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "oa": [2, 49, 65, 70, 108, 112, 113, 127, 148, 183, 300, 302, 412, 471, 472, 475, 476, 478, 479, 515, 552, 803, 998, 1025], "oa_ms": 110, "oa_shrinkag": 110, "oak": 317, "oarc": 1000, "ob2019": 1004, "obaja": 1039, "obatin": 316, "obei": [392, 1002], "obj": [247, 404, 570, 571, 941, 960, 962, 963, 964, 969], "obj_func": [613, 614], "object": [2, 43, 50, 53, 54, 57, 63, 64, 79, 83, 95, 99, 102, 103, 123, 126, 132, 149, 154, 159, 167, 175, 183, 187, 198, 209, 213, 229, 231, 239, 247, 251, 253, 254, 265, 269, 278, 280, 281, 283, 304, 317, 323, 324, 326, 327, 330, 353, 354, 361, 371, 372, 373, 378, 379, 381, 383, 384, 385, 387, 391, 392, 393, 401, 404, 410, 411, 412, 415, 418, 419, 420, 424, 426, 431, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 714, 721, 735, 736, 745, 761, 762, 784, 785, 792, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 922, 933, 934, 935, 936, 937, 940, 941, 945, 947, 956, 958, 959, 960, 961, 962, 963, 964, 966, 968, 969, 988, 989, 991, 1000, 1001, 1002, 1003, 1007, 1010, 1011, 1014, 1017, 1018, 1019, 1023, 1024, 1025, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "object_nam": [247, 960, 963], "obozinski": 415, "obscur": [1011, 1051], "observ": [2, 43, 44, 46, 48, 50, 52, 53, 58, 61, 64, 70, 72, 75, 78, 86, 95, 103, 109, 111, 112, 113, 121, 122, 125, 126, 127, 134, 137, 138, 140, 141, 146, 149, 150, 153, 168, 170, 173, 175, 176, 177, 179, 186, 187, 188, 193, 194, 208, 209, 211, 213, 214, 215, 217, 227, 231, 237, 238, 243, 244, 250, 265, 267, 271, 273, 274, 278, 284, 285, 291, 294, 297, 304, 316, 326, 328, 333, 340, 341, 345, 346, 352, 353, 354, 358, 359, 373, 375, 392, 396, 408, 410, 412, 413, 414, 415, 416, 419, 420, 443, 445, 447, 448, 449, 451, 461, 462, 471, 472, 473, 474, 475, 476, 477, 478, 527, 535, 554, 555, 566, 613, 614, 649, 655, 660, 704, 719, 721, 761, 824, 845, 853, 886, 888, 1000, 1003, 1004, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1027, 1036, 1048, 1049, 1050, 1051], "observatori": 175, "obsolet": [1035, 1051], "obstruct": 1042, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 88, 90, 91, 103, 106, 107, 125, 127, 134, 143, 146, 147, 152, 159, 168, 172, 174, 186, 187, 198, 213, 215, 217, 227, 237, 250, 256, 257, 258, 265, 267, 271, 272, 273, 277, 280, 284, 294, 316, 323, 339, 345, 353, 354, 360, 361, 373, 375, 380, 392, 404, 408, 409, 410, 412, 413, 415, 417, 418, 419, 420, 439, 444, 471, 499, 535, 536, 558, 559, 560, 561, 562, 563, 566, 567, 568, 596, 609, 617, 648, 662, 664, 669, 671, 675, 677, 679, 680, 690, 711, 715, 729, 742, 759, 796, 809, 826, 832, 835, 836, 839, 853, 864, 884, 896, 909, 912, 915, 916, 951, 993, 994, 996, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1041, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "obviat": 996, "obviou": [186, 345, 361, 365, 378, 407, 415], "obvious": [182, 365], "oc": 1050, "occas": 378, "occasion": [393, 730, 1044], "occup": [186, 311, 327, 499], "occupation_cler": 186, "occupation_manag": 186, "occupation_oth": 186, "occupation_profession": 186, "occupation_sal": 186, "occupation_servic": 186, "occupi": [410, 1004], "occur": [54, 102, 144, 213, 217, 231, 348, 361, 378, 386, 393, 407, 410, 412, 414, 418, 446, 511, 512, 575, 584, 593, 630, 674, 801, 803, 806, 807, 809, 817, 826, 829, 830, 831, 834, 877, 938, 1004, 1006, 1014, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "occurr": [2, 213, 317, 353, 354, 373, 378, 382, 410, 418, 572, 573, 584, 592, 593, 620, 630, 631, 632, 633, 786, 842, 870, 1006, 1036, 1041], "ocean": 304, "ocsvm": [48, 227], "oct": [695, 772, 1001, 1007], "octob": [110, 373, 1035, 1042, 1048, 1049, 1051], "od280": 375, "od315": 375, "odd": [274, 417, 517, 715, 1004, 1042, 1043], "ofcategoriesknownnumb": 398, "off": [44, 51, 53, 72, 74, 75, 81, 85, 86, 109, 113, 115, 120, 140, 149, 167, 168, 183, 217, 234, 245, 249, 263, 264, 270, 272, 273, 274, 284, 288, 311, 328, 331, 333, 335, 341, 350, 352, 373, 378, 380, 392, 409, 410, 412, 419, 444, 499, 556, 557, 562, 563, 591, 594, 637, 659, 661, 695, 718, 800, 801, 803, 806, 807, 817, 819, 825, 830, 868, 887, 955, 1003, 1009, 1019, 1024, 1025, 1035, 1039, 1040, 1042], "offer": [43, 140, 201, 380, 386, 390, 391, 392, 396, 404, 414, 415, 417, 418, 993, 994, 1005, 1008, 1020, 1023, 1024, 1028, 1041, 1053], "offic": 1028, "offici": [373, 380, 390, 392, 396, 496, 500, 1023, 1043, 1044, 1047], "offlin": [265, 365, 378], "offset": [137, 191, 390, 412, 415, 471, 511, 512, 566, 635, 636, 644, 645, 647, 648, 680, 731, 778, 780, 853, 911, 1004, 1018, 1043], "offset_": [471, 566, 680, 853, 911, 1043], "offset_init": 680, "offsetbox": 234, "offsetimag": 234, "ofmulticlass": 1019, "often": [43, 57, 61, 62, 64, 69, 102, 106, 140, 149, 152, 174, 181, 186, 187, 214, 231, 234, 250, 258, 273, 276, 311, 316, 341, 350, 352, 353, 354, 365, 366, 372, 373, 375, 378, 380, 383, 386, 390, 391, 392, 395, 398, 404, 408, 410, 411, 412, 414, 415, 417, 418, 420, 422, 470, 524, 527, 536, 539, 635, 649, 650, 655, 656, 663, 664, 665, 666, 675, 677, 690, 731, 877, 885, 893, 905, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1014, 1017, 1018, 1020, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "og": 418, "ogbonna": 1048, "ogordon100": 1048, "ogrid": 53, "ogu": 418, "ogura": 1050, "oh": [880, 1045], "ohad": 1049, "ohayon": [1043, 1044, 1051], "ohio": 373, "ohno": 408, "oj_lappi": 1047, "oja": [422, 536], "ojala": [277, 414, 832], "ojeda": 1049, "ok": [49, 378, 1010], "okal": 1039, "okbalefthand": 1041, "okhlopkov": [1041, 1042], "okon": 1049, "okroshiashvili": 1048, "ol": [193, 203, 208, 210, 211, 219, 230, 323, 659, 1000], "ol2001": 994, "olatunji": 1050, "old": [231, 378, 382, 384, 410, 470, 539, 649, 655, 905, 1001, 1024, 1035, 1040, 1041, 1043, 1048, 1049, 1050], "olden": 1043, "older": [247, 377, 382, 404, 466, 1027, 1033, 1038, 1045, 1047], "oldest": 499, "oldid": 1004, "oldja": 1047, "oleg": 1045, "oleggio": 1039, "olegovich": 1042, "oleh": [1047, 1049], "oleksandr": [1043, 1044, 1045, 1046, 1049], "oleksii": 1052, "olemiss": 682, "olga": [631, 994], "oli": 1042, "oliblum90": [1042, 1043], "olicairn": 1046, "olimpio": 1043, "oliph": 1035, "oliv": [1043, 1044, 1046, 1047, 1048], "oliveira": [1041, 1043, 1045, 1049], "olivetti": [2, 120, 371, 415, 498, 1030, 1035, 1043], "olivetti_fac": 498, "olivi": [0, 393, 399, 903, 1017, 1022, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "oll": 1050, "olr": 193, "olsen": 1042, "olshen": [915, 916, 1020], "olson": 1041, "olszewski": 1048, "olvi": [168, 375], "om": 1042, "omar": [0, 399, 1045, 1050, 1051, 1052, 1053], "omarmanzoor": 1051, "omega": [348, 413, 998], "omega_": 998, "omega_k": [413, 998], "omer": 1040, "omit": [141, 185, 186, 335, 383, 423, 477, 537, 669, 671, 679, 810, 812, 835, 836, 839, 842, 843, 844, 845, 846, 864, 1002, 1009], "omohundro": 1007, "omp": [2, 123, 129, 212, 415, 534, 540, 545, 551, 667, 668, 688, 689, 1026, 1030, 1035, 1043], "omp_cv": 212, "omp_get_max_thread": 379, "omp_num_thread": 366, "omtcyfz": 1042, "onc": [2, 43, 47, 83, 165, 168, 170, 175, 234, 247, 250, 265, 269, 272, 284, 285, 288, 291, 317, 320, 324, 352, 354, 360, 361, 365, 367, 372, 373, 376, 378, 382, 383, 384, 385, 386, 391, 392, 393, 404, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 451, 453, 455, 474, 511, 512, 541, 547, 554, 562, 563, 593, 594, 600, 614, 622, 630, 650, 654, 656, 658, 664, 666, 668, 669, 670, 671, 679, 680, 681, 700, 715, 719, 721, 739, 784, 804, 808, 811, 821, 825, 842, 843, 844, 845, 846, 919, 1000, 1001, 1007, 1014, 1018, 1019, 1020, 1032, 1035, 1043, 1045, 1046, 1047, 1048, 1052], "one": [0, 2, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 81, 86, 88, 90, 91, 93, 94, 97, 99, 103, 112, 120, 123, 125, 126, 129, 139, 140, 144, 146, 149, 150, 154, 157, 167, 168, 170, 177, 178, 181, 185, 186, 187, 188, 189, 191, 193, 194, 198, 202, 203, 205, 206, 207, 209, 213, 215, 222, 223, 228, 231, 235, 240, 247, 248, 250, 254, 258, 261, 265, 267, 268, 269, 271, 272, 274, 275, 278, 279, 280, 281, 288, 290, 291, 296, 309, 312, 313, 316, 317, 320, 322, 323, 324, 328, 333, 340, 341, 349, 352, 353, 354, 356, 360, 361, 365, 366, 367, 372, 373, 374, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 392, 393, 395, 396, 398, 401, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 459, 462, 464, 466, 471, 476, 489, 490, 492, 493, 495, 496, 497, 498, 499, 503, 504, 505, 506, 507, 508, 511, 512, 513, 515, 517, 537, 542, 543, 544, 546, 550, 554, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 584, 586, 587, 591, 592, 593, 594, 613, 614, 618, 619, 623, 630, 633, 635, 636, 637, 638, 646, 650, 651, 652, 653, 657, 660, 661, 662, 664, 669, 671, 672, 674, 676, 677, 678, 679, 681, 683, 691, 695, 698, 702, 706, 712, 714, 723, 732, 733, 737, 741, 753, 754, 757, 766, 774, 777, 781, 782, 783, 784, 786, 787, 790, 791, 793, 794, 795, 796, 799, 800, 801, 802, 803, 806, 807, 809, 810, 811, 813, 815, 817, 821, 822, 825, 826, 828, 830, 831, 833, 834, 835, 836, 837, 839, 840, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 863, 867, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 886, 887, 888, 891, 893, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 929, 939, 943, 953, 974, 993, 994, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "one_class": 248, "one_d_arrai": 924, "one_d_label": 927, "one_hot": [317, 328], "one_hot_encod": [43, 143], "one_hot_encoder_": 569, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 143, "one_hot_tim": 43, "one_imag": [418, 587, 590], "one_vs_on": [420, 613, 1005], "one_vs_rest": [613, 1005], "oneclasssvm": [2, 48, 50, 227, 240, 323, 340, 566, 680, 853, 1010, 1018, 1019, 1037, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "oned": 396, "onehot": [252, 312, 313, 411, 872, 1014], "onehot_categor": [213, 231], "onehotencod": [2, 43, 103, 139, 143, 154, 186, 187, 213, 231, 242, 250, 252, 254, 317, 321, 323, 326, 327, 328, 372, 392, 411, 417, 468, 469, 569, 584, 585, 870, 874, 875, 878, 881, 888, 994, 1014, 1036, 1039, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "onehotencoderonehotencod": [103, 139, 154, 186, 187, 242, 252, 321, 324], "ones": [43, 50, 70, 78, 88, 103, 112, 144, 150, 170, 191, 198, 217, 218, 240, 243, 247, 271, 279, 282, 298, 315, 331, 350, 365, 366, 378, 386, 392, 410, 412, 414, 417, 425, 428, 432, 452, 535, 569, 584, 613, 614, 621, 647, 648, 661, 662, 673, 679, 706, 799, 805, 810, 821, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 882, 886, 957, 1000, 1004, 1009, 1010, 1014, 1019, 1035, 1043, 1044, 1045], "onetoonefeaturemixin": [2, 380, 434], "onevsoneclassifi": [2, 288, 401, 836, 837, 1036, 1038, 1039, 1041, 1042, 1044, 1047, 1049, 1052], "onevsrestclassifi": [2, 66, 205, 228, 248, 278, 280, 288, 401, 408, 661, 662, 835, 837, 907, 1036, 1037, 1039, 1041, 1042, 1048, 1049, 1052, 1053], "ong": 711, "ongari": 1052, "onggo": 1051, "ongo": [326, 379, 393], "onli": [2, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 82, 86, 88, 91, 99, 102, 103, 104, 106, 107, 112, 123, 124, 126, 130, 134, 136, 141, 142, 143, 145, 153, 154, 163, 164, 165, 168, 170, 172, 177, 179, 182, 183, 185, 186, 187, 191, 192, 197, 198, 202, 209, 213, 214, 216, 219, 221, 222, 231, 233, 234, 240, 242, 244, 246, 247, 251, 254, 256, 257, 258, 261, 262, 265, 267, 269, 271, 273, 274, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 297, 299, 302, 304, 308, 311, 312, 316, 317, 322, 323, 330, 331, 333, 337, 338, 341, 345, 346, 348, 349, 352, 353, 354, 356, 357, 360, 361, 365, 366, 367, 371, 372, 373, 375, 376, 378, 380, 382, 383, 384, 385, 386, 387, 390, 392, 393, 396, 401, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 430, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 491, 492, 493, 495, 497, 499, 500, 503, 504, 505, 506, 507, 508, 511, 512, 513, 515, 519, 522, 526, 527, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 710, 712, 716, 729, 732, 733, 737, 739, 740, 741, 744, 746, 759, 761, 763, 777, 781, 782, 783, 784, 786, 787, 790, 791, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 924, 926, 927, 928, 929, 931, 932, 933, 934, 937, 939, 943, 951, 953, 957, 959, 964, 969, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "onlin": [2, 44, 45, 47, 54, 71, 84, 120, 123, 183, 192, 221, 227, 249, 265, 307, 367, 373, 377, 383, 392, 410, 415, 418, 420, 444, 448, 449, 451, 498, 505, 534, 539, 540, 541, 542, 548, 549, 585, 587, 661, 669, 670, 671, 679, 681, 833, 842, 843, 844, 845, 846, 849, 850, 855, 857, 858, 876, 877, 887, 907, 908, 996, 1000, 1008, 1010, 1022, 1025, 1026, 1028, 1030, 1035, 1039, 1040, 1042, 1050], "onlineldavb": 539, "only_non_neg": 1048, "only_physical_cor": 140, "onnx": [1023, 1024, 1030], "onnxruntim": 404, "onto": [116, 234, 235, 245, 311, 390, 415, 418, 422, 448, 450, 463, 536, 542, 546, 630, 631, 633, 691, 998, 1002, 1007], "onward": [881, 1039, 1053], "onx": 404, "oob": [133, 145, 183, 417, 518, 567, 1024, 1025, 1037, 1048, 1052], "oob_best_it": 145, "oob_color": 145, "oob_decision_function_": [558, 560, 567], "oob_error": 138, "oob_improvement_": [145, 417, 562, 563, 1037], "oob_lin": 145, "oob_prediction_": [559, 561, 568], "oob_scor": [138, 417, 558, 559, 560, 561, 567, 568, 1040, 1042], "oob_score_": [138, 558, 559, 560, 561, 562, 563, 567, 568, 1037, 1051], "oob_scores_": [562, 563, 1051], "op": [382, 429, 661, 662, 669, 670, 671, 679, 680, 681, 864, 865, 907, 1014], "opaqu": 1012, "open": [0, 47, 51, 55, 235, 372, 373, 376, 377, 378, 382, 384, 390, 391, 393, 404, 411, 418, 489, 499, 511, 512, 994, 1023, 1028, 1038, 1042, 1043, 1045, 1051], "open_pric": 51, "openbla": [365, 366, 376, 386, 390, 1048, 1052, 1053], "openblas_num_thread": 366, "opencv": 373, "opengraph": [378, 396, 403], "openml": [2, 43, 52, 103, 154, 175, 186, 213, 221, 229, 231, 241, 265, 285, 288, 290, 308, 371, 396, 499, 1030, 1043, 1045, 1048], "openml1": 52, "openml100": 372, "openmp": [321, 376, 381, 390, 392, 410, 417, 1046, 1048, 1051, 1053], "opentsn": 695, "oper": [2, 19, 53, 168, 178, 183, 241, 246, 253, 263, 265, 266, 268, 273, 278, 354, 365, 366, 375, 376, 378, 381, 384, 390, 392, 393, 396, 404, 406, 409, 414, 415, 417, 418, 419, 423, 444, 450, 463, 470, 477, 484, 485, 486, 487, 507, 536, 537, 544, 554, 555, 569, 575, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 619, 624, 627, 633, 638, 646, 661, 692, 696, 705, 709, 710, 711, 730, 777, 784, 785, 791, 792, 822, 833, 836, 847, 848, 870, 874, 879, 890, 891, 905, 912, 915, 953, 976, 1000, 1007, 1014, 1019, 1023, 1025, 1028, 1039, 1041, 1042, 1043, 1045, 1046, 1051], "operand": 420, "operation": [231, 1028], "operatornam": [415, 744, 1000, 1004, 1020], "opinion": 393, "opitz": 1004, "opportun": [537, 1018], "oppos": [100, 247, 406, 410, 903, 1007, 1019, 1035, 1053], "opposit": [62, 86, 100, 125, 186, 187, 202, 265, 278, 392, 408, 412, 414, 419, 445, 449, 451, 471, 541, 543, 550, 566, 715, 733, 853, 911, 1035], "opposite_lof_scor": 853, "opt": [376, 380], "opta": 900, "optic": [2, 71, 79, 183, 324, 371, 421, 446, 448, 457, 458, 459, 505, 1025, 1029, 1030, 1044, 1048, 1049, 1050, 1051, 1052, 1053], "optim": [46, 52, 53, 64, 86, 87, 90, 93, 104, 109, 110, 120, 144, 145, 147, 149, 167, 168, 170, 171, 174, 175, 176, 177, 178, 198, 200, 202, 206, 221, 229, 246, 250, 265, 269, 276, 279, 284, 285, 288, 290, 295, 309, 311, 316, 324, 328, 333, 343, 348, 352, 353, 354, 361, 365, 372, 375, 378, 380, 381, 390, 392, 396, 405, 407, 409, 410, 412, 414, 415, 417, 419, 420, 421, 446, 449, 450, 451, 452, 454, 459, 463, 464, 474, 475, 481, 534, 537, 538, 540, 542, 546, 560, 561, 562, 563, 577, 613, 614, 622, 623, 638, 641, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 690, 693, 695, 697, 698, 704, 722, 726, 733, 802, 803, 817, 825, 849, 850, 851, 853, 855, 856, 857, 858, 859, 864, 865, 883, 895, 899, 900, 907, 908, 909, 910, 911, 912, 913, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1019, 1020, 1023, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051], "optima": 420, "optimis": [380, 410, 1007, 1038, 1048, 1050], "optimist": [52, 202, 276, 352, 361, 710, 1000, 1004], "optimum": [94, 176, 186, 191, 265, 284, 409, 415, 474, 1000, 1003], "option": [2, 43, 66, 80, 85, 127, 140, 147, 176, 182, 195, 198, 214, 250, 265, 274, 280, 321, 328, 352, 356, 361, 367, 372, 373, 374, 376, 378, 379, 381, 383, 384, 386, 387, 390, 392, 393, 396, 404, 410, 411, 413, 414, 415, 417, 418, 421, 434, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 690, 691, 692, 693, 695, 697, 698, 714, 716, 720, 732, 733, 738, 739, 740, 760, 761, 762, 767, 769, 770, 774, 777, 778, 779, 780, 781, 784, 786, 787, 790, 795, 796, 798, 802, 804, 805, 806, 807, 809, 810, 812, 821, 825, 826, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 941, 989, 993, 994, 1000, 1003, 1004, 1007, 1014, 1017, 1019, 1020, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "option_context": 231, "ora": 1048, "oracl": [2, 69, 213, 231, 423, 471, 472, 475, 476, 477, 478, 998, 1035], "orallo": 1004, "orang": [46, 48, 86, 111, 118, 121, 122, 127, 134, 148, 149, 151, 177, 182, 200, 202, 223, 248, 259, 265, 302, 321, 327, 359, 1005, 1052], "orazbayev": 1049, "orbit": [352, 353], "order": [2, 43, 53, 58, 61, 64, 81, 88, 97, 98, 104, 109, 129, 142, 143, 147, 149, 161, 175, 185, 186, 189, 191, 202, 206, 209, 213, 214, 219, 227, 231, 235, 244, 247, 250, 254, 258, 266, 269, 271, 278, 290, 309, 311, 316, 317, 318, 322, 323, 328, 348, 352, 354, 361, 365, 366, 373, 378, 379, 380, 382, 383, 384, 387, 392, 396, 397, 401, 404, 410, 411, 412, 414, 415, 416, 417, 418, 420, 422, 439, 442, 445, 448, 449, 451, 452, 457, 458, 459, 461, 466, 490, 491, 492, 498, 500, 518, 537, 538, 542, 543, 544, 546, 550, 554, 556, 558, 559, 560, 561, 562, 566, 567, 568, 569, 570, 584, 591, 594, 596, 597, 600, 609, 610, 611, 613, 625, 630, 634, 643, 661, 662, 668, 679, 688, 689, 691, 692, 696, 700, 702, 703, 705, 707, 715, 716, 721, 725, 729, 732, 733, 741, 743, 744, 745, 757, 759, 781, 785, 786, 787, 790, 791, 792, 797, 802, 803, 804, 806, 807, 808, 810, 814, 817, 821, 822, 825, 828, 835, 836, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 857, 864, 867, 878, 880, 881, 882, 886, 887, 888, 891, 892, 893, 895, 896, 897, 898, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 933, 934, 939, 951, 967, 972, 994, 1000, 1001, 1004, 1005, 1007, 1008, 1014, 1017, 1018, 1019, 1020, 1024, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "order_": [838, 841], "order_centroid": 353, "ordered_sampl": 231, "ordereddict": 138, "ordering_": [98, 410, 452, 457, 458, 459], "ordin": [43, 86, 103, 154, 250, 314, 317, 318, 322, 325, 372, 392, 417, 499, 570, 712, 872, 875, 880, 881, 888, 1000, 1001, 1014, 1024, 1043, 1049], "ordinal_encod": [143, 250], "ordinal_result": 143, "ordinalencod": [2, 143, 154, 187, 188, 213, 250, 317, 325, 372, 392, 584, 843, 875, 880, 888, 994, 1006, 1014, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052], "ordinalencoderordinalencod": [154, 187, 188, 317], "ordinari": [2, 122, 137, 183, 192, 193, 196, 198, 203, 209, 215, 216, 218, 230, 323, 638, 649, 655, 657, 658, 659, 660, 675, 681, 685, 686, 690, 1018, 1025, 1026, 1030], "ordinarili": [390, 392], "ordowski": 1004, "oregon": 317, "oren": 1043, "oresti": 1044, "orfano": [1048, 1049, 1050, 1051, 1052], "org": [43, 51, 52, 55, 61, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 191, 195, 213, 221, 229, 231, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 290, 308, 309, 317, 321, 322, 324, 325, 327, 332, 360, 366, 371, 376, 378, 381, 384, 386, 393, 414, 598, 639, 671, 674, 679, 698, 708, 772, 849, 850, 855, 856, 857, 858, 885, 901, 915, 916, 945, 946, 1000, 1004, 1020, 1030, 1043, 1047], "organ": [0, 50, 52, 102, 111, 352, 372, 377, 378, 393, 855, 1023], "ori": 1041, "orient": [66, 120, 186, 233, 311, 392, 919, 1001], "orig": [53, 298], "orig_coin": [80, 81], "orig_data_ax": 125, "origin": [43, 44, 53, 58, 59, 80, 81, 84, 89, 91, 106, 107, 120, 122, 123, 126, 129, 149, 152, 164, 165, 168, 170, 172, 174, 175, 181, 182, 187, 191, 200, 202, 217, 233, 234, 235, 237, 238, 244, 245, 246, 250, 262, 265, 268, 274, 284, 294, 299, 309, 312, 316, 326, 331, 345, 352, 354, 361, 366, 373, 375, 377, 378, 380, 382, 383, 390, 392, 404, 407, 410, 411, 414, 415, 417, 418, 420, 421, 422, 423, 435, 439, 443, 445, 446, 447, 448, 449, 451, 452, 461, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 496, 497, 498, 504, 522, 534, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 579, 584, 585, 587, 591, 593, 594, 597, 610, 611, 613, 614, 617, 633, 635, 638, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 695, 699, 704, 731, 766, 772, 802, 804, 805, 810, 812, 821, 825, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 857, 858, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 879, 880, 881, 883, 884, 885, 886, 887, 896, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 931, 933, 934, 938, 939, 962, 974, 977, 997, 998, 1000, 1001, 1003, 1004, 1007, 1010, 1015, 1016, 1017, 1018, 1021, 1023, 1028, 1038, 1039, 1041, 1043, 1045, 1047, 1049, 1051], "original_param": 148, "original_sklearn_vers": [404, 579], "original_space_centroid": 353, "orii": 1037, "orphan": [450, 463, 1035], "orr": [1008, 1018], "orr\u00f9": 1038, "orthogon": [2, 37, 87, 121, 122, 123, 129, 183, 192, 415, 529, 534, 540, 542, 545, 546, 551, 667, 668, 688, 689, 1016, 1025, 1026, 1030, 1035], "orthogonal_mp": [2, 551, 667, 668, 689, 1000], "orthogonal_mp_gram": [2, 667, 668, 688, 1049], "orthogonalmatchingpursuit": [2, 212, 668, 688, 689, 1000, 1005, 1035, 1037, 1040, 1043, 1048, 1053], "orthogonalmatchingpursuitcv": [2, 212, 401, 667, 1037, 1048, 1052], "orthonorm": [2, 45, 387, 950, 996], "orthotrop": 1007, "ortiz": [1045, 1051], "os": 1053, "osa": 1043, "osaid": 1043, "osborn": [1038, 1039], "oscar": [1038, 1042], "oscil": [151, 187, 218, 410, 442], "oscillatori": [214, 1014], "osei": 1049, "osendorf": [1035, 1036], "oserror": [396, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501], "osindero": [863, 1009], "osman": [1044, 1050], "osx": 365, "other": [0, 2, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 85, 90, 99, 101, 103, 104, 116, 122, 123, 125, 127, 137, 139, 140, 142, 143, 146, 147, 149, 150, 156, 163, 181, 182, 183, 185, 186, 187, 188, 191, 193, 201, 206, 213, 217, 231, 233, 234, 235, 237, 240, 241, 242, 244, 246, 247, 250, 251, 258, 261, 265, 266, 268, 271, 272, 273, 280, 281, 285, 288, 296, 297, 298, 310, 311, 315, 316, 318, 320, 321, 323, 327, 328, 330, 341, 345, 347, 350, 352, 353, 356, 360, 361, 365, 370, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 391, 392, 393, 396, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 439, 445, 446, 448, 449, 450, 451, 452, 454, 459, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 490, 499, 500, 506, 536, 537, 538, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 600, 605, 613, 614, 615, 616, 623, 630, 631, 633, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 695, 699, 702, 707, 721, 766, 777, 781, 788, 795, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 862, 864, 865, 867, 868, 870, 872, 873, 874, 876, 877, 879, 880, 881, 883, 884, 885, 886, 887, 888, 895, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 945, 946, 960, 992, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1028, 1030, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1052], "other_parti": 265, "other_payment_plan": 265, "other_scor": 383, "otherwis": [50, 89, 95, 136, 179, 182, 195, 215, 221, 265, 304, 345, 348, 361, 367, 380, 382, 384, 392, 401, 410, 412, 414, 418, 420, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 455, 456, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 499, 530, 536, 537, 538, 539, 541, 543, 544, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 600, 605, 613, 614, 617, 634, 635, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 689, 693, 695, 699, 700, 701, 703, 705, 706, 710, 712, 716, 717, 727, 729, 730, 731, 732, 733, 741, 744, 755, 757, 758, 759, 769, 777, 781, 784, 785, 786, 787, 788, 790, 791, 792, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 822, 825, 826, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 864, 865, 867, 870, 871, 872, 873, 874, 878, 879, 886, 887, 888, 889, 892, 893, 894, 896, 897, 898, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 922, 933, 934, 936, 940, 950, 951, 962, 964, 987, 989, 992, 999, 1000, 1001, 1004, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1019, 1023, 1028, 1037, 1043, 1044, 1045, 1048, 1051], "ott": 1039, "oudshoorn": [630, 994], "ought": 365, "our": [0, 43, 44, 46, 50, 51, 52, 77, 86, 89, 102, 103, 111, 112, 116, 120, 121, 134, 135, 141, 143, 144, 146, 147, 163, 168, 170, 175, 176, 177, 183, 185, 186, 187, 188, 189, 213, 217, 231, 235, 237, 247, 264, 265, 271, 274, 277, 278, 284, 294, 308, 311, 317, 321, 323, 328, 335, 338, 344, 346, 348, 352, 353, 354, 361, 366, 377, 382, 383, 386, 390, 391, 392, 393, 401, 410, 414, 417, 418, 420, 421, 446, 452, 566, 647, 695, 711, 723, 729, 741, 759, 849, 850, 851, 853, 855, 857, 858, 859, 993, 994, 1000, 1001, 1004, 1010, 1014, 1017, 1018, 1019, 1024, 1027, 1028, 1042, 1043, 1045, 1046, 1049, 1050, 1052], "our_rand_r": 1044, "oura": [1048, 1049, 1050], "ourselv": 1028, "ouss1508": [1050, 1051], "out": [0, 2, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 66, 75, 83, 88, 102, 103, 127, 133, 138, 140, 141, 147, 148, 161, 183, 185, 186, 188, 198, 213, 215, 217, 221, 231, 250, 256, 258, 265, 269, 271, 274, 279, 283, 284, 288, 290, 316, 317, 323, 333, 335, 337, 338, 341, 348, 352, 364, 373, 375, 376, 378, 380, 381, 382, 384, 390, 392, 398, 404, 410, 413, 415, 417, 418, 420, 426, 436, 437, 438, 444, 445, 447, 448, 449, 451, 456, 474, 484, 485, 486, 487, 502, 518, 519, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 591, 592, 594, 607, 610, 611, 637, 642, 643, 644, 645, 654, 658, 669, 671, 676, 678, 679, 691, 692, 695, 704, 730, 744, 803, 805, 806, 807, 808, 810, 811, 812, 813, 817, 833, 842, 843, 844, 845, 846, 851, 856, 859, 863, 864, 865, 873, 877, 884, 896, 899, 900, 922, 965, 967, 972, 992, 994, 998, 999, 1003, 1004, 1005, 1007, 1012, 1014, 1024, 1025, 1026, 1028, 1030, 1035, 1037, 1039, 1041, 1043, 1044, 1047, 1048, 1051, 1053], "out_activation_": [864, 865], "out_bounds_predict": 215, "out_fil": [919, 1020], "out_of_bound": [243, 638], "out_of_cluster_doc": 57, "outcom": [43, 140, 186, 284, 392, 398, 417, 572, 661, 712, 745, 797, 835, 902, 903, 904, 909, 912, 1000, 1004, 1020, 1027, 1039, 1043, 1045], "outdat": 381, "outer": [58, 125, 276, 332, 453, 517, 643, 653, 654, 657, 996, 1036], "outer_cv": [276, 327], "outer_numb": 332, "outermost": 345, "outli": [48, 111, 392, 471, 476, 1000, 1010], "outlier": [2, 42, 70, 79, 87, 111, 112, 146, 150, 170, 183, 192, 211, 215, 216, 217, 218, 219, 227, 239, 292, 310, 315, 318, 340, 350, 373, 380, 392, 410, 412, 417, 432, 448, 466, 468, 471, 472, 475, 476, 477, 478, 492, 493, 495, 499, 513, 515, 525, 527, 566, 634, 642, 652, 673, 674, 675, 679, 680, 681, 682, 695, 705, 833, 853, 857, 868, 876, 877, 879, 880, 881, 883, 884, 885, 886, 887, 892, 893, 894, 895, 896, 897, 898, 910, 911, 913, 1004, 1018, 1019, 1023, 1025, 1026, 1029, 1030, 1035, 1040, 1041, 1043], "outlier_detector": [250, 380, 432], "outlier_label": [857, 1045], "outlier_label_": 857, "outlier_mask": 216, "outlier_plot": 111, "outliermixin": [2, 380, 1052], "outliers_": 652, "outliers_cov": 111, "outliers_fract": 240, "outliers_index": 112, "outliers_offset": 112, "outlin": [99, 142, 378, 380, 392, 393, 395, 410, 993, 1030], "outlying": 1010, "outperform": [109, 116, 149, 154, 288, 316, 390, 414, 417, 454, 464, 1006, 1014], "output": [2, 30, 31, 51, 54, 62, 64, 72, 86, 92, 123, 133, 134, 135, 137, 142, 154, 157, 170, 178, 181, 182, 183, 186, 209, 239, 247, 251, 254, 259, 264, 265, 269, 271, 274, 278, 280, 281, 285, 288, 291, 312, 315, 317, 318, 320, 323, 324, 326, 328, 353, 354, 355, 356, 358, 360, 371, 372, 373, 375, 378, 380, 384, 386, 390, 391, 392, 408, 409, 410, 411, 413, 414, 417, 418, 419, 420, 426, 431, 434, 439, 443, 444, 445, 447, 448, 449, 451, 452, 454, 461, 462, 464, 465, 466, 467, 468, 469, 470, 484, 485, 486, 487, 490, 493, 495, 496, 497, 498, 499, 500, 506, 508, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 649, 650, 653, 655, 656, 657, 660, 661, 663, 664, 665, 666, 669, 670, 671, 674, 676, 677, 679, 681, 682, 684, 685, 686, 687, 691, 692, 693, 695, 697, 699, 702, 703, 716, 717, 724, 726, 727, 729, 731, 738, 748, 749, 751, 753, 754, 755, 756, 757, 759, 764, 770, 775, 788, 791, 793, 794, 800, 801, 802, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 828, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 850, 851, 852, 856, 857, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 895, 896, 899, 900, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 928, 933, 934, 936, 939, 951, 952, 959, 960, 962, 970, 990, 993, 994, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1019, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "output_dict": [716, 1043, 1047], "output_distribut": [107, 311, 315, 411, 883, 884, 895, 896, 1014], "output_fil": 489, "output_indices_": [466, 1048], "output_label": 332, "output_label_arrai": 332, "outputcodeclassifi": [2, 288, 401, 835, 836, 1042, 1047, 1051, 1052], "outputs_2d_": [849, 857, 1045], "outreach": 393, "outsid": [45, 48, 57, 142, 214, 215, 243, 254, 404, 418, 448, 638, 886, 1010, 1043], "outward": 311, "outweigh": 1039, "ouvert": [761, 762, 1002], "ova": [222, 669, 671, 679, 1018], "ovb": [185, 186], "over": [0, 2, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 83, 88, 89, 104, 105, 106, 120, 137, 140, 144, 149, 150, 163, 167, 170, 178, 181, 185, 187, 196, 207, 213, 221, 231, 240, 250, 265, 271, 272, 274, 276, 278, 279, 280, 283, 296, 304, 306, 307, 313, 323, 324, 326, 330, 352, 353, 365, 366, 367, 373, 374, 377, 378, 379, 380, 384, 391, 392, 406, 408, 410, 411, 414, 415, 416, 417, 418, 422, 448, 451, 466, 474, 512, 536, 537, 539, 540, 541, 542, 549, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 591, 592, 594, 597, 605, 633, 635, 636, 637, 647, 648, 649, 650, 655, 656, 661, 663, 664, 665, 666, 668, 669, 670, 671, 679, 680, 681, 688, 689, 700, 719, 721, 742, 766, 791, 796, 800, 803, 806, 807, 809, 814, 815, 817, 826, 828, 829, 830, 831, 832, 834, 863, 864, 865, 866, 882, 886, 907, 915, 917, 924, 930, 939, 945, 946, 993, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "overal": [43, 78, 134, 137, 140, 144, 154, 175, 231, 265, 268, 291, 316, 317, 353, 365, 377, 378, 384, 407, 408, 417, 449, 451, 466, 473, 474, 480, 552, 888, 1001, 1004, 1020, 1028, 1045], "overallqu": 154, "overcom": [141, 217, 365, 418], "overcomplet": 415, "overconstrain": 149, "overestim": [127, 361, 414], "overfit": [43, 64, 139, 144, 146, 149, 183, 187, 188, 189, 193, 214, 217, 240, 258, 263, 265, 266, 272, 276, 284, 285, 306, 312, 313, 315, 316, 317, 318, 341, 348, 356, 358, 359, 373, 392, 408, 409, 414, 417, 439, 490, 491, 564, 565, 570, 571, 660, 803, 806, 807, 817, 825, 829, 830, 864, 865, 867, 882, 886, 999, 1008, 1010, 1012, 1014, 1020, 1025, 1028, 1038], "overflow": [377, 386, 390, 406, 1027, 1038, 1042, 1043, 1044, 1045, 1046, 1048], "overflowerror": 1045, "overhead": [47, 291, 366, 367, 378, 384, 387, 390, 392, 417, 443, 447, 451, 537, 702, 839, 840, 842, 843, 844, 845, 846, 847, 848, 1006, 1007, 1038, 1043, 1044, 1047], "overlai": [386, 635], "overlaid": 1011, "overlap": [2, 51, 52, 72, 88, 126, 147, 167, 236, 258, 353, 407, 410, 414, 417, 418, 590, 795, 796, 804, 805, 808, 810, 811, 812, 813, 820, 821, 823, 1001, 1014, 1041], "overli": [52, 62, 63, 202, 276, 361, 415, 1004], "overlin": [271, 407], "overparameter": 1000, "overrid": [380, 418, 448, 452, 459, 545, 551, 591, 592, 594, 596, 597, 600, 659, 667, 688, 689, 809, 826, 849, 850, 851, 853, 855, 857, 858, 859, 1035, 1043, 1045, 1049, 1051], "overridden": [380, 392, 420, 545, 551, 619, 624, 627, 697, 1043, 1044, 1051], "oversampl": [547, 1035], "oversc": 1050, "overset": [415, 1011], "overst": 186, "oversubscript": [781, 1049], "overview": [107, 183, 276, 287, 290, 379, 381, 391, 392, 499, 737, 746, 803, 819, 830, 835, 836, 837, 915, 1006, 1018, 1025, 1029, 1030], "overwhelm": 378, "overwrit": [149, 448, 499, 634, 1035, 1046, 1051, 1052], "overwrite_": 1035, "overwritten": [444, 535, 536, 537, 539, 544, 551, 610, 611, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 675, 677, 682, 684, 685, 686, 687, 689, 973, 1048], "ovo": [288, 320, 791, 835, 909, 912, 1004, 1005, 1019], "ovo_tpr": 280, "ovo_tre": 288, "ovr": [2, 66, 205, 228, 288, 290, 320, 349, 661, 662, 791, 836, 907, 909, 912, 1004, 1005, 1019, 1035, 1040, 1041, 1043, 1044, 1045, 1049, 1050], "ovr_jaccard_scor": 290, "ovr_tre": 288, "ow": 93, "owen": [652, 1044, 1045], "own": [2, 16, 52, 70, 140, 231, 247, 261, 291, 293, 332, 353, 366, 372, 381, 383, 386, 387, 396, 409, 410, 422, 426, 442, 456, 536, 560, 567, 649, 800, 801, 849, 850, 851, 853, 855, 857, 858, 859, 881, 915, 917, 939, 945, 1000, 1006, 1007, 1010, 1014, 1019, 1023, 1028, 1042, 1043, 1045, 1052], "own_telephon": 265, "owner": [247, 373, 375, 959, 960], "ownership": 380, "oyamada": 1040, "oyindamola": 1050, "oywa": 1045, "ozga": 1043, "ozsvald": 1037, "p": [0, 2, 50, 53, 61, 63, 64, 76, 94, 111, 112, 115, 118, 127, 145, 164, 168, 173, 191, 225, 230, 231, 233, 235, 244, 271, 277, 278, 304, 372, 373, 375, 376, 383, 386, 407, 408, 409, 410, 412, 413, 415, 417, 419, 420, 421, 423, 444, 446, 448, 449, 452, 457, 458, 459, 471, 473, 476, 477, 480, 501, 531, 537, 541, 543, 544, 550, 552, 553, 554, 556, 558, 559, 560, 561, 562, 564, 567, 568, 569, 593, 595, 596, 597, 598, 599, 601, 602, 603, 607, 608, 609, 610, 611, 612, 618, 619, 630, 643, 646, 691, 693, 695, 697, 702, 708, 718, 727, 744, 755, 789, 791, 805, 811, 812, 813, 816, 832, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 863, 867, 868, 883, 895, 901, 917, 918, 919, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1018, 1019, 1035, 1036, 1038, 1041, 1043, 1050, 1051, 1052], "p0": 63, "p1": [63, 156], "p1d": 63, "p2": [63, 156, 231], "p3": 156, "p4": 156, "p5": 951, "p592": 138, "p_": [164, 1004, 1007, 1020], "p_c": [118, 526], "p_e": 719, "p_grid": 276, "p_i": [1004, 1007], "p_k": [278, 1004], "p_n": [278, 710, 1004], "p_o": 719, "p_val": 271, "p_val_uncorrect": 271, "p_valu": [607, 608, 609], "p_w": 118, "p_w_c": [118, 526], "pa": [669, 670, 904, 1000, 1004, 1017], "pab": [1050, 1051], "pablo": [1045, 1048, 1049], "pabloduque0": 1048, "pace": 373, "pacha": 1043, "pacif": 271, "pack": [387, 1043], "packag": [0, 80, 86, 181, 247, 291, 366, 371, 372, 375, 376, 378, 379, 380, 382, 386, 387, 390, 392, 396, 397, 404, 412, 417, 418, 454, 480, 649, 650, 994, 1000, 1003, 1007, 1014, 1020, 1028, 1035, 1041, 1043, 1044, 1045], "packet": 365, "packg": 396, "pacman": 396, "paczuski": [1043, 1044], "pad": [120, 142, 181, 187, 233, 250, 352, 357, 418, 591, 592, 594], "page": [0, 51, 55, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 195, 233, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 325, 327, 332, 360, 365, 373, 375, 378, 380, 382, 384, 386, 393, 410, 412, 475, 519, 520, 521, 631, 647, 837, 902, 951, 994, 1000, 1004, 1005, 1033, 1035, 1039, 1040], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": [55, 951], "pagh": [191, 996], "pai": [0, 186, 231, 265, 378], "paid": 1000, "pain": 390, "paint": [919, 921], "pair": [2, 49, 52, 72, 79, 91, 97, 125, 136, 138, 142, 146, 161, 174, 178, 194, 197, 205, 222, 225, 231, 244, 266, 271, 278, 280, 335, 337, 339, 341, 342, 343, 345, 353, 357, 373, 390, 392, 407, 408, 411, 414, 418, 420, 439, 442, 443, 447, 452, 459, 465, 473, 474, 480, 496, 511, 512, 585, 595, 598, 599, 601, 602, 603, 613, 616, 617, 618, 620, 622, 623, 625, 626, 628, 630, 635, 636, 646, 648, 695, 702, 703, 708, 709, 710, 718, 734, 743, 761, 762, 766, 769, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 789, 835, 847, 848, 922, 1004, 1005, 1006, 1007, 1014, 1020, 1035, 1047, 1048, 1050, 1051, 1052], "pair_confusion_matrix": [2, 410, 1047], "pair_list": 280, "pair_scor": 280, "paired_cosine_dist": [2, 406], "paired_dist": [2, 766, 772, 781, 1039], "paired_euclidean_dist": [2, 406], "paired_manhattan_dist": 2, "pairidx": 357, "pairplot": [126, 185, 186], "pairwis": [2, 37, 97, 185, 186, 244, 250, 280, 320, 324, 325, 352, 365, 370, 392, 406, 410, 415, 420, 448, 456, 460, 463, 464, 470, 489, 511, 512, 538, 564, 565, 623, 641, 642, 643, 644, 645, 646, 691, 693, 695, 697, 699, 702, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 791, 795, 796, 835, 851, 855, 859, 873, 905, 924, 996, 1004, 1007, 1016, 1019, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051, 1052, 1053], "pairwise_bayesian": 271, "pairwise_bayesian_df": 271, "pairwise_comp_df": 271, "pairwise_dist": [2, 75, 328, 392, 410, 421, 446, 448, 452, 459, 691, 699, 765, 774, 782, 783, 795, 796, 851, 853, 855, 859, 1002, 1035, 1039, 1041, 1043, 1044, 1046, 1047, 1052, 1053], "pairwise_dist_chunk_s": [470, 905], "pairwise_distance_funct": [695, 699, 781, 784, 1007], "pairwise_distances_argmin": [2, 97, 324, 783, 1043, 1049, 1050, 1051, 1052], "pairwise_distances_argmin_min": [2, 324, 782, 1038, 1043, 1049, 1050, 1051, 1052], "pairwise_distances_chunk": [2, 365, 781, 1043, 1046, 1052], "pairwise_indices_": 835, "pairwise_kernel": [2, 392, 420, 454, 464, 646, 768, 873, 1002, 1035, 1042, 1052], "pairwise_kernel_funct": [623, 646, 777], "pairwise_kernels_kwarg": 623, "pairwise_t_test": 271, "pairwisedistancesreduct": 366, "pairwisekernel": [2, 420], "paislei": [415, 539], "pakdd": 410, "pal": [1043, 1049], "palacio": 1048, "palafox": 1035, "palett": [186, 271], "palevioletr": [227, 297, 340], "palioura": [842, 1006], "paliw": 1043, "palladium": 1028, "palmol": 51, "pami": [375, 410, 728], "pamnani": 1043, "pan": 398, "panchal": 1047, "pancholi": 1042, "panda": [2, 43, 51, 62, 102, 103, 104, 134, 140, 141, 143, 146, 149, 151, 167, 175, 181, 185, 186, 187, 188, 189, 193, 198, 202, 213, 217, 221, 231, 250, 251, 254, 261, 265, 269, 271, 272, 274, 282, 283, 285, 288, 316, 317, 318, 320, 323, 324, 348, 352, 353, 372, 373, 376, 377, 378, 380, 381, 386, 390, 392, 396, 403, 411, 434, 444, 445, 447, 449, 451, 466, 468, 470, 484, 485, 486, 487, 491, 492, 493, 495, 499, 503, 504, 505, 507, 508, 513, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 564, 565, 569, 570, 571, 572, 573, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 635, 636, 638, 641, 642, 643, 644, 645, 691, 692, 695, 803, 806, 807, 817, 833, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 929, 993, 994, 1014, 1023, 1024, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pandata": [1050, 1051], "pandei": [1042, 1047], "panel": [262, 296, 311, 416, 1023], "panga": [1050, 1051], "panico": [1043, 1047], "pankaj": 1047, "pano": 1041, "panpiort8": [1045, 1047], "paolo": [0, 400, 1035, 1039, 1045, 1053], "papadopoulo": [1048, 1049, 1050, 1051, 1052], "papapanagiot": 1042, "paper": [0, 168, 191, 265, 271, 375, 384, 390, 410, 412, 417, 444, 451, 480, 507, 537, 544, 566, 644, 661, 669, 670, 674, 679, 682, 695, 791, 844, 853, 856, 899, 900, 1000, 1004, 1007, 1010, 1019, 1035, 1042, 1043], "paper355": 674, "papier": [667, 688, 689], "par": 1014, "paraboloid": 1000, "paradi": 1050, "paradigm": 1000, "paragraph": [418, 506], "paralel": 1051, "parallel": [2, 53, 138, 140, 142, 187, 215, 272, 321, 322, 324, 346, 360, 364, 370, 376, 378, 379, 381, 382, 390, 392, 411, 421, 422, 439, 446, 448, 450, 451, 452, 454, 459, 460, 463, 466, 469, 474, 534, 536, 537, 538, 540, 542, 544, 545, 546, 548, 549, 551, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 592, 597, 605, 610, 611, 613, 635, 637, 642, 661, 691, 692, 693, 694, 695, 696, 697, 784, 803, 806, 807, 809, 814, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 866, 869, 902, 903, 970, 973, 1024, 1030, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "parallel_backend": [2, 366, 421, 439, 446, 448, 450, 452, 454, 459, 460, 463, 466, 469, 474, 534, 538, 539, 540, 542, 545, 546, 548, 549, 551, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 597, 605, 610, 611, 613, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 853, 855, 857, 858, 860, 861, 866, 869, 902, 903, 1043, 1053], "parallel_batch_queri": 291, "parallel_coordin": 272, "parallel_help": 1045, "parallelbackendbas": 973, "parallelis": [272, 470, 905, 1042], "param": [79, 88, 94, 95, 103, 144, 145, 147, 148, 233, 246, 247, 269, 271, 279, 283, 295, 307, 327, 374, 378, 380, 392, 401, 417, 420, 424, 427, 433, 434, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 815, 817, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 963, 992, 993, 1041, 1045, 1046, 1048, 1049, 1052, 1053], "param1": 380, "param2": 380, "param3": 380, "param_": 140, "param_c": [282, 803], "param_classifier__c": 103, "param_covariance_typ": 261, "param_degre": 803, "param_dist": [279, 283, 322], "param_distribut": [103, 170, 272, 279, 283, 322, 391, 807, 815, 817, 1051], "param_gamma": [282, 803, 817], "param_grid": [43, 45, 103, 104, 105, 106, 140, 146, 246, 252, 261, 265, 269, 270, 271, 275, 276, 279, 282, 288, 293, 313, 327, 341, 392, 401, 411, 417, 745, 803, 806, 814, 815, 993, 1004], "param_kernel": [803, 817], "param_list": 815, "param_min_samples_split": 275, "param_n_compon": 261, "param_nam": [140, 272, 284, 326, 348, 401, 826, 834, 999], "param_pca__n_compon": 105, "param_preprocessor__cat__selector__percentil": 103, "param_preprocessor__num__imputer__strategi": 103, "param_rang": [284, 326, 348, 826, 834, 999, 1051], "param_reduce_dim__n_compon": 270, "param_valu": 46, "paramet": [2, 25, 27, 43, 44, 48, 49, 50, 53, 54, 64, 70, 79, 87, 88, 91, 93, 94, 95, 103, 104, 105, 110, 112, 113, 118, 120, 126, 132, 134, 138, 140, 142, 143, 144, 147, 148, 149, 159, 165, 168, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 193, 194, 195, 196, 198, 200, 201, 202, 204, 213, 215, 217, 218, 221, 230, 231, 237, 238, 240, 242, 245, 246, 247, 256, 257, 258, 259, 261, 262, 264, 265, 270, 271, 272, 273, 275, 276, 279, 282, 283, 288, 291, 293, 294, 297, 298, 304, 306, 307, 309, 311, 312, 313, 315, 316, 320, 321, 323, 324, 325, 326, 334, 336, 338, 343, 345, 346, 347, 349, 350, 352, 353, 354, 356, 357, 358, 359, 361, 365, 366, 367, 370, 371, 373, 381, 383, 385, 386, 387, 390, 401, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "parameter": [356, 420, 617, 618, 625, 626, 800, 801, 1000, 1001, 1009, 1014, 1020], "parameter_grid": 272, "parameter_nam": [570, 571, 572, 573], "parametergrid": [2, 803, 1037, 1043], "parameters_str": 88, "parametersampl": [2, 817, 1037, 1043, 1047], "parametr": [2, 48, 61, 62, 113, 243, 295, 315, 323, 408, 411, 416, 417, 439, 554, 556, 638, 688, 699, 883, 895, 945, 946, 1000, 1003, 1006, 1007, 1014, 1017, 1020, 1043, 1045, 1048], "parametrize_with_check": [2, 320, 380, 926, 945, 1045, 1046], "params_str": 283, "parcel": [87, 100, 410], "parch": [188, 325], "pardeep": 1047, "parel": 1039, "parent": [47, 185, 247, 360, 378, 382, 392, 410, 444, 465, 960, 961, 1035, 1052], "parent_hourly_wag": 185, "parenthes": 941, "parenthesi": [76, 378], "paresh": [1044, 1045], "pareto": 215, "pargent": 1014, "pari": [0, 375, 411, 468, 767, 875, 1015, 1049], "pariet": [1028, 1035], "parikh": [1044, 1049, 1050, 1051, 1052, 1053], "parimi": 1053, "paris_in_radian": 767, "paristech": 0, "pariti": 1020, "parizi": 1050, "park": [1040, 1045, 1047, 1050, 1051], "parmet": 1052, "parmind": 1042, "parquet": 52, "parra": 1043, "parri": [1040, 1041, 1042], "parrot": 352, "pars": [47, 55, 365, 372, 373, 379, 511], "parse_vers": [147, 189, 320, 673], "parser": [47, 149, 265, 285, 320, 324, 499, 1050, 1051], "parsifalxu": 1053, "parsimoni": [415, 1014], "parsing_tim": 47, "parson": [1046, 1048], "part": [0, 44, 45, 67, 71, 84, 94, 103, 113, 120, 123, 126, 137, 140, 142, 146, 152, 159, 160, 161, 165, 175, 183, 193, 247, 249, 259, 265, 266, 268, 286, 306, 313, 316, 318, 354, 367, 373, 375, 378, 380, 384, 386, 391, 392, 396, 398, 406, 408, 409, 410, 414, 415, 417, 418, 420, 448, 451, 496, 497, 498, 524, 534, 540, 545, 577, 587, 588, 589, 616, 628, 796, 872, 890, 892, 893, 894, 895, 896, 897, 898, 993, 994, 996, 1001, 1005, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1035, 1043, 1044, 1046, 1048, 1050], "part3": 414, "part_of_speech": 418, "partev": [1049, 1050, 1051, 1052], "parthiv": 1047, "parti": [231, 288, 326, 366, 377, 380, 390, 404, 805, 812, 1035, 1046, 1051, 1052], "partial": [2, 43, 47, 51, 83, 114, 115, 151, 183, 184, 231, 239, 322, 325, 375, 378, 392, 395, 412, 413, 415, 417, 420, 466, 484, 485, 486, 487, 499, 504, 537, 539, 544, 565, 592, 635, 636, 660, 791, 833, 835, 836, 863, 864, 865, 868, 880, 881, 884, 887, 916, 1001, 1008, 1018, 1025, 1030, 1032, 1036, 1043, 1044, 1048, 1052], "partial_correl": 51, "partial_depend": [2, 187, 635, 1011, 1036, 1044, 1045, 1046, 1047, 1050, 1051], "partial_fit": [47, 83, 120, 324, 367, 380, 392, 410, 415, 444, 451, 537, 539, 540, 541, 592, 600, 661, 662, 669, 670, 671, 679, 680, 681, 835, 836, 839, 840, 842, 843, 844, 845, 846, 863, 864, 865, 876, 877, 887, 907, 992, 1000, 1006, 1008, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "partial_fit_": 1048, "partial_fit_classifi": 47, "partial_fit_param": [600, 835, 836, 839, 840], "partialdependencedisplai": [2, 149, 151, 187, 251, 321, 322, 323, 325, 327, 385, 636, 1011, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "particip": [377, 378, 393, 1028], "particl": 1009, "particular": [0, 43, 50, 53, 64, 72, 74, 75, 93, 103, 109, 118, 125, 128, 143, 146, 149, 150, 174, 181, 186, 187, 213, 215, 221, 245, 265, 268, 272, 274, 280, 291, 300, 304, 311, 320, 321, 324, 353, 354, 361, 365, 366, 372, 373, 376, 377, 378, 380, 382, 383, 384, 386, 387, 391, 392, 396, 410, 411, 414, 415, 417, 418, 419, 420, 448, 471, 475, 499, 547, 566, 612, 656, 661, 666, 675, 677, 687, 690, 715, 731, 788, 839, 932, 934, 994, 996, 998, 1000, 1004, 1007, 1008, 1009, 1010, 1012, 1014, 1024, 1028, 1035, 1038, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1052], "particularli": [58, 67, 102, 103, 106, 129, 152, 186, 214, 242, 271, 285, 313, 321, 328, 350, 361, 365, 378, 380, 387, 392, 410, 411, 413, 416, 418, 499, 809, 826, 844, 951, 972, 1000, 1001, 1004, 1006, 1012, 1024, 1028, 1035, 1040, 1042, 1043, 1049], "partit": [80, 99, 102, 150, 152, 271, 308, 392, 407, 408, 410, 414, 417, 451, 453, 455, 464, 514, 560, 561, 562, 563, 566, 567, 568, 707, 708, 718, 789, 855, 915, 916, 917, 918, 1003, 1007, 1010, 1014, 1020], "partli": [80, 404, 772], "partnership": 1028, "parvu": 375, "pasbi": [1042, 1043], "pascal": 1004, "pascual": 1038, "paskov": 1042, "pass": [2, 43, 46, 47, 58, 59, 70, 73, 140, 149, 151, 165, 195, 198, 214, 241, 243, 244, 247, 250, 251, 253, 261, 265, 269, 272, 318, 320, 323, 328, 346, 354, 361, 365, 366, 367, 373, 378, 379, 380, 383, 384, 385, 386, 387, 390, 392, 401, 404, 406, 409, 410, 411, 414, 415, 417, 418, 420, 421, 422, 427, 428, 432, 433, 439, 440, 442, 444, 445, 446, 448, 449, 450, 451, 452, 454, 456, 459, 461, 462, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 490, 493, 495, 498, 499, 500, 506, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 584, 585, 591, 592, 593, 594, 596, 597, 600, 605, 610, 611, 613, 614, 620, 623, 629, 634, 635, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 714, 735, 736, 745, 766, 777, 781, 782, 783, 784, 791, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 878, 879, 880, 881, 882, 884, 886, 887, 888, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 927, 932, 933, 934, 941, 945, 946, 950, 951, 953, 955, 958, 960, 963, 964, 973, 974, 977, 987, 992, 993, 994, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1017, 1018, 1019, 1024, 1028, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "passiv": [2, 47, 220, 669, 670, 1026, 1030, 1036], "passiveaggress": [367, 418], "passiveaggressiveclassifi": [2, 47, 220, 365, 367, 1000, 1005, 1036, 1039, 1040, 1042, 1043, 1046, 1048, 1053], "passiveaggressiveregressor": [2, 367, 1000, 1036, 1039, 1042, 1043, 1046, 1048, 1053], "passo": [0, 400, 1035, 1036], "passthrough": [43, 104, 143, 186, 187, 213, 231, 250, 317, 325, 411, 466, 469, 570, 571, 866, 867, 1014, 1044, 1046, 1049, 1050, 1052], "passthrough_numer": [213, 231], "passthroughpassthrough": [187, 317], "past": [50, 52, 382, 383, 386, 390, 393, 414, 415, 417, 541, 558, 559, 681, 1028, 1051], "pat": [631, 994], "patch": [2, 70, 83, 250, 256, 257, 258, 261, 262, 266, 373, 390, 415, 417, 558, 559, 586, 587, 590, 1035, 1043], "patch_height": [586, 587, 590], "patch_siz": [83, 123, 418, 586, 587, 590], "patch_width": [586, 587, 590], "patchextractor": [2, 418, 1051], "patel": [1043, 1045, 1046, 1047, 1049], "path": [2, 47, 55, 183, 192, 198, 199, 202, 204, 207, 217, 229, 284, 348, 356, 372, 376, 378, 382, 386, 387, 392, 404, 443, 447, 452, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 511, 512, 551, 560, 561, 566, 567, 568, 569, 596, 597, 600, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 684, 685, 686, 687, 688, 689, 691, 867, 868, 914, 915, 916, 917, 918, 957, 993, 1000, 1001, 1010, 1024, 1025, 1035, 1036, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1050, 1051], "path_length": 957, "path_method": [691, 1001], "pathak": [1050, 1051], "patheffect": 75, "pathlib": [47, 1050, 1051], "pathlik": [499, 1051], "patholog": [85, 1003, 1041], "pathwai": 379, "pati": 1037, "patienc": [386, 392], "patient": [46, 157, 168, 182, 375, 386, 409, 414, 1000], "patil": [1049, 1052], "paton": 1048, "patric": [1047, 1048], "patricio": 1049, "patrick": [1042, 1043, 1048, 1049, 1052, 1053], "patrini": [1040, 1041, 1042], "pattaniyil": 1045, "pattern": [43, 52, 58, 96, 113, 115, 119, 126, 127, 170, 181, 183, 187, 198, 217, 247, 250, 323, 345, 352, 353, 354, 361, 375, 378, 380, 393, 407, 410, 411, 415, 417, 418, 450, 466, 468, 507, 535, 537, 544, 558, 559, 641, 711, 728, 744, 772, 791, 792, 800, 887, 996, 998, 1000, 1004, 1005, 1011, 1019, 1021, 1024, 1025, 1028, 1047], "patterson": [497, 1040], "paul": [373, 1038, 1041, 1042, 1043, 1044, 1048, 1049], "paula": [1045, 1046, 1053], "pauli": 1040, "paulo": [1042, 1048, 1050], "paus": 80, "pava": 638, "pavel": [1036, 1044], "pavlo": [1043, 1044], "pavlyk": [1043, 1044, 1045, 1046], "pawel": 1044, "pawe\u0142": [1038, 1042, 1047, 1048], "payn": 1045, "pazzani": 64, "pb_q": [323, 1000], "pbl": 146, "pc": [57, 334, 354, 373], "pca": [2, 11, 42, 45, 55, 68, 69, 84, 99, 101, 102, 104, 106, 107, 116, 119, 122, 129, 130, 160, 183, 197, 210, 222, 234, 236, 243, 245, 248, 252, 264, 270, 277, 279, 282, 291, 295, 300, 309, 323, 357, 361, 370, 380, 392, 406, 410, 411, 416, 426, 475, 478, 486, 499, 505, 507, 517, 535, 536, 537, 538, 542, 543, 546, 547, 552, 646, 661, 691, 693, 695, 699, 803, 829, 833, 856, 863, 866, 867, 869, 877, 885, 887, 922, 996, 998, 1001, 1007, 1014, 1018, 1020, 1025, 1029, 1030, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1052, 1053], "pca0": 426, "pca1": [411, 426], "pca2": [411, 426], "pca_2": 116, "pca__n_compon": 105, "pca_back_proj_ax": 125, "pca_estim": 120, "pca_proj_ax": 125, "pca_scor": 127, "pcapca": [104, 252], "pcd": [863, 1009], "pchelintsev": 1047, "pclass": [103, 188, 254, 320, 324, 325], "pcolor": 171, "pcolormesh": [70, 152, 161, 197, 294, 299, 337, 341, 345, 634], "pcr": [116, 413], "pd": [43, 51, 62, 103, 104, 134, 140, 141, 146, 151, 167, 181, 185, 186, 187, 188, 189, 193, 198, 202, 213, 217, 221, 231, 251, 254, 261, 269, 271, 272, 274, 282, 283, 285, 288, 316, 317, 318, 323, 324, 348, 352, 353, 383, 392, 411, 466, 468, 630, 631, 632, 633, 635, 781, 931, 933, 934, 993, 994, 1011, 1014, 1046, 1048, 1049, 1050, 1052], "pd2000": 1004, "pd_": 1011, "pd_line_kw": 635, "pd_result": 635, "pdb": 386, "pdbcl": 386, "pdf": [168, 271, 296, 311, 375, 378, 410, 419, 444, 451, 534, 537, 540, 544, 644, 647, 652, 661, 667, 669, 670, 674, 679, 682, 685, 686, 688, 689, 695, 844, 856, 863, 900, 902, 1000, 1017, 1020, 1027, 1031, 1035], "pdist": [695, 781, 784], "pdp": [2, 635, 1011, 1049], "pdp_lim": 635, "pdp_line_kw": 635, "pe": 586, "pe_tran": 586, "peai": 1044, "peak": [43, 52, 64, 187, 408, 414, 1049], "pear": 1005, "pearson": [2, 609, 612, 1048], "pearu": 1035, "pedersen": [1039, 1051], "pedigo": [1047, 1048], "pedregosa": [0, 400, 1035, 1036, 1037, 1038, 1039, 1041], "pedro": [1036, 1038, 1039, 1043], "peek": [187, 378, 1011], "peer": 1028, "peev": [1043, 1046], "pegaso": 1018, "pei": [410, 1042], "peixinho": 1049, "pelennor": 1049, "penal": [2, 53, 66, 113, 154, 198, 202, 206, 213, 217, 229, 231, 284, 316, 348, 410, 412, 415, 417, 419, 471, 472, 473, 474, 475, 476, 477, 478, 480, 564, 565, 650, 655, 656, 664, 666, 679, 708, 718, 737, 789, 798, 880, 907, 908, 914, 1000, 1004, 1006, 1008, 1018, 1019], "penalis": [211, 228, 699], "penalti": [2, 25, 46, 49, 66, 113, 183, 192, 193, 198, 201, 202, 206, 213, 217, 220, 228, 229, 242, 279, 284, 306, 323, 334, 346, 352, 365, 386, 390, 412, 415, 419, 473, 474, 475, 476, 477, 478, 480, 505, 534, 540, 541, 542, 543, 545, 546, 550, 551, 600, 646, 649, 650, 651, 652, 655, 656, 657, 660, 661, 662, 663, 664, 665, 671, 672, 673, 675, 679, 681, 683, 684, 690, 817, 887, 907, 908, 910, 912, 913, 914, 993, 1000, 1003, 1008, 1014, 1018, 1019, 1025, 1037, 1040, 1042, 1044, 1045, 1047, 1048, 1050, 1051], "peng": [682, 1000, 1041, 1042, 1043, 1045, 1047], "peopl": [2, 45, 102, 186, 249, 274, 352, 353, 366, 367, 373, 375, 377, 378, 382, 393, 416, 496, 497, 644, 844, 1023], "pep": [51, 386, 1035], "pep073": 379, "pep257": 392, "pep440": 382, "pep8": [380, 382, 386], "pepsi": 51, "per": [43, 49, 58, 70, 86, 97, 139, 140, 143, 175, 177, 186, 187, 213, 228, 231, 250, 254, 257, 265, 267, 278, 280, 311, 317, 322, 327, 328, 348, 352, 354, 365, 373, 374, 378, 383, 384, 387, 390, 392, 408, 410, 414, 415, 416, 417, 418, 420, 448, 450, 452, 459, 463, 466, 470, 489, 499, 503, 505, 506, 507, 511, 513, 515, 518, 526, 535, 537, 538, 539, 542, 544, 546, 552, 553, 564, 565, 572, 586, 591, 594, 613, 614, 635, 636, 644, 645, 661, 662, 669, 670, 671, 674, 676, 677, 678, 679, 681, 695, 699, 716, 719, 723, 725, 744, 757, 761, 762, 784, 786, 800, 801, 828, 835, 836, 837, 839, 840, 843, 845, 863, 866, 872, 874, 876, 877, 880, 881, 887, 888, 905, 907, 908, 909, 910, 911, 912, 913, 938, 939, 951, 978, 993, 996, 1000, 1003, 1004, 1005, 1008, 1011, 1018, 1019, 1020, 1024, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052], "perc": 266, "percal": 384, "percent": [134, 495, 603, 1017], "percent10": [250, 495], "percentag": [2, 52, 87, 128, 143, 204, 231, 266, 274, 277, 414, 419, 537, 544, 547, 552, 596, 597, 651, 672, 683, 706, 737, 749, 821, 822, 823, 837, 919, 921, 1005, 1020, 1037, 1041, 1047, 1048], "percentil": [2, 49, 52, 103, 146, 149, 250, 254, 311, 365, 595, 598, 599, 601, 602, 603, 606, 609, 635, 636, 751, 1014, 1040, 1048], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 266, "percept": [163, 187, 1011], "perceptron": [2, 47, 67, 142, 152, 161, 172, 174, 183, 220, 223, 229, 251, 305, 313, 314, 335, 346, 367, 390, 418, 517, 518, 525, 669, 679, 833, 863, 864, 865, 868, 887, 1002, 1005, 1009, 1018, 1025, 1026, 1030, 1039, 1041, 1042, 1043, 1047], "percol": 74, "perdisci": [410, 444], "perdok": 1050, "pere": 1052, "peredachi": [610, 611], "pereira": [1040, 1043, 1044], "peretti": 1050, "perez": [1043, 1050], "perf_count": 250, "perfect": [58, 63, 72, 102, 112, 123, 125, 209, 213, 352, 353, 378, 410, 414, 556, 557, 693, 697, 707, 708, 711, 720, 729, 731, 734, 740, 746, 759, 760, 788, 789, 798, 1000, 1004, 1007, 1019, 1028, 1049], "perfectli": [63, 64, 72, 274, 286, 345, 395, 410, 417, 440, 570, 609, 707, 708, 718, 720, 739, 740, 760, 789, 798, 880, 999, 1001, 1004, 1019, 1048, 1049], "perform": [2, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 75, 82, 86, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 106, 109, 116, 123, 129, 132, 134, 140, 143, 144, 145, 147, 148, 149, 153, 154, 159, 163, 166, 167, 168, 171, 179, 181, 182, 183, 186, 187, 188, 189, 191, 198, 202, 213, 215, 217, 219, 220, 221, 230, 231, 234, 235, 237, 240, 245, 248, 250, 257, 258, 261, 263, 265, 266, 267, 268, 269, 271, 272, 273, 276, 277, 279, 280, 282, 284, 285, 288, 290, 291, 304, 309, 311, 313, 315, 317, 318, 320, 326, 327, 329, 331, 332, 341, 344, 345, 348, 352, 354, 361, 364, 366, 367, 373, 375, 380, 381, 382, 384, 386, 387, 390, 391, 392, 395, 401, 404, 405, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 428, 432, 442, 444, 445, 446, 448, 449, 450, 452, 454, 456, 457, 461, 463, 470, 471, 484, 485, 486, 487, 497, 505, 515, 518, 534, 535, 536, 538, 540, 545, 546, 547, 548, 549, 551, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 586, 591, 592, 593, 594, 597, 604, 605, 606, 613, 614, 630, 633, 634, 641, 643, 648, 654, 657, 658, 659, 661, 667, 668, 669, 670, 671, 673, 676, 678, 679, 680, 681, 685, 686, 688, 690, 692, 693, 696, 697, 700, 706, 707, 708, 710, 711, 715, 716, 729, 732, 733, 741, 743, 745, 758, 759, 760, 781, 786, 787, 789, 790, 791, 797, 798, 799, 800, 801, 803, 806, 807, 814, 815, 817, 821, 828, 829, 830, 832, 833, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 854, 856, 862, 863, 864, 865, 867, 868, 870, 873, 874, 876, 877, 879, 880, 881, 883, 884, 887, 888, 890, 892, 893, 894, 896, 897, 898, 902, 903, 905, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 976, 987, 992, 993, 994, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "performancetip": 384, "perhap": [102, 142, 375, 377, 386, 392, 416, 1024], "perimet": [168, 375], "period": [2, 52, 149, 170, 175, 179, 382, 392, 393, 408, 420, 618, 824, 886, 1043, 1048, 1050], "periodic_spline_transform": 43, "periodicity_bound": [170, 175, 179, 618], "peripheri": 410, "perla": 1038, "perm_scores_iri": 277, "perm_scores_rand": 277, "perm_sorted_idx": 189, "permalink": 382, "perman": 386, "permiss": [377, 382, 393, 396, 397, 1028, 1050], "permit": [411, 469, 591, 592, 594, 803, 806, 807, 817, 829, 868, 869, 1004, 1005, 1006, 1041], "permut": [2, 58, 59, 72, 112, 147, 161, 163, 183, 184, 229, 263, 271, 318, 333, 395, 405, 410, 417, 419, 466, 499, 503, 507, 562, 563, 567, 568, 630, 633, 637, 682, 707, 708, 720, 739, 740, 758, 760, 798, 820, 822, 832, 833, 867, 881, 912, 915, 916, 951, 972, 974, 977, 1004, 1018, 1025, 1030, 1035, 1041, 1048, 1050], "permutation_import": [2, 141, 147, 188, 189, 320, 417, 556, 557, 560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918, 1012, 1045, 1047, 1048, 1052], "permutation_scor": 832, "permutation_test_scor": [2, 277, 401, 414, 1035, 1042, 1047], "permuted_categori": 318, "perp_tol": 539, "perpendicular": [70, 346], "perperogl": 1014, "perplex": [183, 232, 233, 235, 237, 291, 517, 528, 539, 695, 1001, 1025, 1040, 1042, 1049], "perri": 1045, "perrin": 1041, "perrot": [0, 1035], "persian": 1023, "persist": [386, 390, 415, 448, 613, 614, 863, 1009, 1023, 1030, 1041, 1044], "persola": 1043, "person": [45, 186, 265, 274, 373, 377, 414, 418, 496, 497, 498, 1014, 1043], "personal_statu": 265, "perspect": [88, 93, 213, 285, 365, 373, 390, 393, 533, 646, 907, 997], "pertin": 213, "perturb": [186, 230, 309, 415, 417, 1003], "peru": [50, 304, 373, 501], "pervas": [361, 378], "pessimist": [145, 417], "pessoa": 1048, "pestrickland": 1041, "pet": [323, 327, 791, 1004], "pet_cat": 323, "pet_dog": 323, "pet_fish": 323, "petal": [126, 128, 130, 142, 254, 322, 325, 375, 411, 920, 1020], "petal_col": 325, "petar": 1050, "pete": [1042, 1046, 1047], "peter": [0, 96, 400, 410, 450, 452, 459, 652, 795, 796, 1000, 1004, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1052], "peterlongo": 1052, "peterson": [1035, 1037], "petfood": 1028, "petrov": [1042, 1043, 1051], "petrushev": 1044, "pe\u00f1a": 1039, "pfaffel": 1048, "pfahring": [838, 1005], "pfe": 51, "pfister": 1014, "pfizer": 51, "pft": 214, "pg": [51, 384, 652, 1000, 1040], "pg_i": 652, "pgithub": 1047, "ph": 1047, "pham": [191, 996, 1042], "phan": 415, "pharmaceut": 375, "phase": [43, 198, 207, 365, 630, 996, 1001, 1007, 1028, 1043, 1045], "phase_nois": 75, "phd": [0, 410, 417, 1024, 1028], "phenol": 375, "phenomena": 175, "phenomenon": [353, 1014], "phi": [75, 415, 417, 746, 873, 996, 1004, 1014, 1019], "phi_coeffici": 1004, "phil": [1040, 1051], "philipp": [1037, 1038, 1041, 1050], "phillip": [2, 50, 304, 373, 501], "phlypo": 1038, "phongpanagnam": 1048, "phongpanangam": 1048, "photogrammetr": 1000, "php": 1004, "phrase": 418, "phy": [610, 611], "phyo": 1049, "physic": [2, 102, 140, 366, 508, 968, 1000, 1051], "physician": 409, "physiolog": [274, 375], "pi": [43, 53, 70, 74, 75, 121, 129, 151, 153, 163, 170, 194, 198, 200, 207, 214, 235, 256, 257, 258, 261, 262, 286, 304, 321, 327, 359, 396, 416, 420, 519, 520, 521, 618, 645, 998, 999, 1000, 1006], "pianomania": 1040, "pick": [88, 93, 189, 248, 279, 324, 330, 373, 378, 382, 410, 417, 445, 462, 526, 676, 917, 918, 993, 1000, 1001, 1003, 1018, 1046], "pickl": [382, 392, 418, 592, 847, 848, 1023, 1024, 1030, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "pickleabl": [871, 1041], "pickup": 1043, "pico": [1038, 1039], "pict": [837, 1005], "pictur": [51, 55, 59, 71, 86, 99, 123, 183, 244, 262, 373, 393, 410, 415, 418, 464, 496, 497, 524, 1024, 1025], "piec": [70, 81, 214, 366, 1003], "piecewis": [129, 323, 407, 995, 1000, 1014, 1020], "pierr": [1035, 1043, 1044, 1046, 1048, 1050, 1052, 1053], "pierreablin": 1043, "pierreattard": [1048, 1049], "pierretallott": [1043, 1044, 1045], "pierron": 1038, "piet": [1049, 1050], "pieter": [55, 1041, 1042, 1049], "pietro": [1035, 1038, 1052], "pietruh": 1043, "pig": 786, "pillow": [378, 396, 403], "pim": 1044, "pin": [384, 404], "pinaki": 1043, "pinbal": [2, 52, 146, 149, 323, 417, 565, 673, 726, 751, 1000, 1048, 1049], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [900, 1016, 1041, 1042], "pink": 194, "pinki": 1049, "pinot": 317, "pinto": 1035, "pintor": 1046, "pinvh": [1042, 1044], "piontek": 1051, "piotr": [1043, 1044, 1053], "pip": [291, 320, 321, 322, 323, 324, 325, 326, 327, 328, 366, 376, 378, 382, 384, 386, 396, 404, 406, 1020], "pip3": [376, 396], "pipe": [104, 105, 143, 166, 247, 252, 270, 317, 322, 323, 391, 401, 411, 418, 593, 867, 892, 893, 895, 896, 897, 898, 993, 1014], "pipe_sgd": 227, "pipegraph": 390, "pipelin": [2, 7, 43, 67, 87, 91, 103, 106, 107, 116, 139, 140, 143, 160, 162, 164, 166, 167, 168, 181, 182, 187, 188, 191, 193, 200, 202, 213, 214, 219, 227, 231, 234, 239, 240, 241, 243, 245, 250, 251, 254, 263, 265, 268, 270, 278, 279, 282, 285, 286, 291, 293, 294, 299, 300, 306, 309, 313, 316, 318, 320, 321, 322, 323, 324, 325, 326, 334, 352, 353, 361, 365, 370, 372, 373, 378, 381, 392, 401, 404, 414, 418, 420, 424, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 490, 505, 518, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 610, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 716, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 994, 996, 1000, 1007, 1008, 1013, 1014, 1018, 1019, 1023, 1024, 1025, 1026, 1028, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1052], "pipelineifittedpipelin": [103, 139, 165, 186, 188, 241, 251, 254, 278, 324], "pipelineinot": [154, 242, 252, 272, 285, 317, 321], "pipelinepipelin": [103, 104, 252, 265], "pita": 1052, "pitfal": [168, 183, 184, 185, 188, 209, 217, 218, 271, 322, 391, 392, 395, 414, 467, 469, 499, 656, 675, 676, 704, 756, 818, 830, 833, 868, 880, 887, 1000, 1025, 1030], "pitkin": [187, 1011], "pitt": 57, "pitter": 1050, "pivot": [80, 282, 283], "pivot_t": 282, "pixel": [2, 44, 45, 53, 58, 68, 81, 86, 120, 166, 191, 244, 269, 308, 309, 375, 410, 415, 418, 419, 496, 497, 498, 588, 589, 610, 611, 1007, 1009, 1020], "pixelwis": 120, "pixi": 404, "piyg": 313, "pkdd": 0, "pkg": 376, "pkgsrc": 396, "pkl": 404, "pl": [2, 52, 105, 116, 175, 327, 375, 413, 484, 485, 486, 487, 1040], "place": [2, 43, 93, 241, 251, 295, 365, 378, 379, 380, 383, 385, 393, 408, 418, 420, 443, 444, 447, 448, 484, 485, 486, 518, 584, 593, 631, 633, 634, 771, 784, 800, 890, 892, 893, 894, 895, 896, 897, 898, 982, 983, 1023, 1035, 1042, 1045, 1046, 1048, 1052, 1053], "placehold": [57, 382, 630, 631, 632, 633, 818, 819, 822, 823, 992, 994], "plagre": 1042, "plai": [121, 147, 172, 197, 222, 264, 302, 337, 338, 365], "plain": [343, 420, 660, 1018], "plan": [51, 372, 376, 378, 379, 393, 404, 1014, 1038], "planar": 410, "plane": [51, 168, 225, 245, 297, 343, 345, 346, 350, 375, 454, 464, 998, 1000, 1019], "plant": [277, 280, 281, 371, 1004, 1030], "plasma": 311, "plasma_r": 311, "plateau": [140, 144, 167, 265, 269, 273], "platform": [381, 392, 393, 1023, 1027, 1028, 1040, 1043, 1044, 1046, 1048, 1049, 1052, 1053], "platt": [408, 439, 909, 910, 912, 913, 1019], "platypu": 352, "pldtc325": 1042, "pleas": [0, 2, 51, 55, 63, 103, 104, 139, 141, 147, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 217, 241, 242, 243, 245, 247, 250, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 291, 301, 309, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 345, 360, 366, 372, 373, 376, 378, 379, 380, 382, 386, 390, 391, 392, 396, 401, 404, 406, 410, 417, 418, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 499, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1004, 1008, 1014, 1018, 1019, 1023, 1024, 1027, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pleasant": [377, 1028], "plenti": 62, "plgreenliru": 1046, "plo": [372, 610, 611], "plot": [2, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 87, 88, 89, 91, 92, 93, 94, 95, 98, 104, 105, 106, 107, 110, 111, 112, 116, 117, 120, 123, 124, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 141, 144, 145, 146, 148, 149, 151, 152, 153, 161, 163, 164, 166, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 186, 188, 189, 191, 192, 196, 197, 200, 201, 202, 203, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 223, 225, 226, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 243, 244, 246, 248, 249, 254, 256, 257, 258, 260, 262, 263, 264, 265, 266, 271, 272, 274, 276, 277, 281, 282, 283, 284, 285, 286, 288, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 321, 324, 325, 326, 327, 331, 332, 333, 335, 336, 337, 341, 342, 343, 346, 347, 348, 349, 350, 353, 354, 355, 356, 358, 359, 360, 378, 381, 387, 390, 395, 396, 405, 408, 410, 412, 414, 416, 417, 440, 443, 448, 452, 458, 466, 473, 499, 504, 505, 507, 515, 526, 556, 560, 563, 565, 567, 568, 572, 573, 613, 625, 634, 635, 636, 660, 661, 675, 679, 700, 701, 703, 704, 705, 706, 721, 730, 738, 764, 785, 787, 790, 791, 792, 803, 809, 820, 826, 828, 829, 830, 831, 834, 836, 845, 849, 865, 868, 880, 881, 882, 884, 887, 907, 909, 912, 915, 916, 921, 997, 998, 1000, 1001, 1003, 1004, 1007, 1008, 1010, 1018, 1019, 1020, 1023, 1024, 1025, 1030, 1036, 1038, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "plot_": [323, 396], "plot_2d": [118, 233], "plot_3d": 233, "plot_accuraci": 47, "plot_adaboost_multiclass": [134, 1025], "plot_adaboost_regress": [135, 1025], "plot_adaboost_twoclass": [136, 1025], "plot_adjusted_for_chance_measur": [72, 1025], "plot_affinity_propag": [73, 1025], "plot_agglomerative_clust": [74, 1025], "plot_agglomerative_clustering_metr": [75, 1025], "plot_agglomerative_dendrogram": [76, 1025], "plot_all_sc": [311, 1025], "plot_anomaly_comparison": [240, 1025], "plot_ard": [193, 647, 1025], "plot_arg": 307, "plot_bayesian_ridge_curvefit": [194, 1025], "plot_benchmark_throughput": 49, "plot_bias_vari": [137, 1025], "plot_bicluster_newsgroup": [57, 1025], "plot_birch_vs_minibatchkmean": [77, 1025], "plot_bisect_kmean": [78, 1025], "plot_caching_nearest_neighbor": [293, 1025], "plot_calibr": [61, 378, 1025], "plot_calibration_curv": [62, 1025], "plot_calibration_multiclass": [63, 1025], "plot_causal_interpret": [185, 1025], "plot_chance_level": [250, 265, 278, 280, 281, 703, 705, 1051], "plot_classif": [294, 1025], "plot_classification_prob": [66, 1025], "plot_classifier_chain_yeast": [290, 1025], "plot_classifier_comparison": [67, 1025], "plot_clust": 85, "plot_cluster_comparison": [79, 1025], "plot_coin_segment": [80, 1025], "plot_coin_ward_segment": [81, 1025], "plot_color": [136, 357], "plot_column_transform": [102, 1025], "plot_column_transformer_mixed_typ": [103, 1025], "plot_compare_calibr": [64, 1025], "plot_compare_cross_decomposit": [115, 1025], "plot_compare_gpr_krr": [170, 1025], "plot_compare_method": [233, 1025], "plot_compare_reduct": [104, 1025], "plot_concentration_prior": [256, 1025], "plot_confusion_matrix": [264, 320, 1025, 1045, 1046, 1047, 1048], "plot_cost_complexity_prun": [356, 1025], "plot_cost_sensitive_learn": [265, 1025], "plot_covariance_estim": [109, 1025], "plot_custom_kernel": [337, 1025], "plot_cv_diabet": [159, 1025], "plot_cv_indic": [266, 1025], "plot_cv_predict": [267, 1025], "plot_cyclical_feature_engin": [43, 1025], "plot_dbscan": [82, 1025], "plot_decision_funct": 350, "plot_dendrogram": 76, "plot_det": [268, 1025], "plot_det_curv": [1047, 1048], "plot_dict_face_patch": [83, 1025], "plot_digit": 44, "plot_digits_agglomer": [84, 1025], "plot_digits_classif": [68, 1025], "plot_digits_classification_exercis": [160, 1025], "plot_digits_denois": [44, 1025], "plot_digits_kde_sampl": [295, 1025], "plot_digits_linkag": [85, 1025], "plot_digits_pip": [105, 1025], "plot_discret": [312, 1025], "plot_discretization_classif": [313, 1025], "plot_discretization_strategi": [314, 1025], "plot_display_object_visu": [241, 1025], "plot_distribut": 311, "plot_document_classification_20newsgroup": [352, 1025], "plot_document_clust": [353, 1025], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [195, 1025], "plot_ellips": [70, 256], "plot_embed": 234, "plot_ensemble_oob": [138, 1025], "plot_estimator_represent": [242, 1025], "plot_f_test_vs_mi": [163, 1025], "plot_face_compress": [86, 1025], "plot_face_recognit": [45, 1025], "plot_faces_decomposit": [120, 1025], "plot_feature_agglomeration_vs_univariate_select": [87, 1025], "plot_feature_effect": 352, "plot_feature_select": [164, 1025], "plot_feature_selection_pipelin": [165, 1025], "plot_feature_transform": [139, 1025], "plot_feature_union": [106, 1025], "plot_fig": 210, "plot_forest_hist_grad_boosting_comparison": [140, 1025], "plot_forest_import": [141, 1025], "plot_forest_iri": [142, 1025], "plot_galleri": [45, 120], "plot_gmm": [257, 1025], "plot_gmm_covari": [258, 1025], "plot_gmm_init": [259, 1025], "plot_gmm_pdf": [260, 1025], "plot_gmm_select": [261, 1025], "plot_gmm_sin": [262, 1025], "plot_gpc": [171, 1025], "plot_gpc_iri": [172, 1025], "plot_gpc_isoprob": [173, 1025], "plot_gpc_xor": [174, 1025], "plot_gpr_co2": [175, 1025], "plot_gpr_noisi": [176, 1025], "plot_gpr_noisy_target": [177, 1025], "plot_gpr_on_structured_data": [178, 1025], "plot_gpr_prior_posterior": [179, 1025], "plot_gpr_sampl": 179, "plot_gradient_boosting_categor": [143, 1025], "plot_gradient_boosting_early_stop": [144, 1025], "plot_gradient_boosting_oob": [145, 1025], "plot_gradient_boosting_quantil": [146, 1025], "plot_gradient_boosting_regress": [147, 1025], "plot_gradient_boosting_regular": [148, 1025], "plot_grid_search_digit": [269, 1025], "plot_grid_search_refit_cal": [270, 1025], "plot_grid_search_stat": [271, 1025], "plot_grid_search_text_feature_extract": [272, 1025], "plot_hashing_vs_dict_vector": [354, 1025], "plot_hdbscan": [88, 1025], "plot_hgbt_regress": [149, 1025], "plot_huber_vs_ridg": [196, 1025], "plot_hyperplan": [205, 222, 248], "plot_ica_blind_source_separ": [121, 1025], "plot_ica_vs_pca": [122, 1025], "plot_idx": 142, "plot_image_denois": [123, 1025], "plot_incremental_pca": [124, 1025], "plot_indic": 274, "plot_inductive_clust": [89, 1025], "plot_influ": 46, "plot_info": 143, "plot_iris_dtc": [357, 1025], "plot_iris_exercis": [161, 1025], "plot_iris_logist": [197, 1025], "plot_iris_svc": [338, 1025], "plot_isolation_forest": [150, 1025], "plot_isotonic_regress": [243, 1025], "plot_iterative_imputer_variants_comparison": [181, 1025], "plot_johnson_lindenstrauss_bound": [244, 1025], "plot_kde_1d": [296, 1025], "plot_kernel_approxim": [245, 1025], "plot_kernel_pca": [125, 1025], "plot_kernel_ridge_regress": [246, 1025], "plot_kind": 43, "plot_kmeans_assumpt": [90, 1025], "plot_kmeans_digit": [91, 1025], "plot_kmeans_plusplu": [92, 1025], "plot_kmeans_silhouette_analysi": [93, 1025], "plot_kmeans_stability_low_dim_dens": [94, 1025], "plot_label_propagation_digit": [330, 1025], "plot_label_propagation_digits_active_learn": [331, 1025], "plot_label_propagation_structur": [332, 1025], "plot_lasso_and_elasticnet": [198, 1025], "plot_lasso_dense_vs_sparse_data": [199, 1025], "plot_lasso_lars_": [200, 1025], "plot_lasso_lasso_lars_elasticnet_path": [201, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 1025], "plot_lasso_model_select": [202, 650, 656, 1025], "plot_lda": [69, 1025], "plot_lda_qda": [70, 1025], "plot_learning_curv": [273, 1025], "plot_likelihood_ratio": [274, 1025], "plot_linear_model_coefficient_interpret": [186, 1025], "plot_linearsvc_support_vector": [339, 1025], "plot_linkage_comparison": [95, 1025], "plot_lle_digit": [234, 1025], "plot_lof_novelty_detect": [297, 1025], "plot_lof_outlier_detect": [298, 1025], "plot_logist": [203, 1025], "plot_logistic_l1_l2_spars": [204, 1025], "plot_logistic_multinomi": [205, 1025], "plot_logistic_path": [206, 1025], "plot_lw_vs_oa": [110, 1025], "plot_mahalanobis_dist": [111, 1025], "plot_manifold_spher": [235, 1025], "plot_map_data_to_norm": [315, 1025], "plot_md": [236, 1025], "plot_mean_shift": [96, 1025], "plot_metadata_rout": [247, 1025], "plot_method": [48, 70, 197, 227, 294, 299, 337, 339, 340, 342, 343, 345, 634], "plot_mini_batch_kmean": [97, 1025], "plot_missing_valu": [182, 1025], "plot_mlp_alpha": [306, 1025], "plot_mlp_training_curv": [307, 1025], "plot_mnist_filt": [308, 1025], "plot_model_complexity_influ": [46, 1025], "plot_monotonic_constraint": [151, 1025], "plot_multi_metric_evalu": [275, 1025], "plot_multi_task_lasso_support": [207, 1025], "plot_multiclass_overview": [288, 1025], "plot_multilabel": [248, 1025], "plot_multioutput_face_complet": [249, 1025], "plot_n_features_influ": 49, "plot_nca_classif": [299, 1025], "plot_nca_dim_reduct": [300, 1025], "plot_nca_illustr": [301, 1025], "plot_nearest_centroid": [302, 1025], "plot_nested_cross_validation_iri": [276, 1025], "plot_nnl": [208, 1025], "plot_num": [79, 95, 240], "plot_obs_pr": 231, "plot_ol": [209, 1025], "plot_ols_3d": [210, 1025], "plot_ols_ridge_vari": [211, 1025], "plot_omp": [212, 1025], "plot_on_dataset": 307, "plot_oneclass": [340, 1025], "plot_opt": [98, 1025], "plot_out_of_core_classif": [47, 1025], "plot_outlier_detection_bench": [250, 1025], "plot_outlier_detection_win": [48, 1025], "plot_partial_depend": [187, 320, 321, 322, 1025, 1040, 1044, 1045, 1046, 1047, 1048, 1049], "plot_partial_dependence_visualization_api": [251, 1025], "plot_pca_iri": [126, 1025], "plot_pca_vs_fa_model_select": [127, 1025], "plot_pca_vs_lda": [128, 1025], "plot_pcr_vs_pl": [116, 1025], "plot_permutation_import": [188, 189, 1025], "plot_permutation_importance_multicollinear": [189, 1025], "plot_permutation_tests_for_classif": [277, 1025], "plot_pipeline_displai": [252, 1025], "plot_poisson_regression_non_normal_loss": [213, 1025], "plot_polynomial_interpol": [214, 882, 886, 1025], "plot_precision_recal": [278, 1025], "plot_precision_recall_curv": [320, 1045, 1047, 1048], "plot_prediction_lat": [49, 1025], "plot_quantile_regress": [215, 1025], "plot_random_forest_embed": [152, 1025], "plot_random_forest_regression_multioutput": [153, 1025], "plot_random_multilabel_dataset": [118, 1025], "plot_randomized_search": [279, 1025], "plot_rang": 136, "plot_ransac": [216, 1025], "plot_rbf_paramet": [341, 1025], "plot_rbm_logistic_classif": [309, 1025], "plot_regress": [303, 1025], "plot_release_highlights_0_22_0": [320, 1025], "plot_release_highlights_0_23_0": [321, 1025], "plot_release_highlights_0_24_0": [322, 1025], "plot_release_highlights_1_0_0": [323, 1025], "plot_release_highlights_1_1_0": [324, 1025], "plot_release_highlights_1_2_0": [325, 1025], "plot_release_highlights_1_3_0": [326, 1025], "plot_release_highlights_1_4_0": [327, 1025], "plot_release_highlights_1_5_0": [328, 1025], "plot_result": [70, 143, 256, 257, 262], "plot_rfe_digit": [166, 1025], "plot_rfe_with_cross_valid": [167, 1025], "plot_ridge_coeff": [217, 1025], "plot_ridge_path": [218, 1025], "plot_robust_fit": [219, 1025], "plot_robust_vs_empirical_covari": [112, 1025], "plot_roc": [280, 1025], "plot_roc_crossv": [281, 1025], "plot_roc_curv": [320, 1045, 1047], "plot_roc_curve_visualization_api": [253, 1025], "plot_roc_pr_curv": 265, "plot_sampl": [122, 262], "plot_scalable_poly_kernel": [191, 1025], "plot_scaling_import": [316, 1025], "plot_scatt": 89, "plot_segmentation_toi": [99, 1025], "plot_select_from_model_diabet": [168, 1025], "plot_self_training_varying_threshold": [333, 1025], "plot_semi_supervised_newsgroup": [334, 1025], "plot_semi_supervised_versus_svm_iri": [335, 1025], "plot_separating_hyperplan": [342, 1025], "plot_separating_hyperplane_unbalanc": [343, 1025], "plot_set_output": [254, 1025], "plot_sgd_comparison": [220, 1025], "plot_sgd_early_stop": [221, 1025], "plot_sgd_iri": [222, 1025], "plot_sgd_loss_funct": [223, 1025], "plot_sgd_penalti": [224, 1025], "plot_sgd_separating_hyperplan": [225, 1025], "plot_sgd_weighted_sampl": [226, 1025], "plot_sgdocsvm_vs_ocsvm": [227, 1025], "plot_sparse_cod": [129, 1025], "plot_sparse_cov": [113, 1025], "plot_sparse_logistic_regression_20newsgroup": [228, 1025], "plot_sparse_logistic_regression_mnist": [229, 1025], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 1025], "plot_species_kd": [304, 1025], "plot_spectral_biclust": [58, 1025], "plot_spectral_coclust": [59, 1025], "plot_stack_predictor": [154, 1025], "plot_step": [136, 142, 357], "plot_step_coars": 142, "plot_stock_market": [51, 1025], "plot_subfigur": 248, "plot_successive_halving_heatmap": [282, 1025], "plot_successive_halving_iter": [283, 1025], "plot_surfac": [187, 210], "plot_svm_anova": [344, 1025], "plot_svm_kernel": [345, 1025], "plot_svm_margin": [346, 1025], "plot_svm_regress": [347, 1025], "plot_svm_scale_c": [348, 1025], "plot_svm_tie_break": [349, 1025], "plot_swissrol": [237, 1025], "plot_t_sne_perplex": [238, 1025], "plot_target_encod": [317, 1025], "plot_target_encoder_cross_v": [318, 1025], "plot_theilsen": [230, 1025], "plot_time_series_lagged_featur": [52, 1025], "plot_titl": 256, "plot_tomography_l1_reconstruct": [53, 1025], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1025], "plot_train_error_vs_test_error": [284, 1025], "plot_training_data_with_decision_boundari": 345, "plot_transformed_target": [107, 1025], "plot_tre": [2, 357, 360, 1020, 1044, 1046, 1047, 1048, 1050, 1051, 1053], "plot_tree_regress": [358, 1025], "plot_tree_regression_multioutput": [359, 1025], "plot_tuned_decision_threshold": [285, 1025], "plot_tweedie_regression_insurance_claim": [231, 1025], "plot_underfitting_overfit": [286, 1025], "plot_unveil_tree_structur": [360, 1025], "plot_varimax_fa": [130, 1025], "plot_voting_decision_region": [155, 1025], "plot_voting_proba": [156, 1025], "plot_voting_regressor": [157, 1025], "plot_ward_structured_vs_unstructur": [100, 1025], "plot_weighted_sampl": [350, 1025], "plotli": [140, 272, 378, 396, 403], "pls1": [413, 486], "pls2": [413, 486], "plsca": [115, 485], "plscanon": [2, 115, 484, 486, 487, 1005, 1026, 1030, 1039, 1043, 1045, 1047, 1049, 1053], "plsregress": [2, 115, 116, 1005, 1026, 1030, 1042, 1045, 1047, 1049, 1051, 1053], "plssvd": [2, 484, 485, 1026, 1030, 1047, 1049, 1053], "plsw2a": 413, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 327, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 374, 385, 440, 505, 634, 635, 700, 701, 703, 704, 705, 809, 826, 921, 1011, 1032], "plu": [278, 375, 383, 682, 838, 841, 1005, 1018], "plug": [415, 1000, 1028], "plugin": 396, "plural": 1041, "pm": [179, 187, 281, 417, 1004], "pmlr": 699, "pmml": 1023, "png": [0, 68, 919], "pnucci": 1051, "po": [147, 236, 418], "podshumok": [1041, 1042], "poesio": 719, "poetri": 404, "poh": [1043, 1044], "point": [2, 8, 37, 43, 48, 50, 52, 53, 63, 67, 72, 73, 75, 76, 82, 85, 88, 91, 93, 97, 100, 111, 112, 115, 118, 119, 121, 123, 125, 126, 134, 136, 140, 142, 143, 144, 149, 152, 167, 168, 172, 177, 178, 183, 186, 187, 188, 193, 197, 202, 205, 207, 209, 211, 213, 214, 215, 217, 219, 222, 225, 226, 230, 231, 233, 234, 235, 236, 237, 240, 243, 245, 258, 262, 263, 264, 268, 272, 273, 274, 278, 280, 281, 288, 290, 291, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 312, 313, 315, 317, 328, 330, 331, 333, 335, 337, 341, 342, 343, 345, 346, 349, 350, 352, 353, 354, 357, 361, 365, 366, 367, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 386, 390, 392, 393, 406, 409, 410, 415, 416, 417, 418, 421, 422, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 460, 462, 463, 471, 474, 476, 499, 501, 507, 515, 517, 518, 522, 525, 528, 533, 536, 538, 544, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 613, 614, 631, 634, 635, 636, 640, 641, 642, 647, 648, 654, 658, 660, 661, 673, 674, 676, 678, 679, 681, 682, 685, 686, 691, 692, 693, 694, 695, 696, 697, 704, 709, 710, 713, 716, 720, 726, 728, 734, 739, 740, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 767, 782, 783, 793, 794, 800, 801, 803, 817, 819, 825, 828, 830, 837, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 864, 865, 868, 872, 877, 886, 887, 901, 902, 903, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 931, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1016, 1017, 1019, 1020, 1023, 1024, 1025, 1030, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pointer": [378, 386, 444, 1044], "pointplot": 149, "points_color": 233, "pointwis": [137, 177, 421, 446], "poisson": [2, 43, 52, 183, 192, 248, 374, 417, 466, 467, 499, 526, 555, 561, 565, 568, 651, 672, 675, 683, 709, 727, 748, 752, 753, 755, 833, 867, 868, 871, 872, 880, 881, 882, 887, 916, 918, 955, 1000, 1020, 1025, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "poisson_gbrt": 213, "poisson_glm": 213, "poissonregressor": [2, 213, 231, 321, 324, 651, 683, 1000, 1046, 1049, 1050], "pokorni": 1050, "pola": 52, "polar": [105, 175, 378, 390, 396, 403, 434, 444, 445, 447, 449, 451, 466, 470, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 564, 565, 569, 570, 571, 572, 573, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 1052, 1053], "pole": 235, "poli": [43, 161, 191, 271, 338, 345, 347, 454, 538, 623, 768, 777, 803, 882, 909, 910, 911, 912, 913, 1000, 1014], "polici": [149, 185, 186, 213, 231, 265, 381, 392, 538, 544, 1000, 1050], "policyhold": [213, 231, 1000], "polit": [57, 352, 373, 377, 1000, 1005], "pollak": 1053, "polli": 352, "pollut": [352, 731, 788, 1004, 1010], "polmauri": 1042, "poloso": 1049, "polycollect": [809, 826], "polynomi": [2, 54, 181, 183, 190, 192, 213, 219, 245, 252, 271, 286, 296, 322, 323, 338, 347, 370, 374, 454, 493, 623, 642, 643, 644, 646, 648, 675, 768, 777, 778, 833, 868, 877, 879, 882, 886, 907, 909, 910, 911, 912, 913, 999, 1019, 1025, 1026, 1030, 1047, 1048], "polynomial_featur": 286, "polynomial_kernel": [2, 406, 768, 1002, 1052], "polynomialcountsketch": [2, 191, 642, 644, 996, 1047, 1049, 1052], "polynomialfeatur": [2, 43, 193, 213, 214, 219, 252, 286, 322, 345, 886, 1000, 1014, 1039, 1043, 1044, 1045, 1048, 1049, 1051, 1052], "polynomialfeaturespolynomialfeatur": 252, "polysemi": 415, "polytop": 518, "pomegran": 1023, "ponc": [415, 534, 540], "poncho": 1028, "pone": 372, "ponnuthurai": 375, "ponzi": 317, "pooch": [86, 378, 396, 403], "pooja": [1050, 1051, 1052], "pool": [280, 390, 447, 638, 972, 1024, 1046], "pooling_func": [447, 1043], "poolqc": 143, "poolsawat": [1049, 1050], "poor": [187, 191, 277, 333, 408, 414, 415, 693, 697, 741, 844, 847, 848, 998, 999, 1001, 1006, 1024, 1042, 1043, 1044, 1046, 1048], "poor_scor": [923, 925], "poorer": [143, 361, 415], "poorest": 1006, "poorli": [62, 64, 95, 109, 116, 137, 148, 237, 366, 410, 417, 531, 633, 1000, 1001, 1041], "poorna": [1045, 1047], "pop": [360, 390, 922, 1043], "popa": [1045, 1046], "popitem": 922, "popo": 1038, "popul": [104, 109, 111, 149, 186, 213, 250, 274, 311, 373, 387, 392, 412, 442, 492, 715, 721, 849, 850, 851, 853, 855, 857, 858, 859, 972, 1004, 1010, 1014, 1020], "popular": [6, 10, 181, 237, 373, 376, 383, 386, 390, 392, 416, 417, 418, 420, 454, 464, 994, 996, 1000, 1002, 1009, 1018, 1024], "port": [376, 396, 1045], "portabl": [404, 1023], "portfolio": [213, 231, 998], "portion": [45, 47, 112, 144, 168, 280, 365, 373, 375, 378, 384, 392, 791, 828, 845, 993, 1003, 1007], "portland": [410, 421, 446], "portnoi": [1000, 1052], "portrait": [45, 415], "pos_class": 47, "pos_label": [241, 250, 265, 285, 392, 409, 440, 441, 701, 703, 705, 709, 710, 712, 730, 732, 733, 741, 785, 786, 787, 790, 792, 802, 874, 891, 1004, 1043, 1047, 1049, 1053], "pos_lr": 274, "pos_lr_bas": 274, "pos_lr_base_std": 274, "pos_tagg": 418, "pos_vector": 418, "pos_window": 418, "pose": [217, 279, 1000], "posit": [0, 2, 43, 45, 47, 50, 51, 61, 62, 64, 100, 130, 149, 151, 156, 166, 179, 185, 186, 198, 201, 208, 213, 214, 215, 217, 231, 236, 244, 250, 265, 268, 271, 274, 278, 280, 281, 284, 285, 311, 321, 322, 326, 328, 352, 360, 365, 373, 377, 378, 380, 385, 387, 392, 393, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 440, 441, 444, 448, 449, 451, 466, 469, 497, 501, 503, 507, 511, 512, 513, 528, 530, 532, 533, 534, 536, 538, 539, 540, 545, 548, 549, 551, 552, 553, 560, 564, 565, 566, 567, 595, 596, 597, 598, 599, 601, 602, 603, 605, 609, 613, 614, 623, 634, 635, 646, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 672, 675, 676, 677, 678, 680, 683, 684, 685, 686, 687, 690, 693, 701, 703, 705, 710, 712, 715, 716, 718, 719, 721, 723, 725, 727, 730, 732, 733, 734, 738, 739, 741, 742, 743, 744, 746, 747, 755, 757, 761, 769, 785, 786, 787, 790, 791, 792, 800, 801, 802, 806, 807, 830, 847, 848, 849, 851, 853, 855, 857, 859, 860, 870, 871, 874, 880, 883, 886, 891, 895, 899, 900, 902, 903, 907, 908, 911, 912, 913, 915, 917, 924, 927, 930, 949, 951, 968, 970, 995, 996, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1019, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "position": 392, "positive_class": [47, 715], "positive_cod": [120, 534, 540, 545, 548, 549], "positive_dict": [120, 534, 540, 548, 549], "positive_featur": 383, "positive_likelihood_ratio": [274, 715], "positive_onli": [924, 927], "posix": [366, 390], "posixpath": 52, "possa": 1042, "possibl": [30, 43, 52, 55, 63, 64, 72, 82, 88, 103, 109, 120, 137, 140, 149, 151, 170, 186, 187, 188, 189, 213, 230, 231, 245, 247, 265, 271, 272, 273, 274, 276, 277, 278, 280, 281, 290, 320, 341, 348, 352, 353, 361, 365, 366, 367, 371, 372, 373, 378, 379, 380, 381, 382, 384, 386, 390, 391, 392, 396, 401, 404, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 424, 433, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 499, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 712, 724, 725, 726, 727, 731, 745, 759, 781, 786, 788, 791, 800, 801, 802, 803, 805, 806, 807, 809, 815, 816, 817, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 931, 933, 934, 937, 943, 974, 977, 993, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1012, 1014, 1019, 1020, 1024, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051], "possibli": [90, 116, 168, 213, 228, 345, 353, 375, 377, 386, 404, 410, 417, 418, 453, 455, 592, 842, 843, 844, 845, 846, 912, 913, 915, 916, 917, 918, 993, 996, 1001, 1007, 1014, 1050], "post": [2, 46, 54, 57, 102, 167, 168, 183, 241, 263, 275, 278, 288, 324, 328, 333, 352, 353, 354, 355, 360, 365, 373, 377, 378, 383, 391, 405, 410, 450, 490, 491, 499, 503, 554, 560, 561, 562, 563, 564, 567, 568, 661, 703, 705, 715, 721, 745, 787, 790, 802, 803, 819, 825, 830, 833, 868, 887, 905, 915, 916, 917, 918, 1004, 1020, 1025, 1027, 1028, 1030, 1046], "post1": [376, 396, 402, 403, 1033], "poster": [352, 377, 378], "posterior": [169, 170, 171, 176, 183, 193, 265, 271, 285, 415, 420, 552, 553, 555, 613, 614, 616, 617, 618, 622, 625, 626, 630, 647, 648, 711, 800, 802, 825, 998, 1023, 1025, 1041, 1044], "posteriori": [1000, 1006], "postfit_hook": 46, "postiv": 278, "postpon": [380, 382], "postprocess": [61, 408, 538, 544], "postprocessor": 1046, "postscript": 919, "potenti": [2, 43, 64, 88, 109, 149, 182, 185, 187, 193, 265, 297, 298, 306, 326, 327, 345, 354, 365, 366, 376, 392, 396, 401, 409, 410, 414, 417, 418, 470, 484, 485, 486, 487, 499, 527, 552, 560, 561, 564, 565, 567, 568, 576, 609, 614, 637, 766, 825, 897, 898, 905, 915, 916, 917, 918, 1010, 1018, 1020, 1023, 1038, 1045, 1046, 1049, 1052, 1053], "poughon": 1042, "poundal": 102, "pour": 1004, "pourbozorg": [1043, 1044, 1045], "pow": [679, 680, 681, 864, 865], "powel": [45, 373], "power": [2, 43, 46, 55, 140, 144, 185, 214, 231, 262, 274, 279, 295, 311, 312, 315, 330, 338, 365, 366, 391, 408, 410, 413, 416, 417, 418, 421, 446, 484, 485, 486, 535, 538, 544, 547, 633, 683, 697, 727, 750, 752, 755, 849, 850, 857, 858, 860, 861, 882, 883, 884, 895, 896, 950, 951, 1000, 1001, 1004, 1012, 1014, 1018, 1019, 1028, 1038, 1041, 1043, 1045, 1046, 1048, 1052], "power_iteration_norm": [406, 544, 547, 950, 951, 1049], "power_t": [679, 680, 681, 864, 865, 1018], "power_transform": [2, 883, 896, 1043], "powers_": 882, "powershel": 376, "powertransform": [2, 315, 884, 895, 994, 1014, 1043, 1046, 1049, 1051], "pox": 288, "poznik": [1048, 1049, 1050], "pp": [0, 96, 168, 270, 375, 410, 412, 418, 421, 422, 446, 450, 454, 464, 514, 536, 537, 544, 593, 638, 646, 667, 688, 689, 723, 729, 733, 743, 759, 772, 786, 842, 844, 846, 863, 883, 895, 997, 1004, 1006, 1007, 1017], "pp2013": 996, "pp84": 420, "ppc64le": 386, "ppf": 271, "ppm": 175, "pprint": [55, 146, 247, 272, 373, 946], "pq": [52, 325], "pr": [0, 156, 366, 378, 381, 382, 386, 418, 744, 1004, 1027, 1045, 1047], "pr_displai": 241, "pr_number": 386, "prabakaran": [1043, 1044, 1047, 1049, 1050], "prabhakar": 415, "practic": [64, 86, 103, 111, 116, 123, 140, 143, 144, 149, 170, 185, 186, 191, 198, 215, 240, 246, 272, 279, 297, 298, 322, 328, 341, 345, 366, 378, 380, 381, 382, 384, 386, 391, 392, 410, 412, 414, 415, 416, 417, 418, 420, 449, 454, 464, 524, 527, 592, 635, 636, 673, 800, 846, 900, 907, 993, 994, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1023, 1024, 1026, 1028, 1029, 1030, 1037, 1041, 1043, 1045, 1047], "practicalswift": 1041, "practis": 218, "practition": [138, 217], "pradeep": [1043, 1044], "pragmat": 378, "prakash": [1040, 1042, 1048], "pramod": 1049, "pranayanchuri": 1048, "prang": 379, "prasanth": 1050, "pratama": 1046, "pratap": [1039, 1042, 1049], "prathmesh": 1044, "pratik": 1042, "pratiqu": 375, "pravar": 1043, "pravarmahajan": [1042, 1043], "pre": [44, 103, 186, 202, 284, 311, 354, 376, 378, 392, 396, 409, 412, 414, 415, 417, 418, 419, 421, 422, 445, 446, 449, 461, 536, 538, 693, 715, 766, 802, 870, 912, 1004, 1009, 1014, 1019, 1020, 1023, 1024, 1030, 1038, 1043, 1049, 1053], "pre_dispatch": [803, 809, 817, 826, 828, 829, 830, 831, 834, 969, 1038], "preambl": 88, "prec": [113, 241, 530, 1004], "prec_": 113, "prec_macro": 414, "preced": [366, 378, 382, 489, 1004, 1035], "precipit": 408, "precis": [2, 8, 45, 52, 62, 68, 102, 107, 113, 120, 165, 176, 177, 183, 191, 241, 263, 264, 265, 269, 309, 311, 330, 331, 378, 380, 392, 406, 407, 408, 409, 410, 412, 415, 417, 445, 471, 472, 473, 474, 475, 476, 477, 478, 480, 507, 526, 535, 537, 544, 547, 647, 648, 649, 651, 653, 654, 655, 657, 658, 659, 672, 675, 677, 683, 685, 686, 690, 702, 703, 709, 710, 711, 716, 730, 732, 733, 734, 742, 744, 766, 785, 786, 787, 790, 791, 800, 801, 825, 833, 836, 847, 848, 853, 868, 887, 891, 907, 912, 919, 921, 951, 998, 1000, 1007, 1008, 1019, 1025, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "precision_": [51, 113, 471, 472, 473, 474, 475, 476, 477, 478], "precision_macro": 414, "precision_recall_curv": [2, 241, 278, 703, 709, 710, 730, 1004, 1036, 1037, 1041, 1048, 1049, 1051, 1053], "precision_recall_fscore_support": [2, 716, 732, 733, 787, 790, 1004, 1039, 1043, 1045, 1051], "precision_scor": [2, 62, 265, 278, 711, 790, 1004, 1035, 1037, 1038, 1039, 1040, 1045, 1051], "precision_threshold": 269, "precisionrecalldisplai": [2, 265, 278, 323, 785, 787, 790, 1004, 1045, 1048, 1051, 1052, 1053], "precisions_": [800, 801], "precisions_cholesky_": [800, 801, 1049], "precisions_init": [801, 1049, 1051], "precompil": 376, "precomput": [119, 120, 121, 183, 192, 212, 236, 247, 291, 293, 380, 387, 390, 392, 410, 418, 421, 433, 442, 443, 446, 447, 448, 452, 454, 459, 467, 473, 484, 485, 486, 527, 534, 538, 540, 543, 544, 545, 551, 557, 559, 561, 563, 565, 568, 571, 573, 613, 614, 623, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 684, 685, 687, 688, 691, 693, 694, 695, 699, 777, 781, 784, 795, 796, 803, 817, 840, 841, 849, 850, 851, 853, 854, 855, 857, 858, 859, 865, 908, 909, 910, 911, 912, 913, 916, 918, 924, 979, 980, 981, 996, 1000, 1002, 1007, 1019, 1024, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "precompute_dist": [1039, 1046], "precompute_gram": 1037, "precomputed_nearest_neighbor": [454, 694], "precondit": [410, 454, 464, 698, 1020, 1051], "pred": [43, 46, 50, 52, 68, 349, 352, 373, 651, 672, 683, 700, 705, 709, 721, 732, 733, 741, 786, 787, 790, 791, 1004], "pred1": 157, "pred2": 157, "pred3": 157, "pred4": 157, "pred_background": 50, "pred_decis": [738, 1004, 1048], "pred_entropi": [330, 331], "pred_nam": 45, "pred_ort": 404, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [134, 452, 457, 458, 459, 1052], "predecessor_": [452, 459], "predecessor_correct": [452, 458], "predefin": [2, 275, 816, 993, 1007, 1050, 1052], "predefinedsplit": [2, 414, 1039], "predetermin": [410, 1001], "predict": [2, 5, 13, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 89, 90, 91, 95, 102, 103, 104, 105, 107, 115, 130, 132, 133, 134, 136, 137, 138, 140, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 165, 166, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 191, 193, 196, 197, 198, 205, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 222, 227, 228, 230, 231, 240, 241, 243, 245, 247, 249, 257, 258, 259, 260, 261, 262, 263, 264, 269, 271, 273, 274, 277, 280, 281, 285, 286, 288, 290, 294, 297, 298, 299, 302, 303, 309, 311, 312, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 331, 333, 334, 335, 337, 338, 340, 341, 345, 347, 348, 349, 352, 353, 357, 358, 359, 360, 361, 364, 366, 370, 373, 375, 378, 380, 385, 387, 392, 395, 401, 404, 405, 406, 408, 410, 411, 413, 415, 417, 418, 419, 424, 427, 432, 433, 439, 440, 441, 442, 444, 445, 446, 449, 450, 451, 467, 471, 484, 485, 486, 489, 504, 511, 527, 537, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 585, 596, 597, 605, 609, 613, 614, 616, 617, 618, 619, 625, 628, 630, 631, 633, 634, 635, 636, 637, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 715, 717, 718, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 741, 744, 745, 746, 749, 751, 753, 755, 759, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 799, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 857, 858, 864, 865, 867, 874, 887, 888, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1030, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "predict_ecoc": 1039, "predict_joint_log_proba": [842, 843, 844, 845, 846, 1050], "predict_log_proba": [380, 392, 552, 553, 554, 556, 558, 560, 562, 567, 596, 597, 661, 662, 679, 802, 803, 806, 807, 817, 825, 828, 838, 842, 843, 844, 845, 846, 864, 867, 904, 909, 912, 915, 917, 1019, 1035, 1048, 1052], "predict_ovo": 1039, "predict_ovr": 1039, "predict_param": [247, 467, 570, 571, 596, 597, 1048], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 152, 156, 168, 171, 172, 173, 174, 265, 280, 285, 290, 306, 313, 316, 320, 322, 328, 352, 380, 385, 392, 408, 409, 417, 439, 440, 552, 553, 554, 556, 558, 560, 562, 564, 567, 570, 572, 596, 597, 613, 622, 623, 625, 626, 634, 635, 636, 661, 662, 679, 701, 703, 705, 725, 744, 745, 791, 800, 801, 802, 803, 806, 807, 817, 825, 828, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 857, 864, 867, 874, 902, 903, 904, 909, 912, 915, 917, 926, 1000, 1004, 1006, 1008, 1011, 1017, 1018, 1019, 1020, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "predict_proba_ovr": 1039, "predicted_label": [330, 331], "prediction_df": 149, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [2, 43, 52, 107, 154, 186, 267, 325, 1004, 1050, 1052], "predictions_kr": 170, "predictive_analyt": 1020, "predictive_word": 352, "predictor": [2, 107, 133, 143, 157, 181, 183, 213, 231, 242, 267, 380, 391, 392, 411, 413, 414, 417, 420, 468, 469, 484, 485, 486, 499, 519, 520, 521, 558, 559, 565, 568, 571, 605, 613, 633, 635, 636, 651, 656, 660, 672, 676, 683, 704, 828, 830, 839, 840, 867, 868, 880, 881, 887, 977, 1000, 1005, 1025, 1036, 1042, 1045], "predispatch": [809, 826, 831, 834], "predit": 116, "predomin": [380, 1036], "prefer": [73, 79, 88, 149, 262, 280, 311, 361, 365, 366, 367, 378, 379, 380, 392, 410, 414, 415, 417, 418, 442, 456, 473, 474, 480, 489, 511, 512, 630, 635, 636, 657, 661, 662, 704, 729, 731, 745, 760, 761, 838, 856, 882, 907, 908, 957, 969, 993, 996, 998, 1000, 1004, 1009, 1019, 1020, 1023, 1027, 1036, 1042, 1044, 1048, 1049, 1052], "prefetch": 969, "prefit": [63, 265, 392, 408, 409, 419, 439, 570, 571, 600, 802, 825, 1024, 1047, 1048, 1049], "prefix": [2, 55, 102, 272, 293, 320, 378, 382, 384, 386, 420, 426, 444, 445, 447, 449, 451, 466, 469, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 642, 643, 644, 645, 691, 692, 695, 809, 831, 851, 856, 859, 863, 866, 867, 873, 899, 900, 1041, 1042, 1048, 1050, 1053], "prein": [0, 368, 1047, 1048, 1049], "preiss": 1048, "preliminari": 464, "prematur": 1048, "prepar": [214, 247, 352, 365, 382, 384, 386, 926, 1020, 1028, 1043, 1051], "prepend": [186, 1035], "preprint": 375, "preprocess": [2, 43, 44, 45, 49, 64, 67, 77, 79, 82, 86, 88, 91, 95, 102, 103, 104, 105, 107, 116, 120, 130, 139, 143, 164, 166, 168, 175, 188, 191, 193, 195, 200, 202, 204, 213, 214, 219, 229, 231, 234, 241, 242, 251, 254, 265, 268, 278, 280, 285, 286, 294, 299, 300, 306, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 341, 344, 353, 367, 370, 372, 375, 378, 383, 391, 392, 404, 406, 407, 410, 411, 414, 417, 418, 419, 466, 467, 468, 469, 491, 570, 584, 585, 591, 592, 594, 633, 661, 662, 675, 677, 679, 681, 690, 836, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 907, 908, 909, 910, 912, 913, 994, 1000, 1005, 1008, 1015, 1018, 1019, 1021, 1023, 1025, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "preprocessor": [103, 154, 186, 213, 242, 250, 252, 317, 321, 323, 324, 325, 327, 411, 418, 591, 592, 594, 1023, 1035, 1038, 1043, 1045], "preprocessor__cat__selector__percentil": 103, "preprocessor__num__imputer__strategi": 103, "preprocessor_list": 250, "prescrib": 392, "presenc": [2, 48, 93, 95, 111, 112, 132, 185, 189, 198, 217, 250, 311, 376, 379, 392, 412, 415, 715, 729, 759, 772, 836, 870, 878, 880, 887, 987, 994, 1000, 1004, 1005, 1018, 1027, 1038, 1039, 1041, 1045, 1047, 1049], "present": [0, 2, 43, 44, 52, 78, 82, 118, 120, 127, 139, 140, 146, 149, 150, 167, 168, 176, 179, 193, 196, 198, 202, 213, 240, 243, 247, 261, 265, 269, 274, 277, 280, 281, 291, 311, 314, 316, 353, 375, 376, 380, 383, 390, 392, 401, 408, 410, 412, 415, 417, 418, 428, 429, 432, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 491, 492, 493, 494, 495, 499, 503, 504, 505, 506, 507, 508, 513, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 552, 553, 564, 565, 566, 569, 572, 573, 584, 585, 586, 591, 592, 594, 620, 630, 631, 632, 633, 653, 657, 680, 691, 692, 693, 694, 715, 732, 733, 741, 772, 786, 787, 790, 800, 801, 803, 806, 807, 815, 817, 831, 849, 850, 851, 853, 855, 857, 858, 859, 866, 871, 879, 880, 881, 882, 883, 885, 888, 899, 900, 911, 919, 921, 922, 951, 987, 1003, 1004, 1005, 1006, 1011, 1014, 1022, 1024, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1052], "preserv": [37, 43, 125, 237, 244, 266, 381, 414, 415, 417, 418, 584, 591, 592, 594, 649, 655, 699, 777, 781, 821, 822, 823, 891, 928, 933, 934, 994, 1000, 1001, 1014, 1016, 1023, 1035, 1038, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "preserves_dtyp": 928, "preservs": 1049, "preset": [669, 671, 679, 1008], "presort": [1040, 1045], "press": [373, 410, 415, 420, 421, 446, 593, 613, 614, 617, 622, 625, 646, 842, 846, 997, 1000, 1002, 1006], "pressur": [168, 375], "preston": [1040, 1041, 1042], "presum": [186, 290, 410, 418, 842], "prettenhof": [0, 400, 1035, 1036, 1037, 1038, 1039, 1040], "pretti": [187, 237, 269, 352, 365, 378, 390, 864, 865, 1008, 1044], "preuss": 1051, "prev_scor": 55, "preval": [134, 320, 392, 703, 715, 1004], "prevalence_pos_label": [278, 703], "prevent": [43, 88, 144, 146, 165, 185, 214, 217, 311, 317, 318, 341, 352, 356, 361, 378, 380, 382, 390, 391, 404, 406, 410, 415, 418, 444, 451, 490, 491, 564, 565, 593, 594, 614, 731, 788, 864, 865, 892, 893, 895, 896, 897, 898, 1004, 1006, 1009, 1010, 1014, 1020, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "previou": [43, 78, 86, 103, 120, 137, 143, 144, 146, 154, 170, 175, 176, 185, 186, 187, 198, 199, 214, 244, 246, 247, 265, 271, 274, 278, 311, 316, 324, 352, 353, 354, 361, 365, 373, 378, 380, 382, 383, 384, 386, 390, 392, 393, 396, 409, 410, 417, 418, 470, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 633, 649, 651, 655, 656, 661, 663, 665, 669, 670, 671, 672, 679, 680, 681, 683, 710, 822, 838, 841, 856, 864, 865, 904, 921, 1000, 1004, 1008, 1014, 1024, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "previous": [46, 86, 90, 103, 134, 176, 186, 265, 269, 278, 285, 324, 373, 386, 390, 396, 410, 415, 418, 442, 445, 456, 527, 537, 544, 652, 661, 662, 669, 670, 671, 679, 680, 681, 907, 1000, 1014, 1023, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "previous_loss": [669, 670, 671, 680], "previs": 241, "price": [51, 107, 143, 144, 149, 154, 250, 317, 994, 1000, 1001, 1028], "priceless": 378, "prieur": 1048, "primal": [661, 662, 680, 907, 908, 1018, 1019], "primari": [392, 415, 518, 924, 1011, 1027, 1028], "primarili": [262, 276, 378, 392, 406, 410, 961, 1028, 1044, 1045], "primat": 352, "primdal": 1043, "primit": 1050, "princ": 1048, "princip": [2, 42, 114, 115, 119, 122, 124, 125, 128, 130, 152, 183, 197, 210, 222, 233, 245, 248, 264, 277, 300, 316, 322, 357, 370, 410, 413, 422, 486, 507, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 553, 660, 691, 692, 693, 695, 696, 833, 856, 868, 887, 922, 950, 951, 1001, 1007, 1025, 1029, 1030, 1035], "principl": [134, 177, 296, 354, 378, 390, 392, 393, 414, 417, 951, 993, 1003, 1007, 1018, 1042], "print": [2, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 66, 68, 73, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 96, 100, 102, 103, 105, 106, 107, 111, 115, 116, 118, 120, 123, 126, 127, 128, 130, 134, 137, 140, 141, 142, 143, 145, 147, 149, 159, 160, 164, 165, 167, 168, 170, 171, 173, 175, 179, 185, 187, 188, 189, 191, 198, 199, 201, 204, 205, 208, 209, 213, 215, 216, 217, 220, 221, 228, 229, 231, 234, 235, 238, 242, 244, 246, 247, 250, 254, 259, 264, 265, 269, 270, 271, 272, 274, 276, 279, 280, 284, 291, 295, 302, 304, 307, 308, 309, 313, 316, 318, 320, 321, 322, 324, 326, 327, 328, 330, 331, 334, 341, 352, 353, 354, 356, 360, 361, 365, 372, 373, 376, 379, 380, 386, 392, 401, 404, 411, 414, 417, 418, 420, 466, 469, 470, 474, 480, 492, 497, 505, 515, 516, 544, 547, 552, 553, 562, 563, 564, 565, 567, 568, 572, 573, 580, 586, 587, 588, 590, 591, 592, 594, 615, 620, 621, 633, 649, 650, 652, 653, 655, 656, 657, 659, 663, 664, 665, 666, 669, 670, 679, 680, 687, 699, 716, 720, 740, 798, 800, 801, 802, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 834, 836, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 864, 865, 866, 867, 868, 869, 877, 883, 887, 895, 905, 906, 907, 908, 909, 912, 914, 920, 932, 937, 964, 987, 994, 1004, 1005, 1006, 1007, 1012, 1020, 1035, 1037, 1043, 1044, 1046, 1050], "print_changed_onli": [470, 905, 1044, 1046, 1047], "print_datafram": 269, "print_progress": 969, "print_rout": 247, "printabl": 1027, "prior": [2, 42, 46, 55, 80, 81, 90, 98, 99, 100, 118, 169, 170, 176, 182, 183, 188, 193, 195, 198, 255, 257, 261, 262, 265, 271, 282, 301, 378, 380, 392, 396, 401, 410, 413, 415, 417, 420, 467, 526, 539, 551, 552, 553, 554, 562, 614, 616, 617, 618, 622, 625, 626, 633, 647, 648, 649, 650, 654, 655, 657, 658, 659, 663, 664, 665, 675, 681, 684, 719, 800, 842, 843, 844, 845, 846, 867, 868, 882, 909, 912, 970, 993, 996, 998, 1000, 1003, 1004, 1006, 1012, 1020, 1021, 1025, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1051], "prior_k": 552, "priori": [213, 230, 280, 290, 311, 392, 410, 417, 591, 597, 1003, 1051], "priorit": [409, 1024, 1042], "prioriti": [377, 635, 835, 836, 1024, 1038], "priors_": [552, 553], "privaci": 1023, "privat": [0, 380, 382, 392, 393, 929, 1028, 1035, 1043, 1045, 1046, 1048, 1049], "privileg": [250, 386], "priyam": 1050, "priyank": 1053, "priyansh": 1053, "priyash": 1053, "prng": 113, "pro": [404, 1003], "proanthocyanin": 375, "prob_pos_clf": 61, "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [440, 441], "prob_tru": [440, 441], "proba": [62, 64, 156, 439, 915, 917], "proba_": [909, 912, 1046], "proba_map": 88, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 64, 66, 113, 119, 120, 129, 130, 169, 170, 173, 176, 177, 183, 246, 265, 352, 392, 408, 416, 417, 439, 475, 478, 535, 537, 538, 544, 562, 591, 592, 613, 625, 646, 648, 679, 706, 744, 803, 829, 874, 909, 910, 912, 913, 997, 998, 1000, 1003, 1004, 1009, 1014, 1019, 1020, 1023, 1025, 1028, 1035, 1038, 1042], "probabilisticpca": [1035, 1038], "probabilities_": [88, 448], "probabilities_or_label": 572, "probabl": [0, 2, 5, 30, 52, 60, 64, 65, 70, 88, 107, 118, 133, 147, 149, 155, 163, 169, 170, 171, 172, 183, 186, 189, 205, 225, 228, 229, 233, 237, 241, 243, 244, 265, 271, 273, 274, 277, 278, 281, 285, 288, 290, 309, 311, 315, 320, 322, 328, 333, 335, 347, 348, 365, 373, 374, 380, 384, 390, 392, 409, 410, 414, 415, 418, 419, 420, 436, 437, 438, 439, 440, 441, 448, 449, 451, 507, 515, 518, 526, 530, 552, 553, 554, 556, 558, 560, 562, 564, 567, 570, 572, 573, 596, 597, 613, 616, 617, 625, 630, 634, 635, 636, 661, 662, 674, 679, 695, 701, 703, 705, 706, 709, 710, 712, 715, 719, 723, 725, 729, 730, 732, 742, 743, 744, 759, 785, 787, 790, 791, 792, 797, 800, 801, 802, 803, 806, 807, 817, 825, 832, 833, 836, 838, 839, 842, 843, 844, 845, 846, 849, 852, 857, 863, 864, 888, 900, 901, 902, 903, 904, 907, 909, 912, 915, 917, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1030, 1035, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1049], "probable_clust": 89, "probas_pr": [785, 1053], "probb_": [909, 912, 1046], "probe": 1012, "probinette4": 1047, "probl": [610, 611], "problem": [2, 11, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 72, 87, 88, 90, 99, 120, 134, 137, 140, 146, 147, 170, 183, 188, 191, 193, 198, 199, 202, 206, 207, 213, 215, 217, 230, 231, 235, 240, 241, 248, 250, 253, 269, 271, 276, 280, 281, 285, 286, 288, 290, 291, 296, 303, 315, 323, 327, 328, 338, 341, 345, 348, 349, 352, 353, 360, 361, 365, 373, 374, 375, 376, 377, 379, 380, 383, 384, 386, 387, 390, 392, 398, 408, 409, 410, 412, 414, 416, 417, 418, 419, 420, 421, 422, 446, 449, 451, 452, 454, 459, 464, 467, 480, 506, 511, 512, 518, 519, 520, 521, 526, 527, 531, 534, 536, 540, 542, 545, 546, 547, 548, 549, 550, 551, 554, 555, 560, 564, 567, 570, 574, 576, 592, 613, 634, 646, 651, 653, 655, 657, 658, 659, 660, 661, 662, 667, 668, 669, 671, 672, 675, 676, 677, 678, 679, 680, 682, 683, 688, 689, 690, 691, 692, 694, 696, 698, 711, 719, 722, 732, 733, 738, 741, 742, 786, 787, 790, 791, 800, 801, 804, 805, 806, 807, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 827, 835, 836, 837, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 873, 874, 880, 888, 891, 897, 898, 907, 908, 915, 917, 939, 951, 994, 995, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1014, 1018, 1021, 1024, 1026, 1028, 1029, 1030, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "problemat": [43, 186, 265, 267, 411, 994, 1043], "proc": [64, 110, 408, 418, 452, 692, 696, 842, 993, 1001, 1006, 1010], "proce": [83, 165, 195, 376, 382, 413, 414, 417, 442, 880, 1000], "procedur": [25, 80, 89, 140, 146, 168, 194, 200, 261, 273, 314, 318, 341, 352, 361, 378, 390, 391, 392, 393, 408, 412, 414, 415, 417, 419, 534, 540, 541, 543, 548, 549, 550, 556, 557, 558, 559, 562, 563, 596, 598, 605, 612, 647, 675, 677, 690, 731, 788, 864, 865, 884, 896, 924, 974, 993, 1000, 1006, 1014, 1017, 1018, 1019, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "proceed": [111, 168, 373, 375, 410, 421, 441, 446, 514, 699, 711, 729, 759, 854, 904, 1004, 1016, 1017, 1018], "process": [0, 2, 19, 37, 43, 44, 57, 63, 66, 67, 70, 80, 81, 83, 99, 102, 104, 106, 110, 112, 121, 122, 124, 134, 142, 144, 146, 151, 152, 161, 185, 193, 196, 215, 217, 223, 224, 225, 226, 246, 247, 248, 250, 256, 257, 260, 262, 265, 271, 273, 274, 283, 288, 306, 311, 314, 322, 326, 331, 335, 345, 346, 350, 353, 354, 356, 365, 366, 367, 373, 377, 378, 380, 382, 384, 387, 390, 391, 392, 404, 410, 411, 412, 414, 415, 416, 417, 418, 419, 423, 450, 451, 477, 499, 507, 526, 537, 538, 539, 540, 541, 564, 565, 566, 591, 592, 594, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 628, 630, 635, 636, 642, 646, 667, 675, 688, 689, 706, 726, 744, 784, 800, 802, 803, 806, 807, 817, 825, 828, 829, 830, 839, 840, 856, 870, 874, 876, 877, 878, 887, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 969, 993, 996, 1000, 1004, 1007, 1014, 1016, 1018, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "process_rout": [2, 247, 1052], "processor": [103, 154, 186, 421, 439, 446, 448, 450, 452, 454, 459, 460, 463, 466, 469, 474, 534, 538, 539, 540, 542, 545, 546, 548, 549, 551, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 597, 605, 610, 611, 613, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 849, 850, 853, 855, 857, 858, 860, 861, 866, 869, 902, 903], "procter": 51, "prod": [353, 624], "prod_": 1006, "prod_i": 996, "proding": 1051, "produc": [52, 53, 62, 63, 79, 90, 102, 123, 146, 147, 148, 150, 198, 277, 309, 333, 361, 366, 373, 374, 378, 380, 383, 392, 393, 410, 411, 414, 415, 417, 442, 445, 448, 454, 522, 539, 562, 566, 584, 591, 596, 597, 635, 636, 805, 806, 807, 815, 820, 823, 828, 872, 882, 909, 912, 995, 996, 1000, 1002, 1003, 1004, 1007, 1010, 1011, 1015, 1017, 1018, 1019, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "product": [2, 58, 103, 120, 155, 170, 175, 187, 345, 361, 365, 380, 381, 384, 387, 407, 415, 417, 453, 541, 543, 550, 585, 592, 593, 594, 616, 617, 636, 643, 667, 668, 688, 689, 764, 766, 778, 780, 879, 882, 899, 900, 952, 993, 996, 1000, 1002, 1014, 1016, 1018, 1019, 1023, 1028, 1030, 1043], "production": 1028, "prof": 384, "profession": 186, "professor": 1028, "profil": [213, 365, 378, 381, 524, 527, 1000, 1028], "profile_default": 384, "profit": [0, 265, 328, 1052], "prog": [168, 375], "prognosi": [168, 375], "program": [0, 83, 168, 353, 361, 366, 367, 375, 376, 378, 380, 384, 390, 511, 638, 673, 897, 898, 1000, 1019, 1020, 1023, 1024, 1027, 1035, 1037], "programmat": [380, 502, 1044], "progress": [43, 46, 47, 120, 157, 168, 182, 206, 296, 324, 375, 382, 383, 393, 401, 406, 410, 562, 563, 695, 836, 838, 841, 856, 864, 865, 1028, 1035, 1037, 1044, 1049], "prohibit": [185, 250, 414, 417, 630, 1009, 1017, 1042], "proj": [53, 652], "proj_gradi": 384, "proj_oper": 53, "project": [2, 37, 45, 47, 50, 53, 55, 69, 91, 100, 119, 120, 122, 124, 126, 130, 174, 176, 178, 179, 183, 187, 210, 233, 234, 235, 237, 239, 241, 245, 248, 257, 295, 300, 304, 309, 338, 353, 365, 370, 372, 376, 377, 378, 383, 384, 387, 392, 393, 396, 407, 413, 415, 416, 422, 442, 448, 453, 454, 464, 476, 484, 485, 486, 487, 491, 505, 507, 534, 536, 537, 538, 540, 542, 544, 545, 546, 547, 551, 552, 576, 585, 592, 644, 645, 652, 675, 677, 691, 694, 698, 699, 837, 856, 884, 899, 900, 901, 950, 951, 998, 1000, 1001, 1002, 1005, 1007, 1008, 1010, 1017, 1020, 1025, 1028, 1030, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "projected_data": 244, "projected_dist": 244, "projectedgradientnmf": 1040, "prokopi": [1040, 1043], "prolifer": 380, "prolin": [57, 316, 375], "promin": [123, 392], "promis": [392, 1024], "promot": [186, 444, 711, 1023, 1046, 1048, 1052], "prompt": [376, 378, 382, 396, 403, 418], "prone": [64, 213, 258, 315, 390, 408], "pronounc": [74, 75, 85, 175], "proof": [390, 417, 901, 1016], "prop": [105, 112, 219, 258, 297, 340, 360], "propag": [2, 58, 68, 71, 72, 82, 88, 96, 166, 183, 329, 373, 442, 456, 505, 515, 517, 700, 707, 708, 716, 717, 720, 721, 740, 796, 798, 867, 881, 902, 903, 904, 969, 970, 1008, 1025, 1026, 1029, 1030, 1035, 1047, 1050], "proper": [64, 88, 202, 231, 265, 367, 380, 384, 408, 417, 451, 544, 556, 679, 951, 978, 999, 1000, 1001, 1004, 1019, 1035, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "properli": [43, 52, 62, 88, 151, 175, 266, 284, 320, 367, 376, 378, 382, 386, 416, 907, 908, 909, 910, 911, 912, 913, 993, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "properti": [51, 62, 177, 178, 215, 230, 257, 293, 316, 360, 365, 371, 378, 380, 396, 407, 408, 410, 412, 415, 417, 419, 420, 425, 444, 447, 453, 454, 455, 466, 467, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 594, 596, 597, 600, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 635, 649, 655, 658, 663, 665, 677, 678, 702, 707, 708, 711, 802, 803, 806, 807, 817, 825, 835, 836, 866, 867, 880, 881, 882, 888, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 996, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1014, 1017, 1019, 1020, 1021, 1024, 1040, 1044, 1045, 1048, 1049, 1052, 1053], "property_magnitud": 265, "propon": 102, "proport": [54, 63, 75, 149, 167, 199, 213, 220, 226, 240, 250, 265, 274, 278, 294, 298, 301, 348, 350, 360, 365, 373, 408, 410, 412, 414, 415, 417, 418, 440, 441, 448, 471, 476, 518, 552, 553, 558, 560, 562, 563, 564, 565, 566, 567, 586, 587, 591, 594, 630, 635, 661, 662, 669, 670, 671, 677, 678, 679, 681, 699, 704, 715, 725, 804, 805, 806, 807, 820, 823, 833, 853, 864, 865, 881, 907, 908, 909, 912, 913, 915, 917, 919, 921, 939, 993, 1003, 1004, 1007, 1010, 1018, 1019, 1020, 1040, 1052], "propos": [90, 109, 110, 291, 373, 378, 380, 390, 392, 410, 412, 417, 422, 452, 538, 610, 611, 679, 680, 681, 864, 865, 1000, 1003, 1007, 1018, 1042], "proprietari": 1020, "propto": [416, 1006], "prorokovi\u0107": 1053, "protect": [379, 382, 969], "protein": 372, "protocol": [404, 1004, 1023, 1038, 1051, 1052], "protocol_typ": 250, "prototyp": 1028, "prove": [121, 1028], "proven": [271, 998, 1002, 1028], "provenc": 317, "provid": [0, 2, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 88, 93, 112, 120, 141, 149, 152, 154, 170, 176, 186, 187, 193, 199, 200, 202, 214, 217, 234, 238, 241, 242, 247, 261, 265, 271, 272, 273, 277, 301, 304, 308, 311, 315, 320, 321, 323, 325, 339, 345, 348, 352, 353, 356, 360, 361, 365, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 387, 390, 391, 392, 395, 396, 401, 404, 406, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 424, 431, 439, 442, 444, 445, 446, 448, 449, 451, 452, 454, 461, 462, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 494, 496, 497, 499, 501, 504, 535, 536, 537, 538, 541, 543, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 596, 597, 604, 608, 613, 614, 630, 635, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 693, 697, 702, 714, 725, 738, 744, 745, 767, 777, 781, 791, 795, 797, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 864, 865, 867, 870, 872, 873, 874, 877, 878, 879, 882, 884, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 923, 925, 939, 945, 956, 960, 962, 979, 980, 981, 992, 993, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "provinc": 317, "provost": [791, 1004], "proxi": [185, 186, 415, 419, 863, 1040], "prun": 384, "prune": [183, 355, 360, 419, 503, 560, 561, 562, 563, 567, 568, 596, 647, 833, 915, 916, 917, 918, 1007, 1025, 1026, 1030, 1035, 1038, 1045, 1046], "przybocki": 1004, "ps_lsvm_score": 191, "ps_lsvm_time": 191, "pseudo": [214, 309, 380, 414, 422, 442, 454, 456, 464, 471, 472, 473, 475, 476, 477, 478, 536, 564, 565, 566, 630, 637, 642, 644, 645, 649, 650, 655, 656, 663, 664, 665, 666, 680, 694, 698, 806, 807, 815, 817, 856, 863, 899, 900, 904, 907, 908, 909, 912, 950, 951, 1000, 1016, 1040, 1049], "pseudo_likelihood": 863, "pseudocount": [539, 1043], "psf": 378, "psi": 415, "psi_1": 415, "psi_2": 415, "psi_n": 415, "pspachtholz": [1045, 1046, 1047], "psycholog": [410, 708, 719], "psychometrica": 638, "psychometrika": [693, 697, 1001], "pt": [50, 373, 419, 883, 1014], "pt_i": 301, "pt_j": 301, "ptocca": 1045, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [238, 902], "public": [0, 110, 372, 378, 380, 382, 383, 390, 391, 392, 393, 414, 417, 470, 667, 674, 688, 689, 695, 905, 1000, 1008, 1035, 1040, 1041, 1046, 1047, 1048, 1051], "publicli": [378, 1045], "publish": [372, 373, 380, 382, 386, 392, 1016, 1024, 1047], "pubu": [227, 244, 297, 340], "pubu_r": 111, "puerta": 1050, "puggioni": 1039, "puhuk": [1049, 1050], "pujalt": 1049, "pulapakura": [1052, 1053], "pulchritud": 352, "pulido": 1048, "pulkit": [1043, 1044, 1046], "pull": [102, 323, 366, 376, 381, 392, 393, 1027, 1045], "puls": 375, "punctuat": [418, 591, 592, 594], "puneet": 1042, "puneeth": [1052, 1053], "puor": 123, "puor_r": 174, "pure": [111, 112, 116, 198, 213, 392, 410, 475, 481, 499, 560, 561, 562, 563, 567, 568, 569, 708, 718, 789, 798, 915, 916, 917, 918, 1014], "pure_emp_cov": 112, "pure_loc": 112, "pure_x": 112, "purepremium": 231, "puriti": [136, 919, 921], "purna": 1049, "purpl": [109, 118, 237], "purport": 1042, "purpos": [48, 51, 72, 116, 144, 149, 181, 227, 228, 229, 233, 235, 248, 259, 261, 265, 267, 268, 341, 342, 348, 352, 353, 361, 373, 378, 391, 392, 393, 396, 403, 407, 410, 411, 415, 417, 418, 419, 420, 829, 830, 867, 924, 1001, 1004, 1005, 1007, 1010, 1023, 1047, 1049, 1053], "pursu": 186, "pursuit": [2, 87, 121, 123, 129, 183, 192, 415, 476, 529, 534, 540, 545, 551, 667, 668, 688, 689, 1025, 1026, 1030, 1035], "push": [64, 378, 382, 408, 1027], "pushd": 386, "put": [75, 91, 161, 170, 172, 241, 245, 252, 256, 285, 306, 313, 324, 335, 346, 350, 367, 380, 382, 383, 386, 404, 420, 445, 449, 461, 518, 617, 650, 664, 800, 884, 888, 896, 909, 910, 911, 912, 913, 941, 994, 1001, 1003, 1004, 1005, 1011, 1014], "putnam": 1041, "putschblo": 1048, "pvalu": [2, 595, 598, 599, 601, 602, 603, 832], "pvalue_iri": 277, "pvalue_rand": 277, "pvalues_": [164, 595, 598, 599, 601, 602, 603, 1035], "pvnguyen": 1039, "pwalchessen": 1047, "pwd": 386, "px": [140, 272], "pxd": 378, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 366, 378, 379, 382, 384, 386, 392, 396, 418, 533, 647, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 882, 886, 946, 1004, 1023, 1025, 1035, 1037, 1041, 1045, 1049], "py3": 396, "py39": 396, "pyamg": [80, 396, 403, 410, 454, 464, 694, 698], "pyarrow": [396, 403], "pybrain": 1035, "pycon": [404, 1022], "pyd": 379, "pydata": [43, 378, 386, 396, 403, 404, 1022, 1028], "pydata_2013": 1028, "pydebug": 384, "pyflak": 380, "pyfunc": [702, 1007], "pyfuncdist": 702, "pymc": 1023, "pynndesc": 291, "pynndescenttransform": 291, "pyodid": 378, "pyoxid": 1048, "pypi": [366, 376, 380, 382, 384, 396, 1020, 1043, 1047, 1049, 1050, 1052], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 327, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 374, 378, 385, 440, 505, 634, 635, 700, 701, 703, 704, 705, 809, 826, 1032, 1049], "pyplpt": 372, "pypy3": 1043, "pysniak": 1038, "pystruct": 390, "pytabl": 372, "pytb": 386, "pytest": [2, 320, 366, 376, 378, 380, 381, 396, 403, 406, 926, 945, 946, 1045, 1048], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 365, 367, 372, 376, 378, 379, 380, 381, 382, 383, 386, 387, 390, 392, 396, 397, 403, 404, 406, 411, 418, 499, 511, 512, 584, 702, 814, 881, 1004, 1014, 1019, 1020, 1024, 1027, 1028, 1030, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "python2": 1043, "python3": [376, 396], "python37": 396, "pythonsoftwarefound": 396, "pythonx": 376, "pytorch": [45, 328, 390, 1023, 1024, 1051, 1052], "pytorch_enable_mps_fallback": 406, "pyx": [378, 379, 384, 386], "p\u00e9rez": 1043, "p\u00f6lsterl": [1042, 1045, 1048], "q": [51, 103, 115, 146, 213, 323, 407, 410, 415, 950, 1000, 1019], "q1": 512, "q327": 375, "q_": 1019, "q_m": 1020, "q_max": [885, 897], "q_min": [885, 897], "qaiser": 1052, "qda": [67, 375, 552, 553, 1026, 1030, 1040], "qdeffens": [1045, 1048], "qemu": 386, "qi": [512, 1047], "qian": [1041, 1046], "qiang": 1039, "qianm": 1047, "qid": [489, 511, 512, 1036, 1041], "qimu": 1041, "qin": [0, 375, 399, 418, 1042, 1043, 1044, 1045, 1046], "qingi": 1043, "qizhi": 1046, "qmarcou": 1052, "qn": 512, "qodari": 1053, "qp": 1019, "qr": [80, 215, 406, 537, 544, 547, 950, 951, 1001, 1041, 1052], "qt": [315, 884], "qtconsol": 384, "quad": [420, 1007, 1018], "quadcontourset": 634, "quadmesh": 634, "quadrant": 311, "quadrat": [2, 12, 43, 48, 65, 69, 111, 112, 113, 175, 183, 227, 250, 261, 273, 323, 442, 460, 463, 552, 553, 626, 634, 651, 661, 662, 672, 679, 683, 719, 912, 913, 1000, 1001, 1004, 1007, 1010, 1014, 1018, 1019, 1025, 1026, 1030, 1036], "quadraticdiscriminantanalysi": [2, 67, 70, 552, 998, 1005, 1007, 1035, 1040, 1042, 1050], "quadro": 1048, "quadv": 1049, "qualifi": 383, "qualit": [44, 45, 86, 88, 94, 140, 146, 213, 325, 373, 410, 441, 704, 1050], "qualiti": [0, 13, 27, 45, 58, 61, 72, 80, 82, 91, 123, 142, 149, 186, 219, 264, 269, 278, 279, 280, 345, 378, 386, 390, 392, 405, 410, 412, 415, 454, 464, 471, 476, 560, 561, 562, 563, 567, 568, 746, 817, 899, 900, 915, 916, 917, 918, 951, 999, 1001, 1009, 1016, 1020, 1023, 1024, 1028, 1030], "quang": 1046, "quansight": 0, "quantifi": [13, 27, 43, 72, 82, 109, 175, 231, 265, 278, 328, 380, 392, 405, 576, 870, 999, 1012, 1014, 1030], "quantil": [2, 79, 86, 96, 134, 136, 183, 192, 311, 314, 315, 374, 390, 417, 440, 441, 460, 522, 555, 556, 563, 565, 660, 673, 726, 748, 751, 753, 830, 872, 884, 885, 886, 896, 897, 1004, 1014, 1025, 1026, 1030, 1035, 1039, 1042, 1044, 1048, 1049, 1051, 1053], "quantile_list": 52, "quantile_rang": [311, 885, 897, 1041], "quantile_regress": 215, "quantile_transform": [2, 107, 884, 895, 1014, 1042, 1043, 1044, 1053], "quantileregressor": [2, 323, 1000, 1004, 1048, 1049, 1050], "quantiles_": [884, 1014, 1045], "quantiletransform": [2, 107, 187, 315, 411, 467, 883, 896, 994, 1014, 1042, 1043, 1044, 1045, 1046, 1051, 1053], "quantiletransformerquantiletransform": 187, "quantit": [43, 44, 45, 52, 62, 94, 146, 149, 157, 168, 267, 286, 375], "quantiti": [51, 143, 271, 322, 365, 392, 410, 417, 724, 725, 726, 727, 788, 863, 993, 995, 998, 1000, 1040], "quantiz": [71, 123, 183, 373, 445, 449, 451, 872, 1014, 1025], "quantum": 1002, "quartil": 885, "quartimax": [535, 1047], "quasi": [380, 864, 865, 1000], "quazi": [1042, 1043], "queensland": 375, "quentin": [1042, 1043, 1044, 1051, 1052], "queqichao": 1039, "queri": [193, 294, 304, 365, 416, 421, 446, 448, 452, 459, 555, 613, 614, 631, 647, 648, 729, 759, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1004, 1007, 1020, 1023, 1027, 1037, 1039, 1040, 1043], "query_id": [489, 511, 512], "query_radiu": [847, 848], "question": [0, 159, 185, 265, 271, 348, 377, 378, 383, 386, 404, 414, 417, 836, 909, 912, 1000, 1003, 1004, 1010, 1028], "queue": [47, 1007, 1038], "quick": [43, 125, 253, 378, 380, 384, 396, 609, 833, 1004, 1005, 1014, 1028, 1032], "quicker": 1003, "quickest": 376, "quickli": [74, 251, 307, 320, 375, 378, 379, 414, 417, 695, 781, 1000, 1007, 1008, 1028, 1046], "quinlan": 1020, "quinonez": 1043, "quintana": 1004, "quit": [43, 52, 64, 86, 90, 116, 137, 159, 168, 186, 187, 211, 231, 265, 279, 288, 323, 352, 365, 383, 391, 410, 418, 999, 1001, 1006, 1028, 1043], "quiver": 122, "quot": [37, 51, 52, 54, 102, 272, 352, 353, 366, 372, 373, 376, 378, 382, 396, 397, 406, 490, 491, 499, 1004, 1016, 1019, 1050], "quota": [1048, 1049], "quotat": 373, "quotient": 1004, "r": [0, 2, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 98, 107, 109, 110, 111, 112, 116, 120, 127, 130, 134, 137, 138, 142, 146, 147, 148, 157, 164, 171, 172, 173, 177, 178, 179, 181, 182, 186, 196, 198, 201, 202, 213, 220, 223, 231, 238, 243, 246, 256, 259, 262, 270, 271, 274, 276, 277, 278, 281, 284, 290, 293, 294, 298, 302, 304, 317, 324, 343, 345, 354, 361, 373, 375, 379, 382, 390, 392, 404, 407, 408, 410, 412, 413, 414, 415, 417, 418, 427, 433, 439, 448, 453, 455, 467, 471, 476, 480, 484, 485, 486, 501, 507, 516, 523, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 591, 592, 593, 594, 597, 609, 612, 613, 614, 630, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 688, 689, 695, 699, 719, 724, 725, 726, 727, 731, 733, 784, 788, 791, 802, 803, 817, 820, 825, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 864, 865, 878, 883, 895, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 920, 969, 994, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1035, 1039, 1042, 1045, 1046, 1047, 1048, 1050, 1052], "r0": [806, 807], "r1": 573, "r11": [213, 231], "r2": [107, 135, 140, 154, 185, 187, 208, 246, 284, 411, 417, 557, 573, 676, 830, 865, 925, 1004, 1012, 1044], "r2007": 417, "r22": 213, "r25": 231, "r26": 213, "r2_score": [2, 107, 185, 198, 208, 209, 406, 417, 433, 467, 484, 485, 486, 557, 559, 561, 563, 565, 568, 571, 573, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 727, 731, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 993, 1004, 1036, 1038, 1044, 1048, 1049, 1053], "r2_score_ard": 198, "r2_score_enet": 198, "r2_score_lasso": 198, "r2_score_nnl": 208, "r2_score_ol": 208, "r2_with_abl": 185, "r2_without_": 185, "r3": 573, "r72": 213, "r73": 231, "r82": 213, "r93": 213, "r_": [50, 129, 226, 227, 257, 278, 297, 298, 340, 346, 350, 410, 710, 1004, 1020], "r_0": 993, "r_k": 278, "r_multi": 1012, "r_n": [278, 710, 1004], "r_regress": [2, 419, 609, 1048, 1049, 1052], "r_squar": 391, "raamana": [1043, 1044], "rabbit": [324, 326, 1014], "raccoon": [86, 123, 415], "raccoon_fac": [86, 123], "race": [186, 327, 373, 499, 1038], "race_hispan": 186, "race_oth": 186, "race_whit": 186, "rachel": [1047, 1050], "rachelcjordan": 1046, "rachez": [1040, 1041], "rachit": [1041, 1047, 1050], "rachum": 1047, "radar": 1028, "radford": 1000, "radhakrishnan": 1043, "radial": [2, 44, 125, 170, 175, 177, 341, 345, 370, 454, 625, 694, 1002, 1019, 1030], "radian": [304, 702, 767], "radii": [847, 848], "radiu": [2, 168, 298, 341, 375, 410, 444, 452, 691, 767, 784, 847, 848, 849, 850, 851, 855, 857, 858, 859, 861, 1007, 1037, 1039, 1049, 1052], "radius1": 99, "radius2": 99, "radius3": 99, "radius4": 99, "radius_neighbor": [324, 855, 857, 858, 859, 1039, 1044, 1045, 1047, 1048, 1049, 1050], "radius_neighbors_graph": [2, 410, 421, 446, 849, 850, 851, 853, 855, 857, 858, 859, 860, 1007, 1039, 1044, 1047], "radiusneighborsclassifi": [2, 324, 849, 850, 855, 858, 1005, 1007, 1035, 1037, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "radiusneighborsregressor": [2, 324, 849, 850, 855, 857, 1005, 1007, 1035, 1037, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "radiusneighborstransform": [2, 320, 851, 1007, 1045, 1047, 1049, 1050], "radostin": [1043, 1044], "raduspaimoc": 1046, "raf": 1044, "rafael": [1028, 1036, 1037, 1039, 1042], "rafal": [1050, 1051], "rafei": 1047, "raff": 1038, "raffaello": 1044, "rafiqu": [1043, 1044], "raghav": [0, 400, 1039, 1040, 1041, 1042, 1043, 1047], "raghavan": [415, 593, 842, 846, 1002, 1004, 1006], "raghu": [410, 444], "raghunathan": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "raghuv": [1050, 1051], "raghuwanshi": 1049, "rah": 644, "rahiel": 1039, "rahil": [1049, 1050, 1051, 1052, 1053], "rahimi": [644, 996], "rahmaan": 1045, "rahman": [1042, 1043, 1047], "rahn": [1042, 1045], "rahul": [1047, 1052], "rai": [0, 400, 1004, 1035, 1045, 1047, 1048], "raimundo": 1043, "rain": [43, 52, 187, 409, 1000], "rainbow": [61, 235], "rainfal": 1000, "rais": [2, 132, 214, 247, 248, 265, 274, 315, 323, 378, 380, 382, 383, 384, 387, 390, 392, 401, 404, 411, 414, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 512, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 579, 580, 584, 585, 591, 592, 593, 594, 606, 613, 614, 620, 632, 635, 638, 639, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 699, 701, 705, 712, 714, 715, 716, 717, 719, 730, 732, 733, 741, 781, 785, 786, 787, 790, 791, 792, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 825, 826, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 856, 857, 858, 862, 864, 865, 866, 867, 870, 871, 872, 873, 874, 879, 880, 881, 885, 886, 887, 894, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 926, 931, 933, 934, 936, 937, 955, 960, 964, 987, 988, 989, 990, 992, 993, 1004, 1014, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "raisadz": 1053, "raise_exc": 714, "raise_except": 989, "raise_warn": [274, 715, 989], "raj": [1052, 1053], "rajagopalan": [0, 400, 1043, 1047], "rajaona": [1041, 1042], "rajat": [1038, 1045], "rajdeep": 1044, "rajendra": 1043, "raji": [1050, 1051], "rakotoarison": [1042, 1043, 1045], "ralf": [1038, 1041, 1042, 1050, 1051, 1053], "ralph": 1053, "ram": [55, 86, 367, 404, 417, 899, 900, 1006, 1019, 1041, 1047, 1050, 1051], "ramakrishnan": [410, 444], "ramana": [1041, 1042], "ramanath": 1040, "ramesh": [373, 1028, 1038, 1041, 1045], "rameshwar": [1042, 1043], "ramil": [1043, 1044], "rammig": [1028, 1041], "ramo": 1050, "rampin": 1042, "ramyanp": [1047, 1048], "ramzi": 1047, "ram\u00edrez": 1004, "rand": [2, 53, 61, 72, 73, 74, 75, 79, 82, 91, 95, 127, 137, 151, 153, 163, 193, 198, 235, 236, 240, 246, 247, 286, 303, 321, 322, 327, 334, 335, 347, 353, 358, 359, 387, 401, 547, 707, 708, 718, 760, 784, 789, 899, 900, 902, 903, 904, 1016, 1035, 1046, 1047], "rand_index": 708, "rand_scor": [2, 72, 410, 718, 1004, 1047], "randal": [887, 1039, 1049], "randi": 1041, "randint": [50, 72, 112, 118, 145, 182, 188, 236, 243, 247, 249, 283, 322, 327, 380, 383, 391, 401, 807, 824, 842, 843, 844, 846, 993, 994], "randn": [53, 69, 70, 74, 87, 98, 99, 111, 112, 123, 127, 150, 163, 170, 174, 185, 188, 202, 207, 208, 212, 226, 227, 230, 257, 260, 261, 266, 278, 280, 281, 286, 297, 298, 318, 321, 322, 327, 340, 345, 346, 350, 380, 383, 646, 673, 675, 681, 690, 824, 910, 913], "randolf": 1053, "random": [2, 14, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 83, 85, 87, 90, 91, 93, 94, 95, 97, 98, 99, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 127, 133, 135, 137, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 161, 163, 164, 167, 170, 171, 174, 176, 177, 179, 181, 182, 183, 184, 185, 193, 194, 195, 196, 198, 202, 203, 207, 208, 211, 212, 213, 214, 215, 216, 219, 220, 222, 226, 227, 230, 231, 233, 234, 236, 237, 238, 239, 240, 245, 246, 247, 249, 250, 256, 257, 259, 260, 261, 262, 263, 266, 268, 269, 270, 271, 272, 274, 276, 278, 280, 281, 282, 283, 286, 290, 291, 296, 297, 298, 303, 306, 312, 314, 315, 318, 321, 322, 324, 326, 328, 330, 331, 334, 335, 340, 341, 343, 344, 345, 346, 347, 350, 352, 353, 358, 359, 365, 366, 370, 374, 381, 383, 390, 391, 392, 401, 405, 406, 408, 410, 418, 419, 423, 435, 442, 445, 449, 451, 453, 454, 455, 456, 460, 461, 462, 464, 466, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 490, 491, 492, 493, 495, 498, 499, 500, 505, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 539, 541, 542, 543, 544, 547, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 585, 586, 587, 592, 610, 611, 613, 614, 630, 633, 635, 637, 642, 643, 644, 645, 646, 649, 650, 652, 653, 655, 656, 657, 661, 663, 664, 665, 666, 673, 674, 675, 679, 680, 681, 682, 690, 692, 693, 694, 695, 696, 697, 698, 704, 707, 708, 711, 734, 746, 784, 791, 796, 800, 801, 803, 805, 806, 807, 808, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 832, 833, 838, 840, 841, 842, 843, 844, 846, 847, 848, 852, 856, 863, 864, 865, 867, 870, 872, 881, 884, 888, 896, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 936, 948, 950, 951, 972, 974, 977, 994, 996, 999, 1001, 1003, 1004, 1008, 1009, 1010, 1012, 1014, 1019, 1020, 1024, 1025, 1026, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "random_": 202, "random_02": 202, "random_05": 202, "random_08": 202, "random_11": 202, "random_cat": [188, 1012], "random_choice_csc": 1045, "random_forest": 139, "random_from_data": [259, 800, 801, 1003], "random_label": 72, "random_num": [188, 1012], "random_offset_": [644, 645], "random_project": [2, 234, 244, 899, 900, 901, 1016, 1021, 1036, 1041, 1051, 1052], "random_sampl": [198, 847, 848, 852], "random_se": [49, 118, 142], "random_search": [272, 279], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 107, 113, 116, 118, 120, 122, 125, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 159, 164, 165, 167, 170, 176, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 195, 196, 199, 205, 212, 213, 216, 217, 219, 220, 221, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 245, 248, 249, 250, 251, 253, 254, 256, 258, 259, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 288, 290, 291, 294, 295, 299, 300, 301, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 339, 341, 342, 343, 348, 349, 352, 353, 356, 360, 361, 374, 380, 383, 387, 391, 392, 406, 409, 410, 411, 414, 415, 417, 418, 422, 435, 439, 440, 442, 445, 449, 451, 453, 454, 455, 456, 460, 461, 462, 464, 471, 476, 480, 489, 490, 493, 495, 498, 500, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 596, 597, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 635, 636, 637, 638, 641, 642, 643, 644, 645, 649, 650, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 713, 738, 791, 795, 796, 800, 801, 802, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 852, 856, 863, 864, 865, 867, 872, 884, 888, 896, 899, 900, 907, 908, 909, 912, 914, 915, 916, 917, 918, 920, 921, 923, 925, 926, 948, 950, 951, 972, 974, 977, 993, 994, 996, 999, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1019, 1020, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "random_state_": [380, 539, 630, 856, 1049], "random_tre": 569, "random_tree_embed": 139, "random_unlabeled_point": [322, 902, 903, 904], "random_weights_": [644, 645], "randomforest": [49, 142, 365, 417, 915, 916, 1040], "randomforestclassifi": [2, 63, 64, 67, 89, 138, 139, 140, 141, 142, 156, 188, 189, 252, 253, 268, 283, 320, 322, 327, 352, 361, 391, 392, 408, 417, 419, 560, 561, 562, 564, 569, 570, 572, 806, 807, 825, 837, 917, 993, 994, 1005, 1012, 1028, 1032, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "randomforestclassifierifittedrandomforestclassifi": [63, 141, 327], "randomforestclassifierinot": 327, "randomforestclassifierrandomforestclassifi": [63, 188, 252, 283], "randomforestregressor": [2, 49, 140, 153, 154, 157, 181, 182, 322, 327, 391, 417, 560, 561, 563, 565, 569, 571, 573, 635, 636, 917, 994, 1005, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "randomforestregressorrandomforestregressor": [154, 157], "randomgeek78": 1049, "randomized_range_find": [2, 387, 1036, 1041], "randomized_svd": [2, 55, 387, 453, 455, 535, 544, 547, 549, 1035, 1036, 1041, 1048, 1049, 1050], "randomized_svd_low_rank": 1042, "randomizedlasso": 1042, "randomizedlogisticregress": 1042, "randomizedpca": [1028, 1035, 1037, 1038, 1040, 1041, 1042], "randomizedsearchcv": [2, 45, 103, 170, 272, 279, 322, 361, 391, 401, 406, 578, 993, 1004, 1018, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1053], "randomizedsearchcvinot": 103, "randomli": [2, 52, 72, 83, 94, 103, 117, 137, 149, 150, 181, 183, 187, 230, 244, 248, 261, 266, 277, 288, 290, 330, 333, 361, 366, 387, 390, 391, 410, 414, 417, 420, 451, 460, 518, 526, 534, 540, 548, 549, 554, 562, 563, 564, 565, 566, 567, 568, 613, 614, 674, 682, 693, 697, 719, 800, 801, 863, 901, 915, 916, 917, 918, 1003, 1005, 1007, 1010, 1012, 1016, 1020, 1025, 1046, 1050, 1052], "randomst": [2, 44, 53, 58, 59, 61, 67, 70, 72, 79, 83, 94, 95, 112, 113, 116, 120, 122, 127, 135, 145, 146, 149, 150, 151, 153, 164, 170, 171, 174, 176, 177, 179, 181, 182, 185, 188, 193, 194, 195, 196, 198, 202, 207, 214, 215, 220, 227, 236, 240, 246, 247, 256, 259, 266, 274, 277, 278, 280, 281, 282, 283, 303, 306, 312, 314, 315, 318, 321, 322, 324, 326, 327, 330, 331, 335, 344, 358, 359, 380, 383, 387, 392, 401, 415, 422, 423, 442, 445, 449, 451, 453, 454, 455, 456, 460, 461, 462, 464, 471, 472, 476, 477, 478, 480, 481, 482, 483, 490, 493, 495, 498, 500, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 586, 587, 610, 611, 613, 614, 630, 635, 637, 642, 643, 644, 645, 646, 649, 650, 652, 653, 655, 656, 657, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 675, 677, 679, 680, 681, 682, 690, 692, 693, 694, 695, 696, 697, 698, 704, 784, 796, 800, 801, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 831, 832, 833, 837, 838, 841, 842, 843, 844, 846, 847, 848, 852, 856, 863, 864, 865, 872, 884, 888, 896, 899, 900, 902, 903, 904, 907, 908, 909, 912, 913, 915, 916, 917, 918, 936, 950, 951, 972, 974, 977, 1014, 1030], "randomtreesembed": [2, 139, 152, 234, 417, 917, 994, 1036, 1043, 1044, 1048, 1049, 1050], "randomtreesembedding_": 569, "randomtreesembeddingrandomtreesembed": 139, "rang": [2, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 80, 81, 83, 84, 88, 93, 94, 96, 97, 109, 110, 112, 113, 134, 136, 137, 138, 141, 146, 149, 153, 163, 166, 167, 171, 186, 187, 191, 198, 202, 203, 207, 211, 213, 214, 217, 220, 221, 229, 231, 234, 236, 243, 244, 249, 250, 256, 258, 261, 262, 265, 266, 270, 271, 272, 274, 275, 276, 278, 279, 280, 282, 283, 284, 286, 290, 295, 301, 303, 304, 309, 311, 316, 317, 320, 324, 325, 331, 341, 348, 352, 353, 357, 360, 366, 372, 373, 375, 378, 380, 384, 387, 392, 404, 410, 414, 417, 420, 442, 463, 471, 473, 474, 475, 476, 477, 478, 480, 483, 493, 497, 498, 517, 530, 544, 556, 557, 562, 563, 566, 591, 592, 594, 632, 635, 641, 643, 651, 652, 672, 674, 679, 680, 681, 683, 695, 715, 734, 749, 791, 833, 839, 853, 855, 857, 858, 863, 877, 884, 885, 886, 892, 893, 896, 897, 900, 901, 950, 951, 993, 1000, 1004, 1008, 1018, 1024, 1028, 1040, 1041, 1042, 1043, 1045, 1048, 1051], "range_n_clust": 93, "range_n_outli": 112, "rangeindex": [186, 265, 499], "rangl": [996, 1004, 1018, 1019], "ranjanikrishnan": 1048, "rank": [2, 43, 55, 62, 111, 124, 127, 141, 166, 188, 189, 231, 269, 271, 279, 374, 405, 407, 408, 412, 413, 415, 417, 418, 511, 512, 524, 527, 552, 553, 596, 597, 609, 651, 660, 672, 683, 699, 723, 729, 730, 742, 743, 759, 791, 797, 806, 807, 951, 993, 995, 996, 1001, 1012, 1014, 1028, 1030, 1036, 1041, 1044, 1045, 1049, 1050, 1053], "rank_": 660, "rank_t": 803, "rank_test_": 275, "rank_test_precis": [269, 275], "rank_test_recal": 269, "rank_test_scor": [271, 279, 803, 817, 1041], "rankdata": 1042, "ranked_exposur": [213, 231], "ranked_frequ": 213, "ranked_pure_premium": 231, "ranking_": [166, 596, 597], "rankylau": 1043, "ransac": [2, 183, 192, 219, 230, 527, 652, 660, 674, 681, 682, 1025], "ransacregressor": [2, 216, 219, 230, 401, 652, 681, 682, 1000, 1005, 1038, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1053], "rao": [414, 1047, 1050], "raphael": 1052, "rapha\u00ebl": 1045, "raphson": [651, 672, 683], "rapid": 1028, "rapidli": [217, 273, 1019, 1028], "rare": [64, 187, 317, 361, 382, 390, 392, 395, 408, 410, 414, 592, 651, 661, 662, 672, 683, 907, 938, 1000, 1014, 1028, 1042, 1043, 1044, 1048, 1050, 1053], "rarer": [352, 354, 418], "raschka": [1040, 1041, 1042, 1043, 1044, 1047], "rashchedrin": 1042, "rasmu": [191, 1042], "rasmussen": [175, 420, 613, 614, 617, 622, 625], "raspberri": 396, "raster": 102, "rastgoo": 1052, "rastogi": 1043, "rastrojo": [410, 708], "rasul": [1040, 1042, 1043], "rat": [50, 304, 373, 501], "rate": [2, 43, 134, 138, 143, 149, 163, 187, 213, 220, 231, 244, 250, 265, 268, 271, 280, 281, 307, 308, 309, 367, 378, 409, 410, 411, 415, 419, 448, 468, 539, 556, 557, 562, 563, 564, 565, 595, 598, 599, 601, 602, 603, 609, 647, 648, 671, 679, 680, 681, 695, 701, 705, 730, 785, 792, 863, 864, 865, 901, 993, 1000, 1001, 1004, 1007, 1008, 1018, 1020, 1028, 1039, 1043, 1044], "rather": [51, 64, 86, 113, 134, 137, 149, 181, 186, 213, 214, 227, 250, 285, 315, 316, 352, 353, 361, 366, 374, 376, 378, 380, 383, 384, 386, 390, 391, 392, 393, 410, 414, 415, 417, 418, 420, 450, 463, 465, 466, 469, 568, 584, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 632, 649, 650, 655, 656, 663, 664, 665, 666, 784, 817, 838, 840, 841, 870, 907, 908, 919, 924, 951, 998, 1000, 1001, 1004, 1006, 1007, 1011, 1024, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1050, 1051, 1053], "ratio": [2, 46, 86, 99, 105, 128, 183, 244, 246, 259, 263, 365, 378, 410, 412, 414, 417, 452, 458, 496, 497, 518, 544, 552, 553, 554, 634, 661, 713, 715, 719, 728, 733, 739, 742, 785, 786, 787, 790, 798, 830, 833, 853, 900, 972, 998, 1010, 1020, 1025, 1050, 1052], "ration": [2, 175, 265, 626, 1002], "rationalquadrat": [2, 175, 179, 420, 619], "raton": 1000, "raul": [1037, 1038], "rausch": [1043, 1044, 1047], "rauwuckl": 1047, "ravel": [2, 44, 53, 55, 57, 63, 77, 86, 87, 91, 111, 129, 135, 137, 142, 146, 152, 153, 154, 161, 170, 172, 174, 175, 176, 177, 186, 193, 203, 204, 206, 213, 226, 227, 234, 238, 240, 244, 246, 250, 254, 258, 260, 265, 274, 278, 280, 285, 291, 296, 297, 303, 304, 306, 307, 308, 309, 313, 314, 324, 328, 335, 341, 346, 347, 349, 350, 352, 358, 359, 467, 496, 497, 498, 634, 721, 990, 1004, 1051], "ravi": [1047, 1050], "raw": [2, 17, 43, 51, 52, 54, 72, 112, 122, 154, 175, 186, 191, 309, 318, 332, 354, 365, 373, 380, 386, 392, 408, 410, 412, 415, 418, 471, 476, 504, 505, 506, 562, 563, 564, 566, 585, 591, 592, 593, 594, 637, 680, 693, 697, 708, 789, 853, 911, 1001, 1004, 1008, 1010, 1011, 1014, 1017, 1036, 1040, 1043, 1046, 1052], "raw_coef_": [907, 908], "raw_covariance_": [412, 471, 476], "raw_data": 354, "raw_docu": [591, 594], "raw_location_": [412, 471, 476], "raw_model": 318, "raw_pixel_classifi": 309, "raw_support_": [471, 476], "raw_target_regr": 411, "raw_valu": [724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 1004, 1043, 1046], "raw_x": [418, 585], "raytheon": 51, "raz": 1049, "ra\u00fal": 1044, "rb": [47, 404], "rbf": [2, 44, 45, 46, 49, 50, 66, 67, 125, 155, 161, 170, 171, 172, 174, 175, 176, 177, 178, 179, 183, 191, 227, 239, 240, 246, 269, 271, 273, 276, 297, 335, 336, 338, 347, 370, 398, 411, 415, 417, 454, 464, 505, 507, 538, 544, 613, 614, 615, 616, 619, 621, 622, 623, 624, 626, 627, 634, 642, 643, 644, 645, 646, 679, 694, 768, 777, 779, 803, 814, 817, 823, 867, 887, 902, 903, 907, 909, 910, 911, 912, 913, 993, 996, 997, 1001, 1004, 1010, 1014, 1017, 1025, 1030, 1041, 1046], "rbf_featur": [644, 996], "rbf_kernel": [2, 406, 768, 1002, 1039], "rbf_svc": [335, 1019], "rbfsampler": [2, 245, 642, 643, 645, 996, 1039, 1049, 1050], "rbm": [2, 309, 863, 864, 865, 1009], "rbm_features_classifi": 309, "rc": [227, 382], "rceil": [407, 1010], "rcond": 129, "rcparam": [47, 240, 245, 318], "rcv1": [2, 371, 500, 1030, 1040], "rcwoolston": 1046, "rd": 418, "rd9e56ef97513": 2, "rda": 375, "rdbu": [67, 70, 120, 229, 306, 341, 346], "rdbu_r": [87, 113, 130, 341], "rdownload": 47, "rdylbu": [142, 357], "re": [43, 47, 53, 63, 64, 89, 102, 103, 134, 143, 173, 185, 186, 231, 247, 257, 261, 274, 276, 280, 321, 352, 354, 366, 378, 379, 386, 391, 393, 401, 408, 414, 418, 471, 472, 473, 474, 475, 476, 477, 478, 494, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 649, 655, 663, 665, 805, 820, 823, 915, 916, 917, 918, 1000, 1005, 1007, 1014, 1019, 1024, 1028, 1035, 1039, 1040, 1042, 1044], "reach": [94, 140, 144, 168, 176, 213, 215, 229, 231, 265, 273, 324, 341, 360, 383, 393, 396, 410, 415, 419, 452, 459, 511, 512, 596, 597, 630, 647, 648, 649, 650, 655, 656, 657, 658, 659, 663, 664, 665, 666, 669, 670, 671, 679, 680, 681, 682, 684, 685, 686, 687, 732, 733, 786, 800, 801, 864, 865, 904, 993, 1004, 1008, 1018, 1020, 1028, 1046, 1050, 1051, 1052], "reachability_": [98, 410, 452, 457, 458, 459], "reachabl": [2, 88, 98, 448, 452, 457, 458, 459, 853, 957], "react": 303, "reactiv": 384, "read": [47, 52, 55, 120, 233, 278, 320, 321, 322, 324, 326, 365, 372, 379, 380, 381, 382, 383, 385, 386, 390, 391, 392, 398, 404, 410, 421, 422, 423, 424, 427, 433, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 947, 993, 1000, 1004, 1005, 1023, 1028, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1053], "read_byt": 47, "read_csv": [51, 383, 499, 1050], "read_csv_kwarg": [499, 1051], "read_parquet": 52, "readabl": [113, 272, 323, 383, 384, 386, 537, 1044, 1047, 1048, 1049, 1050], "reader": [45, 77, 323, 367, 378], "readi": [43, 46, 175, 214, 265, 373, 378, 382, 386, 466], "readili": [324, 415, 1020, 1028], "readm": [386, 418, 496], "readonli": [907, 908, 1048, 1050, 1051], "readonly_memmap": 1052, "readthedoc": 392, "real": [52, 67, 70, 88, 90, 102, 106, 109, 111, 112, 134, 149, 173, 186, 217, 237, 240, 250, 264, 265, 277, 286, 295, 298, 312, 313, 340, 345, 354, 365, 371, 372, 375, 382, 384, 387, 390, 391, 392, 407, 408, 410, 412, 414, 415, 417, 418, 471, 491, 492, 496, 497, 498, 499, 500, 503, 504, 507, 513, 554, 555, 558, 559, 560, 561, 562, 563, 567, 568, 595, 597, 598, 599, 600, 601, 602, 603, 634, 702, 707, 727, 731, 755, 758, 760, 788, 798, 832, 864, 865, 909, 910, 911, 912, 913, 916, 918, 994, 995, 996, 1001, 1004, 1006, 1008, 1009, 1010, 1020, 1022, 1025, 1030, 1035, 1048, 1052], "real_cov": [109, 110, 423, 472, 475, 476, 477, 478, 481, 482, 483], "real_data": 295, "realist": [43, 47, 273, 280, 281, 338, 373, 1004], "realiti": 374, "realiz": [213, 1028], "realli": [109, 188, 202, 382, 383, 384, 1004, 1010, 1028, 1049], "reappli": 417, "rearrang": [58, 59, 407], "reason": [43, 47, 51, 64, 77, 86, 102, 146, 149, 168, 186, 187, 191, 213, 214, 221, 231, 240, 244, 245, 247, 250, 265, 268, 271, 272, 277, 284, 288, 291, 312, 316, 345, 353, 354, 361, 365, 366, 367, 373, 377, 378, 379, 380, 382, 386, 390, 391, 392, 393, 409, 410, 411, 412, 415, 417, 418, 511, 535, 577, 641, 649, 655, 657, 675, 690, 695, 766, 803, 817, 851, 856, 863, 882, 904, 923, 925, 926, 993, 994, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1014, 1018, 1019, 1020, 1028, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "reassign": [83, 378, 449, 451, 1036, 1040], "reassignment_ratio": 451, "rebalanc": 392, "rebas": 382, "rebecca": 1042, "rebekah": [1043, 1044, 1045], "reboul": 1045, "rebuild": [365, 376, 404, 418, 444], "rebuilt": [68, 376, 847, 848], "rec": [57, 354, 373, 644], "rec_l1": 53, "rec_l2": 53, "rec_macro": 414, "recal": [2, 45, 62, 68, 102, 113, 125, 165, 183, 241, 250, 263, 265, 269, 288, 309, 330, 331, 378, 392, 409, 410, 507, 607, 703, 709, 710, 711, 715, 716, 730, 732, 733, 734, 785, 786, 787, 790, 791, 825, 833, 836, 868, 887, 891, 907, 1000, 1020, 1025, 1038, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "recalcul": [251, 253, 410, 1032, 1035], "recall_macro": [414, 1004], "recall_scor": [2, 62, 265, 278, 414, 711, 787, 1004, 1035, 1037, 1038, 1039, 1040, 1045, 1051], "recant": 393, "receiv": [0, 2, 57, 159, 183, 241, 247, 253, 263, 265, 266, 268, 273, 354, 361, 378, 380, 386, 392, 409, 414, 417, 507, 661, 705, 709, 711, 730, 785, 791, 792, 822, 833, 835, 836, 874, 912, 1005, 1008, 1009, 1018, 1025, 1045, 1046], "recent": [52, 247, 376, 383, 386, 390, 392, 410, 470, 541, 568, 1018, 1028, 1038, 1047], "recht": [644, 996], "recip": [382, 404, 1001, 1028], "reciproc": [374, 1004], "reckon": 373, "recogn": [43, 44, 65, 84, 86, 116, 123, 166, 183, 214, 264, 295, 323, 330, 331, 384, 401, 410, 418, 505, 700, 716, 833, 912, 1004, 1025, 1052], "recognit": [42, 48, 54, 120, 183, 249, 309, 316, 371, 383, 415, 497, 505, 535, 537, 544, 700, 711, 716, 744, 772, 791, 792, 800, 817, 833, 887, 912, 996, 1000, 1004, 1005, 1009, 1019, 1021, 1025, 1030, 1035], "recommend": [116, 181, 230, 241, 247, 267, 280, 315, 322, 345, 365, 366, 372, 373, 376, 378, 380, 384, 386, 390, 396, 404, 413, 414, 415, 417, 419, 440, 449, 451, 453, 462, 499, 511, 538, 541, 547, 552, 564, 565, 572, 585, 586, 592, 609, 614, 634, 635, 641, 661, 662, 673, 679, 695, 700, 701, 703, 705, 809, 815, 817, 826, 863, 870, 872, 879, 886, 887, 892, 893, 895, 896, 897, 898, 900, 909, 912, 951, 992, 993, 1001, 1004, 1006, 1008, 1011, 1014, 1016, 1018, 1019, 1020, 1022, 1028, 1030, 1037, 1038, 1044, 1045, 1046, 1047, 1049, 1051], "recompil": [379, 384, 396], "recomput": [88, 89, 251, 253, 293, 320, 471, 476, 1000, 1016, 1040, 1051], "reconstruct": [2, 42, 55, 58, 99, 120, 121, 125, 183, 212, 236, 237, 324, 404, 415, 418, 484, 485, 486, 534, 536, 538, 540, 541, 542, 543, 545, 546, 548, 549, 551, 586, 590, 655, 675, 691, 692, 696, 899, 900, 1000, 1001, 1025, 1049], "reconstruct_from_patches_2d": [2, 123, 418, 586], "reconstruction_err_": [541, 543], "reconstruction_error": 691, "reconstruction_error_": 692, "record": [2, 50, 121, 138, 149, 188, 247, 265, 317, 354, 365, 378, 404, 410, 412, 452, 459, 501, 623, 646, 695, 774, 777, 781, 782, 783, 784, 830, 853, 1048, 1049], "recov": [75, 98, 113, 121, 122, 127, 143, 170, 185, 198, 212, 213, 217, 233, 284, 354, 412, 416, 419, 422, 462, 536, 562, 1000, 1001, 1003, 1024, 1041], "recoveri": [51, 113, 198, 212, 412, 419], "recreat": 251, "rect": [47, 85, 193], "rect_colorbar": 311, "rect_histi": 311, "rect_histx": 311, "rect_scatt": 311, "rectangl": 47, "rectangular": [373, 392, 951, 1024], "rectifi": [864, 865], "recurs": [2, 18, 52, 150, 159, 162, 165, 168, 183, 266, 269, 270, 276, 285, 295, 356, 380, 410, 414, 442, 443, 444, 447, 465, 505, 518, 566, 596, 597, 600, 605, 635, 636, 661, 822, 867, 877, 1004, 1007, 1010, 1011, 1020, 1025, 1026, 1030, 1035, 1045, 1046], "recursionerror": 1053, "red": [48, 49, 50, 63, 69, 70, 93, 111, 118, 120, 121, 122, 137, 154, 157, 179, 191, 193, 194, 203, 211, 238, 251, 266, 277, 304, 307, 312, 316, 317, 332, 341, 359, 376, 392, 410, 415, 1005], "reda": 1041, "redden": 1046, "reddi": [1042, 1043, 1044, 1049, 1052], "redefin": [58, 146, 186], "redesign": [390, 1035], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 444, "redo": 353, "reduc": [2, 37, 43, 46, 77, 80, 81, 86, 103, 104, 109, 137, 146, 148, 149, 152, 165, 186, 193, 194, 198, 211, 217, 218, 221, 242, 244, 247, 250, 272, 278, 288, 300, 313, 316, 317, 325, 353, 354, 361, 370, 372, 375, 378, 384, 390, 392, 404, 408, 409, 410, 412, 414, 415, 417, 418, 419, 421, 446, 447, 452, 459, 462, 496, 537, 547, 552, 558, 559, 560, 561, 566, 567, 568, 569, 576, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 613, 630, 646, 655, 675, 676, 677, 678, 690, 695, 698, 784, 803, 806, 807, 809, 817, 826, 828, 829, 830, 831, 834, 876, 877, 884, 896, 899, 900, 907, 908, 915, 916, 917, 918, 993, 996, 998, 999, 1000, 1001, 1004, 1007, 1016, 1017, 1019, 1021, 1035, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1051, 1053], "reduce_dim": [104, 252, 270, 411], "reduce_dim__k": 104, "reduce_dim__n_compon": [104, 270, 411], "reduce_func": [784, 1046], "reduced_data": 91, "reducer_label": 104, "reduct": [2, 11, 45, 57, 87, 90, 101, 105, 116, 120, 128, 137, 152, 183, 232, 234, 235, 238, 244, 248, 292, 299, 301, 324, 338, 361, 365, 370, 410, 411, 413, 415, 417, 419, 470, 484, 485, 486, 487, 505, 533, 535, 537, 538, 541, 542, 543, 544, 547, 550, 552, 556, 557, 560, 561, 562, 563, 567, 568, 569, 602, 610, 691, 692, 693, 694, 695, 696, 784, 803, 833, 849, 856, 863, 867, 868, 877, 887, 905, 907, 915, 916, 917, 918, 996, 1001, 1016, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1036, 1037, 1038, 1041, 1049, 1050, 1051], "redund": [62, 64, 130, 167, 257, 262, 327, 361, 374, 377, 378, 383, 392, 408, 518, 637, 1024, 1047], "redundantli": 392, "ref": [378, 386, 994, 1041], "ref_lin": 440, "refactor": [324, 430, 1035, 1037, 1038, 1039, 1045, 1048, 1049, 1050], "refer": [43, 44, 72, 73, 93, 96, 103, 111, 126, 134, 147, 149, 154, 168, 175, 179, 188, 200, 231, 247, 250, 265, 271, 276, 277, 278, 285, 294, 301, 311, 320, 321, 322, 323, 324, 325, 326, 327, 328, 353, 366, 372, 373, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 390, 391, 392, 393, 396, 401, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 459, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 501, 506, 514, 516, 518, 519, 520, 521, 522, 523, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 547, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 593, 596, 597, 598, 605, 610, 611, 613, 614, 617, 622, 625, 626, 630, 631, 634, 635, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 650, 652, 654, 656, 658, 659, 661, 664, 666, 668, 669, 670, 671, 674, 676, 678, 679, 681, 682, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 707, 708, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 733, 734, 737, 738, 739, 740, 741, 743, 744, 746, 759, 761, 762, 772, 786, 788, 789, 791, 792, 795, 796, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 837, 838, 842, 843, 844, 846, 849, 852, 853, 854, 856, 863, 864, 865, 867, 872, 873, 874, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 895, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 915, 916, 917, 918, 938, 945, 946, 951, 969, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "referenc": [375, 378, 380, 386, 392, 899, 900, 1007, 1042, 1048], "references_": 884, "refin": [62, 113, 474, 712, 1004], "refit": [141, 159, 165, 167, 183, 263, 270, 272, 275, 278, 279, 283, 392, 409, 414, 420, 505, 570, 571, 630, 662, 668, 716, 803, 806, 807, 817, 825, 833, 912, 993, 1000, 1004, 1025, 1042, 1043, 1044, 1053], "refit_strategi": 269, "refit_time_": [803, 806, 807, 817, 1043], "reflect": [51, 75, 80, 81, 111, 118, 121, 143, 187, 188, 213, 231, 280, 295, 353, 374, 377, 378, 382, 392, 395, 407, 452, 458, 1001, 1004, 1010, 1012, 1036, 1044, 1053], "reformul": 377, "refrain": [214, 378], "refurbish": 7, "refus": [265, 390, 897, 898], "reg": [147, 186, 194, 247, 312, 321, 346, 417, 561, 563, 571, 653, 654, 656, 657, 658, 659, 660, 666, 667, 668, 673, 674, 681, 682, 692, 696, 918, 1000, 1040], "reg1": [157, 417], "reg2": [157, 417], "reg3": [157, 417], "reg_covar": [256, 800, 801], "reg_nnl": 208, "reg_ol": 208, "reg_param": 553, "regard": [0, 11, 44, 46, 50, 52, 86, 88, 103, 125, 126, 160, 170, 175, 187, 188, 202, 210, 215, 235, 246, 250, 273, 280, 281, 294, 353, 373, 378, 379, 383, 390, 392, 398, 404, 410, 415, 417, 418, 420, 445, 449, 454, 461, 464, 504, 617, 622, 659, 661, 704, 746, 801, 809, 825, 826, 831, 849, 850, 997, 1000, 1004, 1006, 1007, 1009, 1011, 1018, 1019, 1020, 1042, 1045], "regardless": [231, 272, 273, 274, 366, 378, 410, 538, 635, 636, 661, 707, 718, 1004, 1016, 1043, 1050, 1051], "regedit": 396, "regener": 872, "regex": [271, 354, 466, 468], "regexp": [591, 592, 594], "regim": [43, 392, 907, 908, 1003], "region": [51, 55, 59, 62, 71, 81, 82, 86, 89, 99, 123, 155, 177, 183, 186, 213, 231, 240, 244, 245, 262, 303, 314, 341, 348, 375, 385, 392, 410, 417, 420, 450, 452, 458, 464, 590, 1001, 1004, 1007, 1010, 1014, 1018, 1020, 1025], "region_1": 317, "region_2": 317, "regist": [2, 198, 352, 384, 973], "register_parallel_backend": [2, 1043, 1053], "registri": [376, 396, 1023], "regr": [209, 411, 557, 559, 568, 649, 650, 670, 840, 865, 908, 910, 913, 1019], "regr_1": [135, 358, 359], "regr_2": [135, 358, 359], "regr_3": 359, "regr_multirf": 153, "regr_rf": 153, "regress": [2, 14, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 87, 101, 103, 111, 112, 114, 121, 122, 123, 126, 128, 130, 133, 134, 137, 139, 140, 141, 144, 145, 148, 149, 153, 154, 160, 166, 168, 169, 171, 179, 181, 182, 183, 185, 186, 187, 188, 189, 192, 195, 196, 198, 199, 201, 203, 207, 208, 210, 214, 216, 217, 218, 219, 222, 224, 229, 236, 239, 241, 249, 250, 251, 254, 265, 267, 279, 282, 284, 285, 286, 290, 292, 294, 308, 309, 311, 312, 316, 322, 323, 324, 325, 327, 336, 337, 338, 348, 349, 352, 355, 356, 360, 366, 367, 370, 371, 373, 375, 378, 380, 383, 386, 387, 390, 391, 392, 405, 408, 412, 413, 414, 415, 417, 419, 433, 439, 466, 467, 476, 486, 491, 492, 495, 499, 504, 505, 507, 508, 515, 519, 520, 521, 527, 531, 534, 538, 540, 542, 544, 545, 546, 548, 549, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 609, 612, 613, 614, 617, 618, 625, 626, 628, 634, 635, 636, 637, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 697, 704, 709, 724, 726, 727, 731, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 788, 793, 794, 803, 806, 807, 809, 817, 826, 830, 831, 833, 834, 836, 838, 840, 841, 849, 850, 855, 857, 858, 864, 865, 867, 868, 871, 872, 874, 880, 881, 882, 884, 887, 888, 891, 896, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 921, 925, 927, 933, 936, 938, 955, 993, 994, 996, 999, 1001, 1011, 1012, 1014, 1015, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "regression_data": 46, "regression_model": 1042, "regression_test": 386, "regressioncriterion": 1043, "regressionregressionramdomizedpcaramdom": 398, "regressor": [2, 30, 43, 107, 116, 147, 153, 154, 157, 170, 175, 182, 183, 186, 192, 194, 196, 198, 213, 214, 216, 219, 230, 231, 247, 274, 286, 296, 316, 321, 322, 365, 378, 380, 390, 392, 408, 411, 420, 433, 436, 437, 438, 467, 484, 485, 486, 487, 527, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 568, 569, 570, 571, 572, 573, 608, 609, 612, 614, 635, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 681, 682, 704, 835, 836, 839, 840, 841, 850, 858, 863, 864, 865, 868, 874, 882, 887, 888, 908, 910, 913, 915, 916, 917, 918, 921, 925, 926, 927, 940, 943, 945, 993, 994, 1000, 1004, 1005, 1007, 1012, 1018, 1023, 1025, 1026, 1030, 1035, 1036, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1050, 1052], "regressor_": [186, 467, 596, 597, 600], "regressor__sample_weight": 213, "regressor_tag": [926, 940], "regressor_with_": 185, "regressor_without_": 185, "regressorchain": [2, 401, 838, 840, 1043, 1046, 1050], "regressormixin": [2, 247, 380, 392, 467, 927, 1046], "regressortag": [2, 926, 940], "regul": 0, "regular": [2, 62, 64, 67, 71, 75, 90, 91, 92, 93, 94, 103, 105, 110, 125, 133, 142, 144, 145, 147, 152, 159, 161, 170, 171, 172, 174, 177, 179, 181, 183, 185, 192, 193, 194, 196, 198, 200, 201, 202, 204, 208, 209, 211, 213, 220, 227, 229, 231, 246, 257, 263, 264, 267, 272, 273, 275, 296, 297, 305, 307, 308, 309, 313, 314, 315, 316, 317, 318, 335, 336, 338, 340, 341, 342, 345, 346, 352, 354, 356, 365, 378, 390, 391, 408, 410, 412, 413, 415, 416, 417, 420, 439, 445, 449, 473, 474, 478, 480, 481, 482, 483, 507, 515, 517, 518, 523, 525, 527, 531, 541, 542, 543, 546, 550, 551, 553, 562, 564, 565, 591, 592, 594, 641, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 696, 738, 744, 753, 800, 801, 820, 826, 833, 834, 864, 865, 868, 887, 907, 908, 909, 910, 912, 913, 914, 993, 994, 996, 997, 998, 999, 1001, 1003, 1009, 1010, 1014, 1017, 1018, 1019, 1025, 1026, 1028, 1030, 1035, 1036, 1037, 1039, 1040, 1044, 1045, 1047, 1048, 1053], "regularis": [217, 423, 475, 477], "regularli": [142, 288, 390, 1006], "regulatori": 149, "rehan": 1050, "rehman": 1043, "reiichiro": [1042, 1043], "reilli": 1052, "reimburs": 265, "reimplement": [384, 390, 392, 1041, 1045], "reinforc": 1024, "reinit": 386, "reiniti": 390, "reinstal": 396, "reintroduc": 1051, "reitsam": 1047, "reject": [248, 265, 392, 393, 526, 674, 730, 933, 934, 1000, 1004, 1043], "rel": [43, 45, 47, 55, 58, 64, 88, 94, 125, 141, 175, 189, 191, 194, 213, 231, 259, 284, 297, 298, 312, 321, 324, 341, 345, 352, 353, 373, 377, 380, 386, 392, 408, 410, 414, 417, 418, 420, 442, 445, 449, 451, 461, 524, 527, 534, 537, 540, 544, 548, 549, 560, 561, 562, 563, 567, 568, 569, 607, 652, 661, 662, 674, 675, 677, 693, 697, 732, 749, 750, 803, 806, 807, 809, 817, 826, 831, 834, 847, 848, 852, 864, 865, 876, 877, 887, 903, 907, 908, 909, 912, 914, 915, 916, 917, 918, 1000, 1001, 1004, 1006, 1007, 1008, 1010], "relabel": [377, 821, 822, 904], "relat": [8, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 372, 373, 374, 377, 378, 382, 383, 385, 386, 387, 390, 392, 393, 395, 401, 404, 409, 410, 411, 412, 413, 414, 415, 417, 420, 452, 466, 471, 499, 552, 553, 565, 566, 642, 676, 680, 695, 704, 726, 746, 824, 830, 865, 866, 868, 871, 872, 877, 880, 882, 883, 886, 895, 911, 993, 996, 998, 1004, 1005, 1007, 1008, 1011, 1014, 1019, 1020, 1021, 1024, 1025, 1027, 1030, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1048, 1051], "relate_point": 301, "relationship": [2, 43, 52, 58, 134, 135, 149, 176, 185, 186, 193, 198, 201, 213, 215, 216, 278, 285, 290, 312, 318, 327, 392, 410, 412, 414, 464, 499, 639, 717, 1001, 1004, 1006, 1007, 1011, 1012, 1040], "relative_tim": 259, "relax": [46, 410, 418, 455, 1017, 1042], "releas": [0, 54, 88, 103, 132, 138, 139, 141, 151, 168, 181, 182, 187, 188, 191, 213, 214, 215, 242, 247, 252, 253, 254, 265, 266, 283, 285, 293, 317, 333, 360, 366, 376, 378, 379, 381, 386, 390, 392, 418, 445, 448, 449, 466, 469, 492, 493, 499, 504, 505, 507, 515, 518, 524, 527, 541, 544, 564, 565, 567, 568, 570, 602, 605, 631, 633, 635, 637, 643, 649, 651, 655, 661, 672, 683, 691, 700, 704, 705, 720, 721, 735, 745, 751, 781, 791, 798, 802, 803, 804, 806, 807, 809, 817, 825, 826, 829, 830, 833, 849, 851, 868, 872, 877, 880, 881, 882, 886, 887, 888, 904, 905, 907, 912, 915, 916, 946, 1020, 1025, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "release_highlight": 1025, "relev": [46, 48, 57, 108, 112, 168, 183, 193, 207, 216, 271, 272, 278, 361, 365, 367, 373, 375, 377, 378, 380, 383, 384, 392, 393, 401, 412, 413, 419, 420, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 729, 743, 759, 802, 804, 805, 806, 807, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 885, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 1004, 1005, 1010, 1021, 1024, 1025, 1038, 1043, 1049], "reli": [125, 140, 143, 168, 189, 200, 202, 288, 291, 321, 325, 352, 365, 366, 380, 383, 386, 387, 390, 392, 406, 407, 410, 415, 417, 418, 552, 596, 600, 610, 611, 781, 831, 834, 872, 956, 969, 993, 996, 998, 1000, 1004, 1007, 1012, 1014, 1019, 1028, 1043, 1044, 1045, 1049, 1051, 1052], "reliabl": [2, 62, 64, 408, 414, 440, 441, 649, 1020, 1028], "relianc": [125, 217], "religion": [57, 272, 352, 353, 354, 373, 1005], "reloc": 1044, "relova": 1048, "relu": [864, 865], "remain": [47, 62, 64, 103, 134, 141, 145, 147, 167, 186, 213, 217, 229, 256, 269, 273, 277, 280, 407, 410, 411, 412, 414, 418, 448, 466, 469, 518, 519, 524, 531, 537, 573, 613, 614, 766, 772, 806, 807, 808, 811, 813, 842, 843, 844, 846, 955, 993, 994, 996, 1003, 1004, 1008, 1014, 1020, 1024, 1037, 1043, 1049, 1052], "remaind": [43, 143, 186, 202, 213, 215, 231, 250, 325, 356, 411, 466, 469, 1035, 1042, 1043, 1044, 1047, 1048, 1051, 1053], "remaining_column": 466, "remark": [88, 116, 168, 265, 367, 378, 1014], "remedi": 230, "rememb": [88, 380, 382, 383, 396, 418, 1007, 1011, 1020], "remi": 1042, "remind": [247, 393], "reminisc": 123, "remot": [191, 331, 378, 381], "remov": [1, 2, 44, 54, 55, 87, 88, 102, 107, 166, 168, 181, 182, 186, 189, 272, 311, 318, 320, 321, 322, 327, 352, 353, 356, 361, 370, 373, 377, 378, 379, 380, 382, 383, 387, 392, 396, 403, 410, 411, 414, 417, 418, 420, 421, 430, 444, 446, 447, 452, 459, 484, 485, 486, 487, 490, 491, 530, 537, 538, 541, 543, 544, 556, 570, 571, 572, 573, 582, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 614, 633, 647, 657, 658, 659, 661, 662, 676, 678, 682, 695, 712, 745, 781, 782, 783, 785, 803, 806, 807, 809, 817, 826, 831, 832, 834, 854, 866, 867, 871, 872, 884, 885, 887, 896, 904, 922, 931, 933, 934, 945, 946, 994, 1001, 1007, 1020, 1026, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "remove_zero_eig": [538, 1037, 1044], "rempfler": 1046, "renaissance0n": 1053, "renam": [126, 147, 189, 261, 272, 320, 378, 382, 410, 449, 461, 466, 473, 474, 480, 530, 539, 556, 557, 558, 559, 560, 561, 566, 567, 568, 569, 781, 880, 931, 933, 934, 1035, 1036, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "rename_axi": 271, "render": [51, 63, 86, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 208, 217, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 325, 327, 332, 360, 378, 380, 382, 383, 384, 392, 554, 592, 634, 703, 705, 884, 896, 919, 921, 1003, 1020, 1048, 1052], "rene": 1048, "renni": [2, 842, 844, 1006, 1043], "renorm": 63, "rent": 43, "rental": [43, 52, 187, 1011], "reorder": [58, 392, 700, 721, 1024, 1043], "reordered_data": 58, "reordered_row": 58, "reorgan": 1041, "rep": 375, "reparameter": 1019, "reparametr": 348, "repartit": 43, "repeat": [2, 49, 69, 99, 110, 112, 145, 168, 170, 176, 177, 187, 191, 215, 265, 266, 271, 272, 283, 288, 331, 353, 354, 380, 387, 392, 393, 407, 408, 410, 415, 418, 419, 591, 596, 610, 611, 618, 630, 637, 662, 808, 818, 819, 822, 939, 994, 1003, 1020, 1030, 1043, 1045], "repeatedkfold": [2, 186, 414, 808, 819, 1042], "repeatedli": [134, 324, 361, 392, 410, 417, 420, 511, 549, 669, 670, 679, 680, 681, 784, 994, 1008], "repeatedstratifiedkfold": [2, 271, 285, 288, 414, 818, 822, 1042], "repercuss": 316, "repetit": [271, 285, 288, 383, 414, 818, 819, 1012, 1049], "replac": [2, 43, 62, 111, 124, 134, 149, 170, 175, 177, 181, 187, 199, 214, 254, 274, 291, 313, 318, 322, 343, 376, 378, 382, 384, 387, 392, 404, 411, 414, 417, 418, 443, 447, 466, 506, 518, 558, 559, 566, 585, 591, 592, 593, 594, 610, 611, 630, 633, 637, 642, 644, 731, 788, 809, 815, 817, 826, 866, 867, 870, 890, 903, 904, 910, 923, 925, 972, 974, 977, 993, 994, 996, 1000, 1004, 1014, 1019, 1020, 1023, 1024, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "replai": [806, 807], "repli": [54, 352, 377, 378, 381], "replic": [271, 377, 380, 1030], "repo": [378, 382, 1024, 1027], "report": [0, 2, 43, 47, 52, 68, 102, 107, 165, 178, 200, 265, 269, 279, 285, 288, 320, 330, 361, 373, 377, 379, 380, 381, 384, 386, 390, 392, 396, 404, 410, 414, 614, 652, 661, 667, 688, 689, 703, 716, 732, 733, 741, 786, 787, 790, 836, 845, 864, 865, 902, 920, 945, 1000, 1007, 1012, 1023, 1024, 1027, 1036, 1039, 1042, 1043, 1045, 1046, 1048, 1050, 1051], "reporthook": 47, "repositori": [43, 47, 52, 191, 265, 326, 371, 373, 375, 376, 378, 380, 382, 386, 390, 393, 396, 507, 1023, 1027, 1030], "repr": [580, 1046, 1047, 1049], "repreat": 271, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 68, 70, 79, 82, 83, 86, 120, 122, 128, 129, 141, 150, 186, 193, 205, 215, 217, 218, 222, 235, 237, 245, 250, 259, 264, 265, 268, 271, 274, 278, 296, 313, 345, 352, 354, 360, 367, 370, 373, 375, 380, 390, 391, 392, 393, 404, 408, 410, 414, 415, 416, 417, 418, 419, 440, 444, 448, 454, 465, 466, 472, 473, 474, 475, 476, 477, 478, 490, 492, 493, 495, 497, 499, 501, 503, 504, 505, 507, 508, 513, 530, 537, 539, 541, 543, 544, 550, 553, 558, 566, 584, 591, 594, 597, 632, 635, 637, 643, 679, 681, 700, 702, 704, 714, 733, 746, 792, 803, 805, 816, 817, 820, 823, 825, 830, 832, 833, 836, 837, 843, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 865, 874, 880, 881, 904, 907, 908, 933, 934, 955, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1015, 1017, 1018, 1020, 1041, 1043, 1046, 1047, 1050, 1053], "represent": [2, 43, 51, 55, 58, 63, 86, 103, 104, 120, 123, 139, 141, 150, 151, 152, 154, 157, 165, 175, 186, 188, 191, 195, 198, 233, 234, 235, 241, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 288, 301, 309, 317, 322, 324, 325, 327, 332, 353, 354, 360, 361, 370, 372, 381, 392, 404, 410, 411, 415, 416, 417, 424, 465, 534, 538, 540, 543, 545, 551, 569, 591, 593, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 633, 646, 649, 655, 661, 662, 663, 665, 669, 670, 671, 679, 680, 681, 772, 800, 801, 809, 826, 863, 876, 880, 881, 885, 887, 900, 907, 919, 921, 924, 930, 947, 969, 996, 1001, 1003, 1005, 1007, 1008, 1009, 1011, 1014, 1019, 1024, 1035, 1036, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "reproduc": [44, 51, 93, 134, 186, 191, 200, 280, 288, 309, 366, 377, 378, 380, 381, 386, 390, 392, 410, 414, 415, 418, 422, 442, 456, 462, 471, 476, 490, 493, 495, 498, 500, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 554, 556, 557, 558, 559, 562, 563, 564, 565, 566, 610, 611, 613, 614, 637, 642, 643, 644, 645, 649, 650, 653, 655, 656, 657, 663, 664, 665, 666, 669, 670, 671, 674, 679, 681, 682, 692, 693, 695, 696, 697, 796, 800, 801, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 831, 832, 833, 837, 838, 841, 852, 856, 863, 864, 865, 872, 884, 888, 896, 899, 900, 907, 908, 909, 912, 950, 951, 974, 977, 996, 1023, 1027, 1035, 1043, 1048, 1049], "reproduct": [390, 1000], "request": [2, 47, 55, 80, 213, 231, 247, 323, 366, 372, 376, 377, 381, 392, 393, 401, 404, 415, 418, 419, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 584, 585, 591, 593, 594, 602, 603, 613, 614, 635, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 702, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 962, 1004, 1007, 1027, 1041, 1042, 1043, 1052, 1053], "request_rout": 247, "requir": [30, 31, 43, 46, 53, 62, 80, 86, 88, 90, 91, 100, 102, 124, 126, 139, 140, 143, 144, 147, 149, 150, 154, 168, 187, 198, 202, 210, 213, 233, 235, 241, 244, 247, 250, 254, 265, 272, 280, 282, 285, 291, 293, 311, 316, 322, 323, 352, 353, 354, 372, 375, 376, 378, 379, 380, 384, 386, 390, 392, 393, 396, 397, 401, 404, 406, 410, 411, 412, 414, 415, 417, 418, 419, 421, 427, 433, 439, 440, 441, 446, 448, 452, 454, 459, 464, 466, 469, 471, 484, 485, 486, 499, 511, 524, 527, 538, 544, 552, 553, 554, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 575, 582, 583, 584, 605, 613, 614, 622, 630, 635, 636, 637, 646, 649, 650, 655, 656, 661, 662, 669, 670, 671, 674, 677, 678, 679, 680, 681, 689, 692, 694, 695, 696, 698, 702, 727, 732, 733, 750, 752, 755, 766, 786, 787, 790, 802, 803, 806, 807, 810, 812, 817, 825, 830, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 867, 868, 869, 871, 881, 882, 883, 887, 895, 899, 900, 902, 903, 907, 908, 909, 912, 915, 916, 917, 918, 924, 926, 927, 933, 934, 940, 945, 946, 960, 963, 969, 989, 992, 993, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1020, 1024, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "requires_fit": [926, 987], "requires_i": [427, 433, 992, 1046], "requires_positive_x": [1045, 1050], "requires_vector_input": [615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "requisit": 380, "rerais": 1052, "rerun": [51, 63, 77, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 325, 327, 332, 360, 386], "resampl": [2, 85, 146, 186, 231, 295, 387, 390, 392, 558, 559, 977, 1024, 1044, 1048], "resampled_arrai": 974, "rescal": [43, 80, 81, 88, 125, 195, 200, 236, 250, 311, 350, 412, 417, 422, 471, 472, 473, 474, 475, 476, 477, 478, 536, 541, 649, 652, 655, 879, 885, 909, 910, 911, 912, 913, 1004, 1014, 1039, 1040], "rescaled_coin": [80, 81], "rescu": [404, 418], "research": [0, 168, 185, 265, 271, 277, 288, 373, 375, 390, 410, 504, 516, 638, 648, 695, 738, 832, 837, 993, 1001, 1005, 1007, 1019, 1024, 1028], "resembl": [74, 217, 247], "reserv": [265, 317, 378, 564, 565, 1028], "reserva": 317, "reservoir": 972, "reservoir_sampl": 972, "reset": [254, 361, 386, 537, 679, 680, 681, 847, 848, 876, 877, 887, 992, 1037], "reset_n_cal": [847, 848], "reshama": [0, 363, 368, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1053], "reshap": [2, 43, 44, 45, 53, 61, 68, 80, 81, 83, 84, 86, 87, 91, 104, 111, 115, 120, 123, 129, 137, 142, 152, 161, 166, 170, 172, 173, 174, 175, 176, 177, 179, 193, 204, 210, 226, 227, 229, 230, 234, 236, 238, 240, 245, 249, 260, 269, 295, 297, 304, 306, 308, 309, 312, 313, 314, 318, 320, 323, 324, 326, 327, 335, 340, 341, 346, 349, 350, 390, 407, 415, 417, 418, 447, 467, 587, 634, 735, 833, 882, 886, 1000, 1014, 1020, 1040], "resid": 373, "residence_sinc": 265, "residenti": 154, "residu": [2, 107, 209, 215, 267, 433, 467, 484, 485, 486, 555, 557, 559, 561, 563, 565, 568, 571, 573, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 674, 675, 676, 677, 681, 682, 688, 689, 704, 747, 788, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1000, 1004, 1047, 1048, 1050], "residual_metr": 1041, "residual_threshold": [230, 674, 1000, 1048], "residual_vs_predict": [43, 52, 107, 267, 325, 704], "residues_": 1040, "resign": 393, "resili": 418, "resist": [111, 112, 378], "resiz": [45, 80, 81, 251, 373, 496, 497], "resolut": [43, 50, 55, 129, 187, 303, 304, 341, 393, 408, 1045], "resolv": [55, 377, 378, 382, 386, 393, 418, 448, 454, 464, 694, 698, 951, 994, 1004, 1042, 1044, 1045, 1048, 1053], "resort": [273, 373, 404, 558, 1045], "resourc": [55, 77, 146, 149, 181, 213, 308, 322, 364, 381, 390, 392, 409, 417, 806, 807, 993, 1005, 1024, 1028, 1030, 1043, 1048, 1049], "resourcewarn": 1038, "resp": [373, 417, 600, 800, 801, 1018, 1043], "respect": [64, 88, 100, 125, 126, 134, 138, 140, 142, 151, 178, 191, 193, 198, 202, 215, 227, 230, 233, 235, 241, 244, 246, 250, 261, 265, 280, 297, 298, 309, 316, 324, 338, 345, 360, 365, 366, 373, 374, 378, 408, 410, 413, 415, 417, 418, 420, 448, 466, 469, 472, 473, 474, 475, 476, 477, 478, 537, 543, 544, 550, 556, 564, 565, 600, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 631, 639, 646, 674, 693, 697, 715, 731, 785, 788, 800, 801, 843, 853, 864, 865, 919, 921, 992, 993, 997, 998, 1000, 1001, 1004, 1007, 1008, 1009, 1010, 1014, 1019, 1023, 1027, 1028, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "respond": [186, 378, 410], "respons": [0, 25, 168, 187, 209, 213, 216, 247, 281, 284, 352, 375, 378, 392, 410, 411, 417, 448, 466, 484, 485, 486, 570, 571, 634, 635, 636, 677, 678, 701, 703, 705, 745, 800, 801, 1005, 1011, 1052], "response_method": [48, 66, 70, 89, 136, 150, 155, 197, 205, 222, 227, 265, 274, 294, 299, 302, 316, 328, 337, 338, 340, 345, 357, 634, 635, 636, 701, 703, 705, 745, 802, 825, 1004, 1052], "rest": [2, 30, 62, 66, 143, 147, 183, 192, 198, 222, 228, 247, 250, 259, 288, 320, 334, 338, 349, 384, 392, 420, 515, 613, 634, 647, 661, 662, 679, 757, 791, 835, 836, 837, 856, 907, 909, 912, 1000, 1004, 1005, 1008, 1011, 1019, 1025, 1028, 1039, 1040, 1049, 1050, 1051, 1053], "restart": [90, 176, 381, 386, 449, 534, 540, 541, 546, 548, 549, 613, 614, 1001, 1048], "restor": [1038, 1043, 1044, 1045, 1046, 1050], "restrict": [2, 64, 99, 100, 105, 160, 181, 183, 203, 230, 305, 380, 384, 408, 410, 417, 418, 467, 496, 505, 535, 584, 613, 656, 657, 658, 659, 661, 685, 686, 716, 785, 791, 792, 833, 855, 857, 858, 859, 861, 863, 864, 865, 867, 893, 1004, 1020, 1025, 1029, 1030, 1035, 1037, 1045, 1047, 1052], "restructuredtext": 378, "result": [0, 2, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 80, 86, 87, 88, 93, 95, 99, 103, 105, 107, 112, 116, 120, 123, 125, 130, 137, 138, 139, 141, 143, 144, 146, 147, 150, 152, 153, 161, 167, 168, 170, 172, 174, 176, 178, 181, 186, 187, 188, 189, 194, 199, 201, 202, 203, 208, 214, 215, 217, 221, 227, 228, 231, 233, 234, 237, 240, 243, 245, 251, 256, 261, 262, 264, 265, 266, 269, 271, 272, 274, 277, 278, 279, 280, 282, 283, 285, 288, 291, 293, 297, 306, 307, 308, 311, 312, 313, 316, 320, 322, 324, 325, 326, 327, 328, 330, 333, 335, 341, 345, 346, 348, 352, 354, 358, 359, 360, 365, 366, 367, 372, 373, 375, 378, 380, 382, 383, 384, 386, 390, 391, 392, 393, 404, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 435, 442, 443, 445, 447, 448, 449, 452, 453, 454, 455, 456, 457, 459, 461, 464, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478, 481, 491, 511, 512, 514, 516, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 582, 583, 584, 585, 587, 591, 592, 594, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 633, 634, 635, 637, 639, 643, 646, 655, 656, 661, 667, 668, 669, 670, 678, 679, 680, 681, 689, 692, 693, 694, 695, 696, 697, 698, 711, 713, 714, 715, 720, 728, 729, 731, 732, 733, 734, 735, 739, 740, 741, 757, 759, 760, 767, 774, 777, 781, 782, 783, 784, 786, 787, 788, 790, 796, 797, 800, 801, 803, 805, 806, 807, 808, 813, 817, 818, 819, 822, 823, 828, 834, 835, 836, 838, 839, 840, 841, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 871, 872, 880, 881, 884, 885, 888, 896, 900, 904, 907, 909, 912, 915, 916, 917, 918, 919, 920, 933, 934, 950, 951, 953, 958, 968, 969, 974, 977, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1023, 1024, 1027, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "results_df": [221, 271, 317], "results_for_preval": 274, "results_sc": 348, "retail": 1028, "retain": [2, 193, 392, 410, 413, 414, 418, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 497, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 698, 699, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 880, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1017, 1035], "retbin": 1014, "retent": [595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "retrac": 247, "retract": 378, "retrain": [404, 1024, 1051, 1053], "retri": [188, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 1043, 1049, 1053], "retriev": [2, 116, 186, 217, 278, 353, 360, 382, 392, 415, 418, 419, 470, 499, 593, 596, 597, 629, 656, 666, 687, 702, 729, 733, 735, 736, 759, 784, 842, 846, 879, 905, 1000, 1002, 1004, 1006, 1023, 1024, 1040, 1045, 1047, 1049, 1052], "return": [2, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 86, 89, 94, 102, 107, 118, 126, 127, 129, 132, 134, 137, 139, 145, 146, 149, 150, 154, 168, 173, 176, 178, 182, 189, 193, 194, 200, 202, 205, 213, 214, 221, 222, 223, 231, 247, 250, 253, 254, 259, 261, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 286, 291, 296, 301, 304, 309, 311, 313, 316, 320, 328, 337, 341, 352, 354, 356, 360, 365, 371, 372, 373, 378, 379, 380, 384, 385, 387, 390, 392, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 929, 930, 931, 933, 934, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 972, 973, 974, 975, 976, 977, 978, 984, 987, 988, 989, 990, 991, 992, 994, 1004, 1007, 1011, 1012, 1019, 1020, 1024, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "return_a": [588, 589, 969, 1038], "return_cent": [515, 1046], "return_cod": 549, "return_cost": [473, 474, 480], "return_count": [333, 353, 859], "return_cov": [392, 570, 571, 614, 867], "return_dist": [87, 465, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 1007, 1039], "return_distribut": [118, 526], "return_estim": [43, 186, 285, 327, 414, 830, 1043], "return_ind": 526, "return_indic": [414, 830, 1051], "return_inner_stat": 1049, "return_intercept": [690, 1044], "return_invers": [148, 380], "return_log": [847, 848], "return_model": [1037, 1039], "return_n_it": [422, 456, 461, 480, 548, 549, 649, 650, 655, 656, 663, 664, 665, 666, 684, 685, 686, 687, 688, 689, 690, 697, 1049], "return_norm": [894, 1042], "return_path": [685, 686, 688, 689], "return_std": [170, 175, 176, 177, 179, 193, 194, 392, 555, 570, 571, 614, 616, 617, 618, 619, 628, 630, 647, 648, 867, 1042, 1043, 1047, 1052], "return_sum_weight": 984, "return_tim": [273, 831, 1045], "return_train_scor": [140, 275, 285, 317, 414, 803, 806, 807, 817, 830, 1041, 1042, 1044], "return_x_i": [44, 46, 54, 91, 102, 103, 104, 105, 120, 140, 143, 157, 159, 160, 164, 181, 182, 188, 189, 191, 200, 201, 202, 204, 209, 210, 220, 228, 229, 241, 249, 250, 253, 254, 267, 270, 273, 278, 279, 288, 290, 293, 300, 307, 308, 309, 316, 320, 322, 324, 325, 326, 327, 333, 344, 354, 356, 371, 383, 384, 391, 404, 410, 411, 414, 417, 419, 422, 430, 448, 490, 491, 492, 493, 495, 497, 498, 499, 500, 503, 504, 505, 507, 508, 513, 535, 536, 537, 538, 561, 564, 565, 570, 571, 595, 598, 599, 601, 602, 603, 604, 605, 613, 622, 623, 625, 626, 641, 642, 661, 662, 671, 676, 677, 678, 691, 692, 693, 694, 696, 698, 704, 714, 791, 806, 807, 809, 835, 840, 851, 856, 859, 916, 917, 918, 994, 999, 1004, 1005, 1006, 1007, 1014, 1032, 1041, 1043, 1045, 1048], "return_x_mean": 422, "reuben": 1035, "reus": [52, 170, 206, 265, 272, 320, 354, 380, 392, 410, 411, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 637, 649, 651, 652, 655, 661, 663, 665, 669, 670, 671, 672, 679, 680, 681, 683, 864, 865, 1012, 1016, 1028, 1042, 1052], "reuter": [365, 373], "reuters21578": 47, "reuterspars": 47, "rev": [378, 610, 611], "revamp": [380, 1045], "reveal": [43, 52, 186, 188, 352, 384, 407, 1001, 1051], "revers": [107, 168, 218, 271, 537, 544, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 792, 867, 1004, 1035, 1036, 1045, 1047, 1051], "revert": [121, 406, 633, 635, 636, 1042, 1047, 1052], "review": [288, 317, 365, 373, 380, 381, 383, 384, 390, 393, 414, 415, 538, 544, 1004, 1014], "revillet": 1035, "revis": [393, 673], "revisit": [410, 421, 446], "revolv": 1001, "reward": 378, "reweight": [134, 353, 392, 412, 417, 593, 594, 651, 672, 683], "reweight_covari": [471, 476], "rewrit": [384, 390, 1020, 1035], "rewritten": [378, 652, 1037, 1039], "rey": 1050, "reza": 1045, "rezazadeh": 1048, "rf": [139, 140, 153, 156, 157, 188, 320, 361, 417, 570, 572, 573], "rf_123": 361, "rf__n_estim": 417, "rf_appli": 139, "rf_applyfunctiontransform": 139, "rf_cst": 327, "rf_inst": 361, "rf_leaves_yield": 139, "rf_model": 139, "rf_no_cst": 327, "rf_pipelin": 154, "rfc": [64, 253, 320, 1032], "rfc_disp": [253, 320, 1032], "rfe": [2, 166, 167, 401, 419, 597, 600, 605, 1035, 1039, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "rfecv": [2, 167, 401, 419, 596, 600, 605, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1051, 1052, 1053], "rfrandomforestregressor": 157, "rgb": [373, 418, 496, 497, 586, 587, 590], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1042, "rho": [224, 415, 680, 1000, 1018, 1036], "rho_k": 416, "ri": [410, 708, 789], "ribeiro": [593, 733, 1048], "ricardo": [1038, 1048, 1049, 1052], "ricardojnf": 1048, "riccadonna": 746, "riccardo": [1046, 1052], "rice": [50, 304, 373, 501, 1048], "rich": [85, 149, 386, 390, 410, 441, 1028, 1046, 1049], "richard": [373, 419, 661, 1036, 1045, 1047, 1049, 1050, 1053], "richardscottoz": 1048, "richer": [85, 129, 410], "richi": 1043, "rick": 1046, "ricker": 129, "ricker_funct": 129, "ricker_matrix": 129, "rickiepark": 1042, "rid": [48, 1018], "riddel": [1038, 1040, 1042], "ridg": [2, 24, 44, 49, 53, 87, 107, 121, 122, 137, 154, 159, 168, 169, 175, 176, 177, 181, 183, 185, 186, 187, 192, 193, 198, 203, 206, 209, 213, 214, 239, 249, 284, 312, 347, 348, 352, 365, 390, 406, 415, 417, 420, 527, 538, 542, 546, 614, 618, 625, 628, 646, 647, 648, 650, 652, 660, 664, 676, 677, 678, 681, 690, 704, 753, 803, 809, 817, 840, 913, 1004, 1005, 1012, 1014, 1018, 1019, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "ridge_alpha": [542, 546, 1042], "ridge_cv": 107, "ridge_cv_with_trans_target": 107, "ridge_glm": 213, "ridge_regress": [2, 1043, 1044, 1050], "ridgeclassifi": [2, 352, 365, 675, 676, 678, 1000, 1005, 1040, 1044, 1048, 1049, 1050, 1053], "ridgeclassifiercv": [2, 401, 676, 677, 791, 1000, 1004, 1005, 1043, 1045, 1046, 1048, 1049, 1053], "ridgecv": [2, 43, 107, 154, 168, 186, 249, 392, 401, 417, 571, 646, 675, 678, 1000, 1005, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "ridgecvridgecv": [154, 186], "ridgeridg": 186, "ridgewai": [145, 417], "riedmann": 1047, "ries": 1049, "rifkin": 1000, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 84, 86, 93, 95, 97, 110, 111, 113, 118, 122, 123, 125, 126, 127, 129, 134, 136, 137, 138, 146, 147, 148, 149, 156, 164, 170, 173, 182, 189, 201, 203, 214, 215, 216, 217, 219, 220, 223, 224, 240, 243, 244, 256, 258, 259, 261, 262, 265, 266, 267, 271, 274, 278, 281, 282, 284, 285, 296, 304, 306, 309, 311, 313, 316, 326, 327, 331, 341, 343, 345, 348, 350, 352, 357, 360, 361, 378, 380, 386, 390, 391, 393, 407, 409, 410, 413, 415, 416, 417, 420, 466, 484, 485, 486, 487, 537, 544, 547, 560, 561, 562, 563, 564, 565, 567, 568, 569, 590, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 638, 679, 681, 872, 915, 916, 917, 918, 919, 937, 951, 993, 996, 998, 1000, 1002, 1004, 1006, 1007, 1011, 1016, 1018, 1019, 1020, 1024, 1028, 1030, 1037, 1043, 1049, 1051, 1052], "right_impur": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918], "rightarrow": [420, 622, 1008], "rijn": [372, 1043], "rileran": 1049, "rio": [1045, 1047, 1048, 1049], "ripe": 317, "rise": 175, "rishabh": 1049, "rishi": 1047, "rishikesh": 1042, "risk": [16, 48, 88, 149, 213, 217, 231, 312, 348, 361, 377, 378, 392, 404, 409, 414, 417, 570, 571, 892, 893, 895, 896, 897, 898, 1000, 1004, 1028, 1042], "riski": 231, "riskiest": [213, 231], "ritchi": 1046, "rithvik": 1047, "ritter": [1049, 1050], "ritual": 352, "rival": [43, 904, 1017], "rk": 98, "rkf": [414, 818], "rl2007": 1000, "rlm": 1045, "rm": [111, 173, 382, 386, 412], "rmse": [43, 52, 112, 149, 317, 1004, 1046], "rmse_": 317, "rmse_test_mean": 317, "rmse_test_scor": 317, "rmse_test_std": 317, "rmse_train_mean": 317, "rmse_train_scor": 317, "rmse_train_std": 317, "rmsle": 1004, "rmtree": [87, 104, 411], "rna": 390, "rnd": 312, "rng": [44, 58, 59, 67, 70, 72, 79, 83, 95, 112, 116, 120, 122, 127, 135, 146, 149, 150, 151, 153, 170, 171, 174, 176, 177, 179, 181, 182, 185, 188, 193, 194, 195, 196, 198, 202, 207, 214, 215, 220, 227, 240, 246, 247, 249, 256, 266, 274, 277, 282, 283, 303, 306, 315, 318, 321, 322, 324, 326, 327, 330, 331, 335, 344, 358, 359, 361, 366, 380, 383, 401, 423, 472, 476, 477, 478, 480, 481, 482, 483, 646, 652, 673, 675, 681, 690, 815, 842, 843, 844, 846, 847, 848, 852, 855, 857, 858, 859, 884, 896, 899, 900, 902, 903, 904, 913], "ro": 63, "road": 390, "rob": [1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1047, 1050], "robert": [0, 168, 200, 288, 375, 400, 415, 531, 538, 631, 659, 724, 726, 727, 738, 873, 994, 1000, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1050, 1053], "roberto": [410, 444, 1053], "robertson": 1048, "robin": [181, 182, 630, 994, 1041, 1044, 1049, 1050], "robinson": 1048, "robl": 1042, "robson": 1045, "robust": [2, 48, 70, 94, 96, 108, 110, 144, 146, 168, 182, 183, 186, 187, 192, 203, 215, 217, 230, 240, 250, 286, 311, 326, 367, 375, 386, 410, 417, 418, 448, 450, 471, 472, 475, 476, 477, 478, 527, 537, 562, 563, 652, 660, 673, 674, 681, 682, 753, 837, 868, 882, 884, 885, 896, 902, 949, 1004, 1008, 1010, 1014, 1017, 1018, 1023, 1025, 1026, 1028, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1051], "robust_contour": 111, "robust_cov": 111, "robust_mah": 111, "robust_scal": [2, 885, 896, 1043], "robustli": [8, 216], "robustscal": [2, 250, 884, 897, 994, 1014, 1040, 1041, 1043, 1045, 1046, 1047, 1051], "roc": [2, 50, 62, 139, 168, 183, 239, 241, 250, 251, 263, 265, 266, 273, 327, 328, 385, 408, 409, 414, 507, 513, 567, 661, 705, 709, 710, 711, 730, 785, 791, 792, 822, 833, 836, 874, 912, 1010, 1025, 1032, 1037, 1038, 1040, 1041, 1045, 1047, 1051], "roc_auc": [50, 168, 271, 275, 280, 281, 385, 637, 705, 736, 1004, 1032], "roc_auc_ovo": [1004, 1045], "roc_auc_ovo_weight": [1004, 1045], "roc_auc_ovr": [1004, 1045], "roc_auc_ovr_weight": [1004, 1045], "roc_auc_scor": [2, 62, 168, 271, 280, 320, 327, 705, 709, 710, 711, 792, 1004, 1037, 1038, 1043, 1045, 1049, 1050], "roc_curv": [2, 50, 241, 268, 280, 705, 709, 730, 785, 791, 1004, 1035, 1036, 1037, 1040, 1041, 1043, 1048, 1051, 1053], "roc_displai": 241, "rocchio": [352, 854], "rocco": [1048, 1049, 1050], "roccurvedisplai": [2, 139, 250, 253, 265, 268, 280, 281, 320, 385, 791, 792, 1010, 1032, 1045, 1051, 1052, 1053], "rock": 112, "rocklin": [377, 383], "roddi": [1044, 1045], "rodent": [50, 304, 373, 501], "roderick": 994, "rodion": 1048, "rodrigo": [1043, 1053], "rodrigu": [1042, 1043, 1048], "rodr\u00edguez": 317, "roeder": 1045, "roehr": [1051, 1052], "roei": 1047, "roeschk": 1044, "roger": [726, 1042, 1043, 1047], "rogerstanimoto": [452, 459, 702, 781, 782, 783, 1007], "rogerstanimotodist": 702, "rohan": [1040, 1041, 1043, 1044, 1048], "rohit": [1038, 1039, 1043, 1044], "roi": [1035, 1049], "roi_siz": 87, "roic": 1050, "rok": 1045, "rokem": [1035, 1041], "rokhlin": [538, 544, 951], "roland": [1037, 1038], "rolando": [1036, 1037], "role": [0, 280, 365, 377, 415], "roll": [2, 100, 183, 232, 233, 238, 381, 410, 533, 695, 696, 945, 1025, 1028, 1045, 1050], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1042, 1047], "roman": [0, 399, 630, 921, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "roman4oo": 1050, "romaniuk": 1039, "romero": 1053, "romijnd": 1047, "romuald": 1044, "ron": [0, 400, 1035], "ronald": [373, 1008, 1038, 1048], "ronan": [1035, 1038, 1043], "ronchetti": [652, 1000], "rong": 1019, "ronrubin": [667, 688, 689, 1000], "ronsin": [1043, 1044, 1052], "room": [311, 373, 383, 410, 1027], "roopam": [1043, 1044], "root": [2, 43, 111, 149, 168, 195, 360, 375, 378, 386, 410, 444, 504, 544, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 642, 793, 794, 915, 916, 917, 918, 919, 921, 1004, 1010, 1020, 1037, 1043, 1044, 1045, 1046, 1049, 1050], "root_": 444, "root_mean_squared_error": [2, 52, 149, 406, 1004, 1052], "root_mean_squared_log_error": [2, 406, 1004, 1052], "rope": 271, "rope_interv": 271, "rope_prob": 271, "rori": 1046, "rosa": 1050, "rosal": 414, "rosati": 1053, "rose": 373, "rosenberg": [410, 720, 740, 798], "rosenfeld": 1043, "ross": [537, 610, 611, 1020, 1049, 1050], "rosset": [134, 417, 522, 556], "rossi": 1038, "rosslimlinyang_ijcv": 537, "rostamizadeh": 993, "rostomyan": 1043, "rotat": [47, 75, 115, 119, 122, 125, 127, 145, 156, 183, 189, 236, 282, 283, 290, 341, 347, 413, 415, 420, 422, 507, 535, 544, 553, 617, 700, 887, 919, 1000, 1025, 1046, 1047], "rotation_mod": 282, "rotations_": 553, "roth": [1040, 1043, 1050], "rough": [25, 398, 1010], "roughli": [134, 146, 202, 262, 281, 291, 316, 365, 392, 415, 418, 522, 1001, 1035], "rouli": 1038, "round": [46, 48, 62, 115, 140, 149, 181, 182, 220, 231, 271, 277, 313, 315, 352, 392, 452, 458, 459, 567, 568, 596, 597, 600, 630, 695, 716, 805, 815, 872, 904, 919, 921, 994, 1008, 1020, 1037, 1039, 1041, 1043, 1044, 1046, 1048, 1049, 1051, 1052], "rounded_list": 815, "rouseeuw1984": 476, "rousseeuw": [111, 112, 410, 412, 471, 476, 795, 796, 1010], "rousseuw": [111, 112], "rout": [2, 61, 132, 183, 195, 239, 265, 328, 424, 427, 430, 433, 434, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 960, 961, 962, 963, 987, 1025, 1030, 1049, 1051], "route_param": [247, 960], "routed_param": [247, 963], "routemappingpair": 960, "router": [2, 247, 392, 401, 960, 961, 962, 963], "routerconsumerclassifi": 247, "routerconsumerclassifierifittedrouterconsumerclassifi": 247, "routin": [327, 367, 372, 375, 378, 379, 380, 381, 386, 390, 392, 419, 675, 677, 690, 850, 909, 910, 911, 912, 913, 1001, 1007, 1014, 1015, 1018, 1028, 1035, 1049, 1050, 1051], "routing_info": 960, "routlei": 1041, "rouvinen": 1040, "roux": [661, 1000, 1017], "row": [2, 43, 57, 58, 59, 62, 64, 70, 79, 93, 107, 118, 140, 142, 152, 155, 181, 213, 214, 215, 241, 244, 250, 251, 265, 313, 360, 365, 373, 380, 387, 391, 392, 407, 410, 413, 418, 425, 444, 445, 449, 451, 452, 453, 455, 458, 459, 461, 466, 470, 490, 492, 493, 495, 496, 497, 498, 503, 504, 505, 507, 508, 513, 514, 516, 529, 537, 545, 551, 554, 593, 594, 623, 631, 635, 646, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 695, 699, 700, 713, 721, 722, 728, 761, 762, 766, 769, 771, 772, 773, 774, 776, 777, 779, 781, 782, 783, 784, 800, 801, 836, 842, 843, 844, 845, 846, 852, 855, 856, 857, 858, 859, 862, 873, 877, 879, 880, 882, 892, 893, 894, 897, 898, 901, 905, 924, 929, 933, 934, 951, 974, 977, 981, 983, 985, 986, 989, 990, 993, 994, 996, 998, 1000, 1002, 1004, 1005, 1007, 1014, 1015, 1018, 1019, 1024, 1042, 1043, 1044, 1045, 1050], "row_compl": 57, "row_id_attribut": 372, "row_idx": [59, 213], "row_idx_shuffl": 58, "row_ind": [425, 453, 455], "row_indic": 149, "row_labels_": [57, 58, 59, 407, 453, 455], "row_norm": 259, "rowan": 1050, "rowei": [692, 696, 856, 1001, 1007], "rows_": [57, 407, 425, 453, 455], "royal": [544, 630, 883, 895, 1018], "rp": 244, "rpath": 376, "rr2007": 996, "rragundez": 1043, "rsalakhu": 647, "rsh": [283, 322], "rskf": 819, "rsme": 1004, "rsnegrin": 1049, "rsplit": [45, 55, 272], "rst": [366, 378, 386, 1035], "rstride": 187, "rt": 139, "rt_model": 139, "rtn": 51, "rtol": [380, 847, 848, 852], "ruben": 1050, "rubi": 1047, "rubia": 1038, "rubial": 1048, "rubin": 994, "rubinstein": [667, 688, 689], "rubric": 1001, "ruchitagard": 1045, "rudi": 1041, "rudresh": 1050, "ruff": [378, 396, 403], "ruifeng": [1041, 1042, 1047], "ruin": 378, "ruiter": 1050, "rule": [2, 13, 27, 43, 64, 140, 191, 265, 357, 360, 361, 365, 375, 378, 379, 380, 390, 392, 393, 405, 408, 409, 410, 414, 415, 417, 419, 539, 552, 553, 554, 555, 556, 564, 565, 572, 573, 597, 605, 637, 648, 661, 662, 669, 670, 671, 676, 678, 679, 680, 681, 709, 710, 714, 803, 806, 807, 809, 817, 825, 826, 829, 830, 831, 832, 834, 856, 907, 920, 993, 998, 1006, 1007, 1018, 1020, 1024, 1030, 1037, 1040, 1047, 1052], "ruleset": 1020, "rumelhart": 1008, "rumsfeld": [45, 373], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 376, 378, 379, 380, 382, 383, 384, 385, 386, 390, 392, 393, 396, 397, 404, 406, 410, 412, 414, 417, 420, 421, 422, 439, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 466, 469, 470, 473, 474, 534, 535, 536, 537, 538, 540, 542, 544, 545, 546, 548, 549, 551, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 585, 595, 597, 598, 599, 601, 602, 603, 605, 613, 614, 633, 637, 643, 649, 650, 652, 654, 655, 656, 658, 659, 663, 664, 665, 666, 685, 686, 691, 692, 693, 694, 695, 696, 697, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 839, 840, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 865, 866, 869, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 924, 926, 945, 946, 974, 977, 993, 1003, 1005, 1008, 1017, 1019, 1020, 1023, 1024, 1028, 1035, 1038, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1051], "run_histori": 47, "run_id": 94, "run_tim": [228, 229], "rung": 1014, "runnabl": [54, 382, 383], "runtim": [30, 47, 49, 91, 134, 199, 228, 230, 245, 309, 313, 366, 380, 381, 390, 392, 404, 410, 417, 452, 566, 682, 817, 907, 908, 909, 910, 911, 912, 913, 1018, 1019, 1038, 1042, 1043, 1049, 1050, 1052, 1053], "runtime_histori": 47, "runtimewarn": 179, "runxfail": 386, "rupesh": 1038, "rush": [43, 52, 378], "rushabh": 1046, "rushil": [1050, 1051], "russ": [631, 994], "russel": [1041, 1042], "russellrao": [452, 459, 702, 781, 782, 783, 1007], "russellraodist": 702, "russian": 418, "ruth": 1045, "rutter": 1048, "ruusmann": 1041, "rv": [0, 807, 815, 817, 993, 1035, 1036, 1039, 1040, 1041, 1042, 1043], "rv_discrete_frozen": 283, "rvd": [471, 476], "rvdriessen": [471, 476], "rw2006": [420, 613, 614], "rwelsch427": 1053, "ryad": 1041, "ryan": [1038, 1041, 1043, 1044], "ryb": 357, "ryder": 51, "ryotaro": 1047, "r\u00e9my": 1041, "r\u00fcdiger": [1043, 1044, 1046], "s1": [121, 168, 178, 200, 202, 375], "s2": [121, 168, 178, 200, 202, 375, 553], "s22": 501, "s3": [57, 121, 168, 200, 202, 375], "s4": [168, 200, 202, 375], "s5": [168, 200, 202, 375, 1012], "s6": [168, 200, 202, 375], "s_": [121, 275, 1000, 1001, 1012, 1014], "s__p": 867, "s_color": 233, "s_hessian": 233, "s_i": [410, 1000, 1014], "s_ica_": 122, "s_isomap": 233, "s_j": 410, "s_ltsa": 233, "s_mod": 233, "s_pca_": 122, "s_point": 233, "s_scale": 233, "s_spectral": 233, "s_standard": 233, "s_t_sne": 233, "sa": [373, 495], "saaba": 1040, "saad": 1053, "sabharw": 1045, "sabri": 1050, "sach": 51, "sachdev": 1050, "sachdeva": 1042, "sachin": [1042, 1043, 1049], "sackei": 1045, "saclai": 0, "sacr": 1023, "sad": [821, 822], "sadak": 1047, "sadhana": 1043, "sadli": 146, "sadra": 1051, "sad\u0142ocha": 1048, "saeed": 1004, "saeger": [1040, 1041, 1042], "safari": 1014, "safe": [2, 72, 186, 202, 265, 353, 378, 380, 410, 411, 435, 467, 511, 512, 570, 571, 596, 600, 777, 781, 831, 832, 834, 866, 901, 969, 975, 1007, 1041, 1042, 1043, 1048, 1049], "safe_copi": 1042, "safe_index": [387, 1045], "safe_mask": [2, 387], "safe_realloc": 1038, "safe_sparse_dot": [2, 387, 1045], "safe_sqr": [2, 387], "safeguard": 404, "safer": [353, 361, 376, 410, 414, 1035], "safest": [213, 231, 361, 372], "safeti": [102, 390, 411, 969, 1024, 1045], "safikh": 1050, "safiuddin": 1050, "sag": [205, 220, 661, 662, 675, 677, 690, 1000, 1018, 1040, 1041, 1042, 1044, 1045], "sag_solv": 1044, "saga": [66, 204, 228, 229, 661, 662, 675, 677, 690, 817, 1000, 1042, 1044], "sagar": 1045, "sagnik": 1043, "saha": 1049, "sahil": 1051, "sahin": 1045, "sahu": 1047, "sai": [199, 240, 348, 352, 353, 378, 408, 410, 411, 415, 417, 418, 448, 449, 503, 507, 513, 680, 993, 1010, 1017, 1028, 1052, 1053], "said": [149, 186, 240, 272, 373, 378, 795, 1002, 1010], "saihttam": 1041, "sailesh": [1042, 1043], "saint": 1041, "saito": [415, 541, 543, 550, 1042], "saiw": 1041, "sake": [43, 64, 146, 149, 182, 186, 213, 316, 345, 352, 354, 386, 390, 673], "saket": [1039, 1040, 1047], "sakinaouisrani": 1049, "salahuddin": 1050, "salakhutdinov": [647, 856, 1007], "salamin": 1039, "sale": [143, 250, 271, 1004, 1028], "saleem": 1045, "salerno": 375, "salim": [1052, 1053], "sallisaw": [411, 468], "salman": [0, 399, 1050, 1051, 1052, 1053], "salt": [67, 245, 313, 1049], "salvator": [1035, 1049, 1050, 1052, 1053], "salz": 1042, "salzmann": [213, 231], "sam": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "sambhav": 1046, "same": [2, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 86, 88, 90, 91, 97, 102, 103, 104, 118, 120, 122, 125, 127, 129, 135, 137, 141, 143, 146, 147, 149, 152, 168, 170, 186, 187, 189, 199, 200, 202, 207, 213, 214, 215, 221, 231, 247, 251, 261, 265, 266, 267, 268, 269, 271, 272, 274, 276, 277, 279, 284, 285, 291, 294, 296, 308, 311, 312, 314, 316, 317, 320, 322, 333, 341, 352, 353, 354, 360, 361, 365, 366, 367, 372, 373, 375, 377, 378, 380, 382, 384, 386, 387, 390, 391, 392, 393, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 431, 435, 440, 441, 448, 452, 458, 467, 471, 472, 473, 474, 475, 476, 477, 478, 480, 496, 498, 499, 501, 507, 511, 512, 534, 535, 538, 539, 540, 541, 542, 543, 546, 550, 552, 554, 555, 556, 557, 560, 562, 563, 564, 565, 567, 568, 570, 571, 592, 593, 605, 606, 609, 613, 614, 616, 625, 630, 631, 632, 635, 636, 649, 652, 655, 656, 658, 661, 662, 666, 669, 670, 671, 675, 676, 677, 678, 679, 680, 681, 687, 690, 702, 707, 708, 715, 716, 718, 720, 729, 734, 735, 739, 758, 759, 760, 781, 782, 783, 789, 791, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 811, 812, 817, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 849, 850, 851, 855, 857, 858, 859, 870, 871, 872, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 889, 896, 907, 908, 915, 917, 928, 935, 939, 951, 969, 974, 977, 978, 988, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1024, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "same_kind": 1052, "samesh": [1045, 1046], "samm": [134, 417, 556, 1051, 1052], "samoocha": 1043, "sampl": [2, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 80, 82, 86, 89, 90, 91, 92, 93, 98, 111, 112, 113, 116, 118, 120, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 149, 150, 155, 156, 157, 165, 167, 168, 170, 174, 175, 176, 177, 179, 181, 183, 186, 187, 191, 192, 198, 199, 200, 202, 213, 215, 217, 220, 221, 223, 224, 225, 227, 229, 230, 231, 233, 240, 244, 245, 247, 248, 250, 256, 257, 259, 260, 261, 262, 263, 265, 266, 270, 271, 273, 274, 275, 277, 279, 283, 285, 286, 290, 291, 295, 296, 297, 298, 300, 301, 302, 304, 309, 311, 313, 314, 315, 316, 318, 320, 322, 323, 325, 327, 328, 330, 332, 333, 334, 335, 336, 337, 339, 341, 343, 345, 346, 348, 349, 352, 353, 357, 360, 365, 371, 373, 374, 377, 378, 380, 381, 390, 391, 401, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 427, 428, 429, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 458, 459, 460, 463, 464, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 690, 691, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 763, 764, 766, 767, 771, 772, 773, 774, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 929, 933, 934, 938, 939, 951, 955, 972, 974, 977, 978, 981, 984, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sample_i": [179, 420, 614, 1049], "sample_id": [360, 373, 500], "sample_interv": 641, "sample_interval_": 1051, "sample_posterior": [182, 630, 994], "sample_s": [91, 245, 353, 796], "sample_score_mean": 275, "sample_score_std": 275, "sample_silhouette_valu": 93, "sample_step": 641, "sample_weight": [61, 195, 213, 226, 231, 247, 321, 326, 327, 350, 378, 392, 401, 410, 417, 421, 427, 433, 439, 445, 446, 449, 451, 461, 462, 467, 471, 484, 485, 486, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 613, 614, 635, 636, 637, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 700, 701, 703, 705, 706, 710, 711, 712, 715, 716, 719, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 737, 738, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 799, 802, 803, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 872, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 963, 991, 1004, 1018, 1019, 1020, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "sample_weight1": 247, "sample_weight2": 247, "sample_weight_const": 350, "sample_weight_last_ten": 350, "sample_weight_vect": 939, "sample_without_replac": [2, 387, 1041], "samples_weight": 226, "samplewis": [757, 1004], "samson": 1042, "samuel": [699, 1028, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "samuela": 1038, "samu\u00ebl": 1042, "san": [168, 375, 418, 1016], "sanchez": [1043, 1044], "sandbox": 404, "sandeep": 1047, "sander": [410, 421, 446, 448, 452, 459, 853, 1010, 1044, 1045], "sandi": 1048, "sandip": [1052, 1053], "sandra": [1044, 1050], "sandro": [1043, 1050], "sandrocasagrand": [1043, 1044], "sandrovskii": 1042, "sangam": 1050, "sangamswadik": 1050, "sangeeth": 1044, "saniti": [381, 871, 1004, 1035, 1036], "sanjabi": 1045, "sanjai": 1049, "sanjai_3": [1050, 1051], "sanjoi": [901, 1016], "sano": 1049, "sanofi": 51, "santa": [178, 1050], "santana": [1046, 1049], "santhanam": 1043, "santhosh": 1046, "santhoshbala18": 1046, "santi": [1040, 1042, 1043], "santiago": 1046, "sap": 51, "sapiro": [415, 534, 540], "saqib": 1043, "sara": 1048, "sarah": [1042, 1044, 1047], "sarahremu": [1050, 1053], "sarajpoor": 1050, "sarat": 1046, "sarawagi": 786, "sarra": 1045, "sartaj": 1041, "sasank": 1041, "sashka": [1050, 1051], "sass": [378, 396, 403], "sassenhagen": [1047, 1052], "sat": [43, 149, 187, 418], "satellit": 1007, "satisfi": [410, 653, 657, 702, 720, 739, 740, 847, 848], "satish": 1043, "sato": 1038, "satrajit": [0, 400, 1035, 1036], "satur": [72, 186, 311], "sauerbrei": 1014, "sauerkraut": 418, "saul": [692, 696, 1001, 1042, 1043, 1045], "saurabh": [1039, 1040, 1041, 1042, 1043, 1047], "sauvignon": 317, "saval": 1044, "savard": 1035, "save": [86, 102, 104, 250, 309, 377, 378, 382, 384, 385, 386, 392, 404, 414, 422, 470, 494, 537, 538, 630, 847, 848, 905, 1000, 1004, 1014, 1020, 1028, 1035, 1038, 1042, 1045, 1053], "savings_statu": 265, "savkomax": 1050, "saw": [121, 214, 217], "sawtooth": 121, "say_hello": 964, "sc": [372, 410], "scaja": 1052, "scala": 1024, "scalabl": [77, 79, 95, 183, 190, 245, 263, 325, 353, 378, 410, 417, 418, 450, 493, 505, 592, 643, 809, 820, 831, 833, 845, 868, 877, 879, 907, 909, 912, 913, 996, 999, 1001, 1004, 1017, 1019, 1025, 1028, 1035, 1038, 1039, 1045, 1046, 1049, 1050], "scalar": [2, 120, 323, 328, 384, 392, 406, 411, 420, 422, 466, 469, 527, 536, 618, 619, 620, 625, 626, 630, 631, 633, 741, 745, 929, 937, 996, 1008, 1010, 1014, 1018, 1023, 1045, 1046, 1049, 1051], "scalarmapp": 66, "scale": [2, 36, 43, 44, 51, 62, 64, 72, 75, 78, 80, 81, 89, 91, 94, 103, 104, 110, 113, 116, 122, 125, 144, 151, 168, 170, 171, 172, 175, 176, 177, 183, 187, 191, 194, 195, 200, 204, 213, 215, 217, 227, 228, 229, 231, 232, 235, 240, 246, 250, 261, 268, 271, 272, 273, 274, 278, 294, 296, 307, 308, 309, 310, 311, 315, 321, 324, 326, 327, 335, 336, 338, 341, 345, 361, 364, 365, 370, 371, 372, 375, 378, 383, 387, 390, 391, 392, 410, 411, 415, 417, 418, 419, 420, 448, 449, 452, 453, 459, 466, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 504, 513, 517, 518, 527, 537, 541, 543, 544, 550, 552, 553, 564, 565, 585, 593, 594, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 634, 635, 644, 647, 648, 649, 650, 652, 655, 661, 662, 663, 664, 665, 675, 677, 679, 680, 681, 684, 690, 691, 692, 693, 695, 697, 702, 706, 719, 744, 750, 760, 762, 772, 778, 780, 817, 820, 833, 834, 835, 847, 848, 849, 864, 865, 868, 871, 876, 877, 879, 882, 884, 885, 887, 892, 893, 894, 896, 897, 899, 900, 907, 908, 909, 910, 911, 912, 913, 978, 979, 980, 981, 984, 993, 996, 997, 1000, 1004, 1005, 1006, 1007, 1008, 1012, 1018, 1019, 1024, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scale_": [652, 876, 877, 885, 887, 897, 1014, 1040], "scaled_clf": 316, "scaled_pca": 316, "scaled_x_train": 316, "scaler": [45, 103, 105, 150, 166, 183, 229, 230, 245, 250, 252, 254, 285, 294, 299, 310, 315, 316, 325, 341, 344, 361, 383, 411, 414, 492, 661, 662, 675, 677, 690, 867, 876, 877, 879, 883, 884, 885, 887, 892, 893, 894, 895, 896, 897, 898, 1008, 1014, 1018, 1025, 1035, 1040, 1043, 1048], "scaler2": 254, "scalewai": 386, "scaling_": 553, "scalings_": [552, 553], "scanpi": 1052, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 82, 85, 89, 90, 91, 92, 93, 95, 100, 111, 116, 118, 122, 124, 125, 126, 128, 135, 136, 140, 142, 150, 152, 153, 155, 161, 163, 170, 171, 172, 174, 176, 177, 178, 179, 185, 186, 191, 194, 197, 203, 205, 209, 210, 211, 214, 215, 216, 222, 225, 226, 227, 230, 233, 234, 235, 236, 237, 238, 240, 245, 246, 248, 256, 257, 258, 259, 260, 261, 262, 266, 272, 274, 286, 291, 294, 297, 298, 299, 300, 301, 302, 303, 306, 311, 313, 314, 316, 324, 332, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 352, 357, 358, 359, 374, 412, 634, 704, 998, 1000], "scatter_": 704, "scatter_fig": 140, "scatter_kwarg": [43, 52, 107, 154, 186, 704], "scatter_trac": 140, "scatterplot": [115, 193, 271], "scatterpoint": [124, 128, 236, 258, 332], "scenario": [90, 102, 149, 170, 191, 217, 274, 361, 385, 396, 409, 414, 417, 540, 546, 548, 549, 998, 1004, 1014, 1045], "scene": [375, 386, 1007, 1009, 1048], "schapir": [50, 288, 304, 373, 417, 501, 556, 557], "schedul": [149, 307, 366, 382, 679, 680, 681, 864, 865, 1018, 1028, 1042], "scheidegg": 1035, "scheme": [280, 296, 317, 318, 373, 382, 392, 410, 414, 416, 418, 569, 593, 661, 662, 708, 816, 850, 874, 875, 878, 880, 884, 888, 891, 896, 907, 912, 993, 1000, 1014, 1018, 1035, 1043, 1046, 1047, 1052, 1053], "scherer": 1041, "scheubrein": 1047, "schloss": 1004, "schl\u00fcter": [1035, 1043], "schmerler": 1050, "schmid": [761, 762, 1002], "schmidt": [661, 1000, 1038], "schmitt": [1045, 1046], "schmitz": 1052, "schneider": [352, 1048, 1053], "schoelkopf": 903, "schoentgen": [1043, 1044], "schofield": 1035, "schole": 1047, "scholkopf1997": 415, "scholkopf1998": 1014, "scholz": 1053, "school": [102, 175, 186, 375, 410, 791, 1004], "schreiber": [0, 400, 1040, 1041, 1042], "schroeder": [45, 373], "schubert": [410, 421, 446, 452, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1053], "schucker": 1041, "schuder": [1043, 1044, 1045], "schuetz": [842, 846], "schuldt": 1039, "schult": 55, "schulz": 1035, "schumach": [1038, 1039, 1040], "schut": 1035, "schwardt": 1035, "schwartz": [1035, 1037, 1049], "schwetlick": [1046, 1047], "sch\u00f6lkopf": [44, 415, 538, 873, 1010, 1014, 1019], "sch\u00f6nberger": [1037, 1038], "sch\u00fctze": [415, 593, 1002, 1004, 1006], "sci": [57, 102, 352, 353, 354, 373, 390, 490, 692, 696, 878, 1001, 1014], "scibol": 1046, "scienc": [0, 73, 111, 168, 178, 186, 288, 372, 375, 390, 410, 442, 456, 541, 543, 550, 691, 692, 696, 854, 994, 996, 1000, 1001, 1004, 1007, 1016, 1024, 1028, 1043], "scientif": [0, 68, 245, 372, 376, 390, 396, 410, 454, 464, 504, 1028, 1030], "scientist": [994, 1028], "scikera": 1023, "scikit": [2, 15, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 366, 367, 370, 372, 373, 374, 375, 377, 378, 381, 384, 385, 386, 387, 391, 392, 397, 398, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 424, 425, 427, 428, 429, 430, 432, 433, 434, 440, 445, 448, 449, 452, 459, 466, 467, 469, 470, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 515, 518, 524, 527, 541, 544, 564, 565, 567, 568, 570, 579, 584, 585, 586, 592, 602, 605, 614, 629, 631, 633, 635, 637, 641, 643, 649, 651, 655, 661, 672, 683, 691, 700, 703, 704, 705, 720, 721, 735, 745, 751, 781, 782, 783, 791, 798, 802, 803, 804, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 826, 829, 830, 833, 835, 836, 849, 851, 867, 868, 870, 872, 874, 877, 879, 880, 881, 882, 886, 887, 888, 891, 904, 905, 907, 912, 915, 916, 923, 925, 945, 946, 956, 969, 970, 993, 994, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1019, 1020, 1022, 1025, 1027, 1030, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scikit_learn": 1023, "scikit_learn_data": [52, 373, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502], "scipi": [0, 2, 45, 53, 55, 57, 76, 80, 81, 86, 87, 109, 110, 113, 121, 123, 127, 145, 170, 186, 189, 199, 203, 257, 261, 262, 268, 271, 279, 283, 291, 296, 301, 309, 321, 322, 327, 328, 330, 331, 365, 372, 373, 376, 378, 380, 384, 386, 387, 390, 391, 392, 396, 403, 404, 406, 407, 410, 415, 418, 452, 453, 454, 455, 459, 464, 465, 499, 506, 511, 535, 537, 538, 544, 547, 584, 585, 588, 589, 591, 592, 613, 614, 651, 652, 656, 660, 661, 662, 666, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 683, 687, 690, 694, 695, 698, 722, 763, 766, 781, 782, 783, 784, 795, 796, 807, 815, 817, 833, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 870, 879, 880, 885, 886, 887, 890, 894, 897, 898, 907, 909, 910, 912, 913, 948, 952, 953, 958, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 993, 994, 1000, 1002, 1005, 1007, 1008, 1014, 1018, 1019, 1022, 1024, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "sckit": 1051, "scls19fr": 1040, "scognamiglio": 417, "scope": [45, 57, 265, 365, 367, 378, 390, 418, 1023, 1024], "score": [0, 2, 13, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 91, 93, 102, 103, 104, 105, 106, 107, 109, 113, 116, 127, 132, 134, 136, 142, 143, 144, 145, 146, 149, 150, 153, 154, 160, 163, 164, 165, 168, 181, 183, 185, 186, 187, 188, 189, 191, 198, 204, 205, 208, 213, 215, 219, 221, 229, 231, 240, 245, 246, 247, 250, 254, 260, 263, 265, 269, 271, 272, 273, 274, 275, 276, 279, 280, 282, 283, 284, 285, 286, 288, 290, 298, 299, 300, 306, 307, 308, 309, 313, 316, 317, 318, 320, 321, 322, 323, 327, 328, 330, 331, 333, 334, 341, 348, 352, 353, 356, 361, 373, 378, 380, 383, 391, 392, 404, 405, 406, 407, 408, 409, 411, 413, 415, 417, 419, 427, 429, 433, 439, 445, 449, 451, 454, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 505, 507, 535, 539, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 609, 612, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 701, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 739, 740, 741, 742, 743, 745, 758, 759, 760, 785, 786, 787, 788, 789, 790, 791, 792, 797, 798, 799, 800, 801, 802, 803, 806, 807, 809, 817, 822, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 856, 857, 858, 863, 864, 865, 867, 887, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 923, 925, 953, 993, 996, 1000, 1002, 1007, 1010, 1012, 1014, 1018, 1024, 1025, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 276, "score_estim": [213, 231], "score_full_data": 181, "score_func": [72, 103, 104, 419, 595, 598, 599, 601, 602, 603, 745, 1035, 1037, 1052], "score_iri": 277, "score_iterative_imput": 181, "score_label": [231, 277], "score_mean": 344, "score_nam": [62, 72, 246, 273, 326, 353, 809, 826], "score_param": [596, 597, 662, 1052], "score_rand": 277, "score_sampl": [260, 296, 297, 298, 304, 392, 416, 471, 535, 544, 566, 680, 800, 801, 803, 806, 807, 817, 852, 853, 863, 867, 911, 1010, 1038, 1043, 1045, 1047], "score_simple_imput": 181, "score_std": 344, "score_tim": [273, 414, 830, 831], "score_times_nb": 273, "score_times_svm": 273, "score_typ": [246, 273, 284, 326, 809, 826, 1051], "score_valu": 353, "scorer": [2, 149, 154, 231, 247, 265, 275, 327, 380, 392, 401, 409, 414, 417, 419, 564, 565, 597, 605, 637, 662, 676, 678, 714, 735, 736, 745, 803, 806, 807, 809, 817, 825, 826, 829, 830, 831, 832, 834, 961, 993, 1000, 1004, 1012, 1024, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scorer1_nam": 414, "scorer2_nam": 414, "scorer_": [803, 806, 807, 817], "scorer_nam": [275, 803, 817], "scores_": [193, 194, 595, 598, 599, 601, 602, 603, 647, 648, 662, 1035, 1045], "scores_df": 52, "scores_glm_pure_premium": 231, "scores_matrix": 282, "scores_max": 55, "scores_product_model": 231, "scores_std": 159, "scoring_cal": 714, "scoring_inner_cv": 327, "scoring_on_bootstrap": 274, "scoring_weight": 401, "scott": [416, 852, 1035, 1036, 1041, 1043, 1044, 1045, 1050, 1051], "scottlog": 1053, "scratch": [379, 444, 1004, 1037], "screen": [48, 1048], "screenporch": 143, "screenshot": 376, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 366, 378, 379, 380, 381, 382, 384, 390, 392, 396, 404, 418, 1024, 1027], "scroll": 398, "scrollbar": 383, "scrutin": 280, "scsi": 57, "scullei": 410, "sdenton4": 1038, "sdg_param": 334, "se": [168, 235, 375, 396], "seabold": [1038, 1040, 1041], "seaborn": [72, 126, 135, 149, 185, 186, 193, 198, 261, 271, 378, 396, 403, 1023], "seagreen": 207, "seal": 1041, "seamu": 1037, "sean": [1047, 1048, 1050], "seanpwilliam": 1042, "sear": 1041, "search": [2, 45, 52, 64, 80, 87, 103, 104, 105, 106, 146, 163, 165, 167, 168, 170, 183, 231, 246, 247, 261, 263, 265, 270, 272, 275, 276, 278, 283, 290, 291, 293, 295, 309, 313, 325, 341, 347, 352, 361, 375, 376, 378, 380, 390, 392, 405, 410, 411, 414, 417, 418, 419, 421, 445, 450, 452, 454, 459, 460, 463, 466, 473, 474, 480, 505, 518, 525, 560, 561, 562, 563, 567, 568, 569, 582, 602, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 631, 656, 679, 691, 692, 695, 696, 716, 731, 788, 791, 803, 806, 807, 814, 815, 817, 819, 833, 834, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 867, 912, 915, 916, 917, 918, 957, 991, 997, 999, 1001, 1004, 1007, 1008, 1018, 1020, 1024, 1025, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049, 1050, 1052], "search_05p": 146, "search_95p": 146, "search_cv": 103, "searchcv": [391, 1050], "searchforpass": 1051, "searchgrid": 1024, "searchsort": 50, "season": [43, 52, 175, 187, 214, 377], "seasonal_kernel": 175, "seasoncountcatu32": 52, "sebastian": [1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "sebastien": 1043, "sebastin": [1042, 1043], "sebasti\u00e1n": 1041, "seberg": 1036, "sec": [49, 221, 235, 238, 291], "sec65": 1050, "secant": 645, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 373, 380, 384, 392, 407, 409, 410, 414, 415, 417, 418, 420, 466, 469, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 507, 513, 556, 586, 591, 592, 593, 594, 624, 627, 634, 635, 702, 715, 719, 761, 762, 766, 767, 769, 770, 777, 778, 779, 780, 781, 784, 803, 806, 807, 817, 831, 837, 838, 841, 844, 855, 857, 858, 859, 864, 865, 993, 994, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1015, 1020, 1050], "secondari": [638, 1039], "secondli": [376, 390, 410, 417, 660, 1000], "sect": 44, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 120, 125, 137, 144, 149, 154, 159, 160, 161, 175, 179, 185, 186, 187, 189, 193, 198, 200, 202, 215, 237, 241, 247, 250, 252, 265, 269, 271, 274, 280, 316, 317, 318, 322, 352, 353, 354, 361, 371, 373, 376, 378, 379, 380, 382, 383, 384, 385, 386, 393, 401, 408, 409, 411, 413, 414, 415, 417, 418, 419, 420, 441, 445, 461, 537, 617, 622, 625, 640, 648, 791, 801, 909, 912, 993, 998, 1000, 1004, 1005, 1007, 1008, 1010, 1011, 1018, 1019, 1020, 1021, 1035, 1037, 1038, 1039, 1042], "sector": 186, "sector_construct": 186, "sector_manufactur": 186, "sector_oth": 186, "secur": [382, 392, 1023, 1024, 1028, 1030], "sed": [382, 1035], "sedamaki": 1049, "sedykh": 1050, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 82, 83, 86, 88, 90, 91, 95, 97, 98, 100, 101, 111, 116, 120, 125, 126, 130, 134, 135, 136, 137, 140, 141, 142, 143, 145, 146, 147, 149, 151, 154, 159, 164, 165, 166, 168, 170, 175, 176, 177, 181, 183, 186, 187, 189, 191, 193, 194, 195, 198, 204, 214, 215, 216, 217, 219, 230, 231, 233, 235, 242, 244, 247, 250, 251, 252, 254, 257, 258, 259, 264, 265, 266, 268, 270, 271, 272, 273, 274, 276, 278, 280, 281, 282, 285, 286, 288, 291, 297, 298, 300, 304, 311, 317, 318, 320, 321, 322, 323, 324, 325, 326, 332, 341, 345, 348, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 367, 370, 371, 372, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 390, 391, 392, 398, 404, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 490, 493, 495, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 613, 614, 617, 622, 625, 626, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 708, 709, 711, 714, 716, 746, 766, 777, 781, 782, 783, 784, 791, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 950, 951, 972, 974, 977, 987, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "seed": [2, 46, 50, 63, 64, 70, 74, 75, 79, 85, 87, 90, 92, 93, 97, 98, 103, 109, 110, 111, 118, 121, 137, 142, 161, 163, 188, 203, 208, 211, 216, 219, 222, 226, 230, 236, 257, 259, 260, 261, 262, 274, 277, 286, 296, 297, 298, 345, 346, 350, 353, 361, 366, 380, 387, 390, 392, 410, 414, 415, 445, 449, 450, 452, 454, 459, 461, 462, 463, 464, 473, 474, 475, 539, 547, 556, 557, 558, 559, 562, 563, 630, 649, 650, 655, 656, 663, 664, 665, 666, 680, 692, 694, 696, 698, 800, 801, 807, 838, 841, 856, 910, 936, 950, 951, 968, 972, 993, 994, 999, 1001, 1039, 1040, 1044, 1045, 1051], "seeger": [642, 996], "seek": [233, 235, 237, 377, 378, 390, 393, 511, 512, 1001], "seel": 1049, "seem": [43, 48, 52, 80, 88, 146, 149, 176, 187, 213, 237, 240, 272, 288, 307, 315, 348, 352, 353, 377, 378, 383, 409, 414, 504, 1000, 1004], "seemingli": [231, 361, 390], "seen": [55, 62, 75, 88, 99, 113, 123, 129, 141, 146, 149, 186, 187, 209, 237, 243, 247, 307, 311, 341, 352, 373, 380, 382, 391, 392, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 426, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 524, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 626, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 978, 984, 993, 999, 1004, 1007, 1008, 1014, 1020, 1028, 1047, 1048, 1049, 1050, 1051, 1052], "segfault": [366, 379, 1035, 1043, 1048], "segment": [51, 53, 55, 59, 71, 81, 86, 123, 183, 236, 243, 373, 386, 410, 418, 454, 464, 511, 512, 694, 863, 1004, 1025, 1028, 1043, 1045, 1047], "seguin": 1040, "sei": 418, "seismic_r": [193, 198], "sejourn": 1044, "sel": [401, 419], "seladu": 1051, "seldom": 907, "sele": [1049, 1050], "selecci\u00f3n": 317, "select": [2, 18, 29, 43, 46, 48, 49, 52, 58, 70, 71, 79, 84, 88, 90, 95, 101, 103, 106, 113, 118, 119, 120, 129, 130, 134, 136, 143, 146, 149, 154, 163, 165, 175, 177, 186, 187, 189, 191, 192, 194, 196, 198, 199, 201, 212, 217, 221, 228, 231, 234, 240, 244, 246, 250, 255, 256, 257, 258, 265, 269, 270, 271, 272, 276, 284, 285, 295, 311, 316, 317, 322, 326, 328, 330, 331, 334, 336, 341, 348, 352, 353, 354, 361, 365, 373, 375, 376, 378, 380, 382, 386, 391, 392, 407, 410, 411, 412, 415, 417, 418, 420, 445, 447, 448, 449, 451, 453, 455, 460, 461, 462, 466, 468, 469, 474, 475, 478, 490, 491, 495, 496, 499, 500, 503, 504, 505, 507, 515, 518, 535, 537, 538, 543, 544, 547, 552, 554, 561, 562, 563, 566, 568, 584, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 630, 634, 635, 648, 649, 650, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 674, 676, 679, 681, 685, 686, 694, 695, 700, 715, 719, 721, 757, 791, 795, 796, 800, 801, 803, 806, 807, 808, 809, 817, 829, 830, 831, 833, 835, 849, 850, 851, 853, 855, 857, 858, 859, 867, 868, 872, 877, 883, 887, 904, 907, 908, 912, 915, 916, 917, 918, 929, 972, 973, 998, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "select__k": 993, "select_dtyp": [107, 143, 325, 468], "selected_featur": 189, "selected_features_nam": 189, "selectfdr": [2, 419, 595, 599, 601, 602, 603, 609, 1039, 1041, 1042, 1051], "selectfpr": [2, 378, 419, 595, 598, 601, 602, 603, 609, 1051], "selectfrommodel": [2, 168, 392, 401, 596, 605, 606, 1026, 1030, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1052], "selectfw": [2, 419, 595, 598, 599, 602, 603, 609, 1051], "selectkbest": [2, 104, 106, 164, 165, 324, 361, 378, 401, 411, 419, 584, 595, 598, 599, 601, 603, 609, 993, 1036, 1041, 1051, 1052], "selectkbestselectkbest": [165, 324], "selector": [2, 52, 103, 164, 165, 250, 348, 386, 418, 419, 468, 584, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1037, 1045, 1047, 1051], "selectormixin": [2, 1046], "selectpercentil": [2, 87, 103, 254, 344, 419, 595, 598, 599, 601, 602, 606, 609, 1036, 1041, 1051, 1052], "selectpercentileselectpercentil": [103, 254], "self": [2, 47, 57, 62, 64, 89, 98, 118, 132, 178, 183, 189, 247, 285, 291, 329, 335, 341, 352, 372, 378, 379, 380, 383, 384, 385, 386, 410, 418, 420, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 503, 511, 512, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 706, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 822, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 956, 960, 961, 963, 964, 969, 977, 992, 1007, 1024, 1025, 1026, 1028, 1030, 1037, 1042, 1049], "self_request": 247, "self_training_clf": 333, "self_training_model": [322, 904], "selftrain": 334, "selftrainingclassifi": [2, 322, 333, 334, 335, 401, 1017, 1047, 1052], "selftrainingclassifierifittedselftrainingclassifi": 322, "seljak": 1050, "sell": 107, "selvan": 1047, "semant": [54, 352, 353, 392, 547, 1029, 1030, 1037], "semi": [2, 38, 57, 67, 115, 152, 161, 172, 245, 248, 313, 322, 337, 338, 341, 345, 354, 373, 392, 490, 507, 538, 591, 593, 679, 732, 833, 867, 871, 902, 903, 904, 912, 1002, 1007, 1010, 1025, 1026, 1030, 1035, 1047, 1050], "semi_supervis": [2, 183, 322, 324, 329, 330, 331, 332, 333, 334, 335, 401, 902, 903, 904, 1005, 1017, 1025, 1036, 1041, 1042, 1049, 1050], "semiconductor": 1028, "semidefinit": [179, 1014, 1019], "semilogi": [201, 244], "semilogx": [159, 201, 202], "semin": 417, "seminar": 1004, "semisupervis": [330, 392], "sen": [2, 183, 192, 216, 219, 311, 652, 660, 674, 681, 682, 1025], "send": [378, 382, 393, 410, 422, 536], "sender": [352, 373], "sendyk": 1044, "seng": 1047, "senger": [0, 1051, 1052, 1053], "senior": [1014, 1028], "sens": [42, 43, 52, 55, 62, 88, 99, 176, 183, 186, 191, 244, 311, 317, 331, 341, 352, 361, 365, 378, 379, 392, 410, 412, 414, 419, 464, 471, 472, 473, 474, 475, 476, 477, 478, 655, 658, 659, 675, 804, 814, 904, 998, 1000, 1007, 1008, 1010, 1014, 1017, 1025], "sensibl": [85, 181, 284, 288, 353, 380, 1000, 1014], "sensit": [43, 79, 88, 111, 112, 137, 146, 183, 187, 215, 216, 217, 240, 241, 250, 263, 275, 278, 285, 311, 328, 341, 366, 367, 393, 409, 412, 417, 454, 464, 499, 554, 564, 661, 695, 703, 705, 715, 716, 721, 745, 787, 790, 791, 802, 803, 825, 833, 868, 887, 905, 999, 1000, 1001, 1003, 1004, 1008, 1010, 1018, 1019, 1025, 1039, 1053], "sensor": 198, "sent": [149, 410, 836, 1020], "sentenc": [102, 352, 354, 373, 393, 418], "seoeun": 1051, "sep": [118, 280], "sepal": [126, 128, 130, 142, 172, 197, 254, 294, 322, 325, 338, 375, 1014], "sepal_col": 325, "separ": [52, 53, 61, 62, 66, 67, 75, 88, 93, 95, 99, 105, 111, 119, 120, 122, 125, 134, 136, 139, 152, 168, 173, 182, 183, 187, 188, 191, 192, 212, 214, 234, 248, 258, 271, 274, 280, 281, 311, 313, 316, 322, 333, 336, 337, 339, 340, 341, 345, 346, 352, 361, 365, 374, 375, 380, 383, 386, 390, 392, 404, 408, 410, 411, 412, 415, 417, 418, 420, 466, 515, 522, 536, 541, 543, 544, 550, 552, 584, 591, 592, 594, 613, 634, 641, 649, 650, 676, 679, 680, 693, 697, 728, 735, 748, 749, 751, 756, 795, 822, 839, 840, 866, 867, 909, 911, 912, 917, 918, 993, 994, 996, 998, 1000, 1001, 1003, 1010, 1011, 1014, 1018, 1019, 1025, 1035, 1038, 1040, 1041, 1045, 1047, 1048, 1051, 1052], "seper": 556, "septemb": [737, 1004, 1035, 1038, 1041, 1043, 1048, 1051, 1053], "seq": 636, "seq_dataset": [1035, 1045], "seqlearn": 390, "sequenc": [2, 51, 134, 142, 200, 236, 380, 392, 411, 414, 415, 417, 418, 506, 515, 556, 557, 564, 565, 572, 573, 584, 585, 591, 592, 594, 649, 803, 806, 814, 833, 867, 891, 954, 955, 966, 974, 977, 1035, 1038, 1040, 1041], "sequencekernel": 178, "sequenti": [2, 52, 142, 162, 165, 183, 207, 272, 322, 376, 415, 417, 418, 503, 504, 537, 596, 600, 605, 606, 608, 609, 649, 650, 655, 656, 661, 663, 664, 665, 666, 676, 791, 867, 868, 887, 994, 1012, 1018, 1025, 1026, 1030, 1035, 1044, 1047], "sequentialfeatureselector": [2, 168, 401, 419, 596, 600, 606, 1047, 1048, 1049, 1050, 1051], "sergei": [410, 1037, 1041, 1042, 1043, 1044, 1045], "sergeyf": 1037, "sergio": [1035, 1037, 1038, 1047, 1050], "sergiodsr": 1046, "sergul": [1042, 1043, 1046], "seri": [2, 42, 43, 51, 58, 113, 141, 146, 149, 183, 185, 188, 189, 196, 213, 215, 217, 233, 254, 276, 285, 318, 324, 330, 370, 373, 383, 392, 410, 491, 492, 493, 494, 495, 499, 503, 504, 505, 507, 508, 513, 544, 565, 693, 697, 704, 745, 748, 749, 751, 793, 824, 829, 830, 833, 929, 995, 1000, 1001, 1005, 1007, 1018, 1023, 1025, 1038, 1041, 1042, 1043, 1047, 1050, 1052, 1053], "serial": [392, 404, 424, 959, 1023, 1024, 1035, 1043, 1047, 1052], "serializetostr": 404, "serious": 1006, "serum": [168, 375], "serv": [102, 124, 134, 176, 265, 274, 345, 411, 554, 996, 1030, 1049], "server": [0, 168, 365, 375, 376, 378, 499, 1027, 1043], "servic": [0, 43, 241, 250, 378, 382, 404, 1028, 1043], "sess": 404, "session": [380, 384, 390, 396, 1022, 1028], "set": [2, 3, 8, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 82, 83, 86, 87, 88, 90, 91, 93, 95, 97, 98, 99, 102, 103, 105, 111, 112, 113, 116, 120, 125, 126, 132, 134, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 156, 159, 164, 165, 168, 170, 176, 177, 178, 183, 185, 186, 187, 188, 189, 193, 198, 200, 201, 202, 204, 206, 208, 209, 212, 213, 214, 215, 218, 221, 226, 227, 231, 233, 234, 235, 240, 241, 242, 243, 245, 246, 247, 250, 254, 256, 258, 260, 261, 264, 266, 269, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 284, 286, 288, 290, 293, 297, 298, 299, 300, 301, 304, 307, 308, 309, 311, 313, 315, 316, 317, 318, 320, 322, 323, 327, 330, 331, 334, 335, 338, 340, 343, 345, 348, 352, 353, 354, 358, 359, 360, 361, 365, 366, 367, 370, 371, 373, 375, 376, 378, 380, 382, 383, 385, 386, 391, 392, 393, 396, 401, 404, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 427, 434, 435, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 490, 491, 496, 498, 499, 500, 502, 505, 506, 511, 512, 513, 518, 526, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 700, 701, 702, 703, 704, 705, 706, 714, 716, 717, 719, 722, 724, 726, 729, 730, 731, 732, 733, 734, 737, 741, 743, 748, 749, 751, 753, 754, 756, 759, 782, 783, 785, 786, 787, 788, 790, 792, 793, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 933, 934, 940, 945, 946, 951, 955, 959, 960, 972, 973, 974, 977, 978, 984, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "set1": [271, 300, 301], "set_": [247, 401, 1053], "set_alpha": [70, 256, 257, 258, 261, 262], "set_arrai": [51, 236, 243], "set_aspect": [43, 122, 173, 224, 258, 349], "set_autoscaley_on": 77, "set_axis_bgcolor": 113, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 295, "set_clip_box": [70, 256, 257, 258, 261, 262], "set_color": [46, 224], "set_config": [2, 247, 252, 254, 265, 318, 321, 327, 365, 366, 401, 411, 439, 445, 446, 449, 451, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 596, 597, 600, 605, 613, 614, 629, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1044, 1046, 1049, 1051], "set_constrained_layout_pad": 120, "set_edgecolor": 120, "set_facecolor": [113, 256], "set_fit_request": [247, 327, 401, 439, 445, 446, 449, 451, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 591, 594, 638, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 693, 839, 840, 842, 843, 844, 845, 846, 852, 872, 873, 886, 887, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918], "set_fmt_str_length": 52, "set_i": 90, "set_index": [62, 134, 146, 202, 231, 271, 317, 353], "set_inverse_transform_request": [536, 584, 874, 887], "set_label": [75, 173, 244], "set_label_posit": 46, "set_linewidth": [51, 236, 243], "set_major_formatt": [233, 235, 238, 291, 296], "set_major_loc": [233, 296], "set_output": [183, 187, 239, 252, 316, 317, 381, 390, 434, 444, 445, 447, 449, 451, 466, 470, 484, 485, 486, 487, 499, 507, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 569, 570, 571, 572, 573, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 661, 691, 692, 695, 833, 851, 856, 859, 863, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 1025, 1050, 1051, 1052], "set_param": [123, 130, 138, 143, 146, 187, 188, 194, 200, 202, 206, 217, 221, 245, 250, 254, 265, 284, 294, 320, 344, 353, 381, 392, 410, 411, 417, 420, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 994, 1010, 1035, 1041, 1042, 1043, 1048, 1049], "set_partial_fit_request": [451, 537, 669, 670, 671, 679, 680, 681, 835, 836, 839, 840, 842, 843, 844, 845, 846, 864, 887], "set_path_effect": 75, "set_posit": [100, 224, 311], "set_predict_proba_request": [915, 917], "set_predict_request": [247, 484, 485, 486, 555, 614, 638, 647, 648, 915, 916, 917, 918], "set_printopt": 264, "set_prop_cycl": 214, "set_score_request": [247, 265, 327, 401, 439, 445, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 802, 825, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 857, 858, 864, 865, 867, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 1004], "set_siz": 298, "set_size_inch": [93, 159, 251], "set_split_request": [804, 805, 810, 812, 821], "set_start_method": 390, "set_stat": 993, "set_tick_param": 256, "set_ticklabel": [126, 210, 352], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 86, 88, 90, 93, 97, 98, 104, 107, 111, 118, 125, 130, 134, 139, 141, 144, 150, 152, 154, 155, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 202, 204, 211, 213, 214, 215, 221, 233, 234, 237, 238, 243, 245, 246, 250, 251, 256, 264, 265, 266, 267, 268, 271, 273, 274, 278, 282, 283, 285, 288, 290, 291, 294, 295, 296, 301, 306, 307, 311, 312, 313, 314, 315, 316, 320, 324, 330, 331, 338, 345, 348, 349, 350, 352, 356, 374], "set_transform_request": [247, 484, 485, 486, 536, 585, 591, 593, 594, 638, 870, 873, 879, 887], "set_vis": [54, 70, 295, 301, 311], "set_xlabel": [46, 49, 86, 93, 104, 105, 107, 118, 125, 144, 179, 181, 182, 185, 187, 188, 189, 191, 202, 208, 210, 211, 213, 215, 228, 229, 245, 265, 271, 273, 277, 282, 283, 285, 288, 296, 311, 312, 316, 333, 353, 354, 356], "set_xlim": [67, 77, 93, 107, 111, 118, 139, 152, 182, 187, 211, 213, 218, 245, 256, 275, 277, 288, 296, 306, 311, 313, 314, 315, 316, 321, 327, 349], "set_xscal": [202, 218], "set_xtick": [43, 47, 49, 67, 78, 93, 97, 130, 152, 156, 187, 189, 204, 229, 245, 256, 282, 283, 290, 306, 308, 313, 314, 338], "set_xticklabel": [47, 49, 111, 130, 156, 173, 187, 189, 282, 283, 290], "set_ylabel": [46, 47, 49, 66, 70, 86, 93, 98, 104, 105, 107, 111, 118, 125, 130, 134, 141, 144, 179, 187, 191, 202, 204, 208, 210, 211, 213, 215, 217, 228, 245, 256, 265, 271, 273, 277, 282, 283, 285, 290, 296, 311, 312, 316, 320, 333, 348, 353, 356], "set_ylim": [47, 49, 67, 77, 93, 104, 118, 139, 151, 152, 179, 187, 194, 211, 213, 214, 245, 256, 275, 290, 296, 306, 311, 313, 314, 316, 321, 327, 333, 349], "set_yscal": [144, 213], "set_ytick": [43, 67, 78, 93, 97, 130, 152, 181, 182, 189, 204, 229, 256, 282, 306, 308, 313, 314, 338, 354], "set_yticklabel": [130, 173, 181, 182, 189, 282, 354], "set_zlabel": 210, "set_zord": 122, "setattr": 380, "setdefault": [55, 922], "setdiff1d": 347, "seth": 1041, "sethdandridg": 1039, "setminu": 1020, "setosa": [126, 128, 280, 281, 375, 507], "setp": [47, 49, 282, 286], "settabl": 1004, "settingwithcopywarn": 187, "setup": [278, 280, 365, 376, 380, 384, 386, 1007], "setuptool": 1053, "seuclidean": [452, 459, 702, 781, 782, 783, 1007, 1043, 1046, 1047], "seuclideandist": 702, "seung": 415, "seven": [373, 997], "seventh": [514, 1016], "sever": [0, 43, 48, 51, 52, 62, 64, 67, 70, 72, 88, 89, 90, 94, 106, 137, 149, 152, 154, 157, 165, 168, 170, 175, 176, 183, 186, 191, 198, 202, 213, 217, 232, 233, 236, 237, 238, 244, 258, 266, 271, 276, 285, 291, 293, 307, 311, 323, 348, 352, 353, 365, 372, 373, 375, 378, 380, 383, 386, 390, 392, 407, 410, 411, 414, 416, 417, 418, 420, 449, 451, 466, 489, 502, 511, 512, 541, 558, 559, 562, 563, 566, 567, 568, 573, 591, 592, 594, 613, 648, 649, 655, 691, 692, 693, 694, 695, 696, 800, 801, 803, 806, 807, 817, 835, 836, 842, 843, 844, 845, 846, 866, 867, 874, 891, 915, 916, 917, 918, 936, 993, 996, 1001, 1004, 1005, 1007, 1012, 1014, 1018, 1020, 1021, 1022, 1023, 1025, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1051, 1052], "sevin": 1043, "sewook": 1045, "sex": [103, 168, 186, 188, 200, 202, 254, 325, 327, 375, 499, 1012], "sex_mal": 186, "seyedsaman": 1049, "sf": [168, 271, 322, 373, 419, 495, 605], "sfm": 168, "sfs_backward": 168, "sfs_forward": 168, "sfu": [410, 444], "sgd": [2, 46, 47, 50, 124, 129, 136, 145, 146, 155, 173, 174, 183, 192, 195, 204, 205, 220, 227, 240, 247, 260, 279, 304, 307, 308, 323, 342, 343, 346, 350, 352, 357, 361, 367, 507, 515, 634, 652, 669, 670, 671, 674, 679, 680, 681, 682, 864, 865, 993, 1008, 1025, 1026, 1030, 1035, 1038, 1039, 1040, 1042, 1046, 1048], "sgdclassifi": [2, 25, 46, 47, 220, 221, 222, 223, 224, 225, 226, 245, 279, 334, 343, 352, 361, 365, 367, 384, 392, 408, 418, 641, 643, 644, 645, 649, 661, 669, 671, 907, 912, 996, 1000, 1005, 1018, 1019, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "sgdoneclasssvm": [2, 227, 240, 323, 911, 1010, 1018, 1048, 1050, 1051, 1052, 1053], "sgdregressor": [2, 25, 49, 224, 365, 367, 390, 649, 652, 670, 674, 679, 682, 865, 908, 913, 1000, 1018, 1037, 1039, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1053], "sgi": 352, "sgkf": [414, 821], "sgm": 47, "sgml": [47, 365], "sh": [282, 386, 993], "sh_color": 237, "sh_err": 237, "sh_lle": 237, "sh_point": 237, "sh_tsne": 237, "sha256": [47, 52, 494, 1050], "shack": [1045, 1046, 1047], "shade": [58, 86, 166, 197, 294, 299, 337, 415], "shader": 406, "shadi": [1050, 1051], "shadow": [124, 128, 129, 236, 332, 347, 354, 418], "shafer": 102, "shagun": 1041, "shah": [1039, 1040, 1041, 1047, 1053], "shaharyar": 1053, "shahebaz": 1043, "shahriar": 1037, "shaikh": [0, 363, 368, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1053], "shail": 1047, "shakerimoff": 1049, "shalev": [669, 670, 1000, 1018], "shalil": 1043, "shall": 175, "shallow": [384, 417, 564, 565, 922], "shamsi": 1043, "shandeng123": 1049, "shane": [1044, 1047, 1050], "shanghai": [692, 696, 1001], "shangwu": [1043, 1044], "shankar": 1045, "shanmuga": 1041, "shanno": 1000, "shannon": [560, 567, 915, 917, 1001, 1020], "shantanu": 786, "shao": [1047, 1048, 1049], "shape": [2, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 76, 80, 81, 84, 85, 86, 87, 88, 91, 93, 94, 99, 102, 106, 107, 111, 120, 121, 123, 135, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 161, 164, 166, 171, 172, 174, 175, 176, 177, 181, 182, 183, 187, 188, 200, 202, 213, 215, 220, 222, 225, 226, 227, 228, 229, 232, 234, 235, 236, 240, 243, 244, 245, 246, 247, 249, 250, 256, 258, 260, 261, 262, 269, 271, 273, 274, 277, 278, 280, 281, 291, 296, 297, 301, 304, 306, 308, 313, 314, 320, 322, 325, 326, 327, 332, 333, 335, 338, 341, 344, 345, 346, 349, 350, 352, 353, 360, 365, 371, 372, 373, 378, 380, 392, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 930, 935, 938, 939, 945, 949, 951, 953, 957, 958, 965, 967, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 992, 994, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1025, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1051, 1052], "shape_fit_": [909, 910, 911, 912, 913], "shape_img": 588, "sharad": 1043, "sharan": [1042, 1043], "share": [70, 115, 152, 186, 261, 352, 360, 361, 365, 366, 380, 386, 404, 410, 415, 418, 552, 671, 707, 711, 800, 801, 806, 807, 998, 1011, 1027, 1035, 1037, 1043, 1045, 1047, 1050], "shared_yax": 140, "sharedmem": 1043, "sharei": [43, 52, 70, 107, 118, 125, 130, 155, 179, 187, 213, 215, 221, 273, 282, 284, 285, 296, 312, 317, 347, 348, 353, 374], "sharex": [43, 46, 54, 70, 105, 118, 125, 155, 179, 187, 215, 273, 284, 285, 296, 333, 374], "sharma": [1039, 1041, 1043, 1044, 1046, 1047, 1049, 1052, 1053], "sharmadharmp": 1049, "sharon": [45, 373], "sharova": 1042, "sharp": [43, 187, 1011, 1014], "sharper": 729, "shashank": [1041, 1047], "shaun": 1036, "shawpan": 1041, "shaymernaturalint": 1049, "she": [378, 897, 898, 1045], "shea": [1043, 1044], "shebanov": [1043, 1044], "sheep": 1028, "sheer": [378, 1028], "sheerman": 1035, "sheet": 1037, "sheetscikit": 398, "shekhar": 1041, "shell": [379, 386, 390], "shellyfung": 1050, "shen": 1048, "sheng": 1045, "shengxiduan": 1041, "shenhanc78": 1043, "sheni": 1047, "shenk": 1043, "shenoi": 1042, "sherlock": [631, 994], "sheth": 1043, "shetti": 1048, "shi": [410, 454, 464, 694], "shibata": 1045, "shiebler": 1041, "shield": 392, "shift": [2, 52, 71, 73, 79, 82, 97, 183, 193, 236, 261, 296, 309, 311, 345, 412, 416, 442, 450, 460, 463, 471, 515, 518, 692, 696, 853, 876, 1014, 1025, 1029, 1030, 1035, 1039, 1043], "shifted_gaussian": 260, "shifted_opposite_lof_scor": 853, "shih": [844, 1006], "shiki": 1046, "shilt": 1038, "shinehid": 1048, "shinitski": 1052, "shinnar": 1048, "shinsuk": 1050, "ship": [57, 154, 182, 357, 366, 376, 396, 418, 1000, 1035, 1044], "shiqiao": [0, 400, 1035, 1036], "shirsat": 1050, "shiva": [1050, 1051], "shivam": [1043, 1044, 1045], "shivamgargsya": [1042, 1046, 1048], "shivan": 1040, "shivram": 1043, "shiyu": 1044, "shleifer": [1041, 1042], "shmelkov": 1040, "shoaib": 1050, "shoemak": 1046, "shogo": [1050, 1051], "shooter23": [1047, 1048], "shop": 1028, "short": [44, 126, 143, 150, 204, 269, 308, 352, 378, 386, 414, 418, 422, 1000, 1001, 1007, 1027, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "short_nam": 55, "shortcom": 1000, "shortcut": [386, 404, 420], "shorten": [378, 1019, 1048], "shorten_param": 272, "shorter": [43, 176, 259, 390, 410, 415, 452, 459, 566, 700, 1006, 1010, 1046], "shortest": [2, 74, 383, 387, 691, 957, 1001, 1048], "shortest_path": 1048, "shorthand": [91, 392, 411, 469, 564, 565, 868, 869, 1038], "shortlog": 382, "shortname_slic": 55, "shota": 1041, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 64, 67, 72, 86, 132, 134, 137, 140, 143, 146, 149, 168, 181, 186, 191, 193, 194, 198, 213, 231, 240, 245, 246, 247, 250, 265, 271, 274, 277, 278, 280, 285, 288, 291, 312, 313, 318, 332, 341, 348, 353, 361, 365, 366, 367, 373, 376, 377, 378, 380, 382, 383, 385, 386, 387, 391, 392, 396, 401, 404, 406, 408, 409, 410, 412, 414, 415, 417, 418, 419, 420, 421, 422, 424, 427, 433, 439, 442, 444, 445, 446, 447, 449, 451, 452, 454, 456, 459, 460, 461, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 499, 506, 511, 512, 519, 524, 526, 527, 530, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 596, 597, 600, 605, 610, 611, 613, 614, 623, 630, 631, 632, 634, 635, 636, 638, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 690, 692, 693, 694, 695, 696, 697, 698, 699, 704, 712, 730, 731, 745, 769, 774, 777, 781, 782, 783, 784, 785, 788, 791, 792, 795, 802, 804, 805, 810, 811, 812, 813, 820, 821, 822, 823, 825, 829, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 886, 887, 888, 890, 894, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 933, 937, 939, 943, 951, 956, 960, 964, 969, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 992, 993, 994, 998, 999, 1000, 1001, 1004, 1005, 1007, 1009, 1010, 1011, 1014, 1017, 1018, 1019, 1020, 1024, 1027, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "shouldn": [257, 262, 378], "show": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 356, 357, 358, 359, 360, 366, 367, 374, 378, 384, 390, 391, 396, 397, 401, 407, 408, 409, 412, 414, 415, 416, 417, 419, 420, 440, 505, 562, 596, 597, 634, 635, 700, 701, 703, 704, 705, 716, 809, 826, 849, 867, 919, 920, 921, 993, 996, 998, 999, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019, 1024, 1037, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "show_top10": 373, "show_vers": [2, 365, 376, 378, 386, 396, 397, 1043], "show_weight": 920, "show_with_diff": 123, "showcas": [132, 135, 140, 143, 146, 147, 149, 183, 380], "shown": [62, 90, 132, 136, 140, 146, 179, 185, 187, 198, 203, 211, 231, 238, 240, 245, 250, 258, 271, 274, 277, 280, 288, 296, 307, 308, 311, 312, 313, 330, 348, 352, 353, 378, 383, 393, 408, 410, 411, 414, 415, 416, 418, 420, 440, 462, 635, 701, 703, 704, 705, 716, 803, 817, 919, 921, 1000, 1001, 1004, 1007, 1014, 1018, 1019, 1020, 1039, 1044, 1045, 1046, 1049], "shown_imag": 234, "shrankhla": 1050, "shreesha": [1051, 1052], "shreya": 1045, "shrink": [63, 113, 120, 147, 187, 198, 208, 211, 217, 233, 260, 284, 311, 348, 415, 562, 563, 679, 681, 854, 864, 865, 909, 910, 911, 912, 913, 1007, 1019], "shrink_threshold": [302, 854, 1007, 1035, 1047], "shrinkag": [2, 69, 108, 110, 113, 127, 148, 183, 302, 423, 471, 472, 475, 476, 477, 478, 479, 481, 482, 483, 542, 546, 552, 564, 565, 803, 1000, 1014, 1025, 1026, 1030, 1035, 1039, 1040, 1042], "shrinkage_": [109, 110, 475, 477], "shrinkage_coeffici": 482, "shroff": 1053, "shrunk": [2, 109, 127, 311, 318, 326, 423, 475, 477, 478, 481, 482, 483, 552, 888, 998, 1018, 1029, 1030], "shrunk_cov": [423, 481, 483], "shrunk_cov_scor": 127, "shrunk_covari": [2, 412, 1052], "shrunkcovari": [2, 109, 127, 412, 471, 472, 475, 476, 477], "shrunken": [854, 1035], "shu": [1036, 1039, 1043], "shuangchi": [1049, 1050], "shubernetskii": 1037, "shubh": 1046, "shubhal": 1052, "shubham": [1042, 1045, 1053], "shubhanshu": 1047, "shubhraneel": 1049, "shuckle16": 1041, "shuffl": [2, 49, 52, 54, 58, 59, 61, 64, 68, 93, 94, 120, 140, 141, 142, 149, 154, 182, 198, 221, 222, 227, 240, 272, 276, 277, 284, 291, 318, 330, 331, 332, 333, 343, 352, 353, 361, 373, 387, 392, 405, 471, 476, 490, 491, 493, 495, 498, 500, 506, 514, 515, 516, 517, 518, 522, 525, 527, 534, 540, 542, 543, 549, 550, 556, 557, 558, 559, 567, 568, 570, 571, 605, 608, 610, 661, 662, 669, 670, 671, 675, 677, 679, 680, 681, 690, 803, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 864, 865, 888, 907, 908, 909, 912, 950, 951, 972, 974, 999, 1000, 1005, 1012, 1018, 1019, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "shuffle_param": 348, "shuffled_arrai": 977, "shufflesplit": [2, 266, 273, 348, 414, 805, 811, 813, 823, 833, 1035, 1036, 1038, 1040, 1041], "shuhei": 1048, "shuhua": 1047, "shutil": [87, 104, 411], "shuttl": 353, "shuzh": 1045, "shwartz": [669, 670, 1000, 1018], "shwed": 1043, "shyam": 1048, "si": 102, "siam": [410, 414, 454, 462, 464, 538, 544], "siang": 1038, "siavash": 1048, "siavrez": 1049, "sibsp": [188, 325], "sid": 1042, "siddharth": [1042, 1046], "siddiqui": 1053, "side": [43, 64, 92, 146, 206, 217, 231, 235, 243, 265, 311, 345, 352, 361, 373, 390, 408, 411, 414, 415, 418, 427, 433, 518, 803, 817, 1000, 1001, 1004, 1006, 1019, 1044], "sidebar": 378, "sidhpura": 1050, "siebert": 1043, "sierra": [534, 540], "sievert": 1045, "siftikha": 1043, "sig": 121, "sigh": 352, "sigkdd": [372, 373, 514, 679, 888, 1014, 1016], "sigma": [53, 80, 81, 87, 111, 127, 146, 269, 271, 407, 412, 415, 417, 617, 652, 998, 1000, 1002, 1006, 1009], "sigma2": [537, 544], "sigma_": [412, 647, 648, 1048, 1052], "sigma_0": [173, 174, 179, 420, 617], "sigma_0_bound": [179, 617], "sigma_i": [1006, 1014], "sigma_k": [415, 998], "sigmod": [410, 452, 459, 853, 1010], "sigmoid": [2, 61, 62, 63, 64, 370, 417, 439, 454, 538, 564, 623, 642, 646, 768, 777, 780, 864, 865, 909, 910, 911, 912, 913, 1009, 1019, 1030, 1048, 1052], "sigmoid_kernel": [2, 406, 768, 1002], "sign": [75, 110, 116, 121, 124, 136, 198, 261, 306, 348, 378, 410, 415, 418, 547, 585, 592, 609, 638, 639, 661, 662, 669, 671, 677, 678, 679, 680, 738, 745, 907, 911, 949, 951, 968, 1000, 1004, 1009, 1014, 1018, 1019, 1035, 1039, 1044, 1048, 1050, 1053], "signal": [2, 11, 53, 112, 120, 121, 122, 129, 144, 146, 170, 175, 176, 183, 192, 193, 199, 200, 201, 202, 207, 212, 214, 262, 284, 323, 410, 412, 418, 419, 420, 423, 477, 506, 524, 529, 534, 537, 540, 544, 548, 549, 628, 647, 648, 649, 650, 655, 656, 666, 667, 675, 687, 688, 689, 788, 824, 833, 881, 1000, 1004, 1021, 1025, 1028, 1029, 1030], "signatur": [247, 352, 353, 373, 490, 491, 560, 561, 567, 568, 597, 613, 614, 662, 676, 678, 714, 745, 809, 826, 829, 831, 834, 880, 963, 993, 1042, 1048, 1052], "signif": [45, 996], "signifi": [410, 584, 814, 1009], "signific": [2, 43, 88, 140, 146, 163, 164, 166, 183, 217, 231, 263, 271, 290, 291, 352, 361, 372, 373, 390, 410, 413, 414, 417, 507, 535, 537, 552, 630, 661, 662, 669, 670, 671, 679, 680, 681, 822, 832, 907, 909, 910, 911, 912, 913, 993, 1003, 1004, 1007, 1025, 1035, 1037, 1038, 1039, 1043], "significantli": [43, 61, 62, 64, 72, 109, 110, 134, 140, 144, 146, 149, 168, 186, 187, 188, 213, 217, 221, 229, 231, 265, 271, 291, 321, 322, 353, 354, 361, 366, 382, 410, 415, 417, 418, 423, 471, 476, 481, 482, 541, 543, 550, 561, 568, 649, 650, 655, 656, 663, 664, 665, 666, 687, 695, 847, 848, 996, 1000, 1001, 1007, 1012, 1019, 1035, 1037, 1038, 1042, 1043, 1048, 1049, 1050], "sijaranamu": 1041, "silenc": 247, "silent": [247, 418, 584, 863, 1014, 1040, 1041, 1043, 1044, 1048, 1049], "silhouett": [2, 58, 71, 73, 82, 90, 91, 183, 353, 449, 515, 795, 796, 1025, 1035, 1039], "silhouette_avg": 93, "silhouette_sampl": [2, 93, 796, 1039, 1041, 1043, 1051], "silhouette_scor": [2, 73, 82, 91, 93, 353, 378, 410, 1035, 1039, 1041, 1043, 1045, 1049], "silicon": 376, "silk": 1049, "sillanp\u00e4\u00e4": 1035, "silva": [408, 691, 1001, 1046, 1048, 1053], "silverman": [416, 852, 1050], "silverthorn": 1035, "silvestrin": 1052, "sim": 415, "sim4n6": 1050, "simd": [392, 1050], "similar": [2, 43, 44, 46, 51, 55, 58, 62, 63, 70, 72, 82, 84, 90, 93, 107, 116, 120, 124, 134, 146, 167, 170, 177, 185, 186, 187, 188, 198, 213, 215, 227, 233, 235, 236, 237, 240, 246, 247, 262, 265, 268, 271, 274, 277, 278, 279, 288, 290, 291, 311, 323, 340, 345, 348, 353, 354, 361, 365, 370, 372, 374, 377, 378, 380, 383, 384, 386, 387, 390, 392, 404, 407, 408, 410, 413, 414, 415, 417, 418, 419, 420, 421, 442, 445, 446, 452, 454, 456, 457, 506, 511, 512, 539, 585, 592, 593, 594, 613, 680, 695, 698, 706, 708, 718, 722, 728, 731, 732, 734, 737, 741, 743, 758, 763, 764, 789, 795, 796, 799, 800, 801, 829, 834, 879, 900, 903, 907, 908, 909, 910, 924, 934, 993, 996, 997, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1030, 1035, 1039, 1040, 1041, 1043, 1047, 1048], "similarli": [43, 51, 72, 88, 118, 150, 187, 189, 198, 202, 213, 241, 250, 265, 271, 306, 311, 326, 328, 341, 361, 366, 374, 376, 380, 383, 390, 392, 404, 406, 407, 413, 414, 418, 732, 733, 741, 786, 787, 790, 825, 999, 1001, 1002, 1004, 1011, 1018, 1019, 1021, 1043, 1049, 1051], "simmon": 1028, "simon": [1000, 1028, 1038, 1039, 1048, 1049, 1050, 1051], "simona": [1046, 1047, 1048], "simonamaggio": [1046, 1047, 1048], "simoncw": 1045, "simonpl": 1040, "simpl": [2, 13, 37, 43, 64, 88, 103, 107, 109, 115, 116, 120, 140, 144, 177, 183, 187, 198, 214, 230, 253, 272, 288, 292, 295, 304, 324, 337, 352, 354, 357, 361, 376, 378, 380, 381, 382, 383, 385, 390, 391, 392, 393, 401, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 424, 431, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 517, 525, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 789, 791, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 996, 998, 999, 1000, 1001, 1003, 1004, 1007, 1014, 1016, 1018, 1020, 1024, 1025, 1028, 1032, 1035], "simplefilt": 404, "simpleimput": [2, 103, 154, 181, 182, 188, 242, 252, 254, 321, 324, 361, 392, 630, 631, 632, 994, 1014, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "simpleimputersimpleimput": [103, 154, 188, 242, 252, 321, 324], "simplepipelin": 247, "simpler": [147, 189, 231, 320, 341, 365, 377, 410, 415, 1000, 1005, 1040], "simplest": [86, 414, 1001], "simplex": [63, 673, 800, 882], "simpli": [74, 116, 152, 170, 178, 237, 248, 250, 280, 304, 322, 323, 365, 373, 378, 380, 383, 390, 392, 412, 413, 414, 415, 417, 418, 487, 698, 765, 768, 874, 926, 953, 996, 1004, 1005, 1006, 1007, 1018, 1042, 1043, 1044], "simplic": [43, 53, 67, 198, 345, 352, 354, 392, 416, 1007, 1008, 1009, 1019], "simplif": [374, 377, 383, 1035, 1041], "simplifi": [43, 103, 200, 247, 341, 377, 379, 383, 410, 413, 518, 565, 866, 867, 1004, 1006, 1014], "simplist": [213, 418], "simul": [110, 122, 149, 186, 207, 248, 271, 1028], "simultan": [58, 88, 121, 275, 279, 326, 348, 359, 370, 407, 410, 993, 1004, 1005, 1020, 1028, 1042], "sin": [43, 53, 57, 74, 121, 135, 145, 146, 151, 153, 163, 170, 176, 177, 179, 193, 194, 198, 207, 214, 219, 235, 246, 262, 303, 312, 321, 327, 347, 358, 359, 420, 519, 618, 702, 767], "sin_transform": 43, "sina": 1048, "sinayev": 1037, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 82, 86, 88, 99, 102, 103, 104, 121, 143, 159, 165, 168, 170, 175, 186, 187, 189, 191, 196, 213, 215, 217, 230, 241, 245, 246, 247, 258, 261, 265, 267, 271, 273, 274, 280, 281, 284, 285, 288, 290, 291, 293, 294, 317, 323, 324, 335, 338, 341, 348, 352, 353, 354, 361, 366, 373, 376, 378, 379, 380, 382, 383, 386, 390, 391, 392, 396, 401, 404, 408, 410, 411, 412, 413, 414, 415, 417, 418, 420, 427, 430, 439, 444, 447, 448, 452, 455, 458, 471, 484, 485, 486, 487, 499, 530, 539, 541, 543, 550, 552, 553, 554, 555, 556, 558, 560, 562, 564, 565, 566, 567, 570, 572, 591, 592, 594, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 635, 636, 641, 654, 658, 661, 662, 669, 671, 676, 677, 678, 679, 682, 695, 710, 712, 738, 745, 781, 785, 792, 802, 803, 806, 807, 817, 825, 831, 832, 834, 835, 836, 837, 838, 842, 843, 844, 845, 846, 849, 854, 857, 864, 865, 867, 872, 897, 898, 902, 903, 904, 907, 909, 912, 915, 917, 931, 933, 934, 951, 960, 993, 996, 997, 998, 1000, 1001, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1028, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "sinclert": 1043, "sind": 418, "sine": [2, 43, 170, 175, 176, 183, 207, 219, 255, 256, 257, 258, 260, 261, 358, 374, 618, 800, 801, 1003, 1020, 1025], "singer": [288, 669, 670, 738, 1000, 1004, 1018, 1019], "singh": [1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "singl": [2, 30, 31, 70, 74, 85, 86, 88, 91, 94, 95, 104, 122, 133, 134, 135, 142, 143, 153, 168, 170, 176, 181, 183, 187, 189, 191, 198, 213, 215, 217, 251, 253, 261, 265, 267, 280, 288, 308, 324, 326, 341, 352, 353, 354, 357, 359, 361, 365, 366, 372, 373, 378, 383, 385, 386, 387, 390, 391, 392, 401, 408, 409, 411, 413, 414, 415, 417, 418, 419, 435, 439, 442, 443, 447, 448, 449, 451, 456, 466, 468, 469, 496, 497, 499, 509, 512, 537, 556, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 585, 595, 602, 603, 605, 609, 630, 635, 637, 646, 669, 670, 676, 679, 680, 681, 693, 695, 697, 713, 714, 724, 725, 726, 727, 728, 739, 740, 741, 744, 777, 788, 800, 801, 803, 806, 807, 817, 824, 825, 829, 830, 832, 833, 836, 844, 847, 848, 852, 864, 865, 866, 876, 877, 880, 881, 882, 887, 888, 902, 903, 915, 916, 917, 918, 927, 929, 967, 990, 993, 999, 1000, 1001, 1004, 1005, 1007, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1025, 1028, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "single_output": [380, 927], "single_prior": 179, "single_source_shortest_path_length": [2, 387], "singleton": [366, 811, 936, 1048, 1051], "singular": [2, 120, 387, 407, 410, 413, 453, 455, 484, 485, 486, 487, 524, 527, 537, 541, 543, 544, 547, 550, 552, 553, 660, 675, 676, 677, 690, 951, 1000, 1001, 1003, 1029, 1030, 1041, 1042, 1053], "singular_": 660, "singular_values_": [537, 544, 547, 1042], "sinha": [1043, 1052, 1053], "sinhrk": [1039, 1040], "sink": [644, 996], "sinoisoid": 146, "sinusoid": [121, 135, 146, 198, 246, 648, 997], "sio": 404, "siola": [1050, 1051], "sip\u0151cz": [1045, 1046, 1047, 1051, 1053], "siqi": 1049, "siqueira": 1045, "sir": 375, "sister": 1023, "site": [376, 378, 386, 396, 417, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 1028, 1043], "situat": [62, 79, 90, 104, 185, 186, 219, 240, 274, 378, 386, 404, 412, 414, 415, 417, 470, 531, 537, 585, 880, 883, 895, 905, 998, 1000, 1006, 1007, 1017, 1020, 1043], "situp": 375, "sivamani": 1045, "sivaprasad": [1038, 1039], "six": [168, 214, 234, 315, 375, 1044], "sixteenth": 1016, "sixth": 373, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 80, 81, 85, 87, 88, 90, 91, 93, 94, 95, 99, 100, 105, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 137, 145, 146, 149, 150, 151, 164, 170, 172, 173, 176, 177, 183, 185, 187, 188, 193, 194, 195, 196, 199, 203, 208, 211, 214, 215, 216, 219, 226, 227, 233, 238, 240, 243, 244, 245, 246, 247, 249, 250, 258, 264, 267, 269, 271, 273, 274, 276, 277, 278, 288, 297, 298, 299, 306, 309, 312, 313, 314, 315, 318, 321, 324, 326, 327, 331, 335, 337, 339, 340, 341, 348, 350, 352, 353, 354, 356, 365, 366, 367, 373, 374, 378, 383, 387, 390, 391, 392, 396, 401, 407, 408, 410, 412, 414, 415, 418, 420, 421, 423, 446, 447, 448, 450, 451, 452, 459, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 496, 497, 498, 518, 530, 537, 539, 541, 543, 550, 560, 561, 562, 563, 564, 565, 567, 568, 586, 590, 591, 597, 635, 636, 646, 660, 669, 670, 682, 686, 695, 698, 708, 722, 741, 743, 746, 784, 796, 805, 808, 809, 813, 820, 823, 824, 825, 828, 831, 833, 842, 843, 844, 846, 849, 850, 851, 852, 853, 855, 857, 858, 859, 864, 865, 882, 884, 896, 901, 905, 909, 910, 911, 912, 913, 915, 916, 917, 918, 921, 950, 954, 955, 966, 967, 969, 972, 978, 994, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1016, 1018, 1019, 1020, 1027, 1028, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1053], "size_cluster_i": 93, "size_mb": 352, "sizeabl": [805, 820, 823], "sk": 553, "skaft": 1049, "skeleton": 1038, "sketch": [2, 23, 191, 367, 370, 387, 642, 643, 644, 968, 1030, 1047], "skew": [2, 48, 146, 216, 244, 250, 311, 326, 370, 408, 414, 642, 643, 644, 645, 883, 895, 1000, 1014, 1030, 1038, 1042, 1051], "skewed": [645, 1042], "skewedchi2sampl": [2, 641, 642, 643, 644, 996, 1042, 1049, 1050], "skf": [258, 414, 822], "skfold": 333, "skforecast": 1023, "skill": 1004, "skimag": [80, 81, 372], "skip": [366, 378, 387, 406, 418, 470, 649, 650, 655, 663, 664, 665, 674, 684, 905, 926, 1039, 1042, 1045, 1047, 1049, 1051], "skip_check_arrai": 992, "skip_complet": 630, "skip_comput": 1045, "skip_parameter_valid": [470, 905, 1051], "skipper": [1038, 1040, 1041], "skiptestwarn": 926, "skl2onnx": 404, "sklear": 379, "sklearn": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 367, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 390, 391, 392, 395, 396, 397, 401, 404, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "sklearn2pmml": 1023, "sklearn_api": 0, "sklearn_assume_finit": 365, "sklearn_cache_": 320, "sklearn_enable_debug_cython_direct": 379, "sklearn_fail_no_openmp": 376, "sklearn_graph_cache_": 293, "sklearn_is_fit": [132, 1025], "sklearn_run_float32_test": 378, "sklearn_site_joblib": 1043, "sklearn_warning_as_error": 366, "sklearnex": 396, "skop": [1023, 1030], "skorch": 1023, "sktime": [52, 1023], "sl": 213, "slack": 1018, "slai": 352, "slama": [1045, 1047], "slep": [378, 392], "slep000": 393, "slep009": [1046, 1048, 1049], "slep010": [380, 1046], "slep011": 1024, "slep018": [254, 380, 1050], "slep020": 393, "slice": [2, 43, 52, 55, 142, 149, 222, 235, 245, 299, 302, 323, 324, 337, 373, 379, 387, 411, 466, 469, 496, 497, 511, 549, 642, 777, 781, 784, 924, 929, 954, 955, 974, 1047, 1049, 1053], "slice_": [496, 497, 1050], "sliceabl": 958, "slide": [272, 647, 1000, 1022], "slight": [143, 218, 322, 404, 417, 451, 1045], "slightli": [43, 62, 64, 97, 113, 137, 140, 143, 146, 150, 154, 168, 170, 171, 172, 188, 193, 213, 231, 236, 238, 247, 250, 279, 285, 291, 320, 338, 354, 377, 378, 408, 410, 417, 418, 420, 422, 448, 591, 592, 594, 641, 661, 806, 807, 907, 909, 912, 950, 951, 993, 1000, 1014, 1018, 1019, 1020, 1044, 1048, 1049, 1051, 1053], "slishak": 1049, "sloan": 0, "slogdet": 949, "slope": [187, 211, 215, 230, 410, 493, 726, 751, 1002, 1004], "sloppili": 418, "sloth": [50, 304, 373, 501], "slow": [293, 311, 352, 365, 372, 376, 378, 415, 418, 449, 702, 881, 882, 886, 909, 912, 951, 1001, 1007, 1024, 1042], "slower": [104, 123, 140, 143, 181, 246, 280, 354, 392, 417, 418, 419, 448, 453, 455, 541, 543, 550, 558, 559, 560, 561, 566, 567, 568, 569, 591, 592, 594, 634, 635, 636, 646, 662, 675, 677, 690, 695, 707, 835, 839, 840, 997, 1001, 1002, 1003, 1005, 1007, 1020, 1039, 1046], "slowest": [143, 950, 951], "slowli": [390, 392, 547, 951], "slug": 102, "smacof": [2, 693, 1050], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 82, 86, 88, 102, 109, 113, 116, 125, 135, 137, 143, 145, 146, 175, 177, 186, 187, 194, 199, 203, 204, 214, 217, 219, 228, 230, 231, 258, 265, 271, 278, 283, 285, 293, 304, 307, 309, 311, 313, 315, 322, 330, 335, 341, 346, 348, 352, 353, 367, 371, 373, 375, 378, 381, 387, 390, 392, 404, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 423, 443, 445, 447, 448, 449, 451, 460, 461, 465, 477, 499, 501, 541, 543, 544, 550, 558, 559, 560, 564, 565, 566, 567, 585, 592, 593, 605, 610, 611, 653, 657, 658, 659, 661, 662, 682, 685, 686, 806, 807, 821, 832, 835, 864, 865, 872, 900, 909, 912, 951, 993, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1017, 1020, 1023, 1024, 1028, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "smaller": [2, 37, 47, 61, 75, 80, 88, 113, 134, 149, 168, 175, 176, 181, 201, 202, 204, 217, 244, 288, 297, 298, 306, 311, 328, 341, 348, 353, 378, 407, 410, 412, 414, 415, 417, 419, 441, 442, 448, 452, 456, 458, 517, 537, 538, 560, 561, 562, 563, 564, 565, 567, 568, 596, 613, 622, 636, 649, 650, 652, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 675, 677, 685, 686, 695, 712, 800, 806, 807, 853, 856, 880, 881, 899, 900, 907, 915, 916, 917, 918, 951, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1014, 1016, 1018, 1019, 1020, 1024, 1043, 1048, 1052], "smallest": [111, 112, 213, 291, 328, 356, 373, 410, 412, 419, 530, 544, 633, 657, 658, 659, 685, 686, 693, 697, 698, 803, 806, 807, 817, 822, 877, 930, 1020, 1048], "smallest_ab": 328, "smallest_coef": [113, 530], "smari": [1044, 1045, 1046], "smart": [247, 445, 461, 462, 593], "smartphon": 1028, "smedbergm": 1041, "smedemark": 1045, "smile": [107, 373, 1049], "sminchisescu": [645, 996], "smirnov": 1047, "smith": [1041, 1042, 1043, 1044, 1045, 1047], "sml": [863, 1009], "smo": [907, 908], "smola": [415, 418, 538, 873, 1014, 1019], "smolskii": 1050, "smooth": [43, 80, 81, 87, 168, 175, 206, 214, 229, 317, 341, 375, 393, 410, 416, 417, 420, 450, 451, 540, 541, 542, 549, 560, 561, 562, 563, 567, 568, 569, 593, 594, 622, 625, 679, 842, 843, 844, 846, 884, 888, 896, 915, 916, 917, 918, 1000, 1006, 1014, 1018, 1019, 1020], "smooth_idf": [418, 593, 594], "smoothened_coin": [80, 81], "smoother": [43, 44, 146, 187, 308, 416], "smoothli": 372, "smt": 1051, "smtp": [373, 495], "smujjiga": 1045, "sn": [72, 126, 135, 149, 185, 186, 193, 198, 261, 271], "snake": [324, 326, 585, 888, 1014], "snapshot": [404, 562, 563, 1024], "sne": [51, 183, 232, 233, 234, 235, 237, 291, 517, 528, 695, 1025, 1029, 1030], "snippet": [132, 361, 378, 383, 386, 390, 406, 417, 418, 419, 994, 1014, 1027, 1048], "snowhit": 1046, "snr": 87, "snuderl": 1039, "sny": 51, "snyder": [695, 1001], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 88, 89, 94, 98, 112, 140, 142, 143, 144, 145, 149, 153, 170, 175, 186, 188, 191, 194, 213, 214, 240, 247, 250, 265, 271, 284, 288, 291, 297, 298, 301, 307, 308, 312, 317, 318, 321, 333, 341, 352, 354, 360, 361, 365, 366, 367, 372, 373, 376, 377, 378, 380, 382, 383, 384, 386, 387, 392, 401, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 499, 511, 512, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 698, 708, 711, 719, 729, 759, 781, 791, 800, 801, 802, 803, 806, 807, 809, 810, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 897, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 951, 969, 978, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1016, 1017, 1018, 1019, 1023, 1024, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052], "soar": 1050, "sobkevich": 1047, "sobolev": 1039, "soc": [57, 373], "socastro": [1045, 1051], "socg2006": 449, "social": [186, 382, 393, 410, 1028], "societi": [168, 375, 410, 412, 471, 476, 544, 630, 883, 895, 1000, 1018], "sodhani": 1041, "soft": [2, 129, 155, 156, 378, 392, 572, 573, 903, 911, 1018, 1028, 1040], "softmax": [417, 564, 661, 662, 1000, 1007, 1008], "softw": 1000, "softwar": [0, 168, 365, 375, 378, 386, 390, 392, 404, 418, 630, 638, 661, 994, 1028], "soil_typ": 250, "sokalmichen": [452, 459, 702, 781, 782, 783, 1007], "sokalmichenerdist": 702, "sokalsneath": [452, 459, 702, 781, 782, 783, 1007], "sokalsneathdist": 702, "sok\u00f3\u0142": [1052, 1053], "sole": [100, 378, 390, 410], "soledad": 1047, "soler": [0, 400], "solid": [50, 67, 69, 145, 173, 225, 226, 240, 250, 304, 313, 1028], "solntz": 352, "solosil": 1048, "solut": [80, 193, 198, 202, 204, 218, 227, 240, 246, 284, 323, 341, 376, 392, 404, 407, 409, 410, 412, 414, 415, 418, 419, 451, 453, 455, 534, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 613, 649, 651, 653, 655, 657, 658, 659, 661, 663, 665, 667, 668, 669, 670, 671, 672, 675, 677, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 800, 801, 817, 856, 864, 865, 997, 998, 1000, 1001, 1003, 1008, 1010, 1018, 1019, 1022, 1028, 1035, 1038, 1048, 1049, 1050], "solutu": 1043, "solutusimmensu": 1043, "solv": [2, 44, 45, 99, 170, 202, 245, 271, 290, 377, 378, 379, 380, 383, 390, 398, 410, 412, 414, 415, 420, 449, 455, 464, 480, 534, 540, 541, 542, 546, 548, 549, 550, 551, 638, 640, 649, 655, 657, 658, 667, 668, 673, 675, 677, 680, 688, 689, 690, 722, 837, 907, 908, 911, 951, 995, 998, 1000, 1001, 1004, 1005, 1018, 1019, 1020, 1022, 1023, 1028, 1041, 1045, 1048], "solvabl": 410, "solver": [54, 66, 69, 70, 80, 99, 183, 192, 202, 204, 205, 206, 213, 221, 228, 229, 231, 306, 307, 308, 309, 318, 327, 328, 352, 384, 390, 392, 396, 406, 410, 422, 454, 464, 473, 474, 480, 505, 536, 538, 543, 544, 547, 550, 552, 649, 650, 651, 655, 656, 661, 662, 663, 664, 665, 666, 669, 671, 672, 673, 675, 677, 679, 683, 684, 687, 690, 691, 692, 694, 696, 698, 791, 817, 833, 838, 841, 864, 865, 909, 910, 911, 912, 913, 998, 1001, 1004, 1005, 1008, 1018, 1019, 1025, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "solver_": [675, 677], "solver_opt": 673, "somani": 1047, "some": [0, 42, 43, 44, 47, 48, 52, 57, 61, 62, 64, 72, 79, 83, 86, 88, 89, 91, 95, 100, 103, 106, 109, 111, 112, 116, 120, 135, 136, 140, 143, 146, 147, 149, 150, 151, 154, 155, 164, 170, 172, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 191, 193, 195, 197, 198, 200, 201, 202, 203, 207, 208, 213, 214, 217, 221, 222, 227, 230, 231, 233, 235, 240, 244, 247, 250, 257, 258, 259, 264, 265, 266, 271, 272, 273, 274, 277, 279, 285, 288, 290, 294, 297, 302, 307, 308, 311, 316, 321, 322, 323, 324, 325, 326, 327, 328, 337, 338, 340, 341, 348, 350, 352, 353, 354, 360, 361, 365, 366, 367, 371, 372, 373, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 396, 401, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 439, 445, 446, 449, 451, 453, 455, 461, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 499, 502, 511, 512, 518, 526, 527, 536, 537, 539, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 584, 585, 591, 593, 594, 609, 612, 613, 614, 635, 636, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 692, 693, 695, 696, 700, 701, 703, 704, 705, 710, 711, 718, 723, 729, 730, 741, 742, 743, 749, 757, 759, 760, 766, 785, 787, 790, 791, 792, 797, 800, 802, 804, 805, 810, 812, 821, 822, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 960, 993, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "some_funct": [378, 941], "some_integ": 414, "some_iter": 378, "some_param": 378, "somebodi": 393, "someestim": 377, "somehow": 187, "someon": [378, 382, 392, 1035], "someth": [186, 234, 288, 352, 378, 381, 382, 386, 418, 923, 925, 1004, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "sometim": [104, 154, 185, 265, 271, 308, 353, 361, 366, 367, 378, 380, 384, 391, 392, 410, 412, 415, 417, 418, 451, 537, 538, 541, 543, 544, 872, 873, 874, 922, 999, 1000, 1001, 1004, 1009, 1014, 1015, 1019, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "somewhat": [348, 361, 367, 378, 415, 417, 909, 912, 1000, 1019, 1020], "somewher": [384, 1004], "sommer": 1053, "somya": 1043, "son": [375, 994], "song": 1001, "soni": [51, 1045, 1047], "sonni": 1040, "sonniv": [1050, 1051], "sonoiya": 1045, "sonoma": 317, "soon": [112, 392], "sooner": 1052, "sophist": [994, 1006], "sorbaro": 1040, "sorensen": 415, "soriano": 1044, "sornarajah": 1040, "sorri": 1043, "sorro": 1044, "sorski": [1049, 1050], "sort": [2, 43, 47, 49, 51, 58, 61, 93, 102, 105, 132, 137, 143, 146, 153, 168, 175, 193, 198, 213, 214, 231, 249, 271, 272, 275, 286, 303, 347, 352, 358, 359, 378, 382, 386, 387, 392, 414, 417, 418, 420, 537, 544, 558, 569, 584, 597, 613, 620, 700, 715, 721, 732, 733, 741, 757, 786, 787, 790, 792, 803, 830, 842, 843, 844, 845, 846, 847, 848, 855, 857, 858, 859, 862, 872, 878, 880, 881, 884, 886, 888, 896, 909, 912, 951, 957, 1000, 1007, 1010, 1014, 1028, 1035, 1039, 1045, 1046, 1047, 1049, 1050, 1053], "sort_graph_by_row_valu": [2, 387, 1050], "sort_index": 288, "sort_result": [847, 848, 855, 857, 858, 859, 1047], "sort_valu": [103, 188, 189, 254, 261, 271, 282, 317, 318], "sorted_idx": [147, 320], "sorted_importances_idx": 188, "sortofamudkip": [1050, 1051], "sought": 784, "soumirai": 1045, "sound": [168, 361], "sounder": 1041, "sourav": [1042, 1045], "sourc": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 372, 375, 377, 378, 379, 381, 382, 384, 386, 387, 390, 391, 396, 404, 407, 411, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 1001, 1014, 1020, 1023, 1025, 1028, 1045, 1049, 1053], "south": [50, 149, 186, 304, 373, 416], "south_y": 186, "sp": [43, 186, 327, 994], "sp_version": 673, "space": [2, 37, 43, 47, 49, 57, 67, 80, 86, 90, 91, 93, 94, 96, 98, 102, 103, 106, 116, 120, 122, 126, 128, 130, 139, 142, 146, 152, 165, 168, 170, 176, 191, 198, 214, 233, 234, 235, 237, 244, 245, 246, 250, 251, 257, 262, 279, 282, 283, 291, 300, 301, 313, 322, 345, 352, 353, 354, 360, 361, 365, 370, 373, 374, 375, 378, 385, 390, 391, 392, 407, 410, 413, 415, 416, 417, 418, 420, 445, 449, 450, 451, 454, 464, 466, 467, 468, 469, 484, 485, 486, 490, 501, 535, 537, 538, 541, 542, 543, 544, 546, 547, 552, 576, 585, 591, 592, 594, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 635, 636, 641, 643, 644, 645, 646, 691, 692, 693, 695, 696, 697, 699, 702, 803, 806, 807, 809, 817, 826, 837, 847, 848, 855, 856, 857, 858, 867, 872, 873, 879, 884, 899, 900, 901, 920, 955, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1029, 1030, 1035, 1036, 1038, 1043, 1044, 1045, 1049, 1050, 1051], "spacek": 1040, "spain": 317, "spam": [584, 712, 744, 842, 1004, 1006, 1028], "span": [52, 88, 109, 146, 245, 265, 268, 373, 410, 418, 552, 639, 803, 806, 1004], "spanish": 1023, "spannbauer": 1047, "sparciti": 353, "spare": [372, 677, 678], "spark": [373, 1024], "sparrai": 1052, "spars": [2, 25, 45, 46, 47, 51, 53, 55, 57, 66, 74, 75, 87, 88, 90, 102, 108, 109, 110, 119, 121, 139, 152, 183, 192, 193, 200, 201, 202, 205, 207, 208, 212, 229, 244, 246, 272, 278, 284, 291, 309, 321, 325, 328, 334, 351, 354, 360, 365, 370, 372, 373, 374, 378, 380, 381, 382, 383, 390, 391, 392, 404, 410, 411, 417, 418, 420, 421, 425, 432, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 459, 461, 462, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 489, 490, 491, 499, 500, 506, 511, 526, 527, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 588, 589, 591, 592, 593, 594, 596, 597, 606, 607, 608, 609, 610, 611, 612, 632, 633, 634, 636, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 715, 716, 717, 732, 733, 734, 737, 741, 742, 743, 757, 758, 763, 764, 766, 767, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 790, 795, 796, 799, 802, 803, 806, 807, 817, 824, 825, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 871, 872, 874, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 929, 931, 932, 933, 934, 939, 948, 951, 952, 955, 957, 958, 966, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 992, 994, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1017, 1019, 1020, 1024, 1025, 1026, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "sparse_cg": [352, 675, 677, 690, 1000, 1036, 1042, 1044, 1045, 1049, 1051], "sparse_coef_": [649, 655, 663, 665, 1035], "sparse_encod": [2, 545, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 685, 686, 687, 688, 689, 1035, 1042, 1043, 1045, 1049], "sparse_encode_parallel": 1035, "sparse_format": [530, 1052], "sparse_func": [1041, 1047], "sparse_input_": 874, "sparse_lasso": 199, "sparse_output": [43, 143, 254, 317, 324, 327, 569, 874, 878, 880, 886, 891, 1014, 1050, 1051], "sparse_output_": [466, 554], "sparse_symmetric_arrai": 989, "sparse_threshold": [187, 466, 469, 1043], "sparsearrai": 1046, "sparsecod": [2, 129, 415, 534, 540, 543, 551, 1042, 1043, 1045, 1047, 1049], "sparsecodingmixin": 1035, "sparsefunc": [2, 387, 978, 979, 980, 981, 982, 983, 984, 1048], "sparsefuncs_fast": [2, 387, 985, 986], "sparsepca": [2, 120, 534, 536, 537, 538, 540, 542, 543, 544, 545, 548, 549, 1035, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1053], "sparser": [88, 193, 204, 284, 415, 473, 480, 542, 546, 1000, 1007, 1018], "sparserandomproject": [2, 234, 244, 899, 1016, 1036, 1041, 1049, 1051, 1052], "sparsetool": 1042, "sparsifi": [46, 198, 365, 661, 662, 669, 670, 671, 679, 680, 681, 907, 987, 1037], "sparsiti": [2, 53, 66, 113, 183, 192, 198, 201, 206, 224, 228, 229, 246, 348, 353, 365, 392, 412, 415, 417, 419, 504, 505, 530, 534, 540, 541, 542, 543, 546, 548, 549, 550, 649, 655, 660, 661, 679, 681, 724, 726, 727, 876, 882, 887, 892, 997, 1000, 1007, 1014, 1025, 1037], "sparsity_en_lr": 204, "sparsity_l1_lr": 204, "sparsity_l2_lr": 204, "sparsity_ratio": 365, "spatial": [81, 82, 88, 189, 198, 230, 308, 373, 392, 410, 421, 446, 448, 452, 454, 459, 682, 695, 763, 766, 781, 782, 783, 784, 795, 796, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 1000, 1007, 1014, 1037, 1041, 1048, 1051], "spawn": [365, 390, 803, 817, 828, 829, 830, 1046], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360], "speak": [353, 365, 378, 1018], "spearman": [189, 638, 639, 995], "spearmanr": 189, "spec": [1050, 1051], "speci": [2, 42, 126, 183, 250, 292, 352, 371, 416, 501, 709, 792, 852, 911, 922, 1004, 1010, 1025, 1030, 1035], "special": [145, 186, 203, 231, 288, 301, 317, 341, 372, 374, 380, 384, 390, 392, 410, 413, 415, 466, 469, 556, 558, 562, 828, 919, 993, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1020, 1042, 1045, 1047, 1049], "special_charact": [919, 1020], "species_nam": [50, 304], "specif": [2, 43, 50, 51, 58, 64, 70, 79, 88, 95, 98, 102, 104, 140, 149, 154, 175, 178, 183, 186, 187, 191, 217, 231, 265, 266, 271, 288, 311, 320, 321, 325, 328, 345, 352, 353, 354, 361, 365, 366, 373, 378, 381, 383, 384, 386, 390, 392, 396, 404, 406, 410, 411, 414, 415, 417, 418, 419, 420, 434, 499, 506, 537, 554, 560, 567, 570, 571, 572, 573, 577, 591, 594, 596, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 628, 643, 646, 649, 650, 655, 661, 675, 690, 700, 702, 715, 716, 803, 804, 805, 810, 811, 812, 817, 830, 843, 924, 943, 945, 946, 966, 979, 980, 981, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1014, 1018, 1020, 1021, 1022, 1027, 1035, 1039, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "specifi": [2, 43, 58, 64, 88, 120, 143, 144, 149, 171, 174, 176, 177, 178, 202, 214, 221, 256, 265, 279, 365, 366, 372, 378, 380, 386, 387, 391, 392, 401, 404, 408, 410, 411, 414, 415, 417, 419, 420, 422, 424, 439, 443, 447, 452, 454, 465, 466, 469, 471, 472, 474, 475, 476, 477, 478, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 506, 518, 530, 534, 536, 540, 541, 543, 544, 549, 550, 555, 560, 562, 563, 564, 565, 567, 570, 571, 586, 587, 596, 597, 600, 605, 613, 614, 623, 634, 635, 636, 641, 646, 649, 650, 651, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 666, 668, 671, 672, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 690, 694, 701, 703, 705, 712, 714, 732, 733, 741, 745, 757, 774, 782, 783, 786, 787, 790, 803, 806, 807, 809, 810, 812, 816, 817, 820, 825, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 842, 843, 845, 846, 847, 848, 852, 857, 880, 881, 882, 885, 886, 888, 903, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 946, 953, 987, 994, 1000, 1001, 1003, 1004, 1007, 1011, 1012, 1014, 1017, 1018, 1019, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "spector": 414, "spectral": [2, 53, 56, 71, 79, 80, 82, 88, 102, 183, 234, 235, 332, 334, 352, 353, 354, 378, 418, 451, 453, 454, 455, 464, 471, 472, 473, 474, 475, 476, 477, 478, 490, 514, 516, 594, 691, 692, 693, 694, 695, 698, 722, 798, 1007, 1017, 1025, 1029, 1030, 1035, 1036], "spectral_clust": [2, 80, 99, 1043, 1045, 1047, 1048, 1049, 1050, 1052], "spectral_embed": [2, 392, 1001, 1036, 1039, 1041, 1043, 1045, 1048, 1049, 1050, 1052], "spectralbiclust": [2, 407, 455, 1037, 1041, 1042, 1046], "spectralclust": [2, 79, 324, 410, 442, 1007, 1035, 1036, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "spectralcoclust": [2, 57, 59, 407, 453, 1037, 1042, 1046], "spectralembed": [2, 85, 233, 234, 235, 691, 692, 693, 695, 1001, 1036, 1041, 1045, 1049, 1050, 1052], "spectrum": [105, 527, 547, 698, 951, 1028, 1043], "speech": [418, 1004], "speed": [80, 81, 90, 102, 123, 132, 140, 182, 187, 199, 202, 206, 250, 291, 322, 331, 352, 354, 367, 378, 381, 387, 390, 392, 406, 408, 410, 415, 417, 418, 421, 445, 446, 449, 450, 451, 452, 454, 459, 461, 462, 463, 464, 534, 535, 613, 630, 635, 636, 637, 642, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 684, 687, 695, 800, 801, 809, 831, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 882, 951, 993, 996, 1001, 1003, 1005, 1018, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "speedi": 365, "speedup": [327, 365, 415, 417, 653, 657, 660, 1035, 1036, 1037, 1038, 1050], "speer": 1037, "spell": 418, "spend": 418, "spent": [291, 317, 379, 384, 831, 1050], "sperret6": 1053, "sphere": [134, 183, 232, 233, 236, 237, 238, 291, 353, 416, 522, 592, 691, 692, 693, 694, 695, 767, 936, 998, 1002, 1007, 1025], "sphere_data": 235, "spheric": [70, 90, 115, 150, 235, 258, 260, 261, 304, 374, 767, 800, 801, 1000, 1003, 1007], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 366, 382, 392, 396, 403, 1035, 1042], "sphinxcontrib": [378, 396, 403], "sphinxext": [378, 396, 403], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1035, "spidlen": [695, 1001], "spie": [168, 375], "spielman": 1045, "spike": 187, "spikebh": 1049, "spikhalskii": 1040, "spiki": 43, "spin": 386, "spine": [46, 54, 70, 224, 311], "spirit": 415, "spite": 1006, "spline": [2, 183, 192, 193, 286, 296, 519, 520, 521, 675, 868, 882, 886, 1023, 1025, 1048], "spline_": 43, "splines_df": 43, "splinetransform": [2, 43, 214, 250, 323, 882, 1014, 1048, 1050, 1051], "split": [2, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 102, 125, 134, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 159, 164, 185, 186, 189, 198, 208, 209, 213, 216, 221, 231, 241, 250, 257, 258, 264, 265, 266, 269, 271, 276, 278, 281, 285, 288, 294, 300, 306, 308, 312, 313, 318, 324, 326, 333, 341, 352, 354, 360, 373, 385, 391, 392, 396, 401, 408, 409, 410, 415, 417, 418, 419, 439, 444, 445, 474, 475, 481, 482, 500, 534, 540, 542, 545, 549, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 592, 594, 597, 605, 650, 654, 656, 658, 664, 666, 668, 676, 678, 698, 707, 708, 720, 734, 740, 760, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 847, 848, 864, 865, 888, 892, 893, 895, 896, 897, 898, 915, 916, 917, 918, 974, 993, 996, 1000, 1001, 1007, 1010, 1011, 1012, 1014, 1018, 1020, 1024, 1030, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "split0_test_precis": [803, 817], "split0_test_scor": [803, 817, 1041], "split0_train_scor": [803, 817, 1041], "split1_test_scor": [803, 817], "split1_train_scor": [803, 817], "split2_test_scor": 803, "split_cod": 415, "split_sign": [534, 540, 545], "splitter": [43, 247, 326, 327, 392, 401, 414, 439, 474, 567, 568, 570, 571, 597, 605, 650, 654, 656, 658, 662, 664, 666, 668, 676, 678, 803, 805, 806, 807, 808, 809, 817, 818, 819, 822, 823, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 915, 916, 917, 918, 1020, 1024, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "splot": [257, 262], "splt": 214, "sply88": 1049, "spmatrix": 1052, "spolski": 418, "sport": [57, 373], "spot": [86, 242, 410], "spottabl": 384, "spread": [43, 75, 235, 272, 311, 330, 331, 332, 335, 348, 365, 378, 410, 454, 464, 518, 884, 896, 904, 1004], "spring": [43, 52, 187], "springboard": 1023, "springer": [137, 138, 148, 175, 270, 408, 410, 414, 415, 417, 523, 538, 562, 563, 693, 697, 699, 708, 723, 729, 743, 744, 759, 800, 915, 916, 1001, 1004, 1005, 1011, 1020], "sprint": [377, 378, 1035], "spuriou": [341, 386, 1014, 1048, 1049, 1050], "spy": 207, "sq": 772, "sqeuclidean": [73, 452, 459, 781, 782, 783], "sqft": 250, "sql": 372, "sqr": 75, "sqrt": [51, 111, 112, 113, 123, 129, 138, 159, 189, 193, 195, 236, 238, 252, 256, 257, 258, 261, 262, 271, 346, 348, 410, 417, 418, 420, 465, 471, 472, 473, 474, 475, 476, 477, 478, 541, 543, 550, 560, 561, 562, 563, 567, 568, 622, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 702, 734, 766, 767, 772, 887, 900, 915, 916, 917, 918, 996, 1000, 1001, 1004, 1006, 1016, 1049], "squar": [2, 43, 44, 52, 94, 103, 110, 111, 112, 114, 115, 121, 122, 130, 137, 147, 149, 150, 168, 170, 175, 183, 185, 186, 192, 193, 195, 196, 198, 202, 203, 209, 210, 213, 215, 218, 223, 230, 231, 243, 244, 246, 259, 286, 315, 322, 323, 325, 338, 352, 370, 375, 378, 384, 387, 392, 410, 412, 413, 415, 416, 417, 421, 422, 433, 442, 444, 445, 446, 448, 449, 451, 452, 456, 459, 461, 462, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 504, 534, 540, 542, 544, 546, 548, 549, 550, 552, 555, 557, 559, 561, 562, 563, 565, 568, 571, 573, 593, 594, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 614, 618, 625, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 688, 689, 690, 691, 693, 695, 697, 699, 712, 724, 725, 726, 727, 753, 754, 761, 762, 766, 772, 773, 788, 793, 794, 833, 840, 841, 849, 850, 853, 854, 855, 857, 858, 865, 868, 887, 907, 908, 910, 912, 913, 914, 916, 918, 949, 976, 989, 995, 997, 998, 1007, 1008, 1012, 1018, 1020, 1025, 1026, 1030, 1035, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "square_dist": 1047, "squared_epsilon_insensit": [670, 679, 681, 908, 1000, 1041], "squared_error": [46, 52, 129, 146, 147, 323, 417, 561, 562, 563, 565, 568, 674, 679, 681, 696, 916, 918, 1018, 1020, 1048, 1051, 1052], "squared_hing": [220, 348, 669, 679, 907, 914, 1000, 1019], "squared_loss": [390, 1048], "squareform": 189, "squash": [250, 382, 420, 534, 540, 545, 551], "squeez": [107, 176, 177, 250, 291, 311], "sr": 1028, "sr_color": 237, "sr_err": 237, "sr_lle": 237, "sr_point": 237, "sr_tsne": 237, "srajan": 1043, "sre": 1050, "srebro": 1018, "srep30750": 410, "sri": [674, 1000, 1042, 1043], "sridharan": 1040, "sriharsha": [1043, 1044], "srikantan": 1000, "srimukh": 1047, "srinath": [1049, 1050], "srinivasan": [1043, 1046], "sripada": 1047, "srivastava": [1038, 1050, 1053], "srivatsan": [1041, 1042, 1045], "srvanrel": 1041, "sr\u0161e\u0148": 1053, "ss": 414, "sse": 445, "sseg": 1040, "ssrn": [213, 231], "sss": 823, "ssvm": 390, "st": [81, 100, 271, 325, 1038, 1041, 1043], "st30": 335, "st50": 335, "st_pipelin": 334, "sta4273": 647, "stabil": [72, 138, 144, 186, 234, 276, 311, 348, 353, 392, 407, 448, 653, 657, 673, 845, 864, 865, 883, 895, 950, 994, 1000, 1003, 1014, 1024, 1035, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "stabilis": 193, "stabl": [43, 64, 186, 207, 211, 215, 291, 321, 348, 353, 376, 378, 382, 387, 392, 396, 414, 418, 422, 473, 474, 480, 536, 544, 658, 675, 677, 690, 695, 727, 755, 950, 951, 1000, 1006, 1007, 1014, 1024, 1031, 1035, 1036, 1041, 1046, 1048, 1052], "stack": [2, 14, 107, 133, 143, 157, 181, 183, 213, 242, 267, 296, 360, 377, 386, 390, 392, 416, 466, 468, 469, 499, 518, 565, 568, 570, 571, 615, 630, 631, 633, 656, 676, 704, 828, 830, 868, 872, 880, 881, 887, 977, 994, 1024, 1025, 1026, 1027, 1030, 1035, 1038, 1042, 1043, 1044, 1045, 1046], "stack_method": [417, 570], "stack_method_": [417, 570, 571], "stacking_regressor": 154, "stackingclassifi": [2, 320, 361, 392, 401, 417, 571, 994, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "stackingregressor": [2, 154, 320, 392, 401, 417, 570, 994, 1045, 1046, 1047, 1048, 1049, 1052], "stackingregressorinot": 154, "stackoverflow": [383, 386, 390], "stade": 1039, "stage": [0, 46, 63, 104, 134, 139, 144, 147, 265, 382, 392, 406, 410, 417, 450, 556, 557, 562, 563, 564, 565, 591, 592, 594, 605, 1001, 1014, 1022, 1043, 1047], "staged_decision_funct": [556, 562, 564], "staged_predict": [134, 144, 147, 417, 556, 557, 562, 563, 564, 565, 1035, 1047], "staged_predict_proba": [145, 148, 556, 562, 564, 1035], "staged_scor": [556, 557], "stagewis": 134, "stagg": 1048, "stai": [43, 52, 63, 72, 129, 186, 353, 377, 378, 382, 392, 393, 1009, 1027, 1041], "stairstep": 278, "stalei": [1044, 1045], "stall": [377, 381], "stallei": 1047, "stan": [845, 1052], "stand": [274, 354, 382, 390, 415, 534, 540, 548, 549, 599, 612, 681, 708, 720, 739, 740, 760, 789, 791, 798, 1003, 1004, 1010], "standalon": [384, 661, 907], "standard": [2, 50, 51, 52, 58, 63, 68, 70, 88, 94, 102, 103, 105, 111, 112, 116, 121, 134, 137, 139, 140, 141, 142, 150, 154, 168, 170, 175, 177, 179, 186, 193, 201, 202, 211, 213, 222, 233, 234, 235, 245, 250, 261, 265, 266, 269, 270, 271, 272, 274, 311, 316, 339, 352, 365, 366, 370, 371, 372, 374, 375, 376, 378, 380, 381, 383, 384, 387, 390, 392, 396, 404, 406, 410, 412, 413, 414, 418, 420, 448, 466, 470, 474, 490, 499, 504, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 525, 527, 528, 533, 535, 538, 544, 555, 593, 597, 614, 637, 647, 648, 675, 676, 677, 678, 679, 681, 690, 692, 696, 791, 809, 824, 826, 844, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 871, 876, 877, 880, 883, 884, 885, 887, 895, 896, 897, 898, 905, 907, 908, 933, 993, 996, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1018, 1019, 1024, 1028, 1030, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1053], "standard_coef_": 1046, "standard_intercept_": 1046, "standard_norm": [361, 690], "standard_scal": 252, "standard_t": 122, "standardscal": [2, 45, 49, 67, 79, 82, 88, 91, 95, 103, 105, 116, 130, 154, 168, 186, 193, 200, 202, 204, 213, 229, 231, 241, 242, 250, 251, 252, 254, 265, 268, 278, 285, 294, 299, 300, 306, 313, 316, 320, 321, 323, 324, 325, 327, 328, 341, 344, 361, 367, 378, 380, 383, 387, 391, 411, 414, 431, 468, 469, 570, 679, 681, 867, 868, 871, 884, 898, 907, 908, 909, 910, 912, 913, 994, 1001, 1008, 1014, 1018, 1019, 1021, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "standardscalerifittedstandardscal": 254, "standardscalerstandardscal": [103, 154, 186, 241, 242, 251, 252, 254, 265, 278, 285, 321, 324], "standpoint": 83, "stanford": [168, 375, 652, 685, 686, 842, 845, 846, 900, 1002], "stanislav": [1050, 1051], "stanlei": [1049, 1050, 1051], "stap": 1043, "stapl": 1039, "star": [70, 118, 157, 378], "stareh": 1046, "start": [0, 43, 46, 49, 51, 52, 58, 63, 86, 91, 97, 100, 106, 116, 123, 139, 144, 146, 165, 168, 175, 177, 187, 191, 194, 195, 202, 213, 214, 215, 221, 231, 233, 237, 241, 245, 247, 259, 265, 271, 279, 291, 324, 326, 331, 352, 360, 361, 365, 366, 367, 378, 379, 380, 382, 383, 384, 390, 392, 396, 407, 410, 414, 415, 419, 420, 442, 444, 452, 456, 458, 541, 613, 620, 635, 648, 656, 662, 669, 670, 671, 679, 680, 681, 693, 697, 784, 785, 792, 800, 801, 803, 806, 807, 817, 849, 850, 851, 853, 855, 863, 957, 987, 993, 1000, 1003, 1008, 1009, 1018, 1024, 1028, 1038, 1040, 1043, 1045, 1047, 1048, 1049, 1050, 1051], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 236], "start_reut": 47, "start_tim": [46, 49, 57, 141, 144, 154, 170, 202, 234], "start_titl": 47, "start_top": 47, "startstart": 398, "startswith": [52, 102, 234, 304], "startup": 1028, "stat": [2, 45, 47, 49, 102, 111, 168, 170, 189, 268, 271, 279, 283, 296, 322, 330, 331, 375, 387, 391, 412, 476, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 685, 686, 807, 815, 817, 915, 916, 953, 993, 1000, 1014, 1042, 1044, 1048], "stat_learn_tut_index": [159, 160, 161], "state": [37, 86, 90, 102, 104, 111, 149, 215, 244, 252, 257, 265, 277, 322, 361, 366, 367, 378, 380, 384, 386, 390, 392, 393, 409, 417, 418, 423, 442, 445, 449, 451, 456, 461, 477, 547, 592, 682, 806, 807, 815, 817, 819, 847, 848, 854, 902, 903, 936, 993, 994, 1000, 1006, 1009, 1016, 1024, 1028, 1037, 1039, 1041, 1043, 1045, 1048, 1051], "state_to_print": 379, "stateless": [102, 353, 367, 392, 418, 585, 586, 592, 641, 870, 871, 879, 926, 987, 1014, 1051], "statement": [186, 380, 383, 386, 390, 392, 415], "static": [378, 380, 384, 386, 649, 650, 655, 656, 663, 664, 665, 666], "station": 175, "stationari": [174, 420, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "statist": [2, 47, 52, 112, 134, 137, 138, 148, 163, 167, 168, 183, 185, 186, 187, 188, 198, 200, 217, 263, 265, 268, 270, 273, 280, 288, 290, 311, 317, 322, 361, 371, 373, 375, 384, 392, 408, 409, 410, 411, 412, 414, 415, 417, 419, 435, 471, 476, 496, 497, 519, 520, 521, 523, 525, 544, 556, 562, 563, 565, 607, 608, 609, 612, 630, 633, 637, 638, 647, 652, 659, 693, 697, 699, 713, 719, 724, 726, 727, 734, 746, 791, 803, 819, 837, 864, 865, 883, 884, 885, 887, 892, 895, 896, 898, 912, 915, 916, 978, 993, 994, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1025, 1040, 1043, 1046, 1047, 1049, 1050, 1053], "statistician": [392, 887], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 633, "statlearnspars": [724, 726, 727], "statlib": 373, "statnikov": 1004, "statsmodel": [1000, 1023], "statu": [52, 132, 327, 372, 396, 499, 847, 848, 1053], "statweb": [652, 685, 686], "staub": 1041, "staubda": 1038, "std": [43, 50, 51, 52, 72, 80, 83, 87, 94, 99, 110, 112, 113, 121, 122, 123, 141, 142, 143, 149, 154, 176, 179, 181, 182, 186, 194, 201, 222, 244, 269, 270, 271, 273, 274, 276, 279, 281, 285, 286, 317, 333, 344, 353, 361, 392, 410, 414, 417, 518, 609, 612, 832, 887, 898, 1014, 1043, 1047], "std_": [275, 1040], "std_auc": 281, "std_display_styl": [246, 273, 809, 826], "std_error": 159, "std_fit_tim": [140, 293, 803, 817], "std_i": 186, "std_precis": 269, "std_predict": 177, "std_predictions_gpr": 170, "std_recal": 269, "std_scaler": 328, "std_score": [353, 1048], "std_score_tim": [140, 272, 803, 817], "std_test_precis": 269, "std_test_recal": 269, "std_test_scor": [103, 105, 140, 159, 167, 270, 271, 272, 279, 293, 474, 597, 803, 817, 1041, 1048], "std_time": 1041, "std_tpr": 281, "std_train_scor": [803, 817, 1041], "std_y_pr": 175, "stderr": [51, 836], "stdin": 386, "stdout": [47, 120, 221, 836, 856, 864, 865], "stds_california": 182, "stds_diabet": 182, "steadi": [902, 903], "steelblu": [121, 122, 156], "steep": [2, 171, 187, 280, 281, 410, 414, 420, 452, 458], "stef": [630, 994], "stefan": [1038, 1039, 1043, 1045], "stefani": [0, 1048, 1050, 1051, 1052, 1053], "stefanini": 1049, "stefano": 1037, "steffen": 1053, "stehl": [1049, 1050], "stein": 1041, "steinbach": [410, 1050, 1052], "steinfurt": [1045, 1047], "steingold": [1042, 1043], "steinlei": [410, 708], "steinley2004": 708, "stella": [410, 454, 464], "stellalin7": 1050, "stem": [137, 144, 188, 212, 262, 284, 414, 418, 996, 1006], "step": [52, 58, 63, 69, 77, 87, 88, 91, 100, 102, 103, 104, 105, 106, 112, 116, 123, 127, 134, 139, 142, 143, 144, 154, 165, 166, 167, 172, 175, 186, 188, 213, 221, 231, 241, 242, 245, 251, 254, 262, 265, 269, 272, 278, 280, 285, 291, 293, 294, 299, 306, 309, 313, 316, 317, 321, 324, 335, 337, 341, 353, 354, 356, 361, 365, 373, 376, 377, 378, 380, 381, 383, 386, 390, 392, 404, 407, 408, 410, 412, 413, 415, 417, 418, 419, 444, 449, 451, 539, 540, 541, 542, 549, 566, 591, 592, 594, 596, 597, 600, 609, 630, 647, 651, 669, 670, 672, 679, 681, 682, 683, 697, 703, 800, 801, 803, 806, 807, 817, 838, 839, 840, 841, 863, 864, 865, 867, 868, 870, 907, 908, 909, 910, 912, 913, 950, 951, 974, 978, 994, 1000, 1003, 1008, 1009, 1014, 1018, 1020, 1021, 1023, 1027, 1035, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1053], "stephan": [711, 1038, 1044, 1045, 1047], "stephani": 1046, "stephen": [1028, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "stepwis": [149, 638, 657, 658, 659, 685, 686, 1000], "stern": [791, 1004], "steve": [1037, 1039, 1043, 1048, 1050], "steven": [1037, 1038, 1040, 1042, 1043, 1048, 1050, 1051, 1053], "steward": 1042, "stewart": [1040, 1045, 1048, 1050, 1053], "stick": [48, 800, 1003], "stijn": 1042, "stikhin": 1045, "still": [43, 52, 64, 68, 79, 86, 88, 90, 95, 113, 124, 126, 146, 149, 154, 170, 176, 185, 186, 188, 189, 193, 198, 201, 213, 215, 231, 245, 274, 280, 284, 311, 322, 323, 326, 352, 353, 361, 367, 372, 377, 378, 382, 383, 384, 386, 392, 410, 414, 417, 418, 421, 442, 446, 456, 476, 499, 630, 635, 638, 640, 661, 662, 720, 759, 781, 784, 795, 796, 805, 806, 807, 820, 823, 885, 887, 907, 931, 956, 993, 994, 998, 1000, 1003, 1004, 1007, 1010, 1012, 1019, 1020, 1022, 1024, 1027, 1028, 1035, 1037, 1040, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "stine": [1043, 1044], "stochast": [2, 46, 91, 144, 145, 148, 160, 183, 191, 192, 200, 235, 237, 240, 245, 297, 299, 300, 305, 308, 323, 340, 410, 415, 417, 464, 490, 499, 505, 506, 507, 517, 525, 539, 547, 562, 563, 607, 630, 634, 642, 661, 662, 671, 675, 677, 679, 680, 681, 682, 690, 691, 692, 693, 695, 833, 856, 863, 864, 865, 868, 877, 911, 950, 951, 977, 993, 1007, 1008, 1010, 1025, 1026, 1029, 1030, 1035, 1036, 1039, 1040, 1042, 1044, 1046], "stochastic_gradi": [1037, 1038, 1044], "stock": [42, 80, 85, 183, 233, 234, 410, 412, 456, 473, 474, 692, 1001, 1025], "stogbauer": [610, 611], "stojanov": [1049, 1050], "stolbunov": 1040, "stone": [378, 915, 916, 1020], "stop": [43, 51, 55, 79, 95, 133, 134, 140, 175, 177, 183, 187, 192, 200, 215, 315, 321, 378, 380, 386, 387, 392, 410, 415, 417, 419, 442, 443, 445, 447, 449, 451, 454, 456, 464, 465, 473, 474, 480, 484, 485, 486, 492, 499, 511, 512, 535, 539, 540, 541, 542, 543, 546, 548, 549, 550, 556, 557, 560, 561, 562, 563, 564, 565, 567, 568, 591, 592, 594, 605, 620, 630, 647, 648, 649, 651, 652, 655, 659, 661, 662, 669, 670, 671, 672, 674, 679, 680, 681, 683, 694, 695, 698, 717, 753, 800, 801, 833, 864, 865, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 957, 977, 993, 1000, 1008, 1009, 1019, 1020, 1024, 1025, 1026, 1028, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "stop_n_inli": [674, 1000], "stop_prob": 674, "stop_scor": [674, 1000], "stop_word": [54, 57, 352, 353, 418, 591, 592, 594], "stop_words_": 1053, "stopiter": 1047, "stopword": 491, "storag": [0, 354, 392, 661, 662, 669, 670, 671, 679, 680, 681, 907, 1007, 1019, 1038, 1043], "storch": 1044, "store": [2, 68, 86, 87, 102, 104, 112, 165, 178, 191, 199, 202, 217, 234, 241, 251, 261, 265, 276, 280, 330, 354, 360, 365, 372, 373, 378, 380, 385, 386, 387, 390, 392, 404, 406, 411, 413, 415, 417, 418, 420, 421, 440, 442, 446, 448, 452, 459, 466, 469, 471, 472, 475, 476, 477, 478, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 506, 511, 537, 538, 544, 552, 553, 558, 559, 560, 561, 566, 567, 568, 569, 572, 573, 588, 592, 613, 614, 630, 634, 635, 638, 652, 653, 657, 663, 664, 665, 666, 669, 670, 676, 678, 679, 680, 681, 691, 692, 693, 695, 700, 701, 703, 704, 705, 784, 800, 801, 803, 809, 817, 825, 826, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 878, 885, 887, 888, 902, 903, 904, 933, 934, 960, 961, 974, 977, 989, 994, 996, 1000, 1005, 1007, 1016, 1019, 1020, 1023, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "store_cent": [448, 1052], "store_covari": [70, 552, 553, 1040, 1042], "store_cv_result": [265, 676, 678, 825, 1053], "store_cv_valu": [676, 678, 1043, 1046, 1053], "store_precis": [69, 110, 471, 472, 475, 476, 477, 478], "stori": [185, 271, 288, 373, 1003], "stork": 998, "stott": 1043, "stoyanov": [1043, 1044], "str": [47, 49, 52, 91, 93, 128, 130, 142, 166, 231, 250, 271, 283, 291, 301, 339, 352, 372, 373, 387, 418, 421, 422, 426, 431, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 459, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 620, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 695, 699, 700, 701, 702, 703, 705, 710, 712, 714, 716, 730, 732, 733, 735, 736, 741, 745, 774, 777, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 796, 802, 803, 804, 805, 806, 807, 809, 810, 812, 814, 815, 817, 821, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 926, 928, 929, 932, 933, 934, 937, 941, 943, 947, 959, 960, 961, 963, 966, 987, 988, 991, 1050], "str_": [51, 280, 496, 503, 507, 513, 875], "strai": 1009, "straight": [125, 203, 209, 211, 268, 345, 365], "straightforward": [312, 377, 409, 415, 1028], "straka": 1047, "strateg": 393, "strategi": [2, 30, 43, 52, 85, 87, 91, 94, 103, 143, 148, 149, 154, 160, 165, 167, 181, 182, 183, 188, 198, 202, 213, 221, 231, 242, 250, 252, 263, 265, 270, 272, 274, 275, 276, 278, 279, 280, 281, 283, 285, 290, 305, 308, 310, 312, 313, 317, 318, 320, 321, 324, 354, 364, 380, 384, 391, 392, 404, 409, 414, 417, 418, 419, 422, 439, 440, 441, 447, 449, 454, 464, 474, 505, 507, 515, 517, 525, 536, 541, 554, 555, 564, 565, 567, 568, 570, 571, 591, 592, 594, 595, 597, 605, 630, 631, 633, 637, 648, 650, 654, 656, 658, 664, 666, 668, 676, 678, 694, 698, 707, 714, 716, 735, 758, 760, 798, 803, 805, 806, 807, 809, 817, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 864, 865, 872, 877, 888, 902, 907, 909, 912, 915, 916, 917, 918, 974, 993, 994, 1003, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1025, 1030, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "stratif": [804, 805, 811, 812, 819, 821, 822, 823, 974, 1044], "stratifi": [2, 44, 125, 141, 150, 164, 188, 228, 241, 250, 254, 265, 266, 271, 274, 280, 294, 299, 300, 320, 380, 392, 409, 554, 562, 570, 571, 605, 662, 669, 671, 679, 802, 803, 806, 807, 809, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 856, 864, 974, 1004, 1007, 1040, 1041, 1042, 1044, 1045, 1048], "stratifiedgroupkfold": [2, 266, 1048], "stratifiedkfold": [2, 167, 258, 266, 277, 281, 333, 414, 439, 570, 571, 597, 605, 662, 676, 803, 804, 806, 807, 808, 809, 811, 813, 817, 821, 823, 826, 827, 828, 829, 830, 831, 832, 834, 888, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1048], "stratifiedshufflesplit": [2, 266, 341, 414, 1035, 1036, 1041, 1042, 1048], "stream": [47, 410, 415, 418, 464, 592, 876, 877, 887, 996, 1043, 1046], "stream_reuters_docu": 47, "streamhandl": 1046, "streamlin": 1000, "street": [154, 168, 375], "strehl": 410, "strength": [51, 154, 177, 201, 213, 217, 272, 284, 320, 365, 413, 417, 448, 570, 571, 646, 651, 652, 655, 661, 662, 672, 675, 676, 677, 678, 679, 681, 683, 690, 786, 864, 865, 907, 908, 912, 913, 993, 1000, 1007, 1010, 1018, 1019], "stress": [693, 697, 1001, 1050], "stress_": 693, "stretch": [237, 260], "stretched_gaussian": 260, "strickland": 1041, "strict": [361, 376, 392, 406, 415, 506, 538, 591, 592, 594, 1000, 1035, 1044, 1047, 1053], "stricter": 181, "strictli": [64, 213, 231, 247, 311, 326, 353, 383, 392, 408, 413, 415, 417, 418, 511, 512, 538, 544, 547, 564, 565, 591, 594, 605, 645, 673, 674, 676, 678, 698, 703, 742, 769, 803, 806, 807, 813, 817, 830, 856, 883, 895, 899, 900, 902, 903, 907, 908, 912, 913, 949, 993, 995, 1000, 1004, 1014, 1018, 1036, 1046, 1051], "striebel": [1041, 1042], "strife": 1001, "strike": [144, 187, 217], "string": [2, 47, 103, 142, 178, 231, 242, 265, 275, 323, 328, 354, 365, 372, 373, 378, 379, 380, 384, 392, 411, 414, 417, 418, 419, 421, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 491, 492, 499, 508, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 620, 623, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 702, 712, 714, 722, 735, 765, 768, 774, 777, 781, 782, 783, 784, 795, 796, 800, 801, 803, 806, 807, 809, 817, 825, 826, 830, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 924, 931, 933, 934, 942, 943, 944, 967, 987, 988, 993, 994, 1004, 1017, 1019, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "strip": [54, 231, 353, 365, 372, 373, 499], "strip_acc": [591, 592, 594], "strip_accents_unicod": 1045, "stripe": 314, "stripplot": 186, "strive": [377, 393, 1028], "strong": [32, 43, 52, 87, 170, 183, 185, 186, 192, 206, 210, 211, 217, 218, 219, 246, 290, 318, 348, 408, 415, 417, 527, 652, 675, 997, 998, 1000, 1001, 1003, 1011, 1019, 1025], "stronger": [272, 646, 655, 661, 662, 675, 676, 677, 678, 679, 681, 690], "strongest": [55, 206], "strongli": [62, 64, 113, 116, 123, 143, 147, 186, 196, 228, 247, 277, 352, 378, 395, 396, 408, 417, 661, 739, 798, 1000, 1001, 1030, 1044, 1051], "stroudsburg": [904, 1017], "strubel": 1048, "struct": [376, 392, 1038], "structur": [0, 2, 42, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 80, 85, 86, 87, 88, 89, 95, 113, 130, 150, 169, 183, 210, 233, 234, 237, 242, 247, 262, 266, 277, 296, 316, 321, 324, 329, 341, 345, 355, 356, 357, 365, 373, 375, 378, 380, 383, 390, 392, 393, 396, 407, 410, 412, 413, 414, 415, 417, 418, 419, 420, 443, 444, 447, 448, 452, 453, 454, 455, 456, 459, 464, 465, 473, 474, 499, 506, 507, 511, 514, 516, 517, 524, 533, 538, 544, 547, 566, 613, 614, 615, 619, 620, 621, 692, 699, 712, 716, 833, 855, 860, 887, 899, 900, 903, 915, 916, 917, 918, 921, 950, 951, 974, 977, 1001, 1003, 1004, 1007, 1009, 1010, 1014, 1017, 1020, 1023, 1024, 1025, 1035, 1036, 1038, 1039, 1041, 1045], "struggl": [377, 393, 410], "stuck": [94, 695, 1001], "student": [0, 122, 271, 1001, 1024, 1028], "studi": [43, 64, 93, 146, 213, 231, 274, 277, 278, 285, 352, 373, 375, 414, 419, 699, 711, 761, 762, 832, 1002, 1004, 1018], "studio": [376, 1028], "study_135": 372, "study_14": 372, "study_34": 372, "study_98": 372, "study_99": 372, "stuff": 1028, "stump": [136, 417, 562, 1046], "stupp": [1041, 1042], "stupperich": 1047, "sturla": 1037, "style": [112, 146, 202, 221, 231, 275, 378, 385, 410, 418, 445, 449, 461, 703, 809, 826, 933, 934, 947, 1035, 1038, 1049], "st\u00e9fan": 379, "st\u00e9phan": 1045, "st\u00e9phane": [1044, 1045, 1049, 1050], "su": [724, 726, 727], "sub": [47, 72, 86, 88, 90, 93, 102, 129, 247, 249, 256, 322, 330, 331, 338, 341, 349, 373, 378, 380, 384, 392, 411, 417, 418, 439, 445, 446, 449, 451, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 591, 593, 594, 600, 613, 614, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 866, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 924, 961, 1000, 1004, 1018, 1045, 1049, 1051, 1052], "sub_sampl": 539, "subclass": [132, 380, 420, 577, 969, 1040, 1043, 1048, 1052], "subclust": [410, 444], "subcluster_centers_": [77, 444], "subcluster_labels_": 444, "subcompon": [120, 415], "subdirectori": 378, "subdivid": [373, 420], "subestim": 380, "subestimator__c": 380, "subestimator__class_weight": 380, "subestimator__du": 380, "subestimator__fit_intercept": 380, "subestimator__intercept_sc": 380, "subestimator__l1_ratio": 380, "subestimator__max_it": 380, "subestimator__multi_class": 380, "subestimator__n_job": 380, "subestimator__penalti": 380, "subestimator__random_st": 380, "subestimator__solv": 380, "subestimator__tol": 380, "subestimator__verbos": 380, "subestimator__warm_start": 380, "subexpress": 52, "subfold": [2, 376, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 506, 1048], "subgraph": 407, "subhash": 1049, "subhodeep": [1035, 1036, 1037], "subi": [1044, 1045, 1050], "subject": [16, 102, 151, 262, 274, 352, 373, 378, 380, 382, 390, 392, 393, 408, 412, 414, 415, 498, 661, 662, 688, 825, 870, 926, 973, 995, 1000, 1019, 1022, 1044, 1045, 1048, 1050], "subject_body_extractor": 102, "subject_body_transform": 102, "subjectbodi": 102, "subjectbodyextractor": 102, "sublinear": [415, 593, 594], "sublinear_tf": [352, 415, 418, 593, 594], "submatric": 407, "submatrix": [407, 425, 453, 455], "submiss": 378, "submit": [375, 376, 377, 380, 381, 382, 383, 386, 392, 393, 396], "submitt": 377, "submodel": 414, "submodul": [382, 996, 1002, 1035], "subobject": [424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918], "suboptim": [414, 703, 705, 785, 792, 1007, 1043, 1051], "subpackag": [378, 382, 1039, 1044], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 83, 84, 86, 87, 88, 89, 90, 93, 95, 98, 99, 105, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 129, 130, 134, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 151, 152, 154, 155, 156, 163, 172, 174, 179, 181, 182, 186, 187, 189, 191, 194, 197, 204, 205, 207, 208, 211, 212, 213, 214, 215, 217, 221, 226, 227, 229, 231, 233, 234, 237, 238, 240, 241, 243, 245, 246, 248, 249, 250, 251, 256, 257, 258, 259, 261, 262, 265, 266, 267, 268, 271, 273, 274, 276, 277, 278, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 295, 296, 299, 300, 302, 303, 304, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 324, 325, 333, 335, 338, 339, 340, 341, 345, 347, 348, 349, 350, 352, 353, 354, 356, 357, 374, 385], "subplot_kw": [233, 295], "subplot_spec": 385, "subplot_titl": 140, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 83, 84, 87, 95, 97, 111, 113, 118, 122, 123, 129, 136, 137, 154, 186, 212, 213, 228, 231, 240, 248, 256, 258, 259, 262, 266, 282, 296, 304, 306, 309, 313, 322, 331, 338, 341], "subpopul": [230, 682, 1000], "subproblem": 1040, "subrahmanyam": [1035, 1038], "subramaniam": [1050, 1051, 1052], "subramaniyan": 1047, "subramanyam": 1042, "subrat": 1047, "subrat93": 1047, "subsampl": [129, 145, 148, 187, 230, 267, 318, 322, 460, 562, 563, 564, 565, 566, 635, 682, 704, 806, 807, 833, 872, 884, 896, 929, 939, 996, 1000, 1024, 1035, 1045, 1049, 1051, 1052, 1053], "subscrib": 1033, "subscript": [366, 1048], "subsect": [25, 366, 378], "subsequ": [46, 68, 91, 107, 123, 134, 165, 200, 215, 273, 276, 291, 293, 341, 361, 378, 380, 382, 384, 392, 406, 410, 411, 417, 420, 439, 499, 511, 556, 557, 562, 564, 565, 669, 671, 679, 806, 807, 835, 836, 839, 842, 843, 844, 845, 846, 864, 882, 886, 994, 1003, 1005, 1044, 1045, 1049, 1051, 1053], "subset": [2, 46, 57, 58, 63, 64, 68, 102, 103, 111, 112, 141, 142, 143, 144, 159, 165, 168, 187, 189, 202, 214, 228, 229, 230, 231, 243, 245, 249, 250, 265, 269, 272, 274, 280, 281, 283, 288, 316, 317, 322, 330, 334, 352, 353, 354, 361, 373, 378, 386, 390, 392, 407, 408, 410, 411, 414, 417, 418, 420, 427, 439, 451, 466, 468, 469, 471, 490, 491, 495, 496, 500, 511, 552, 553, 554, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 605, 613, 632, 642, 643, 644, 645, 654, 658, 661, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 700, 706, 707, 714, 716, 719, 721, 734, 737, 758, 760, 796, 799, 802, 805, 825, 831, 833, 835, 836, 837, 838, 842, 843, 844, 845, 846, 849, 854, 857, 864, 873, 902, 903, 907, 909, 912, 915, 917, 929, 972, 993, 1000, 1004, 1005, 1015, 1017, 1019, 1020, 1038, 1043, 1044, 1046, 1048, 1053], "subset_featur": 103, "subset_label": 231, "subsidi": 186, "subspac": [127, 413, 417, 454, 518, 558, 559, 694, 698, 951, 998, 1007, 1010, 1016, 1028], "substanti": [159, 293, 297, 298, 312, 378, 853, 1010, 1039, 1042], "substitut": [401, 987, 1024, 1041], "subtl": [350, 361, 1003, 1024], "subtleti": 1030, "subtract": [175, 186, 250, 413, 415, 445, 449, 461, 537, 647, 648, 1042, 1052], "subtre": [560, 561, 562, 563, 567, 568, 915, 916, 917, 918, 1020], "subwindow": 1020, "succe": [127, 149, 198, 285], "succeed": 378, "success": [2, 83, 163, 183, 263, 275, 278, 279, 347, 361, 405, 410, 414, 415, 417, 518, 567, 582, 803, 806, 807, 824, 912, 1007, 1025, 1028, 1030, 1047], "successfulli": [43, 53, 315, 377, 382, 404, 410, 418, 1018], "successor": [452, 458, 1020, 1023], "suchak": 1048, "sudo": [376, 396], "suen": 1008, "suffer": [116, 188, 291, 311, 353, 365, 410, 417, 547, 766, 999, 1000, 1004, 1007, 1044], "suffic": [90, 91, 380], "suffici": [2, 64, 88, 154, 221, 286, 341, 365, 392, 410, 419, 535, 660, 685, 686, 819, 822, 823, 1005, 1007, 1024, 1044, 1050, 1051], "suffix": [396, 830, 1004, 1045], "suganthan": 375, "sugar": [168, 375], "suggest": [111, 123, 137, 141, 186, 189, 271, 341, 365, 377, 378, 385, 392, 414, 415, 417, 471, 476, 568, 648, 832, 998, 1000, 1001, 1009, 1012, 1019, 1039, 1046, 1049, 1052], "suh": 1043, "suha": 1053, "suit": [58, 120, 152, 186, 213, 214, 240, 261, 323, 324, 326, 352, 366, 378, 380, 383, 384, 386, 396, 398, 404, 413, 415, 417, 452, 454, 506, 680, 844, 888, 945, 993, 996, 1001, 1004, 1006, 1007, 1018, 1023, 1024, 1028, 1042, 1049], "suitabl": [138, 146, 198, 199, 217, 307, 354, 372, 373, 384, 387, 404, 410, 415, 418, 454, 464, 470, 489, 508, 511, 630, 638, 842, 843, 846, 881, 882, 905, 968, 972, 998, 1000, 1003, 1014, 1016, 1018, 1023, 1049, 1050], "sullivan": [1038, 1039, 1040], "sultan": 1049, "sum": [2, 30, 47, 55, 57, 63, 94, 112, 118, 123, 129, 145, 146, 164, 168, 178, 186, 195, 209, 213, 217, 228, 231, 234, 236, 250, 265, 280, 291, 298, 301, 324, 328, 334, 345, 346, 348, 352, 353, 354, 360, 375, 384, 392, 407, 408, 410, 412, 413, 415, 416, 417, 418, 420, 433, 444, 445, 449, 451, 461, 466, 467, 484, 485, 486, 518, 523, 526, 534, 537, 539, 540, 544, 547, 548, 549, 552, 553, 555, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 572, 573, 593, 594, 614, 616, 626, 628, 638, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 679, 680, 681, 682, 684, 687, 693, 697, 699, 702, 712, 713, 722, 729, 744, 759, 761, 762, 766, 791, 835, 836, 840, 841, 850, 854, 858, 865, 866, 886, 887, 907, 908, 910, 913, 915, 916, 917, 918, 953, 978, 984, 989, 1000, 1004, 1005, 1006, 1007, 1019, 1020, 1038, 1039, 1041, 1043, 1044, 1046, 1051, 1052], "sum_": [271, 280, 348, 407, 408, 410, 415, 416, 417, 541, 543, 550, 699, 758, 998, 1000, 1001, 1004, 1006, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020], "sum_gradi": 417, "sum_h": 1009, "sum_hessian": 417, "sum_i": [323, 417, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 995, 996, 1000, 1002, 1004, 1009], "sum_j": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 1000, 1004, 1009], "sum_k": [417, 552, 1020], "sum_m": 417, "sum_n": [278, 710, 1004], "sum_n_compon": [466, 866], "sum_over_featur": [1035, 1050], "sum_weight": 984, "sumit": 1049, "summar": [213, 262, 278, 280, 354, 378, 380, 395, 417, 524, 661, 697, 709, 710, 1000, 1001, 1004, 1010, 1030], "summari": [52, 168, 324, 360, 361, 375, 390, 564, 565, 695, 716, 791, 920, 1002, 1005, 1023], "summaris": [242, 321], "summat": [1006, 1008], "summer": [0, 43, 52, 175, 1035], "sun": [43, 149, 187, 1043, 1048, 1049], "sundai": 43, "sundaramahalingam": 1052, "sung": 1046, "sunglok": 1000, "sunita": 786, "sunitha": 1047, "sunmi": 1046, "super": [57, 62, 64, 380, 418, 1043], "superflu": 415, "superimpos": 415, "superior": 417, "superposit": 198, "supersed": [377, 1040], "superset": [414, 824, 1004], "supervis": [2, 27, 32, 34, 38, 57, 62, 64, 67, 72, 82, 87, 91, 115, 116, 128, 139, 149, 152, 161, 172, 234, 245, 248, 258, 271, 300, 313, 322, 333, 337, 338, 341, 345, 353, 354, 365, 373, 380, 391, 392, 408, 410, 413, 414, 415, 417, 418, 420, 439, 441, 466, 490, 506, 507, 556, 591, 593, 596, 597, 637, 679, 732, 804, 805, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 832, 833, 856, 866, 867, 871, 881, 888, 902, 903, 904, 912, 998, 1001, 1004, 1006, 1007, 1010, 1014, 1015, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1030, 1035, 1041, 1047], "supervised_learning_tut": [160, 161], "supp": 386, "suppli": [149, 390, 410, 649, 933, 934, 1007, 1028, 1039, 1041, 1043, 1048], "support": [2, 39, 43, 45, 46, 47, 48, 49, 61, 66, 68, 80, 102, 103, 104, 133, 138, 153, 154, 164, 165, 175, 187, 214, 223, 224, 225, 231, 245, 246, 247, 253, 264, 269, 276, 278, 288, 291, 309, 311, 315, 324, 328, 330, 331, 334, 335, 337, 338, 341, 342, 343, 344, 345, 346, 348, 365, 366, 367, 372, 376, 378, 380, 382, 383, 384, 385, 387, 388, 391, 392, 393, 404, 410, 414, 415, 418, 419, 420, 439, 442, 452, 454, 455, 466, 468, 469, 471, 476, 489, 499, 515, 541, 543, 544, 547, 550, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 616, 617, 618, 620, 622, 623, 625, 626, 628, 630, 634, 635, 636, 646, 648, 660, 661, 662, 673, 674, 675, 677, 678, 679, 680, 681, 690, 693, 697, 702, 710, 716, 732, 733, 741, 746, 781, 782, 783, 786, 787, 790, 791, 803, 806, 807, 809, 817, 825, 830, 831, 839, 840, 845, 847, 848, 851, 853, 859, 867, 868, 872, 878, 880, 881, 883, 887, 895, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 929, 939, 945, 946, 991, 993, 994, 996, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1018, 1023, 1024, 1025, 1026, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "support_": [246, 347, 471, 476, 596, 597, 605, 909, 910, 911, 912, 913, 1019], "support_fract": [48, 471, 476], "support_reweight": [471, 476], "support_vector": [339, 345], "support_vector_indic": 339, "support_vectors_": [46, 49, 342, 345, 346, 909, 910, 911, 912, 913, 1019], "suppos": [247, 274, 330, 365, 366, 378, 380, 382, 384, 412, 417, 418, 419, 560, 564, 567, 661, 662, 669, 671, 677, 678, 679, 853, 907, 909, 912, 915, 917, 939, 1008, 1044, 1046, 1052], "suppress": [186, 365, 386, 695, 1007, 1042], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 83, 86, 90, 93, 100, 107, 120, 123, 130, 134, 142, 143, 151, 154, 179, 186, 187, 189, 207, 212, 228, 229, 233, 234, 235, 249, 259, 265, 267, 284, 285, 309, 311, 313, 320, 322, 330, 331, 335, 347, 348, 357], "surac": 1045, "sure": [2, 63, 89, 206, 219, 247, 248, 265, 361, 365, 366, 372, 376, 377, 378, 379, 380, 382, 383, 386, 390, 396, 408, 411, 418, 496, 526, 652, 933, 934, 945, 956, 989, 994, 1001, 1018, 1023, 1024, 1042, 1043, 1045, 1050], "suresh": 1049, "surf": 187, "surfac": [67, 124, 126, 133, 134, 135, 136, 138, 155, 183, 197, 205, 222, 277, 294, 337, 338, 355, 356, 358, 359, 360, 417, 507, 556, 560, 567, 634, 767, 915, 921, 998, 1003, 1018, 1019, 1020, 1025], "surface_": 634, "surgan12": 1044, "surpass": [134, 345, 864, 865], "surplu": 414, "surpris": [86, 187, 376, 1000, 1023, 1037], "surprisingli": [231, 373, 418], "surrend": 57, "surrog": 1028, "surround": [248, 378, 853, 1010], "survei": [186, 413], "surviv": [103, 188, 993, 1023], "surya": [1048, 1049], "suscept": 404, "susik": 1039, "suspect": 43, "suspici": 373, "sustain": 0, "sutherland": [1037, 1039, 1040, 1042, 1043, 1044, 1045], "sutiono": 1046, "suzuki": [1046, 1047], "sv": 1019, "sv_ind": 246, "sv_ratio": 246, "svc": [2, 45, 62, 64, 66, 67, 68, 102, 106, 144, 155, 161, 171, 183, 191, 204, 245, 248, 252, 264, 269, 271, 273, 276, 277, 278, 281, 282, 313, 315, 316, 320, 322, 333, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 349, 350, 352, 365, 380, 384, 392, 408, 411, 414, 417, 436, 437, 438, 439, 470, 518, 558, 700, 701, 703, 705, 803, 820, 834, 836, 867, 904, 905, 907, 909, 910, 913, 991, 993, 999, 1002, 1004, 1005, 1014, 1025, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "svc__c": [313, 867], "svc_disp": [253, 320, 1032], "svc_isoton": 62, "svc_sigmoid": 62, "svcifittedsvc": 253, "svcsvc": [252, 269, 271, 322], "svd": [2, 70, 127, 152, 234, 353, 387, 406, 413, 422, 453, 455, 484, 485, 487, 524, 535, 536, 537, 538, 542, 543, 544, 547, 549, 552, 553, 667, 675, 676, 677, 688, 689, 690, 866, 951, 998, 1037, 1041, 1042, 1048, 1050, 1053], "svd__n_compon": 866, "svd_lapack_driv": 951, "svd_method": [57, 453, 455, 535, 1038], "svd_solver": [45, 102, 120, 127, 327, 328, 406, 415, 538, 544, 1041, 1053], "sven": [1049, 1050], "svg": [0, 398], "svm": [2, 42, 46, 48, 49, 50, 54, 62, 64, 66, 67, 68, 102, 104, 106, 120, 132, 142, 152, 155, 158, 162, 167, 168, 172, 174, 178, 183, 192, 195, 197, 205, 206, 223, 224, 225, 226, 240, 246, 248, 249, 252, 253, 264, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 281, 282, 286, 297, 302, 303, 306, 313, 314, 320, 322, 329, 333, 334, 336, 339, 347, 348, 352, 365, 373, 380, 384, 392, 411, 414, 415, 417, 419, 436, 437, 438, 439, 497, 507, 515, 518, 544, 558, 559, 566, 570, 571, 580, 596, 597, 602, 603, 608, 634, 642, 646, 671, 679, 680, 681, 692, 700, 701, 703, 705, 716, 738, 745, 764, 803, 817, 823, 829, 830, 833, 835, 836, 853, 867, 868, 880, 882, 887, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 991, 993, 996, 999, 1001, 1002, 1004, 1005, 1009, 1017, 1019, 1021, 1025, 1026, 1030, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042], "svm1": 411, "svm2": 411, "svm__c": 106, "svm_weight": 164, "svm_weights_select": 164, "svmlight": [2, 371, 489, 511, 512, 1030, 1035, 1036, 1042, 1044], "svmlight_file_test": 512, "svmlight_file_train": 512, "svmsgd": 1018, "svr": [2, 46, 49, 183, 239, 320, 336, 365, 398, 436, 437, 438, 559, 570, 571, 596, 597, 646, 681, 803, 809, 908, 910, 912, 997, 1025, 1035, 1037, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "svr_fit": 246, "svr_lin": 347, "svr_poli": 347, "svr_predict": 246, "svr_rbf": 347, "sw": 291, "sw_test": [61, 321], "sw_train": [61, 321], "swap": [2, 410, 415, 719, 739, 982, 983, 1035], "swapnil": 1049, "swart": 55, "sweep": 863, "swier": [1046, 1047], "swiss": [2, 100, 183, 232, 233, 238, 410, 533, 695, 696, 1025, 1049], "switch": [364, 681, 707, 720, 740, 758, 760, 798, 847, 848, 950, 951, 1004, 1007, 1030, 1035], "swpeas": 1048, "swu": 1039, "sy": [47, 51, 57, 221, 244, 291, 334, 354, 373, 390, 620], "syd": 1050, "sydnei": 0, "syhw": [1036, 1037], "sylvain": [0, 368, 1039, 1044, 1045, 1046, 1047, 1048, 1049], "sylvainlan": [1043, 1044, 1045, 1046, 1047], "symbol": [51, 354, 366, 380, 384, 412, 418, 502, 585, 591, 592, 594, 919, 921, 1023], "symbol_dict": 51, "symlink": 382, "symlognorm": [193, 198], "symmetr": [2, 79, 146, 179, 189, 215, 392, 408, 410, 454, 464, 465, 476, 522, 530, 532, 693, 697, 698, 707, 708, 718, 719, 720, 725, 727, 731, 739, 740, 758, 760, 766, 788, 798, 800, 801, 989, 993, 1000, 1004, 1007, 1051], "symmetri": [168, 375, 702, 880, 883, 895, 1002], "symmetric_arrai": 989, "symposium": [168, 375, 410, 462], "symptomat": 265, "synchron": [378, 418], "syndrom": 372, "synonym": [392, 849, 850, 851, 857, 858, 859], "synonymi": 415, "syntax": [366, 378, 383, 386, 411, 470, 866, 867, 905, 993, 1046, 1048], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 82, 141, 146, 152, 170, 175, 177, 187, 203, 215, 230, 306, 313, 348, 361, 365, 371, 381, 393, 410, 412, 419, 661, 662, 907, 908, 914, 998, 1041], "synthetic_feature_weight": [661, 662], "syonekura": 1043, "system": [44, 125, 198, 271, 278, 328, 361, 365, 366, 367, 373, 375, 378, 379, 380, 381, 386, 390, 396, 404, 410, 415, 417, 421, 446, 473, 474, 480, 538, 542, 546, 553, 642, 648, 653, 654, 657, 658, 659, 685, 686, 729, 759, 772, 800, 856, 902, 903, 1000, 1004, 1007, 1016, 1023, 1024, 1028, 1035, 1043, 1044], "systemat": [43, 149, 271, 715, 731, 923, 925, 1004, 1050], "sysuresh": 1049, "szabo": [1037, 1038], "szepieniec": 1041, "szlam": [415, 950, 951], "szpak": [1042, 1045], "szyma\u0144ski": [1043, 1044], "s\u00e1nchez": 1047, "s\u00e3o": 1053, "s\u00e4ger": [1038, 1041], "s\u00e9bastien": [1028, 1041, 1043], "s\u00f6nke": 1045, "s\u00f8ren": 1052, "s\u0142apek": 1046, "t": [2, 16, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 85, 87, 91, 102, 104, 109, 110, 111, 113, 115, 118, 121, 122, 127, 129, 130, 134, 137, 138, 145, 146, 147, 148, 149, 153, 154, 168, 171, 173, 174, 175, 178, 179, 183, 186, 187, 188, 189, 193, 195, 198, 207, 210, 211, 212, 213, 214, 231, 232, 234, 235, 236, 237, 247, 248, 257, 260, 262, 265, 270, 271, 284, 285, 290, 291, 304, 308, 320, 323, 324, 326, 330, 331, 333, 337, 338, 341, 342, 346, 352, 353, 354, 359, 360, 361, 365, 366, 372, 373, 375, 378, 380, 382, 384, 386, 391, 392, 396, 401, 404, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 423, 427, 430, 433, 435, 439, 449, 450, 452, 458, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 498, 499, 516, 517, 518, 522, 523, 528, 533, 535, 537, 544, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 593, 594, 597, 610, 611, 613, 614, 630, 631, 633, 634, 635, 636, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 698, 699, 707, 713, 719, 720, 729, 739, 740, 758, 759, 760, 770, 791, 792, 797, 798, 802, 803, 806, 807, 817, 825, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 857, 858, 863, 864, 865, 873, 876, 877, 878, 880, 881, 887, 888, 900, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 926, 951, 952, 967, 993, 996, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1018, 1019, 1020, 1025, 1029, 1030, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 80, 83, 85, 91, 95, 97, 123, 198, 199, 228, 229, 230, 235, 238, 240, 244, 246, 272, 327, 352, 353, 354, 679, 680, 681], "t1": [79, 80, 95, 228, 235, 238, 240], "t15h": 1042, "t_": [669, 670, 671, 679, 680, 681, 864, 865, 1018], "t_0": 1018, "t_batch": 97, "t_i": 1006, "t_k": [417, 1004, 1020], "t_m": 1020, "t_mini_batch": [77, 97], "t_p": 278, "t_post": 271, "t_sne": [233, 1043], "t_stat": 271, "t_stat_uncorrect": 271, "t_t": 1020, "taa": 178, "taac": 178, "tab": [46, 48, 70, 86, 111, 134, 149, 151, 154, 170, 175, 177, 200, 202, 265, 321, 327, 411, 1042], "tab10": [245, 261], "tab20b": 43, "tabea": [1050, 1051], "tabibian": 1041, "tabl": [91, 231, 271, 378, 379, 387, 410, 418, 585, 661, 683, 803, 817, 844, 968, 1000, 1004, 1005, 1010, 1023, 1036], "tabular": [43, 52, 187, 380, 417, 1012, 1023], "tacit": 392, "tacitli": 1037, "tackl": [147, 271, 366, 378, 410, 844, 1006, 1028], "tadej": [1036, 1037], "tae": 1047, "taehoon": [1042, 1043], "taemin": 1000, "tag": [2, 47, 82, 103, 240, 332, 372, 377, 381, 382, 386, 390, 392, 406, 418, 427, 433, 499, 835, 923, 924, 925, 927, 928, 940, 956, 987, 992, 1024, 1027, 1040, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "tahar": 1042, "tahiri": 1047, "taifi": 1041, "tail": [52, 146, 182, 186, 213, 215, 271, 311, 524, 527, 1000], "tail_strength": [328, 524, 527], "takanori": 1043, "take": [2, 44, 47, 52, 58, 66, 80, 86, 88, 90, 99, 107, 111, 118, 120, 134, 142, 170, 172, 175, 179, 186, 191, 197, 217, 221, 222, 237, 247, 258, 259, 265, 266, 272, 276, 280, 281, 290, 291, 294, 297, 298, 299, 301, 302, 311, 324, 328, 333, 337, 338, 341, 350, 353, 354, 357, 365, 366, 367, 372, 373, 376, 378, 380, 383, 384, 385, 386, 390, 392, 393, 401, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 422, 439, 445, 448, 449, 451, 452, 454, 459, 460, 461, 463, 465, 471, 522, 536, 541, 542, 543, 549, 550, 584, 595, 598, 599, 601, 602, 603, 613, 614, 619, 623, 624, 627, 635, 646, 652, 674, 676, 677, 678, 679, 682, 694, 695, 702, 708, 710, 712, 722, 732, 733, 741, 746, 759, 774, 777, 781, 782, 783, 784, 786, 787, 790, 791, 803, 804, 808, 809, 817, 821, 831, 849, 850, 851, 853, 855, 856, 857, 858, 859, 871, 881, 902, 903, 907, 908, 909, 910, 911, 912, 913, 937, 973, 993, 996, 1000, 1001, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1014, 1019, 1020, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "takeawai": 290, "taken": [37, 43, 46, 67, 77, 86, 88, 148, 168, 175, 186, 244, 245, 259, 277, 288, 313, 373, 375, 377, 378, 382, 392, 410, 414, 418, 422, 442, 536, 564, 565, 586, 587, 649, 650, 653, 655, 656, 657, 661, 662, 663, 664, 665, 666, 680, 682, 684, 687, 698, 880, 881, 901, 904, 910, 911, 962, 1004, 1006, 1014, 1016, 1041, 1044, 1047, 1048], "takeshi": [1043, 1048, 1049, 1050], "takeuchi": 373, "takingitcasu": [1043, 1044], "talbot": 276, "talgatomarov": 1046, "talk": [57, 102, 272, 352, 353, 354, 373, 392, 404, 1028, 1030], "talli": 416, "tallott": 1043, "talwalkar": 993, "tamara": [373, 1052], "tamer": 1050, "tami": 91, "tamir": [1046, 1049], "tamirlan1": 1046, "tamper": 47, "tampermonkei": 386, "tan": [864, 865, 1008, 1042], "tandfonlin": 410, "tang": [375, 1045, 1046, 1047], "tangent": [233, 345, 692, 696, 1002, 1029, 1030], "tanh": [345, 780, 864, 865, 1002, 1019], "tanjina": 1052, "tann": [1043, 1048], "tao": [1051, 1052], "tar": [47, 382], "taranjeet": 1041, "tarashanski": 1052, "tarbal": [382, 1050], "tarcusx": 1043, "tarfil": 47, "target": [2, 43, 45, 52, 55, 57, 63, 66, 68, 69, 85, 101, 103, 105, 106, 116, 124, 126, 128, 135, 142, 143, 144, 146, 147, 149, 151, 153, 154, 155, 157, 161, 163, 166, 168, 170, 172, 175, 176, 182, 183, 185, 186, 187, 188, 193, 197, 198, 206, 209, 213, 215, 217, 218, 221, 222, 234, 241, 243, 244, 245, 246, 249, 250, 251, 258, 264, 265, 267, 269, 272, 274, 276, 277, 280, 281, 285, 288, 290, 291, 294, 299, 302, 303, 307, 310, 311, 321, 322, 324, 326, 330, 331, 334, 335, 337, 338, 341, 345, 347, 352, 353, 357, 358, 359, 360, 361, 365, 367, 370, 371, 372, 373, 374, 375, 378, 380, 382, 383, 386, 387, 391, 395, 404, 410, 413, 414, 417, 420, 434, 439, 440, 441, 444, 447, 466, 467, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 511, 513, 523, 527, 534, 535, 537, 539, 540, 542, 545, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 576, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690, 700, 701, 703, 704, 705, 710, 711, 712, 715, 716, 721, 723, 724, 726, 727, 729, 730, 731, 732, 733, 738, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 856, 857, 858, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 891, 896, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 927, 933, 965, 966, 967, 992, 995, 996, 997, 1000, 1001, 1004, 1008, 1011, 1012, 1018, 1019, 1020, 1024, 1025, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "target_class": 316, "target_column": [491, 492, 499], "target_encod": 318, "target_filenam": [504, 508], "target_gener": 176, "target_idx": 635, "target_mean_": [888, 1014], "target_nam": [45, 57, 66, 85, 124, 126, 128, 185, 222, 234, 258, 264, 272, 280, 281, 294, 317, 334, 352, 357, 371, 373, 490, 491, 493, 495, 496, 497, 499, 500, 503, 505, 506, 507, 508, 513, 716, 1004, 1020, 1045], "target_opset": 404, "target_tag": [380, 926, 940], "target_test": [265, 512], "target_train": [265, 512], "target_typ": [317, 888, 937, 966, 1052], "target_type_": 888, "targetencod": [2, 317, 318, 392, 880, 881, 994, 1014, 1023, 1051, 1052], "targetencodertargetencod": 317, "targets_test": 245, "targets_train": 245, "targettag": [2, 926], "tari": 91, "tashai": [1043, 1044], "task": [2, 38, 43, 46, 123, 141, 147, 149, 167, 178, 183, 192, 198, 199, 202, 212, 213, 229, 233, 250, 265, 268, 285, 290, 345, 354, 365, 367, 373, 375, 377, 378, 383, 384, 387, 390, 391, 392, 415, 417, 418, 419, 420, 450, 463, 496, 508, 518, 595, 598, 599, 601, 602, 603, 607, 608, 609, 612, 635, 636, 649, 650, 655, 656, 663, 664, 665, 666, 677, 684, 687, 730, 732, 733, 757, 785, 787, 790, 792, 804, 808, 821, 827, 969, 970, 1001, 1004, 1005, 1006, 1007, 1015, 1017, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1040, 1044, 1050], "tast": 1035, "tata": 1052, "tau": 1014, "tau_0": 539, "tavenard": 1047, "tax": 0, "taxonom": 375, "taylor": [417, 1043, 1045, 1046, 1049], "tb": 386, "tc": [168, 375, 393], "tcg": 178, "tch": [168, 375], "tcompl": 91, "tcpdump": 373, "tda": 1023, "teach": 378, "teacher": 102, "teal": [214, 223, 278], "team": [373, 381, 390, 392, 393, 1023, 1028, 1035], "teas": 186, "tech": [51, 375, 845], "technic": [178, 186, 214, 234, 324, 373, 375, 378, 392, 417, 655, 667, 688, 689, 902, 993, 1000, 1001, 1007], "technion": [667, 688, 689, 1000], "techniqu": [11, 26, 51, 56, 102, 104, 122, 126, 130, 135, 144, 160, 167, 168, 182, 183, 185, 221, 235, 237, 276, 288, 295, 323, 331, 345, 356, 367, 375, 390, 392, 404, 408, 410, 414, 415, 416, 417, 418, 419, 449, 450, 451, 452, 537, 557, 680, 692, 693, 696, 697, 729, 759, 996, 1000, 1001, 1003, 1004, 1007, 1010, 1012, 1016, 1018, 1020, 1024, 1028, 1048], "technolog": 375, "technologi": [168, 375, 410, 1023, 1028], "technometr": [375, 412, 471, 476, 1010], "tediou": [154, 265], "teen": 1014, "teevan": [844, 1006], "teh": [863, 1009], "tejesh95": 1039, "telecom": 1028, "telenczuk": [168, 1044, 1047, 1048, 1050], "tell": [170, 186, 187, 247, 271, 341, 346, 366, 373, 410, 418, 566, 582, 993, 998, 1011], "temp": [43, 187], "temp_fold": 969, "temperatur": [187, 418, 1011], "tempfil": [87, 293, 320, 411, 1007], "templat": [378, 382, 383, 392, 393, 560, 561, 566, 567, 568, 569, 1023], "templateclassifi": 380, "tempor": [52, 149, 198, 1023, 1024], "temporari": [87, 102, 104, 365, 470, 690, 784, 905, 1007, 1038, 1039, 1042, 1048, 1049], "temporarili": [410, 1040], "temporarydirectori": [293, 320], "tempt": 186, "temptat": [361, 378], "ten": [54, 57, 134, 140, 149, 168, 234, 262, 373, 375, 417, 523, 912, 1044], "tenavi": 1049, "tend": [43, 51, 64, 72, 74, 78, 85, 88, 90, 166, 168, 186, 187, 202, 213, 218, 231, 250, 256, 259, 268, 272, 284, 290, 309, 345, 354, 365, 367, 378, 380, 392, 408, 410, 412, 415, 417, 419, 439, 450, 656, 853, 884, 896, 951, 1000, 1001, 1007, 1020], "tendenc": [149, 238, 1000, 1001, 1003, 1006, 1009], "tenenbaum": [691, 1001], "tenenhau": 375, "tensor": [2, 191, 370, 406, 415, 541, 543, 550, 642, 643, 644, 1030, 1047, 1053], "tensorflow": [45, 390], "tensorsketch": 996, "tent": 384, "tenur": 1028, "teon": 1047, "terenc": [1047, 1048], "term": [2, 43, 53, 54, 62, 68, 91, 125, 137, 140, 143, 146, 175, 185, 198, 200, 201, 202, 213, 215, 217, 227, 230, 231, 250, 265, 269, 273, 291, 306, 323, 345, 348, 352, 354, 367, 378, 380, 390, 408, 410, 412, 414, 415, 417, 445, 449, 451, 454, 461, 464, 527, 538, 541, 543, 547, 550, 552, 591, 592, 593, 594, 607, 610, 611, 635, 636, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 678, 679, 681, 683, 690, 698, 733, 741, 786, 787, 790, 864, 865, 882, 886, 889, 907, 908, 909, 910, 911, 912, 913, 993, 995, 996, 998, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1014, 1018, 1019, 1043, 1049, 1050, 1051], "term1": 418, "term2": 418, "term3": 418, "termin": [366, 383, 384, 386, 396, 410, 424, 450, 463, 556, 557, 561, 562, 563, 566, 568, 669, 670, 671, 679, 681, 864, 865, 916, 918, 1010, 1020], "terminalipythonapp": 384, "terminalpdb": 386, "termination_condition_": 904, "terminologi": [392, 1043], "terraza": 1047, "terri": 1039, "terrycojon": 1039, "tesson": 410, "test": [2, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 67, 68, 69, 102, 103, 115, 125, 134, 137, 139, 140, 141, 145, 146, 147, 148, 149, 159, 161, 162, 164, 167, 170, 171, 183, 185, 186, 187, 188, 189, 191, 198, 202, 206, 208, 209, 213, 214, 215, 217, 218, 220, 221, 228, 229, 231, 237, 241, 246, 247, 249, 258, 263, 264, 265, 266, 269, 270, 271, 272, 273, 275, 276, 278, 279, 281, 282, 283, 285, 290, 294, 299, 300, 306, 308, 313, 316, 317, 318, 327, 334, 341, 348, 354, 361, 365, 366, 372, 373, 375, 381, 382, 383, 384, 390, 391, 392, 395, 396, 403, 405, 406, 408, 409, 411, 412, 415, 417, 418, 419, 420, 427, 429, 430, 433, 436, 437, 438, 439, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 490, 491, 496, 500, 501, 505, 507, 527, 534, 540, 542, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 595, 597, 598, 599, 601, 602, 603, 605, 607, 608, 609, 611, 612, 613, 614, 630, 631, 633, 638, 639, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 715, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 857, 858, 864, 865, 867, 892, 893, 895, 896, 897, 898, 902, 903, 905, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 923, 924, 925, 926, 932, 943, 945, 946, 999, 1000, 1003, 1004, 1007, 1008, 1012, 1014, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "test_": [52, 154, 414], "test_0": 43, "test_4": 43, "test_accuraci": [258, 272, 285], "test_auc": 830, "test_ax": 125, "test_balanced_accuraci": 285, "test_best_it": 145, "test_check_estim": 946, "test_color": 145, "test_common": [378, 386], "test_dataset": 372, "test_devi": 148, "test_enable_hist_gradient_boost": 382, "test_fn": 1004, "test_fold": [414, 816], "test_fract": 1035, "test_idx": [52, 392], "test_import": 188, "test_index": [258, 333, 414, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "test_indx": 414, "test_lin": 145, "test_logist": [378, 386], "test_ms": 327, "test_neg_mean_absolute_error": [43, 215], "test_neg_mean_squared_error": [215, 830], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 274, "test_positive_likelihood_ratio": 274, "test_prec_macro": 414, "test_precision_macro": 414, "test_r2": 830, "test_rec_macro": 414, "test_recall_macro": 414, "test_requiring_mpl_fixtur": 378, "test_result": 188, "test_scor": [143, 145, 147, 149, 221, 270, 273, 284, 288, 317, 348, 356, 391, 414, 809, 826, 830, 831, 834], "test_scores_mean": 284, "test_scores_nb": 273, "test_scores_svm": 273, "test_set": 408, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 67, 68, 103, 139, 144, 145, 147, 148, 149, 153, 185, 191, 198, 208, 213, 220, 221, 228, 229, 265, 268, 269, 273, 278, 280, 284, 290, 299, 300, 306, 308, 309, 313, 315, 316, 322, 341, 348, 361, 383, 414, 701, 805, 820, 823, 824, 833, 835, 856, 994, 1006, 1007, 1035, 1036, 1041, 1042, 1047], "test_sklearn_compatible_estim": [320, 946], "test_sparsifi": 386, "test_stat": 47, "test_tim": [246, 352], "test_tp": 1004, "test_val": 379, "test_your_test_nam": 366, "tested_neg": 285, "tested_posit": 285, "testpypi": 382, "teunp": 1049, "texa": [51, 102], "text": [2, 42, 45, 46, 49, 50, 51, 54, 57, 67, 68, 72, 75, 79, 86, 90, 91, 93, 94, 95, 97, 102, 111, 112, 115, 140, 144, 166, 189, 194, 207, 208, 240, 244, 251, 252, 256, 258, 263, 270, 277, 278, 282, 296, 299, 301, 306, 313, 323, 329, 331, 347, 356, 365, 367, 370, 371, 372, 378, 383, 390, 392, 398, 408, 410, 411, 413, 414, 415, 417, 420, 449, 451, 466, 470, 489, 490, 491, 502, 506, 511, 524, 539, 547, 567, 591, 592, 593, 594, 618, 628, 655, 661, 669, 671, 677, 679, 700, 706, 708, 710, 716, 720, 732, 733, 740, 796, 798, 803, 817, 833, 842, 844, 846, 849, 854, 867, 868, 870, 871, 879, 903, 904, 905, 907, 919, 920, 921, 948, 993, 996, 1000, 1002, 1004, 1005, 1006, 1008, 1011, 1014, 1016, 1018, 1019, 1022, 1024, 1025, 1028, 1030, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "text1": 418, "text2": 418, "text2d": 237, "text3": 418, "text_": 700, "text_kw": [700, 1050], "text_preprocess": 466, "text_stat": 102, "text_stats_transform": 102, "textbook": [418, 593], "textcoord": [48, 191], "textrm": 1019, "texttt": 1004, "textual": [415, 424, 1020, 1044], "textur": [168, 375, 761, 762, 1002], "tf": [2, 54, 57, 244, 352, 353, 354, 373, 415, 524, 547, 591, 592, 593, 594, 846, 854, 879, 993, 1002, 1006, 1014, 1023], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 593, "tfidf": [54, 102, 334, 418, 594], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [2, 334, 353, 354, 418, 491, 594, 1042, 1043, 1049, 1051, 1052, 1053], "tfidfvector": [2, 54, 57, 102, 272, 352, 373, 415, 418, 491, 591, 592, 593, 1035, 1037, 1043, 1044, 1045, 1048, 1049, 1053], "tfidfvectorizertfidfvector": 272, "tfifi": 1048, "tfrac": 420, "tgct": 178, "tgz": 45, "th": [134, 323, 360, 391, 410, 414, 417, 425, 443, 447, 448, 453, 455, 461, 465, 474, 553, 560, 561, 562, 563, 564, 565, 567, 568, 569, 596, 597, 635, 651, 652, 672, 674, 683, 699, 721, 783, 824, 888, 938, 994, 1000, 1004, 1008, 1011, 1018, 1019, 1050], "th0rwa": [1045, 1046], "thakur": [1038, 1039], "thaler": 1041, "than": [2, 25, 43, 44, 46, 50, 51, 53, 57, 64, 66, 67, 75, 79, 81, 86, 88, 104, 107, 111, 113, 116, 118, 120, 123, 125, 127, 134, 136, 137, 139, 140, 141, 142, 143, 146, 149, 166, 168, 170, 176, 181, 186, 187, 188, 191, 193, 198, 199, 202, 213, 215, 219, 229, 230, 231, 237, 240, 246, 247, 248, 250, 257, 265, 268, 269, 271, 272, 273, 274, 277, 280, 285, 288, 290, 291, 297, 298, 309, 311, 315, 316, 317, 318, 322, 324, 326, 328, 331, 345, 352, 353, 354, 361, 365, 366, 367, 372, 373, 374, 376, 377, 378, 380, 383, 384, 386, 392, 393, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 456, 459, 462, 465, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 496, 497, 499, 512, 517, 518, 526, 534, 537, 538, 539, 540, 541, 543, 544, 545, 547, 550, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 630, 631, 633, 637, 643, 645, 646, 647, 649, 650, 655, 656, 658, 661, 662, 663, 664, 665, 666, 669, 670, 671, 674, 675, 677, 679, 680, 681, 682, 685, 690, 695, 697, 699, 707, 708, 715, 723, 724, 725, 726, 727, 738, 739, 742, 767, 782, 783, 784, 786, 788, 798, 800, 801, 803, 806, 807, 813, 817, 822, 824, 825, 828, 829, 830, 831, 832, 835, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 861, 864, 865, 870, 880, 881, 882, 884, 885, 887, 890, 896, 897, 901, 904, 907, 908, 909, 912, 913, 915, 916, 917, 918, 919, 924, 939, 951, 953, 954, 960, 966, 972, 974, 977, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1024, 1027, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thanh": 1053, "thank": [0, 43, 55, 62, 88, 116, 188, 191, 213, 280, 352, 353, 377, 386, 1023, 1028, 1035, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "tharak": 1052, "thebabush": [1052, 1053], "thedevpanda": 1050, "thei": [0, 8, 25, 30, 31, 43, 52, 63, 72, 83, 90, 113, 122, 132, 135, 141, 143, 145, 147, 149, 150, 164, 167, 168, 170, 171, 175, 186, 187, 198, 199, 202, 208, 213, 214, 231, 234, 237, 240, 246, 247, 250, 264, 268, 271, 272, 274, 280, 285, 288, 291, 293, 307, 311, 316, 322, 324, 345, 352, 353, 358, 359, 361, 365, 366, 367, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 386, 387, 390, 391, 392, 393, 401, 404, 407, 409, 410, 411, 412, 413, 415, 417, 419, 420, 422, 442, 444, 448, 455, 456, 469, 499, 511, 512, 536, 538, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 600, 613, 622, 632, 646, 649, 650, 655, 661, 662, 663, 664, 665, 673, 675, 679, 681, 684, 690, 765, 766, 768, 771, 777, 792, 803, 817, 836, 842, 843, 844, 845, 846, 864, 867, 869, 875, 886, 887, 909, 912, 915, 916, 917, 918, 922, 993, 994, 996, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "theil": [2, 183, 192, 216, 219, 311, 652, 660, 674, 681, 682, 1025], "theilsen": 219, "theilsenregressor": [2, 219, 230, 652, 674, 681, 1000, 1039, 1047, 1049], "theirs": 352, "them": [16, 43, 44, 47, 68, 74, 75, 82, 86, 88, 89, 93, 98, 99, 102, 103, 116, 120, 122, 125, 135, 150, 163, 168, 170, 181, 182, 186, 187, 188, 191, 193, 198, 201, 208, 214, 215, 217, 231, 244, 247, 250, 251, 265, 269, 271, 272, 274, 280, 284, 288, 293, 311, 316, 318, 323, 334, 341, 354, 360, 365, 367, 373, 378, 379, 380, 381, 382, 386, 390, 392, 393, 395, 401, 404, 408, 409, 410, 411, 414, 415, 417, 418, 420, 446, 449, 451, 452, 459, 466, 469, 496, 497, 511, 570, 571, 572, 573, 610, 611, 619, 623, 624, 627, 635, 642, 667, 695, 771, 774, 777, 781, 782, 783, 784, 792, 803, 817, 824, 832, 867, 871, 876, 877, 881, 885, 887, 888, 897, 898, 904, 915, 916, 945, 946, 960, 969, 993, 994, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1014, 1019, 1020, 1022, 1023, 1027, 1028, 1035, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "themat": 392, "theme": [373, 378, 396, 403, 1035], "themrmax": [1041, 1042], "themselv": [64, 186, 311, 374, 380, 386, 392, 401, 407, 410, 417, 418, 420, 448, 618, 795, 1020, 1045], "theodor": 1040, "theofilo": 1042, "theoptip": [1045, 1046], "theorem": [32, 170, 348, 1006], "theoret": [37, 72, 90, 170, 265, 410, 417, 556, 557, 642, 707, 729, 759, 907, 993, 1000, 1001, 1003, 1004, 1006, 1016, 1018, 1019, 1028], "theori": [8, 143, 246, 261, 348, 375, 410, 414, 417, 693, 697, 729, 759, 899, 900, 951, 993, 1000, 1001, 1003, 1004, 1005, 1019, 1020], "theotheo": 1045, "thereaft": [186, 193], "therebi": [43, 186, 414, 417, 996, 1045], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 85, 86, 103, 104, 107, 111, 116, 125, 129, 134, 137, 139, 146, 149, 152, 154, 167, 185, 188, 213, 217, 229, 230, 256, 261, 262, 265, 272, 274, 284, 285, 288, 290, 294, 308, 311, 316, 330, 341, 348, 349, 352, 353, 360, 365, 372, 376, 380, 383, 390, 401, 404, 406, 410, 411, 412, 414, 415, 417, 418, 439, 538, 544, 552, 554, 556, 557, 562, 563, 567, 568, 607, 609, 661, 662, 668, 671, 674, 679, 681, 682, 704, 715, 738, 760, 800, 867, 868, 880, 884, 888, 896, 923, 994, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1012, 1014, 1019, 1020, 1024, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "therein": 671, "thereof": 392, "theriley106": 1043, "thesi": [0, 375, 410, 417], "theta": [171, 172, 174, 176, 178, 179, 248, 415, 420, 526, 539, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 695, 1006, 1020], "theta0": 171, "theta1": 171, "theta_": [845, 1006], "theta_c": [248, 526], "theta_d": 415, "theta_i": 1006, "theta_l": 420, "theta_opt": [613, 614], "thi": [0, 2, 7, 11, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 367, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 395, 396, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 484, 485, 486, 487, 489, 491, 492, 496, 497, 499, 500, 501, 502, 504, 505, 506, 508, 511, 512, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 705, 706, 707, 709, 710, 712, 714, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 739, 740, 741, 742, 743, 744, 746, 751, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 771, 772, 777, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 923, 924, 926, 927, 928, 929, 933, 934, 939, 940, 941, 943, 945, 946, 951, 953, 956, 959, 960, 961, 962, 963, 964, 966, 969, 970, 973, 974, 977, 978, 987, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thibault": 1044, "thibaut": 1049, "thibsej": 1044, "thick": [93, 301, 1007], "thierno": 1045, "thierri": [0, 1028, 1041, 1042, 1049], "thij": [1047, 1050, 1051], "thin": [235, 623], "thing": [48, 70, 234, 266, 352, 366, 367, 373, 377, 378, 380, 390, 393, 410, 412, 418, 562, 563, 1000, 1014, 1028, 1041], "think": [44, 72, 186, 187, 352, 353, 378, 386, 416, 1003, 1024, 1028], "thinner": 100, "third": [70, 142, 147, 163, 168, 178, 231, 240, 262, 288, 296, 313, 326, 366, 373, 377, 380, 390, 393, 404, 418, 537, 591, 592, 593, 594, 805, 806, 807, 812, 849, 850, 851, 853, 855, 885, 897, 993, 1015, 1035, 1046, 1051, 1052], "thirion": [0, 399, 1035, 1041, 1042, 1048], "thirteen": 375, "thirti": 1022, "thiruvenkadam": 1049, "this_centroid": 77, "this_cov": 113, "this_cv": 266, "this_di": 51, "this_dx": 51, "this_i": [61, 219], "this_max_it": 228, "this_p": 63, "this_prec": 113, "this_scor": 344, "this_sw": 61, "this_x": [61, 211, 219], "thoma": [0, 127, 366, 368, 393, 399, 903, 1000, 1014, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thomas9292": 1047, "thomaz": 1046, "thomo": 91, "thompson": [1038, 1050, 1051], "thorben": 1047, "thorough": 1028, "thoroughli": 1009, "thorsten": 1028, "those": [43, 46, 51, 55, 57, 88, 93, 103, 135, 146, 149, 166, 168, 185, 186, 187, 188, 189, 213, 215, 217, 231, 238, 244, 247, 249, 250, 262, 264, 265, 271, 274, 277, 288, 307, 311, 316, 328, 338, 341, 352, 353, 354, 365, 366, 372, 378, 380, 382, 383, 384, 385, 390, 392, 393, 396, 407, 408, 409, 410, 414, 415, 417, 418, 420, 450, 452, 463, 466, 470, 497, 498, 499, 506, 560, 561, 567, 568, 572, 573, 584, 695, 700, 715, 721, 739, 803, 806, 807, 815, 817, 824, 849, 850, 851, 853, 855, 856, 857, 858, 859, 907, 908, 909, 912, 915, 916, 917, 918, 963, 993, 996, 1000, 1003, 1004, 1006, 1007, 1008, 1011, 1014, 1020, 1022, 1023, 1028, 1035, 1038, 1041, 1042, 1043, 1048, 1049, 1050, 1051, 1052, 1053], "though": [88, 140, 168, 191, 193, 250, 277, 296, 313, 315, 353, 354, 361, 365, 372, 375, 378, 382, 391, 392, 410, 415, 416, 417, 418, 419, 702, 810, 812, 907, 993, 994, 996, 1001, 1004, 1007, 1012, 1014, 1018, 1043], "thought": [233, 296, 392, 410, 448, 1001, 1005], "thoui": [0, 400, 1035], "thousand": [77, 140, 149, 244, 246, 315, 353, 373, 410, 417, 864, 865, 912, 1001, 1044, 1046], "thread": [291, 321, 324, 376, 378, 390, 392, 410, 417, 566, 839, 840, 969, 970, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052], "threadpoolctl": [41, 366, 376, 396, 403], "threadsaf": 1048, "three": [43, 46, 63, 70, 75, 76, 80, 88, 91, 109, 126, 134, 139, 141, 143, 144, 145, 155, 156, 157, 165, 168, 178, 186, 198, 205, 210, 213, 215, 222, 224, 246, 247, 256, 259, 290, 317, 318, 321, 366, 371, 374, 375, 382, 396, 404, 407, 410, 414, 415, 416, 418, 453, 464, 501, 712, 953, 997, 999, 1000, 1001, 1004, 1007, 1014, 1018, 1019, 1022, 1035], "three_d_arrai": 924, "thresh": 1039, "threshold": [2, 50, 62, 77, 98, 118, 123, 129, 168, 183, 187, 189, 208, 241, 243, 263, 268, 269, 270, 275, 278, 290, 326, 327, 329, 357, 360, 392, 405, 410, 415, 417, 419, 443, 444, 447, 448, 471, 499, 503, 511, 512, 534, 540, 545, 551, 552, 553, 554, 564, 566, 591, 594, 596, 600, 605, 606, 647, 661, 670, 674, 679, 681, 695, 701, 703, 705, 706, 709, 710, 721, 723, 729, 730, 742, 743, 745, 759, 785, 787, 790, 791, 792, 797, 800, 801, 802, 803, 822, 825, 833, 842, 853, 854, 868, 870, 872, 874, 887, 890, 902, 903, 904, 905, 912, 919, 921, 977, 1000, 1004, 1007, 1008, 1010, 1014, 1017, 1019, 1020, 1024, 1025, 1030, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053], "threshold_": [600, 1042], "threshold_lambda": 647, "threshold_sign": 360, "thriller": [418, 878], "thrive": [0, 378], "throat": [50, 304, 373, 501], "through": [0, 2, 46, 52, 70, 139, 168, 178, 186, 217, 233, 245, 266, 271, 274, 296, 315, 316, 339, 346, 354, 360, 375, 378, 380, 385, 387, 390, 392, 393, 396, 401, 409, 410, 413, 415, 417, 419, 420, 427, 433, 448, 466, 469, 474, 538, 544, 560, 561, 564, 567, 568, 569, 584, 596, 597, 600, 650, 654, 656, 658, 661, 662, 664, 666, 668, 671, 679, 680, 691, 694, 723, 809, 826, 883, 895, 899, 900, 915, 916, 917, 918, 958, 961, 993, 994, 1001, 1004, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1028, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "throughout": [326, 361, 392, 630, 804, 864, 865, 1038, 1043], "throughput": [364, 1023, 1030, 1038], "throw": [2, 308, 387, 932, 1039, 1042, 1043, 1044, 1045, 1049], "thrown": [714, 1044, 1045], "thu": [43, 44, 61, 62, 63, 64, 75, 86, 88, 93, 109, 113, 123, 125, 137, 139, 140, 143, 149, 164, 170, 175, 176, 187, 198, 200, 202, 213, 215, 231, 240, 246, 251, 258, 265, 269, 271, 276, 277, 278, 284, 285, 294, 318, 320, 323, 356, 361, 365, 366, 373, 380, 384, 390, 392, 401, 408, 409, 410, 414, 415, 417, 418, 420, 421, 439, 441, 465, 518, 530, 556, 557, 558, 559, 560, 561, 566, 567, 568, 569, 606, 609, 613, 625, 630, 635, 636, 646, 648, 661, 680, 708, 721, 728, 749, 791, 798, 803, 805, 810, 812, 817, 824, 838, 841, 876, 907, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1024, 1028, 1035, 1037, 1041, 1043, 1044, 1045, 1047, 1051], "thuan": 1046, "thukarama": 1050, "thumb": [13, 140, 191, 365, 378, 379, 390, 410, 661, 662, 669, 670, 671, 679, 680, 681, 907, 1004], "thumbnail": 1035, "th\u00e9ophil": 1051, "ti": [102, 213, 258, 261, 269, 349, 365, 386, 408, 410, 602, 603, 638, 723, 729, 759, 800, 801, 909, 912, 915, 1003, 1004, 1019, 1036, 1038, 1039, 1043, 1045, 1049, 1050, 1051], "tiago": [1036, 1040], "tialo": [1052, 1053], "tian": [410, 444, 1040, 1041, 1042], "tianqi": 417, "tiao": [1040, 1041], "tib": [685, 686], "tibshirani": [137, 138, 148, 168, 200, 270, 375, 414, 417, 523, 562, 563, 631, 659, 724, 726, 727, 837, 854, 915, 916, 994, 998, 1000, 1005, 1011, 1020], "tic": [168, 187, 250, 282, 1006], "tic_bwd": 168, "tic_fwd": 168, "ticconi": 1041, "tick": [47, 78, 93, 173, 251, 282, 378, 635, 831], "tick_bottom": 311, "tick_label": [147, 189, 320], "tick_labels_dict": [147, 189, 320], "tick_labels_parameter_nam": [147, 189, 320], "tick_left": 311, "tick_param": [46, 54, 157, 256, 271, 315, 333], "tick_right": 46, "ticker": [233, 235, 238, 291], "ticket": [325, 378], "tidelift": 0, "tie": [183, 205, 336, 390, 417, 515, 835, 912, 1005, 1019, 1020, 1025, 1036, 1051], "tieleman": [863, 1009], "tien": 1040, "tiernei": [1043, 1044, 1045], "tight": [75, 129, 136, 142, 161, 164, 201, 205, 206, 207, 218, 222, 225, 230, 235, 238, 260, 291, 297, 298, 302, 303, 337, 341, 344, 346, 357, 585, 695, 1047], "tight_layout": [45, 47, 62, 64, 67, 75, 85, 88, 98, 105, 107, 116, 120, 121, 122, 130, 134, 136, 141, 142, 144, 147, 152, 154, 156, 172, 174, 179, 181, 185, 186, 188, 189, 193, 194, 198, 203, 211, 213, 221, 224, 228, 231, 233, 245, 250, 266, 267, 283, 290, 291, 293, 303, 312, 313, 314, 315, 316, 320, 324, 339, 353, 356, 357, 374], "tijanajovanov": 1047, "tikhonov": [177, 420, 675], "tild": [873, 1012, 1014], "tilen": 1045, "till": [410, 444, 791, 1004], "tim": [0, 399, 1035, 1040, 1041, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "time": [0, 2, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 367, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 390, 392, 393, 401, 404, 406, 407, 408, 410, 412, 413, 415, 417, 418, 421, 439, 443, 445, 446, 447, 448, 449, 452, 454, 457, 459, 460, 461, 463, 464, 465, 466, 467, 469, 470, 474, 494, 499, 502, 504, 522, 526, 537, 539, 541, 543, 544, 550, 565, 570, 571, 572, 573, 593, 613, 622, 630, 631, 632, 633, 637, 642, 643, 646, 649, 653, 655, 657, 663, 665, 667, 669, 670, 675, 676, 677, 679, 680, 681, 688, 689, 693, 695, 697, 704, 745, 748, 749, 751, 793, 797, 800, 801, 803, 805, 806, 807, 808, 810, 812, 817, 818, 819, 822, 824, 828, 829, 830, 831, 832, 833, 835, 837, 842, 843, 844, 845, 846, 847, 848, 855, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 871, 872, 874, 877, 880, 882, 886, 891, 899, 900, 904, 905, 909, 912, 913, 921, 945, 946, 953, 969, 993, 994, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1028, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "time_dens": 327, "time_spars": 327, "time_step": [198, 865], "timeit": [228, 259, 384], "timeout": [499, 969, 1049], "timer": [259, 384], "times_init": 259, "timescal": 245, "timeseri": 43, "timeseriessplit": [2, 43, 52, 149, 198, 266, 414, 1041, 1042, 1047], "timo": 1047, "timofei": 1050, "timotheemathieu": 1048, "timothi": [1040, 1048], "timsaur": 1045, "tinertia": 91, "ting": [566, 1010, 1043, 1044], "tingshan": 1048, "tini": [1037, 1050, 1053], "tinoco": 1052, "tinta": 317, "tip": [361, 364, 378, 381, 384, 405, 418, 537, 544, 648, 695, 1000, 1026, 1027, 1029, 1030, 1038], "tiphain": 1046, "tirth": [1045, 1046], "titan": [103, 188, 254, 320, 324, 325, 1012], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 109, 110, 112, 113, 115, 116, 120, 121, 122, 123, 124, 126, 127, 128, 129, 135, 136, 137, 140, 142, 143, 146, 147, 149, 150, 153, 156, 157, 161, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 186, 193, 194, 196, 198, 200, 201, 202, 205, 206, 212, 213, 215, 217, 218, 219, 221, 222, 227, 230, 231, 233, 234, 235, 240, 244, 245, 246, 248, 249, 250, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 270, 271, 272, 274, 275, 276, 280, 281, 284, 286, 293, 294, 297, 298, 299, 300, 302, 303, 304, 311, 315, 316, 317, 318, 332, 335, 337, 338, 339, 340, 341, 344, 345, 349, 350, 352, 357, 358, 359, 374, 377, 378, 382, 386, 411, 1004, 1027], "title_bow": 411, "titles_opt": 264, "titov": [1043, 1045, 1048, 1049], "titu": 1046, "tiwari": 1047, "tiziano": 1035, "tjoa": 1039, "tkammi": 1041, "tkdd": 566, "tliu68": 1048, "tm": [51, 1007], "tmp": 382, "tmpdir": [293, 320], "tn": [265, 328, 715, 721, 1004], "tn_c": 280, "tnr": 265, "tnwei": 1047, "to_british": 418, "to_fram": 107, "to_list": 189, "to_numpi": [175, 265], "to_onnx": 404, "to_replac": [43, 187], "toarrai": [46, 327, 334, 360, 411, 418, 569, 585, 591, 593, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 880, 897, 898, 952, 974, 975, 977, 985, 986, 994, 1007, 1014, 1052], "toastedcornflak": [1041, 1042], "toastedyeast": [1049, 1050], "tobia": [1043, 1048, 1050], "tobychees": [1042, 1043], "toc": [168, 250], "toc_bwd": 168, "toc_fwd": 168, "toccac": 1045, "tocsc": 199, "tocsr": 55, "toctre": [378, 396, 403], "tod": [410, 421, 446], "todai": 175, "todens": [978, 979, 980, 981, 982, 983, 984], "todo": [80, 244, 382, 386, 410, 1054], "toeplitz": 110, "togeth": [43, 51, 84, 93, 103, 142, 154, 170, 176, 186, 195, 234, 237, 250, 267, 317, 324, 344, 357, 361, 380, 390, 391, 392, 410, 417, 418, 419, 425, 453, 455, 570, 571, 597, 692, 718, 803, 817, 867, 868, 881, 1000, 1001, 1004, 1005, 1011, 1014, 1020, 1021, 1028, 1041, 1052], "toi": [48, 58, 71, 74, 75, 76, 77, 81, 82, 85, 86, 88, 89, 90, 100, 111, 116, 124, 137, 150, 155, 156, 183, 196, 203, 217, 227, 239, 250, 256, 297, 298, 307, 338, 347, 371, 384, 390, 410, 417, 418, 442, 443, 444, 446, 448, 450, 451, 452, 454, 460, 471, 515, 517, 525, 566, 642, 680, 729, 759, 801, 853, 860, 868, 887, 911, 1001, 1003, 1004, 1010, 1014, 1025, 1030], "tok": [354, 418], "token": [2, 57, 354, 365, 373, 382, 418, 539, 591, 592, 593, 594, 1035, 1043, 1047, 1053], "token_featur": 418, "token_freq": 354, "token_pattern": [354, 418, 591, 592, 594], "tokoroten": 1040, "tokyo": [875, 1015], "tol": [46, 49, 55, 105, 120, 144, 149, 168, 181, 194, 204, 206, 220, 221, 227, 229, 240, 251, 257, 259, 309, 323, 348, 352, 380, 384, 417, 422, 445, 449, 451, 454, 461, 464, 473, 474, 480, 484, 485, 486, 534, 535, 536, 538, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 562, 563, 564, 565, 605, 630, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 675, 677, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 694, 696, 698, 800, 801, 817, 856, 864, 865, 902, 903, 907, 908, 909, 910, 911, 912, 913, 989, 1000, 1018, 1019, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "tola": 1045, "told": 418, "toledano": 1043, "toler": [80, 105, 149, 181, 204, 206, 229, 230, 345, 354, 373, 380, 387, 410, 422, 445, 449, 454, 461, 464, 473, 474, 480, 484, 485, 486, 534, 535, 536, 538, 539, 543, 544, 545, 546, 547, 548, 550, 551, 562, 563, 564, 565, 630, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 679, 681, 682, 684, 685, 686, 687, 691, 692, 693, 694, 696, 697, 698, 847, 848, 852, 856, 864, 865, 902, 903, 907, 908, 909, 910, 911, 912, 913, 989, 1000, 1004, 1018, 1019, 1047, 1048, 1049, 1050], "toleranbc": 1044, "tolist": [43, 126, 145, 181, 270, 322, 373], "tom": [0, 399, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tom1092": 1048, "toma": 1039, "tomasz": 1048, "tomato": 214, "tomatti": 1050, "tomdlt": 1041, "tomiock": [1050, 1051], "tommaso": 1048, "tommi": [1042, 1043, 1044], "tomographi": [42, 55, 99, 183, 655, 675, 1000, 1025], "tomohiro": 1048, "tomorrow": 409, "tom\u00e1": [1048, 1049], "tongyu": 1052, "toni": [45, 373, 566, 887, 1010, 1048, 1049], "tonk": 1042, "too": [43, 46, 51, 52, 55, 64, 79, 83, 88, 90, 95, 102, 106, 113, 124, 146, 149, 181, 186, 188, 198, 214, 217, 234, 244, 250, 257, 264, 265, 269, 278, 284, 308, 317, 341, 352, 358, 359, 365, 375, 378, 384, 386, 390, 392, 408, 410, 412, 414, 417, 418, 419, 422, 439, 451, 541, 682, 695, 710, 842, 843, 844, 845, 846, 872, 885, 887, 999, 1001, 1003, 1004, 1006, 1007, 1011, 1036, 1039, 1042, 1043, 1044, 1045, 1047, 1053], "took": [0, 43, 77, 279], "tool": [21, 29, 41, 48, 50, 52, 144, 186, 247, 265, 269, 274, 361, 371, 372, 373, 376, 378, 380, 381, 383, 384, 385, 386, 391, 392, 393, 395, 396, 401, 404, 410, 411, 412, 489, 695, 704, 993, 999, 1000, 1004, 1010, 1014, 1019, 1021, 1023, 1024, 1028, 1042, 1045, 1048, 1049, 1050], "toolbox": [390, 1023, 1028], "toolchain": 376, "toolkit": [365, 1023, 1028], "toolset": 1028, "tooth": 121, "tootoonian": 1048, "top": [2, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 84, 95, 97, 103, 122, 132, 139, 140, 142, 149, 154, 157, 186, 213, 215, 224, 228, 240, 250, 251, 256, 258, 259, 262, 268, 272, 280, 281, 296, 311, 313, 317, 321, 327, 330, 331, 341, 345, 352, 361, 378, 380, 384, 390, 407, 408, 410, 415, 416, 417, 489, 590, 591, 594, 602, 729, 759, 797, 919, 921, 993, 996, 1000, 1002, 1012, 1023, 1028, 1049], "top10": 373, "top5": 352, "top_featur": 54, "top_features_ind": 54, "top_indic": 352, "top_k_accuraci": 1004, "top_k_accuracy_scor": [2, 1004, 1047, 1049], "tophat": [296, 416, 847, 848, 852], "topic": [42, 45, 46, 47, 102, 183, 352, 353, 354, 373, 374, 414, 415, 418, 490, 500, 539, 541, 543, 550, 591, 594, 1000, 1005, 1023, 1024, 1025, 1040, 1042], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [415, 539], "topic_word_prior_": 539, "topisan": 1045, "toplak": 1051, "topolog": [465, 1023], "topologi": [237, 238], "torch": [406, 1053], "torgo": 372, "toro": 317, "toronto": [537, 647, 863], "torr": [1044, 1053], "torrella": [1044, 1045, 1051], "tortois": 1000, "tosequ": 1053, "toshihiro": [1041, 1042, 1048], "toshniw": 1047, "tot": 51, "total": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 359, 360, 366, 372, 373, 375, 384, 392, 407, 410, 416, 418, 421, 433, 446, 467, 484, 485, 486, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 503, 504, 505, 507, 508, 513, 515, 517, 518, 522, 525, 526, 539, 547, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 586, 587, 593, 597, 599, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 679, 680, 681, 682, 700, 707, 708, 716, 732, 733, 734, 737, 741, 742, 760, 772, 786, 787, 790, 797, 798, 799, 803, 817, 828, 829, 830, 840, 841, 842, 843, 850, 852, 858, 865, 882, 886, 908, 910, 913, 915, 916, 917, 918, 951, 993, 1000, 1001, 1004, 1005, 1006, 1007, 1014, 1018, 1019, 1020, 1025, 1036, 1041, 1043, 1051, 1052], "total_cel": 149, "total_fit_tim": 47, "total_sampl": [333, 539], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 154, "totrmsabvgrd": 143, "tottim": 384, "tour": [0, 399, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tournament": 993, "toward": [0, 63, 64, 96, 113, 141, 146, 153, 170, 188, 193, 217, 218, 238, 250, 284, 348, 378, 392, 410, 450, 454, 464, 679, 681, 698, 881, 1003, 1018, 1020, 1022, 1024], "toyota": 51, "tp": [328, 410, 715, 721, 732, 733, 734, 785, 786, 787, 790, 919, 1004], "tp_c": 280, "tpng": 919, "tpot": 1023, "tpr": [50, 241, 250, 265, 268, 280, 281, 385, 705, 709, 792, 1004, 1032, 1035, 1051], "tpr_a": 280, "tpr_b": 280, "tpr_score": 265, "tprs_lower": 281, "tprs_upper": 281, "tr": [266, 375, 382, 410, 412, 471, 472, 473, 474, 475, 476, 477, 478], "trace": [386, 410, 423, 475, 477, 478, 481, 482, 483, 692, 696, 1001, 1046], "traceback": [378, 383, 386, 390, 470, 714, 1027, 1052], "traceord": 140, "tracer0tong": 1041, "trach": 1035, "track": [132, 138, 145, 331, 378, 381, 382, 406, 537, 972, 1005, 1023, 1024, 1042, 1045], "tracker": [377, 381, 386, 390, 393, 396, 404, 1024], "tracking_select": 972, "tractabl": [43, 414, 544, 637, 1023, 1048], "trade": [37, 94, 109, 140, 149, 188, 217, 270, 272, 273, 284, 341, 352, 392, 409, 410, 412, 556, 557, 562, 563, 637, 659, 695, 803, 806, 807, 817, 830, 1001, 1008, 1016, 1018, 1019, 1024], "tradeoff": [88, 137, 183, 245, 253, 263, 278, 279, 280, 281, 352, 365, 378, 386, 416, 518, 567, 701, 705, 730, 792, 833, 868, 887, 907, 1001, 1025, 1044, 1047], "tradit": [55, 88, 213, 228, 353, 367, 408, 417, 418, 635, 697, 1000, 1003, 1014, 1023, 1028], "tradition": 1020, "traffic": 1028, "trail": [380, 987], "train": [2, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 89, 91, 97, 98, 102, 103, 107, 115, 116, 118, 120, 123, 124, 125, 126, 132, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 154, 155, 156, 159, 165, 170, 171, 172, 175, 176, 177, 178, 179, 183, 185, 186, 187, 188, 189, 191, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 213, 214, 215, 218, 220, 221, 222, 225, 227, 228, 231, 240, 243, 245, 249, 258, 260, 263, 264, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 290, 291, 294, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 311, 313, 315, 316, 320, 323, 327, 329, 330, 331, 334, 335, 337, 340, 347, 348, 354, 355, 358, 359, 361, 365, 366, 367, 370, 373, 375, 380, 383, 390, 391, 392, 406, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 422, 439, 442, 443, 445, 446, 449, 451, 453, 454, 455, 456, 461, 467, 471, 472, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 490, 491, 496, 499, 500, 501, 503, 507, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 630, 631, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 692, 694, 695, 699, 706, 744, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 872, 873, 876, 877, 880, 881, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "train_0": 43, "train_4": 43, "train_accuraci": [258, 285], "train_auc": 830, "train_ax": 125, "train_balanced_accuraci": 285, "train_cover_std": 50, "train_dataset": [186, 372], "train_errors_with": 144, "train_errors_without": 144, "train_fract": 1035, "train_idx": [52, 186, 392], "train_import": 188, "train_index": [258, 333, 414, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "train_indx": 414, "train_pr": 144, "train_prec_macro": 414, "train_r2": 830, "train_rec_macro": 414, "train_result": 188, "train_sampl": [64, 228, 229], "train_scor": [221, 317, 348, 356, 809, 826, 830, 831, 834, 999], "train_score_": [147, 417, 562, 563, 564, 565], "train_set": 408, "train_siz": [44, 46, 49, 134, 153, 171, 191, 229, 246, 250, 273, 284, 322, 325, 348, 805, 809, 820, 823, 831, 833, 999, 1035, 1036, 1041, 1042], "train_size_ab": 831, "train_size_idx": 348, "train_sizes_ab": 831, "train_test_s": 246, "train_test_split": [2, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 103, 107, 116, 125, 134, 139, 141, 144, 145, 146, 147, 148, 149, 150, 153, 164, 165, 185, 186, 188, 189, 191, 198, 208, 213, 220, 221, 228, 229, 231, 241, 250, 253, 254, 264, 265, 268, 269, 274, 278, 280, 284, 290, 294, 299, 300, 306, 308, 309, 313, 315, 316, 318, 320, 321, 322, 327, 328, 334, 356, 360, 361, 383, 391, 406, 411, 414, 417, 439, 440, 561, 563, 570, 571, 700, 701, 703, 705, 802, 803, 825, 835, 838, 856, 864, 865, 867, 917, 918, 993, 994, 1004, 1006, 1007, 1012, 1014, 1019, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1048, 1052, 1053], "train_tim": [228, 246, 352, 353], "trainabl": 380, "traine": 1028, "training_data": 170, "training_data_": 1045, "training_idx": 178, "training_indic": 177, "training_noisy_target": 170, "training_sample_indic": 170, "training_tim": [144, 352], "training_time_early_stop": 144, "training_time_ful": 144, "trajectori": 138, "tran": 110, "trans_data": 235, "transact": [96, 265, 328, 375, 410, 412, 421, 423, 446, 450, 477, 537, 541, 543, 550, 566, 647, 667, 688, 689, 728, 729, 759, 772, 1000, 1004], "transax": [79, 95, 237, 240, 258, 299, 313], "transcript": 378, "transcriptom": 695, "transduc": 331, "transduct": [392, 410, 902, 903, 1024], "transduction_": [330, 331, 332, 902, 903, 904], "transfer": [149, 401, 406, 1000, 1024], "transform": [2, 7, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 80, 81, 84, 87, 90, 95, 101, 105, 106, 116, 122, 123, 125, 126, 128, 129, 133, 138, 140, 143, 153, 154, 165, 176, 182, 183, 186, 187, 188, 191, 205, 213, 214, 221, 227, 229, 231, 234, 237, 240, 242, 243, 245, 247, 248, 250, 254, 258, 267, 268, 269, 272, 280, 290, 291, 293, 299, 300, 301, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 325, 327, 328, 341, 344, 345, 352, 354, 361, 372, 373, 374, 375, 378, 380, 383, 387, 392, 401, 404, 406, 408, 410, 412, 413, 414, 415, 417, 418, 419, 420, 426, 431, 434, 439, 443, 444, 445, 447, 449, 451, 454, 466, 467, 468, 469, 470, 484, 485, 486, 487, 490, 491, 499, 506, 511, 512, 517, 518, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 560, 562, 564, 567, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 639, 641, 642, 643, 644, 645, 656, 661, 666, 676, 679, 687, 691, 692, 693, 694, 695, 697, 704, 705, 716, 756, 757, 788, 803, 806, 807, 817, 833, 836, 842, 851, 856, 859, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 905, 907, 909, 912, 913, 926, 928, 940, 943, 945, 993, 994, 996, 998, 1000, 1001, 1004, 1005, 1008, 1018, 1019, 1021, 1023, 1024, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "transform_algorithm": [123, 129, 534, 540, 545, 1051], "transform_alpha": [123, 129, 534, 540, 545, 1048], "transform_dur": 291, "transform_func": 272, "transform_list": 866, "transform_max_it": [534, 540, 541, 545, 1045], "transform_method": 415, "transform_n_nonzero_coef": [123, 129, 534, 540, 545], "transform_n_nozero_coef": 129, "transform_output": [254, 265, 318, 470, 905, 1050, 1051], "transformed_grid": 152, "transformedtargetregressor": [2, 107, 186, 213, 390, 401, 411, 596, 597, 600, 1005, 1043, 1045, 1048, 1053], "transformedtargetregressortransformedtargetregressor": 186, "transformer_": [247, 467], "transformer_list": [106, 411, 866, 869, 994, 1046, 1047], "transformer_nam": [291, 466], "transformer_tag": [926, 940], "transformer_weight": [102, 466, 469, 866, 1040, 1047], "transformermixin": [2, 247, 291, 380, 392, 467, 1043, 1050, 1051, 1052], "transformers_": [466, 469, 1052, 1053], "transformertag": [2, 926, 940], "transfus": 241, "transit": [55, 348, 382, 404, 1046], "transitive_target": 55, "translat": [107, 380, 420, 530, 617, 876, 877, 893, 1001, 1004, 1028], "transluc": 159, "transpar": [67, 313, 988, 1028], "transpos": [62, 271, 422, 541, 543, 550, 663, 664, 665, 666, 791, 951, 989, 996, 1004, 1016, 1035, 1049], "transposit": 951, "trapezoid": [2, 278, 709, 710, 1004], "travel": 0, "travers": [360, 1007, 1011, 1053], "travi": [1035, 1043], "treat": [43, 45, 103, 143, 154, 181, 186, 213, 280, 317, 322, 327, 333, 361, 378, 390, 392, 407, 417, 418, 444, 564, 565, 591, 592, 594, 610, 611, 635, 641, 648, 674, 677, 732, 733, 741, 757, 786, 787, 790, 791, 876, 877, 883, 884, 887, 888, 892, 895, 896, 898, 907, 908, 960, 994, 996, 1000, 1004, 1005, 1011, 1014, 1018, 1020, 1039, 1047, 1051, 1052], "treatment": [112, 185, 372, 409, 415, 471, 476, 1020], "tree": [2, 43, 46, 52, 63, 64, 67, 76, 79, 88, 95, 124, 126, 133, 136, 137, 138, 140, 143, 144, 145, 146, 147, 150, 151, 153, 154, 155, 157, 168, 178, 181, 187, 189, 197, 221, 222, 234, 247, 249, 250, 251, 268, 275, 277, 288, 290, 291, 294, 296, 304, 311, 312, 316, 321, 322, 324, 361, 365, 373, 375, 384, 391, 392, 395, 408, 409, 410, 416, 421, 439, 443, 444, 445, 446, 447, 448, 450, 452, 459, 465, 499, 503, 507, 517, 518, 522, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 634, 635, 636, 637, 661, 691, 695, 705, 706, 714, 745, 751, 791, 793, 809, 824, 830, 831, 833, 842, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 868, 871, 880, 915, 916, 917, 918, 919, 920, 921, 946, 994, 1001, 1004, 1005, 1010, 1011, 1023, 1024, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "tree_": [320, 356, 360, 852, 915, 916, 917, 918, 1052], "tree_copi": [847, 848], "tree_disp": 251, "tree_importance_sorted_idx": 189, "tree_optim": 288, "tree_preprocessor": [154, 213], "tree_stat": [847, 848], "treelit": 1023, "trein": 1038, "tremend": [317, 417], "trend": [151, 175, 187, 243, 307, 1028, 1042], "trent": [1028, 1041], "trevor": [168, 200, 325, 375, 631, 659, 724, 726, 727, 994, 1000, 1016, 1039, 1040, 1043, 1044, 1045, 1047], "trevorstephen": [1039, 1041], "tri": [99, 128, 233, 284, 300, 345, 366, 380, 383, 390, 393, 408, 451, 453, 455, 634, 635, 636, 673, 695, 701, 703, 705, 817, 1009, 1037, 1043, 1047, 1053], "triag": [0, 378, 381, 393], "trial": [43, 276, 449, 451, 462, 674, 800, 801, 1000, 1041], "triangl": [392, 415, 445, 449, 461, 702, 1002, 1007], "triangular": [410, 465, 614, 1001], "tribe": 373, "trick": [2, 170, 246, 301, 345, 354, 364, 367, 381, 390, 411, 585, 592, 646, 675, 996, 997, 1008, 1018, 1019, 1030, 1036, 1044, 1052], "tricki": [408, 1001], "trickiest": 378, "trigg": 569, "trigger": [103, 104, 378, 382, 392, 404, 411, 864, 865, 867, 868, 933, 934, 951, 1000, 1043, 1049, 1050], "triglycerid": [168, 375], "trim": [228, 410, 847, 848], "trimeta": 1046, "trinh": 1050, "tripl": 383, "triplet": 512, "tripramudya": 1051, "trishnendu": 1043, "tristan": 1000, "triu": 51, "trivial": [48, 215, 265, 356, 378, 410, 821, 909, 912, 1001, 1024, 1035], "troillard": [1051, 1052], "tropp": [538, 544], "troubl": [66, 418], "troubleshoot": 418, "troyanskaya": [631, 994], "true": [2, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 63, 64, 66, 68, 70, 72, 79, 82, 83, 86, 87, 88, 90, 91, 93, 96, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 125, 126, 130, 132, 134, 138, 140, 143, 145, 146, 148, 149, 150, 151, 154, 155, 157, 159, 160, 164, 167, 170, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 198, 200, 201, 202, 204, 206, 208, 209, 210, 213, 215, 216, 217, 220, 221, 227, 228, 229, 231, 233, 236, 237, 240, 241, 244, 246, 247, 248, 249, 250, 253, 254, 256, 259, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 296, 297, 300, 304, 306, 307, 308, 309, 312, 316, 317, 318, 320, 322, 324, 325, 326, 327, 328, 331, 333, 334, 335, 344, 345, 347, 348, 349, 352, 353, 354, 356, 357, 360, 361, 365, 366, 371, 373, 374, 376, 378, 379, 380, 383, 384, 385, 387, 391, 392, 395, 401, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 427, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 522, 525, 526, 527, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 721, 722, 723, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 741, 742, 743, 744, 745, 746, 755, 757, 759, 764, 770, 772, 781, 785, 786, 787, 788, 789, 790, 791, 792, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 821, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 926, 927, 931, 932, 933, 934, 940, 945, 946, 951, 952, 964, 965, 968, 969, 973, 974, 975, 976, 984, 989, 991, 992, 993, 994, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "true_": [200, 540, 639], "true_coef": [185, 198, 208, 284, 649, 650, 655, 663, 664, 665, 684, 685, 686], "true_cov": [471, 473, 474, 480], "true_den": 296, "true_fac": 249, "true_fun": 286, "true_h": 324, "true_k": 353, "true_label": [326, 330, 331], "true_nam": 45, "true_relev": [729, 759], "true_w": 324, "true_weight": 193, "trujillo": [1049, 1050], "truli": [274, 367, 715, 1004], "truncat": [2, 105, 152, 234, 387, 537, 538, 542, 543, 544, 547, 679, 681, 729, 759, 800, 856, 920, 951, 993, 1003, 1004, 1018, 1029, 1030, 1041, 1043], "truncate_mod": 76, "truncatedsvd": [2, 152, 234, 353, 415, 537, 538, 542, 543, 544, 695, 866, 869, 1037, 1042, 1046, 1047, 1049, 1053], "truong": 1041, "trust": [0, 51, 63, 103, 104, 112, 134, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 189, 195, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 325, 327, 332, 360, 393, 404, 408, 1049], "trustworthi": [2, 324, 1043, 1044, 1049, 1050, 1051, 1052], "truth": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 123, 127, 150, 178, 198, 207, 213, 214, 250, 262, 274, 353, 392, 410, 706, 707, 708, 711, 715, 716, 717, 718, 720, 721, 724, 726, 727, 729, 731, 732, 733, 737, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 786, 787, 788, 789, 790, 793, 794, 798, 799, 1004, 1043, 1049], "truthi": [2, 964], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 86, 103, 104, 123, 134, 139, 140, 141, 142, 149, 150, 151, 154, 157, 165, 170, 175, 176, 182, 185, 186, 187, 188, 191, 193, 195, 202, 241, 242, 243, 247, 251, 252, 253, 254, 257, 258, 261, 265, 269, 271, 272, 278, 283, 285, 288, 291, 304, 309, 317, 321, 322, 324, 325, 327, 332, 343, 348, 352, 353, 360, 373, 376, 377, 378, 380, 383, 384, 386, 390, 392, 396, 398, 401, 404, 410, 413, 414, 417, 418, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 506, 570, 580, 592, 661, 676, 678, 692, 696, 802, 803, 806, 807, 815, 817, 825, 828, 829, 830, 832, 885, 887, 890, 892, 893, 894, 895, 896, 897, 898, 907, 926, 932, 987, 993, 1000, 1001, 1010, 1019, 1020, 1024, 1027, 1028, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "tr\u00e9segni": [0, 1037], "ts_cv": [43, 52, 149], "tscv": [414, 824], "tseng": 410, "tsetogl": 1050, "tsilhouett": 91, "tslearn": 1023, "tsne": [2, 183, 233, 234, 235, 237, 238, 292, 293, 324, 392, 424, 434, 499, 691, 692, 693, 851, 855, 868, 977, 1001, 1007, 1025, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "tsne_param": 291, "tsoumaka": [723, 737, 743, 1004], "tspeng": [1050, 1051], "tsuga": 1048, "tsujii": 1018, "tsukada": 1047, "tsuruoka": 1018, "tsutomu": 1046, "tt": [155, 266, 467], "ttang131": 1045, "ttime": 91, "tttthomasssss": 1039, "tube": [913, 1019], "tue": [43, 52, 149, 187, 1041], "tuft": 451, "tuhin": 1053, "tuk": 1053, "tulio": [1043, 1044], "tulken": 1045, "tulloch": [1038, 1039], "tumor": [168, 375, 409], "tune": [2, 43, 64, 79, 88, 103, 125, 134, 140, 149, 167, 168, 170, 181, 183, 187, 202, 217, 218, 230, 237, 241, 250, 263, 264, 274, 275, 276, 278, 288, 293, 312, 333, 341, 345, 348, 352, 361, 365, 366, 367, 391, 392, 405, 408, 410, 414, 417, 419, 420, 454, 464, 499, 554, 562, 563, 564, 597, 616, 617, 618, 620, 622, 623, 625, 626, 628, 646, 661, 662, 693, 697, 703, 705, 721, 745, 787, 790, 802, 803, 819, 825, 830, 833, 863, 868, 887, 905, 912, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1010, 1018, 1019, 1023, 1025, 1030, 1035, 1049, 1051, 1053], "tuned_classifi": 328, "tuned_model": [265, 285], "tuned_model_coef": 285, "tuned_param": 46, "tuned_paramet": [109, 159, 269], "tunedthresholdclassifiercv": [2, 265, 285, 409, 802, 1053], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 265, "tupl": [47, 82, 88, 129, 187, 231, 371, 372, 373, 392, 414, 422, 435, 453, 455, 466, 469, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 503, 504, 505, 507, 508, 511, 513, 514, 515, 516, 517, 525, 536, 564, 565, 570, 571, 572, 573, 585, 586, 587, 590, 591, 592, 594, 630, 635, 636, 637, 714, 715, 722, 745, 784, 786, 800, 803, 817, 830, 847, 848, 866, 867, 877, 878, 882, 885, 893, 897, 909, 910, 911, 912, 913, 922, 934, 935, 937, 942, 943, 944, 945, 969, 970, 987, 992, 1011, 1041, 1042, 1046, 1047, 1048, 1053], "tur": 1053, "turn": [2, 30, 43, 68, 109, 181, 182, 186, 198, 228, 229, 245, 271, 295, 328, 354, 365, 366, 367, 373, 390, 392, 393, 410, 411, 413, 415, 418, 419, 420, 584, 585, 592, 610, 611, 836, 840, 909, 912, 936, 994, 998, 1006, 1009, 1014, 1028, 1040, 1042, 1043, 1048], "turquois": [124, 128, 129, 148, 219, 230, 236, 258, 259, 278], "tushar": 1053, "tutori": [112, 159, 160, 161, 202, 215, 231, 271, 378, 379, 384, 386, 404, 410, 454, 464, 694, 1019, 1030, 1038], "tuveri": 1050, "tuzova": 1043, "tv": 91, "tw": [191, 372, 489, 511, 512, 661, 1019], "tweak": [2, 113, 247, 414, 969, 1003, 1046], "tweedi": [2, 183, 192, 213, 466, 499, 555, 651, 672, 683, 709, 727, 748, 750, 752, 753, 755, 833, 868, 871, 872, 880, 887, 1000, 1025, 1045, 1046, 1048], "tweedie_pow": 231, "tweedieregressor": [2, 43, 321, 324, 651, 672, 1000, 1046, 1049, 1050], "tweet": 1028, "twelfth": 699, "twenti": [57, 244, 375, 407, 410], "twice": [64, 265, 283, 285, 352, 354, 380, 420, 622, 733, 735, 953, 1044, 1052], "twine": 382, "twinx": 333, "twister": 1046, "twitter": 382, "two": [2, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 88, 93, 97, 102, 103, 107, 111, 115, 116, 118, 120, 122, 123, 125, 126, 128, 133, 134, 135, 142, 143, 144, 146, 149, 150, 151, 152, 155, 165, 168, 170, 171, 172, 173, 176, 177, 181, 182, 183, 186, 187, 188, 193, 197, 198, 200, 202, 203, 204, 209, 213, 214, 215, 221, 222, 225, 230, 231, 235, 237, 238, 240, 245, 247, 248, 250, 256, 257, 258, 260, 261, 262, 265, 266, 268, 272, 278, 288, 294, 296, 299, 300, 302, 304, 311, 313, 316, 320, 321, 323, 324, 328, 332, 337, 338, 341, 342, 343, 345, 349, 352, 353, 354, 357, 361, 371, 372, 373, 374, 375, 376, 378, 380, 382, 384, 385, 386, 390, 392, 393, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 443, 444, 445, 446, 447, 449, 452, 453, 454, 455, 459, 461, 466, 471, 472, 473, 474, 475, 476, 477, 478, 490, 492, 493, 495, 496, 497, 499, 501, 503, 504, 505, 506, 507, 508, 510, 513, 517, 522, 525, 539, 541, 543, 547, 550, 552, 553, 556, 563, 573, 584, 587, 593, 594, 595, 598, 599, 601, 602, 603, 604, 605, 606, 609, 610, 611, 613, 614, 623, 624, 627, 631, 634, 635, 642, 646, 648, 673, 674, 676, 695, 702, 706, 707, 708, 715, 718, 719, 722, 724, 725, 726, 727, 734, 735, 738, 739, 741, 744, 746, 757, 758, 760, 766, 767, 774, 777, 780, 781, 782, 783, 784, 788, 789, 797, 798, 799, 800, 836, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 864, 865, 871, 872, 879, 880, 881, 882, 901, 902, 903, 907, 908, 915, 917, 918, 966, 982, 983, 989, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "two_d_arrai": 924, "two_d_label": 927, "two_mean": 79, "two_point_correl": [847, 848], "twoclass_output": 136, "twosigmajab": 1043, "twx": 51, "tx": 413, "tx_k": [413, 998], "txn": 51, "txt": [352, 372, 496, 506], "ty": 413, "ty_k": 413, "tyagi": 1049, "tygert": [538, 544, 951], "tyler": [1042, 1048, 1049, 1050], "type": [2, 46, 52, 86, 87, 98, 101, 102, 112, 118, 126, 129, 142, 143, 145, 175, 182, 183, 185, 186, 187, 191, 198, 213, 215, 242, 247, 252, 254, 255, 257, 258, 261, 262, 265, 266, 272, 277, 278, 280, 281, 282, 284, 285, 288, 301, 317, 327, 345, 352, 354, 360, 361, 366, 371, 372, 373, 375, 378, 381, 382, 383, 384, 391, 396, 398, 404, 407, 411, 418, 434, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 499, 511, 512, 518, 570, 575, 584, 585, 591, 592, 594, 603, 607, 620, 630, 632, 633, 641, 659, 661, 675, 677, 682, 690, 692, 695, 696, 702, 704, 710, 717, 719, 732, 733, 736, 741, 786, 787, 790, 791, 800, 801, 803, 809, 817, 826, 831, 833, 834, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 867, 868, 869, 872, 874, 880, 881, 887, 888, 905, 909, 910, 911, 912, 913, 928, 929, 931, 933, 934, 937, 942, 943, 966, 967, 990, 994, 996, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1014, 1016, 1020, 1025, 1027, 1028, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "type_check": 382, "type_filt": 943, "type_of_target": [2, 392, 874, 888, 1005, 1049, 1050, 1052, 1053], "type_of_target_": 888, "typed_ndarrai": 378, "typeerror": [247, 323, 383, 714, 937, 960, 987, 1042, 1043, 1046, 1048, 1052], "typic": [25, 62, 64, 124, 132, 144, 191, 198, 213, 217, 231, 246, 273, 274, 278, 280, 281, 297, 298, 322, 341, 353, 365, 371, 372, 373, 376, 380, 381, 387, 391, 392, 404, 406, 408, 410, 411, 414, 415, 417, 418, 420, 445, 449, 451, 499, 544, 554, 558, 559, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 632, 641, 643, 646, 657, 658, 659, 674, 685, 686, 715, 874, 881, 885, 888, 950, 951, 956, 960, 963, 988, 993, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1010, 1012, 1028, 1044, 1048, 1051, 1052], "typo": [378, 393, 401, 1035], "tzu": 1039, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 70, 83, 85, 89, 120, 126, 127, 143, 144, 149, 170, 179, 185, 186, 187, 210, 214, 217, 221, 231, 234, 237, 244, 247, 253, 254, 257, 258, 262, 265, 266, 271, 274, 278, 284, 285, 317, 345, 352, 360, 366, 373, 378, 382, 384, 386, 390, 396, 401, 407, 410, 413, 415, 417, 418, 433, 465, 467, 484, 485, 486, 534, 540, 548, 549, 553, 555, 557, 559, 561, 563, 565, 568, 571, 573, 591, 592, 594, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 684, 687, 692, 696, 707, 723, 743, 758, 840, 841, 850, 858, 865, 887, 901, 908, 910, 913, 916, 918, 951, 996, 998, 1003, 1004, 1011, 1014, 1028, 1032, 1045], "u2uwz2": [168, 375], "u_": [407, 484, 485, 486], "u_1": [407, 996], "u_2": [407, 996], "u_i": [410, 484, 485, 486, 758], "u_init": 546, "u_k": [413, 415], "uai": 1016, "ubuntu": [365, 376, 384, 386], "uchida": 1045, "uci": [47, 168, 265, 316, 372, 375, 503, 505, 507, 513], "ucl": 1017, "ucla": 1000, "udi": 1035, "udit": 1049, "ufmay": 1047, "ufunc": [186, 1052], "ugli": [222, 299, 302, 337], "ugo": 1049, "ugurcaliskan": 1039, "ugurthemast": [1038, 1039], "uhmann": 1048, "uieda": 1048, "uint": 1046, "uint32": [373, 500], "uint8": [86, 123, 372, 500, 509, 510, 1047], "uk": 1017, "ulloa": 1041, "ulrik": [410, 454, 464, 694], "ulterior": 52, "ultim": [88, 237, 379], "umar": [1043, 1044], "umass": [45, 57, 373], "umberto": 1047, "umbrella": 409, "umpi": 418, "un": [51, 378, 408, 418, 422, 536, 592, 798, 870, 879, 890, 894, 1044], "unabl": [51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 185, 186, 187, 188, 195, 198, 213, 241, 242, 243, 247, 251, 252, 253, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 325, 327, 332, 360, 367, 887, 1014, 1044], "unadjust": [410, 1004, 1047], "unaffect": 1007, "unalt": 1004, "unambigu": [280, 1005, 1041], "unanim": 393, "unavail": [392, 661, 662, 964, 1042, 1048], "unbalanc": [2, 183, 274, 336, 339, 342, 414, 515, 634, 912, 938, 939, 993, 1018, 1025], "unbias": [109, 408, 412, 415, 439, 553, 659, 675, 677, 690, 1000], "unbound": [72, 1003, 1049, 1053], "uncalibr": [61, 62, 63, 439], "uncent": 195, "uncertain": [271, 331, 377], "uncertainti": [62, 149, 170, 177, 193, 273, 408, 410, 570, 571, 646, 867, 994, 1016], "uncertainty_index": [330, 331], "unchang": [176, 186, 231, 278, 417, 434, 439, 444, 445, 446, 447, 448, 449, 451, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 695, 766, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 854, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 992, 1007, 1043, 1049, 1051], "unclaim": 381, "unclear": [377, 378, 504], "unclust": 448, "uncommon": [412, 661, 907, 1019], "uncompress": [47, 511, 512], "unconstrain": [149, 151, 187, 321, 327, 373, 1018], "uncorrect": [271, 598, 601], "uncorrel": [2, 277, 374, 531, 537, 544, 1004], "uncorrupt": 44, "uncov": [130, 698], "undefin": [52, 274, 392, 715, 732, 741, 786, 972, 1004, 1043, 1047, 1051], "undefinedmetricwarn": [2, 309, 732, 733, 786, 787, 790, 1044], "under": [2, 43, 46, 50, 61, 62, 64, 76, 100, 109, 110, 127, 143, 146, 187, 201, 213, 240, 250, 271, 278, 280, 281, 312, 326, 372, 378, 380, 382, 384, 386, 392, 396, 404, 408, 410, 412, 414, 415, 418, 419, 448, 453, 455, 472, 473, 474, 475, 476, 477, 478, 494, 535, 542, 544, 546, 657, 658, 659, 705, 709, 710, 711, 718, 757, 791, 792, 800, 801, 852, 959, 1000, 1001, 1002, 1004, 1007, 1014, 1018, 1019, 1020, 1023, 1024, 1035, 1037, 1038, 1040, 1043, 1047], "underdetermin": 198, "underestim": [52, 146, 187, 213, 231, 271, 378], "underfit": [43, 70, 146, 170, 183, 188, 214, 217, 263, 284, 306, 317, 348, 417, 660, 803, 806, 807, 817, 829, 830, 867, 882, 999, 1000, 1025], "underflow": [1043, 1048], "undergo": 277, "undergrad": 1028, "underli": [64, 89, 111, 153, 168, 186, 189, 214, 216, 217, 247, 265, 276, 295, 296, 345, 359, 366, 378, 390, 392, 395, 401, 406, 408, 410, 412, 414, 415, 416, 417, 419, 420, 439, 453, 454, 455, 464, 466, 467, 473, 474, 480, 527, 558, 559, 567, 568, 570, 571, 572, 573, 596, 597, 600, 605, 661, 662, 668, 671, 676, 678, 683, 694, 698, 802, 803, 806, 807, 817, 825, 828, 829, 830, 835, 836, 837, 838, 839, 840, 841, 850, 852, 904, 907, 915, 916, 917, 918, 968, 992, 1000, 1001, 1005, 1010, 1017, 1019, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052, 1053], "underrepres": 378, "underscor": [241, 354, 380, 392, 987, 1035, 1045, 1048], "underset": [415, 1000, 1007, 1020], "understand": [43, 48, 52, 76, 134, 175, 183, 187, 247, 265, 266, 269, 285, 322, 323, 338, 345, 352, 355, 356, 361, 377, 378, 379, 384, 390, 395, 410, 417, 418, 507, 833, 864, 865, 915, 916, 917, 918, 921, 993, 994, 1001, 1003, 1020, 1022, 1023, 1025, 1028, 1035, 1049], "understood": [272, 378, 410, 960], "undertak": 390, "undesir": [90, 171, 420, 825], "undistinguish": 414, "undistort": 123, "undo": [272, 877, 1039], "undocu": 1042, "unequ": [90, 1043], "uneth": 185, "uneven": [85, 266, 410, 414], "unevenli": [90, 213, 266], "unexpect": [90, 247, 361, 378, 383, 386, 396, 404, 538, 699, 1004, 1019, 1037, 1043, 1044, 1047, 1049, 1051, 1053], "unexpectedli": [392, 1043], "unfair": 361, "unfinish": [377, 378], "unfit": [2, 89, 411, 435, 466, 572, 573, 605, 614, 1043, 1045, 1052], "unfold": [125, 381, 1001], "unfortun": [146, 185, 186, 231, 386, 390, 417, 511, 512], "unhandl": 1044, "unhelp": 378, "unicod": [354, 418, 489, 506, 585, 591, 592, 594, 968, 1035, 1043, 1047], "unicodedata": [591, 592, 594], "unicodedecodeerror": [418, 591, 592, 594], "unifi": [288, 379, 387, 390, 391, 417, 640, 1023, 1035], "unifom": 294, "uniform": [2, 58, 67, 72, 86, 145, 146, 150, 164, 171, 176, 179, 193, 194, 227, 238, 240, 243, 279, 294, 297, 298, 303, 306, 312, 314, 315, 318, 324, 326, 340, 380, 383, 404, 410, 440, 441, 554, 572, 573, 613, 614, 631, 642, 652, 653, 657, 671, 679, 680, 681, 702, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 807, 815, 817, 842, 843, 846, 849, 850, 857, 858, 872, 884, 886, 896, 938, 953, 993, 994, 1003, 1004, 1007, 1041, 1043, 1045, 1049, 1051], "uniform_averag": [433, 467, 484, 485, 486, 557, 559, 561, 563, 565, 568, 571, 573, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1004, 1044], "uniform_labelings_scor": 72, "uniformli": [72, 140, 146, 163, 240, 256, 320, 380, 519, 520, 521, 554, 645, 807, 815, 817, 886, 993, 994, 1004, 1007, 1014, 1039, 1044], "unigram": [272, 373, 418, 591, 592, 594, 1042], "unilev": 51, "unimod": [240, 476], "unimport": [419, 1012], "uninform": [62, 64, 318, 374, 383, 418, 993, 1000, 1043], "uniniti": 386, "uninstal": 376, "unintention": 1014, "unintuit": 90, "union": [102, 186, 411, 741, 757, 866, 1042], "union_not_memb": 186, "uniqu": [2, 43, 61, 66, 77, 81, 90, 91, 96, 100, 105, 141, 147, 148, 149, 186, 188, 198, 228, 231, 258, 280, 300, 317, 318, 326, 333, 352, 353, 354, 372, 380, 387, 392, 410, 411, 414, 417, 418, 442, 452, 456, 458, 466, 469, 499, 552, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 567, 568, 569, 613, 636, 637, 638, 669, 671, 679, 700, 712, 714, 757, 785, 803, 805, 817, 830, 835, 836, 839, 845, 854, 857, 859, 864, 866, 878, 880, 881, 888, 891, 907, 909, 915, 916, 917, 918, 938, 951, 966, 967, 1000, 1005, 1014, 1028, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "unique_label": [2, 82, 88, 353, 380, 387], "unit": [2, 63, 102, 111, 186, 191, 213, 231, 296, 308, 311, 328, 353, 373, 378, 380, 384, 386, 387, 415, 418, 422, 466, 491, 492, 522, 527, 535, 536, 537, 544, 545, 592, 593, 594, 610, 611, 614, 661, 662, 679, 688, 702, 773, 854, 863, 864, 865, 871, 877, 879, 883, 885, 887, 893, 894, 895, 897, 898, 907, 908, 1000, 1002, 1003, 1004, 1009, 1014, 1020, 1039, 1043, 1049, 1050], "unit_eig_vec": 256, "unit_vari": [885, 897, 1047], "unitari": 951, "uniti": 30, "univ": [692, 696, 1001], "univ_select": 106, "univari": [2, 18, 48, 49, 71, 84, 104, 106, 162, 163, 165, 183, 196, 212, 228, 336, 370, 410, 411, 418, 447, 507, 528, 533, 595, 598, 599, 601, 602, 603, 605, 608, 609, 610, 611, 612, 630, 631, 632, 633, 648, 803, 808, 829, 833, 867, 868, 877, 882, 886, 887, 907, 912, 1000, 1019, 1021, 1025, 1026, 1030, 1035, 1041], "univers": [0, 178, 186, 352, 373, 375, 381, 410, 415, 418, 593, 791, 842, 846, 902, 1000, 1002, 1004, 1006], "unix": 418, "unknown": [52, 89, 186, 247, 271, 330, 332, 367, 373, 392, 404, 407, 418, 874, 880, 881, 966, 1003, 1014, 1039, 1043, 1047, 1048], "unknown_typ": 404, "unknown_v": 154, "unknown_valu": [143, 154, 188, 250, 317, 881, 1014, 1047, 1049, 1050], "unlabel": [38, 45, 248, 322, 330, 331, 332, 334, 335, 392, 410, 902, 903, 904, 1003, 1047], "unlabeled_indic": 331, "unlabeled_set": 330, "unless": [185, 247, 257, 262, 378, 381, 390, 392, 404, 408, 410, 413, 421, 439, 446, 448, 450, 452, 454, 459, 460, 463, 466, 469, 474, 491, 499, 511, 512, 534, 538, 539, 540, 542, 545, 546, 548, 549, 550, 551, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 597, 605, 610, 611, 613, 614, 635, 637, 642, 649, 650, 654, 655, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 712, 717, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 853, 855, 857, 858, 860, 861, 864, 865, 866, 869, 888, 892, 893, 895, 896, 897, 898, 902, 903, 915, 916, 917, 918, 926, 929, 933, 934, 951, 1000, 1003, 1005, 1035, 1037, 1041, 1043, 1046, 1047, 1052, 1053], "unlik": [88, 89, 140, 186, 187, 233, 235, 261, 311, 339, 378, 380, 384, 390, 392, 401, 404, 412, 414, 415, 418, 448, 452, 538, 653, 654, 657, 658, 659, 685, 686, 788, 824, 847, 848, 887, 898, 910, 1000, 1003, 1004, 1011, 1019, 1035, 1041], "unlimit": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918], "unlucki": 361, "unmaintain": 1035, "unmarri": 186, "unmeaning": 1042, "unmix": [121, 422, 536], "unmixing_matrix": 536, "unmodifi": [380, 392], "unnecessari": [140, 256, 383, 430, 445, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 708, 1007, 1014, 1024, 1028, 1038, 1040, 1045, 1046, 1048, 1051], "unnecessarili": [237, 1042, 1045], "unnorm": [392, 539, 1001, 1041, 1042], "unobserv": [149, 185, 186, 415], "unord": [410, 417, 1014], "unpack": 380, "unpen": [408, 651, 672, 683, 1000], "unpickl": [2, 392, 579, 847, 848, 1041, 1047, 1051], "unpleas": 1037, "unpract": 1003, "unprefix": 1041, "unprocess": [452, 591, 592, 594], "unprotect": 969, "unprun": [560, 561, 567, 568, 915, 916, 917, 918], "unquot": 231, "unrealist": 373, "unreason": [231, 414], "unreg": 346, "unregular": [880, 903, 1044], "unrel": [317, 366, 378, 383, 386, 418, 518], "unreli": [265, 411], "unrepresent": 922, "unrestrict": 496, "unrol": 237, "unrot": 130, "unsaf": 537, "unsampl": 996, "unscal": [311, 316, 1000, 1004, 1043, 1049], "unscaled_clf": 316, "unseen": [109, 144, 165, 202, 217, 221, 297, 345, 367, 370, 380, 391, 392, 410, 414, 853, 884, 896, 995, 1004, 1010, 1012, 1014, 1020, 1038, 1043, 1047], "unseen_featur": [418, 584], "unset": [366, 392, 1043], "unsetmetadatapassederror": 401, "unshad": 415, "unshifft": 680, "unshift": 911, "unsign": [86, 124, 373, 585, 968], "unsmooth": 416, "unsort": [1007, 1036, 1039, 1043], "unspecifi": [602, 603, 1001], "unstabl": [74, 99, 186, 406, 410, 412, 413, 692, 696, 950, 951, 1020, 1039, 1040, 1042, 1047, 1049, 1051], "unstack": [231, 274], "unstructur": [53, 71, 74, 75, 76, 81, 183, 210, 237, 308, 410, 443, 447, 465, 506, 533, 860, 1016, 1025, 1028, 1039], "unsuccess": 50, "unsupervis": [2, 6, 27, 34, 45, 51, 72, 82, 104, 105, 116, 120, 139, 152, 240, 248, 297, 298, 340, 352, 353, 361, 370, 373, 380, 391, 392, 410, 413, 415, 416, 417, 418, 419, 434, 444, 447, 535, 537, 539, 540, 542, 545, 546, 552, 566, 569, 570, 572, 573, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 633, 637, 638, 641, 642, 643, 644, 645, 680, 803, 806, 807, 809, 817, 826, 831, 834, 849, 850, 853, 855, 856, 857, 858, 863, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 899, 900, 904, 911, 1001, 1004, 1010, 1017, 1026, 1030, 1035, 1038, 1048, 1052], "unsupport": [401, 404, 496, 1043, 1048], "unsur": 908, "untangl": 125, "untar": 47, "unterthin": [1038, 1039, 1040], "until": [88, 168, 221, 283, 322, 324, 383, 392, 393, 407, 410, 414, 419, 511, 512, 560, 561, 562, 563, 567, 568, 569, 596, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 669, 670, 671, 674, 679, 680, 681, 697, 800, 801, 806, 807, 864, 865, 904, 907, 915, 916, 917, 918, 978, 993, 1000, 1001, 1009, 1017, 1020, 1038, 1042, 1043, 1049], "untransform": [345, 466, 469, 1015], "untru": 1004, "untrust": 404, "untun": [146, 328], "unus": [126, 187, 210, 233, 235, 465, 582, 766, 774, 993, 1001, 1035, 1043, 1045, 1046, 1048, 1050], "unusu": [64, 407, 1010, 1014, 1043], "unveil": 1041, "unvendor": 1043, "unwant": [214, 352], "unweight": [182, 226, 465, 650, 656, 681, 710, 716, 732, 733, 741, 786, 787, 790, 791, 842, 843, 844, 845, 846, 994], "unwieldi": 878, "uoa": 900, "up": [2, 47, 50, 72, 79, 80, 81, 85, 88, 90, 95, 102, 111, 112, 118, 132, 139, 149, 182, 186, 187, 193, 198, 206, 214, 229, 230, 258, 265, 273, 276, 291, 304, 309, 312, 317, 324, 328, 331, 338, 345, 348, 352, 354, 367, 372, 373, 378, 382, 384, 385, 386, 387, 390, 392, 393, 408, 410, 415, 417, 418, 445, 449, 450, 451, 452, 454, 458, 461, 462, 463, 511, 512, 539, 552, 553, 560, 561, 562, 563, 564, 565, 567, 568, 569, 613, 630, 635, 636, 642, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 684, 685, 686, 687, 695, 708, 772, 800, 801, 805, 806, 807, 809, 831, 881, 882, 885, 897, 915, 916, 917, 918, 921, 951, 954, 955, 993, 996, 1000, 1001, 1004, 1007, 1014, 1018, 1019, 1024, 1027, 1028, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "upadhyai": [1041, 1042, 1043, 1044], "upcast": [1045, 1049], "upcom": [175, 376], "updat": [47, 79, 95, 134, 140, 148, 245, 320, 354, 377, 378, 381, 386, 392, 404, 410, 415, 417, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 978, 1000, 1007, 1008, 1009, 1018, 1027, 1028, 1036, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1053, 1054], "update_environments_and_lock_fil": 378, "update_from": 298, "update_func": 298, "update_h": 550, "update_layout": [140, 272], "update_legend_marker_s": 298, "update_terminal_region": 1044, "upgrad": [320, 321, 322, 323, 324, 325, 326, 327, 328, 396, 1024, 1035, 1040, 1043], "upload": [372, 376, 382, 390, 674], "upload_d": 372, "upon": [231, 238, 247, 304, 373, 378, 390, 392, 404, 564, 565, 630, 633, 674, 792, 800, 801, 847, 848, 993, 1000, 1020, 1049], "upper": [43, 46, 48, 61, 104, 107, 110, 111, 112, 122, 126, 136, 137, 138, 145, 146, 147, 148, 154, 156, 164, 174, 176, 179, 186, 207, 213, 219, 220, 223, 227, 230, 231, 244, 248, 249, 270, 271, 272, 285, 296, 297, 307, 316, 333, 340, 343, 345, 347, 410, 416, 465, 591, 592, 594, 598, 616, 617, 618, 620, 622, 623, 625, 626, 628, 635, 636, 638, 640, 653, 657, 680, 738, 791, 880, 881, 909, 910, 911, 937, 1003, 1004, 1007, 1014, 1018, 1019, 1020, 1043], "upperbound": 737, "uppercas": [392, 1048], "uppercase_initi": 418, "upperlimit": 707, "upright": 373, "upstream": [365, 378, 382, 386, 390, 1014, 1044], "upward": [452, 458], "ur": 1046, "urbanowicz": 1004, "urbanowicz2015": 1004, "urcrnrlat": [50, 304], "urcrnrlon": [50, 304], "uri": 55, "url": [51, 52, 55, 168, 372, 375, 380, 382, 494], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1053, "urvang": [1043, 1045], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 116, 118, 119, 122, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 164, 165, 166, 167, 169, 170, 171, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 209, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 225, 228, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 348, 351, 354, 356, 358, 359, 364, 365, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 385, 387, 391, 392, 393, 395, 396, 397, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 420, 421, 422, 423, 424, 426, 428, 429, 430, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 496, 497, 499, 502, 506, 511, 512, 514, 517, 518, 519, 522, 523, 525, 526, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 729, 730, 731, 732, 733, 735, 738, 739, 740, 741, 742, 744, 745, 746, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 766, 767, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 929, 932, 933, 934, 936, 939, 941, 946, 948, 950, 951, 955, 956, 959, 960, 961, 963, 966, 970, 972, 974, 975, 977, 979, 980, 981, 987, 992, 993, 994, 996, 997, 999, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "usa": [270, 373, 904, 994, 1001, 1016, 1017], "usabl": [149, 372, 378, 380, 392, 404, 418, 803, 1035, 1042, 1049, 1050], "usag": [41, 77, 86, 103, 106, 115, 124, 132, 165, 186, 187, 241, 245, 247, 264, 265, 300, 302, 308, 337, 354, 365, 373, 377, 378, 381, 385, 386, 388, 392, 393, 396, 404, 410, 414, 415, 420, 421, 442, 446, 448, 452, 456, 463, 466, 473, 491, 497, 499, 526, 537, 538, 544, 552, 564, 565, 594, 612, 643, 651, 661, 662, 663, 669, 670, 671, 672, 679, 680, 681, 682, 683, 693, 781, 784, 795, 796, 863, 864, 866, 907, 915, 916, 917, 918, 926, 951, 993, 994, 996, 1003, 1004, 1005, 1007, 1019, 1026, 1027, 1030, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "usd": 250, "use_encoded_valu": [143, 154, 188, 250, 317, 881, 1014, 1047], "use_group": 266, "use_idf": [415, 418, 593, 594], "usecas": [321, 324, 326, 410, 565], "useless": [54, 142, 274, 384, 419, 518, 531, 661, 715, 1000, 1014, 1044], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 88, 101, 120, 140, 147, 179, 183, 186, 189, 200, 233, 247, 261, 268, 278, 280, 288, 291, 297, 298, 301, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 361, 365, 366, 372, 376, 377, 378, 380, 382, 384, 385, 386, 390, 391, 392, 396, 398, 401, 404, 408, 410, 411, 412, 414, 415, 417, 418, 419, 421, 422, 423, 424, 427, 433, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 947, 951, 993, 994, 1000, 1001, 1003, 1004, 1005, 1007, 1014, 1018, 1023, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "user_guid": 43, "user_r": 411, "userguid": 1042, "usernam": 396, "userscript": 386, "userwarn": [79, 95, 241, 383, 715, 1014, 1041, 1043, 1048, 1053], "ushtanit": [1047, 1048], "using_kernels_tut": 161, "usp": 44, "usr": 376, "usual": [43, 52, 75, 109, 110, 112, 145, 146, 148, 154, 185, 187, 199, 213, 214, 264, 265, 268, 271, 280, 281, 285, 312, 323, 341, 361, 365, 366, 376, 378, 380, 382, 386, 390, 391, 392, 396, 401, 407, 410, 411, 414, 415, 417, 418, 419, 452, 458, 541, 543, 545, 550, 562, 563, 610, 611, 633, 643, 661, 662, 669, 670, 671, 679, 680, 681, 695, 729, 761, 809, 831, 835, 907, 924, 951, 993, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1014, 1018, 1019, 1020, 1050], "utc": 1004, "utf": [352, 354, 418, 489, 506, 585, 591, 592, 594], "util": [2, 4, 10, 17, 35, 38, 47, 49, 50, 88, 89, 94, 132, 134, 147, 154, 189, 213, 221, 229, 235, 243, 247, 249, 259, 277, 279, 291, 313, 320, 333, 341, 345, 352, 366, 372, 373, 378, 379, 380, 381, 390, 391, 392, 406, 409, 410, 411, 414, 415, 418, 439, 445, 446, 449, 451, 455, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 536, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 584, 585, 591, 593, 594, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 803, 804, 805, 810, 812, 821, 825, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 999, 1002, 1004, 1005, 1014, 1015, 1023, 1028, 1030, 1035, 1036, 1038, 1039, 1041, 1042], "utilis": 1041, "utkarsh": [1041, 1042, 1043, 1044], "utl": 419, "utstat": 647, "uttam": 1048, "uv": [120, 415], "uw": [168, 375, 1047], "uwha": [1048, 1049], "v": [0, 2, 30, 43, 48, 52, 53, 55, 57, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 88, 91, 102, 107, 108, 111, 113, 114, 115, 120, 122, 123, 127, 138, 140, 141, 146, 147, 148, 164, 170, 183, 184, 189, 192, 202, 210, 211, 212, 213, 214, 217, 218, 222, 228, 237, 244, 257, 258, 261, 262, 263, 267, 288, 302, 318, 320, 338, 349, 353, 361, 366, 370, 375, 378, 384, 386, 392, 406, 407, 408, 412, 413, 415, 418, 419, 433, 443, 447, 454, 464, 465, 466, 467, 472, 475, 476, 477, 478, 479, 484, 485, 486, 499, 515, 527, 533, 534, 540, 544, 548, 549, 553, 555, 557, 559, 561, 563, 565, 567, 568, 571, 573, 584, 592, 596, 597, 603, 609, 614, 633, 634, 637, 638, 642, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 679, 681, 682, 691, 698, 702, 704, 707, 720, 739, 740, 742, 757, 758, 760, 791, 798, 803, 808, 815, 817, 829, 833, 835, 836, 837, 840, 841, 842, 850, 858, 860, 863, 865, 867, 868, 871, 874, 880, 881, 882, 887, 888, 891, 901, 907, 908, 909, 910, 912, 913, 916, 918, 922, 998, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1012, 1014, 1018, 1019, 1021, 1025, 1030, 1035, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050, 1053], "v0": [473, 474, 480, 515, 591, 592, 594, 803, 817, 866, 869, 1036, 1043, 1044, 1045], "v1": [265, 325, 372, 396, 800, 801, 1047, 1050, 1051, 1052, 1053], "v10": 265, "v11": 265, "v12": 265, "v13": 265, "v14": 265, "v15": 265, "v16": 265, "v17": 265, "v18": 265, "v19": 265, "v2": [265, 373, 500, 667, 688, 689, 1000], "v20": 265, "v21": 265, "v22": 265, "v23": 265, "v24": 265, "v25": 265, "v26": 265, "v27": 265, "v28": 265, "v3": 265, "v4": 265, "v5": [265, 1043], "v6": 265, "v7": 265, "v8": 265, "v9": 265, "v_": [407, 418], "v_1": 407, "v_2": 407, "v_i": 1009, "v_ih_j": 1009, "v_init": 546, "v_j": [410, 758, 1009], "v_k": [413, 415, 534, 540, 548, 549], "v_measur": [739, 798], "v_measure_scor": [2, 57, 72, 73, 82, 91, 326, 353, 410, 720, 739, 740, 760, 1004, 1044], "v_new": 863, "va": [47, 144, 166, 282, 299, 301, 347], "vac": 288, "vacaliuc": [1043, 1044], "vacat": 373, "vachan": 1046, "vadim": [1043, 1047, 1048], "vaerenbergh": [1050, 1051], "vaggi": [1037, 1038], "vaillant": 1047, "val": [105, 225, 271, 953], "val_errors_with": 144, "val_errors_without": 144, "val_pr": 144, "val_scor": 145, "vale": 1045, "valencia": [1049, 1051], "valentin": [1038, 1040, 1050, 1051], "valero": 51, "valgrind": 381, "valid": [2, 47, 52, 53, 63, 64, 87, 88, 89, 90, 103, 104, 106, 107, 109, 113, 127, 132, 138, 140, 142, 143, 144, 145, 146, 149, 158, 162, 165, 166, 168, 178, 183, 186, 188, 192, 198, 199, 200, 201, 207, 213, 215, 221, 231, 247, 249, 253, 258, 261, 263, 268, 271, 272, 273, 275, 277, 278, 279, 280, 283, 284, 285, 286, 288, 295, 309, 312, 317, 320, 322, 327, 333, 341, 348, 356, 366, 373, 378, 381, 390, 391, 392, 404, 405, 408, 410, 411, 412, 415, 416, 417, 418, 419, 424, 426, 439, 444, 445, 447, 448, 449, 451, 452, 459, 465, 466, 470, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 496, 504, 505, 507, 518, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 578, 580, 585, 586, 592, 596, 597, 600, 605, 635, 637, 641, 642, 643, 644, 645, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 695, 702, 704, 705, 709, 716, 731, 765, 768, 777, 781, 782, 783, 788, 795, 796, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 873, 879, 887, 899, 900, 902, 903, 905, 907, 909, 912, 914, 915, 916, 917, 918, 924, 926, 933, 934, 935, 936, 937, 945, 958, 960, 963, 987, 988, 989, 990, 991, 992, 994, 1003, 1004, 1005, 1007, 1008, 1012, 1014, 1016, 1018, 1019, 1020, 1024, 1025, 1028, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "valid_metr": [847, 848, 1007, 1051], "valid_scor": 999, "validate_data": 2, "validate_metadata": [247, 960], "validate_separ": 992, "validation_curv": [2, 326, 348, 401, 826, 999, 1042, 1043, 1044, 1047, 1051], "validation_fract": [144, 149, 221, 323, 417, 562, 563, 564, 565, 669, 670, 671, 679, 681, 864, 865, 1018, 1043, 1049], "validation_score_": [149, 564, 565], "validation_scores_": [864, 865, 1050], "validationcurvedisplai": [2, 284, 999, 1051], "validationerror": 1049, "vallei": 317, "vall\u00e9": 1042, "valu": [2, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 58, 59, 63, 64, 68, 72, 75, 77, 79, 80, 86, 88, 93, 94, 95, 99, 103, 105, 107, 109, 111, 113, 120, 123, 126, 130, 132, 134, 136, 138, 139, 140, 141, 143, 146, 147, 150, 151, 153, 154, 163, 164, 166, 167, 170, 173, 174, 176, 178, 185, 186, 187, 188, 189, 191, 193, 194, 196, 198, 199, 200, 202, 203, 204, 206, 211, 213, 214, 215, 217, 219, 228, 231, 232, 235, 236, 240, 241, 242, 243, 244, 245, 246, 250, 253, 254, 256, 262, 264, 265, 267, 269, 271, 272, 274, 276, 277, 278, 280, 282, 283, 284, 285, 291, 294, 303, 304, 306, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 322, 328, 333, 341, 345, 346, 348, 352, 353, 354, 356, 361, 365, 366, 367, 370, 371, 372, 373, 375, 379, 380, 381, 383, 384, 385, 387, 390, 391, 392, 395, 396, 401, 407, 408, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 489, 492, 493, 496, 499, 500, 501, 504, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 772, 774, 777, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 928, 930, 931, 932, 933, 934, 937, 938, 939, 941, 943, 951, 953, 960, 963, 964, 965, 966, 967, 979, 980, 981, 993, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1017, 1018, 1019, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "valuabl": [144, 265, 378, 994, 1028], "valuat": 417, "value_count": [43, 52, 187, 265, 285, 288], "value_kei": [390, 922], "value_typ": [420, 620], "valueerror": [2, 247, 248, 380, 384, 401, 470, 580, 606, 620, 638, 674, 717, 839, 857, 866, 872, 886, 932, 934, 936, 937, 988, 989, 990, 1014, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "values_format": [700, 1045], "vamsi": 1050, "van": [0, 372, 399, 412, 471, 476, 537, 630, 695, 699, 994, 1001, 1004, 1010, 1028, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "vandana": 1046, "vander": 194, "vandermond": [214, 1014], "vanderpla": [0, 400, 1022, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "vang": 1048, "vanilla": [213, 406, 409, 410, 449, 451, 462, 632], "vanilla_model": 265, "vanilla_model_coef": 285, "vanrel": 1041, "vanschoren": [372, 1047], "vapnik": [596, 597], "var": [115, 116, 137, 168, 194, 271, 375, 379, 419, 644, 648, 909, 910, 911, 912, 913, 1004, 1043], "var_": [537, 845, 887, 1048], "var_smooth": [845, 1043], "varanasi": [1035, 1038], "vardhan": 1039, "varepsilon": [410, 1018, 1019], "vari": [46, 52, 64, 67, 70, 79, 80, 88, 95, 98, 107, 118, 140, 141, 142, 152, 161, 167, 172, 174, 183, 186, 187, 189, 201, 202, 204, 207, 211, 220, 238, 245, 250, 261, 267, 271, 274, 285, 305, 311, 313, 314, 316, 326, 329, 335, 341, 344, 346, 361, 365, 367, 373, 392, 404, 443, 447, 448, 503, 511, 517, 518, 525, 562, 563, 567, 568, 649, 650, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 684, 687, 706, 766, 822, 826, 831, 833, 834, 864, 868, 872, 887, 904, 912, 915, 916, 977, 996, 999, 1000, 1004, 1007, 1008, 1017, 1020, 1025, 1028, 1042, 1043, 1051], "variabl": [2, 43, 48, 50, 51, 52, 72, 102, 137, 141, 143, 146, 147, 149, 163, 168, 177, 178, 181, 182, 187, 188, 191, 198, 202, 213, 217, 218, 231, 235, 247, 250, 262, 265, 271, 274, 281, 288, 290, 316, 317, 318, 361, 365, 367, 373, 375, 376, 378, 380, 382, 383, 386, 392, 401, 406, 410, 411, 412, 413, 415, 417, 418, 419, 452, 484, 485, 486, 489, 502, 504, 511, 518, 535, 537, 539, 544, 547, 556, 562, 563, 607, 609, 610, 611, 643, 653, 654, 657, 658, 664, 685, 686, 698, 712, 750, 804, 805, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 832, 835, 839, 840, 870, 881, 884, 888, 896, 908, 993, 994, 996, 1000, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1018, 1020, 1023, 1024, 1035, 1040, 1043, 1045, 1048, 1050], "varianc": [2, 37, 43, 44, 52, 64, 79, 88, 90, 95, 105, 109, 111, 115, 116, 120, 121, 122, 125, 126, 127, 128, 130, 133, 148, 149, 177, 183, 186, 192, 194, 196, 198, 202, 203, 209, 213, 215, 218, 231, 261, 265, 268, 271, 274, 280, 281, 285, 300, 306, 311, 316, 328, 353, 361, 370, 374, 387, 407, 408, 410, 412, 413, 414, 415, 416, 417, 422, 443, 447, 451, 465, 524, 527, 535, 536, 537, 544, 547, 552, 553, 558, 559, 561, 562, 563, 568, 606, 610, 611, 614, 628, 646, 647, 648, 655, 659, 660, 663, 665, 675, 676, 677, 678, 679, 690, 713, 731, 788, 800, 801, 845, 856, 871, 877, 883, 885, 887, 893, 895, 897, 898, 916, 918, 978, 979, 980, 984, 998, 999, 1000, 1002, 1007, 1008, 1009, 1012, 1016, 1018, 1019, 1020, 1021, 1025, 1026, 1030, 1035, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "variance_weight": [731, 788, 1004], "variances_": 606, "variancethreshold": [2, 419, 872, 994, 1038, 1045, 1048, 1051], "variant": [2, 64, 78, 120, 180, 182, 183, 271, 323, 324, 353, 354, 384, 410, 413, 415, 418, 420, 451, 462, 492, 496, 497, 515, 518, 546, 562, 563, 568, 618, 622, 625, 626, 630, 633, 641, 642, 644, 648, 675, 707, 804, 808, 810, 811, 812, 821, 829, 850, 868, 904, 994, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1018, 1024, 1025, 1035, 1043], "variat": [2, 43, 46, 51, 72, 98, 118, 151, 168, 175, 176, 182, 183, 186, 218, 255, 257, 262, 268, 282, 290, 301, 321, 341, 375, 404, 414, 415, 445, 449, 461, 539, 646, 675, 677, 678, 800, 801, 821, 822, 824, 993, 1004, 1014, 1017, 1020, 1023, 1025, 1029, 1030, 1038, 1040, 1041], "variegatu": [50, 304, 373, 501], "variet": 317, "varieti": [25, 62, 181, 258, 317, 341, 386, 410, 412, 418, 646, 1007, 1020, 1023, 1028, 1037, 1050, 1051], "varimax": [130, 415, 535, 1047], "variou": [4, 41, 43, 51, 71, 72, 74, 88, 89, 91, 93, 94, 95, 112, 115, 123, 183, 186, 192, 221, 223, 232, 233, 234, 235, 244, 288, 291, 307, 315, 321, 330, 331, 352, 354, 360, 361, 365, 372, 373, 374, 375, 378, 380, 383, 391, 393, 408, 410, 412, 439, 443, 474, 505, 517, 518, 528, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 597, 605, 650, 654, 656, 658, 661, 664, 666, 668, 669, 671, 676, 678, 679, 694, 695, 702, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 867, 907, 908, 993, 994, 1001, 1004, 1007, 1011, 1014, 1018, 1020, 1023, 1025, 1027, 1028, 1035, 1038, 1039, 1052], "varma": 1044, "varoquaux": [0, 393, 399, 1022, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "varun": [1041, 1042, 1043, 1049, 1050], "varunchaduvula": 1053, "vasani": 1046, "vasilei": [1028, 1042], "vasileva": 1049, "vasiloudi": 1040, "vassard": 1049, "vassilvitskii": [410, 449, 462], "vast": [265, 378], "vastli": 316, "vathsala": [1042, 1043, 1044, 1045], "vatsan": 1041, "vavrova": 1042, "vazelh": [1043, 1044, 1045], "vazirgianni": 410, "vb": 539, "vbgmm": [1035, 1039, 1041], "vc": 376, "vcvarsal": 376, "vd": 1053, "ve": [353, 378, 418, 1028, 1042], "veal": 57, "veb2009": 410, "veb2010": 410, "vec": [120, 418, 541, 543, 550], "veclib": [365, 390], "vect": [47, 102, 272, 334, 418], "vect__": 272, "vect__max_df": 272, "vect__min_df": 272, "vect__ngram_rang": 272, "vect__norm": 272, "vector": [2, 17, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 66, 68, 71, 75, 104, 120, 122, 123, 164, 170, 178, 195, 217, 218, 225, 229, 245, 246, 253, 269, 271, 272, 276, 297, 309, 311, 328, 335, 337, 338, 341, 342, 343, 344, 345, 346, 348, 350, 353, 365, 367, 373, 383, 384, 387, 390, 392, 407, 408, 410, 412, 413, 414, 415, 417, 420, 421, 422, 439, 445, 446, 447, 449, 451, 452, 453, 455, 466, 467, 469, 470, 484, 485, 486, 487, 489, 491, 500, 512, 515, 524, 527, 534, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 553, 554, 555, 570, 571, 572, 573, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 625, 626, 628, 634, 641, 643, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 694, 695, 696, 698, 702, 722, 738, 766, 771, 772, 773, 774, 776, 777, 778, 780, 781, 802, 803, 806, 807, 817, 825, 831, 834, 835, 836, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 865, 872, 874, 879, 887, 891, 894, 905, 907, 908, 909, 910, 911, 912, 913, 914, 933, 948, 950, 951, 966, 972, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1014, 1018, 1020, 1025, 1026, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1048, 1053], "vectori": [392, 1045], "vectorizer2": 591, "vectorizer_param": 334, "vectorizermixin": 1045, "vectorizing_tim": 47, "vectors_test": 373, "ved": 1052, "vedaldi": [641, 996], "veenhui": [1050, 1051, 1052, 1053], "veerkhar": 1050, "veerlosar": 1045, "veghit": 1051, "vehag": [213, 231], "vehbrand": [213, 231], "vehga": [213, 231], "vehicl": [213, 231], "vehpow": [213, 231], "vel": 375, "velkov": 1037, "veloc": 378, "vembu": 408, "vempati": 996, "vendor": [247, 1040, 1043, 1044], "venezuela": [50, 304, 373, 501], "venkat": [0, 400], "venkatachalam": [1045, 1046, 1047, 1048, 1049, 1052, 1053], "venkatesh": 1045, "venna": 699, "venthur": 1043, "venu": [0, 392], "venv": [376, 396], "vera": [1049, 1050], "verbos": [49, 77, 83, 87, 97, 102, 104, 106, 154, 272, 308, 309, 311, 323, 334, 352, 376, 382, 392, 442, 445, 449, 451, 454, 456, 461, 464, 466, 469, 473, 474, 480, 534, 539, 540, 541, 542, 543, 546, 548, 549, 550, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 596, 597, 630, 635, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 695, 697, 768, 781, 800, 801, 803, 806, 807, 809, 817, 826, 828, 829, 830, 831, 832, 834, 836, 838, 841, 856, 863, 864, 865, 866, 867, 868, 869, 904, 907, 908, 909, 910, 911, 912, 913, 969, 1024, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1053], "verbose_feature_names_out": [143, 186, 187, 188, 254, 317, 323, 324, 325, 327, 411, 466, 469, 866, 1048, 1052, 1053], "verbose_interv": [800, 801], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 83, 85, 93, 95, 111, 112, 113, 115, 118, 123, 146, 152, 159, 175, 181, 186, 187, 188, 202, 213, 214, 215, 218, 221, 231, 237, 240, 246, 247, 250, 256, 265, 273, 274, 277, 278, 280, 281, 291, 308, 311, 323, 330, 333, 341, 345, 350, 352, 354, 361, 365, 373, 377, 378, 383, 384, 386, 390, 391, 392, 404, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 444, 449, 454, 464, 473, 474, 480, 503, 507, 513, 544, 560, 561, 564, 565, 567, 568, 570, 571, 592, 593, 625, 653, 654, 657, 658, 659, 667, 685, 686, 688, 694, 695, 698, 708, 746, 749, 795, 800, 803, 805, 811, 813, 817, 820, 823, 847, 848, 872, 876, 877, 878, 887, 899, 900, 909, 912, 915, 916, 917, 918, 926, 951, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1035, 1040, 1041, 1043, 1046, 1048, 1050, 1051, 1052], "verif": [373, 1004, 1028], "verifi": [86, 93, 132, 149, 186, 213, 378, 383, 404, 406, 494, 987, 1007], "verlag": 699, "vermeil": 1043, "veronda": 1036, "verrier": 1050, "versa": [186, 268, 352, 410, 420, 444, 610, 611, 836, 1039], "versatil": [420, 1019, 1028], "versicolor": [126, 280, 281, 507], "versicolour": [128, 375], "version": [2, 7, 43, 66, 80, 86, 88, 103, 120, 125, 134, 149, 172, 182, 187, 188, 191, 198, 211, 214, 221, 227, 229, 247, 250, 254, 290, 308, 316, 320, 321, 322, 323, 325, 326, 327, 328, 341, 352, 365, 373, 377, 379, 380, 381, 382, 384, 386, 387, 390, 392, 393, 396, 397, 401, 403, 404, 410, 411, 413, 415, 417, 418, 420, 421, 422, 428, 430, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 511, 512, 513, 515, 517, 525, 526, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 707, 710, 711, 712, 714, 716, 717, 719, 721, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 737, 742, 743, 744, 745, 746, 749, 756, 757, 760, 761, 762, 764, 769, 770, 772, 781, 785, 786, 787, 788, 790, 792, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 816, 817, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 893, 895, 896, 897, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 931, 933, 934, 945, 946, 950, 951, 959, 960, 961, 962, 963, 966, 969, 970, 973, 978, 984, 989, 990, 992, 993, 996, 998, 1001, 1004, 1006, 1008, 1010, 1012, 1017, 1018, 1020, 1023, 1024, 1027, 1031, 1033], "versionchang": 378, "versionwarn": 382, "versu": [67, 122, 133, 152, 154, 161, 172, 183, 186, 192, 222, 228, 240, 245, 246, 248, 259, 263, 266, 288, 297, 299, 313, 329, 334, 337, 338, 340, 341, 345, 410, 414, 417, 420, 507, 537, 559, 613, 634, 642, 661, 662, 669, 671, 677, 678, 679, 680, 786, 803, 808, 829, 839, 868, 903, 904, 911, 912, 916, 993, 1000, 1004, 1005, 1010, 1017, 1018, 1019, 1025, 1043], "vert": [147, 188, 189, 320, 1018], "vertex": [55, 63, 410, 455, 1048], "vertic": [45, 55, 93, 145, 189, 202, 244, 245, 275, 290, 311, 314, 346, 347, 392, 407, 410, 415, 518, 700, 784], "verticalalign": [51, 63, 74, 75], "vese": 1047, "vesteghem": 1045, "veto": 393, "vettigli": 1044, "vga": 57, "vh": 951, "vi": [45, 47, 373, 702, 1043, 1046], "via": [0, 2, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 370, 375, 376, 379, 380, 382, 386, 390, 391, 392, 393, 396, 401, 407, 408, 410, 411, 413, 414, 415, 419, 420, 439, 504, 538, 542, 544, 546, 549, 562, 563, 570, 571, 600, 614, 619, 624, 627, 630, 641, 642, 643, 644, 659, 669, 671, 674, 676, 679, 690, 692, 695, 696, 712, 803, 817, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 845, 853, 864, 866, 867, 868, 887, 888, 993, 998, 1000, 1001, 1003, 1004, 1005, 1011, 1012, 1018, 1019, 1024, 1025, 1028, 1030, 1035, 1039, 1040, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "viacheslav": 1041, "viard": 1046, "vibrantabhi19": 1042, "vicdemand": 149, "vice": [186, 268, 352, 410, 420, 444, 610, 611, 836, 1039], "vicent": [1048, 1049, 1050], "vicpric": 149, "victoireloui": 1049, "victor": [410, 454, 464, 1042, 1045], "victoria": 149, "video": [325, 372, 381, 506, 1005, 1028, 1030], "vie": 1041, "viega": 1004, "view": [43, 77, 80, 109, 122, 149, 187, 210, 252, 365, 367, 378, 410, 418, 539, 648, 660, 847, 848, 922, 1000, 1001], "view_init": [187, 233, 235, 237], "viewabl": 378, "vighnesh": [1040, 1041, 1043], "vignesh": 1051, "vigni": 1052, "vijai": [1028, 1038], "vijalapuram": 1043, "vijeth": [1051, 1052], "vijitbenjaronk": [1042, 1043], "vika": [1047, 1049], "vikram": [1041, 1050, 1051], "vikrant": 1049, "vila": [1045, 1047], "vilhelm": [1042, 1043], "villalba": [1040, 1043, 1047], "villanova": [1047, 1048], "villaz\u00f3n": 1047, "villu": 1041, "vil\u00e9m": 1048, "vinayak": [1039, 1040, 1041, 1043, 1044, 1050, 1051], "vincent": [0, 400, 1028, 1035, 1037, 1039, 1040, 1042, 1045, 1050, 1051, 1052], "vineet": 1053, "vineyard": 317, "vinh": [410, 707], "vinh10a": 410, "viniciu": [1047, 1048], "vinit": 1043, "vink": [1046, 1048], "vinod": 1043, "vin\u00edciu": 1043, "viola": [373, 1043], "violat": [62, 341, 386, 390, 392, 638, 937, 1011, 1018, 1020], "violet": [127, 1051], "violeta": 1047, "vipin": 410, "viraj": 1043, "virchan": 1053, "virgil": [0, 400, 1035, 1036, 1038], "virgilefritsch": 1035, "virginica": [126, 128, 280, 281, 375, 507, 1004], "viridi": [66, 73, 291, 700], "viridis_r": 272, "virshup": 1052, "virtanen": 1040, "virtual": [379, 396, 414, 1028], "virtualenv": [376, 378], "visag": 1028, "visconti": 1039, "vishaal": [1043, 1044], "vishal": 1050, "vishwakarma": 1049, "visibl": [52, 186, 187, 215, 350, 372, 378, 410, 863, 1009, 1040, 1050], "vision": [537, 761, 762, 996, 1000, 1002, 1020, 1023, 1028, 1036], "visit": [360, 378, 1011, 1027], "visual": [2, 27, 42, 43, 48, 52, 58, 62, 66, 68, 78, 80, 82, 85, 90, 93, 94, 111, 115, 119, 122, 124, 127, 129, 139, 140, 147, 149, 150, 152, 156, 157, 166, 178, 182, 183, 187, 189, 198, 204, 213, 215, 231, 233, 234, 238, 239, 242, 245, 251, 252, 261, 263, 264, 267, 268, 272, 273, 276, 278, 280, 281, 296, 300, 301, 303, 305, 307, 311, 315, 316, 320, 322, 331, 345, 370, 374, 376, 384, 385, 407, 412, 414, 415, 416, 417, 440, 443, 447, 448, 456, 473, 474, 499, 505, 507, 510, 513, 517, 525, 535, 537, 544, 567, 569, 634, 636, 648, 661, 692, 695, 700, 701, 703, 704, 705, 721, 730, 785, 792, 804, 805, 808, 809, 820, 821, 822, 823, 824, 826, 833, 864, 868, 872, 876, 877, 879, 883, 884, 885, 887, 907, 909, 910, 912, 913, 921, 947, 999, 1001, 1002, 1007, 1008, 1010, 1011, 1014, 1020, 1023, 1025, 1030, 1038, 1045, 1046, 1047, 1049], "visualis": [120, 123, 130, 248, 547, 679, 681, 804, 805, 808, 820, 821, 822, 823, 824, 1007, 1024], "visualize_group": 266, "vitor": 1050, "vivek": [1042, 1043, 1044, 1052], "viz": [281, 385], "vjacheslav": 1039, "vlad": [0, 120, 399, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "vladimir": [538, 951, 1000, 1045, 1049, 1052], "vlahava": [723, 743, 1004], "vlajic": [1046, 1047, 1053], "vlasio": [1028, 1042], "vlasovet": 1048, "vlb": 57, "vliet": 1047, "vline": [109, 122, 200, 202, 214, 271, 284, 312], "vlines_": 635, "vlo": 51, "vmax": [66, 84, 113, 120, 123, 130, 173, 176, 193, 198, 204, 229, 245, 260, 266, 308, 341], "vmin": [66, 75, 113, 120, 123, 130, 173, 176, 193, 198, 204, 229, 245, 260, 266, 308, 341], "vnherdeiro": 1045, "vo": [1041, 1049], "voc": 1004, "vocabulari": [118, 228, 352, 353, 390, 418, 591, 592, 593, 594, 1006, 1035, 1037, 1040, 1043, 1046, 1048], "vocabulary_": [354, 418, 584, 591, 594, 1035], "void": 379, "vol": [64, 178, 198, 265, 277, 375, 410, 476, 562, 563, 631, 638, 648, 667, 688, 689, 800, 832, 844, 994, 1006, 1007], "volgen": [407, 722], "voltag": 57, "volum": [0, 99, 110, 168, 175, 373, 375, 410, 412, 475, 537, 772, 1000, 1019, 1028], "volume11": 410, "volume2": 679, "volume7": [669, 670], "volunt": 386, "voluntari": 352, "von": [410, 454, 464, 694, 1042, 1043], "voronoi": [80, 99, 410], "voss": 1043, "vote": [2, 14, 133, 135, 140, 154, 155, 156, 183, 290, 345, 392, 393, 504, 558, 559, 560, 563, 567, 568, 572, 573, 660, 835, 849, 850, 855, 857, 1005, 1007, 1025, 1026, 1030, 1035, 1038, 1040, 1045], "votingclassifi": [2, 63, 64, 133, 183, 222, 401, 417, 507, 567, 573, 634, 661, 845, 849, 912, 915, 993, 994, 1025, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053], "votingregressor": [2, 157, 401, 417, 572, 994, 1044, 1045, 1046, 1049, 1052, 1053], "votingregressorifittedvotingregressor": 157, "voxel": [80, 99, 588], "vp": 1028, "vq": 91, "vqean3": [1043, 1044], "vredevoogd": [1037, 1038], "vrigazov": 1050, "vrishank": [1042, 1043], "vs_buildtool": 376, "vstack": [51, 63, 90, 98, 173, 174, 196, 256, 260, 291, 304, 346, 634, 1005, 1043], "vstolbunov": 1040, "vt": 553, "vufg": 1043, "vukolov": [1043, 1044], "vulner": 404, "vuw": 533, "vvz2010": 996, "vx": 72, "vya": [1043, 1044, 1045], "vyom": [1050, 1051], "vz2010": 996, "v\u00e1zquez": 1038, "v\u0103n": 1050, "w": [2, 45, 51, 53, 66, 70, 75, 77, 91, 97, 129, 168, 181, 212, 217, 230, 247, 248, 256, 257, 258, 261, 262, 282, 309, 323, 324, 345, 346, 348, 354, 361, 366, 373, 375, 384, 404, 410, 411, 415, 417, 418, 422, 427, 433, 439, 467, 471, 474, 476, 484, 485, 486, 526, 541, 543, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 591, 592, 594, 597, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 696, 702, 728, 729, 759, 802, 803, 817, 825, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 857, 858, 864, 865, 900, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 948, 953, 1000, 1004, 1008, 1009, 1014, 1016, 1018, 1019, 1045, 1049, 1050, 1051, 1052], "w0": 118, "w1": [118, 417, 660], "w1992": 417, "w2": 417, "w3": 417, "w_": [415, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 1000, 1004, 1006, 1009], "w_0": 1000, "w_1": [417, 1000, 1008], "w_1x_1": 1008, "w_2": [417, 1000, 1008], "w_2x_2": 1008, "w_3": 1000, "w_4": 1000, "w_5": 1000, "w_i": [417, 995, 1004], "w_ij": 663, "w_init": [422, 536], "w_intercept": [907, 908], "w_j": [649, 655, 1004, 1018], "w_k": [410, 417, 1000], "w_l": 1000, "w_mx_m": 1008, "w_n": 417, "w_new": 415, "w_p": 1000, "w_pad": [120, 142, 357], "w_x_1": [907, 908], "w_x_n": [907, 908], "wa": [0, 43, 47, 53, 64, 75, 102, 103, 111, 116, 118, 151, 154, 168, 179, 186, 191, 217, 237, 247, 250, 262, 264, 265, 267, 269, 271, 277, 278, 285, 288, 308, 316, 320, 321, 325, 332, 333, 352, 354, 360, 361, 365, 373, 375, 376, 378, 382, 383, 392, 396, 401, 404, 406, 407, 409, 410, 413, 414, 418, 422, 434, 442, 443, 444, 445, 447, 448, 449, 451, 452, 456, 459, 462, 466, 470, 471, 476, 484, 485, 486, 487, 518, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 556, 557, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 661, 662, 667, 675, 677, 682, 688, 689, 691, 692, 695, 716, 732, 733, 781, 786, 787, 790, 800, 801, 803, 806, 807, 817, 830, 832, 844, 851, 854, 856, 859, 863, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 904, 905, 931, 933, 934, 945, 946, 970, 991, 992, 993, 994, 1003, 1004, 1007, 1010, 1014, 1017, 1020, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wadawson": 1039, "wadsworth": [915, 916, 1020], "waelbenamara": 1046, "wagner": 1049, "wai": [0, 2, 37, 43, 55, 64, 83, 93, 103, 106, 139, 145, 150, 152, 168, 177, 186, 188, 189, 214, 217, 218, 228, 231, 242, 243, 246, 247, 250, 251, 266, 271, 278, 280, 311, 312, 323, 325, 326, 361, 365, 366, 367, 372, 374, 376, 377, 380, 381, 382, 386, 387, 392, 393, 396, 401, 404, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 425, 445, 446, 453, 454, 455, 461, 462, 464, 465, 471, 499, 558, 559, 566, 575, 592, 602, 603, 614, 635, 669, 670, 679, 680, 681, 702, 707, 709, 720, 739, 740, 757, 758, 760, 766, 777, 781, 791, 798, 828, 836, 853, 874, 880, 885, 891, 917, 918, 974, 977, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1023, 1024, 1027, 1028, 1035, 1037, 1043, 1048, 1049, 1053], "waijean": 1048, "wainwright": [724, 726, 727], "waist": 375, "wait": [55, 376, 378, 382, 392, 669, 670, 671, 679, 681, 1047], "waithera": 1045, "wal": 51, "waldo": 325, "wale": 149, "walk": [410, 416, 1038], "walker": 1039, "wall": 410, "wallach": [1039, 1040], "walli": 1043, "wallygauz": 1043, "walsh": [1047, 1049], "walt": [1038, 1039, 1043], "walter": 1041, "walton": 325, "wan": 1043, "wang": [415, 539, 682, 692, 696, 729, 759, 1000, 1001, 1004, 1038, 1040, 1041, 1042, 1043, 1047, 1050, 1051, 1053], "wangz10": 1040, "want": [0, 30, 43, 51, 58, 61, 62, 63, 88, 97, 103, 168, 182, 186, 213, 214, 215, 247, 250, 262, 265, 271, 286, 288, 294, 308, 335, 338, 352, 361, 365, 366, 367, 376, 377, 378, 379, 380, 382, 383, 384, 390, 391, 392, 393, 396, 401, 404, 408, 409, 410, 411, 412, 417, 418, 419, 503, 506, 507, 513, 538, 552, 657, 658, 659, 661, 662, 669, 671, 677, 678, 679, 767, 802, 825, 853, 856, 872, 879, 900, 907, 993, 1000, 1003, 1004, 1005, 1008, 1010, 1014, 1015, 1019, 1023, 1024, 1035, 1049, 1053], "ward": [0, 2, 53, 59, 71, 74, 75, 76, 79, 80, 85, 86, 87, 89, 95, 183, 189, 210, 237, 400, 418, 443, 447, 465, 533, 860, 1025, 1035, 1038, 1040], "ward__n_clust": 87, "ward_tre": [2, 87, 443, 447, 1035, 1039], "wardagglom": 1040, "wardagglomer": 1038, "wardclust": 1038, "wareh": 737, "warm": [381, 392, 534, 540, 546, 548, 549, 613, 656, 662, 669, 670, 671, 679, 680, 681, 1000, 1024, 1045, 1047, 1049], "warm_start": [138, 174, 206, 323, 380, 384, 392, 417, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 613, 649, 651, 652, 655, 661, 663, 665, 669, 670, 671, 672, 679, 680, 681, 683, 800, 801, 856, 864, 865, 1010, 1026, 1030, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1049, 1051], "warn": [2, 15, 79, 95, 104, 176, 213, 228, 247, 274, 291, 307, 308, 315, 365, 366, 378, 381, 382, 383, 392, 404, 418, 499, 553, 556, 557, 560, 561, 562, 563, 567, 568, 569, 574, 575, 576, 577, 578, 579, 581, 605, 639, 696, 715, 716, 719, 732, 733, 741, 786, 787, 790, 857, 871, 872, 880, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 941, 951, 960, 973, 989, 990, 1004, 1014, 1035, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "warn_for": 786, "warn_on_dtyp": 1044, "warn_when_not_sort": 862, "warner": [51, 1050, 1051], "warshal": [691, 1001], "warshaw": 1041, "warut": [1042, 1043], "wase": [1052, 1053], "wasn": [102, 247, 1044], "waspa": 541, "wast": [140, 384, 414, 415, 993], "watanab": [1052, 1053], "watch": [52, 366], "watchtheblur": 1047, "water": 50, "waterburi": [1043, 1044], "waterland": 1038, "waterponei": [1041, 1042], "watson": [317, 411], "wattai": 1050, "wav": 372, "wave": [207, 378, 1003], "waveform": 75, "wavelet": [53, 129, 415], "wavfil": 372, "waweru": 1052, "wa\u00ebl": 1053, "wb": [55, 404], "wchathura": 1050, "wclf": 343, "wconnel": 1046, "wdbc": [168, 375], "wderos": 1046, "wdevazelh": 1043, "wdisp": 343, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 86, 88, 89, 90, 91, 95, 97, 98, 99, 102, 103, 104, 105, 107, 109, 111, 112, 113, 116, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 156, 157, 159, 163, 164, 165, 167, 168, 170, 172, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 202, 204, 206, 208, 210, 213, 214, 215, 216, 217, 219, 221, 222, 225, 226, 227, 228, 229, 231, 233, 234, 237, 238, 240, 241, 243, 244, 245, 247, 248, 250, 251, 253, 254, 256, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 296, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 367, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 390, 391, 392, 393, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 452, 471, 472, 473, 474, 475, 476, 477, 478, 504, 526, 534, 535, 537, 540, 548, 549, 552, 564, 565, 566, 572, 573, 585, 586, 592, 614, 620, 630, 635, 636, 641, 643, 654, 658, 661, 662, 669, 671, 676, 677, 678, 679, 680, 695, 721, 723, 729, 749, 759, 767, 784, 802, 809, 825, 826, 828, 849, 850, 851, 853, 855, 856, 857, 858, 859, 870, 879, 880, 881, 887, 892, 893, 895, 896, 897, 898, 900, 903, 907, 911, 926, 945, 946, 956, 967, 969, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053], "wea": 408, "weak": [115, 144, 147, 217, 231, 277, 414, 557, 562, 563, 633, 1007, 1028, 1051], "weak_learn": 134, "weak_learners_info": 134, "weak_learners_misclassification_error": 134, "weaker": [107, 564, 565], "weakest": [356, 1020], "weaklearn": 556, "weakli": 99, "weather": [43, 52, 175, 187, 409, 1000, 1004], "web": [2, 168, 372, 373, 375, 378, 386, 404, 410, 418, 494, 524, 900, 951, 1004, 1014, 1031, 1035], "weber": 1042, "weblog": 410, "webpag": [55, 191, 378], "websit": [372, 373, 375, 378, 381, 393, 396, 1008, 1018, 1027, 1028, 1036, 1037, 1038], "wed": [43, 149, 187], "weed": 607, "week": [43, 52, 149, 327, 377, 378, 393, 499, 1028, 1049], "weekdai": [43, 187], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 149], "weezel": [1050, 1051], "wegelin": 413, "wehenkel": [417, 560, 561, 568, 569, 917, 918], "wei": [0, 400, 1018, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1048, 1051], "weibul": 315, "weidemann": 1049, "weigh": [414, 1042], "weight": [2, 45, 50, 53, 54, 57, 61, 68, 87, 102, 130, 146, 155, 156, 164, 165, 174, 175, 182, 183, 186, 192, 198, 202, 204, 213, 217, 218, 220, 223, 224, 225, 227, 228, 229, 231, 247, 252, 256, 260, 265, 269, 274, 278, 280, 294, 303, 304, 305, 306, 307, 309, 316, 318, 320, 323, 327, 328, 330, 331, 336, 341, 343, 345, 346, 348, 349, 352, 353, 354, 360, 361, 374, 375, 387, 390, 392, 409, 410, 412, 413, 415, 416, 419, 421, 427, 433, 439, 442, 445, 446, 448, 449, 451, 455, 461, 462, 465, 466, 467, 469, 471, 476, 484, 485, 486, 499, 518, 527, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 589, 592, 593, 594, 596, 600, 605, 606, 613, 614, 631, 635, 636, 637, 638, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 692, 696, 700, 701, 703, 705, 706, 710, 711, 712, 715, 716, 719, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 737, 738, 739, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 772, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 869, 872, 886, 887, 888, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 938, 939, 953, 978, 984, 994, 995, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1014, 1017, 1018, 1019, 1020, 1024, 1025, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "weight_concentration_": 800, "weight_concentration_prior": [256, 262, 800, 1003], "weight_concentration_prior_": 800, "weight_concentration_prior_typ": [256, 262, 800, 1003, 1041], "weight_vector": [1035, 1045], "weighted_acc": 401, "weighted_mod": [2, 387], "weighted_n_node_sampl": 360, "weightedmetaregressor": 247, "weights_": [256, 800, 801, 1049], "weights_handl": 226, "weights_init": 801, "weijiadu": 1049, "weinberg": 418, "weinsberg": 1035, "weinstein": 1036, "weisberg": 1000, "weiss": [0, 400, 410, 694, 1035], "weitzenfeld": 1028, "weka": 844, "welch": 1041, "welcom": [377, 378, 386, 393, 1024], "welind": 1035, "well": [0, 8, 43, 48, 51, 58, 61, 62, 64, 70, 74, 86, 90, 91, 95, 102, 109, 116, 126, 134, 135, 137, 140, 144, 146, 152, 154, 168, 175, 177, 185, 186, 187, 188, 191, 198, 200, 211, 213, 214, 215, 217, 221, 233, 234, 235, 238, 240, 244, 247, 250, 258, 265, 271, 278, 280, 282, 288, 291, 294, 296, 297, 298, 318, 321, 322, 323, 324, 325, 326, 327, 328, 345, 348, 352, 353, 354, 361, 373, 375, 377, 378, 382, 384, 386, 387, 390, 391, 392, 393, 404, 408, 410, 412, 414, 415, 417, 419, 421, 424, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 461, 462, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 703, 724, 725, 726, 727, 788, 791, 795, 798, 800, 801, 802, 803, 806, 807, 817, 825, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 949, 950, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1020, 1021, 1023, 1024, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1046, 1053], "wellcom": 0, "wen": 1050, "wenbo": [1045, 1047], "wendi": 1045, "wendling": 1042, "weng": 1019, "wenhao": [1043, 1044], "wenhua": 1041, "wenjian": 1041, "wenliwyan": 1046, "went": [382, 1004], "were": [0, 43, 68, 102, 103, 106, 111, 112, 140, 143, 146, 149, 165, 168, 175, 182, 213, 214, 217, 241, 250, 278, 280, 282, 308, 309, 316, 321, 322, 324, 325, 326, 327, 328, 333, 345, 352, 354, 360, 361, 372, 373, 375, 378, 379, 380, 382, 386, 390, 392, 401, 407, 411, 417, 418, 466, 469, 470, 499, 564, 565, 605, 806, 807, 822, 831, 854, 904, 905, 993, 996, 1004, 1005, 1020, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "weren": [352, 881, 1044], "werman": 1047, "werneck": 1043, "werner": [1042, 1047], "werror": 386, "wersd\u00f6rfer": 1037, "weslei": [593, 733], "westermann": [0, 368, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "western": 418, "weston": [44, 415, 538, 596, 597, 903], "westov": 1043, "wetter": 187, "weyb": 1053, "wfc": 51, "wget": 386, "wh": [415, 541, 543, 550], "wh_i": 415, "what": [0, 2, 43, 48, 51, 52, 75, 85, 86, 116, 121, 125, 142, 185, 186, 202, 219, 221, 229, 242, 247, 254, 308, 352, 354, 356, 361, 366, 373, 376, 378, 379, 380, 382, 384, 386, 391, 392, 393, 395, 409, 410, 416, 417, 418, 506, 539, 591, 592, 594, 649, 655, 699, 892, 893, 895, 896, 897, 898, 915, 916, 917, 918, 1003, 1004, 1005, 1007, 1020, 1024, 1035, 1042, 1053], "whatnot": 352, "whats_new": [382, 386], "wheel": [376, 378, 382, 396, 398, 1045, 1047, 1049], "wheeler": [1046, 1047], "wheelhouse_upload": 382, "when": [0, 2, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 70, 74, 75, 78, 89, 93, 100, 102, 103, 104, 109, 111, 112, 116, 120, 123, 124, 125, 127, 137, 140, 142, 143, 144, 146, 149, 150, 154, 155, 156, 165, 170, 181, 185, 186, 187, 188, 189, 193, 194, 198, 202, 204, 206, 210, 213, 215, 217, 218, 229, 240, 241, 242, 246, 247, 254, 257, 259, 267, 270, 271, 272, 273, 274, 278, 280, 281, 284, 285, 288, 291, 293, 294, 297, 298, 299, 311, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 328, 332, 333, 335, 341, 344, 345, 348, 352, 353, 354, 356, 360, 361, 365, 366, 367, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 396, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 426, 433, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 511, 512, 513, 515, 518, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 581, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 704, 705, 707, 708, 710, 711, 715, 716, 719, 730, 731, 732, 733, 735, 737, 738, 741, 749, 751, 754, 757, 758, 760, 764, 766, 770, 771, 772, 774, 777, 781, 784, 785, 786, 787, 788, 790, 791, 792, 794, 795, 796, 798, 800, 801, 802, 803, 806, 807, 808, 809, 817, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 893, 894, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 926, 928, 929, 932, 933, 934, 941, 945, 949, 950, 951, 952, 954, 955, 956, 961, 964, 972, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whenev": [177, 185, 265, 361, 372, 386, 392, 396, 408, 484, 485, 486, 499, 631, 633, 995, 1003, 1024, 1045], "where": [47, 50, 51, 53, 55, 57, 58, 61, 62, 63, 68, 86, 88, 90, 111, 116, 118, 120, 123, 129, 130, 134, 136, 138, 140, 143, 144, 146, 149, 151, 165, 166, 168, 170, 176, 179, 182, 186, 193, 198, 205, 214, 217, 222, 223, 224, 226, 230, 231, 233, 235, 236, 240, 241, 244, 247, 248, 250, 252, 262, 265, 267, 268, 271, 273, 277, 278, 280, 282, 283, 285, 288, 290, 309, 311, 313, 314, 315, 316, 317, 318, 320, 322, 323, 328, 331, 332, 339, 345, 348, 349, 350, 352, 356, 357, 361, 365, 366, 367, 372, 374, 375, 377, 378, 380, 382, 384, 385, 386, 390, 391, 392, 393, 396, 401, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 433, 439, 446, 449, 450, 454, 463, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 489, 499, 529, 534, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 585, 586, 587, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 612, 613, 614, 616, 618, 622, 625, 626, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 691, 694, 695, 696, 699, 710, 714, 715, 719, 728, 732, 733, 734, 742, 744, 758, 766, 771, 772, 773, 776, 784, 785, 786, 787, 790, 791, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 831, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 877, 880, 882, 883, 886, 887, 893, 895, 901, 902, 903, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 942, 943, 944, 945, 951, 956, 960, 963, 988, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1024, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wherea": [52, 70, 86, 100, 111, 150, 227, 250, 272, 273, 274, 280, 294, 316, 345, 348, 349, 367, 393, 414, 417, 446, 448, 568, 661, 662, 805, 821, 835, 996, 1003, 1005, 1007, 1014, 1020, 1048, 1053], "wherein": 392, "whether": [2, 47, 49, 52, 103, 132, 150, 173, 178, 186, 187, 213, 217, 231, 234, 241, 247, 265, 269, 311, 360, 361, 366, 373, 376, 377, 378, 380, 382, 383, 384, 392, 401, 409, 410, 411, 412, 414, 415, 417, 419, 422, 442, 444, 453, 455, 456, 461, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 485, 486, 487, 489, 490, 493, 495, 499, 500, 506, 511, 512, 517, 525, 530, 534, 535, 540, 541, 542, 543, 545, 548, 549, 551, 555, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 584, 591, 592, 593, 594, 600, 605, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 632, 634, 635, 636, 638, 639, 640, 641, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 693, 697, 698, 700, 701, 703, 705, 707, 714, 715, 745, 764, 770, 777, 781, 785, 792, 802, 803, 806, 807, 808, 809, 817, 821, 822, 825, 826, 827, 830, 831, 833, 836, 838, 841, 842, 843, 844, 846, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 865, 871, 888, 894, 907, 908, 909, 910, 911, 912, 913, 919, 921, 923, 924, 925, 926, 927, 931, 933, 934, 935, 937, 945, 946, 950, 951, 959, 960, 976, 987, 991, 992, 993, 994, 999, 1000, 1004, 1009, 1010, 1016, 1018, 1019, 1028, 1042, 1043, 1044, 1052], "whi": [186, 188], "which": [0, 2, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 70, 72, 74, 75, 78, 79, 80, 82, 86, 88, 89, 90, 91, 98, 100, 102, 103, 104, 107, 109, 111, 112, 116, 118, 122, 124, 125, 126, 130, 134, 137, 138, 139, 140, 143, 145, 146, 149, 150, 152, 153, 154, 155, 156, 157, 159, 163, 165, 167, 168, 170, 171, 175, 176, 177, 181, 182, 185, 186, 187, 189, 191, 193, 194, 198, 202, 206, 213, 214, 215, 217, 219, 221, 227, 229, 230, 231, 233, 234, 235, 237, 240, 241, 244, 245, 246, 247, 248, 250, 251, 256, 257, 261, 262, 264, 265, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 288, 290, 291, 296, 297, 298, 307, 311, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 341, 345, 348, 350, 352, 353, 354, 356, 360, 361, 365, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 395, 396, 398, 401, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 464, 465, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 489, 526, 534, 535, 536, 537, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 582, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 613, 614, 615, 616, 617, 618, 620, 622, 625, 630, 631, 632, 633, 635, 636, 637, 643, 645, 646, 647, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 662, 664, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 710, 712, 719, 720, 722, 723, 726, 728, 729, 737, 738, 739, 740, 745, 746, 759, 761, 781, 782, 783, 784, 785, 786, 792, 800, 801, 802, 803, 806, 807, 808, 809, 811, 813, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 864, 867, 871, 874, 878, 880, 881, 882, 885, 886, 887, 888, 889, 891, 899, 900, 902, 903, 904, 907, 909, 912, 913, 915, 916, 917, 918, 919, 923, 925, 928, 929, 933, 934, 940, 943, 945, 946, 950, 951, 953, 956, 959, 960, 961, 963, 972, 975, 978, 984, 987, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whichev": [410, 417, 448, 547, 564, 565, 636, 653, 657, 659, 667, 685, 686, 700], "whidou": 1048, "while": [0, 2, 25, 43, 46, 47, 49, 51, 55, 58, 61, 64, 70, 72, 74, 78, 79, 88, 95, 99, 102, 105, 107, 118, 124, 125, 134, 137, 140, 141, 144, 149, 151, 154, 168, 171, 176, 178, 179, 181, 185, 186, 187, 188, 191, 193, 195, 198, 201, 202, 207, 213, 215, 217, 229, 240, 243, 244, 247, 248, 257, 258, 262, 264, 265, 266, 270, 271, 272, 274, 278, 279, 280, 281, 282, 284, 293, 311, 312, 313, 316, 317, 318, 320, 323, 326, 327, 338, 341, 352, 354, 360, 361, 366, 370, 371, 372, 373, 374, 377, 378, 380, 382, 383, 384, 386, 387, 390, 392, 393, 404, 408, 409, 410, 413, 414, 415, 417, 418, 419, 420, 421, 422, 446, 466, 469, 470, 485, 487, 499, 524, 535, 555, 560, 561, 562, 563, 567, 568, 569, 570, 571, 572, 573, 578, 585, 591, 592, 593, 594, 597, 600, 605, 609, 637, 646, 649, 650, 652, 659, 660, 661, 662, 679, 680, 681, 682, 711, 733, 757, 777, 781, 791, 797, 800, 803, 804, 805, 808, 809, 810, 811, 812, 813, 817, 818, 819, 821, 826, 828, 829, 830, 831, 832, 834, 842, 853, 855, 857, 858, 859, 866, 867, 868, 869, 870, 883, 895, 900, 905, 907, 908, 915, 916, 917, 918, 929, 955, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1016, 1019, 1020, 1023, 1024, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "whilst": [138, 235], "whisker": 49, "white": [2, 91, 93, 120, 175, 186, 227, 233, 297, 309, 313, 335, 340, 415, 418, 628, 1020, 1035, 1038, 1041, 1045, 1049], "whitekernel": [2, 170, 175, 176, 420, 614, 615, 617, 1046], "whiten": [45, 120, 121, 122, 295, 415, 422, 536, 537, 544, 885, 887, 1014, 1039, 1041, 1049, 1050, 1053], "whiten_solv": [422, 536, 1050, 1053], "whitening_": 536, "whitespac": 418, "whl": 382, "who": [0, 102, 186, 366, 373, 378, 385, 393, 396, 849, 850, 851, 853, 855, 857, 858, 859, 1023, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "whole": [49, 83, 106, 149, 157, 182, 214, 250, 268, 275, 303, 341, 345, 356, 365, 378, 390, 391, 411, 413, 417, 420, 451, 485, 541, 558, 559, 560, 561, 566, 567, 568, 569, 573, 688, 689, 803, 806, 807, 817, 831, 842, 843, 844, 845, 846, 993, 1004, 1014, 1043, 1045], "whose": [2, 88, 110, 111, 112, 168, 175, 213, 241, 339, 373, 386, 387, 392, 408, 410, 412, 417, 419, 420, 423, 439, 440, 441, 450, 463, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 518, 537, 541, 543, 544, 547, 550, 552, 575, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 643, 674, 698, 721, 803, 810, 817, 832, 853, 872, 899, 900, 950, 982, 983, 998, 1005, 1009, 1010, 1011, 1019, 1038, 1043, 1044, 1046, 1049], "why": [64, 72, 85, 120, 134, 140, 149, 186, 188, 191, 202, 265, 268, 271, 288, 352, 353, 378, 386, 392, 410, 412, 415, 421, 446, 449, 453, 1004, 1006, 1019, 1038], "wick": 1047, "wide": [64, 93, 94, 126, 137, 244, 312, 390, 410, 415, 418, 993, 1000, 1023, 1028, 1035, 1037, 1051], "widehat": 173, "wider": [52, 215, 418, 920, 1000], "widetild": 1020, "width": [47, 49, 52, 86, 111, 122, 123, 126, 128, 129, 130, 137, 142, 143, 146, 156, 164, 172, 178, 197, 254, 256, 270, 294, 311, 313, 314, 317, 322, 325, 338, 375, 411, 440, 441, 454, 466, 496, 497, 509, 524, 589, 872, 920, 1014, 1018, 1020, 1043], "wiesel": [412, 423, 477], "wignal": [1038, 1039, 1045, 1046], "wijewardena": [0, 1038, 1039, 1040], "wiki": [55, 61, 384, 386, 598, 639, 671, 674, 698, 708, 849, 850, 855, 856, 857, 858, 885, 901, 915, 916, 1000, 1004, 1020], "wikic": 996, "wikipedia": [37, 42, 61, 183, 386, 410, 598, 610, 611, 639, 659, 671, 674, 685, 686, 698, 707, 708, 710, 712, 715, 719, 721, 729, 732, 733, 734, 737, 738, 741, 746, 759, 786, 788, 789, 791, 792, 795, 796, 849, 850, 855, 856, 857, 858, 885, 901, 915, 916, 951, 996, 1000, 1004, 1007, 1016, 1020, 1025, 1035, 1042], "wikipedia_principal_eigenvector": [55, 1025], "wikipediadet2017": 1004, "wikipediamcc2021": 1004, "wil": 1047, "wild": [2, 45, 371, 496, 497, 511, 512, 1030, 1035], "wilderness_area": 250, "wildli": [296, 1003], "wilei": [375, 994], "wilhelm": [1039, 1041, 1045], "wilk": 408, "wilksch": 1050, "willamett": 317, "willard": 1047, "willdarnel": 1045, "willduan": 1042, "william": [168, 373, 375, 420, 613, 614, 617, 622, 625, 642, 996, 1004, 1008, 1042, 1043, 1044, 1045, 1050, 1051], "williamson": 1045, "willing": [185, 268, 409], "willocx": 1045, "willpeppo": 1047, "wilson": [111, 375, 1035, 1038], "wiman": 1035, "wimld": 1049, "win": [52, 265], "winata": [1045, 1047], "wind": [187, 1005], "windber": 1046, "windiana42": 1051, "window": [57, 334, 373, 378, 380, 381, 386, 418, 1035, 1038, 1042, 1046, 1048, 1049, 1053], "windowsapp": 396, "windowserror": 1051, "windspe": [43, 187], "wine": [2, 48, 253, 316, 317, 371, 513, 1030], "wine_review": 317, "wineri": 317, "winn": 1004, "winter": [43, 52], "winterman": 1036, "wip": [386, 396], "wipf": [648, 1000], "wire": [384, 537, 544], "wiryadi": [1047, 1053], "wisc": [168, 375, 902], "wisconsin": [2, 168, 189, 371, 503, 1012, 1030, 1040], "wise": [2, 46, 63, 178, 214, 240, 281, 311, 353, 365, 392, 408, 410, 414, 415, 419, 460, 534, 537, 540, 544, 548, 549, 552, 553, 556, 558, 559, 562, 563, 595, 598, 599, 601, 602, 603, 609, 643, 655, 703, 757, 835, 854, 884, 897, 898, 901, 976, 978, 979, 980, 981, 984, 996, 998, 1000, 1004, 1005, 1018, 1024, 1035, 1040, 1043, 1044, 1045], "wish": [372, 378, 380, 385, 387, 396, 410, 951, 1042], "wishart": 800, "wissen": 452, "with_cent": [885, 897], "with_error": 704, "with_mean": [383, 887, 898, 1014, 1043, 1048], "with_scal": [885, 897], "with_std": [887, 898, 1014, 1043], "withheld": 414, "within": [2, 41, 43, 58, 93, 139, 141, 144, 149, 153, 165, 167, 168, 209, 214, 215, 225, 231, 247, 251, 269, 270, 274, 311, 312, 322, 339, 342, 345, 348, 354, 361, 365, 373, 378, 382, 387, 390, 392, 393, 401, 406, 407, 408, 410, 411, 414, 416, 417, 421, 446, 450, 463, 465, 466, 468, 471, 476, 518, 552, 570, 571, 572, 573, 596, 597, 635, 695, 699, 702, 713, 728, 784, 800, 801, 808, 809, 821, 822, 831, 832, 847, 848, 849, 850, 855, 857, 858, 859, 866, 867, 868, 880, 888, 892, 893, 895, 896, 897, 898, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 998, 1000, 1001, 1007, 1010, 1014, 1017, 1019, 1020, 1024, 1028, 1037, 1038, 1042, 1043, 1048, 1049, 1051, 1052, 1053], "without": [2, 43, 44, 52, 53, 61, 71, 77, 79, 81, 85, 88, 89, 95, 100, 107, 125, 140, 144, 145, 148, 149, 151, 154, 160, 164, 168, 177, 183, 185, 186, 187, 198, 202, 221, 240, 244, 247, 248, 250, 251, 253, 264, 265, 272, 276, 278, 288, 291, 292, 293, 294, 300, 301, 302, 303, 311, 312, 316, 318, 320, 345, 348, 353, 367, 373, 374, 376, 378, 379, 380, 382, 383, 384, 387, 390, 391, 392, 401, 404, 410, 411, 415, 417, 418, 419, 420, 435, 441, 443, 448, 460, 471, 476, 494, 499, 507, 518, 535, 537, 558, 559, 566, 582, 583, 614, 630, 634, 637, 642, 662, 695, 703, 784, 806, 807, 808, 815, 817, 832, 833, 849, 856, 860, 866, 867, 870, 873, 876, 877, 879, 883, 884, 885, 887, 892, 907, 929, 972, 993, 994, 996, 998, 1000, 1001, 1004, 1007, 1010, 1014, 1018, 1019, 1020, 1023, 1024, 1025, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "withstrok": 75, "witten": 414, "wittenau": 1040, "wk": 708, "wl": 376, "wminkowski": [1047, 1049], "wmt": 51, "wnl": 418, "wo": 418, "wojdyla": [1050, 1051], "wolberg": [168, 375], "wolf": [2, 49, 65, 70, 108, 109, 112, 113, 183, 300, 475, 477, 481, 482, 515, 552, 998, 1025, 1042], "wolframalpha": 1045, "wolodzko": 1048, "wolosonovich": 1043, "wolpert": [417, 570, 571], "wolsza": 1053, "wompner": 1043, "won": [154, 308, 353, 382, 386, 410, 470, 499, 630, 631, 633, 690, 707, 720, 739, 740, 758, 760, 798, 1003, 1014, 1040, 1041, 1046], "wonder": [352, 376], "wonpil": 1000, "wood": 1044, "woolam": 1035, "word": [47, 54, 57, 102, 170, 201, 244, 248, 341, 353, 354, 365, 373, 374, 378, 380, 383, 392, 407, 409, 410, 412, 413, 414, 415, 455, 514, 526, 537, 539, 544, 591, 592, 594, 699, 836, 846, 904, 998, 1002, 1006, 1009, 1014, 1017, 1018, 1028, 1035, 1043], "word_col": 57, "word_scor": 57, "word_token": 418, "wordnetlemmat": 418, "work": [0, 3, 43, 48, 52, 55, 68, 79, 85, 100, 109, 137, 143, 157, 168, 176, 177, 185, 186, 187, 202, 217, 230, 247, 269, 288, 297, 298, 317, 321, 323, 324, 326, 343, 345, 353, 354, 361, 366, 367, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 386, 391, 392, 393, 404, 406, 407, 408, 410, 411, 412, 415, 417, 418, 419, 422, 423, 424, 425, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 462, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 507, 511, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 698, 711, 777, 781, 782, 783, 784, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 951, 955, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1010, 1011, 1014, 1017, 1018, 1023, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "workabl": 383, "workaround": [317, 378, 803, 817], "workclass": [327, 499], "worker": [366, 392, 418, 969, 970, 1050], "workflow": [378, 381, 382, 391, 414, 1027, 1030], "working_memori": [365, 366, 470, 784, 905, 1043], "workingdai": [43, 187], "workload": 1023, "workshop": [0, 410, 418, 842, 1006, 1022], "workstat": 386, "world": [0, 88, 102, 106, 186, 217, 237, 250, 265, 352, 365, 371, 375, 410, 415, 418, 968, 994, 1004, 1006, 1022, 1024, 1028, 1030, 1035], "worldwid": 1028, "wornbb": 1046, "worri": [87, 1001], "wors": [43, 116, 134, 171, 187, 219, 271, 279, 290, 316, 361, 408, 410, 420, 433, 467, 484, 485, 486, 555, 557, 559, 561, 563, 565, 568, 571, 573, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 681, 682, 683, 708, 724, 725, 726, 727, 731, 788, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1004, 1014, 1044], "worse_prob": 271, "worsen": 144, "worst": [168, 213, 317, 375, 410, 446, 449, 711, 732, 733, 786, 787, 790, 795, 796, 832, 1004, 1028, 1035, 1048], "worth": [88, 142, 187, 213, 378, 386, 1028], "worthwhil": [104, 392], "would": [0, 25, 43, 45, 48, 52, 63, 64, 68, 86, 88, 91, 102, 109, 111, 112, 116, 118, 125, 134, 146, 168, 170, 175, 176, 186, 187, 188, 189, 191, 198, 203, 213, 214, 215, 228, 231, 240, 247, 250, 258, 265, 267, 271, 272, 277, 279, 281, 285, 288, 291, 297, 303, 308, 311, 312, 316, 317, 323, 326, 333, 341, 345, 348, 349, 352, 354, 360, 361, 365, 373, 374, 378, 379, 380, 384, 386, 387, 390, 391, 392, 393, 401, 404, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 433, 448, 467, 470, 484, 485, 486, 491, 530, 535, 537, 539, 544, 547, 555, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 586, 587, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 681, 682, 703, 705, 711, 715, 716, 723, 759, 781, 785, 788, 792, 803, 805, 817, 832, 840, 841, 850, 858, 865, 892, 893, 895, 896, 897, 898, 899, 900, 905, 907, 908, 910, 913, 915, 916, 917, 918, 960, 963, 993, 994, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1019, 1023, 1024, 1028, 1032, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wp": [418, 660, 674], "wpd": 352, "wprd": 418, "wrap": [120, 139, 146, 291, 328, 372, 380, 392, 404, 434, 511, 660, 661, 662, 679, 833, 891, 994, 1004, 1007, 1019, 1023, 1035, 1040, 1043, 1045, 1046, 1048, 1050], "wraparound": 379, "wrapper": [2, 64, 291, 384, 387, 414, 420, 547, 623, 671, 674, 745, 907, 1000, 1020, 1023, 1039, 1047], "wrath": 411, "write": [47, 55, 147, 182, 189, 247, 320, 352, 365, 366, 372, 376, 377, 378, 382, 383, 384, 386, 387, 390, 392, 404, 406, 411, 415, 418, 1015, 1024, 1036, 1048, 1052], "writeabl": [933, 934, 1053], "writer": 352, "written": [41, 44, 46, 65, 84, 86, 123, 166, 183, 220, 264, 295, 323, 330, 331, 366, 375, 378, 379, 380, 384, 386, 390, 392, 411, 416, 489, 505, 511, 700, 716, 833, 912, 919, 998, 1000, 1004, 1008, 1009, 1018, 1025, 1044], "wrong": [93, 213, 265, 297, 352, 361, 375, 378, 380, 418, 507, 729, 759, 796, 1004, 1010, 1019, 1038, 1040, 1042, 1043, 1044, 1045, 1048, 1052, 1053], "wrongli": [213, 341, 1053], "wrote": [154, 373], "ws2001": 996, "wspace": [53, 54, 74, 79, 95, 111, 120, 136, 213, 231, 240, 256, 258, 259, 262, 296, 304, 331, 338], "wstate": 1048, "wtv": 384, "wtw": 384, "wu": [1019, 1039, 1047], "wurp": [1049, 1050], "wuthrich": [213, 231], "ww": 415, "www": [45, 103, 191, 213, 229, 231, 285, 290, 308, 372, 373, 378, 386, 410, 414, 444, 451, 489, 511, 512, 534, 537, 540, 544, 647, 661, 667, 674, 688, 689, 856, 863, 915, 916, 1000, 1017], "www4": [168, 375], "wyseguy7": 1041, "w\u00fcthrich": 408, "x": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 235, 238, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 371, 372, 373, 374, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 401, 404, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 496, 497, 498, 501, 503, 504, 505, 508, 509, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 713, 714, 728, 735, 738, 745, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 791, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 926, 928, 929, 930, 931, 932, 933, 934, 937, 948, 950, 951, 952, 953, 963, 964, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1024, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "x0": [51, 205, 222, 236, 254, 311, 338, 392, 431, 466, 570, 571, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888], "x00": 418, "x006": 1036, "x00a": 418, "x00b": 418, "x00c": 418, "x00d": 418, "x00e": 418, "x00f": 418, "x00g": 418, "x00h": 418, "x00i": 418, "x00l": 418, "x00n": 418, "x00o": 418, "x00r": 418, "x00t": 418, "x00u": 418, "x00z": 418, "x0_cat": [324, 1014], "x0_infrequent_sklearn": [324, 1014], "x0_label": 311, "x0_rabbit": [324, 1014], "x0_str_femal": 880, "x0_str_male": 880, "x0l": 1039, "x1": [51, 115, 136, 145, 173, 225, 236, 311, 338, 380, 392, 431, 466, 512, 570, 571, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 702, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888], "x110": 1050, "x1_int_1": 880, "x1_int_2": 880, "x1_int_3": 880, "x1_label": 311, "x2": [115, 136, 145, 173, 225, 254, 380, 411, 591, 632, 702], "x27": [63, 103, 104, 139, 154, 157, 165, 186, 187, 188, 241, 242, 251, 252, 254, 261, 265, 269, 271, 272, 278, 283, 285, 309, 317, 321, 322, 324, 332], "x2_tr": 632, "x3": [145, 254, 411], "x64": 376, "x8": 86, "x86": 376, "x86_64": [381, 396], "x9ft": 418, "x_": [163, 171, 262, 271, 320, 380, 410, 413, 415, 630, 638, 767, 862, 902, 903, 1000, 1006, 1011, 1041], "x_0": [214, 660], "x_1": [120, 163, 173, 210, 214, 413, 415, 417, 420, 616, 628, 660, 880, 907, 908, 1000, 1006, 1008, 1014, 1018], "x_1d": 324, "x_1x_2": 1014, "x_1x_2x_3": 1014, "x_1x_3": 1014, "x_2": [163, 173, 210, 415, 417, 418, 420, 616, 628, 1000, 1008, 1014], "x_20": 334, "x_2d": 341, "x_2x_3": 1014, "x_3": [163, 1014], "x_6": 880, "x_7": 880, "x_a": 315, "x_adult": 327, "x_aniso": [79, 90, 95], "x_axi": [122, 221, 275], "x_b": 315, "x_bimod": 315, "x_bin": 312, "x_bound": [420, 620], "x_c": [484, 485, 487, 1011], "x_calib": 439, "x_california": 182, "x_cardiotocographi": 250, "x_center": 195, "x_check": 934, "x_chisq": 315, "x_cluster": 859, "x_convert": 933, "x_copi": 1046, "x_cu": 406, "x_d": [420, 617], "x_dens": [327, 547], "x_df": 151, "x_diabet": 182, "x_different_covari": 70, "x_digit": [105, 160, 307, 411], "x_dist_graph": 851, "x_embed": [300, 301, 695, 699, 856, 1007], "x_error": 219, "x_errors_larg": 219, "x_featur": [106, 643, 644, 645, 996], "x_filter": 90, "x_fit": 691, "x_fit_": [538, 646], "x_forestcov": 250, "x_full": [181, 182, 311], "x_full_train": 139, "x_gaussian": 315, "x_hashed_lsa": 353, "x_hat": [534, 540, 548, 549], "x_hetero": 127, "x_homo": 127, "x_i": [52, 111, 138, 163, 186, 214, 323, 348, 410, 415, 416, 417, 420, 617, 618, 622, 625, 626, 628, 842, 843, 846, 995, 996, 1000, 1006, 1007, 1008, 1014, 1018, 1019, 1020], "x_idx_sort": 1047, "x_imput": 633, "x_indic": 164, "x_inform": 318, "x_inlier": 298, "x_inv": [591, 594], "x_ipca": 124, "x_iri": 276, "x_isotropic_covari": 70, "x_j": [410, 420, 617, 618, 622, 625, 626, 628, 995, 996, 1000, 1007, 1019, 1020], "x_k": [413, 415, 998, 1007], "x_label": 182, "x_leav": [560, 561, 562, 563, 567, 568, 569, 915, 916, 917, 918], "x_left_lower_corn": [50, 304, 373, 501], "x_legend": 47, "x_list": 314, "x_loadings_": [484, 485, 486], "x_lognorm": [315, 1014], "x_lsa": 353, "x_m": 1008, "x_max": [67, 85, 91, 136, 142, 152, 161, 172, 245, 306, 313, 335, 345, 346], "x_max_": 638, "x_mean": 422, "x_mean_": 1047, "x_min": [67, 85, 91, 136, 142, 146, 152, 161, 172, 202, 245, 306, 313, 335, 345, 346], "x_min_": 638, "x_miss": [149, 181, 182], "x_miss_california": 182, "x_miss_diabet": 182, "x_n": [120, 415, 907, 908, 1006, 1008, 1018], "x_near_unique_categori": 318, "x_new": [89, 411, 415, 419, 434, 444, 445, 447, 449, 451, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 552, 570, 572, 573, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 631, 633, 638, 641, 642, 643, 644, 645, 691, 692, 693, 694, 695, 856, 863, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 899, 900, 1016], "x_new_again": 1016, "x_new_invers": 1016, "x_norm_squar": [766, 1040, 1052], "x_normal": 1014, "x_np": 406, "x_offset": 195, "x_offset_": [647, 648, 1047], "x_origin": [537, 542, 544, 546, 547, 633, 899, 900], "x_out": [325, 871, 880, 881], "x_outlier": [196, 227, 297, 298, 340], "x_p": [410, 448, 1000], "x_pca": 124, "x_plot": [193, 214, 219, 246, 274, 296, 316], "x_plot_ext": 214, "x_plot_scal": 316, "x_po": 290, "x_q": 410, "x_r": [128, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "x_r2": 128, "x_rand": 277, "x_random": 202, "x_reconstruct": [324, 484, 485, 486, 586], "x_reconstructed_kernel_pca": [44, 125], "x_reconstructed_pca": [44, 125], "x_red": 85, "x_reduc": [84, 126, 152, 447], "x_restor": 84, "x_right": 70, "x_rope": 271, "x_rotations_": [413, 484, 485, 486], "x_scale": [195, 877, 893, 1014], "x_scale_": [647, 648, 1047], "x_scaler": 49, "x_score": [298, 484, 485, 486, 487], "x_scores_": [486, 1047], "x_select": 361, "x_shared_covari": 70, "x_shuffl": 318, "x_size": 112, "x_sp": 199, "x_spars": [327, 537, 974, 977], "x_sparse_embed": 569, "x_squared_norm": [259, 462], "x_src": 296, "x_std": [877, 893, 1014], "x_std_": 1047, "x_t": [466, 630, 866], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 125, 134, 137, 139, 141, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 175, 178, 185, 186, 187, 188, 189, 191, 194, 198, 203, 208, 210, 211, 219, 220, 221, 227, 228, 229, 231, 241, 243, 249, 253, 254, 258, 264, 265, 268, 269, 274, 278, 280, 284, 286, 290, 294, 297, 299, 300, 303, 306, 308, 309, 313, 315, 316, 318, 320, 321, 322, 327, 328, 333, 334, 340, 352, 356, 358, 359, 360, 361, 365, 372, 380, 383, 391, 404, 411, 414, 417, 440, 472, 473, 474, 475, 476, 477, 478, 512, 561, 562, 563, 570, 571, 700, 701, 703, 705, 802, 825, 833, 835, 838, 856, 864, 865, 867, 881, 917, 918, 994, 1004, 1006, 1007, 1008, 1010, 1014, 1018, 1019, 1020, 1032, 1035], "x_test_df": 254, "x_test_kernel_pca": 125, "x_test_maxab": 1014, "x_test_minmax": 1014, "x_test_miss": 149, "x_test_no_cf_encod": 318, "x_test_noisi": 44, "x_test_np": 254, "x_test_pca": [45, 125], "x_test_r": 115, "x_test_scal": 254, "x_test_sel": 189, "x_test_select": 361, "x_test_text": 47, "x_test_tran": 1014, "x_test_transform": [361, 414], "x_text": 47, "x_tfidf": 353, "x_thresholds_": [243, 638, 1047], "x_torch": 406, "x_tr": [870, 876, 879, 880, 881, 885, 887, 890, 892, 893, 897, 898], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 125, 134, 137, 141, 144, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 194, 198, 208, 210, 211, 214, 220, 221, 227, 228, 229, 231, 241, 249, 253, 254, 258, 260, 264, 265, 268, 269, 274, 278, 280, 284, 290, 294, 297, 299, 300, 303, 306, 308, 309, 313, 315, 316, 318, 320, 321, 322, 327, 328, 333, 334, 340, 352, 356, 360, 361, 365, 372, 380, 383, 391, 411, 414, 417, 439, 440, 512, 561, 562, 563, 570, 571, 700, 701, 703, 705, 802, 825, 833, 835, 838, 856, 864, 865, 867, 881, 917, 918, 994, 1004, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1032], "x_train_": 614, "x_train_ensembl": 139, "x_train_linear": 139, "x_train_maxab": 1014, "x_train_minmax": 1014, "x_train_miss": 149, "x_train_no_cf_encod": 318, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 186, "x_train_r": 115, "x_train_sel": 189, "x_train_select": 361, "x_train_std_transform": 316, "x_train_text": 47, "x_train_tran": 1014, "x_train_transform": [316, 361, 414], "x_train_valid": 63, "x_tran": [315, 326, 406, 444, 466, 883, 888, 895, 928, 1014], "x_trans_bc": 315, "x_trans_qt": 315, "x_trans_yj": 315, "x_transform": [124, 152, 247, 487, 534, 535, 536, 537, 538, 540, 542, 546, 569, 641, 642, 691, 692, 693, 694], "x_transformed_fit_": 538, "x_true": 236, "x_uniform": 315, "x_val": [144, 1012], "x_valid": 63, "x_valu": 333, "x_vari": 90, "x_weibul": 315, "x_weights_": [413, 484, 485, 486, 487], "x_wrong": 70, "xa": 584, "xanchor": 272, "xarg": 1035, "xavier": [864, 865, 1043, 1044, 1045, 1047, 1048, 1053], "xaxi": [126, 140, 210, 233, 235, 238, 291, 296, 352], "xaxis2": 140, "xb": [115, 886], "xbar_": 552, "xbc": 418, "xc3": 418, "xcjason": 1045, "xcode": 376, "xd": 529, "xdang": 682, "xerox": 51, "xerr": [181, 182, 353], "xethan": 1047, "xfail": [386, 926], "xfc": 418, "xfcche": 418, "xfea": 418, "xff": 418, "xgamma": 688, "xgboost": [149, 151, 417, 1023], "xgrid": [50, 304], "xhan": 1044, "xhy": 1042, "xi": [2, 79, 98, 375, 410, 413, 418, 452, 458, 512, 1018, 1046], "xi_i": 1018, "xi_k": 413, "xiang": 1053, "xiangyin": 1048, "xiao": [0, 389, 399, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "xiaojin": 902, "xiaoyu": 1047, "xiaoyuchai": 1048, "xin": [682, 1000, 1043], "xinfan": [1035, 1036, 1039], "xing": [1043, 1044], "xinv": 872, "xinyu": 410, "xinyuliu12": 1044, "xiong": [1043, 1044, 1049], "xj": 408, "xk": [98, 553], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 94, 109, 110, 112, 113, 115, 116, 122, 126, 127, 135, 136, 138, 143, 145, 146, 147, 148, 149, 153, 157, 159, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 186, 193, 196, 197, 198, 200, 201, 202, 203, 206, 207, 213, 215, 216, 218, 220, 222, 223, 227, 231, 244, 246, 248, 250, 266, 270, 271, 275, 276, 280, 281, 284, 286, 293, 294, 297, 298, 317, 318, 338, 340, 341, 344, 352, 357, 358, 359, 634], "xlim": [51, 63, 79, 91, 95, 105, 109, 110, 111, 122, 136, 137, 138, 153, 159, 171, 172, 186, 193, 203, 205, 212, 219, 222, 227, 240, 248, 257, 262, 266, 280, 286, 297, 298, 340, 345, 346, 349, 359], "xm": [51, 236], "xmax": [50, 109, 203, 205, 222, 223, 304], "xmin": [50, 109, 203, 205, 222, 223, 304], "xn": 512, "xom": 51, "xor": [169, 171, 172, 173, 183, 223, 224, 226, 260, 314, 346, 350, 613, 617, 625, 1000, 1020, 1025, 1042], "xp": [413, 882], "xpreprocessor": 376, "xrang": 1041, "xred": [447, 1051], "xrot": 53, "xrx": 51, "xs_sp": 199, "xsat": 1045, "xscale": [171, 176, 246], "xt": [157, 291, 392, 447, 541, 543, 630, 632, 803, 806, 807, 817, 851, 859, 867, 872, 877, 884, 896, 931, 1051, 1053], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 123, 143, 145, 149, 172, 173, 174, 178, 197, 203, 209, 226, 240, 248, 257, 258, 259, 262, 270, 271, 286, 295, 304, 309, 317, 330, 341, 344, 346, 700], "xtick_period": 187, "xtick_start": 187, "xticklabel": [43, 49, 143, 149, 187, 317], "xticks_label": 145, "xticks_po": 145, "xticks_rot": [45, 700], "xtrain": 304, "xu": [410, 413, 421, 446, 1018, 1048, 1049, 1052, 1053], "xue": [0, 1039, 1040, 1041, 1043, 1044, 1047], "xuefeng": [1052, 1053], "xueqin": [682, 1000], "xun": [1045, 1047], "xuniu": 1050, "xval": 182, "xw": [212, 323, 649, 650, 652, 655, 656, 657, 658, 659, 663, 664, 665, 666, 675, 684, 685, 686, 687, 1000], "xx": [77, 91, 111, 142, 146, 152, 161, 172, 173, 174, 187, 220, 223, 224, 225, 226, 227, 238, 240, 248, 260, 297, 306, 313, 314, 335, 340, 341, 345, 346, 349, 350], "xx0": [136, 634], "xx1": [136, 634], "xx_coarser": 142, "xxx": 392, "xy": [48, 63, 82, 278, 304, 346, 396, 649, 650, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 667, 684, 685, 686, 687, 689], "xycoord": [48, 63], "xyguo": [1041, 1043], "xytext": [48, 63, 191], "xyz": 377, "y": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 74, 75, 77, 78, 79, 85, 87, 89, 90, 93, 94, 95, 98, 99, 103, 104, 106, 107, 112, 115, 116, 118, 122, 124, 125, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 233, 234, 235, 238, 241, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 256, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 290, 291, 293, 294, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 370, 371, 372, 373, 374, 376, 378, 380, 382, 383, 385, 386, 387, 391, 392, 401, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 487, 489, 501, 503, 505, 508, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 701, 702, 703, 704, 705, 709, 714, 729, 735, 738, 744, 745, 759, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 791, 792, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 926, 927, 933, 938, 939, 963, 965, 966, 967, 974, 977, 990, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1018, 1019, 1020, 1024, 1030, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "y0": [51, 236], "y1": [51, 136, 236, 512, 719, 1005, 1006], "y1_label": 46, "y2": [136, 719, 1005], "y2_label": 46, "y3": 1005, "y_": [243, 257, 261, 262, 303, 380, 413, 415, 640, 651, 672, 683, 732, 733, 741, 767, 786, 787, 790, 1000, 1004, 1041], "y_1": [135, 358, 359, 413, 1004, 1008, 1018], "y_2": [135, 358, 359, 1008], "y_20": 334, "y_2d": 341, "y_3": 359, "y_30": 335, "y_50": 335, "y_adult": 327, "y_all": [669, 671, 679, 835, 836, 864], "y_ard": 193, "y_ard_std": 193, "y_axi": [122, 221], "y_bia": 137, "y_brr": 193, "y_brr_std": 193, "y_c": [484, 485, 487], "y_calib": 439, "y_california": 182, "y_coclust": 57, "y_convert": 933, "y_cov": 614, "y_cu": 406, "y_decis": [327, 838], "y_dens": 1005, "y_diabet": 182, "y_different_covari": 70, "y_digit": [105, 160, 307, 411], "y_error": [137, 219], "y_errors_larg": 219, "y_filter": 90, "y_full": [181, 182, 311], "y_full_train": 139, "y_grid_pr": 152, "y_hat": 467, "y_high": 146, "y_i": [138, 323, 348, 408, 417, 995, 996, 1000, 1004, 1008, 1018, 1019, 1020], "y_indic": 878, "y_iri": 276, "y_isotropic_covari": 70, "y_j": [996, 1004, 1006, 1014, 1019], "y_k": [413, 1014], "y_kmean": 57, "y_kr": 246, "y_l": 1004, "y_label": 231, "y_left_lower_corn": [50, 304, 373, 501], "y_limit": 143, "y_loadings_": [484, 485, 486], "y_loc": 352, "y_log_prob": 838, "y_log_proba": 867, "y_low": 146, "y_lower": [93, 146], "y_mask": 334, "y_max": [67, 91, 136, 142, 152, 161, 172, 231, 245, 306, 313, 335, 345, 346, 638, 640], "y_mean": [175, 176, 179, 614, 647, 648], "y_mean_": 1047, "y_med": 146, "y_min": [67, 91, 136, 142, 152, 161, 172, 245, 306, 313, 335, 345, 346, 638, 640], "y_miss": [181, 182], "y_miss_california": 182, "y_miss_diabet": 182, "y_multirf": 153, "y_n": [1004, 1008, 1018], "y_new": 89, "y_nois": 137, "y_noisi": 212, "y_norm_squar": 766, "y_normal": 215, "y_np": 406, "y_numer": [933, 992], "y_observ": 328, "y_onehot_test": 280, "y_org": 938, "y_outlier": 196, "y_pareto": 215, "y_plot": [193, 214, 219, 274], "y_plot_ext": 214, "y_po": 354, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 90, 95, 102, 107, 134, 146, 147, 149, 154, 165, 186, 213, 215, 220, 223, 228, 230, 231, 240, 241, 250, 265, 267, 269, 274, 298, 302, 309, 316, 328, 333, 334, 361, 378, 385, 392, 417, 433, 441, 467, 484, 485, 486, 552, 555, 557, 559, 560, 561, 563, 565, 567, 568, 570, 571, 573, 614, 634, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 700, 701, 703, 704, 705, 706, 711, 715, 716, 721, 724, 725, 726, 727, 731, 732, 733, 737, 739, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 786, 787, 788, 790, 791, 793, 794, 799, 803, 806, 807, 817, 828, 838, 840, 841, 850, 858, 865, 867, 907, 908, 909, 910, 911, 912, 913, 916, 918, 1004, 1006, 1041, 1042, 1044, 1046, 1050, 1051, 1052], "y_pred_ard": 198, "y_pred_bin": 213, "y_pred_chain": 290, "y_pred_empti": [732, 733], "y_pred_enet": 198, "y_pred_ensembl": 290, "y_pred_lasso": 198, "y_pred_lr": 215, "y_pred_nnl": 208, "y_pred_ol": 208, "y_pred_outli": [227, 297, 340], "y_pred_outliers_sgd": 227, "y_pred_ovr": 290, "y_pred_product": 231, "y_pred_qr": 215, "y_pred_ridg": 107, "y_pred_ridge_with_trans_target": 107, "y_pred_scal": 316, "y_pred_seg": 213, "y_pred_test": [227, 297, 340], "y_pred_test_sgd": 227, "y_pred_tot": 231, "y_pred_train": [227, 340], "y_pred_train_sgd": 227, "y_pred_with_": 185, "y_pred_without_": 185, "y_predict": [137, 380, 1035], "y_prob": [62, 64, 173, 440, 441, 712, 838, 864, 1004, 1049, 1053], "y_proba": [145, 148, 316, 392, 712, 867, 1053], "y_proba_sc": 316, "y_rand": 335, "y_reconstruct": [484, 485, 486], "y_rf": 153, "y_right": 70, "y_rotations_": [413, 484, 485, 486], "y_sampl": [179, 614], "y_scaler": 49, "y_score": [241, 278, 280, 392, 484, 485, 486, 710, 723, 729, 730, 742, 743, 759, 785, 791, 792, 797, 803, 806, 807, 817, 867, 1004, 1041, 1049, 1051, 1053], "y_scores_": [486, 1047], "y_shared_covari": 70, "y_spars": 1005, "y_std": [176, 179, 555, 614, 647, 648, 1048], "y_std_": 1047, "y_svr": 246, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 125, 134, 137, 139, 141, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 178, 185, 186, 187, 188, 189, 191, 198, 208, 210, 213, 219, 220, 221, 228, 229, 231, 241, 249, 253, 254, 258, 264, 265, 268, 269, 274, 278, 280, 284, 290, 294, 299, 300, 306, 308, 309, 313, 316, 318, 320, 321, 322, 327, 328, 333, 334, 352, 356, 360, 361, 372, 383, 391, 411, 414, 417, 440, 512, 561, 562, 563, 570, 571, 700, 701, 703, 705, 802, 825, 833, 835, 838, 856, 864, 865, 867, 917, 918, 1004, 1006, 1007, 1014, 1019, 1032, 1035], "y_test_pr": 258, "y_test_predict": 249, "y_test_r": 115, "y_test_tru": 333, "y_thresholds_": [243, 638, 1047], "y_torch": 406, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 125, 134, 137, 141, 144, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 194, 198, 208, 210, 211, 214, 220, 221, 228, 229, 241, 249, 253, 254, 258, 264, 265, 268, 269, 274, 278, 280, 284, 290, 294, 299, 300, 306, 308, 309, 313, 316, 318, 320, 321, 322, 327, 328, 330, 331, 333, 334, 335, 352, 356, 360, 361, 365, 372, 380, 383, 391, 411, 414, 417, 439, 440, 512, 561, 562, 563, 570, 571, 700, 701, 703, 705, 802, 825, 833, 835, 838, 856, 864, 865, 867, 917, 918, 994, 1004, 1006, 1007, 1012, 1014, 1019, 1032], "y_train_": 614, "y_train_ensembl": 139, "y_train_linear": 139, "y_train_noisi": 177, "y_train_pr": 258, "y_train_r": 115, "y_train_valid": 63, "y_tran": 107, "y_transform": 487, "y_true": [43, 52, 57, 68, 92, 107, 134, 154, 173, 213, 223, 231, 250, 259, 265, 333, 378, 433, 440, 441, 467, 484, 485, 486, 555, 557, 559, 560, 561, 563, 565, 567, 568, 571, 573, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 700, 701, 703, 704, 705, 706, 710, 711, 712, 715, 716, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 799, 802, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1004, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1052], "y_true_bin": 213, "y_true_categor": [712, 1004], "y_true_empti": 732, "y_true_mean": 215, "y_true_seg": 213, "y_type_": 874, "y_uniqu": 61, "y_upper": [93, 146], "y_val": [144, 1012], "y_valid": 63, "y_var": 137, "y_vari": 90, "y_weights_": [413, 484, 485, 486, 487], "y_wrong": 70, "yacin": 1043, "yadav": 1049, "yagi": 1047, "yahoo": 51, "yair": [410, 694], "yakov": 1047, "yalburgi": [1042, 1043], "yaman": 1050, "yamanishi": 373, "yamin": 1035, "yaml": [382, 386], "yan": [1039, 1047], "yanchor": 272, "yang": [373, 410, 415, 537, 642, 1041, 1042, 1045, 1047, 1048, 1049, 1051, 1052], "yangarbit": 1042, "yanhong": 1050, "yanlend": 1041, "yann": [1035, 1037], "yanni": 410, "yannick": [1035, 1037], "yao": [0, 375, 389, 399, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "yap": 1042, "yar": 1049, "yareyaredesuyo": 1053, "yaroslav": [0, 399, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "yarowski": [322, 904, 1017], "yashika": 1047, "yasmeen": 1048, "yat2016": 410, "yate": [593, 733], "yates2011": 593, "yau": [1038, 1039, 1040, 1041, 1042], "yaxi": [46, 49, 93, 126, 140, 210, 233, 235, 238, 256, 291, 296, 352], "ye": [352, 386, 392, 404, 661, 662, 874, 891, 1000], "year": [0, 43, 157, 168, 175, 185, 186, 187, 213, 214, 231, 328, 375, 377, 382, 390, 414, 418, 805, 810, 812, 886, 1000, 1004, 1024, 1028], "yearli": [43, 393], "yearremodadd": 154, "yeast": [290, 838], "yee": [1042, 1043], "yegelwel": 1047, "yeh": 1048, "yelit": 1041, "yellow": [70, 118, 341, 1005], "yellowbrick": 1023, "yellowgreen": [214, 216, 223, 358], "yen": [1041, 1042], "yenchen": [0, 1041], "yenchenlin": 1041, "yenugula": 1053, "yeo": [311, 315, 883, 895, 1014, 1043, 1049, 1051], "yep": 381, "yerr": [105, 110, 112, 141, 143, 167, 293, 317, 333], "yesy": 398, "yesyesclassificationclassificationnumb": 398, "yesyesdo": 398, "yesyesfew": 398, "yesyesllel": 398, "yesyespredict": 398, "yesyessgdclassifiersgd": 398, "yesyessgdregressorsgd": 398, "yesyestextdatatext": 398, "yet": [48, 90, 198, 231, 261, 272, 354, 367, 373, 377, 382, 390, 395, 396, 401, 414, 415, 417, 418, 420, 450, 454, 463, 464, 556, 557, 580, 781, 987, 993, 1000, 1004, 1010, 1018, 1024, 1044, 1052], "yeung": 1041, "ygrid": [50, 304], "yhoo": 51, "yi": [512, 1006, 1039, 1043, 1044, 1047], "yichuan": [1041, 1042], "yield": [47, 48, 62, 88, 109, 110, 111, 112, 146, 198, 208, 213, 228, 231, 276, 290, 306, 311, 338, 343, 352, 353, 361, 365, 367, 372, 383, 392, 407, 410, 412, 414, 415, 417, 418, 419, 439, 451, 470, 474, 511, 512, 540, 541, 542, 544, 549, 556, 557, 562, 563, 564, 565, 570, 571, 597, 605, 650, 654, 655, 656, 658, 664, 666, 668, 676, 678, 689, 729, 784, 791, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 831, 832, 834, 838, 841, 899, 900, 945, 952, 954, 955, 961, 996, 998, 1000, 1001, 1004, 1019, 1020, 1040, 1041, 1043, 1046, 1048], "yifan": 1008, "yime": 1043, "ying": [410, 454, 464, 1049], "yinglr": 1045, "yisheng": 1052, "yiyangq": 1049, "yj": [115, 315], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 94, 109, 110, 112, 113, 115, 116, 122, 126, 127, 135, 136, 138, 145, 146, 147, 148, 149, 153, 157, 159, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 186, 193, 196, 197, 198, 200, 201, 202, 203, 206, 207, 213, 215, 216, 218, 220, 222, 223, 231, 244, 246, 248, 266, 270, 271, 274, 275, 276, 280, 281, 284, 286, 294, 318, 338, 341, 344, 352, 357, 358, 359, 634], "ylim": [51, 61, 63, 69, 72, 79, 91, 95, 109, 110, 111, 122, 136, 137, 143, 146, 153, 156, 171, 172, 186, 202, 203, 205, 206, 207, 219, 222, 223, 227, 240, 248, 257, 262, 266, 270, 274, 280, 286, 297, 298, 340, 345, 346, 349, 352, 359], "ylorbr_r": 111, "ym": [51, 236], "ymax": [47, 49, 50, 109, 202, 205, 206, 214, 222, 271, 304], "ymazari": 1043, "ymean": 194, "ymin": [50, 109, 202, 205, 206, 214, 222, 271, 304], "yml": 386, "yn": [512, 1005, 1006], "yoav": 1041, "yoch": 1048, "yogendrasingh": 1050, "yojana": 1050, "yokasr": 1045, "yoni": 1038, "yoon": 1046, "yoram": [288, 738], "york": [270, 791, 800, 994, 1004, 1016], "yoshihiro": 1045, "yoshiki": [1038, 1041], "yoshizawa": 1043, "yoshua": [864, 865, 1017], "yosshi999": 1049, "yosuk": [1047, 1048], "yotam": 1051, "you": [0, 30, 54, 58, 61, 103, 126, 142, 145, 147, 165, 168, 182, 187, 189, 200, 214, 217, 242, 247, 254, 259, 266, 271, 272, 278, 297, 320, 321, 324, 326, 327, 331, 334, 345, 352, 361, 365, 366, 367, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 391, 392, 396, 397, 398, 401, 404, 406, 408, 409, 410, 411, 412, 414, 417, 418, 419, 421, 422, 427, 439, 445, 446, 448, 449, 451, 456, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 503, 506, 507, 512, 513, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 582, 583, 584, 585, 591, 592, 593, 594, 610, 611, 613, 614, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 702, 703, 788, 801, 802, 804, 805, 806, 807, 808, 810, 812, 818, 819, 821, 822, 823, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 864, 865, 866, 867, 870, 871, 872, 873, 874, 879, 880, 881, 886, 887, 892, 893, 895, 896, 897, 898, 900, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 951, 969, 993, 994, 999, 1000, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1027, 1028, 1035, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "youden": 1004, "younger": 231, "your": [16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 366, 367, 372, 376, 377, 378, 379, 381, 382, 384, 386, 387, 390, 391, 392, 396, 397, 398, 404, 406, 409, 410, 411, 412, 417, 418, 421, 422, 446, 448, 506, 536, 564, 565, 605, 637, 649, 690, 714, 803, 806, 807, 809, 817, 826, 830, 832, 926, 945, 1001, 1008, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "yourlogin": 378, "yourself": [103, 377, 378, 379, 383, 386, 1008], "ypred": 1042, "yrsold": 154, "yscale": [171, 176, 213, 246, 352], "ystd": 194, "yt": 878, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 123, 147, 164, 172, 173, 174, 178, 197, 203, 209, 226, 240, 248, 257, 258, 259, 262, 266, 286, 295, 304, 309, 330, 341, 346, 352], "yticklabel": [266, 352], "ytrain": 304, "ytrue": 1042, "yu": [198, 410, 454, 464, 661, 1000, 1008, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "yuan": [1049, 1050, 1051, 1052, 1053], "yuchen": [1051, 1052], "yucheng": 1040, "yue": [1047, 1053], "yufeng": 1043, "yuichi": 1042, "yuki": 1049, "yule": [452, 459, 781, 782, 783], "yulia": 1045, "yum": 376, "yun": [1050, 1051], "yung": [1038, 1041], "yunqian": 1000, "yurchak": [0, 399, 418, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "yuri": [1038, 1040], "yusuf": [1050, 1051], "yusuk": 1048, "yusukenagasaka": 1048, "yutaro": 1047, "yuusuk": 1052, "yuval": [407, 453], "yv": 413, "yve": 1048, "yy": [77, 91, 111, 142, 152, 161, 172, 174, 187, 220, 224, 225, 226, 227, 238, 240, 248, 297, 306, 313, 314, 335, 340, 341, 345, 346, 349, 350], "yy_": 220, "yy_coars": 142, "yy_down": 346, "yy_up": 346, "yzhenman": 1048, "z": [50, 91, 142, 161, 172, 174, 187, 223, 225, 226, 233, 235, 240, 245, 260, 297, 304, 306, 313, 316, 335, 341, 346, 350, 375, 382, 407, 415, 417, 556, 557, 588, 642, 667, 674, 688, 689, 692, 696, 702, 727, 788, 887, 1000, 1001, 1008, 1009, 1050], "z_": 415, "z_1": 1000, "z_2": 1000, "z_3": 1000, "z_4": 1000, "z_5": 1000, "z_i": [138, 1008], "z_l": 1008, "z_points_coars": 142, "zablit": 1050, "zac": 1040, "zacchari": 1047, "zach": [1043, 1044, 1049], "zachariah": 1043, "zadrozni": [64, 408, 439, 679], "zaffalon": 271, "zahlii": 1048, "zain": [0, 399, 1049, 1050, 1051, 1052], "zalkow": 1040, "zambelli": 1038, "zamrii": 1045, "zanouda": 1042, "zaxi": [126, 210, 233], "zayd": 1044, "zaytsev": 1038, "zdzieblo": 1052, "zebra": 715, "zedan": 1051, "zeel": 1049, "zeeshan": [1050, 1051], "zempleni": 1049, "zen": 938, "zenin": 1041, "zentrum": 1004, "zero": [2, 25, 49, 50, 53, 64, 70, 72, 75, 76, 85, 87, 110, 112, 113, 120, 123, 125, 136, 137, 145, 147, 148, 153, 165, 168, 182, 193, 198, 199, 201, 204, 206, 207, 212, 213, 214, 217, 218, 219, 223, 228, 231, 244, 247, 248, 250, 256, 260, 262, 268, 271, 276, 280, 281, 284, 296, 311, 321, 322, 345, 348, 353, 354, 356, 360, 365, 366, 373, 380, 384, 392, 408, 410, 412, 415, 417, 418, 419, 420, 423, 448, 454, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 489, 500, 511, 512, 526, 529, 530, 534, 535, 538, 540, 541, 542, 543, 545, 546, 550, 551, 555, 560, 561, 562, 563, 564, 565, 567, 568, 569, 584, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 614, 639, 642, 646, 647, 648, 653, 661, 662, 667, 668, 669, 670, 671, 674, 679, 680, 681, 688, 689, 706, 712, 715, 716, 718, 719, 728, 732, 733, 737, 741, 743, 749, 786, 787, 788, 790, 799, 800, 818, 819, 822, 823, 836, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 870, 877, 879, 880, 882, 883, 884, 886, 887, 893, 894, 895, 896, 900, 907, 915, 916, 917, 918, 949, 978, 989, 994, 1000, 1002, 1003, 1006, 1007, 1008, 1014, 1015, 1016, 1018, 1019, 1020, 1035, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "zero_bas": [489, 511, 512], "zero_class": 248, "zero_divis": [309, 716, 719, 732, 733, 741, 786, 787, 790, 1004, 1045, 1047, 1051], "zero_impute_scor": 182, "zero_on": [378, 1036], "zero_one_loss": [2, 378, 406, 706, 737, 1004, 1036, 1037, 1038, 1052, 1053], "zero_one_scor": 1036, "zerodivisionerror": [1042, 1045, 1051], "zeros_lik": [82, 215, 280], "zeta": 1019, "zeta_i": 1019, "zev": [1041, 1042, 1043, 1044], "zeyusun": 1048, "zha": [692, 696, 1001], "zhai_pro": 1040, "zhan": 1050, "zhang": [410, 444, 667, 682, 688, 689, 692, 696, 761, 762, 1000, 1001, 1002, 1006, 1018, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1053], "zhang02c": 679, "zhang96": [410, 444], "zhao": [1045, 1047, 1048, 1049, 1050], "zhaowei": 1047, "zhaoweiwang": 1048, "zhauniarovich": 1040, "zhdanovich": 1043, "zhechev": 1050, "zhehao": [1048, 1049, 1050, 1051, 1053], "zhenfish": 1049, "zheng": [1041, 1042, 1047], "zhenq": 1043, "zhi": [566, 1010], "zhiqe": 1043, "zhou": [566, 642, 903, 1010, 1043, 1051, 1052], "zht2007": 200, "zhu": [134, 417, 522, 556, 661, 902], "zhuyi": [1043, 1044], "zhuzhunashvili": [410, 464], "ziad": 1053, "zibulevski": [667, 688, 689], "zichen": 1040, "zielinska": 1046, "zihna": 1048, "ziji": [1043, 1044], "zijlstra": 1038, "zike": 1041, "zimek": 448, "zimmer": [1039, 1049], "zinkov": [1035, 1036, 1037, 1039, 1040], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 376, 417, 831, 1014, 1031], "zisserman": [641, 996, 1004], "zito": [1035, 1048], "ziv": 1041, "zivori": 1041, "zj": [1043, 1044], "zlabel": 126, "zoj613": 1047, "zolisa": 1047, "zoom": [43, 139, 311, 398], "zoom_in_percentile_rang": 311, "zorder": [51, 91, 122, 151, 161, 171, 179, 203, 211, 234, 236, 243, 246, 256, 321, 327, 346], "zou": [134, 200, 417, 522, 556, 659, 1000, 1018], "zou_et_al_criterion_resc": 200, "zoubin": 902, "zoubir": 112, "zouhar": 1048, "zsh": 366, "zuckerberg": 0, "zwinck": 1037, "zxcvbniu": 1042, "zz": 111, "zzrh2009": 417, "z\u00e9": 1043, "\u00e4yr\u00e4m\u00f6": 1000, "\u00f3scar": [1039, 1040, 1041, 1042], "\u00f6zer": 1048, "\u0142ukasz": 1050, "\u015fahin": 1049, "\u0161t\u011bp\u00e1n": 1053, "\u675c\u4e16\u6a4b": [0, 400], "\u8d75\u4e30": 1049}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal Component Analysis (PCA) on Iris Dataset", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "default_tags", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [188, 316, 318, 381, 390, 417, 1004], "0": [182, 320, 321, 322, 323, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "1": [187, 210, 323, 324, 325, 326, 327, 328, 390, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "10": [100, 1035], "11": 1035, "12": 1035, "13": 1036, "14": 1037, "15": 1038, "16": 1039, "17": 1040, "18": 1041, "19": 1042, "1d": 296, "2": [210, 325, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "20": [102, 352, 373, 1043], "2018": 1024, "20newgroup": 228, "21": 1044, "22": [320, 1045], "23": [321, 1046], "24": [322, 1047], "2d": [51, 85, 122, 128, 187], "3": [63, 197, 326, 1043, 1044, 1049, 1051], "3d": 187, "4": [327, 1035, 1043, 1052], "5": [328, 1020, 1035, 1053], "6": [1035, 1054], "7": 1035, "8": 1035, "9": 1035, "99": 373, "A": [52, 58, 59, 81, 91, 96, 213, 323, 377, 384, 414], "And": [237, 393], "In": 278, "NOT": 383, "One": [205, 227, 280, 323, 340, 414, 1010, 1018], "The": [0, 116, 185, 186, 213, 238, 244, 265, 269, 278, 285, 288, 373, 382, 386, 414, 418, 1003, 1004, 1016], "Will": 390, "With": 251, "__sklearn_is_fitted__": 132, "_safe_index": 929, "abil": 176, "ablat": 250, "about": [0, 186, 390], "absolut": 1004, "access": 411, "accuraci": [188, 245, 352, 356, 1004], "accuracy_scor": 706, "across": 361, "action": 378, "activ": [0, 331], "ad": 410, "adaboost": [134, 135, 136, 417], "adaboostclassifi": [134, 556], "adaboostregressor": 557, "add": [327, 390], "add_dummy_featur": 889, "addit": [417, 996], "additive_chi2_kernel": 761, "additivechi2sampl": 641, "address": 265, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 707, "adjusted_rand_scor": 708, "advanc": 251, "advantag": 410, "affin": [51, 73, 410, 1002], "affinity_propag": 456, "affinitypropag": 442, "agglom": [74, 75, 85], "agglomer": [84, 87, 1021], "agglomerativeclust": 443, "aggress": [993, 1000], "aic": [202, 1000], "algebra": [365, 387], "algorithm": [57, 58, 59, 73, 79, 82, 88, 96, 97, 98, 233, 240, 384, 390, 998, 1000, 1005, 1007, 1008, 1012, 1020], "alias": 386, "align": 1001, "all": [271, 280, 324, 396, 1050, 1051, 1052], "all_displai": 942, "all_estim": 943, "all_funct": 944, "alloc": [54, 415], "alpha": [159, 356], "alpin": 396, "alreadi": 55, "altern": 993, "am": [143, 250], "amount": 283, "an": [81, 92, 132, 182, 195, 202, 301, 320, 324, 386, 390, 418, 993, 1010], "anaconda": 396, "analysi": [43, 64, 69, 70, 93, 120, 126, 127, 130, 134, 146, 187, 198, 256, 273, 274, 281, 299, 300, 301, 352, 413, 415, 998, 1007, 1021], "analyz": [52, 993], "angl": [202, 1000], "ani": 390, "anomali": 240, "anova": [165, 344], "api": [2, 41, 132, 253, 254, 320, 323, 325, 366, 380, 385, 392, 401, 406, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1052, 1053], "appli": 159, "applic": 418, "approach": [109, 202, 271], "approxim": [183, 190, 191, 245, 291, 322, 412, 996], "ar": [100, 265, 323, 390], "arch": 396, "architectur": 1024, "ard": [198, 1000], "ardregress": 647, "arff": 372, "argument": [323, 380, 1046, 1048], "arm64": 386, "arrai": [41, 325, 328, 360, 387, 406, 1052, 1053], "artifact": 404, "artwork": 0, "as_float_arrai": 931, "ask": 390, "assert": 380, "assert_all_finit": 932, "assign": 410, "assumpt": 90, "atom": [49, 365], "attent": 390, "attribut": [380, 392, 406, 993], "auc": [320, 709], "author": [382, 1035], "autom": 378, "automat": [198, 391, 1000], "auxiliari": 41, "avail": [324, 1031, 1032], "available_if": 964, "averag": [278, 280, 410, 417, 1004], "average_precision_scor": 710, "avoid": [361, 411], "aweb": 1028, "ax": 385, "b": 115, "backend": 386, "backward": 378, "bag": [137, 145, 352, 417, 418, 993], "baggingclassifi": 558, "baggingregressor": 559, "balanc": [270, 1004], "balanced_accuracy_scor": 711, "ball": 1007, "balltre": [847, 1007], "base": [4, 41, 42, 43, 115, 141, 168, 183, 198, 246, 320, 321, 323, 325, 326, 327, 378, 410, 414, 417, 419, 1000, 1012, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "baseestim": [380, 424], "baselin": [191, 213], "basi": [44, 179, 420, 996, 1000], "basic": [177, 231, 391, 412, 420], "batch": [410, 415], "bay": [61, 62, 1006], "bayesian": [25, 193, 194, 256, 271, 1000, 1003], "bayesiangaussianmixtur": 800, "bayesianridg": 648, "befor": 182, "behavior": 266, "behind": 0, "being": 186, "benchmark": [46, 49, 91, 352], "bernoulli": [1006, 1009], "bernoullinb": 842, "bernoullirbm": 863, "best": [261, 379, 390], "bestofmedia": 1028, "beta": 415, "betawork": 1028, "between": [97, 282, 1000], "bia": 137, "bic": [202, 261, 1000], "biclust": [27, 56, 57, 58, 183, 374, 407], "biclustermixin": 425, "bigger": 367, "bike": [43, 52, 187], "bin": 1014, "binar": [870, 890, 1014, 1015], "binari": [278, 290, 328, 1000, 1004], "birch": [77, 410, 444], "birchbox": 1028, "bisect": [78, 410], "bisectingkmean": [324, 445], "blind": 121, "bnp": 1028, "boil": 383, "boltzmann": [309, 1009], "bonu": 159, "book": 1028, "boost": [43, 140, 143, 144, 145, 146, 147, 148, 149, 187, 213, 320, 321, 323, 325, 326, 417], "bouldin": 410, "bound": 244, "boundari": [150, 155, 294, 335, 345], "branch": 386, "break": 349, "breast": [189, 375], "brier": 1004, "brier_score_loss": 712, "brute": [993, 1007], "bug": [377, 378, 1027, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "build": [175, 182, 376, 378, 386, 411, 1053], "bulk": [49, 365], "bunch": [390, 922], "busi": 265, "c": 384, "c4": 1020, "c5": 1020, "cach": [104, 293, 411], "calcul": [144, 156], "calibr": [5, 60, 61, 62, 63, 64, 146, 183, 213, 408, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "calibratedclassifiercv": 439, "calibration_curv": 441, "calibrationdisplai": 440, "california": 373, "calinski": 410, "calinski_harabasz_scor": 713, "call": [361, 377], "callgrind": 384, "can": [159, 390], "cancer": [189, 375], "candid": [283, 993], "canon": [115, 413], "card": 265, "cardif": 1028, "cardiotocographi": 250, "cart": 1020, "case": [348, 1000, 1004], "categor": [143, 317, 322, 327, 390, 417, 1006, 1014], "categori": [43, 324, 326, 1014], "categoricalnb": 843, "caus": 396, "causal": [185, 186], "cautiou": 186, "cca": [115, 484], "center": [120, 1014], "central": 55, "centroid": [302, 1007], "chain": [105, 252, 290, 391, 411], "chanc": 72, "chang": [247, 378, 393, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "changelog": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "characterist": [280, 281, 1004], "check": [186, 273, 320, 386, 406, 1043, 1044, 1045], "check_arrai": 934, "check_consistent_length": 935, "check_cv": 827, "check_estim": 945, "check_increas": 639, "check_is_fit": [380, 987], "check_memori": 988, "check_random_st": 936, "check_scalar": 937, "check_scor": 714, "check_symmetr": 989, "check_x_i": 933, "checker": 41, "checklist": 378, "chi": [996, 1002], "chi2": 607, "chi2_kernel": 762, "choic": 415, "choos": [46, 398], "ci": [378, 386], "circl": 99, "cite": 0, "claim": [213, 231], "class": [41, 63, 72, 134, 136, 156, 197, 222, 227, 274, 278, 280, 323, 340, 343, 392, 409, 414, 417, 418, 1004, 1007, 1010, 1018, 1019, 1035, 1036], "class_likelihood_ratio": 715, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 102, 160, 171, 172, 173, 174, 178, 183, 229, 248, 274, 277, 278, 281, 290, 294, 302, 309, 320, 329, 334, 345, 352, 374, 420, 1000, 1004, 1005, 1007, 1008, 1018, 1019, 1020], "classifi": [25, 41, 61, 62, 64, 67, 132, 157, 197, 252, 268, 285, 290, 294, 320, 328, 335, 338, 341, 352, 360, 408, 417, 998, 1007], "classification_report": 716, "classifierchain": [838, 1005], "classifiermixin": 427, "classifiertag": 923, "classnameprefixfeaturesoutmixin": 426, "clear": 1045, "clear_data_hom": 488, "clone": [380, 435], "close": [377, 386], "cloud": 122, "cloudpickl": 404, "cluster": [6, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 81, 82, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 120, 183, 324, 326, 353, 374, 407, 410, 415, 1004, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "cluster_optics_dbscan": 457, "cluster_optics_xi": 458, "clustermixin": 428, "co": [57, 59, 407], "co2": 175, "code": [0, 46, 120, 129, 378, 380, 383, 384, 386, 415, 1039, 1040, 1041, 1042, 1043], "coeffici": [168, 186, 193, 217, 218, 284, 410, 1004], "cohen": 1004, "cohen_kappa_scor": 719, "coin": [80, 81], "column": [102, 103, 252], "column_or_1d": 990, "columntransform": [328, 411, 466], "com": 1028, "combin": [154, 241], "comment": 383, "commit": 378, "committe": 393, "common": [186, 361, 392, 406, 418, 1004], "commun": [0, 378], "compact": 242, "compar": [63, 77, 79, 95, 109, 115, 140, 153, 164, 191, 193, 199, 215, 220, 240, 246, 271, 279, 299, 307, 311, 317, 390], "comparison": [64, 67, 70, 78, 97, 111, 128, 143, 144, 163, 170, 233, 234, 246, 271, 282, 284, 288, 354, 1000], "compat": [41, 320, 378, 380, 406], "compil": [376, 384], "complement": 1006, "complementnb": 844, "complet": [249, 410], "completeness_scor": 720, "complex": [46, 242, 252, 270, 273, 332, 356, 365, 1000, 1007, 1008, 1018, 1019, 1020], "compon": [116, 120, 126, 299, 300, 301, 415, 1007, 1021], "compos": [7, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "composit": [101, 183, 411, 993], "compoundkernel": 615, "compress": [53, 86, 365], "comput": [41, 55, 73, 81, 82, 96, 97, 100, 109, 140, 206, 218, 364, 365, 411, 414, 1011, 1025], "computation": 367, "compute_class_weight": 938, "compute_optics_graph": 459, "compute_sample_weight": 939, "concaten": 106, "concentr": 256, "concept": [392, 1000], "conclud": [43, 237], "conclus": [46, 52, 170, 198, 202, 288, 294, 318, 345], "conda": 376, "condit": [187, 322, 1011], "confid": 146, "config_context": 470, "configur": [365, 366], "confus": [264, 410, 1004], "confusion_matrix": 721, "confusionmatrixdisplai": [241, 700], "connect": [410, 418], "consensu": 1000, "consensus_scor": 722, "consider": 265, "constant": [213, 265, 994], "constantkernel": 616, "constraint": [149, 151, 325, 327, 410, 417], "construct": 246, "consum": 247, "content": 390, "conting": 410, "contingency_matrix": 717, "continu": [312, 378], "contribut": [378, 390], "contributor": [0, 377, 378, 393, 1039, 1040, 1041, 1042, 1043], "control": [361, 417, 1008], "convent": 379, "converg": 134, "convergencewarn": 574, "convex": 223, "cookbook": 179, "coordin": 202, "core": [0, 47, 367, 377, 384, 390, 393, 1006], "corpu": 418, "correl": [186, 189, 413, 1004, 1012], "cosin": 1002, "cosine_dist": 763, "cosine_similar": 764, "cost": [265, 356, 1020], "countvector": 591, "covari": [8, 70, 108, 109, 111, 112, 113, 183, 258, 412, 998, 1043, 1047, 1048, 1049, 1051, 1052], "coverag": [378, 386, 1004], "coverage_error": 723, "covertyp": [250, 373], "craft": 383, "crash": 390, "creat": [102, 127, 134, 217, 241, 278, 318, 344, 345, 390], "credit": 265, "criteria": [200, 390, 1000, 1020], "criterion": [202, 322, 993, 1018], "cross": [43, 114, 115, 159, 167, 183, 202, 265, 266, 267, 269, 270, 274, 276, 281, 318, 344, 361, 409, 413, 414, 993, 1000], "cross_decomposit": [9, 1045, 1047, 1049, 1051, 1053], "cross_val_predict": 828, "cross_val_scor": [275, 829], "cross_valid": [414, 830], "cubic": 194, "cumul": 1004, "curat": 377, "curv": [62, 64, 194, 246, 253, 262, 268, 273, 278, 280, 408, 999], "custom": [132, 269, 328, 337, 418, 1014, 1019], "cut": [265, 285], "cv": [266, 361], "cv_results_": 993, "cython": [379, 384, 386], "d": [414, 1007], "d2_absolute_error_scor": 724, "d2_log_loss_scor": 725, "d2_pinball_scor": 726, "d2_tweedie_scor": 727, "data": [43, 46, 48, 51, 55, 58, 61, 63, 70, 73, 81, 82, 83, 88, 90, 91, 96, 97, 99, 100, 102, 107, 109, 111, 113, 115, 116, 121, 122, 125, 127, 135, 141, 144, 147, 149, 150, 154, 164, 167, 168, 176, 178, 182, 185, 188, 189, 191, 194, 199, 206, 207, 217, 241, 246, 253, 261, 266, 268, 272, 277, 278, 280, 281, 284, 294, 298, 303, 309, 311, 315, 316, 317, 327, 330, 341, 344, 347, 348, 353, 354, 361, 365, 367, 383, 390, 392, 410, 411, 414, 419, 1014, 1018, 1028], "dataconversionwarn": 575, "datadimensionalitywarn": 576, "datafram": [320, 327, 390, 1052], "dataiku": 1028, "datarobot": 1028, "dataset": [10, 42, 43, 44, 47, 52, 61, 62, 68, 79, 91, 95, 102, 115, 117, 118, 120, 126, 128, 134, 140, 142, 143, 154, 159, 170, 172, 174, 175, 177, 179, 183, 185, 186, 187, 193, 196, 198, 202, 213, 215, 222, 231, 233, 234, 240, 245, 250, 251, 265, 269, 277, 278, 285, 288, 290, 318, 334, 335, 338, 345, 352, 357, 370, 371, 372, 373, 374, 375, 383, 390, 420, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "davi": 410, "davies_bouldin_scor": 728, "dbscan": [82, 410, 421, 446], "dbscan_clust": 88, "dcg_score": 729, "deal": [41, 390], "debian": 396, "debug": 386, "debugg": 384, "decis": [134, 135, 142, 150, 155, 183, 245, 265, 285, 294, 326, 328, 335, 345, 355, 356, 357, 358, 359, 360, 390, 393, 409, 1020], "decisionboundarydisplai": 634, "decisiontre": 135, "decisiontreeclassifi": 915, "decisiontreeregressor": [322, 916], "decod": 418, "decompos": 415, "decomposit": [11, 114, 115, 119, 120, 137, 183, 374, 413, 415, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decreas": [141, 188], "deep": 390, "default": [247, 298, 378], "default_tag": 940, "defin": [72, 81, 91, 100, 233, 266, 268, 269, 354, 1004], "definit": [231, 284, 309, 1011, 1045], "deflat": 115, "delai": 970, "demand": [43, 52], "demo": [58, 59, 73, 81, 82, 88, 91, 96, 98], "demonstr": [90, 275, 314, 330], "dendrogram": 76, "denois": [44, 123], "dens": 199, "densiti": [260, 295, 296, 304, 326, 416, 948, 1019], "densitymixin": 429, "depend": [187, 247, 251, 376, 1011, 1035, 1048, 1049], "deploi": 390, "deploy": 396, "deprec": [1, 247, 378, 941, 1045], "descent": [202, 221, 227, 1000, 1018], "descript": 185, "design": 175, "det": [268, 1004], "det_curv": 730, "detail": [996, 1018, 1019], "detcurvedisplai": 701, "detect": [48, 240, 250, 268, 297, 298, 1004, 1010, 1019], "determin": [112, 198, 412, 1000, 1004], "develop": [131, 132, 183, 247, 376, 379, 380, 381, 385, 386, 387, 993, 1030, 1051], "devianc": [147, 1004], "devic": 406, "diabet": [159, 251, 285, 375], "diagnost": 375, "dict": 418, "dict_learn": 548, "dict_learning_onlin": 549, "dictionari": [83, 120, 123, 129, 415], "dictionarylearn": 534, "dictvector": [354, 584], "did": 390, "diff": 386, "differ": [75, 79, 95, 109, 179, 187, 311, 314, 317, 338, 345, 380, 390, 401, 410, 1000], "digit": [68, 85, 91, 160, 234, 309, 330, 331, 375], "dimension": [104, 233, 236, 252, 300, 316, 353, 998, 1001, 1007, 1021], "direct": 230, "dirichlet": [54, 415, 1003], "discount": 1004, "discov": 41, "discret": [150, 178, 312, 313, 1014], "discrimin": [69, 70, 998], "discriminant_analysi": [12, 1043, 1044, 1047, 1049, 1050, 1051], "discuss": 377, "disk": 55, "dispatch": 388, "displai": [123, 218, 241, 242, 252, 325, 326, 327, 386, 1032, 1051], "distanc": [27, 111, 328], "distance_metr": 765, "distancemetr": 702, "distort": 123, "distribut": [50, 231, 233, 304, 315, 373, 396, 1001, 1014], "diverg": 415, "divid": 324, "do": [383, 390], "document": [0, 47, 57, 183, 322, 323, 351, 352, 353, 378, 1023, 1024, 1027, 1031, 1035, 1038, 1039, 1042, 1043], "doe": 390, "domain": 1023, "donat": 0, "dot": [179, 420], "dotproduct": 617, "down": 383, "download": [55, 154, 182, 372], "drawback": 410, "drop": 143, "dtype": 327, "dummi": [13, 1004, 1043, 1044, 1045, 1048, 1049, 1053], "dummyclassifi": 554, "dummyregressor": 555, "dump_svmlight_fil": 489, "dure": 361, "d\u00b2": 1004, "each": [278, 283, 352], "earli": [144, 149, 221], "earlier": 1035, "eas": 379, "effect": [107, 149, 185, 238, 284, 311, 316, 333, 356], "effici": [325, 327, 387], "efficiencywarn": 577, "eigenfac": [45, 120], "eigenmap": 1001, "eigenvector": 55, "elast": [195, 201, 1000], "elasticnet": [198, 321, 649], "elasticnetcv": 650, "element": 392, "elimin": [166, 167, 419, 993], "ellipsoid": [70, 257], "ellipt": 1010, "ellipticenvelop": 471, "embed": [51, 85, 233, 234, 244, 301, 417, 1001], "emeritu": 0, "empir": [94, 112, 244, 412], "empirical_covari": 479, "empiricalcovari": 472, "enable_halving_search_cv": 582, "enable_iterative_imput": 583, "encod": [86, 143, 317, 318, 326, 1014, 1015], "enet_path": 684, "enforc": [1046, 1048], "engin": [43, 52, 188, 1023, 1028], "enhanc": [325, 393, 1023, 1038, 1039, 1040, 1041, 1042], "enrich": 327, "ensembl": [14, 133, 139, 142, 183, 417, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "enthought": 396, "entir": 390, "entri": 1017, "envelop": 1010, "environ": [366, 386, 404], "equival": 271, "error": [134, 138, 144, 146, 159, 193, 217, 268, 284, 386, 396, 1000, 1004], "establish": [97, 191], "estim": [41, 101, 108, 109, 110, 111, 112, 113, 131, 132, 137, 143, 145, 153, 176, 182, 183, 193, 216, 219, 242, 247, 249, 250, 260, 279, 288, 295, 296, 304, 320, 321, 322, 325, 327, 361, 380, 390, 391, 392, 398, 406, 411, 412, 414, 416, 417, 993, 994, 998, 1000, 1004, 1019, 1023, 1036, 1043, 1044, 1045], "estimate_bandwidth": 460, "estimator_html_repr": 947, "euclidean_dist": 766, "evalu": [52, 72, 91, 94, 112, 213, 250, 265, 272, 275, 284, 309, 317, 353, 391, 405, 407, 410, 414, 417, 993, 999, 1004], "evernot": 1028, "exact": 415, "exampl": [42, 45, 48, 86, 92, 107, 117, 132, 150, 177, 183, 209, 210, 217, 346, 349, 367, 383, 401, 406, 409, 418, 420, 424, 427, 430, 433, 434, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 490, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 507, 513, 514, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 587, 590, 591, 592, 593, 594, 596, 597, 600, 602, 603, 605, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 628, 630, 631, 633, 634, 635, 636, 637, 638, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 655, 656, 658, 659, 660, 661, 662, 665, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 691, 692, 693, 694, 695, 696, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 715, 716, 720, 721, 722, 730, 732, 735, 737, 738, 740, 741, 744, 745, 748, 749, 751, 752, 753, 755, 756, 758, 760, 764, 781, 782, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 864, 865, 866, 867, 868, 871, 872, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 893, 896, 900, 901, 903, 904, 905, 907, 910, 911, 912, 913, 914, 915, 916, 921, 922, 936, 946, 948, 955, 960, 961, 962, 963, 964, 977, 987, 1035], "except": [15, 387, 1047, 1051], "execut": [361, 390], "exercis": [158, 159, 160, 161, 183], "exhaust": 993, "exist": 378, "exp": [179, 420], "expans": 193, "expect": [187, 322, 1011], "experi": [0, 72, 377], "experiment": [16, 325, 382, 406, 1051], "explain": 1004, "explained_variance_scor": 731, "explicit": 245, "explor": 43, "exponenti": 619, "export": [40, 390], "export_graphviz": 919, "export_text": 920, "expsinesquar": 618, "extend": 1000, "extens": [384, 396], "extern": [372, 1022, 1035, 1044], "extract": [54, 106, 123, 231, 272, 353, 365, 367, 418], "extract_patches_2d": 587, "extrapol": 175, "extratreeclassifi": 917, "extratreeregressor": 918, "extratreesclassifi": 560, "extratreesregressor": 561, "extrem": [383, 417], "f": [163, 1004], "f1": 278, "f1_score": 732, "f_classif": 608, "f_regress": 609, "fa": [120, 127], "face": [45, 83, 120, 249, 373, 1028], "factor": [54, 120, 127, 130, 297, 298, 415, 1010], "factoranalysi": 535, "fail": 383, "failur": [185, 993], "fast_logdet": 949, "faster": [325, 417], "fastica": [120, 121, 122, 422, 536], "fbeta_scor": 733, "featur": [43, 52, 84, 87, 106, 125, 126, 139, 141, 143, 147, 149, 151, 152, 162, 164, 166, 167, 168, 183, 188, 189, 191, 193, 207, 210, 231, 245, 251, 272, 309, 312, 313, 316, 317, 320, 322, 323, 344, 352, 353, 365, 367, 378, 382, 401, 411, 417, 418, 419, 994, 1012, 1014, 1021, 1038, 1039, 1040, 1041, 1042], "feature_extract": [17, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "feature_select": [18, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "featureagglomer": [410, 447], "featurehash": [354, 585], "featureunion": [411, 866], "fedora": 396, "fetch_20newsgroup": 490, "fetch_20newsgroups_vector": 491, "fetch_california_h": 492, "fetch_covtyp": 493, "fetch_fil": 494, "fetch_kddcup99": 495, "fetch_lfw_pair": 496, "fetch_lfw_peopl": 497, "fetch_olivetti_fac": 498, "fetch_openml": [325, 499], "fetch_rcv1": 500, "fetch_species_distribut": 501, "file": [55, 378, 386, 396, 418], "final": [90, 170], "find": 1007, "first": [48, 72], "fit": [29, 58, 63, 90, 121, 127, 141, 146, 147, 175, 193, 194, 195, 207, 210, 215, 219, 278, 290, 298, 303, 318, 347, 361, 380, 391, 401, 406, 417, 1006, 1010], "fitfailedwarn": 578, "fix": [72, 1035, 1038, 1039, 1040, 1041, 1042, 1048], "fixedthresholdclassifi": [328, 802], "flag": 386, "flexibl": [323, 994], "float64": 406, "fold": [386, 414], "footprint": 86, "forc": [993, 1007], "forecast": [52, 175], "forest": [138, 140, 141, 153, 188, 189, 250, 253, 327, 373, 417, 1010], "forg": 376, "format": [372, 383, 390, 1005], "formul": [407, 417, 998, 1007, 1018, 1019, 1020], "four": 99, "fowlk": 410, "fowlkes_mallows_scor": 734, "framework": 1023, "free": 177, "freebsd": 376, "freez": 390, "french": 213, "frequenc": 231, "frequent": 390, "frequentist": 271, "frobeniu": 415, "from": [17, 51, 123, 168, 188, 317, 320, 366, 372, 376, 390, 418, 1004, 1045], "fruit": 377, "fulli": 185, "function": [41, 49, 70, 179, 203, 217, 218, 223, 234, 266, 285, 322, 344, 354, 387, 414, 417, 420, 996, 1000, 1004, 1019, 1052], "functiontransform": 871, "fund": 0, "futur": 390, "futurewarn": 1045, "gain": [265, 1004], "galleri": [424, 427, 430, 433, 434, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 490, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 507, 513, 514, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 584, 585, 587, 590, 591, 592, 593, 594, 596, 597, 600, 602, 603, 605, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 628, 630, 631, 633, 634, 635, 636, 637, 638, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 655, 656, 658, 659, 660, 661, 662, 665, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 691, 692, 693, 694, 695, 696, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 715, 716, 720, 721, 722, 730, 732, 735, 737, 738, 740, 741, 744, 745, 748, 749, 751, 752, 753, 755, 756, 758, 760, 764, 781, 782, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 864, 865, 866, 867, 868, 871, 872, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 893, 896, 900, 901, 903, 904, 905, 907, 910, 911, 912, 913, 914, 915, 916, 921, 922, 936, 946, 948, 955, 960, 961, 962, 963, 964, 977, 987], "gamma": [231, 326, 1004], "gammaregressor": 651, "gaussian": [61, 62, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 255, 256, 257, 260, 261, 262, 311, 420, 1003, 1006, 1014, 1016], "gaussian_process": [19, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "gaussianmixtur": 801, "gaussiannb": 845, "gaussianprocessclassifi": 613, "gaussianprocessregressor": 614, "gaussianrandomproject": 899, "gdb": 384, "gen_batch": 954, "gen_even_slic": 955, "gener": [10, 25, 52, 58, 61, 70, 73, 81, 82, 88, 90, 96, 97, 99, 100, 109, 111, 113, 118, 121, 122, 123, 141, 150, 164, 167, 170, 176, 177, 179, 183, 192, 193, 194, 198, 207, 213, 215, 246, 261, 268, 284, 298, 303, 309, 321, 330, 347, 348, 361, 374, 378, 392, 415, 417, 1000, 1014, 1024], "genericunivariateselect": 595, "german": 265, "get": [361, 386, 390, 391], "get_config": 629, "get_data_hom": 502, "get_feature_names_out": 324, "get_param": 380, "get_routing_for_object": 962, "get_scor": 735, "get_scorer_nam": 736, "get_tag": 956, "git": 378, "github": 378, "gitter": 1027, "glm": 25, "glossari": 392, "gmm": [258, 259], "goal": 1024, "good": [378, 383], "govern": [0, 393], "gpc": [171, 172, 173, 174, 420], "gperftool": 384, "gpr": [175, 176, 420], "gprof": 384, "gpu": 390, "gradient": [43, 140, 143, 144, 145, 146, 147, 148, 149, 187, 213, 221, 227, 320, 321, 323, 325, 326, 417, 1000, 1018], "gradientboostingclassifi": [417, 562], "gradientboostingregressor": [417, 563], "gram": 195, "graph": [41, 51, 320, 387, 390, 410, 418], "graphic": [390, 1009], "graphical_lasso": 480, "graphicallasso": 473, "graphicallassocv": 474, "greek": 80, "grid": [252, 269, 271, 279, 282, 993], "grid_to_graph": 588, "gridsearchcv": [104, 159, 275, 803], "ground": [72, 193], "group": [324, 326, 414, 1028], "groupkfold": 804, "groupshufflesplit": 805, "grow": 72, "guid": [381, 1030], "guidelin": [378, 380], "halv": [282, 283, 322, 993], "halvinggridsearchcv": 806, "halvingrandomsearchcv": 807, "ham": 1004, "hamming_loss": 737, "hand": 68, "handl": [41, 189, 994], "handwritten": [91, 234, 375], "harabasz": 410, "hard": 417, "has_fit_paramet": 991, "hash": [152, 387, 418], "hashingvector": [353, 592], "haversine_dist": 767, "hdbscan": [88, 326, 410, 448], "help": [377, 390], "helper": [49, 179, 234, 387], "here": 360, "hessian": 1001, "heterogen": [102, 411], "hierarch": [76, 81, 95, 100, 326, 410], "hierarchi": 410, "higher": 366, "highlight": [183, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 1035, 1038, 1039, 1042, 1043], "hing": 1004, "hinge_loss": 738, "histgradientboost": [322, 327], "histgradientboostingclassifi": [417, 564], "histgradientboostingregressor": [324, 565], "histogram": [140, 149, 321, 323, 325, 416, 417], "histori": [0, 1033], "hmm": 390, "hoc": 285, "hole": 237, "home": 271, "homebrew": 376, "homogen": 410, "homogeneity_completeness_v_measur": 739, "homogeneity_scor": 740, "hot": 143, "hour": 52, "hourli": 185, "hous": [143, 250, 373], "how": [159, 361, 378, 384, 390], "howaboutw": 1028, "html": [242, 380], "huber": 1000, "huberregressor": [196, 652], "hug": 1028, "hyper": [29, 146, 269, 322, 993], "hyperparamet": [88, 175, 176, 272, 279, 288, 620], "hyperplan": [225, 342, 343], "i": [328, 360, 383, 390, 414, 1028], "ic": [187, 1011], "ica": [121, 415], "id3": 1020, "idf": 418, "illustr": [104, 174, 179, 301, 420], "imag": [17, 44, 81, 83, 86, 99, 123, 372, 390, 418], "img_to_graph": 589, "impact": [43, 94, 284, 1050, 1051, 1052, 1053], "implement": [132, 199, 390, 1004, 1007, 1018, 1019], "import": [141, 147, 168, 188, 189, 245, 288, 316, 320, 409, 417, 1012], "improv": [321, 322, 323, 324, 325, 327, 328, 377, 378, 1038, 1039], "impur": [141, 188, 356, 1012], "imput": [20, 180, 181, 182, 183, 320, 328, 994, 1014, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "includ": 390, "inclus": 390, "incom": 185, "inconsist": 361, "inconsistentversionwarn": 579, "incr_mean_variance_axi": 978, "increment": [124, 367, 415], "incrementalpca": 537, "independ": [120, 415], "index": [410, 958], "indic": 266, "individu": [157, 187, 322, 1011], "induct": 89, "infer": 185, "influenc": [46, 49, 365], "infonea": 1028, "inform": [163, 182, 200, 202, 382, 410, 993, 1000], "infrastructur": 0, "infrequ": [324, 326, 1014], "init": 380, "initi": [92, 94, 259], "inplace_column_scal": 979, "inplace_csr_column_scal": 980, "inplace_csr_row_normalize_l1": 985, "inplace_csr_row_normalize_l2": 986, "inplace_row_scal": 981, "inplace_swap_column": 982, "inplace_swap_row": 983, "input": [41, 365, 380, 406, 410, 1014], "inputtag": 924, "inria": 1028, "inspect": [21, 183, 184, 395, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instal": [376, 396], "instanc": [361, 367], "instanti": 380, "instead": 265, "instruct": 376, "insur": 231, "integr": 378, "intel": 396, "interact": [43, 187, 325, 417], "interfac": [27, 401], "intern": [318, 409], "internet": 51, "interoper": 1023, "interpol": 214, "interpret": [175, 186, 217, 250, 290, 415, 417], "interv": 146, "introduc": 254, "introduct": 1001, "introductori": 177, "invari": [88, 274], "invers": [113, 412, 1016], "io": 404, "iri": [126, 128, 142, 172, 222, 335, 338, 357, 375, 420], "is_classifi": 436, "is_cluster": 437, "is_multilabel": 965, "is_regressor": 438, "iso": [173, 278], "isol": 1010, "isolationforest": [150, 566], "isomap": [233, 234, 691, 1001], "isoton": [22, 243, 408, 995, 1043, 1044, 1045, 1047, 1049, 1050], "isotonic_regress": 640, "isotonicregress": 638, "issu": [377, 378, 386], "iter": [182, 283, 414], "iterativeimput": [181, 630, 994], "j": 1028, "jaccard": 1004, "jaccard_scor": 741, "job": 390, "joblib": [366, 384, 404], "johnson": [244, 1016], "johnson_lindenstrauss_min_dim": 901, "joint": 207, "k": [78, 90, 91, 92, 94, 97, 100, 115, 294, 316, 353, 410, 414, 1004, 1007, 1014], "k_mean": 461, "kappa": 1004, "kbinsdiscret": [312, 314, 872], "kcachegrind": 384, "kddcup": 373, "kddcup99": 250, "kdtree": [848, 1007], "keep": 994, "kei": 404, "kernel": [19, 43, 44, 125, 170, 175, 176, 178, 179, 183, 190, 191, 245, 246, 295, 296, 304, 322, 337, 340, 345, 347, 415, 416, 420, 621, 996, 997, 1002, 1014, 1019], "kernel_approxim": [23, 1045, 1047, 1048, 1049, 1050, 1051], "kernel_metr": 768, "kernel_ridg": [24, 1052], "kernelcenter": 873, "kerneldens": 852, "kernelpca": [125, 538], "kernelridg": 646, "keyword": [323, 1046, 1048], "kfold": 808, "kmean": [93, 97, 321, 449], "kmeans_plusplu": 462, "kneighbors_graph": 860, "kneighborsclassifi": 849, "kneighborsregressor": 850, "kneighborstransform": 851, "knn": [182, 320], "knnimput": 631, "knowledg": 379, "known": [1043, 1044], "kpca": 415, "l": 194, "l1": [53, 198, 204, 206, 229, 348, 419], "l1_min_c": 914, "l2": [217, 348], "label": [41, 72, 278, 330, 331, 332, 373, 374, 410, 414, 417, 1004, 1015, 1017], "label_binar": 891, "label_ranking_average_precision_scor": 742, "label_ranking_loss": 743, "labelbinar": [874, 1015], "labelencod": 875, "labelpropag": 902, "labelspread": 903, "lag": 52, "laplacian": 1002, "laplacian_kernel": 769, "lar": [201, 653, 1000], "larg": 418, "lars_path": 685, "lars_path_gram": 686, "larscv": 654, "lasso": [53, 198, 199, 200, 201, 202, 207, 321, 655, 1000], "lasso_path": 687, "lassocv": 656, "lassolar": 657, "lassolars": 659, "lassolarscv": 658, "latenc": [49, 365], "latent": [54, 115, 415], "latentdirichletalloc": 539, "latest": 396, "layer": [187, 306, 1008], "lda": [70, 128, 415, 998], "leakag": 361, "learn": [0, 41, 44, 51, 83, 120, 123, 169, 183, 185, 186, 187, 191, 232, 233, 234, 235, 246, 247, 265, 266, 273, 301, 307, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 364, 365, 367, 374, 376, 378, 379, 380, 382, 383, 390, 393, 396, 415, 417, 999, 1001, 1009, 1017, 1023, 1024, 1026, 1028, 1029, 1031], "learner": [134, 417], "learning_curv": 831, "learningcurvedisplai": 809, "least": [116, 146, 202, 208, 211, 1000], "leav": [356, 414, 1000], "leaveonegroupout": 810, "leaveoneout": 811, "leavepgroupsout": 812, "leavepout": 813, "ledoit": [69, 110, 412], "ledoit_wolf": 481, "ledoit_wolf_shrinkag": 482, "ledoitwolf": [109, 475], "lemma": 1016, "length": [150, 396], "lesson": [185, 186], "level": [175, 176, 366, 410, 417], "liabil": 213, "librari": [365, 366], "libsvm": 372, "likelihood": [109, 193, 194, 274, 1004, 1009], "limit": [143, 170, 365, 396, 404, 418], "lindenstrauss": [244, 1016], "line": [159, 173], "linear": [25, 43, 62, 69, 70, 146, 170, 183, 186, 192, 193, 209, 213, 216, 219, 233, 234, 245, 321, 340, 345, 347, 365, 387, 390, 998, 1000, 1001, 1002, 1014], "linear_kernel": 770, "linear_model": [25, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lineardiscriminantanalysi": [325, 552], "linearregress": [215, 660], "linearsvc": [339, 907], "linearsvr": 908, "link": [365, 1004], "linkag": [95, 410], "linnerrud": 375, "linux": [376, 390, 396], "list": [72, 382, 1027], "loa": 175, "load": [44, 46, 55, 83, 91, 126, 140, 143, 147, 159, 168, 188, 206, 231, 234, 241, 245, 253, 272, 280, 281, 290, 294, 316, 317, 341, 344, 352, 353, 354, 371, 372, 383, 390, 418], "load_breast_canc": 503, "load_diabet": 504, "load_digit": 505, "load_fil": 506, "load_iri": 507, "load_linnerud": 508, "load_sample_imag": [509, 510], "load_svmlight_fil": [511, 512], "load_win": 513, "loader": 10, "local": [233, 234, 297, 298, 1001, 1010], "locally_linear_embed": 696, "locallylinearembed": 692, "localoutlierfactor": 853, "lock": [378, 386], "lof": [297, 298], "log": [193, 194, 1004], "log_loss": 744, "logarithm": 1004, "logist": [105, 197, 203, 204, 205, 206, 228, 229, 1000], "logisticregress": [290, 661], "logisticregressioncv": 662, "loo": 414, "look": [52, 246, 347], "loss": [149, 213, 223, 321, 324, 326, 417, 1004, 1052], "lot": 390, "love": 1028, "low": [410, 417, 419], "lower": 366, "lpo": 414, "lsa": 353, "mac": 396, "machin": [169, 183, 185, 186, 187, 309, 336, 386, 1009, 1019], "machinali": 1028, "maco": 376, "macport": 396, "macro": 280, "mahalanobi": 111, "mail": 1027, "main": [47, 213], "maintain": [0, 378, 382, 404], "major": [417, 1043, 1044], "make": [154, 157, 182, 378, 393], "make_biclust": 514, "make_blob": [383, 515], "make_checkerboard": 516, "make_circl": 517, "make_classif": [383, 518], "make_column_selector": 468, "make_column_transform": 469, "make_friedman1": 519, "make_friedman2": 520, "make_friedman3": 521, "make_gaussian_quantil": 522, "make_hastie_10_2": 523, "make_low_rank_matrix": 524, "make_moon": 525, "make_multilabel_classif": 526, "make_pipelin": 868, "make_regress": [383, 527], "make_s_curv": 528, "make_scor": 745, "make_sparse_coded_sign": 529, "make_sparse_spd_matrix": 530, "make_sparse_uncorrel": 531, "make_spd_matrix": 532, "make_swiss_rol": 533, "make_union": 869, "mallow": 410, "manag": [366, 396], "manhattan_dist": 771, "mani": [266, 325, 366, 390, 1052, 1053], "manifold": [26, 183, 232, 233, 234, 235, 374, 1001, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "manual": [265, 409], "map": [245, 315, 1014], "mar": 1028, "margin": [193, 194, 225, 342, 346], "mark": 994, "markdown": 383, "marker": 378, "market": 51, "match": [212, 1000], "matern": 622, "mathemat": [41, 407, 417, 996, 998, 1007, 1011, 1018, 1019, 1020], "matric": [41, 387, 1014], "matrix": [54, 55, 178, 195, 264, 410, 415, 1004], "matter": 186, "matthew": 1004, "matthews_corrcoef": 746, "mat\u00e9rn": [179, 420], "max": [109, 1004], "max_error": 747, "maxabs_scal": 892, "maxabsscal": [311, 876], "maximum": [225, 342, 1009], "md": [693, 1001], "mdi": 188, "mean": [78, 90, 91, 92, 94, 96, 97, 141, 182, 188, 217, 353, 410, 1004, 1014], "mean_absolute_error": 748, "mean_absolute_percentage_error": 749, "mean_gamma_devi": 750, "mean_pinball_loss": 751, "mean_poisson_devi": 752, "mean_shift": 463, "mean_squared_error": 753, "mean_squared_log_error": 754, "mean_tweedie_devi": 755, "mean_variance_axi": 984, "meanshift": [96, 450], "measur": [154, 274, 410, 1004], "media": 1027, "median": [1000, 1004], "median_absolute_error": 756, "member": 377, "memori": [86, 327, 365, 384, 386], "merg": 382, "meson": [386, 1053], "messag": [271, 378], "meta": [41, 153, 247, 288, 322, 406, 417], "metadata": [41, 247, 326, 327, 352, 392, 401, 1052, 1053], "metadatarequest": 959, "metadatarout": 960, "metaestimatormixin": 430, "method": [95, 106, 115, 133, 170, 183, 233, 235, 259, 287, 289, 392, 404, 410, 996, 1010, 1011], "methodmap": 961, "metric": [27, 72, 75, 146, 265, 275, 406, 410, 414, 993, 1002, 1004, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "micro": [278, 280], "min_cluster_s": 88, "min_po": 930, "min_sampl": 88, "mincovdet": 476, "mini": [410, 415], "minibatchdictionarylearn": 540, "minibatchkmean": [77, 97, 120, 451], "minibatchnmf": [324, 541], "minibatchsparsepca": [120, 415, 542], "minim": [383, 1020, 1048, 1049], "minimum": [112, 412], "minmax_scal": 893, "minmaxscal": [311, 877], "misc": 1035, "miscellan": [25, 183, 239, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "mislead": 1012, "miss": [149, 180, 181, 182, 183, 320, 326, 327, 417, 994, 1014, 1020], "missingind": 632, "mix": 103, "mixin": 380, "mixtur": [28, 183, 255, 256, 257, 260, 261, 262, 1003, 1043, 1044, 1048, 1049, 1051, 1053], "mlp": 308, "mlpclassifi": [307, 864], "mlpregressor": 865, "mnist": [229, 308], "mode": [115, 365], "model": [25, 27, 29, 43, 46, 50, 52, 90, 107, 115, 121, 127, 140, 141, 143, 144, 147, 150, 167, 168, 170, 175, 183, 186, 187, 188, 191, 192, 193, 198, 200, 202, 207, 213, 216, 231, 241, 246, 250, 251, 255, 257, 261, 262, 263, 265, 270, 271, 273, 278, 284, 290, 298, 303, 309, 316, 321, 323, 327, 345, 347, 352, 365, 380, 390, 391, 393, 404, 405, 414, 993, 999, 1000, 1003, 1004, 1006, 1008, 1009, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "model_select": [29, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "modifi": 1001, "modul": [1035, 1043, 1044, 1050, 1051, 1052, 1053], "mona": 175, "monitor": 378, "monoton": [149, 151, 327, 417], "more": [323, 390, 1008], "morgan": 1028, "most": 330, "motor": 213, "mp": 406, "much": 159, "multi": [25, 88, 134, 153, 187, 207, 222, 236, 249, 275, 278, 306, 359, 384, 1000, 1001, 1004, 1008, 1019, 1020], "multiclass": [30, 41, 183, 228, 280, 287, 288, 320, 387, 408, 1004, 1005, 1044, 1047, 1048, 1049], "multicollinear": 189, "multidimension": 233, "multilabel": [27, 118, 248, 290, 374, 387, 1004, 1005], "multilabel_confusion_matrix": 757, "multilabelbinar": [878, 1015], "multinomi": [205, 229, 1000, 1006], "multinomialnb": 846, "multioutput": [31, 183, 289, 1005, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "multioutputclassifi": [839, 1005], "multioutputregressor": [840, 1005], "multipl": [106, 252, 275, 361, 385, 414, 993, 994, 1004, 1043, 1044], "multitaskelasticnet": 663, "multitaskelasticnetcv": 664, "multitasklasso": 665, "multitasklassocv": 666, "multivari": [115, 994], "murmurhash3_32": 968, "mutual": [163, 410], "mutual_info_classif": 610, "mutual_info_regress": 611, "mutual_info_scor": 758, "my": 390, "n_featur": 49, "n_job": 390, "naiv": [43, 52, 61, 62, 1006], "naive_bay": [32, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "name": [151, 323, 390, 411], "nan": 994, "nan_euclidean_dist": 772, "nativ": [143, 317, 320, 322, 327, 390], "ndcg_score": 759, "nearest": [100, 183, 291, 292, 293, 294, 299, 302, 303, 320, 994, 1007], "nearestcentroid": 854, "nearestneighbor": 855, "necessari": 383, "need": 390, "neg": [54, 120, 168, 208, 415, 1000], "neighbor": [33, 100, 183, 233, 291, 292, 293, 294, 299, 303, 316, 320, 994, 1001, 1007, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "neighborhood": [299, 300, 301, 1007], "neighborhoodcomponentsanalysi": 856, "nest": [276, 411], "net": [195, 201, 1000], "netbsd": 396, "network": [183, 187, 305, 1008, 1009], "neural": [183, 187, 305, 1008, 1009], "neural_network": [34, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "new": [320, 322, 323, 325, 326, 378, 390, 1022, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "newsgroup": [102, 352, 373], "next": [52, 391], "nightli": 376, "nmf": [120, 324, 415, 543], "nnmf": 415, "nois": [176, 177, 194], "noisi": [123, 177, 217], "non": [43, 54, 120, 146, 208, 213, 217, 233, 276, 328, 340, 347, 415, 1000, 1014], "non_negative_factor": 550, "none": 361, "norm": 415, "normal": [69, 191, 213, 311, 315, 879, 894, 1004, 1014], "normalized_mutual_info_scor": 760, "note": [367, 406, 409, 414], "notfittederror": 580, "novelti": [297, 1010, 1019], "now": [320, 323, 1045], "number": [72, 93, 143, 149, 167, 283, 365, 380, 994], "numer": [186, 328, 366, 380], "numpi": [366, 383], "nusvc": 909, "nusvr": 910, "nystroem": [642, 996], "oa": [69, 109, 110, 423, 477], "object": [41, 241, 266, 380, 390, 993, 1004, 1032], "observ": 185, "obtain": [390, 414], "off": [265, 285, 1000], "okcupid": 1028, "older": 1035, "olivetti": 373, "omp": 1000, "one": [116, 143, 251, 1000, 1004], "oneclasssvm": 911, "onehotencod": [324, 880], "onetoonefeaturemixin": 431, "onevsoneclassifi": [835, 1005], "onevsrestclassifi": [290, 836, 1005], "onli": [210, 230, 1046, 1048], "onlin": [83, 220, 323, 324, 1018], "onnx": 404, "oob": 138, "openml": [44, 317, 320, 372], "openmp": [366, 379], "oper": [41, 280, 281, 377, 387, 420, 1004], "optic": [98, 375, 410, 452], "optim": [29, 41, 384, 993], "optimis": 176, "option": [380, 409], "oracl": 412, "ordin": 143, "ordinalencod": [326, 881], "ordinari": [211, 1000], "org": [372, 382, 1028], "origin": [86, 125, 277, 301, 311], "orthogon": [212, 1000], "orthogonal_mp": 688, "orthogonal_mp_gram": 689, "orthogonalmatchingpursuit": 667, "orthogonalmatchingpursuitcv": 668, "osx": [390, 396], "other": [317, 372, 390, 417, 1023, 1035], "otto": 1028, "our": [91, 266, 269, 285, 378], "out": [47, 145, 367, 386, 414, 993, 1000, 1006], "outdat": 386, "outlier": [25, 48, 196, 230, 240, 250, 297, 298, 311, 1000, 1010, 1014], "outliermixin": 432, "outlin": 1012, "output": [153, 249, 311, 325, 327, 359, 1020], "outputcodeclassifi": [837, 1005], "over": 252, "overfit": 286, "overhead": 365, "oversubscript": 366, "overview": [288, 385, 404, 410, 1010], "ovo": 280, "ovr": 280, "own": [380, 390, 1004], "p": [414, 1028], "packag": [245, 1023, 1047], "pair": [126, 410], "pair_confusion_matrix": 718, "paired_cosine_dist": 773, "paired_dist": 774, "paired_euclidean_dist": 775, "paired_manhattan_dist": 776, "pairwis": [27, 43, 271, 328, 1002], "pairwise_dist": 781, "pairwise_distances_argmin": 782, "pairwise_distances_argmin_min": 783, "pairwise_distances_chunk": 784, "pairwise_kernel": 777, "pairwisekernel": 623, "panda": [325, 383], "parallel": [41, 366, 384, 410, 417, 969, 993], "parallel_backend": 971, "paramet": [29, 41, 46, 109, 146, 269, 284, 322, 341, 348, 378, 380, 391, 392, 411, 417, 993, 1000, 1004, 1019], "parametergrid": 814, "parametersampl": 815, "parametr": 1009, "parametrize_with_check": 946, "pariba": 1028, "paristech": 1028, "pariti": 97, "parser": [325, 372], "part": [83, 419], "parti": [213, 247, 396], "partial": [116, 185, 187, 251, 1011], "partial_depend": 636, "partialdependencedisplai": 635, "partit": 191, "passiv": 1000, "passiveaggressiveclassifi": 669, "passiveaggressiveregressor": 670, "past": 0, "patch": [123, 418], "patchextractor": 586, "path": [150, 201, 206, 218, 360, 396], "pattern": 130, "pca": [44, 91, 105, 120, 121, 124, 125, 126, 127, 128, 316, 327, 328, 415, 544, 1021], "pdp": 187, "peerindex": 1028, "penalti": [204, 224, 348], "peopl": [0, 390, 1035, 1036, 1037, 1038], "per": 353, "percentag": 1004, "percentil": 344, "perceptron": [187, 306, 671, 1000, 1008], "perform": [72, 78, 274, 316, 322, 324, 328, 330, 353, 365, 378, 379, 410, 414], "period": [43, 214], "permiss": 390, "permut": [141, 188, 189, 277, 320, 414, 1012], "permutation_import": 637, "permutation_test_scor": 832, "perplex": 238, "persist": 404, "phimeca": 1028, "pickl": 404, "pictur": 80, "pinbal": 1004, "pipelin": [35, 101, 102, 104, 105, 154, 165, 183, 186, 242, 247, 252, 272, 317, 344, 380, 390, 391, 411, 419, 867, 1021, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "pitfal": [186, 361], "pl": 115, "plai": 344, "plan": 390, "plant": 375, "platform": [376, 386, 396], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 81, 82, 83, 90, 96, 97, 99, 100, 109, 113, 115, 118, 121, 122, 126, 135, 140, 142, 147, 150, 154, 155, 156, 157, 159, 167, 182, 187, 193, 194, 198, 205, 206, 207, 217, 218, 222, 234, 241, 245, 250, 251, 253, 261, 267, 268, 273, 275, 278, 280, 290, 298, 309, 317, 320, 322, 323, 330, 338, 339, 344, 345, 352, 357, 385, 999, 1011, 1032], "plot_tre": 921, "pls1": 115, "pls2": 115, "plscanon": [413, 485], "plsregress": [413, 486], "plssvd": [413, 487], "point": [122, 265, 285, 301, 404], "poisson": [213, 231, 321, 322, 1004], "poissonregressor": 672, "polar": [52, 327], "polici": 378, "polynomi": [43, 191, 193, 194, 214, 345, 996, 1000, 1002, 1014], "polynomial_kernel": 778, "polynomialcountsketch": [322, 643], "polynomialfeatur": 882, "posit": [120, 323], "possibl": [90, 383], "post": [29, 265, 274, 285, 356, 409], "post1": 1045, "posterior": 179, "power": [116, 213], "power_transform": 895, "powertransform": [311, 883], "pr": 377, "practic": [271, 361, 379, 383, 1001, 1008, 1018, 1019, 1020], "pre": [274, 361, 391], "precis": [278, 1004], "precision_recall_curv": 785, "precision_recall_fscore_support": 786, "precision_scor": 787, "precisionrecalldisplai": [241, 703], "precomput": [129, 195, 320, 415], "predefin": [414, 1004], "predefinedsplit": 816, "predict": [43, 49, 52, 61, 116, 135, 146, 157, 171, 185, 194, 213, 246, 265, 267, 278, 330, 365, 390, 391, 409, 414, 420, 1004, 1015], "predictionerrordisplai": 704, "predictor": 154, "premium": 231, "prepar": [120, 135, 144, 149, 191, 233, 280, 281, 316, 341], "preprocess": [36, 147, 154, 183, 186, 187, 250, 252, 310, 354, 361, 390, 1014, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "preprocessor": 187, "preserv": 386, "preval": 274, "princip": [55, 116, 126, 415, 1021], "prior": [53, 179, 256], "privat": 1052, "probabilist": [127, 171, 415, 420], "probabl": [61, 62, 63, 66, 156, 173, 408, 417, 1019], "problem": [186, 265, 415, 1019, 1020], "process": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 361, 393, 420, 1003], "process_rout": 963, "processor": 391, "product": [179, 231, 386, 390, 404, 420, 624], "profil": 384, "project": [0, 116, 125, 128, 244, 380, 390, 1016, 1021, 1023], "pronounc": 390, "propag": [51, 73, 330, 331, 332, 410, 1017], "proper": [52, 175], "properti": 392, "propos": 393, "provid": 383, "prune": [320, 356, 1020], "public": 1045, "publica": 1028, "pull": [378, 382, 386, 390], "pure": 231, "purpos": [217, 354, 1024], "pursuit": [212, 1000], "pypi": 390, "pytest": 386, "python": [245, 366, 384, 1022, 1023], "pytorch": 406, "qda": [70, 998], "quadrat": [70, 179, 420, 998], "quadraticdiscriminantanalysi": 553, "qualit": [43, 52], "qualiti": [353, 1004], "quantifi": [353, 1004], "quantil": [52, 146, 149, 215, 323, 324, 1000], "quantile_transform": 896, "quantileregressor": [215, 673], "quantiletransform": [311, 884], "quantiz": 86, "question": [390, 1027], "r2_score": 788, "r_regress": 612, "radial": [179, 420, 996], "radius_neighbors_graph": 861, "radiusneighborsclassifi": 857, "radiusneighborsregressor": 858, "radiusneighborstransform": 859, "rand": 410, "rand_scor": 789, "random": [41, 55, 120, 138, 140, 152, 153, 188, 189, 244, 253, 277, 279, 327, 361, 380, 387, 414, 415, 417, 993, 1000, 1016, 1021], "random_project": [37, 1049], "random_st": 390, "randomforestclassifi": 567, "randomforestregressor": 568, "randomized_range_find": 950, "randomized_svd": 951, "randomizedsearchcv": 817, "randomli": 118, "randomst": 361, "randomtreesembed": 569, "rang": 1014, "rangespan": 1028, "rank": [27, 213, 1004], "ransac": [216, 1000], "ransacregressor": 674, "rate": 417, "ratio": [274, 1004], "ration": [179, 420], "rationalquadrat": 626, "rbf": [245, 340, 341, 345, 420, 625, 1002, 1019], "rbf_kernel": 779, "rbfsampler": 644, "rcv1": 373, "reachabl": 410, "read": 378, "real": [42, 48, 107, 183, 373], "recal": [278, 1004], "recall_scor": 790, "receiv": [280, 281, 1004], "recent": 1, "recogn": 68, "recognit": [45, 373, 375], "recommend": [361, 1023], "reconstruct": [44, 53, 123], "reconstruct_from_patches_2d": 590, "recov": 193, "recurs": [166, 167, 419], "redirect": 55, "reduc": [91, 365], "reduct": [104, 233, 237, 252, 300, 316, 353, 998, 1007, 1021], "refer": [2, 50, 62, 64, 112, 123, 137, 191, 198, 288, 304, 382, 420, 994], "refit": [265, 269], "regard": [265, 409], "region": [80, 271], "register_parallel_backend": 973, "regress": [25, 27, 43, 52, 105, 107, 115, 116, 135, 146, 147, 157, 170, 175, 176, 177, 178, 193, 194, 197, 202, 204, 205, 206, 209, 211, 213, 215, 228, 230, 231, 243, 246, 303, 347, 358, 359, 374, 411, 420, 995, 997, 1000, 1004, 1005, 1007, 1008, 1018, 1019, 1020], "regressor": [25, 49, 135, 146, 193, 217, 318, 320, 323, 417], "regressorchain": [841, 1005], "regressormixin": 433, "regressortag": 925, "regular": [78, 109, 148, 186, 206, 217, 218, 284, 306, 348, 1000, 1008], "reinforc": 390, "relat": [43, 47, 1012, 1023, 1042], "releas": [183, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 382, 396, 1033], "relev": [111, 198, 1000], "remark": [43, 90, 237, 244], "remot": 386, "remov": [390, 419, 1014, 1035], "repeat": [361, 411, 414], "repeatedkfold": 818, "repeatedstratifiedkfold": 819, "replac": 182, "repli": 386, "replic": 404, "report": [378, 383, 1004], "repositori": 372, "represent": [126, 187, 242, 321, 365, 380, 418], "reproduc": [361, 383], "request": [378, 382, 386, 390], "resampl": 974, "rescal": 316, "reshap": 365, "resourc": [283, 366, 378, 1022, 1027], "respect": 274, "respons": [115, 393], "rest": [205, 280], "restart": 384, "restrict": [309, 1009], "result": [46, 47, 58, 64, 73, 81, 82, 83, 90, 91, 96, 97, 100, 109, 111, 113, 121, 122, 135, 140, 154, 157, 182, 191, 198, 218, 246, 250, 275, 290, 298, 317, 347, 353, 361, 993], "retriev": [51, 320], "return": 406, "reuter": 47, "review": [377, 378, 386], "rfe": 596, "rfecv": 597, "rich": [242, 321], "ridg": [170, 194, 196, 211, 217, 218, 246, 318, 675, 997, 1000], "ridge_regress": 690, "ridgeclassifi": 677, "ridgeclassifiercv": 678, "ridgecv": 676, "right": 398, "roadmap": 1024, "robust": [25, 88, 111, 112, 193, 216, 219, 361, 412, 993, 1000], "robust_scal": 897, "robustscal": [311, 885], "roc": [253, 268, 280, 281, 320, 1004], "roc_auc_scor": 791, "roc_curv": 792, "roccurvedisplai": [241, 705], "role": 393, "roll": [237, 380], "root_mean_squared_error": 793, "root_mean_squared_log_error": 794, "rotat": 130, "rout": [41, 247, 326, 327, 392, 401, 1052, 1053], "routin": [47, 366, 387], "rule": 1004, "run": [46, 91, 275], "runtim": [327, 376], "r\u00b2": 1004, "sa": 250, "safe_mask": 975, "safe_sparse_dot": 952, "safe_sqr": 976, "sampl": [10, 41, 58, 73, 88, 96, 109, 121, 122, 164, 195, 226, 246, 272, 284, 303, 321, 347, 350, 372, 387, 392, 417, 1000], "sample_without_replac": 972, "saniti": 386, "save": 390, "scalabl": [191, 273, 321], "scale": [88, 186, 233, 236, 316, 348, 367, 898, 1001, 1010, 1014, 1021], "scaler": 311, "scatter": 115, "scenario": 1000, "scientif": 1022, "scikit": [0, 41, 247, 266, 320, 321, 322, 323, 324, 325, 326, 327, 328, 364, 365, 376, 379, 380, 382, 383, 390, 393, 396, 1023, 1024, 1028, 1031], "scipi": [366, 1052], "score": [55, 115, 140, 159, 167, 182, 193, 261, 270, 277, 278, 344, 401, 410, 414, 999, 1004, 1019], "script": 383, "search": [252, 269, 271, 279, 282, 288, 391, 993], "second": [48, 72], "secur": [404, 1053], "segment": [80, 99], "select": [25, 27, 87, 93, 104, 127, 159, 162, 164, 167, 168, 183, 200, 202, 207, 261, 263, 344, 390, 401, 405, 414, 419, 993, 1000, 1041], "selectfdr": 598, "selectfpr": 599, "selectfrommodel": [419, 600], "selectfw": 601, "selectkbest": 602, "selectormixin": 604, "selectpercentil": 603, "self": [322, 333, 1017], "selftrainingclassifi": 904, "semant": 415, "semi": [183, 329, 330, 334, 335, 1017], "semi_supervis": [38, 1045, 1046, 1047, 1051], "sen": [230, 1000], "sens": 53, "sensit": 265, "separ": [121, 225, 342, 343], "sequenc": [178, 390], "sequenti": [168, 419], "sequentialfeatureselector": [322, 605], "seri": [52, 207, 414], "serv": 404, "set": [48, 107, 109, 154, 182, 217, 265, 278, 328, 341, 356, 390, 409, 414, 1000], "set_config": 905, "set_output": [254, 325, 327, 380], "set_param": 380, "sever": [231, 235], "sgd": [222, 223, 224, 225, 226, 1000, 1018], "sgdclassifi": 679, "sgdoneclasssvm": 680, "sgdregressor": 681, "shape": 238, "share": [43, 52, 187], "shift": [96, 410], "should": 390, "show": [159, 280], "show_vers": 906, "shrinkag": [109, 412, 417, 998], "shrunk": 412, "shrunk_covari": 483, "shrunkcovari": 478, "shrunken": 1007, "shuffl": [414, 977], "shufflesplit": 820, "sigmoid": [345, 408, 1002], "sigmoid_kernel": 780, "signal": [198, 415], "signific": 277, "silhouett": [93, 410], "silhouette_sampl": 795, "silhouette_scor": 796, "similar": [178, 1002, 1004], "simpl": [132, 170, 247, 296, 384], "simpleimput": [328, 633], "simul": 185, "sine": [179, 262, 420], "singl": [137, 154, 231, 241, 374, 410, 994], "single_source_shortest_path_length": 957, "singular": [55, 415], "sinusoid": 194, "size": 417, "sketch": 996, "skew": 996, "skewedchi2sampl": 645, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sklearn_assume_finit": 366, "sklearn_build_enable_debug_symbol": 366, "sklearn_enable_debug_cython_direct": 366, "sklearn_pairwise_dist_chunk_s": 366, "sklearn_run_float32_test": 366, "sklearn_se": 366, "sklearn_skip_network_test": 366, "sklearn_tests_global_random_se": 366, "sklearn_warnings_as_error": 366, "sklearn_working_memori": 366, "skop": 404, "slep": 393, "smacof": 697, "small": 383, "sne": [238, 1001], "so": 390, "social": 1027, "soft": 417, "solido": 1028, "solut": 90, "solver": [220, 415, 1000], "some": 344, "someth": 383, "sometim": 390, "sort_graph_by_row_valu": 862, "sourc": [102, 121, 376], "space": [51, 125, 411, 993, 1001], "spars": [41, 113, 120, 129, 186, 198, 199, 228, 320, 327, 352, 353, 387, 412, 415, 419, 1014, 1016, 1018, 1052], "sparse_encod": 551, "sparsecod": 545, "sparsefunc": 1044, "sparsepca": [415, 546], "sparserandomproject": 900, "sparsiti": [204, 210, 418], "spawn": 366, "speci": [50, 304, 373], "special": 354, "specif": [280, 376, 380, 993, 1023, 1024], "specifi": [151, 390, 993], "spectral": [57, 58, 59, 99, 233, 407, 410, 1001], "spectral_clust": 464, "spectral_embed": 698, "spectralbiclust": [58, 453], "spectralclust": 454, "spectralcoclust": 455, "spectralembed": 694, "speed": [49, 384], "sphere": 235, "sphinx": 378, "spline": [43, 214, 323, 1014], "splinetransform": 886, "split": [143, 322, 361, 414], "splitter": [29, 361], "sponsor": 0, "spotifi": 1028, "sprint": 0, "squar": [116, 146, 179, 208, 211, 217, 420, 996, 1000, 1002, 1004], "stabil": 321, "stabl": 323, "stack": [154, 320, 417], "stackingclassifi": 570, "stackingregressor": 571, "stall": 378, "standard": [386, 1014], "standardscal": [311, 887], "start": 391, "statement": 1024, "statist": [271, 1023], "statlog": 265, "statu": 401, "std": [159, 193], "step": [43, 252, 382, 391, 411], "stochast": [221, 227, 233, 307, 1000, 1001, 1009, 1018], "stock": 51, "stop": [144, 149, 221, 418, 1018], "strategi": [86, 269, 288, 307, 314, 326, 328, 367, 410, 1004], "stratif": 414, "stratifi": 414, "stratifiedgroupkfold": [414, 821], "stratifiedkfold": 822, "stratifiedshufflesplit": 823, "stream": 367, "string": 390, "strip": 352, "strong": 196, "strongli": 1012, "structur": [51, 74, 81, 100, 178, 332, 360], "studi": 250, "submit": 378, "subpackag": 1024, "subsampl": 417, "subscript": 328, "subtleti": 361, "success": [282, 283, 322, 993], "sum": 627, "summar": 404, "summari": [62, 144, 202, 353, 354, 404, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "supervis": [183, 329, 330, 334, 335, 1008, 1017, 1026], "support": [0, 62, 143, 149, 183, 207, 317, 320, 321, 322, 323, 325, 326, 327, 336, 339, 347, 390, 396, 401, 406, 408, 417, 1019, 1020, 1027, 1052, 1053], "surfac": [142, 245, 357], "svc": [253, 345, 348, 912, 1019], "svd": [55, 120, 415], "svm": [39, 45, 161, 164, 165, 191, 227, 245, 323, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 1000, 1010, 1018, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "svmlight": 372, "svr": [246, 347, 913, 1019], "swiss": 237, "switch": 366, "symmetr": 115, "synthet": [61, 107, 193, 198, 268, 318, 383], "system": 376, "t": [233, 238, 1001], "tabl": 390, "tag": [376, 378, 380, 926], "take": 271, "takeawai": 213, "talk": 1022, "tangent": 1001, "target": [41, 107, 177, 231, 317, 318, 390, 392, 411, 1005, 1014, 1015], "targetencod": [326, 888], "targettag": 927, "task": [25, 207, 1000, 1023], "team": [0, 377], "technic": 393, "techniqu": 234, "templat": 380, "tensor": 996, "term": [353, 392, 418], "test": [44, 109, 163, 274, 277, 284, 352, 356, 376, 378, 380, 386, 387, 414], "text": [17, 47, 183, 242, 272, 334, 351, 352, 353, 354, 373, 418], "tf": 418, "tfidftransform": 593, "tfidfvector": [353, 354, 594], "than": 390, "theil": [230, 1000], "theilsenregressor": 682, "them": [123, 377], "theoret": 244, "thi": [217, 1024], "third": [213, 247, 396], "thread": 366, "threshold": [265, 285, 328, 333, 409], "throughput": [49, 365], "tie": 349, "time": [43, 52, 140, 207, 245, 246, 352, 414, 1025], "timeseriessplit": 824, "tip": [365, 379, 386, 993, 1001, 1008, 1018, 1019, 1020], "togeth": [251, 280], "toi": [79, 95, 240, 375], "toler": 168, "tomographi": 53, "too": 366, "tool": [387, 390, 406], "top": [353, 1004], "top_k_accuracy_scor": 797, "topic": 54, "total": [152, 356, 417], "tough": 377, "track": [386, 411], "tracker": [378, 1027], "trade": 1000, "tradeoff": [268, 1004], "train": [134, 135, 144, 147, 150, 157, 167, 217, 241, 246, 250, 251, 253, 261, 284, 288, 309, 317, 318, 322, 333, 341, 345, 352, 356, 357, 360, 404, 414, 1007, 1017], "train_test_split": 833, "transform": [102, 103, 104, 107, 115, 139, 152, 252, 322, 323, 324, 370, 390, 391, 411, 1007, 1014, 1015, 1016], "transformedtargetregressor": 467, "transformermixin": 434, "transformertag": 928, "translat": 1023, "tree": [40, 134, 135, 139, 141, 142, 149, 152, 183, 188, 213, 320, 325, 326, 327, 355, 356, 357, 358, 359, 360, 390, 417, 419, 1007, 1012, 1020, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "triag": 377, "trick": [365, 384, 386, 418], "trigonometr": 43, "troubleshoot": 396, "true": [193, 194], "truncat": 415, "truncatedsvd": 547, "trust": 159, "trustworthi": 699, "truth": [72, 193], "tsne": [291, 695], "tune": [29, 146, 265, 269, 272, 285, 322, 328, 409, 993], "tunedthresholdclassifiercv": [328, 825], "tutori": [158, 183, 1022], "tweedi": [231, 1004], "tweedieregressor": [231, 683], "two": [99, 136, 199, 251, 271], "type": [103, 256, 379, 380, 390, 392, 406, 410], "type_of_target": 966, "typic": 377, "t\u00e9l\u00e9com": 1028, "u": 0, "ubuntu": 396, "uci": 288, "unbalanc": [343, 1019], "uncertain": 330, "uncertainti": 52, "unclaim": 378, "undefinedmetricwarn": 581, "under": [178, 390, 1030, 1051], "underfit": 286, "understand": 360, "unfold": 386, "uniform": [311, 1014], "unique_label": 967, "univari": [87, 115, 164, 344, 419, 994], "univers": 380, "unlabel": 1017, "unless": 383, "unstructur": 100, "unsupervis": [1007, 1009, 1021, 1029], "unweight": 401, "up": 1010, "updat": [382, 1045], "us": [44, 45, 51, 55, 120, 121, 123, 151, 152, 154, 168, 175, 216, 227, 229, 271, 275, 280, 290, 312, 347, 352, 353, 360, 361, 367, 379, 383, 384, 386, 390, 414, 415, 418, 419, 998, 1000, 1001, 1004, 1008, 1018, 1019, 1020, 1028, 1045], "usabl": 390, "usag": [384, 390, 401, 406, 408, 411, 417, 418, 1000], "user": [1027, 1030], "util": [41, 371, 383, 387, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "v": [87, 100, 109, 110, 112, 116, 125, 167, 187, 188, 196, 205, 231, 274, 280, 286, 356, 410, 417, 994], "v_measure_scor": 798, "valgrind": [384, 386], "valid": [29, 41, 43, 159, 167, 202, 244, 265, 266, 267, 269, 270, 274, 276, 281, 344, 361, 365, 380, 387, 409, 414, 993, 999, 1000], "validate_data": 992, "validation_curv": 834, "validationcurvedisplai": [326, 826], "valu": [149, 168, 180, 181, 182, 183, 238, 247, 320, 326, 327, 360, 378, 406, 415, 417, 994, 1004, 1012, 1014, 1020], "vanilla": [265, 285], "vari": [72, 306, 333, 410], "variabl": [25, 115, 185, 186, 366, 390], "varianc": [137, 211, 419, 1004, 1014], "variancethreshold": 606, "variant": 181, "variat": [256, 1003], "variou": [49, 85, 220, 238, 390], "vector": [55, 62, 86, 183, 336, 339, 347, 352, 354, 418, 1019], "version": [324, 372, 376, 378, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "versu": [137, 227, 276, 335, 365], "via": [44, 52, 86, 200, 202, 231, 417, 996], "video": [378, 1022], "visual": [5, 29, 51, 91, 130, 144, 241, 246, 253, 266, 308, 321, 341, 410, 411, 1004, 1032], "vote": [157, 417], "votingclassifi": [155, 156, 572], "votingregressor": 573, "wage": [185, 186], "wai": [187, 378, 390], "ward": [81, 100, 410], "ward_tre": 465, "warm": 384, "warm_start": 1008, "warn": 387, "we": 100, "weak": [134, 417], "websit": [382, 1045], "weight": [41, 134, 193, 195, 226, 308, 321, 350, 401, 417, 418], "weighted_mod": 953, "what": [360, 390], "when": 265, "which": 1000, "whitekernel": 628, "who": 1028, "why": [390, 417], "wikipedia": 55, "wild": 373, "window": [376, 396], "wine": 375, "winpython": 396, "wisconsin": 375, "within": 104, "without": [74, 299, 352], "wolf": [69, 110, 412], "word": [352, 418], "work": [41, 183, 351, 365, 377, 390], "workflow": [377, 404], "world": [42, 107, 183, 373], "wrap": 290, "written": 68, "wrong": [186, 390], "x": 230, "x86_64": 386, "xor": [174, 345, 420], "y": [230, 390, 1015, 1017], "yeast": 288, "yep": 384, "yhat": 1028, "you": [159, 390], "your": [380, 383, 1004], "zero": 1004, "zero_one_loss": 799, "zopa": 1028}})