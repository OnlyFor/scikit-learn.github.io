Search.setIndex({"alltitles": {"(Generalized) linear models": [[199, "generalized-linear-models"]], "1-way partial dependence with different models": [[170, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[70, "newsgroups-dataset"]], "2D interaction plots": [[170, "d-interaction-plots"]], "3D representation": [[170, "d-representation"]], "A constant prediction baseline": [[199, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[58, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "A demo of the mean-shift clustering algorithm": [[63, "a-demo-of-the-mean-shift-clustering-algorithm"]], "A more flexible plotting API": [[318, "a-more-flexible-plotting-api"]], "A more secure format: skops": [[401, "a-more-secure-format-skops"]], "A note on shuffling": [[411, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[13, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[386, "a-simple-algorithmic-trick-warm-restarts"]], "A simple example shipped with scikit-learn: iris dataset": [[1020, null]], "A tutorial on statistical-learning for scientific data processing": [[1017, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "A typical workflow for triaging issues": [[379, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[983, "aic-and-bic-criteria"]], "API Interface": [[398, "api-interface"]], "API Reference": [[406, "api-reference"]], "API changes": [[1037, "api-changes"]], "API changes summary": [[1030, "api-changes-summary"], [1030, "id4"], [1030, "id7"], [1030, "id10"], [1031, "api-changes-summary"], [1032, "api-changes-summary"], [1033, "api-changes-summary"], [1034, "api-changes-summary"], [1035, "api-changes-summary"], [1036, "api-changes-summary"], [1036, "id6"], [1037, "api-changes-summary"]], "APIs of scikit-learn objects": [[382, "apis-of-scikit-learn-objects"]], "ARFF parser": [[374, "arff-parser"]], "AWeber": [[1012, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[157, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Ablation study": [[238, "ablation-study"]], "About the project": [[392, "about-the-project"]], "About us": [[0, "about-us"]], "Access pipeline steps": [[408, "access-pipeline-steps"]], "Access to nested parameters": [[408, "access-to-nested-parameters"]], "Accuracy of the Model": [[171, "accuracy-of-the-model"]], "Accuracy score": [[987, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[356, "accuracy-vs-alpha-for-training-and-testing-sets"]], "AdaBoost": [[414, "adaboost"]], "Add support for monotonic constraints in tree-based models": [[322, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[407, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[979, "additive-chi-squared-kernel"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Advanced Plotting With Partial Dependence": [[239, "advanced-plotting-with-partial-dependence"]], "Advantages:": [[407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null]], "Affinity Propagation": [[407, "affinity-propagation"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Aggressive elimination of candidates": [[976, "aggressive-elimination-of-candidates"]], "Algorithms": [[991, "algorithms"]], "Alpine Linux": [[397, "alpine-linux"]], "Alternative compilers": [[378, "alternative-compilers"]], "Alternatives to brute force parameter search": [[976, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[238, "ames-housing-dataset"]], "Amount of resource and number of candidates at each iteration": [[976, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "An example custom estimator implementing a simple classifier": [[109, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[59, "an-example-of-k-means-initialization"]], "An example of reshaping data would be the digits dataset": [[1020, null]], "An introduction to machine learning with scikit-learn": [[1014, "an-introduction-to-machine-learning-with-scikit-learn"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[397, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[111, "analysis"]], "Analysis of a bag-of-words document classifier": [[351, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[124, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[170, "analysis-of-the-plots"]], "Analysis of the results": [[27, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[976, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[13, "analyzing-the-bike-sharing-demand-dataset"]], "Application example: vector quantization": [[1022, null]], "Applications and examples": [[415, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[283, "approximate-nearest-neighbors-in-tsne"]], "Arch Linux": [[397, "arch-linux"]], "Architectural / general goals": [[1008, "architectural-general-goals"]], "Array API support (experimental)": [[403, "array-api-support-experimental"]], "Artwork": [[0, "artwork"]], "Attributes": [[394, "attributes"]], "Authors": [[0, "authors"], [1030, "authors"], [1030, "id20"]], "Automatic Relevance Determination (ARD)": [[183, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[983, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[393, "automatic-parameter-searches"]], "Available Plotting Utilities": [[1027, "available-plotting-utilities"]], "Available documentation for Scikit-learn": [[1026, "available-documentation-for-scikit-learn"]], "BIRCH": [[407, "birch"]], "BNP Paribas Cardif": [[1012, "id29"]], "Bagging meta-estimator": [[414, "bagging-meta-estimator"]], "Bags of words": [[1023, "bags-of-words"]], "Balance model complexity and cross-validated score": [[259, "balance-model-complexity-and-cross-validated-score"]], "Balanced accuracy score": [[987, "balanced-accuracy-score"]], "Ball Tree": [[990, "ball-tree"]], "Base classes": [[406, "base-classes"]], "BaseEstimator and mixins:": [[382, null]], "Basic kernels": [[417, "basic-kernels"]], "Basic shrinkage": [[409, "basic-shrinkage"]], "Bayesian Regression": [[983, "bayesian-regression"]], "Bayesian Ridge Regression": [[983, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[178, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[406, "bayesian-regressors"]], "Before a release": [[384, "before-a-release"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[7, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Benchmarking classifiers": [[351, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[989, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[992, "bernoulli-restricted-boltzmann-machines"]], "Bestofmedia Group": [[1012, "id13"]], "Biclustering": [[18, "biclustering"], [166, "biclustering"], [376, "biclustering"], [404, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "Biclustering evaluation": [[404, "biclustering-evaluation"]], "Biclustering metrics": [[406, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[170, "bike-sharing-dataset-preprocessing"]], "Binary Case": [[983, "binary-case"]], "Binary case": [[987, "binary-case"]], "Binary classification": [[987, "binary-classification"]], "Birchbox": [[1012, "id12"]], "Bisecting K-Means": [[407, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "BisectingKMeans: divide and cluster": [[319, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Boil down your script to something as small as possible": [[385, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[138, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1012, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[377, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[987, "brier-score-loss"]], "Brute Force": [[990, "brute-force"]], "Bug Tracker": [[1011, "bug-tracker"]], "Bug fixes": [[1033, "bug-fixes"], [1033, "id1"], [1033, "id3"], [1034, "bug-fixes"], [1034, "id3"], [1035, "bug-fixes"], [1035, "id3"], [1036, "bug-fixes"], [1036, "id5"], [1037, "bug-fixes"], [1037, "id4"]], "Bug triaging and issue curation": [[379, "bug-triaging-and-issue-curation"]], "Build a pipeline": [[408, "build-a-pipeline"]], "Build dependencies": [[378, "build-dependencies"]], "Build the dataset": [[156, "build-the-dataset"]], "Building a pipeline": [[1023, "building-a-pipeline"]], "Building a specific version from a tag": [[378, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[388, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[378, "building-from-source"]], "Building the documentation": [[380, "building-the-documentation"]], "Bulk versus Atomic mode": [[366, "bulk-versus-atomic-mode"]], "CCA (PLS mode B with symmetric deflation)": [[85, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[362, "cv-splitters"], [362, "id3"]], "Caching nearest neighbors": [[285, "caching-nearest-neighbors"]], "Caching transformers within a Pipeline": [[72, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[408, "caching-transformers-avoid-repeated-computation"]], "Calibrating a classifier": [[405, "calibrating-a-classifier"]], "Calibration": [[23, "calibration"], [166, "calibration"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [405, "calibration-curves"]], "Calibration of the confidence interval": [[124, "calibration-of-the-confidence-interval"]], "California Housing dataset": [[375, "california-housing-dataset"]], "Calinski-Harabasz Index": [[407, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[85, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[410, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[238, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[121, "categorical-feature-support-in-gradient-boosting"]], "Categorical Features Support": [[414, "categorical-features-support"]], "Categorical Naive Bayes": [[989, "categorical-naive-bayes"]], "Centering kernel matrices": [[997, "centering-kernel-matrices"]], "Chain of binary classifiers": [[281, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[380, "change-the-default-value-of-a-parameter"]], "Change.org": [[1012, "id14"]], "Changed displays": [[1046, "changed-displays"]], "Changed models": [[1037, "changed-models"], [1038, "changed-models"], [1038, "id9"], [1038, "id22"], [1039, "changed-models"], [1039, "id6"], [1040, "changed-models"], [1041, "changed-models"], [1041, "id3"], [1042, "changed-models"], [1043, "changed-models"], [1044, "changed-models"], [1044, "id6"], [1045, "changed-models"], [1045, "id7"], [1046, "changed-models"], [1046, "id4"], [1047, "changed-models"], [1048, "changed-models"]], "Changelog": [[1030, "changelog"], [1030, "id1"], [1030, "id3"], [1030, "id6"], [1030, "id9"], [1030, "id12"], [1030, "id14"], [1030, "id16"], [1030, "id18"], [1030, "id19"], [1031, "changelog"], [1031, "id2"], [1032, "changelog"], [1033, "changelog"], [1034, "changelog"], [1034, "id2"], [1035, "changelog"], [1035, "id2"], [1036, "changelog"], [1036, "id1"], [1036, "id3"], [1037, "changelog"], [1037, "id2"], [1038, "changelog"], [1038, "id1"], [1038, "id5"], [1038, "id10"], [1038, "id23"], [1039, "changelog"], [1039, "id1"], [1039, "id2"], [1039, "id7"], [1040, "changelog"], [1040, "id1"], [1040, "id4"], [1041, "changelog"], [1041, "id1"], [1041, "id4"], [1042, "changelog"], [1042, "id1"], [1042, "id4"], [1043, "changelog"], [1043, "id6"], [1044, "changelog"], [1044, "id1"], [1044, "id7"], [1045, "changelog"], [1045, "id1"], [1045, "id9"], [1046, "changelog"], [1046, "id1"], [1046, "id6"], [1047, "changelog"], [1047, "id2"], [1048, "changelog"]], "Changes impacting all modules": [[1045, "changes-impacting-all-modules"], [1045, "id8"], [1046, "changes-impacting-all-modules"], [1046, "id5"], [1047, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1047, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1038, "changes-to-estimator-checks"], [1039, "changes-to-estimator-checks"], [1040, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[388, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[315, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[169, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[985, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[412, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[7, "choose-parameters"]], "Choosing a resource": [[976, "choosing-a-resource"]], "Choosing min_resources and the number of candidates": [[976, "choosing-min-resources-and-the-number-of-candidates"]], "Choosing the parameters of the model": [[1014, null]], "Choosing the right estimator": [[1016, "choosing-the-right-estimator"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[394, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[263, "class-likelihood-ratios-to-measure-classification-performance"]], "Class likelihood ratios": [[987, "class-likelihood-ratios"]], "Classes": [[406, "classes"]], "Classical linear regressors": [[406, "classical-linear-regressors"]], "Classification": [[29, "classification"], [32, "classification"], [159, "classification"], [166, "classification"], [983, "classification"], [990, "id4"], [991, "classification"], [1001, "classification"], [1002, "classification"], [1003, "classification"], [1021, "classification"]], "Classification and ROC analysis": [[270, "classification-and-roc-analysis"]], "Classification criteria": [[1003, "classification-criteria"]], "Classification metrics": [[406, "classification-metrics"], [987, "classification-metrics"]], "Classification of text documents using sparse features": [[351, "classification-of-text-documents-using-sparse-features"]], "Classification pipeline": [[70, "classification-pipeline"]], "Classification report": [[987, "classification-report"]], "Classifier comparison": [[31, "classifier-comparison"]], "ClassifierChain": [[988, "classifierchain"]], "Classifying irises:": [[1021, null]], "Clear definition of the public API": [[1040, "clear-definition-of-the-public-api"]], "Cloning": [[382, "cloning"]], "Closing issues: a tough call": [[379, null]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Clustering": [[36, "clustering"], [166, "clustering"], [407, "clustering"]], "Clustering evaluation summary": [[352, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[412, null]], "Clustering metrics": [[406, "clustering-metrics"], [987, "clustering-metrics"]], "Clustering performance evaluation": [[407, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[352, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[352, "clustering-text-documents-using-k-means"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Clustering: grouping observations together": [[1022, "clustering-grouping-observations-together"]], "Code Contributors": [[1034, "code-contributors"], [1035, "code-contributors"], [1036, "code-contributors"], [1036, "id7"]], "Code Review Guidelines": [[380, "code-review-guidelines"]], "Code and Documentation Contributors": [[1037, "code-and-documentation-contributors"], [1037, "id10"], [1038, "code-and-documentation-contributors"], [1038, "id8"], [1038, "id21"], [1038, "id41"]], "Coding guidelines": [[382, "coding-guidelines"]], "Cohen\u2019s kappa": [[987, "cohen-s-kappa"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Column Transformer with Heterogeneous Data Sources": [[70, "column-transformer-with-heterogeneous-data-sources"]], "Column Transformer with Mixed Types": [[71, "column-transformer-with-mixed-types"]], "ColumnTransformer for heterogeneous data": [[408, "columntransformer-for-heterogeneous-data"]], "Combine predictors using stacking": [[132, "combine-predictors-using-stacking"]], "Combining the display objects into a single plot": [[229, "combining-the-display-objects-into-a-single-plot"]], "Common Vectorizer usage": [[415, "common-vectorizer-usage"]], "Common cases: predefined values": [[987, "common-cases-predefined-values"]], "Common estimator checks": [[403, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[362, "common-pitfalls-and-recommended-practices"]], "Common pitfalls and subtleties": [[362, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[169, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "Communication Team": [[0, "communication-team"]], "Communication team": [[395, "communication-team"]], "Compact text representation": [[230, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Compare Stochastic learning strategies for MLPClassifier": [[300, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Compare cross decomposition methods": [[85, "compare-cross-decomposition-methods"]], "Compare different approaches to setting the regularization parameter": [[78, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[26, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[305, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "Compare times of SVR and Kernel Ridge Regression": [[234, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[144, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[178, "comparing-linear-bayesian-regressors"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[291, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Comparing QuantileRegressor and LinearRegression": [[201, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[117, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Comparing Target Encoder with Other Encoders": [[311, "comparing-target-encoder-with-other-encoders"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[228, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "Comparing different hierarchical linkage methods on toy datasets": [[62, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "Comparing random forests and the multi-output meta estimator": [[131, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Comparing randomized search and grid search for hyperparameter estimation": [[268, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Comparing the results": [[175, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[185, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[185, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[260, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[260, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[206, "comparing-various-online-solvers"]], "Comparison between grid search and successive halving": [[271, "comparison-between-grid-search-and-successive-halving"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Comparison of F-test and mutual information": [[143, "comparison-of-f-test-and-mutual-information"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[103, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Comparison of LDA and QDA": [[34, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[220, "comparison-of-manifold-learning-methods"]], "Comparison of kernel ridge and Gaussian process regression": [[151, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Comparison of kernel ridge regression and SVR": [[234, "comparison-of-kernel-ridge-regression-and-svr"]], "Comparison of results": [[80, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[64, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Comparison with special purpose text vectorizers": [[353, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[983, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[989, "complement-naive-bayes"]], "Complexity": [[990, "complexity"], [991, "complexity"], [1001, "complexity"], [1002, "complexity"], [1003, "complexity"]], "Complexity analysis": [[262, "complexity-analysis"]], "Components and loadings": [[1022, null]], "Composite estimators and parameter spaces": [[976, "composite-estimators-and-parameter-spaces"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[14, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Computation methods": [[994, "computation-methods"]], "Computation times": [[16, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [68, "computation-times"], [76, "computation-times"], [83, "computation-times"], [87, "computation-times"], [93, "computation-times"], [106, "computation-times"], [108, "computation-times"], [136, "computation-times"], [141, "computation-times"], [149, "computation-times"], [161, "computation-times"], [165, "computation-times"], [173, "computation-times"], [176, "computation-times"], [218, "computation-times"], [226, "computation-times"], [243, "computation-times"], [252, "computation-times"], [276, "computation-times"], [279, "computation-times"], [282, "computation-times"], [297, "computation-times"], [303, "computation-times"], [313, "computation-times"], [323, "computation-times"], [331, "computation-times"], [332, "computation-times"], [349, "computation-times"], [354, "computation-times"], [361, "computation-times"], [1009, "computation-times"]], "Computational Performance": [[366, "computational-performance"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Compute clustering": [[47, "compute-clustering"], [67, "compute-clustering"], [67, "id1"]], "Compute clustering with KMeans": [[64, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[63, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[64, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[204, "compute-paths"]], "Compute regularization path": [[192, "compute-regularization-path"]], "Compute score and computation times": [[117, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[78, "compute-the-likelihood-on-test-data"]], "Compute train and test errors": [[273, "compute-train-and-test-errors"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[411, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[365, "computing-with-scikit-learn"]], "Concatenating multiple feature extraction methods": [[74, "concatenating-multiple-feature-extraction-methods"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[245, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Concluding remarks": [[4, "concluding-remarks"], [224, "concluding-remarks"]], "Conclusion": [[7, "conclusion"], [13, "conclusion"], [188, "conclusion"], [278, "conclusion"], [286, "conclusion"], [312, "conclusion"], [342, "conclusion"]], "Conclusions": [[183, "conclusions"]], "Configuration switches": [[367, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[366, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[254, "confusion-matrix"], [987, "confusion-matrix"]], "Connectivity graph of an image": [[415, "connectivity-graph-of-an-image"]], "Connectivity-constrained clustering": [[1022, "connectivity-constrained-clustering"]], "Cons:": [[986, null], [986, null]], "Construct the kernel-based regression models": [[234, "construct-the-kernel-based-regression-models"]], "Contingency Matrix": [[407, "contingency-matrix"]], "Continuous Integration (CI)": [[380, "continuous-integration-ci"]], "Contributing": [[380, "contributing"], [392, "contributing"]], "Contributing code": [[380, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [395, "contributor-experience-team"]], "Contributors": [[395, "contributors"]], "Controlling randomness": [[362, "controlling-randomness"]], "Controlling the tree size": [[414, "controlling-the-tree-size"]], "Conventions": [[1014, "conventions"]], "Convergence of the AdaBoostClassifier": [[111, "convergence-of-the-adaboostclassifier"]], "Core Contributors": [[395, "core-contributors"]], "Cosine similarity": [[985, "cosine-similarity"]], "Covariance estimation": [[77, "covariance-estimation"], [166, "covariance-estimation"], [409, "covariance-estimation"]], "Coverage error": [[987, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[385, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Create ConfusionMatrixDisplay": [[229, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[229, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[229, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[312, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[267, "create-multi-label-data-fit-and-predict"]], "Create the data": [[102, "create-the-data"]], "Create the pipeline": [[341, "create-the-pipeline"]], "Creating a dataset": [[342, "creating-a-dataset"]], "Creating a non-noisy data set": [[203, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[111, "creating-the-dataset"]], "Creating transformers": [[70, "creating-transformers"]], "Cross decomposition": [[84, "cross-decomposition"], [166, "cross-decomposition"], [410, "cross-decomposition"]], "Cross validation and model selection": [[411, "cross-validation-and-model-selection"]], "Cross validation iterators": [[411, "cross-validation-iterators"]], "Cross validation of time series data": [[411, "cross-validation-of-time-series-data"]], "Cross-validated estimators": [[1018, "cross-validated-estimators"]], "Cross-validation generators": [[1018, "cross-validation-generators"]], "Cross-validation iterators for grouped data": [[411, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[411, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[411, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[263, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[138, "cross-validation-on-diabetes-dataset-exercise"]], "Cross-validation: evaluating estimator performance": [[411, "cross-validation-evaluating-estimator-performance"]], "Curve Fitting with Bayesian Ridge Regression": [[179, "curve-fitting-with-bayesian-ridge-regression"]], "Custom Kernels": [[1002, "custom-kernels"]], "Custom refit strategy of a grid search with cross-validation": [[258, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "Custom transformers": [[997, "custom-transformers"]], "Customizing the vectorizer classes": [[415, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[381, "cython-best-practices-conventions-and-knowledge"]], "DBSCAN": [[407, "dbscan"]], "DO NOT report your data unless it is extremely necessary": [[385, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[26, "data"]], "Data Considerations": [[375, null]], "Data Loading and Feature Engineering": [[171, "data-loading-and-feature-engineering"]], "Data Preparation": [[122, "data-preparation"]], "Data Publica": [[1012, "id21"]], "Data and sample properties": [[394, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[34, "data-generation"], [49, "data-generation"], [57, "data-generation"], [128, "data-generation"], [147, "data-generation"], [157, "data-generation"], [250, "data-generation"], [325, "data-generation"], [346, "data-generation"]], "Data generation and model fitting": [[118, "data-generation-and-model-fitting"]], "Data leakage": [[362, "data-leakage"]], "Data leakage during pre-processing": [[362, "data-leakage-during-pre-processing"]], "Data loading": [[261, "data-loading"]], "Data preprocessing": [[125, "data-preprocessing"]], "DataFrame Support": [[1047, "dataframe-support"]], "DataRobot": [[1012, "id18"]], "Dataiku": [[1012, "id25"]], "Dataset": [[25, "dataset"], [27, "dataset"], [188, "dataset"], [266, "dataset"]], "Dataset Versions": [[374, "dataset-versions"]], "Dataset and Gaussian process generation": [[160, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[267, "dataset-and-model"]], "Dataset based latent variables model": [[85, "dataset-based-latent-variables-model"]], "Dataset examples": [[88, "dataset-examples"], [166, "dataset-examples"]], "Dataset generation": [[158, "dataset-generation"], [201, "dataset-generation"]], "Dataset loading utilities": [[373, "dataset-loading-utilities"], [385, "dataset-loading-utilities"]], "Dataset preparation": [[95, "dataset-preparation"], [220, "dataset-preparation"]], "Dataset preprocessing and model training": [[238, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[372, "dataset-transformations"]], "Datasets": [[1020, "datasets"]], "Datasets in svmlight / libsvm format": [[374, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[407, "davies-bouldin-index"]], "Debian/Ubuntu": [[397, "debian-ubuntu"]], "Debugging memory errors in Cython with valgrind": [[388, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[395, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[233, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[358, "decision-tree-regression"]], "Decision Tree Regression with AdaBoost": [[112, "decision-tree-regression-with-adaboost"]], "Decision Trees": [[166, "decision-trees"], [355, "decision-trees"], [1003, "decision-trees"]], "Decision boundary": [[286, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[330, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "Decision path": [[360, "decision-path"]], "Decoding text files": [[415, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[412, "decomposing-signals-in-components-matrix-factorization-problems"]], "Decomposition": [[94, "decomposition"], [95, "decomposition"], [166, "decomposition"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Decompositions: from a signal to components and loadings": [[1022, "decompositions-from-a-signal-to-components-and-loadings"]], "Define a function to visualize cross-validation behavior": [[255, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[220, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[58, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[258, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[353, "define-preprocessing-functions"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Define the classifiers": [[257, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[987, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Demo of HDBSCAN clustering algorithm": [[55, "demo-of-hdbscan-clustering-algorithm"]], "Demo of OPTICS clustering algorithm": [[65, "demo-of-optics-clustering-algorithm"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Demonstrating the different strategies of KBinsDiscretizer": [[308, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Demonstration of k-means assumptions": [[57, "demonstration-of-k-means-assumptions"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[264, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Density Estimation": [[413, "density-estimation"]], "Density Estimation for a Gaussian mixture": [[249, "density-estimation-for-a-gaussian-mixture"]], "Density Estimation: Histograms": [[413, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1002, "density-estimation-novelty-detection"]], "Dependencies": [[378, "dependencies"]], "Deprecation": [[380, "deprecation"]], "Deprecation / Default Value Change": [[235, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1040, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[168, "description-of-the-simulated-data"]], "Design the proper kernel": [[156, "design-the-proper-kernel"]], "Detection error tradeoff (DET)": [[987, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[257, "detection-error-tradeoff-det-curve"]], "Developer API for HTML representation": [[382, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[382, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[382, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[388, "developers-tips-and-tricks"]], "Developer\u2019s Guide": [[383, "developer-s-guide"]], "Developing Estimators": [[107, "developing-estimators"], [166, "developing-estimators"]], "Developing scikit-learn estimators": [[382, "developing-scikit-learn-estimators"]], "Developing with the Plotting API": [[387, "developing-with-the-plotting-api"]], "Diabetes dataset": [[377, "diabetes-dataset"], [1021, null]], "DictVectorizer": [[353, "dictvectorizer"]], "Dictionary Learning": [[412, "dictionary-learning"]], "Dictionary learning": [[95, "dictionary-learning"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Differences between solvers": [[983, "differences-between-solvers"]], "Different algorithms for the same problem": [[1021, null]], "Different label assignment strategies": [[407, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[407, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[382, "different-objects"]], "Different scenario and useful concepts": [[983, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[398, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[139, "digits-classification-exercise"]], "Digits dataset": [[32, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[292, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Dimensionality reduction": [[990, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[981, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discretization": [[997, "discretization"]], "Dispatching": [[390, "dispatching"]], "Display Objects": [[1027, "display-objects"]], "Display code coverage in pull requests": [[388, "display-code-coverage-in-pull-requests"]], "Display results": [[204, "display-results"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Displaying Pipelines": [[240, "displaying-pipelines"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[240, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[240, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[240, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[240, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[240, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[230, "displaying-estimators-and-complex-pipelines"]], "Distance metrics": [[406, "distance-metrics"]], "Do you plan to implement transform for target y in a pipeline?": [[392, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[392, "do-you-support-pypy"]], "Documentation": [[380, "documentation"], [1030, "documentation"]], "Documentation Resources": [[1011, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1033, "documentation-improvements"], [1034, "documentation-improvements"]], "Documentation team": [[395, "documentation-team"]], "Domain specific packages": [[1007, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[417, "dot-product-kernel"]], "Dot-product kernel": [[160, "dot-product-kernel"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[164, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[132, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[374, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null]], "Dummy estimators": [[987, "dummy-estimators"]], "D\u00b2 score": [[987, "d2-score"]], "Earlier versions": [[1030, "earlier-versions"]], "Early stopping in Gradient Boosting": [[122, "early-stopping-in-gradient-boosting"]], "Early stopping of Stochastic Gradient Descent": [[207, "early-stopping-of-stochastic-gradient-descent"]], "Easy tag": [[380, null]], "Effect of number of trees and early stopping": [[127, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[310, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[310, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[310, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[75, "effect-of-transforming-the-targets-in-regression-model"]], "Effect of varying threshold for self-training": [[328, "effect-of-varying-threshold-for-self-training"]], "Efficient Linear Algebra & Array Operations": [[389, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[389, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[389, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[983, "elastic-net"]], "ElasticNet": [[183, "elasticnet"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Embedding techniques comparison": [[221, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Empirical covariance": [[409, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[61, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Empirical validation": [[232, "empirical-validation"]], "Encoding categorical features": [[997, "encoding-categorical-features"]], "Encoding strategy": [[53, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1041, "enforcing-keyword-only-arguments"], [1043, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[395, "enhancement-proposals-sleps"]], "Enhancements": [[1033, "enhancements"], [1034, "enhancements"], [1035, "enhancements"], [1036, "enhancements"], [1036, "id4"], [1037, "enhancements"], [1037, "id3"]], "Enriched estimator displays": [[322, "enriched-estimator-displays"]], "Ensemble methods": [[110, "ensemble-methods"], [166, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[414, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Environment variables": [[367, "environment-variables"]], "Error Calculation": [[122, "error-calculation"]], "Error caused by file path length limit on Windows": [[397, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[111, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[175, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[64, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[175, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[175, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[82, "estimate-the-covariance"]], "Estimate the score": [[164, "estimate-the-score"]], "Estimated Attributes": [[382, "estimated-attributes"]], "Estimation algorithms": [[981, "estimation-algorithms"]], "Estimator Tags": [[382, "estimator-tags"]], "Estimator types": [[382, "estimator-types"]], "Estimators": [[235, "estimators"], [362, "estimators"], [362, "id2"], [382, "estimators"], [403, "estimators"], [406, "estimators"]], "Estimators objects": [[1020, "estimators-objects"]], "Estimators that handle NaN values": [[977, "estimators-that-handle-nan-values"]], "Evaluation": [[81, "evaluation"], [302, "evaluation"]], "Evaluation of outlier detection estimators": [[238, "evaluation-of-outlier-detection-estimators"]], "Evaluation of the calibration of predictions": [[199, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the performance on the test set": [[1023, "evaluation-of-the-performance-on-the-test-set"]], "Evaluation of the ranking power": [[199, "evaluation-of-the-ranking-power"]], "Evernote": [[1012, "id6"]], "Exact Kernel PCA": [[412, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[412, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[403, "example-usage"]], "Example with noise-free target": [[158, "example-with-noise-free-target"]], "Example with noisy targets": [[158, "example-with-noisy-targets"]], "Example:": [[987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [999, null], [1021, null]], "Examples": [[166, "examples"], [368, "examples"], [375, null], [411, null], [411, null], [416, null], [416, null], [417, null], [980, null], [983, null], [983, null], [983, null], [1000, null], [1000, null], [1004, null], [1004, null], [1004, null], [1030, "examples"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [166, "examples-based-on-real-world-datasets"]], "Examples using sklearn.base.BaseEstimator": [[421, "examples-using-sklearn-base-baseestimator"]], "Examples using sklearn.base.ClassifierMixin": [[424, "examples-using-sklearn-base-classifiermixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[427, "examples-using-sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.RegressorMixin": [[430, "examples-using-sklearn-base-regressormixin"]], "Examples using sklearn.base.TransformerMixin": [[431, "examples-using-sklearn-base-transformermixin"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[435, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[436, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "Examples using sklearn.cluster.AffinityPropagation": [[438, "examples-using-sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[439, "examples-using-sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.Birch": [[440, "examples-using-sklearn-cluster-birch"]], "Examples using sklearn.cluster.BisectingKMeans": [[441, "examples-using-sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.DBSCAN": [[442, "examples-using-sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[443, "examples-using-sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.HDBSCAN": [[444, "examples-using-sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.KMeans": [[445, "examples-using-sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.MeanShift": [[446, "examples-using-sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[447, "examples-using-sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.OPTICS": [[448, "examples-using-sklearn-cluster-optics"]], "Examples using sklearn.cluster.SpectralBiclustering": [[449, "examples-using-sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[450, "examples-using-sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[451, "examples-using-sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.affinity_propagation": [[452, "examples-using-sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[453, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.estimate_bandwidth": [[456, "examples-using-sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.kmeans_plusplus": [[458, "examples-using-sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.spectral_clustering": [[460, "examples-using-sklearn-cluster-spectral-clustering"]], "Examples using sklearn.compose.ColumnTransformer": [[462, "examples-using-sklearn-compose-columntransformer"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[463, "examples-using-sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.make_column_selector": [[464, "examples-using-sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_transformer": [[465, "examples-using-sklearn-compose-make-column-transformer"]], "Examples using sklearn.config_context": [[466, "examples-using-sklearn-config-context"]], "Examples using sklearn.covariance.EllipticEnvelope": [[467, "examples-using-sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[468, "examples-using-sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[470, "examples-using-sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.LedoitWolf": [[471, "examples-using-sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.MinCovDet": [[472, "examples-using-sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.OAS": [[473, "examples-using-sklearn-covariance-oas"]], "Examples using sklearn.covariance.ShrunkCovariance": [[474, "examples-using-sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.empirical_covariance": [[475, "examples-using-sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.ledoit_wolf": [[477, "examples-using-sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.cross_decomposition.CCA": [[480, "examples-using-sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[481, "examples-using-sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[482, "examples-using-sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[486, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[487, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_california_housing": [[488, "examples-using-sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_covtype": [[489, "examples-using-sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_kddcup99": [[490, "examples-using-sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_lfw_people": [[492, "examples-using-sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[493, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_openml": [[494, "examples-using-sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_species_distributions": [[496, "examples-using-sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.get_data_home": [[497, "examples-using-sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.load_breast_cancer": [[498, "examples-using-sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_diabetes": [[499, "examples-using-sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_digits": [[500, "examples-using-sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_iris": [[502, "examples-using-sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_sample_image": [[504, "examples-using-sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_wine": [[508, "examples-using-sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.make_biclusters": [[509, "examples-using-sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_blobs": [[510, "examples-using-sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_checkerboard": [[511, "examples-using-sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_circles": [[512, "examples-using-sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_classification": [[513, "examples-using-sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[517, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_hastie_10_2": [[518, "examples-using-sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[519, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_moons": [[520, "examples-using-sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_multilabel_classification": [[521, "examples-using-sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_regression": [[522, "examples-using-sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_s_curve": [[523, "examples-using-sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[524, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[525, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_swiss_roll": [[528, "examples-using-sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.decomposition.FactorAnalysis": [[530, "examples-using-sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FastICA": [[531, "examples-using-sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.IncrementalPCA": [[532, "examples-using-sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.KernelPCA": [[533, "examples-using-sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[534, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[535, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[536, "examples-using-sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[537, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.NMF": [[538, "examples-using-sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.PCA": [[539, "examples-using-sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.SparseCoder": [[540, "examples-using-sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparsePCA": [[541, "examples-using-sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.TruncatedSVD": [[542, "examples-using-sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[547, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[548, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.dummy.DummyClassifier": [[549, "examples-using-sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyRegressor": [[550, "examples-using-sklearn-dummy-dummyregressor"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[551, "examples-using-sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[552, "examples-using-sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[554, "examples-using-sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[555, "examples-using-sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[556, "examples-using-sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[557, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[558, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[559, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[560, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.IsolationForest": [[561, "examples-using-sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[562, "examples-using-sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[563, "examples-using-sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[564, "examples-using-sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.StackingClassifier": [[565, "examples-using-sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingRegressor": [[566, "examples-using-sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.VotingClassifier": [[567, "examples-using-sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingRegressor": [[568, "examples-using-sklearn-ensemble-votingregressor"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[569, "examples-using-sklearn-exceptions-convergencewarning"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[579, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[580, "examples-using-sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[582, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[585, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[586, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[587, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[588, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[589, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_selection.RFE": [[591, "examples-using-sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFECV": [[592, "examples-using-sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.SelectFromModel": [[595, "examples-using-sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectKBest": [[597, "examples-using-sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectPercentile": [[598, "examples-using-sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[600, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.chi2": [[602, "examples-using-sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.f_classif": [[603, "examples-using-sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_regression": [[604, "examples-using-sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[605, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[606, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[608, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[609, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[611, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[612, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[613, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[615, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[616, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[617, "examples-using-sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[620, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[621, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[623, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.impute.IterativeImputer": [[625, "examples-using-sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.KNNImputer": [[626, "examples-using-sklearn-impute-knnimputer"]], "Examples using sklearn.impute.SimpleImputer": [[628, "examples-using-sklearn-impute-simpleimputer"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[629, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[629, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[630, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[630, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "Examples using sklearn.inspection.partial_dependence": [[631, "examples-using-sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.permutation_importance": [[632, "examples-using-sklearn-inspection-permutation-importance"]], "Examples using sklearn.isotonic.IsotonicRegression": [[633, "examples-using-sklearn-isotonic-isotonicregression"]], "Examples using sklearn.kernel_approximation.Nystroem": [[637, "examples-using-sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[638, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[639, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[641, "examples-using-sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.linear_model.ARDRegression": [[642, "examples-using-sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.BayesianRidge": [[643, "examples-using-sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.ElasticNet": [[644, "examples-using-sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNetCV": [[645, "examples-using-sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.GammaRegressor": [[646, "examples-using-sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[647, "examples-using-sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.Lasso": [[650, "examples-using-sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.LassoCV": [[651, "examples-using-sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[653, "examples-using-sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsIC": [[654, "examples-using-sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LinearRegression": [[655, "examples-using-sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[656, "examples-using-sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[657, "examples-using-sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[660, "examples-using-sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[662, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[663, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[664, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.Perceptron": [[666, "examples-using-sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.PoissonRegressor": [[667, "examples-using-sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[668, "examples-using-sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[669, "examples-using-sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.Ridge": [[670, "examples-using-sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.RidgeCV": [[671, "examples-using-sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeClassifier": [[672, "examples-using-sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[674, "examples-using-sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[675, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDRegressor": [[676, "examples-using-sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[677, "examples-using-sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[678, "examples-using-sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.enet_path": [[679, "examples-using-sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.lars_path": [[680, "examples-using-sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lasso_path": [[682, "examples-using-sklearn-linear-model-lasso-path"]], "Examples using sklearn.manifold.Isomap": [[686, "examples-using-sklearn-manifold-isomap"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[687, "examples-using-sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.MDS": [[688, "examples-using-sklearn-manifold-mds"]], "Examples using sklearn.manifold.SpectralEmbedding": [[689, "examples-using-sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.TSNE": [[690, "examples-using-sklearn-manifold-tsne"]], "Examples using sklearn.manifold.locally_linear_embedding": [[691, "examples-using-sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[695, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[695, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[695, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[696, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[698, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[698, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[698, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[699, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[699, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[699, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "Examples using sklearn.metrics.RocCurveDisplay": [[700, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[700, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[700, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "Examples using sklearn.metrics.accuracy_score": [[701, "examples-using-sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[702, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[703, "examples-using-sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.auc": [[704, "examples-using-sklearn-metrics-auc"]], "Examples using sklearn.metrics.average_precision_score": [[705, "examples-using-sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.brier_score_loss": [[707, "examples-using-sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[710, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.classification_report": [[711, "examples-using-sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.completeness_score": [[715, "examples-using-sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.confusion_matrix": [[716, "examples-using-sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.consensus_score": [[717, "examples-using-sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.det_curve": [[724, "examples-using-sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.f1_score": [[726, "examples-using-sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.get_scorer": [[729, "examples-using-sklearn-metrics-get-scorer"]], "Examples using sklearn.metrics.hamming_loss": [[731, "examples-using-sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hinge_loss": [[732, "examples-using-sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.homogeneity_score": [[734, "examples-using-sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.jaccard_score": [[735, "examples-using-sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.log_loss": [[738, "examples-using-sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.make_scorer": [[739, "examples-using-sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.mean_absolute_error": [[742, "examples-using-sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[743, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_pinball_loss": [[745, "examples-using-sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[746, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_squared_error": [[747, "examples-using-sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[749, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.median_absolute_error": [[750, "examples-using-sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.mutual_info_score": [[752, "examples-using-sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[754, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[758, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise_distances": [[775, "examples-using-sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[776, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.precision_recall_curve": [[779, "examples-using-sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_score": [[781, "examples-using-sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.r2_score": [[782, "examples-using-sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.rand_score": [[783, "examples-using-sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.recall_score": [[784, "examples-using-sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.roc_auc_score": [[785, "examples-using-sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_curve": [[786, "examples-using-sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.root_mean_squared_error": [[787, "examples-using-sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.silhouette_samples": [[789, "examples-using-sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_score": [[790, "examples-using-sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.v_measure_score": [[792, "examples-using-sklearn-metrics-v-measure-score"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[794, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[795, "examples-using-sklearn-mixture-gaussianmixture"]], "Examples using sklearn.model_selection.GridSearchCV": [[796, "examples-using-sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GroupKFold": [[797, "examples-using-sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[798, "examples-using-sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[799, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[800, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.KFold": [[801, "examples-using-sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[802, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[802, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[810, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RepeatedKFold": [[811, "examples-using-sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[812, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.ShuffleSplit": [[813, "examples-using-sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[814, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[815, "examples-using-sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[816, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[817, "examples-using-sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[818, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "Examples using sklearn.model_selection.cross_val_predict": [[820, "examples-using-sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_score": [[821, "examples-using-sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_validate": [[822, "examples-using-sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.learning_curve": [[823, "examples-using-sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.permutation_test_score": [[824, "examples-using-sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.train_test_split": [[825, "examples-using-sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.validation_curve": [[826, "examples-using-sklearn-model-selection-validation-curve"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[827, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[828, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[829, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multioutput.ClassifierChain": [[830, "examples-using-sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[832, "examples-using-sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[834, "examples-using-sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[836, "examples-using-sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[837, "examples-using-sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[838, "examples-using-sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[841, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[842, "examples-using-sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[843, "examples-using-sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KernelDensity": [[844, "examples-using-sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[845, "examples-using-sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.NearestCentroid": [[846, "examples-using-sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestNeighbors": [[847, "examples-using-sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[848, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.kneighbors_graph": [[852, "examples-using-sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neural_network.BernoulliRBM": [[855, "examples-using-sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.MLPClassifier": [[856, "examples-using-sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPRegressor": [[857, "examples-using-sklearn-neural-network-mlpregressor"]], "Examples using sklearn.pipeline.FeatureUnion": [[858, "examples-using-sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.Pipeline": [[859, "examples-using-sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[860, "examples-using-sklearn-pipeline-make-pipeline"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[863, "examples-using-sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[864, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[866, "examples-using-sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[868, "examples-using-sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[869, "examples-using-sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.Normalizer": [[871, "examples-using-sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[872, "examples-using-sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[873, "examples-using-sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[874, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PowerTransformer": [[875, "examples-using-sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[876, "examples-using-sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.RobustScaler": [[877, "examples-using-sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.SplineTransformer": [[878, "examples-using-sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.StandardScaler": [[879, "examples-using-sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.TargetEncoder": [[880, "examples-using-sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.label_binarize": [[883, "examples-using-sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.minmax_scale": [[885, "examples-using-sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.quantile_transform": [[888, "examples-using-sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[892, "examples-using-sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[893, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[895, "examples-using-sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[896, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.set_config": [[897, "examples-using-sklearn-set-config"]], "Examples using sklearn.svm.LinearSVC": [[899, "examples-using-sklearn-svm-linearsvc"]], "Examples using sklearn.svm.NuSVC": [[901, "examples-using-sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVR": [[902, "examples-using-sklearn-svm-nusvr"]], "Examples using sklearn.svm.OneClassSVM": [[903, "examples-using-sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.SVC": [[904, "examples-using-sklearn-svm-svc"]], "Examples using sklearn.svm.SVR": [[905, "examples-using-sklearn-svm-svr"]], "Examples using sklearn.svm.l1_min_c": [[906, "examples-using-sklearn-svm-l1-min-c"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[907, "examples-using-sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[908, "examples-using-sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.plot_tree": [[913, "examples-using-sklearn-tree-plot-tree"]], "Examples using sklearn.utils.Bunch": [[914, "examples-using-sklearn-utils-bunch"]], "Examples using sklearn.utils.check_random_state": [[922, "examples-using-sklearn-utils-check-random-state"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[931, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.extmath.density": [[933, "examples-using-sklearn-utils-extmath-density"]], "Examples using sklearn.utils.gen_even_slices": [[940, "examples-using-sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[944, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[945, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[946, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[947, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metaestimators.available_if": [[948, "examples-using-sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.shuffle": [[961, "examples-using-sklearn-utils-shuffle"]], "Examples using sklearn.utils.validation.check_is_fitted": [[971, "examples-using-sklearn-utils-validation-check-is-fitted"]], "Examples:": [[374, null], [375, null], [396, null], [404, null], [404, null], [405, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [408, null], [408, null], [408, null], [408, null], [408, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [410, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [413, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [416, null], [416, null], [416, null], [416, null], [976, null], [976, null], [976, null], [978, null], [979, null], [979, null], [979, null], [981, null], [981, null], [981, null], [982, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [984, null], [986, null], [986, null], [986, null], [986, null], [987, null], [987, null], [987, null], [987, null], [987, null], [988, null], [990, null], [990, null], [990, null], [990, null], [990, null], [991, null], [991, null], [992, null], [993, null], [993, null], [993, null], [993, null], [993, null], [993, null], [994, null], [995, null], [997, null], [997, null], [997, null], [1001, null], [1001, null], [1002, null], [1002, null], [1002, null], [1002, null], [1002, null], [1002, null], [1003, null], [1003, null], [1003, null], [1003, null], [1027, null]], "Exercise": [[1018, null], [1018, null], [1021, null], [1021, null]], "Exercise 1: Language identification": [[1023, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1023, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1023, "exercise-3-cli-text-classification-utility"]], "Exercises": [[1023, "exercises"]], "Exhausting the available resources": [[976, "exhausting-the-available-resources"]], "Exhaustive Grid Search": [[976, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[160, "exp-sine-squared-kernel"], [417, "exp-sine-squared-kernel"]], "Experimental / Under Development": [[1046, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[320, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental features": [[384, "experimental-features"]], "Explained variance score": [[987, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[233, "explicit-feature-map-approximation-for-rbf-kernels"]], "External Resources, Videos and Talks": [[1006, "external-resources-videos-and-talks"]], "External Tutorials": [[1006, "external-tutorials"]], "External dependencies": [[1030, "external-dependencies"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Extracting features": [[368, "extracting-features"]], "Extracting features from text files": [[1023, "extracting-features-from-text-files"]], "Extremely Randomized Trees": [[414, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[237, "face-completion-with-a-multi-output-estimators"]], "Face recognition with eigenfaces": [[1019, "face-recognition-with-eigenfaces"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Factor Analysis": [[412, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[105, "factor-analysis-with-rotation-to-visualize-patterns"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Failure of Machine Learning to infer causal effects": [[168, "failure-of-machine-learning-to-infer-causal-effects"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Faster parser in fetch_openml": [[320, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[366, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[352, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[318, "feature-names-support"]], "Feature Selection": [[142, "feature-selection"], [166, "feature-selection"]], "Feature agglomeration": [[51, "feature-agglomeration"], [1004, "feature-agglomeration"], [1022, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Feature binarization": [[997, "feature-binarization"]], "Feature discretization": [[307, "feature-discretization"]], "Feature extraction": [[415, "feature-extraction"]], "Feature hashing": [[415, "feature-hashing"]], "Feature importance based on feature permutation": [[118, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[118, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on mean decrease in impurity (MDI)": [[119, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature importance evaluation": [[414, "feature-importance-evaluation"]], "Feature importance from coefficients": [[148, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[118, "feature-importances-with-a-forest-of-trees"]], "Feature normalization": [[175, "feature-normalization"]], "Feature scaling": [[1004, null]], "Feature selection": [[416, "feature-selection"]], "Feature selection as part of a pipeline": [[416, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[416, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[416, null]], "Feature transformations with ensembles of trees": [[116, "feature-transformations-with-ensembles-of-trees"]], "FeatureAgglomeration": [[407, null]], "FeatureHasher": [[353, "featurehasher"]], "FeatureHasher and DictVectorizer Comparison": [[353, "featurehasher-and-dictvectorizer-comparison"]], "FeatureUnion: composite feature spaces": [[408, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[127, "features-in-histogram-gradient-boosting-trees"]], "Fedora": [[397, "fedora"]], "Final conclusion": [[151, "final-conclusion"]], "Final remarks": [[57, "final-remarks"]], "Finding the Nearest Neighbors": [[990, "finding-the-nearest-neighbors"]], "First example": [[9, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[179, "fit-by-cubic-polynomial"]], "Fit models": [[193, "fit-models"], [281, "fit-models"]], "Fit models and plot results": [[57, "fit-models-and-plot-results"]], "Fit regression model": [[125, "fit-regression-model"], [295, "fit-regression-model"], [345, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[290, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[102, "fit-the-models"]], "Fit the regressors": [[178, "fit-the-regressors"], [178, "id2"]], "Fitting": [[382, "fitting"]], "Fitting SpectralBiclustering": [[20, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[201, "fitting-a-quantileregressor"]], "Fitting additional weak-learners": [[414, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[180, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "Fitting an elliptic envelope": [[993, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[393, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[124, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1043, "fixed-models"]], "Fixes": [[1030, "fixes"]], "Flexibility of IterativeImputer": [[977, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[388, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[156, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Forest covertypes": [[375, "forest-covertypes"]], "Forest covertypes dataset": [[238, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[407, "fowlkes-mallows-scores"]], "FreeBSD": [[378, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[217, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[392, "frequently-asked-questions"]], "From binary to multiclass and multilabel": [[987, "from-binary-to-multiclass-and-multilabel"]], "From images": [[406, "module-sklearn.feature_extraction.image"]], "From occurrences to frequencies": [[1023, "from-occurrences-to-frequencies"]], "From text": [[406, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[379, null]], "Functions": [[406, "functions"], [406, "id1"]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[248, "gmm-initialization-methods"]], "GMM covariances": [[247, "gmm-covariances"]], "GPC examples": [[417, "gpc-examples"]], "Gamma loss for gradient boosting": [[321, "gamma-loss-for-gradient-boosting"]], "Gaussian Mixture": [[986, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[246, "gaussian-mixture-model-ellipsoids"]], "Gaussian Mixture Model Selection": [[250, "gaussian-mixture-model-selection"]], "Gaussian Mixture Model Sine Curve": [[251, "gaussian-mixture-model-sine-curve"]], "Gaussian Mixture Models": [[166, "gaussian-mixture-models"], [244, "gaussian-mixture-models"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [989, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[417, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[417, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[150, "gaussian-process-for-machine-learning"], [166, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[417, "gaussian-processes"]], "Gaussian Processes regression: basic introductory example": [[158, "gaussian-processes-regression-basic-introductory-example"]], "Gaussian mixture models": [[986, "gaussian-mixture-models"]], "Gaussian process classification (GPC) on iris dataset": [[153, "gaussian-process-classification-gpc-on-iris-dataset"], [417, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[151, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[159, "gaussian-processes-on-discrete-data-structures"]], "Gaussian random projection": [[999, "gaussian-random-projection"]], "General Concepts": [[394, "general-concepts"]], "General recommendations": [[362, "general-recommendations"]], "Generalized Linear Models": [[166, "generalized-linear-models"], [177, "generalized-linear-models"], [983, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[316, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[406, "generalized-linear-models-glm-for-regression"]], "Generate data": [[47, "generate-data"], [67, "generate-data"], [80, "generate-data"], [193, "generate-data"], [302, "generate-data"]], "Generate data with outliers": [[290, "generate-data-with-outliers"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Generate sample data": [[20, "generate-sample-data"], [38, "generate-sample-data"], [55, "generate-sample-data"], [63, "generate-sample-data"], [78, "generate-sample-data"], [96, "generate-sample-data"], [97, "generate-sample-data"], [144, "generate-sample-data"], [234, "generate-sample-data"], [273, "generate-sample-data"], [295, "generate-sample-data"], [345, "generate-sample-data"]], "Generate sinusoidal data with noise": [[179, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[257, "generate-synthetic-data"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [178, "generate-synthetic-dataset"], [178, "id1"], [183, "generate-synthetic-dataset"]], "Generate the data": [[64, "generate-the-data"], [66, "generate-the-data"], [82, "generate-the-data"]], "Generated datasets": [[376, "generated-datasets"]], "Generated documentation on GitHub Actions": [[380, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[13, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[151, "generating-a-dataset"]], "Generating polynomial features": [[997, "generating-polynomial-features"]], "Generators for classification and clustering": [[376, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[376, "generators-for-decomposition"]], "Generators for manifold learning": [[376, "generators-for-manifold-learning"]], "Generators for regression": [[376, "generators-for-regression"]], "Generic dictionary learning": [[412, "generic-dictionary-learning"]], "Getting Started": [[393, "getting-started"]], "Getting reproducible results across multiple executions": [[362, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1011, "gitter"]], "Glossary of Common Terms and API Elements": [[394, "glossary-of-common-terms-and-api-elements"]], "Good practices": [[385, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[395, "governance-model-changes"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[123, "gradient-boosting-out-of-bag-estimates"]], "Gradient Boosting Regression Trees for Poisson regression": [[199, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[125, "gradient-boosting-regression"]], "Gradient Boosting regularization": [[126, "gradient-boosting-regularization"]], "Gradient boosting": [[170, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[121, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[121, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[121, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[121, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[414, "gradient-boosted-trees"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[414, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[414, null]], "Graph Routines": [[389, "graph-routines"]], "Graphical model and parametrization": [[992, "graphical-model-and-parametrization"]], "Grid-search": [[1018, "grid-search"]], "Grid-search and cross-validated estimators": [[1018, "grid-search-and-cross-validated-estimators"]], "Group Shuffle Split": [[411, "group-shuffle-split"]], "Group k-fold": [[411, "group-k-fold"]], "Grouping infrequent categories in OneHotEncoder": [[319, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[321, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "HDBSCAN": [[407, "hdbscan"]], "HDBSCAN: hierarchical density-based clustering": [[321, "hdbscan-hierarchical-density-based-clustering"]], "Hamming loss": [[987, "hamming-loss"]], "Handling Multicollinear Features": [[172, "handling-multicollinear-features"]], "Hash Functions": [[389, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[130, "hashing-feature-transformation-using-totally-random-trees"]], "HashingVectorizer": [[352, "hashingvectorizer"]], "Helper Functions": [[389, "helper-functions"]], "Helper function": [[160, "helper-function"]], "Helper function to plot embedding": [[221, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[984, "hessian-eigenmapping"]], "Hierarchical Clustering": [[407, "id11"]], "Hierarchical agglomerative clustering: Ward": [[1022, "hierarchical-agglomerative-clustering-ward"]], "Hierarchical clustering": [[407, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[67, "hierarchical-clustering-structured-vs-unstructured-ward"]], "Higher-level parallelism with joblib": [[367, "higher-level-parallelism-with-joblib"]], "Highlights": [[1030, "highlights"], [1033, "highlights"], [1034, "highlights"], [1037, "highlights"], [1038, "highlights"]], "Hinge loss": [[987, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[322, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "Histogram-Based Gradient Boosting": [[414, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[318, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[407, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[392, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[392, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[392, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[392, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[392, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[392, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[392, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[392, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[362, "how-to-avoid-data-leakage"]], "How to contribute": [[380, "how-to-contribute"]], "How to make a good bug report": [[380, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[386, "how-to-optimize-for-speed"]], "HowAboutWe": [[1012, "id16"]], "Huber Regression": [[983, "huber-regression"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[181, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Hugging Face": [[1012, "id5"]], "Hyper-parameter optimizers": [[406, "hyper-parameter-optimizers"]], "Hyperparameter Robustness": [[55, "hyperparameter-robustness"]], "ICE vs. PDP": [[170, "ice-vs-pdp"]], "INFONEA": [[1012, "id24"]], "Illustration of GPC on the XOR dataset": [[417, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[155, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Illustration of Pipeline and GridSearchCV": [[72, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[160, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "Image feature extraction": [[415, "image-feature-extraction"]], "Implementation": [[990, "implementation"]], "Implementation decisions": [[392, "implementation-decisions"]], "Implementation details": [[1001, "implementation-details"], [1002, "implementation-details"]], "Implementing your own scoring object": [[987, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[310, "importance-of-feature-scaling"]], "Improved efficiency of many estimators": [[320, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[322, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[317, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[316, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[977, "imputation-of-missing-values"], [997, "imputation-of-missing-values"]], "Impute missing values with mean": [[164, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[164, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[164, "imputing-missing-values-before-building-an-estimator"]], "Imputing missing values with variants of IterativeImputer": [[163, "imputing-missing-values-with-variants-of-iterativeimputer"]], "In binary classification settings": [[267, "in-binary-classification-settings"]], "In multi-label settings": [[267, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[168, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[168, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[362, "inconsistent-preprocessing"]], "Incremental PCA": [[99, "incremental-pca"], [412, "incremental-pca"]], "Incremental learning": [[368, "incremental-learning"]], "Independent Component Analysis: ICA": [[1022, "independent-component-analysis-ica"]], "Independent component analysis (ICA)": [[412, "independent-component-analysis-ica"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[317, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[994, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[56, "inductive-clustering"]], "Influence of the Input Data Representation": [[366, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[366, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[366, "influence-of-the-number-of-features"]], "Information Criterion": [[976, "information-criterion"]], "Information-criteria based model selection": [[983, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[997, "infrequent-categories"]], "Input and parameter validation": [[406, "module-sklearn.utils.validation"]], "Input data": [[407, null]], "Input validation": [[382, "input-validation"]], "Inria": [[1012, "id3"]], "Inspection": [[166, "inspection"], [167, "inspection"], [396, "inspection"]], "Installing nightly builds": [[378, "installing-nightly-builds"]], "Installing scikit-learn": [[397, "installing-scikit-learn"]], "Installing the development version of scikit-learn": [[378, "installing-the-development-version-of-scikit-learn"]], "Installing the latest release": [[397, "installing-the-latest-release"]], "Instantiation": [[382, "instantiation"]], "Intel Extension for Scikit-learn": [[397, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[414, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[320, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interactive example": [[1021, null]], "Interoperability and framework enhancements": [[1007, "interoperability-and-framework-enhancements"]], "Interoperable formats": [[401, "interoperable-formats"]], "Interpretation of kernel hyperparameters": [[156, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[414, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[169, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[169, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[203, "interpreting-the-plots"]], "Introducing the set_output API": [[242, "introducing-the-set-output-api"]], "Introduction": [[984, "introduction"]], "Invariance with respect to prevalence": [[263, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[999, "inverse-transform"]], "Iris plants dataset": [[377, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[154, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Isolation Forest": [[993, "isolation-forest"]], "IsolationForest example": [[128, "isolationforest-example"]], "Isomap": [[984, "isomap"]], "Isomap Embedding": [[220, "isomap-embedding"]], "Isotonic": [[405, "isotonic"]], "Isotonic Regression": [[231, "isotonic-regression"]], "Isotonic regression": [[978, "isotonic-regression"]], "Issue Tracker Tags": [[380, "issue-tracker-tags"]], "Issues for New Contributors": [[380, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[164, "iterative-imputation-of-the-missing-values"]], "J.P.Morgan": [[1012, "id1"]], "Jaccard similarity coefficient score": [[987, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[193, "joint-feature-selection-with-multi-task-lasso"]], "K-D Tree": [[990, "k-d-tree"]], "K-bins discretization": [[997, "k-bins-discretization"]], "K-fold": [[411, "k-fold"]], "K-means": [[407, "k-means"]], "K-means Clustering": [[45, "k-means-clustering"]], "K-means clustering": [[1022, "k-means-clustering"]], "K-means clustering on text features": [[352, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[286, "k-nearest-neighbors-classifier"]], "KDDCup99 - SA dataset": [[238, "kddcup99-sa-dataset"]], "KDTree and BallTree Classes": [[990, "kdtree-and-balltree-classes"]], "KNN Based Imputation": [[315, "knn-based-imputation"]], "Kddcup 99 dataset": [[375, "kddcup-99-dataset"]], "Keeping the number of features constant": [[977, "keeping-the-number-of-features-constant"]], "Kernel Approximation": [[166, "kernel-approximation"], [174, "kernel-approximation"], [979, "kernel-approximation"]], "Kernel Density Estimate of Species Distributions": [[296, "kernel-density-estimate-of-species-distributions"]], "Kernel Density Estimation": [[287, "kernel-density-estimation"], [413, "kernel-density-estimation"]], "Kernel PCA": [[100, "kernel-pca"]], "Kernel Principal Component Analysis (kPCA)": [[412, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[160, "kernel-cookbook"]], "Kernel functions": [[1002, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[151, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[417, "kernel-operators"]], "Kernel ridge": [[151, "kernel-ridge"]], "Kernel ridge regression": [[980, "kernel-ridge-regression"]], "Kernels": [[406, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[417, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[318, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1038, "known-major-bugs"], [1039, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[190, "l1-penalty-and-sparsity-in-logistic-regression"]], "L1-based feature selection": [[416, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[183, "l1-based-models-for-sparse-signals"]], "L1-penalty case": [[346, "l1-penalty-case"]], "L2-penalty case": [[346, "l2-penalty-case"]], "LARS Lasso": [[983, "lars-lasso"]], "LDA": [[981, "lda"]], "Label Propagation": [[1000, "label-propagation"]], "Label Propagation digits active learning": [[326, "label-propagation-digits-active-learning"]], "Label Propagation digits: Demonstrating performance": [[325, "label-propagation-digits-demonstrating-performance"]], "Label Propagation learning a complex structure": [[327, "label-propagation-learning-a-complex-structure"]], "Label binarization": [[998, "label-binarization"]], "Label encoding": [[998, "label-encoding"]], "Label ranking average precision": [[987, "label-ranking-average-precision"]], "LabelBinarizer": [[998, "labelbinarizer"]], "Lagged features for time series forecasting": [[13, "lagged-features-for-time-series-forecasting"]], "Laplacian kernel": [[985, "laplacian-kernel"]], "Lasso": [[183, "lasso"], [983, "lasso"]], "Lasso and Elastic Net": [[184, "lasso-and-elastic-net"]], "Lasso model selection via information criteria": [[187, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[188, "lasso-model-selection-aic-bic-cross-validation"]], "Lasso on dense and sparse data": [[185, "lasso-on-dense-and-sparse-data"]], "Lasso path using LARS": [[186, "lasso-path-using-lars"]], "Lasso via coordinate descent": [[188, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[188, "lasso-via-least-angle-regression"]], "Latent Dirichlet Allocation (LDA)": [[412, "latent-dirichlet-allocation-lda"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Learning Curve": [[262, "learning-curve"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Learning an embedding": [[293, "learning-an-embedding"]], "Learning and predicting": [[1014, "learning-and-predicting"]], "Learning curve": [[982, "learning-curve"]], "Learning git:": [[380, null]], "Least Angle Regression": [[983, "least-angle-regression"]], "Leave One Group Out": [[411, "leave-one-group-out"]], "Leave One Out (LOO)": [[411, "leave-one-out-loo"]], "Leave P Groups Out": [[411, "leave-p-groups-out"]], "Leave P Out (LPO)": [[411, "leave-p-out-lpo"]], "Ledoit-Wolf shrinkage": [[409, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[79, "ledoit-wolf-vs-oas-estimation"]], "Lessons learned": [[168, "lessons-learned"], [169, "lessons-learned"]], "Limitations of a simple linear model": [[151, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[415, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[366, "limiting-working-memory"]], "Limiting the number of splits": [[121, "limiting-the-number-of-splits"]], "Linear Models": [[983, "linear-models"]], "Linear Regression Example": [[195, "linear-regression-example"]], "Linear SVMs": [[1021, "linear-svms"]], "Linear algebra libraries": [[366, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[981, "linear-and-quadratic-discriminant-analysis"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Linear classifiers": [[406, "linear-classifiers"]], "Linear kernel": [[342, "linear-kernel"], [985, "linear-kernel"], [1021, "linear-kernel"]], "Linear model: from regression to sparsity": [[1021, "linear-model-from-regression-to-sparsity"]], "Linear models with regularization": [[169, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[169, "linear-models-with-sparse-coefficients"]], "Linear regression": [[1021, "linear-regression"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Link to R\u00b2 score, the coefficient of determination": [[987, null]], "Links": [[366, "links"]], "Linnerrud dataset": [[377, "linnerrud-dataset"]], "Linux": [[378, "linux"]], "Linux compilers from conda-forge": [[378, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[378, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[121, "load-ames-housing-dataset"]], "Load Data": [[353, "load-data"]], "Load Data and Train a SVC": [[241, "load-data-and-train-a-svc"]], "Load Data and train model": [[229, "load-data-and-train-model"]], "Load and prepare data": [[269, "load-and-prepare-data"], [270, "load-and-prepare-data"], [310, "load-and-prepare-data"]], "Load and prepare data set": [[338, "load-and-prepare-data-set"]], "Load data": [[192, "load-data"]], "Load dataset": [[117, "load-dataset"]], "Load dataset and apply GridSearchCV": [[138, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[221, "load-digits-dataset"]], "Load some data to play with": [[341, "load-some-data-to-play-with"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [125, "load-the-data"], [286, "load-the-data"]], "Load the dataset": [[58, "load-the-dataset"]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Loaders": [[406, "loaders"]], "Loading Data from OpenML": [[311, "loading-data-from-openml"]], "Loading a dataset": [[281, "loading-a-dataset"]], "Loading an example dataset": [[1014, "loading-an-example-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[351, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[217, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[415, "loading-features-from-dicts"]], "Loading from external datasets": [[374, "loading-from-external-datasets"], [1014, null]], "Loading other datasets": [[374, "loading-other-datasets"]], "Loading text data": [[352, "loading-text-data"]], "Loading the 20 newsgroups dataset": [[1023, "loading-the-20-newsgroups-dataset"]], "Loading the data": [[148, "loading-the-data"]], "Loading the data and model fitting": [[119, "loading-the-data-and-model-fitting"]], "Loading the iris dataset": [[90, "loading-the-iris-dataset"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Local Outlier Factor": [[993, "local-outlier-factor"]], "Local Tangent Space Alignment": [[984, "local-tangent-space-alignment"]], "Locally Linear Embedding": [[984, "locally-linear-embedding"]], "Locally Linear Embeddings": [[220, "locally-linear-embeddings"]], "Log loss": [[987, "log-loss"]], "Logistic Regression 3-class Classifier": [[182, "logistic-regression-3-class-classifier"]], "Logistic function": [[189, "logistic-function"]], "Logistic regression": [[983, "logistic-regression"]], "LogisticRegression wrapped by OneVsRestClassifier": [[281, "logisticregression-wrapped-by-onevsrestclassifier"]], "Look at the results": [[234, "look-at-the-results"], [345, "look-at-the-results"]], "Loss Functions": [[414, "loss-functions"]], "Lovely": [[1012, "id20"]], "Low-level parallelism": [[407, "low-level-parallelism"], [414, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[367, "lower-level-parallelism-with-openmp"]], "MARS": [[1012, "id28"]], "MNIST classification using multinomial logistic + L1": [[215, "mnist-classification-using-multinomial-logistic-l1"]], "MacPorts for Mac OSX": [[397, "macports-for-mac-osx"]], "Machinalis": [[1012, "id22"]], "Machine learning: the problem setting": [[1014, "machine-learning-the-problem-setting"]], "Mailing Lists": [[1011, "mailing-lists"]], "Main": [[8, "main"]], "Main takeaways": [[199, "main-takeaways"]], "Maintainer / core-developer information": [[384, "maintainer-core-developer-information"]], "Maintainers": [[395, "maintainers"]], "Maintaining backwards compatibility": [[380, "maintaining-backwards-compatibility"]], "Major version release": [[384, "major-version-release"]], "Majority Class Labels (Majority/Hard Voting)": [[414, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[132, "make-pipeline-to-preprocess-the-data"]], "Making a release": [[384, "making-a-release"]], "Making predictions": [[135, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[222, "manifold-learning-methods-on-a-severed-sphere"]], "Manifold learning": [[166, "manifold-learning"], [219, "manifold-learning"], [984, "manifold-learning"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[221, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Map data to a normal distribution": [[309, "map-data-to-a-normal-distribution"]], "Mapping to a Gaussian distribution": [[997, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[997, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[977, "marking-imputed-values"]], "Mathematical Definition": [[994, "mathematical-definition"]], "Mathematical Details": [[979, "mathematical-details"]], "Mathematical formulation": [[404, "mathematical-formulation"], [404, "id3"], [414, "mathematical-formulation"], [990, "mathematical-formulation"], [1001, "mathematical-formulation"], [1002, "mathematical-formulation"], [1003, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[981, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[981, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[987, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[160, "matern-kernel"], [417, "matern-kernel"]], "Max error": [[987, "max-error"]], "MaxAbsScaler": [[305, "maxabsscaler"]], "Mean Poisson, Gamma, and Tweedie deviances": [[987, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[407, "mean-shift"]], "Mean absolute error": [[987, "mean-absolute-error"]], "Mean absolute percentage error": [[987, "mean-absolute-percentage-error"]], "Mean squared error": [[987, "mean-squared-error"]], "Mean squared logarithmic error": [[987, "mean-squared-logarithmic-error"]], "Measure and plot the results": [[132, "measure-and-plot-the-results"]], "Median absolute error": [[987, "median-absolute-error"]], "Memory footprint": [[53, "memory-footprint"]], "Memory usage profiling": [[386, "memory-usage-profiling"]], "Merging Pull Requests": [[384, "merging-pull-requests"]], "Metadata Routing": [[235, "metadata-routing"], [321, "metadata-routing"], [394, "metadata-routing"], [398, "metadata-routing"], [1047, "metadata-routing"], [1047, "id1"], [1048, "metadata-routing"]], "Metadata Routing Support": [[322, "metadata-routing-support"]], "Metadata Routing Support Status": [[398, "metadata-routing-support-status"]], "Metadata routing": [[406, "module-sklearn.utils.metadata_routing"]], "Methods": [[394, "methods"]], "Metrics": [[403, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[987, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "MinMaxScaler": [[305, "minmaxscaler"]], "Mini Batch K-Means": [[407, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[412, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[412, "mini-batch-dictionary-learning"]], "MiniBatchNMF: an online version of NMF": [[319, "minibatchnmf-an-online-version-of-nmf"]], "Minimal Cost-Complexity Pruning": [[1003, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1043, "minimal-dependencies"], [1044, "minimal-dependencies"]], "Minimum Covariance Determinant": [[409, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[81, "minimum-covariance-determinant-estimator"]], "Minor version release (also known as bug-fix release)": [[384, "minor-version-release-also-known-as-bug-fix-release"]], "Misc": [[1030, "misc"]], "Miscellaneous": [[166, "miscellaneous"], [227, "miscellaneous"], [406, "miscellaneous"], [1038, "miscellaneous"], [1038, "id40"], [1039, "miscellaneous"], [1040, "miscellaneous"], [1041, "miscellaneous"], [1041, "id13"], [1042, "miscellaneous"], [1043, "miscellaneous"], [1046, "miscellaneous"]], "Misleading values on strongly correlated features": [[995, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[162, "missing-value-imputation"], [166, "missing-value-imputation"]], "Missing Values Support": [[1003, "missing-values-support"]], "Missing information": [[164, "missing-information"]], "Missing value support for Random Forest": [[322, "missing-value-support-for-random-forest"]], "Missing values support": [[414, "missing-values-support"]], "Missing values support in decision trees": [[321, "missing-values-support-in-decision-trees"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Model Compression": [[366, "model-compression"]], "Model Reshaping": [[366, "model-reshaping"]], "Model Selection": [[166, "model-selection"], [253, "model-selection"]], "Model Selection Enhancements and API Changes": [[1036, "model-selection-enhancements-and-api-changes"]], "Model Selection Interface": [[406, "model-selection-interface"]], "Model Training and Comparison": [[122, "model-training-and-comparison"]], "Model comparison": [[121, "model-comparison"]], "Model evaluation": [[393, "model-evaluation"]], "Model fitting and extrapolation": [[156, "model-fitting-and-extrapolation"]], "Model persistence": [[401, "model-persistence"]], "Model selection and evaluation": [[402, "model-selection-and-evaluation"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[102, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Model selection: choosing estimators and their parameters": [[1018, "model-selection-choosing-estimators-and-their-parameters"]], "Model selection: development and evaluation": [[976, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[976, "model-specific-cross-validation"]], "Model training and selection": [[147, "model-training-and-selection"], [250, "model-training-and-selection"]], "Model validation": [[406, "model-validation"]], "Model with metadata stripping": [[351, "model-with-metadata-stripping"]], "Model without metadata stripping": [[351, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[148, "model-based-and-sequential-feature-selection"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[13, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[302, "models-definition"]], "Models robustness to recover the ground truth weights": [[178, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[984, "modified-locally-linear-embedding"]], "Monitoring performance": [[380, "monitoring-performance"]], "Monotonic Constraints": [[129, "monotonic-constraints"], [414, "monotonic-constraints"]], "Monotonic constraints": [[127, "monotonic-constraints"]], "More control with warm_start": [[991, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[55, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[111, "multi-class-adaboosted-decision-trees"]], "Multi-class case": [[987, "multi-class-case"]], "Multi-class classification": [[1002, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[386, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[984, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[223, "multi-dimensional-scaling"]], "Multi-label case": [[987, "multi-label-case"]], "Multi-label confusion matrix": [[987, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[991, "multi-layer-perceptron"]], "Multi-layer perceptron": [[170, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[359, "multi-output-decision-tree-regression"]], "Multi-output problems": [[1003, "multi-output-problems"]], "Multi-task Elastic-Net": [[983, "multi-task-elastic-net"]], "Multi-task Lasso": [[983, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[406, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[998, "multilabelbinarizer"]], "MultiOutputClassifier": [[988, "multioutputclassifier"]], "MultiOutputRegressor": [[988, "multioutputregressor"]], "Multiclass Receiver Operating Characteristic (ROC)": [[269, "multiclass-receiver-operating-characteristic-roc"]], "Multiclass and multilabel classification": [[987, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[389, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[988, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[988, "multiclass-classification"], [1021, null]], "Multiclass classification strategies": [[406, "multiclass-classification-strategies"]], "Multiclass methods": [[166, "multiclass-methods"], [277, "multiclass-methods"]], "Multiclass sparse logistic regression on 20newgroups": [[214, "multiclass-sparse-logistic-regression-on-20newgroups"]], "Multiclass support": [[405, "multiclass-support"]], "Multiclass vs. multilabel fitting": [[1014, "multiclass-vs-multilabel-fitting"]], "Multiclass-multioutput classification": [[988, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[220, "multidimensional-scaling"]], "Multilabel": [[376, "multilabel"]], "Multilabel classification": [[236, "multilabel-classification"], [988, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[281, "multilabel-classification-using-a-classifier-chain"]], "Multilabel ranking metrics": [[406, "multilabel-ranking-metrics"], [987, "multilabel-ranking-metrics"]], "Multinomial Case": [[983, "multinomial-case"]], "Multinomial Naive Bayes": [[989, "multinomial-naive-bayes"]], "Multioutput methods": [[166, "multioutput-methods"], [280, "multioutput-methods"]], "Multioutput regression": [[988, "multioutput-regression"]], "Multiple modules": [[1038, "multiple-modules"], [1039, "multiple-modules"]], "Multiple vs. Single Imputation": [[977, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[977, "multivariate-feature-imputation"]], "Mutual Information based scores": [[407, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[407, "mutual-reachability-graph"]], "NMF with a beta-divergence": [[412, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[412, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[989, "naive-bayes"]], "Naive evaluation of the next hour bike demand regression": [[13, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Native Categorical Feature Support": [[311, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[317, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[315, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[294, "nearest-centroid-classification"]], "Nearest Centroid Classifier": [[990, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[990, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[166, "nearest-neighbors"], [284, "nearest-neighbors"], [990, "nearest-neighbors"]], "Nearest Neighbors Classification": [[286, "nearest-neighbors-classification"], [990, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[990, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[990, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[295, "nearest-neighbors-regression"]], "Nearest Shrunken Centroid": [[990, "nearest-shrunken-centroid"]], "Nearest neighbor and the curse of dimensionality": [[1021, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Nearest neighbors imputation": [[977, "nearest-neighbors-imputation"]], "Neighborhood Components Analysis": [[990, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[293, "neighborhood-components-analysis-illustration"]], "Nested cross-validation": [[1018, null]], "Nested versus non-nested cross-validation": [[265, "nested-versus-non-nested-cross-validation"]], "NetBSD": [[397, "netbsd"]], "Neural Networks": [[166, "neural-networks"], [298, "neural-networks"]], "Neural network models (supervised)": [[991, "neural-network-models-supervised"]], "Neural network models (unsupervised)": [[992, "neural-network-models-unsupervised"]], "New Estimator Classes": [[1031, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[317, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[317, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[317, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[320, "new-and-enhanced-displays"]], "New classes": [[1030, "new-classes"]], "New display model_selection.ValidationCurveDisplay": [[321, "new-display-model-selection-validationcurvedisplay"]], "New documentation improvements": [[317, "new-documentation-improvements"], [318, "new-documentation-improvements"]], "New features": [[1033, "new-features"], [1034, "new-features"], [1035, "new-features"], [1036, "new-features"], [1037, "new-features"]], "New plotting API": [[315, "new-plotting-api"]], "New self-training meta-estimator": [[317, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1006, "new-to-scientific-python"]], "Next steps": [[393, "next-steps"]], "Non-Negative Least Squares": [[983, "non-negative-least-squares"]], "Non-linear SVM": [[344, "non-linear-svm"]], "Non-linear transformation": [[997, "non-linear-transformation"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Non-negative least squares": [[194, "non-negative-least-squares"]], "Non-negative matrix factorization (NMF or NNMF)": [[412, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Normalization": [[997, "normalization"]], "Normalized Discounted Cumulative Gain": [[987, "normalized-discounted-cumulative-gain"]], "Normalizer": [[305, "normalizer"]], "Note on MPS device support": [[403, "note-on-mps-device-support"]], "Notes": [[368, "notes"]], "Novelty Detection": [[993, "novelty-detection"]], "Novelty and Outlier Detection": [[993, "novelty-and-outlier-detection"]], "Novelty detection with Local Outlier Factor": [[993, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[289, "novelty-detection-with-local-outlier-factor-lof"]], "NumPy": [[385, "numpy"]], "Number of candidates and amount of resource at each iteration": [[272, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[382, "numerical-assertions-in-tests"]], "Nystroem Method for Kernel Approximation": [[979, "nystroem-method-for-kernel-approximation"]], "OOB Errors for Random Forests": [[115, "oob-errors-for-random-forests"]], "OPTICS": [[407, "optics"]], "Obtaining predictions by cross-validation": [[411, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1012, "id19"]], "Older Versions": [[1030, "older-versions"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[213, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "One-class SVM with non-linear kernel (RBF)": [[337, "one-class-svm-with-non-linear-kernel-rbf"]], "One-vs-One multiclass ROC": [[269, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[269, "one-vs-rest-multiclass-roc"]], "OneVsOneClassifier": [[988, "onevsoneclassifier"]], "OneVsRestClassifier": [[988, "onevsrestclassifier"]], "Online One-Class SVM": [[318, "online-one-class-svm"], [1001, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Open problem: Stock Market Structure": [[1019, "open-problem-stock-market-structure"]], "Optical recognition of handwritten digits dataset": [[377, "optical-recognition-of-handwritten-digits-dataset"]], "Optimisation of kernel hyperparameters in GPR": [[157, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[382, "optional-arguments"]], "Oracle Approximating Shrinkage": [[409, "oracle-approximating-shrinkage"]], "Ordinary Least Squares": [[983, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[983, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[197, "ordinary-least-squares-and-ridge-regression-variance"]], "Original data": [[266, "original-data"], [305, "original-data"]], "Original image": [[53, "original-image"]], "Original points": [[293, "original-points"]], "Orthogonal Matching Pursuit": [[198, "orthogonal-matching-pursuit"]], "Orthogonal Matching Pursuit (OMP)": [[983, "orthogonal-matching-pursuit-omp"]], "Other changes": [[1030, "other-changes"]], "Other estimators and tasks": [[1007, "other-estimators-and-tasks"]], "Otto Group": [[1012, "id26"]], "Our community, our values": [[380, null]], "Out of Bag Estimates": [[976, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Out-of-core naive Bayes model fitting": [[989, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[993, "id1"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "Outlier detection with Local Outlier Factor (LOF)": [[290, "outlier-detection-with-local-outlier-factor-lof"]], "Outlier-robust regressors": [[406, "outlier-robust-regressors"]], "Outliers in the X direction": [[216, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[216, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[995, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[988, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[367, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[407, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[278, "overview-of-multiclass-training-meta-estimators"]], "Overview of outlier detection methods": [[993, "overview-of-outlier-detection-methods"]], "PCA example with Iris Data-set": [[101, "pca-example-with-iris-data-set"]], "PCA using randomized SVD": [[412, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1004, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1012, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[85, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[85, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[410, "plscanonical"]], "PLSRegression": [[410, "plsregression"]], "PLSSVD": [[410, "plssvd"]], "Packaging": [[1042, "packaging"]], "Pair Confusion Matrix": [[407, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[260, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[260, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise metrics": [[406, "pairwise-metrics"]], "Pairwise metrics, Affinities and Kernels": [[985, "pairwise-metrics-affinities-and-kernels"]], "Pandas": [[385, "pandas"]], "Pandas output with set_output API": [[320, "pandas-output-with-set-output-api"]], "Parallel NumPy and SciPy routines from numerical libraries": [[367, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallelism": [[367, "parallelism"], [976, "parallelism"]], "Parallelism, resource management, and configuration": [[367, "parallelism-resource-management-and-configuration"]], "Parallelization": [[414, "parallelization"]], "Parameter tuning using grid search": [[1023, "parameter-tuning-using-grid-search"]], "Parameters": [[394, "parameters"], [414, "parameters"]], "Parameters and init": [[382, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1002, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[170, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial Dependence and Individual Conditional Expectation plots": [[994, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[994, "partial-dependence-plots"]], "Partitioning the data": [[175, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[983, "passive-aggressive-algorithms"]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[415, "patch-extraction"]], "PeerIndex": [[1012, "id17"]], "People": [[1030, "people"], [1030, "id2"], [1030, "id5"], [1030, "id8"], [1030, "id11"], [1030, "id13"], [1030, "id15"], [1030, "id17"], [1031, "people"], [1031, "id3"], [1032, "people"], [1033, "people"]], "Perceptron": [[983, "perceptron"]], "Performance improvements": [[319, "performance-improvements"]], "Performing dimensionality reduction using LSA": [[352, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[200, "periodic-splines"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[171, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[172, "permutation-importance-with-multicollinear-or-correlated-features"]], "Permutation feature importance": [[995, "permutation-feature-importance"]], "Permutation test score": [[266, "permutation-test-score"], [411, "permutation-test-score"]], "Permutation-based feature importance": [[315, "permutation-based-feature-importance"]], "Pinball loss": [[987, "pinball-loss"]], "Pipeline ANOVA SVM": [[145, "pipeline-anova-svm"]], "Pipeline compatibility": [[382, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[261, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[408, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[69, "pipelines-and-composite-estimators"], [166, "pipelines-and-composite-estimators"], [408, "pipelines-and-composite-estimators"]], "Pipelines: chaining pre-processors and estimators": [[393, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1004, null], [1019, "pipelining"]], "Pipelining: chaining a PCA and a logistic regression": [[73, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Pixel importances with a parallel forest of trees": [[119, "pixel-importances-with-a-parallel-forest-of-trees"]], "Platform-specific instructions": [[378, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[267, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[257, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[204, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Plot a PCA representation": [[90, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[351, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[269, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[269, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[183, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[238, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[134, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot classification boundaries with different SVM Kernels": [[342, "plot-classification-boundaries-with-different-svm-kernels"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[335, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot discrete decision boundary": [[128, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[138, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[125, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[135, "plot-individual-and-voting-regression-predictions"]], "Plot multi-class SGD on the iris dataset": [[208, "plot-multi-class-sgd-on-the-iris-dataset"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[191, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Plot number of features VS. cross-validation scores": [[147, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[128, "plot-path-length-decision-boundary"]], "Plot randomly generated classification dataset": [[91, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[92, "plot-randomly-generated-multilabel-dataset"]], "Plot regularization path": [[192, "plot-regularization-path"]], "Plot result": [[38, "plot-result"], [63, "plot-result"], [67, "plot-result"], [67, "id2"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [78, "plot-results"], [96, "plot-results"], [97, "plot-results"], [117, "plot-results"], [281, "plot-results"], [290, "plot-results"]], "Plot results functions": [[273, "plot-results-functions"]], "Plot support and time series": [[193, "plot-support-and-time-series"]], "Plot the BIC scores": [[250, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[267, "plot-the-precision-recall-curve"]], "Plot the best model": [[250, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[341, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[133, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot the decision surface of decision trees trained on the iris dataset": [[357, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[120, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Plot the marginal log-likelihood": [[178, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[267, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[325, "plot-the-most-uncertain-predictions"]], "Plot the results": [[50, "plot-the-results"], [82, "plot-the-results"], [135, "plot-the-results"], [164, "plot-the-results"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[336, "plot-the-support-vectors-in-linearsvc"]], "Plot the true and estimated coefficients": [[178, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[179, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[125, "plot-training-deviance"]], "Plotting": [[302, "plotting"], [406, "plotting"], [406, "id7"], [406, "id9"]], "Plotting API Overview": [[387, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[256, "plotting-cross-validated-predictions"]], "Plotting Functions": [[34, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[262, "plotting-learning-curves-and-checking-models-scalability"]], "Plotting Validation Curves": [[275, "plotting-validation-curves"]], "Plotting four circles": [[66, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[239, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[239, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[239, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[178, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[20, "plotting-results"]], "Plotting the ROC Curve": [[241, "plotting-the-roc-curve"]], "Plotting the Results": [[311, "plotting-the-results"]], "Plotting the result": [[264, "plotting-the-result"]], "Plotting the results": [[64, "plotting-the-results"], [112, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[203, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[66, "plotting-two-circles"]], "Plotting with Multiple Axes": [[387, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[199, "poisson-regression-and-non-normal-loss"]], "Polars output in set_output": [[322, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[979, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[200, "polynomial-and-spline-interpolation"]], "Polynomial features": [[997, "polynomial-features"]], "Polynomial kernel": [[342, "polynomial-kernel"], [985, "polynomial-kernel"], [1021, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[983, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Possible solutions": [[57, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[356, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "PowerTransformer": [[305, "powertransformer"]], "Pre-test vs. post-test analysis": [[263, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[987, "precision-recall-and-f-measures"]], "Precision-Recall": [[267, "precision-recall"]], "Precomputed sparse nearest neighbors graph": [[315, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[411, "predefined-fold-splits-validation-sets"]], "Prediction Intervals for Gradient Boosting Regression": [[124, "prediction-intervals-for-gradient-boosting-regression"]], "Prediction Latency": [[10, "prediction-latency"], [366, "prediction-latency"]], "Prediction Throughput": [[366, "prediction-throughput"]], "Preparing a release PR": [[384, "preparing-a-release-pr"]], "Preparing the data": [[112, "preparing-the-data"], [127, "preparing-the-data"], [175, "preparing-the-data"]], "Preprocessing": [[166, "preprocessing"], [304, "preprocessing"]], "Preprocessing data": [[997, "preprocessing-data"]], "Preprocessing numerical variables": [[169, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[170, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[170, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[170, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[86, "principal-component-regression-vs-partial-least-squares-regression"]], "Principal component analysis (PCA)": [[412, "principal-component-analysis-pca"]], "Principal component analysis: PCA": [[1022, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1047, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[417, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[152, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Probability calibration": [[405, "probability-calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Processing the dataset": [[169, "processing-the-dataset"]], "Productivity and sanity-preserving tips": [[388, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[386, "profiling-python-code"]], "Profiling compiled extensions": [[386, "profiling-compiled-extensions"]], "Project template:": [[382, null]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[86, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[13, "proper-next-hour-forecasting-evaluation"]], "Pros:": [[986, null], [986, null]], "Provide a failing code example with minimal comments": [[385, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[380, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[217, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1008, "purpose-of-this-document"]], "Purpose of this example": [[203, "purpose-of-this-example"]], "Putting it all together": [[1019, "putting-it-all-together"]], "PyTorch Support": [[403, "pytorch-support"]], "Python API": [[367, "python-api"]], "Python package and dataset imports, load dataset": [[233, "python-package-and-dataset-imports-load-dataset"]], "Python specific serialization": [[401, "python-specific-serialization"]], "Python, Cython or C/C++?": [[386, "python-cython-or-c-c"]], "QDA": [[981, "qda"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[352, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[983, "quantile-regression"]], "Quantile Regressor": [[318, "quantile-regressor"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[319, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "Quantile regression": [[201, "quantile-regression"]], "QuantileTransformer (Gaussian output)": [[305, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[305, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[983, "ransac-random-sample-consensus"]], "RBF SVM parameters": [[338, "rbf-svm-parameters"]], "RBF kernel": [[342, "rbf-kernel"], [985, "rbf-kernel"]], "RBF kernel (Radial Basis Function)": [[1021, "rbf-kernel-radial-basis-function"]], "RCV1 dataset": [[375, "rcv1-dataset"]], "ROC AUC now supports multiclass classification": [[315, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[241, "roc-curve-with-visualization-api"]], "ROC curve showing a specific class": [[269, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[269, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[269, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[269, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[979, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[160, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[417, "radial-basis-function-rbf-kernel"]], "Rand index": [[407, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[172, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[414, "random-forests"]], "Random Numbers": [[382, "random-numbers"]], "Random Projection": [[999, "random-projection"]], "Random data": [[266, "random-data"]], "Random forests and other randomized tree ensembles": [[414, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[411, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1004, "random-projections"]], "Randomized Parameter Optimization": [[976, "randomized-parameter-optimization"]], "Rangespan": [[1012, "id11"]], "Ranking loss": [[987, "ranking-loss"]], "Rational Quadradtic kernel": [[160, "rational-quadradtic-kernel"]], "Rational quadratic kernel": [[417, "rational-quadratic-kernel"]], "Reading the existing code base": [[380, "reading-the-existing-code-base"]], "Real world datasets": [[375, "real-world-datasets"]], "Real-world data set": [[75, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[270, "receiver-operating-characteristic-roc-with-cross-validation"]], "Receiver operating characteristic (ROC)": [[987, "receiver-operating-characteristic-roc"]], "Recently deprecated": [[406, "recently-deprecated"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Recommendation": [[375, null]], "Recommendation Engine packages": [[1007, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[146, "recursive-feature-elimination"], [416, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[147, "recursive-feature-elimination-with-cross-validation"]], "Reference": [[416, null], [416, null]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [81, "references"], [114, "references"], [175, "references"], [183, "references"], [187, null], [260, null], [278, "references"], [296, "references"], [375, null], [375, null], [375, null], [375, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [415, null], [417, "references"], [977, "references"], [977, null], [994, null], [997, null], [997, null], [1000, null], [1000, null]], "References:": [[80, null], [111, null], [171, null], [265, null], [266, null], [374, null], [375, null], [404, null], [404, null], [404, null], [405, null], [407, null], [407, null], [407, null], [409, null], [409, null], [409, null], [409, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [415, null], [415, null], [976, null], [976, null], [979, null], [980, null], [981, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [985, null], [985, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [988, null], [988, null], [988, null], [990, null], [992, null], [993, null], [993, null], [993, null], [993, null], [995, null], [999, null], [999, null], [999, null], [1001, null], [1001, null], [1002, null]], "Refitting and updating parameters": [[1014, "refitting-and-updating-parameters"]], "Region of Practical Equivalence": [[260, "region-of-practical-equivalence"]], "Regression": [[159, "regression"], [983, "regression"], [991, "regression"], [1001, "regression"], [1002, "regression"], [1003, "regression"]], "Regression criteria": [[1003, "regression-criteria"]], "Regression metrics": [[406, "regression-metrics"], [987, "regression-metrics"]], "RegressorChain": [[988, "regressorchain"]], "Regressors with variable selection": [[406, "regressors-with-variable-selection"]], "Regularization": [[991, "regularization"]], "Regularization path of L1- Logistic Regression": [[192, "regularization-path-of-l1-logistic-regression"]], "Related Projects": [[1007, "related-projects"]], "Related changes": [[1037, "related-changes"]], "Related links:": [[374, null]], "Relation to impurity-based importance in trees": [[995, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[166, "release-highlights"], [314, "release-highlights"]], "Release Highlights for scikit-learn 0.22": [[315, "release-highlights-for-scikit-learn-0-22"]], "Release Highlights for scikit-learn 0.23": [[316, "release-highlights-for-scikit-learn-0-23"]], "Release Highlights for scikit-learn 0.24": [[317, "release-highlights-for-scikit-learn-0-24"]], "Release Highlights for scikit-learn 1.0": [[318, "release-highlights-for-scikit-learn-1-0"]], "Release Highlights for scikit-learn 1.1": [[319, "release-highlights-for-scikit-learn-1-1"]], "Release Highlights for scikit-learn 1.2": [[320, "release-highlights-for-scikit-learn-1-2"]], "Release Highlights for scikit-learn 1.3": [[321, "release-highlights-for-scikit-learn-1-3"]], "Release Highlights for scikit-learn 1.4": [[322, "release-highlights-for-scikit-learn-1-4"]], "Release History": [[1028, "release-history"]], "Release checklist": [[384, "release-checklist"]], "Releasing": [[384, "releasing"]], "Remarks": [[232, "remarks"]], "Removed modules": [[1030, "removed-modules"]], "Removing features with low variance": [[416, "removing-features-with-low-variance"]], "Repeated K-Fold": [[411, "repeated-k-fold"]], "Replace missing values by 0": [[164, "replace-missing-values-by-0"]], "Restricted Boltzmann Machine features for digit classification": [[302, "restricted-boltzmann-machine-features-for-digit-classification"]], "Restricted Boltzmann machines": [[992, "restricted-boltzmann-machines"]], "Results interpretation": [[281, "results-interpretation"]], "Retrieve dataframes from OpenML": [[315, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Rich HTML representation": [[230, "rich-html-representation"]], "Rich visual representation of estimators": [[316, "rich-visual-representation-of-estimators"]], "Ridge Complexity": [[983, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[203, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Ridge regression and classification": [[983, "ridge-regression-and-classification"]], "Roadmap": [[1008, "roadmap"]], "Robust Covariance Estimation": [[409, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[80, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "Robust linear estimator fitting": [[205, "robust-linear-estimator-fitting"]], "Robust linear model estimation using RANSAC": [[202, "robust-linear-model-estimation-using-ransac"]], "Robust vs Empirical covariance estimate": [[81, "robust-vs-empirical-covariance-estimate"]], "RobustScaler": [[305, "robustscaler"]], "Robustness of cross-validation results": [[362, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[983, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[976, "robustness-to-failure"]], "Roles And Responsibilities": [[395, "roles-and-responsibilities"]], "Rolling your own estimator": [[382, "rolling-your-own-estimator"]], "Router and Consumer": [[235, "router-and-consumer"]], "Run the benchmark": [[58, "run-the-benchmark"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[264, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[378, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[987, "r2-score-the-coefficient-of-determination"]], "SGD": [[1001, "id5"]], "SGD: Maximum margin separating hyperplane": [[211, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Penalties": [[210, "sgd-penalties"]], "SGD: Weighted samples": [[212, "sgd-weighted-samples"]], "SGD: convex loss functions": [[209, "sgd-convex-loss-functions"]], "SKLEARN_ASSUME_FINITE": [[367, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[367, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[367, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[367, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[367, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[367, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[367, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[367, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[367, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[367, "sklearn-working-memory"]], "SVC": [[1002, "svc"]], "SVM Exercise": [[140, "svm-exercise"]], "SVM Margins Example": [[343, "svm-margins-example"]], "SVM Tie Breaking Example": [[347, "svm-tie-breaking-example"]], "SVM with custom kernel": [[334, "svm-with-custom-kernel"]], "SVM-Anova: SVM with univariate feature selection": [[341, "svm-anova-svm-with-univariate-feature-selection"]], "SVM: Maximum margin separating hyperplane": [[339, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[340, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM: Weighted samples": [[348, "svm-weighted-samples"]], "SVR": [[1002, "svr"]], "Sample images": [[374, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[261, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Sample weight support": [[414, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[316, "sample-weight-support-for-lasso-and-elasticnet"]], "Samples generator": [[406, "samples-generator"]], "Scalability and stability improvements to KMeans": [[316, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[175, "scalable-learning-with-polynomial-kernel-approximation"]], "Scale Invariance": [[55, "scale-invariance"]], "Scaling data with outliers": [[997, "scaling-data-with-outliers"]], "Scaling features to a range": [[997, "scaling-features-to-a-range"]], "Scaling sparse data": [[997, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[346, "scaling-the-regularization-parameter-for-svcs"]], "Scaling up the One-Class SVM": [[993, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[368, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[90, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[85, "scatter-plot-of-scores"]], "Scikit-learn compatibility checker": [[406, "module-sklearn.utils.estimator_checks"]], "Scikit-learn governance and decision-making": [[395, "scikit-learn-governance-and-decision-making"]], "Scikit-learn object discovery": [[406, "module-sklearn.utils.discovery"]], "Score, and cross-validated scores": [[1018, "score-and-cross-validated-scores"]], "Scores and probabilities": [[1002, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[976, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[9, "second-example"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Section contents": [[1014, null]], "Security & maintainability limitations": [[401, "security-maintainability-limitations"]], "See Also:": [[265, null], [408, null]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "Selecting Lasso via an information criterion": [[188, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[188, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[72, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Selecting features based on importance": [[148, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[148, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[60, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Self Training": [[1000, "self-training"]], "Semi Supervised Classification": [[166, "semi-supervised-classification"], [324, "semi-supervised-classification"]], "Semi-supervised Classification on a Text Dataset": [[329, "semi-supervised-classification-on-a-text-dataset"]], "Semi-supervised learning": [[325, "semi-supervised-learning"], [1000, "semi-supervised-learning"]], "Sequence similarity matrix under the kernel": [[159, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[416, "sequential-feature-selection"]], "Setting regularization parameter": [[983, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[983, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[217, "severity-model-gamma-distribution"]], "Shape of the data arrays": [[1014, null]], "Shrinkage": [[1021, "shrinkage"]], "Shrinkage and Covariance Estimator": [[981, "shrinkage-and-covariance-estimator"]], "Shrinkage and sparsity with logistic regression": [[1021, null]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[78, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Shrinkage via learning rate": [[414, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[409, "shrunk-covariance"]], "Sigmoid": [[405, "sigmoid"]], "Sigmoid kernel": [[342, "sigmoid-kernel"], [985, "sigmoid-kernel"], [1021, "sigmoid-kernel"]], "Silhouette Coefficient": [[407, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[288, "simple-1d-kernel-density-estimation"]], "Simple Pipeline": [[235, "simple-pipeline"]], "Single estimator versus bagging: bias-variance decomposition": [[114, "single-estimator-versus-bagging-bias-variance-decomposition"]], "Single label": [[376, "single-label"]], "Skewed Chi Squared Kernel": [[979, "skewed-chi-squared-kernel"]], "Social Media": [[1011, "social-media"]], "Solvers": [[983, "solvers"]], "Sparse coding with a precomputed dictionary": [[104, "sparse-coding-with-a-precomputed-dictionary"], [412, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Sparse input": [[997, null]], "Sparse inverse covariance": [[409, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[82, "sparse-inverse-covariance-estimation"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[412, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[999, "sparse-random-projection"]], "Sparsity": [[415, "sparsity"], [1021, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[196, "sparsity-example-fitting-only-features-1-and-2"]], "Species distribution dataset": [[375, "species-distribution-dataset"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Specific models": [[382, "specific-models"]], "Specifying an objective metric": [[976, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[976, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[404, "spectral-biclustering"]], "Spectral Clustering Graphs": [[407, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[404, "spectral-co-clustering"]], "Spectral Embedding": [[984, "spectral-embedding"]], "Spectral clustering": [[407, "spectral-clustering"]], "Spectral clustering for image segmentation": [[66, "spectral-clustering-for-image-segmentation"]], "Spectral embedding for non-linear dimensionality reduction": [[220, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "Spline Transformers": [[318, "spline-transformers"]], "Spline transformer": [[997, "spline-transformer"]], "Splitter Classes": [[406, "splitter-classes"]], "Splitter Functions": [[406, "splitter-functions"]], "Spotify": [[1012, "id2"]], "Sprints": [[0, "sprints"]], "Stack of predictors on a single data set": [[132, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[414, "stacked-generalization"]], "Stacking Classifier and Regressor": [[315, "stacking-classifier-and-regressor"]], "Stalled and Unclaimed Issues": [[380, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[380, "stalled-pull-requests"]], "Standard replies for reviewing": [[388, "standard-replies-for-reviewing"]], "StandardScaler": [[305, "standardscaler"]], "Standardization, or mean removal and variance scaling": [[997, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1008, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[260, "statistical-comparison-of-models-using-grid-search"]], "Statistical learning": [[1017, null]], "Statistical learning with Python": [[1007, "statistical-learning-with-python"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1020, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Stochastic Gradient Descent": [[1001, "stochastic-gradient-descent"]], "Stochastic Gradient Descent - SGD": [[983, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1001, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[992, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1001, "stopping-criterion"]], "Strategies comparison": [[278, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[368, "strategies-to-scale-computationally-bigger-data"]], "Stratified Shuffle Split": [[411, "stratified-shuffle-split"]], "Stratified k-fold": [[411, "stratified-k-fold"]], "StratifiedGroupKFold": [[411, "stratifiedgroupkfold"]], "Streaming instances": [[368, "streaming-instances"]], "Submitting a bug report or a feature request": [[380, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1008, "subpackage-specific-goals"]], "Subsampling": [[414, "subsampling"]], "Successive Halving Iterations": [[272, "successive-halving-iterations"]], "Successive Halving estimators for tuning hyper-parameters": [[317, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Summary": [[25, "summary"], [122, "summary"], [353, "summary"]], "Summary of cross-validation approach": [[188, "summary-of-cross-validation-approach"]], "Supervised learning": [[1010, "supervised-learning"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1021, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "Support": [[1011, "support"]], "Support Vector Machines": [[166, "support-vector-machines"], [333, "support-vector-machines"], [1002, "support-vector-machines"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[345, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Support for Array API": [[1047, "support-for-array-api"], [1048, "support-for-array-api"]], "Support for Array API-compatible inputs": [[403, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1047, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1048, "support-for-building-with-meson"]], "Support for missing values": [[127, "support-for-missing-values"]], "Support for quantile loss": [[127, "support-for-quantile-loss"]], "Support vector machines (SVMs)": [[1021, "support-vector-machines-svms"]], "Swiss Roll": [[224, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[224, "swiss-roll-and-swiss-hole-reduction"]], "Swiss-Hole": [[224, "swiss-hole"]], "Synthetic dataset": [[385, "synthetic-dataset"]], "Synthetic example": [[75, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[220, "t-distributed-stochastic-neighbor-embedding"]], "Table Of Contents": [[369, "table-of-contents"]], "Table of Contents": [[392, "table-of-contents"]], "Take-home messages": [[260, "take-home-messages"]], "Target Encoder": [[997, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[312, "target-encoder-s-internal-cross-fitting"]], "Target Types": [[394, "target-types"]], "Target format": [[988, "target-format"], [988, "id5"], [988, "id8"], [988, "id10"]], "TargetEncoder: a new category encoding strategy": [[321, "targetencoder-a-new-category-encoding-strategy"]], "Technical Committee": [[395, "technical-committee"]], "Test dependencies": [[378, "test-dependencies"]], "Test with permutations the significance of a classification score": [[266, "test-with-permutations-the-significance-of-a-classification-score"]], "Testing Functions": [[389, "testing-functions"]], "Testing and improving test coverage": [[380, "testing-and-improving-test-coverage"]], "Text feature extraction": [[415, "text-feature-extraction"]], "TfidfVectorizer": [[353, "tfidfvectorizer"]], "Tf\u2013idf term weighting": [[415, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[375, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[415, "the-bag-of-words-representation"]], "The Digit Dataset": [[89, "the-digit-dataset"]], "The Dirichlet Process": [[986, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[199, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[90, "the-iris-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[232, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "The Johnson-Lindenstrauss lemma": [[999, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[375, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[388, "the-meson-build-backend"]], "The Olivetti faces dataset": [[375, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[278, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[267, "the-average-precision-score-in-multi-label-settings"]], "The cross_validate function and multiple metric evaluation": [[411, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The curse of dimensionality": [[1021, "the-curse-of-dimensionality"]], "The data": [[86, "the-data"]], "The dataset": [[258, "the-dataset"]], "The dataset: simulated hourly wages": [[168, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[169, "the-dataset-wages"]], "The importance of hyperparameters search": [[278, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[169, "the-machine-learning-pipeline"]], "The problem of correlated variables": [[169, "the-problem-of-correlated-variables"]], "The problem solved in clustering": [[1022, null]], "The problem solved in supervised learning": [[1021, null]], "The scikit-learn.org web site": [[384, "the-scikit-learn-org-web-site"]], "The scoring parameter: defining model evaluation rules": [[987, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[216, "theil-sen-regression"]], "Theil-Sen estimator: generalized-median-based estimator": [[983, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical bounds": [[232, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[235, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[397, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[411, "time-series-split"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Timing and accuracy plots": [[233, "timing-and-accuracy-plots"]], "Tips and Tricks": [[366, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[381, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[976, "tips-for-parameter-search"]], "Tips for performance": [[381, "tips-for-performance"]], "Tips on Practical Use": [[991, "tips-on-practical-use"], [1001, "tips-on-practical-use"], [1002, "tips-on-practical-use"]], "Tips on practical use": [[984, "tips-on-practical-use"], [1003, "tips-on-practical-use"]], "Tips to ease development": [[381, "tips-to-ease-development"]], "Tokenizing text with scikit-learn": [[1023, "tokenizing-text-with-scikit-learn"]], "Tools": [[403, "tools"]], "Top terms per cluster": [[352, "top-terms-per-cluster"]], "Top-k accuracy score": [[987, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[15, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Total impurity of leaves vs effective alphas of pruned tree": [[356, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[414, "totally-random-trees-embedding"]], "Toy datasets": [[377, "toy-datasets"]], "Tracking feature names in a pipeline": [[408, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[983, null]], "Train classifiers": [[338, "train-classifiers"]], "Train error vs Test error": [[273, "train-error-vs-test-error"]], "Train models on the diabetes dataset": [[239, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[360, "train-tree-classifier"]], "Training": [[302, "training"], [990, "training"]], "Training SVC model and plotting decision boundaries": [[342, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[241, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[312, "training-a-ridge-regressor"]], "Training a classifier": [[1023, "training-a-classifier"]], "Training and Evaluating Pipelines with Different Encoders": [[311, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[112, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[135, "training-classifiers"]], "Training of the model": [[128, "training-of-the-model"]], "Training set and testing set": [[1014, null], [1021, null]], "Training the AdaBoostClassifier": [[111, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[203, "training-the-ridge-regressor"]], "Transform": [[990, "transform"]], "Transform data": [[85, "transform-data"]], "Transformers and pre-processors": [[393, "transformers-and-pre-processors"]], "Transforming target in regression": [[408, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[998, "transforming-the-prediction-target-y"]], "Translations of scikit-learn documentation": [[1007, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1003, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[315, "tree-pruning"]], "Tree structure": [[360, "tree-structure"]], "Tree-based feature selection": [[416, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[171, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[379, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[4, "trigonometric-features"]], "Troubleshooting": [[397, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[412, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Tuning hyper-parameters": [[258, "tuning-hyper-parameters"]], "Tuning the hyper-parameters of an estimator": [[976, "tuning-the-hyper-parameters-of-an-estimator"]], "Tuning the hyper-parameters of the quantile regressors": [[124, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[137, "tutorial-exercises"], [166, "tutorial-exercises"]], "Tutorial setup": [[1023, "tutorial-setup"]], "Tweedie regression on insurance claims": [[217, "tweedie-regression-on-insurance-claims"]], "Two-class AdaBoost": [[113, "two-class-adaboost"]], "Type casting": [[1014, "type-casting"]], "Type of return values and fitted attributes": [[403, "type-of-return-values-and-fitted-attributes"]], "T\u00e9l\u00e9com ParisTech": [[1012, "id7"]], "Unbalanced problems": [[1002, "unbalanced-problems"]], "Under Development": [[1025, "under-development"]], "Underfitting vs. Overfitting": [[274, "underfitting-vs-overfitting"]], "Understanding the decision tree structure": [[360, "understanding-the-decision-tree-structure"]], "Univariate Feature Selection": [[144, "univariate-feature-selection"]], "Univariate feature imputation": [[977, "univariate-feature-imputation"]], "Univariate feature selection": [[144, "id1"], [416, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[977, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[382, "universal-attributes"]], "Unlabeled entries in y": [[1000, null]], "Unsupervised Nearest Neighbors": [[990, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1004, "unsupervised-dimensionality-reduction"]], "Unsupervised learning": [[1024, "unsupervised-learning"]], "Unsupervised learning: seeking representations of the data": [[1022, "unsupervised-learning-seeking-representations-of-the-data"]], "Unweighted feature selection": [[398, "unweighted-feature-selection"]], "Usage": [[405, "usage"], [408, "usage"], [408, "id1"], [414, "usage"], [414, "id24"], [414, "id25"], [414, "id27"], [414, "id35"], [983, "usage"]], "Usage Examples": [[398, "usage-examples"]], "Use markdown formatting": [[385, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[388, "useful-pytest-aliases-and-flags"]], "User Guide": [[1025, "user-guide"]], "User Questions": [[1011, "user-questions"]], "Using Cython": [[386, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[306, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Using None or RandomState instances, and repeated calls to fit and split": [[362, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[381, "using-openmp"]], "Using a debugger, gdb": [[386, "using-a-debugger-gdb"]], "Using cross-validation": [[983, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[411, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[129, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[386, "using-gprof"]], "Using kernels": [[1021, "using-kernels"]], "Using multiple metric evaluation": [[987, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[148, "using-negative-tolerance-values"]], "Using scikit-learn": [[392, "using-scikit-learn"]], "Using stop words": [[415, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[386, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[386, "using-yep-and-gperftools"]], "Utilities for Developers": [[389, "utilities-for-developers"]], "Utilities for optimal mathematical operations": [[406, "module-sklearn.utils.extmath"]], "Utilities for parallel computing": [[406, "module-sklearn.utils.parallel"]], "Utilities for random sampling": [[406, "module-sklearn.utils.random"]], "Utilities to deal with multiclass target in classifiers": [[406, "module-sklearn.utils.multiclass"]], "Utilities to handle weights based on class labels": [[406, "module-sklearn.utils.class_weight"]], "Utilities to operate on arrays": [[406, "module-sklearn.utils.arrayfuncs"]], "Utilities to work with graphs": [[406, "module-sklearn.utils.graph"]], "Utilities to work with sparse matrices and arrays": [[406, "module-sklearn.utils.sparsefuncs"]], "Utilities used in meta-estimators": [[406, "module-sklearn.utils.metaestimators"]], "Validation Tools": [[389, "validation-tools"]], "Validation curve": [[982, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[982, "validation-curves-plotting-scores-to-evaluate-models"]], "Variational Bayesian Gaussian Mixture": [[986, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Varying regularization in Multi-layer Perceptron": [[299, "varying-regularization-in-multi-layer-perceptron"]], "Varying the metric": [[407, "varying-the-metric"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Vectorizing a large text corpus with the hashing trick": [[415, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1030, "version-0-10"]], "Version 0.11": [[1030, "version-0-11"]], "Version 0.12": [[1030, "version-0-12"]], "Version 0.12.1": [[1030, "version-0-12-1"]], "Version 0.13": [[1031, "version-0-13"], [1031, "changes-0-13"]], "Version 0.13.1": [[1031, "version-0-13-1"]], "Version 0.14": [[1032, "version-0-14"], [1032, "changes-0-14"]], "Version 0.15": [[1033, "version-0-15"], [1033, "changes-0-15"]], "Version 0.15.1": [[1033, "version-0-15-1"]], "Version 0.15.2": [[1033, "version-0-15-2"]], "Version 0.16": [[1034, "version-0-16"], [1034, "changes-0-16"]], "Version 0.16.1": [[1034, "version-0-16-1"]], "Version 0.17": [[1035, "version-0-17"], [1035, "changes-0-17"]], "Version 0.17.1": [[1035, "version-0-17-1"]], "Version 0.18": [[1036, "version-0-18"], [1036, "changes-0-18"]], "Version 0.18.1": [[1036, "version-0-18-1"]], "Version 0.18.2": [[1036, "version-0-18-2"]], "Version 0.19": [[1037, "version-0-19"], [1037, "id1"]], "Version 0.19.1": [[1037, "version-0-19-1"]], "Version 0.19.2": [[1037, "version-0-19-2"]], "Version 0.20": [[1038, "version-0-20"]], "Version 0.20.0": [[1038, "version-0-20-0"]], "Version 0.20.1": [[1038, "version-0-20-1"]], "Version 0.20.2": [[1038, "version-0-20-2"]], "Version 0.20.3": [[1038, "version-0-20-3"]], "Version 0.20.4": [[1038, "version-0-20-4"]], "Version 0.21": [[1039, "version-0-21"]], "Version 0.21.0": [[1039, "version-0-21-0"]], "Version 0.21.1": [[1039, "version-0-21-1"]], "Version 0.21.2": [[1039, "version-0-21-2"]], "Version 0.21.3": [[1039, "version-0-21-3"]], "Version 0.22": [[1040, "version-0-22"]], "Version 0.22.0": [[1040, "version-0-22-0"]], "Version 0.22.1": [[1040, "version-0-22-1"]], "Version 0.22.2.post1": [[1040, "version-0-22-2-post1"]], "Version 0.23": [[1041, "version-0-23"]], "Version 0.23.0": [[1041, "version-0-23-0"]], "Version 0.23.1": [[1041, "version-0-23-1"]], "Version 0.23.2": [[1041, "version-0-23-2"]], "Version 0.24": [[1042, "version-0-24"]], "Version 0.24.0": [[1042, "version-0-24-0"]], "Version 0.24.1": [[1042, "version-0-24-1"]], "Version 0.24.2": [[1042, "version-0-24-2"]], "Version 0.4": [[1030, "version-0-4"]], "Version 0.5": [[1030, "version-0-5"]], "Version 0.6": [[1030, "version-0-6"]], "Version 0.7": [[1030, "version-0-7"]], "Version 0.8": [[1030, "version-0-8"]], "Version 0.9": [[1030, "version-0-9"]], "Version 1.0": [[1043, "version-1-0"]], "Version 1.0.0": [[1043, "version-1-0-0"]], "Version 1.0.1": [[1043, "version-1-0-1"]], "Version 1.0.2": [[1043, "version-1-0-2"]], "Version 1.1": [[1044, "version-1-1"]], "Version 1.1.0": [[1044, "version-1-1-0"]], "Version 1.1.1": [[1044, "version-1-1-1"]], "Version 1.1.2": [[1044, "version-1-1-2"]], "Version 1.1.3": [[1044, "version-1-1-3"]], "Version 1.2": [[1045, "version-1-2"]], "Version 1.2.0": [[1045, "version-1-2-0"]], "Version 1.2.1": [[1045, "version-1-2-1"]], "Version 1.2.2": [[1045, "version-1-2-2"]], "Version 1.3": [[1046, "version-1-3"]], "Version 1.3.0": [[1046, "version-1-3-0"]], "Version 1.3.1": [[1046, "version-1-3-1"]], "Version 1.3.2": [[1046, "version-1-3-2"]], "Version 1.4": [[1047, "version-1-4"]], "Version 1.4.0": [[1047, "version-1-4-0"]], "Version 1.4.1": [[1047, "version-1-4-1"]], "Version 1.4.2": [[1047, "version-1-4-2"]], "Version 1.5": [[1048, "version-1-5"]], "Version 1.5.0": [[1048, "version-1-5-0"]], "Video resources": [[380, "video-resources"]], "Videos": [[1006, "videos"]], "Visual evaluation of regression models": [[987, "visual-evaluation-of-regression-models"]], "Visualization": [[12, "visualization"], [338, "visualization"], [406, "visualization"]], "Visualization of MLP weights on MNIST": [[301, "visualization-of-mlp-weights-on-mnist"]], "Visualization of cluster hierarchy": [[407, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1027, "visualizations"]], "Visualizations with Display Objects": [[229, "visualizations-with-display-objects"]], "Visualize Comparison": [[122, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[255, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[255, "visualize-our-data"]], "Visualize the learning curves": [[234, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[58, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[234, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[408, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[255, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Vocabulary: classification and regression": [[1021, null]], "Voting Classifier": [[414, "voting-classifier"]], "Voting Regressor": [[414, "voting-regressor"]], "Warnings and Exceptions": [[389, "warnings-and-exceptions"]], "Ways to contribute": [[380, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[67, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1040, "website-update"]], "Weighted Average Probabilities (Soft Voting)": [[414, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[398, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[398, "weighted-scoring-and-unweighted-fitting"]], "Welcome to scikit-learn": [[1005, "welcome-to-scikit-learn"]], "What are the inclusion criteria for new algorithms?": [[392, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[392, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[360, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[392, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "Where to from here": [[1023, "where-to-from-here"]], "Who is using scikit-learn?": [[1012, "who-is-using-scikit-learn"]], "Why are there so many different estimators for linear models?": [[392, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[392, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[392, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[392, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[392, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[392, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[392, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[392, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[392, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[414, "why-it-s-faster"]], "Why scikit?": [[392, "why-scikit"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Will you add GPU support?": [[392, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[392, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[397, "winpython-for-windows"]], "Windows": [[378, "windows"]], "Wine recognition dataset": [[377, "wine-recognition-dataset"]], "Working With Text Data": [[1023, "working-with-text-data"]], "Working on PRs to help review": [[379, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[379, "working-on-issues-to-improve-them"]], "Working with text documents": [[166, "working-with-text-documents"], [350, "working-with-text-documents"]], "Wrong causal interpretation": [[169, "wrong-causal-interpretation"]], "Yhat": [[1012, "id10"]], "Zero one loss": [[987, "zero-one-loss"]], "Zopa": [[1012, "id27"]], "__sklearn_is_fitted__ as Developer API": [[109, "sklearn-is-fitted-as-developer-api"]], "betaworks": [[1012, "id4"]], "dbscan_clustering": [[55, "dbscan-clustering"]], "get_feature_names_out Available in all Transformers": [[319, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[382, "get-params-and-set-params"]], "good first issue tag": [[380, null]], "help wanted tag": [[380, null]], "k-Nearest neighbors classifier": [[1021, "k-nearest-neighbors-classifier"]], "kNN-imputation of the missing values": [[164, "knn-imputation-of-the-missing-values"]], "kcachegrind": [[386, "kcachegrind"]], "macOS": [[378, "macos"]], "macOS compilers from Homebrew": [[378, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[378, "macos-compilers-from-conda-forge"]], "make_blobs": [[385, "make-blobs"]], "make_classification": [[385, "make-classification"]], "make_regression": [[385, "make-regression"]], "min_cluster_size": [[55, "min-cluster-size"]], "min_samples": [[55, "min-samples"]], "scikit-learn Tutorials": [[1015, "scikit-learn-tutorials"]], "sklearn": [[1046, "sklearn"]], "sklearn.base": [[1039, "sklearn-base"], [1040, "sklearn-base"], [1042, "sklearn-base"], [1043, "sklearn-base"], [1044, "sklearn-base"], [1045, "sklearn-base"], [1045, "id2"], [1045, "id10"], [1046, "sklearn-base"], [1047, "sklearn-base"]], "sklearn.base.BaseEstimator": [[421, "sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[422, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[423, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[424, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[425, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[426, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[427, "sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[428, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[429, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[430, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[431, "sklearn-base-transformermixin"]], "sklearn.base.clone": [[432, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[433, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[434, "sklearn-base-is-regressor"]], "sklearn.base: Base classes and utility functions": [[406, "module-sklearn.base"]], "sklearn.calibration": [[1039, "sklearn-calibration"], [1040, "sklearn-calibration"], [1042, "sklearn-calibration"], [1043, "sklearn-calibration"], [1043, "id7"], [1044, "sklearn-calibration"], [1045, "sklearn-calibration"], [1045, "id11"], [1046, "sklearn-calibration"], [1046, "id7"], [1047, "sklearn-calibration"], [1047, "id3"], [1048, "sklearn-calibration"]], "sklearn.calibration.CalibratedClassifierCV": [[435, "sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[436, "sklearn-calibration-calibrationdisplay"]], "sklearn.calibration.calibration_curve": [[437, "sklearn-calibration-calibration-curve"]], "sklearn.calibration: Probability Calibration": [[406, "module-sklearn.calibration"]], "sklearn.cluster": [[1038, "sklearn-cluster"], [1038, "id2"], [1038, "id11"], [1038, "id24"], [1039, "sklearn-cluster"], [1039, "id8"], [1040, "sklearn-cluster"], [1040, "id5"], [1041, "sklearn-cluster"], [1041, "id2"], [1041, "id5"], [1042, "sklearn-cluster"], [1043, "sklearn-cluster"], [1043, "id1"], [1043, "id8"], [1044, "sklearn-cluster"], [1044, "id8"], [1045, "sklearn-cluster"], [1045, "id12"], [1046, "sklearn-cluster"], [1046, "id8"], [1047, "sklearn-cluster"], [1047, "id4"], [1048, "sklearn-cluster"]], "sklearn.cluster.AffinityPropagation": [[438, "sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[439, "sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[440, "sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[441, "sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[442, "sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[443, "sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[444, "sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[445, "sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[446, "sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[447, "sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[448, "sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[449, "sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[450, "sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[451, "sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[452, "sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[453, "sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[454, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[455, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.dbscan": [[418, "sklearn-cluster-dbscan"]], "sklearn.cluster.estimate_bandwidth": [[456, "sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[457, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[458, "sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[459, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[460, "sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[461, "sklearn-cluster-ward-tree"]], "sklearn.cluster: Clustering": [[406, "module-sklearn.cluster"]], "sklearn.compose": [[1038, "sklearn-compose"], [1038, "id3"], [1038, "id6"], [1038, "id12"], [1038, "id25"], [1039, "sklearn-compose"], [1039, "id9"], [1040, "sklearn-compose"], [1041, "sklearn-compose"], [1042, "sklearn-compose"], [1042, "id5"], [1043, "sklearn-compose"], [1044, "sklearn-compose"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1047, "id5"], [1048, "sklearn-compose"]], "sklearn.compose.ColumnTransformer": [[462, "sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[463, "sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[464, "sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[465, "sklearn-compose-make-column-transformer"]], "sklearn.compose: Composite Estimators": [[406, "module-sklearn.compose"]], "sklearn.config_context": [[466, "sklearn-config-context"]], "sklearn.covariance": [[1038, "sklearn-covariance"], [1038, "id26"], [1042, "sklearn-covariance"], [1043, "sklearn-covariance"], [1044, "sklearn-covariance"], [1046, "sklearn-covariance"], [1047, "sklearn-covariance"]], "sklearn.covariance.EllipticEnvelope": [[467, "sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[468, "sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[469, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[470, "sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[471, "sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[472, "sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[473, "sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[474, "sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[475, "sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[476, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[477, "sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[478, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.oas": [[420, "sklearn-covariance-oas"]], "sklearn.covariance.shrunk_covariance": [[479, "sklearn-covariance-shrunk-covariance"]], "sklearn.covariance: Covariance Estimators": [[406, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[1040, "sklearn-cross-decomposition"], [1042, "sklearn-cross-decomposition"], [1042, "id6"], [1044, "sklearn-cross-decomposition"], [1046, "sklearn-cross-decomposition"], [1048, "sklearn-cross-decomposition"]], "sklearn.cross_decomposition.CCA": [[480, "sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[481, "sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[482, "sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[483, "sklearn-cross-decomposition-plssvd"]], "sklearn.cross_decomposition: Cross decomposition": [[406, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[1038, "sklearn-datasets"], [1038, "id13"], [1038, "id27"], [1039, "sklearn-datasets"], [1039, "id10"], [1040, "sklearn-datasets"], [1041, "sklearn-datasets"], [1042, "sklearn-datasets"], [1043, "sklearn-datasets"], [1043, "id9"], [1044, "sklearn-datasets"], [1044, "id9"], [1045, "sklearn-datasets"], [1045, "id13"], [1046, "sklearn-datasets"], [1046, "id9"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"]], "sklearn.datasets.clear_data_home": [[484, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[485, "sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[486, "sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[487, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[488, "sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[489, "sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[490, "sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[491, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[492, "sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[493, "sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[494, "sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[495, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[496, "sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[497, "sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[498, "sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[499, "sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[500, "sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[501, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[502, "sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[503, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[504, "sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[505, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[506, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[507, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[508, "sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[509, "sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[510, "sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[511, "sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[512, "sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[513, "sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[514, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[515, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[516, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[517, "sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[518, "sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[519, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[520, "sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[521, "sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[522, "sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[523, "sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[524, "sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[525, "sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[526, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[527, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[528, "sklearn-datasets-make-swiss-roll"]], "sklearn.datasets: Datasets": [[406, "module-sklearn.datasets"]], "sklearn.decomposition": [[1038, "sklearn-decomposition"], [1038, "id4"], [1038, "id14"], [1038, "id28"], [1039, "sklearn-decomposition"], [1039, "id11"], [1040, "sklearn-decomposition"], [1041, "sklearn-decomposition"], [1041, "id6"], [1042, "sklearn-decomposition"], [1042, "id7"], [1043, "sklearn-decomposition"], [1043, "id10"], [1044, "sklearn-decomposition"], [1044, "id10"], [1045, "sklearn-decomposition"], [1045, "id14"], [1046, "sklearn-decomposition"], [1046, "id10"], [1047, "sklearn-decomposition"], [1048, "sklearn-decomposition"]], "sklearn.decomposition.DictionaryLearning": [[529, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[530, "sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[531, "sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[532, "sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[533, "sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[534, "sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[535, "sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[536, "sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[537, "sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[538, "sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[539, "sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[540, "sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[541, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[542, "sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[543, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[544, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.fastica": [[419, "sklearn-decomposition-fastica"]], "sklearn.decomposition.non_negative_factorization": [[545, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[546, "sklearn-decomposition-sparse-encode"]], "sklearn.decomposition: Matrix Decomposition": [[406, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[1038, "sklearn-discriminant-analysis"], [1039, "sklearn-discriminant-analysis"], [1042, "sklearn-discriminant-analysis"], [1044, "sklearn-discriminant-analysis"], [1045, "sklearn-discriminant-analysis"], [1046, "sklearn-discriminant-analysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[547, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[548, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[406, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[1038, "sklearn-dummy"], [1039, "sklearn-dummy"], [1040, "sklearn-dummy"], [1043, "sklearn-dummy"], [1044, "sklearn-dummy"], [1048, "sklearn-dummy"]], "sklearn.dummy.DummyClassifier": [[549, "sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[550, "sklearn-dummy-dummyregressor"]], "sklearn.dummy: Dummy estimators": [[406, "module-sklearn.dummy"]], "sklearn.ensemble": [[1038, "sklearn-ensemble"], [1038, "id29"], [1039, "sklearn-ensemble"], [1039, "id12"], [1040, "sklearn-ensemble"], [1041, "sklearn-ensemble"], [1041, "id7"], [1042, "sklearn-ensemble"], [1042, "id8"], [1043, "sklearn-ensemble"], [1043, "id2"], [1043, "id11"], [1044, "sklearn-ensemble"], [1045, "sklearn-ensemble"], [1045, "id3"], [1045, "id15"], [1046, "sklearn-ensemble"], [1046, "id11"], [1047, "sklearn-ensemble"], [1047, "id6"], [1048, "sklearn-ensemble"]], "sklearn.ensemble.AdaBoostClassifier": [[551, "sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[552, "sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[553, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[554, "sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[555, "sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[556, "sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[557, "sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[558, "sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[559, "sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[560, "sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[561, "sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[562, "sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[563, "sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[564, "sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[565, "sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[566, "sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[567, "sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[568, "sklearn-ensemble-votingregressor"]], "sklearn.ensemble: Ensemble Methods": [[406, "module-sklearn.ensemble"]], "sklearn.exceptions": [[1042, "sklearn-exceptions"], [1046, "sklearn-exceptions"]], "sklearn.exceptions.ConvergenceWarning": [[569, "sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[570, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[571, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[572, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[573, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[574, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[575, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[576, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.exceptions: Exceptions and warnings": [[406, "module-sklearn.exceptions"]], "sklearn.experimental.enable_halving_search_cv": [[577, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[578, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.experimental: Experimental": [[406, "module-sklearn.experimental"]], "sklearn.externals": [[1039, "sklearn-externals"]], "sklearn.feature_extraction": [[1038, "sklearn-feature-extraction"], [1038, "id15"], [1038, "id30"], [1039, "sklearn-feature-extraction"], [1040, "sklearn-feature-extraction"], [1041, "sklearn-feature-extraction"], [1041, "id8"], [1042, "sklearn-feature-extraction"], [1042, "id9"], [1043, "sklearn-feature-extraction"], [1043, "id12"], [1044, "sklearn-feature-extraction"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1047, "sklearn-feature-extraction"], [1048, "sklearn-feature-extraction"]], "sklearn.feature_extraction.DictVectorizer": [[579, "sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[580, "sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[581, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[582, "sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[583, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[584, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[585, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[586, "sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[587, "sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[588, "sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[589, "sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_extraction: Feature Extraction": [[406, "module-sklearn.feature_extraction"]], "sklearn.feature_selection": [[1038, "sklearn-feature-selection"], [1040, "sklearn-feature-selection"], [1041, "sklearn-feature-selection"], [1042, "sklearn-feature-selection"], [1043, "sklearn-feature-selection"], [1043, "id13"], [1044, "sklearn-feature-selection"], [1044, "id2"], [1044, "id11"], [1045, "sklearn-feature-selection"], [1045, "id16"], [1046, "sklearn-feature-selection"], [1046, "id12"], [1047, "sklearn-feature-selection"], [1048, "sklearn-feature-selection"]], "sklearn.feature_selection.GenericUnivariateSelect": [[590, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[591, "sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[592, "sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[593, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[594, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[595, "sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[596, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[597, "sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[598, "sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[599, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[600, "sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[601, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[602, "sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[603, "sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[604, "sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[605, "sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[606, "sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[607, "sklearn-feature-selection-r-regression"]], "sklearn.feature_selection: Feature Selection": [[406, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[1038, "sklearn-gaussian-process"], [1040, "sklearn-gaussian-process"], [1041, "sklearn-gaussian-process"], [1042, "sklearn-gaussian-process"], [1042, "id10"], [1043, "sklearn-gaussian-process"], [1044, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[608, "sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[609, "sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[610, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[611, "sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[612, "sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[613, "sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[614, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[615, "sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[616, "sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[617, "sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[618, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[619, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[620, "sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[621, "sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[622, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[623, "sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.gaussian_process: Gaussian Processes": [[406, "module-sklearn.gaussian_process"]], "sklearn.get_config": [[624, "sklearn-get-config"]], "sklearn.impute": [[1038, "sklearn-impute"], [1038, "id31"], [1039, "sklearn-impute"], [1039, "id13"], [1040, "sklearn-impute"], [1040, "id6"], [1041, "sklearn-impute"], [1042, "sklearn-impute"], [1043, "sklearn-impute"], [1044, "sklearn-impute"], [1044, "id12"], [1045, "sklearn-impute"], [1046, "sklearn-impute"], [1046, "id13"], [1047, "sklearn-impute"], [1048, "sklearn-impute"]], "sklearn.impute.IterativeImputer": [[625, "sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[626, "sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[627, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[628, "sklearn-impute-simpleimputer"]], "sklearn.impute: Impute": [[406, "module-sklearn.impute"]], "sklearn.inspection": [[1039, "sklearn-inspection"], [1039, "id3"], [1039, "id14"], [1040, "sklearn-inspection"], [1040, "id7"], [1041, "sklearn-inspection"], [1041, "id11"], [1042, "sklearn-inspection"], [1043, "sklearn-inspection"], [1044, "sklearn-inspection"], [1045, "sklearn-inspection"], [1045, "id17"], [1046, "sklearn-inspection"], [1047, "sklearn-inspection"], [1047, "id7"], [1048, "sklearn-inspection"]], "sklearn.inspection.DecisionBoundaryDisplay": [[629, "sklearn-inspection-decisionboundarydisplay"]], "sklearn.inspection.PartialDependenceDisplay": [[630, "sklearn-inspection-partialdependencedisplay"]], "sklearn.inspection.partial_dependence": [[631, "sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[632, "sklearn-inspection-permutation-importance"]], "sklearn.inspection: Inspection": [[406, "module-sklearn.inspection"]], "sklearn.isotonic": [[1038, "sklearn-isotonic"], [1039, "sklearn-isotonic"], [1040, "sklearn-isotonic"], [1042, "sklearn-isotonic"], [1044, "sklearn-isotonic"], [1045, "sklearn-isotonic"]], "sklearn.isotonic.IsotonicRegression": [[633, "sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[634, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[635, "sklearn-isotonic-isotonic-regression"]], "sklearn.isotonic: Isotonic regression": [[406, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[1040, "sklearn-kernel-approximation"], [1042, "sklearn-kernel-approximation"], [1043, "sklearn-kernel-approximation"], [1044, "sklearn-kernel-approximation"], [1045, "sklearn-kernel-approximation"], [1046, "sklearn-kernel-approximation"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[636, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[637, "sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[638, "sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[639, "sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[640, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_approximation: Kernel Approximation": [[406, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[1047, "sklearn-kernel-ridge"]], "sklearn.kernel_ridge.KernelRidge": [[641, "sklearn-kernel-ridge-kernelridge"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[406, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[1038, "sklearn-linear-model"], [1038, "id16"], [1038, "id32"], [1039, "sklearn-linear-model"], [1039, "id15"], [1040, "sklearn-linear-model"], [1041, "sklearn-linear-model"], [1041, "id9"], [1042, "sklearn-linear-model"], [1042, "id11"], [1043, "sklearn-linear-model"], [1043, "id3"], [1043, "id14"], [1044, "sklearn-linear-model"], [1044, "id13"], [1045, "sklearn-linear-model"], [1045, "id18"], [1046, "sklearn-linear-model"], [1047, "sklearn-linear-model"], [1047, "id8"], [1048, "sklearn-linear-model"]], "sklearn.linear_model.ARDRegression": [[642, "sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[643, "sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[644, "sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[645, "sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[646, "sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[647, "sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[648, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[649, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[650, "sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[651, "sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[652, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[653, "sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[654, "sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[655, "sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[656, "sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[657, "sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[658, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[659, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[660, "sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[661, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[662, "sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[663, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[664, "sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[665, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[666, "sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[667, "sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[668, "sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[669, "sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[670, "sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[671, "sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[672, "sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[673, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[674, "sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[675, "sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[676, "sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[677, "sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[678, "sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[679, "sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[680, "sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[681, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[682, "sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[683, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[684, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[685, "sklearn-linear-model-ridge-regression"]], "sklearn.linear_model: Linear Models": [[406, "module-sklearn.linear_model"]], "sklearn.manifold": [[1038, "sklearn-manifold"], [1039, "sklearn-manifold"], [1040, "sklearn-manifold"], [1041, "sklearn-manifold"], [1042, "sklearn-manifold"], [1043, "sklearn-manifold"], [1043, "id15"], [1044, "sklearn-manifold"], [1044, "id14"], [1045, "sklearn-manifold"], [1045, "id19"], [1046, "sklearn-manifold"], [1048, "sklearn-manifold"]], "sklearn.manifold.Isomap": [[686, "sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[687, "sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[688, "sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[689, "sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[690, "sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[691, "sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[692, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[693, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[694, "sklearn-manifold-trustworthiness"]], "sklearn.manifold: Manifold Learning": [[406, "module-sklearn.manifold"]], "sklearn.metrics": [[1038, "sklearn-metrics"], [1038, "id17"], [1038, "id33"], [1039, "sklearn-metrics"], [1039, "id4"], [1039, "id16"], [1040, "sklearn-metrics"], [1040, "id2"], [1040, "id8"], [1041, "sklearn-metrics"], [1041, "id10"], [1042, "sklearn-metrics"], [1042, "id2"], [1042, "id12"], [1043, "sklearn-metrics"], [1043, "id16"], [1044, "sklearn-metrics"], [1044, "id3"], [1044, "id15"], [1045, "sklearn-metrics"], [1046, "sklearn-metrics"], [1046, "id2"], [1046, "id14"], [1047, "sklearn-metrics"], [1048, "sklearn-metrics"]], "sklearn.metrics.ConfusionMatrixDisplay": [[695, "sklearn-metrics-confusionmatrixdisplay"]], "sklearn.metrics.DetCurveDisplay": [[696, "sklearn-metrics-detcurvedisplay"]], "sklearn.metrics.DistanceMetric": [[697, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[698, "sklearn-metrics-precisionrecalldisplay"]], "sklearn.metrics.PredictionErrorDisplay": [[699, "sklearn-metrics-predictionerrordisplay"]], "sklearn.metrics.RocCurveDisplay": [[700, "sklearn-metrics-roccurvedisplay"]], "sklearn.metrics.accuracy_score": [[701, "sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[702, "sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[703, "sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[704, "sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[705, "sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[706, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[707, "sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[708, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[709, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[710, "sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[711, "sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[712, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[713, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[714, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[715, "sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[716, "sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[717, "sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[718, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[719, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[720, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[721, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[722, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[723, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[724, "sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[725, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[726, "sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[727, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[728, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[729, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[730, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[731, "sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[732, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[733, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[734, "sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[735, "sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[736, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[737, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[738, "sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[739, "sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[740, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[741, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[742, "sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[743, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[744, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[745, "sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[746, "sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[747, "sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[748, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[749, "sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[750, "sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[751, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[752, "sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[753, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[754, "sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[755, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[756, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[757, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[758, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[759, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[760, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[761, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[762, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[763, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[764, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[765, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[766, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[767, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[768, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[769, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[770, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[771, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[772, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[773, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[774, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[775, "sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[776, "sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[777, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[778, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[779, "sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[780, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[781, "sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[782, "sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[783, "sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[784, "sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[785, "sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[786, "sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[787, "sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[788, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[789, "sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[790, "sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[791, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[792, "sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[793, "sklearn-metrics-zero-one-loss"]], "sklearn.metrics: Metrics": [[406, "sklearn-metrics-metrics"]], "sklearn.mixture": [[1038, "sklearn-mixture"], [1038, "id34"], [1039, "sklearn-mixture"], [1043, "sklearn-mixture"], [1044, "sklearn-mixture"], [1046, "sklearn-mixture"], [1046, "id15"], [1048, "sklearn-mixture"]], "sklearn.mixture.BayesianGaussianMixture": [[794, "sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[795, "sklearn-mixture-gaussianmixture"]], "sklearn.mixture: Gaussian Mixture Models": [[406, "module-sklearn.mixture"]], "sklearn.model_selection": [[1038, "sklearn-model-selection"], [1038, "id35"], [1039, "sklearn-model-selection"], [1040, "sklearn-model-selection"], [1040, "id9"], [1040, "id13"], [1041, "sklearn-model-selection"], [1042, "sklearn-model-selection"], [1042, "id13"], [1043, "sklearn-model-selection"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"], [1045, "id20"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1048, "sklearn-model-selection"]], "sklearn.model_selection.GridSearchCV": [[796, "sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[797, "sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[798, "sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[799, "sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[800, "sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[801, "sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[802, "sklearn-model-selection-learningcurvedisplay"]], "sklearn.model_selection.LeaveOneGroupOut": [[803, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[804, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[805, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[806, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[807, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[808, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[809, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[810, "sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[811, "sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[812, "sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[813, "sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[814, "sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[815, "sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[816, "sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[817, "sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[818, "sklearn-model-selection-validationcurvedisplay"]], "sklearn.model_selection.check_cv": [[819, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[820, "sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[821, "sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[822, "sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[823, "sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[824, "sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[825, "sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[826, "sklearn-model-selection-validation-curve"]], "sklearn.model_selection: Model Selection": [[406, "module-sklearn.model_selection"]], "sklearn.multiclass": [[1039, "sklearn-multiclass"], [1042, "sklearn-multiclass"], [1043, "sklearn-multiclass"], [1044, "sklearn-multiclass"]], "sklearn.multiclass.OneVsOneClassifier": [[827, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[828, "sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[829, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multiclass: Multiclass classification": [[406, "module-sklearn.multiclass"]], "sklearn.multioutput": [[1038, "sklearn-multioutput"], [1039, "sklearn-multioutput"], [1040, "sklearn-multioutput"], [1041, "sklearn-multioutput"], [1042, "sklearn-multioutput"], [1042, "id14"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1048, "sklearn-multioutput"]], "sklearn.multioutput.ClassifierChain": [[830, "sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[831, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[832, "sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[833, "sklearn-multioutput-regressorchain"]], "sklearn.multioutput: Multioutput regression and classification": [[406, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[1038, "sklearn-naive-bayes"], [1040, "sklearn-naive-bayes"], [1040, "id10"], [1041, "sklearn-naive-bayes"], [1042, "sklearn-naive-bayes"], [1043, "sklearn-naive-bayes"], [1045, "sklearn-naive-bayes"], [1046, "sklearn-naive-bayes"]], "sklearn.naive_bayes.BernoulliNB": [[834, "sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[835, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[836, "sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[837, "sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[838, "sklearn-naive-bayes-multinomialnb"]], "sklearn.naive_bayes: Naive Bayes": [[406, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[1038, "sklearn-neighbors"], [1038, "id7"], [1038, "id18"], [1038, "id36"], [1039, "sklearn-neighbors"], [1039, "id5"], [1039, "id17"], [1040, "sklearn-neighbors"], [1040, "id11"], [1042, "sklearn-neighbors"], [1043, "sklearn-neighbors"], [1043, "id4"], [1043, "id17"], [1044, "sklearn-neighbors"], [1045, "sklearn-neighbors"], [1046, "sklearn-neighbors"], [1046, "id16"], [1047, "sklearn-neighbors"], [1048, "sklearn-neighbors"]], "sklearn.neighbors.BallTree": [[839, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[840, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[841, "sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[842, "sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[843, "sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[844, "sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[845, "sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[846, "sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[847, "sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[848, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[849, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[850, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[851, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[852, "sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[853, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[854, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neighbors: Nearest Neighbors": [[406, "module-sklearn.neighbors"]], "sklearn.neural_network": [[1038, "sklearn-neural-network"], [1039, "sklearn-neural-network"], [1040, "sklearn-neural-network"], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1045, "id21"], [1046, "sklearn-neural-network"]], "sklearn.neural_network.BernoulliRBM": [[855, "sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[856, "sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[857, "sklearn-neural-network-mlpregressor"]], "sklearn.neural_network: Neural network models": [[406, "module-sklearn.neural_network"]], "sklearn.pipeline": [[1038, "sklearn-pipeline"], [1039, "sklearn-pipeline"], [1040, "sklearn-pipeline"], [1041, "sklearn-pipeline"], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"], [1043, "id18"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1048, "sklearn-pipeline"]], "sklearn.pipeline.FeatureUnion": [[858, "sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[859, "sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[860, "sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[861, "sklearn-pipeline-make-union"]], "sklearn.pipeline: Pipeline": [[406, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[1038, "sklearn-preprocessing"], [1038, "id19"], [1038, "id37"], [1039, "sklearn-preprocessing"], [1039, "id18"], [1040, "sklearn-preprocessing"], [1040, "id12"], [1041, "sklearn-preprocessing"], [1042, "sklearn-preprocessing"], [1042, "id15"], [1043, "sklearn-preprocessing"], [1043, "id19"], [1044, "sklearn-preprocessing"], [1044, "id4"], [1044, "id16"], [1045, "sklearn-preprocessing"], [1045, "id4"], [1045, "id22"], [1046, "sklearn-preprocessing"], [1046, "id17"], [1047, "sklearn-preprocessing"], [1047, "id9"], [1048, "sklearn-preprocessing"]], "sklearn.preprocessing.Binarizer": [[862, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[863, "sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[864, "sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[865, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[866, "sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[867, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[868, "sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[869, "sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[870, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[871, "sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[872, "sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[873, "sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[874, "sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[875, "sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[876, "sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[877, "sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[878, "sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[879, "sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[880, "sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[881, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[882, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[883, "sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[884, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[885, "sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[886, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[887, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[888, "sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[889, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[890, "sklearn-preprocessing-scale"]], "sklearn.preprocessing: Preprocessing and Normalization": [[406, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[1044, "sklearn-random-projection"]], "sklearn.random_projection.GaussianRandomProjection": [[891, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[892, "sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[893, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.random_projection: Random projection": [[406, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[1040, "sklearn-semi-supervised"], [1041, "sklearn-semi-supervised"], [1042, "sklearn-semi-supervised"], [1042, "id3"], [1042, "id16"], [1046, "sklearn-semi-supervised"]], "sklearn.semi_supervised.LabelPropagation": [[894, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[895, "sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[896, "sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[406, "module-sklearn.semi_supervised"]], "sklearn.set_config": [[897, "sklearn-set-config"]], "sklearn.show_versions": [[898, "sklearn-show-versions"]], "sklearn.svm": [[1038, "sklearn-svm"], [1038, "id38"], [1039, "sklearn-svm"], [1040, "sklearn-svm"], [1041, "sklearn-svm"], [1042, "sklearn-svm"], [1043, "sklearn-svm"], [1043, "id20"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1046, "sklearn-svm"]], "sklearn.svm.LinearSVC": [[899, "sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[900, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[901, "sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[902, "sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[903, "sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[904, "sklearn-svm-svc"]], "sklearn.svm.SVR": [[905, "sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[906, "sklearn-svm-l1-min-c"]], "sklearn.svm: Support Vector Machines": [[406, "module-sklearn.svm"]], "sklearn.tree": [[1038, "sklearn-tree"], [1039, "sklearn-tree"], [1039, "id19"], [1040, "sklearn-tree"], [1041, "sklearn-tree"], [1042, "sklearn-tree"], [1042, "id17"], [1043, "sklearn-tree"], [1043, "id21"], [1044, "sklearn-tree"], [1044, "id5"], [1044, "id17"], [1045, "sklearn-tree"], [1045, "id5"], [1045, "id23"], [1046, "sklearn-tree"], [1046, "id3"], [1046, "id18"], [1047, "sklearn-tree"], [1047, "id10"], [1048, "sklearn-tree"]], "sklearn.tree.DecisionTreeClassifier": [[907, "sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[908, "sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[909, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[910, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[911, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[912, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[913, "sklearn-tree-plot-tree"]], "sklearn.tree: Decision Trees": [[406, "module-sklearn.tree"]], "sklearn.utils": [[1038, "sklearn-utils"], [1038, "id20"], [1038, "id39"], [1039, "sklearn-utils"], [1040, "sklearn-utils"], [1040, "id14"], [1041, "sklearn-utils"], [1041, "id12"], [1042, "sklearn-utils"], [1042, "id18"], [1043, "sklearn-utils"], [1043, "id5"], [1043, "id22"], [1044, "sklearn-utils"], [1044, "id18"], [1045, "sklearn-utils"], [1045, "id6"], [1045, "id24"], [1046, "sklearn-utils"], [1047, "sklearn-utils"], [1047, "id11"], [1048, "sklearn-utils"]], "sklearn.utils.Bunch": [[914, "sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[915, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[916, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[917, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[918, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[919, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[920, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[921, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[922, "sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[923, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[924, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[925, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[926, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[927, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[928, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[929, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[930, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[931, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[932, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[933, "sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[934, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[935, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[936, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[937, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[938, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[939, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[940, "sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[941, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[942, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[943, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[944, "sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[945, "sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[946, "sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[947, "sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[948, "sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[949, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[950, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[951, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[952, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[953, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[954, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[955, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[956, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[957, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[958, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[959, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[960, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[961, "sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs": [[1039, "sklearn-utils-sparsefuncs"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[962, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[963, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[964, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[965, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[966, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[967, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[968, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[969, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[970, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[971, "sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[972, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[973, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[974, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[975, "sklearn-utils-validation-has-fit-parameter"]], "sklearn.utils: Utilities": [[406, "module-sklearn.utils"]], "sklearn: Settings and information tools": [[406, "module-sklearn"]], "solido": [[1012, "id23"]], "t-SNE: The effect of various perplexity values on the shape": [[225, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[984, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "transform and inverse_transform methods": [[1022, null]]}, "docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sg_execution_times", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multiclass/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sg_execution_times.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multiclass/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst"], "indexentries": {"1d": [[394, "term-1d", true]], "1d array": [[394, "term-1d-array", true]], "2d": [[394, "term-2d", true]], "2d array": [[394, "term-2d-array", true]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "_estimator_type": [[394, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[915, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[551, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[552, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[945, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[881, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[452, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[438, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[439, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[927, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[928, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[929, "sklearn.utils.discovery.all_functions", false]], "api": [[394, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[642, "sklearn.linear_model.ARDRegression", false]], "array-like": [[394, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[917, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[918, "sklearn.utils.assert_all_finite", false]], "attribute": [[394, "term-attribute", true]], "attributes": [[394, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[704, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[948, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[394, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[839, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[421, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[794, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[643, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[834, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[855, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[422, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[422, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[449, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[451, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[882, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.Binarizer", false]], "binary": [[394, "term-binary", true]], "birch (class in sklearn.cluster)": [[440, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[441, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[707, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[914, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[435, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[437, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[436, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[394, "term-callable", true]], "categorical feature": [[394, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[835, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[480, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[920, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[921, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[819, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[930, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[634, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[971, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[972, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[922, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[923, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[709, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[973, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[919, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[602, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[710, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[394, "term-class_weight", true]], "classes_": [[394, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[591, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[592, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[672, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[673, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[796, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[799, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[810, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[859, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[711, "sklearn.metrics.classification_report", false]], "classifier": [[394, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[830, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[424, "sklearn.base.ClassifierMixin", false]], "classifiers": [[394, "term-classifiers", true]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[423, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[484, "sklearn.datasets.clear_data_home", false]], "clone": [[394, "term-clone", true]], "clone() (in module sklearn.base)": [[432, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[394, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[453, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[454, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[394, "term-clusterer", true]], "clusterers": [[394, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[425, "sklearn.base.ClusterMixin", false]], "coef_": [[394, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[901, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[902, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[903, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[904, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[905, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[974, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[462, "sklearn.compose.ColumnTransformer", false]], "common tests": [[394, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[836, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.completeness_score", false]], "components_": [[394, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[924, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[455, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[925, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[466, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[716, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[695, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[394, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[943, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[712, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[394, "term-continuous", true]], "continuous multi-output": [[394, "term-continuous-multi-output", true]], "continuous multioutput": [[394, "term-continuous-multioutput", true]], "convergencewarning (class in sklearn.exceptions)": [[569, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[586, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[718, "sklearn.metrics.coverage_error", false]], "cross fitting": [[394, "term-0", true]], "cross validation": [[394, "term-1", true]], "cross-fitting": [[394, "term-cross-fitting", true]], "cross-validation": [[394, "term-cross-validation", true]], "cross-validation estimator": [[394, "term-cross-validation-estimator", true]], "cross-validation generator": [[394, "term-cross-validation-generator", true]], "cross-validation splitter": [[394, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[820, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[821, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[822, "sklearn.model_selection.cross_validate", false]], "cv": [[394, "term-cv", true]], "cv splitter": [[394, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.d2_absolute_error_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[394, "term-data-leakage", true]], "data type": [[394, "term-data-type", true]], "dataconversionwarning (class in sklearn.exceptions)": [[570, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning (class in sklearn.exceptions)": [[571, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[442, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[418, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.dcg_score", false]], "decision_function": [[394, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[629, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[907, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[908, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "delayed() (in module sklearn.utils.parallel)": [[954, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[394, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[933, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[426, "sklearn.base.DensityMixin", false]], "deprecated() (in module sklearn.utils)": [[926, "sklearn.utils.deprecated", false]], "deprecation": [[394, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[724, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[696, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[543, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[544, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[529, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[579, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[394, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[953, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[953, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[697, "sklearn.metrics.DistanceMetric", false]], "docstring": [[394, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[394, "term-double-underscore", true]], "double underscore notation": [[394, "term-double-underscore-notation", true]], "dtype": [[394, "term-dtype", true]], "duck typing": [[394, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[549, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[550, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[485, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[394, "term-early-stopping", true]], "efficiencywarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[644, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[645, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[467, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[394, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[475, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[468, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[679, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[456, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[394, "term-estimator", true]], "estimator instance": [[394, "term-estimator-instance", true]], "estimator tags": [[394, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[932, "sklearn.utils.estimator_html_repr", false]], "estimators": [[394, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[553, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[554, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[555, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[556, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[561, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[562, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[563, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[564, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[394, "term-evaluation-metric", true]], "evaluation metrics": [[394, "term-evaluation-metrics", true]], "examples": [[394, "term-examples", true]], "experimental": [[394, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[911, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[912, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[582, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[909, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[910, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[603, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[530, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[934, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[531, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[419, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.fbeta_score", false]], "feature": [[394, "term-feature", true]], "feature extractor": [[394, "term-feature-extractor", true]], "feature extractors": [[394, "term-feature-extractors", true]], "feature vector": [[394, "term-feature-vector", true]], "feature_importances_": [[394, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[551, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[552, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[555, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[556, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[557, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[558, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[562, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[563, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[564, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[907, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[908, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[909, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[910, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[858, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[859, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[443, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[580, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[394, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[858, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_covtype", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[394, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[394, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[443, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[425, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[429, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[394, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[431, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning (class in sklearn.exceptions)": [[573, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[394, "term-fitted", true]], "fitting": [[394, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "format() (sklearn.utils.parallel.parallel method)": [[953, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[436, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[629, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[630, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[695, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[696, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[698, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[699, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[700, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[802, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[818, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[436, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[695, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[696, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[698, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[699, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[700, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[945, "sklearn.utils.metadata_routing.MethodMapping.from_str", false]], "fromkeys() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.fromkeys", false]], "function": [[394, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[394, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[646, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[795, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[837, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[891, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[939, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[940, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[590, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[624, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[497, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[394, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[423, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[428, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[797, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[798, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[801, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[803, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[804, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[805, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[806, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[809, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[811, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[812, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[813, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[814, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[815, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[816, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[817, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[697, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[394, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[797, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[798, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[801, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[803, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[804, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[805, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[806, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[809, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[811, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[812, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[813, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[814, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[815, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[816, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[817, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[394, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[946, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[729, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[730, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[476, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[469, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[470, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[796, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[797, "sklearn.model_selection.GroupKFold", false]], "groups": [[394, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[798, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[799, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[800, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[731, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[975, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[587, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[444, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[732, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[733, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[647, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[394, "term-hyper-parameter", true]], "hyperparameter": [[394, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[394, "term-imputation", true]], "impute": [[394, "term-impute", true]], "inconsistentversionwarning (class in sklearn.exceptions)": [[574, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[962, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[532, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[394, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[942, "sklearn.utils.indexable", false]], "induction": [[394, "term-induction", true]], "inductive": [[394, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[872, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[873, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[880, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[963, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[964, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[969, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[970, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[965, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[966, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[967, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[433, "sklearn.base.is_classifier", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[949, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[434, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[561, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[686, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[635, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[633, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[625, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.jaccard_score", false]], "joblib": [[394, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[893, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[457, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[840, "sklearn.neighbors.KDTree", false]], "kernel": [[394, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[844, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[533, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[641, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[801, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[445, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[458, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[852, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[841, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[842, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[843, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[626, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[906, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[394, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[883, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[737, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[894, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[394, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[895, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[648, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[680, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[649, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[650, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[534, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[394, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[823, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[802, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[803, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[804, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[805, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[806, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[477, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[478, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[471, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[899, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[900, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[691, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[687, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[845, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_classification", false]], "make_column_selector() (in module sklearn.compose)": [[464, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[465, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[860, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[739, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[861, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[740, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[741, "sklearn.metrics.max_error", false]], "max_iter": [[394, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[884, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[688, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[742, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[743, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[744, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[459, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[968, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[446, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[394, "term-memmapping", true]], "memory": [[394, "term-memory", true]], "memory map": [[394, "term-memory-map", true]], "memory mapping": [[394, "term-memory-mapping", true]], "meta-estimator": [[394, "term-meta-estimator", true]], "meta-estimators": [[394, "term-meta-estimators", true]], "metadata": [[394, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[943, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[944, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[394, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[427, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[394, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[945, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[394, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[916, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[472, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[447, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[536, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[537, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[885, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[394, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[627, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[856, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[857, "sklearn.neural_network.MLPRegressor", false]], "module": [[406, "module-sklearn", false], [406, "module-sklearn.base", false], [406, "module-sklearn.calibration", false], [406, "module-sklearn.cluster", false], [406, "module-sklearn.compose", false], [406, "module-sklearn.covariance", false], [406, "module-sklearn.cross_decomposition", false], [406, "module-sklearn.datasets", false], [406, "module-sklearn.decomposition", false], [406, "module-sklearn.discriminant_analysis", false], [406, "module-sklearn.dummy", false], [406, "module-sklearn.ensemble", false], [406, "module-sklearn.exceptions", false], [406, "module-sklearn.experimental", false], [406, "module-sklearn.feature_extraction", false], [406, "module-sklearn.feature_extraction.image", false], [406, "module-sklearn.feature_extraction.text", false], [406, "module-sklearn.feature_selection", false], [406, "module-sklearn.gaussian_process", false], [406, "module-sklearn.gaussian_process.kernels", false], [406, "module-sklearn.impute", false], [406, "module-sklearn.inspection", false], [406, "module-sklearn.isotonic", false], [406, "module-sklearn.kernel_approximation", false], [406, "module-sklearn.kernel_ridge", false], [406, "module-sklearn.linear_model", false], [406, "module-sklearn.manifold", false], [406, "module-sklearn.metrics", false], [406, "module-sklearn.metrics.cluster", false], [406, "module-sklearn.metrics.pairwise", false], [406, "module-sklearn.mixture", false], [406, "module-sklearn.model_selection", false], [406, "module-sklearn.multiclass", false], [406, "module-sklearn.multioutput", false], [406, "module-sklearn.naive_bayes", false], [406, "module-sklearn.neighbors", false], [406, "module-sklearn.neural_network", false], [406, "module-sklearn.pipeline", false], [406, "module-sklearn.preprocessing", false], [406, "module-sklearn.random_projection", false], [406, "module-sklearn.semi_supervised", false], [406, "module-sklearn.svm", false], [406, "module-sklearn.tree", false], [406, "module-sklearn.utils", false], [406, "module-sklearn.utils.arrayfuncs", false], [406, "module-sklearn.utils.class_weight", false], [406, "module-sklearn.utils.discovery", false], [406, "module-sklearn.utils.estimator_checks", false], [406, "module-sklearn.utils.extmath", false], [406, "module-sklearn.utils.graph", false], [406, "module-sklearn.utils.metadata_routing", false], [406, "module-sklearn.utils.metaestimators", false], [406, "module-sklearn.utils.multiclass", false], [406, "module-sklearn.utils.parallel", false], [406, "module-sklearn.utils.random", false], [406, "module-sklearn.utils.sparsefuncs", false], [406, "module-sklearn.utils.sparsefuncs_fast", false], [406, "module-sklearn.utils.validation", false], [577, "module-sklearn.experimental.enable_halving_search_cv", false], [578, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[394, "term-multi-class", true]], "multi-class multi-output": [[394, "term-multi-class-multi-output", true]], "multi-label": [[394, "term-multi-label", true]], "multi-output": [[394, "term-multi-output", true]], "multi-output continuous": [[394, "term-multi-output-continuous", true]], "multi-output multi-class": [[394, "term-multi-output-multi-class", true]], "multiclass": [[394, "term-multiclass", true]], "multiclass multioutput": [[394, "term-multiclass-multioutput", true]], "multilabel": [[394, "term-multilabel", true]], "multilabel indicator matrices": [[394, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[394, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[828, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[751, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[838, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[394, "term-multioutput", true]], "multioutput continuous": [[394, "term-multioutput-continuous", true]], "multioutput multiclass": [[394, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[831, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[832, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[658, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[660, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[952, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[752, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[827, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[828, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[394, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[540, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[394, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[463, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[540, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[565, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[566, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[567, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[568, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[595, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[796, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[799, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[810, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[858, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[859, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[394, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[394, "term-n_iter_no_change", true]], "n_jobs": [[394, "term-n_jobs", true]], "n_outputs": [[394, "term-n_outputs", true]], "n_samples": [[394, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[901, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[902, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[903, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[904, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[905, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[394, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[565, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[566, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[567, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[568, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[859, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[462, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[394, "term-narrative-docs", true]], "narrative documentation": [[394, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[753, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[846, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[847, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[538, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[545, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[754, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.Normalizer", false]], "notfittederror (class in sklearn.exceptions)": [[575, "sklearn.exceptions.NotFittedError", false]], "np": [[394, "term-np", true]], "nusvc (class in sklearn.svm)": [[901, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[902, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[637, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[473, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[420, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[903, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[428, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[827, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[828, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[394, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[448, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[394, "term-out-of-core", true]], "outlier detector": [[394, "term-outlier-detector", true]], "outlier detectors": [[394, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[429, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[829, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[394, "term-outputs", true]], "pair": [[394, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[713, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[394, "term-pairwise-metric", true]], "pairwise metrics": [[394, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[775, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[776, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[777, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[778, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[953, "sklearn.utils.parallel.Parallel", false]], "parallel_backend() (in module sklearn.utils)": [[955, "sklearn.utils.parallel_backend", false]], "param": [[394, "term-param", true]], "parameter": [[394, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[807, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[394, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[808, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[931, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[394, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[631, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[394, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[630, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[581, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[644, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[645, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[650, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[651, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[660, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.PCA", false]], "pd": [[394, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[666, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[632, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[859, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[436, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[629, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[630, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[695, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[696, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[698, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[699, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[700, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[802, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[818, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[913, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[481, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[394, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[874, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[779, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[780, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[781, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[394, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[809, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[394, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[394, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[394, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[699, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[394, "term-predictor", true]], "predictors": [[394, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[953, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[901, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[904, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[901, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[904, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[947, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[668, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[782, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[853, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[783, "sklearn.metrics.rand_score", false]], "random_state": [[394, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[935, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[936, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[810, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[564, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[394, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[957, "sklearn.utils.register_parallel_backend", false]], "regressor": [[394, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[833, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[430, "sklearn.base.RegressorMixin", false]], "regressors": [[394, "term-regressors", true]], "repeatedkfold (class in sklearn.model_selection)": [[811, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[812, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[958, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[670, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[672, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[673, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[671, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[786, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[787, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[788, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[394, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[959, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[937, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[960, "sklearn.utils.safe_sqr", false]], "sample": [[394, "term-sample", true]], "sample properties": [[394, "term-sample-properties", true]], "sample property": [[394, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[394, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[956, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[394, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[394, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[394, "term-scikit-learn-contrib", true]], "score": [[394, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[424, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[426, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[430, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[394, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[394, "term-scorer", true]], "scoring": [[394, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[394, "term-semi-supervised", true]], "semi-supervised learning": [[394, "term-semi-supervised-learning", true]], "semisupervised": [[394, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[897, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[431, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[394, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[797, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[798, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[803, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[805, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[814, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[674, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[675, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[898, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[479, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[474, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[961, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[813, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[789, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[628, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[941, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[406, "module-sklearn", false]], "sklearn.base": [[406, "module-sklearn.base", false]], "sklearn.calibration": [[406, "module-sklearn.calibration", false]], "sklearn.cluster": [[406, "module-sklearn.cluster", false]], "sklearn.compose": [[406, "module-sklearn.compose", false]], "sklearn.covariance": [[406, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[406, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[406, "module-sklearn.datasets", false]], "sklearn.decomposition": [[406, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[406, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[406, "module-sklearn.dummy", false]], "sklearn.ensemble": [[406, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[406, "module-sklearn.exceptions", false]], "sklearn.experimental": [[406, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[577, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[578, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[406, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[406, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[406, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[406, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[406, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[406, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[406, "module-sklearn.impute", false]], "sklearn.inspection": [[406, "module-sklearn.inspection", false]], "sklearn.isotonic": [[406, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[406, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[406, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[406, "module-sklearn.linear_model", false]], "sklearn.manifold": [[406, "module-sklearn.manifold", false]], "sklearn.metrics": [[406, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[406, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[406, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[406, "module-sklearn.mixture", false]], "sklearn.model_selection": [[406, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[406, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[406, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[406, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[406, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[406, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[406, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[406, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[406, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[406, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[406, "module-sklearn.svm", false]], "sklearn.tree": [[406, "module-sklearn.tree", false]], "sklearn.utils": [[406, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[406, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[406, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[406, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[406, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[406, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[406, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[406, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[406, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[406, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[406, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[406, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[406, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[406, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[406, "module-sklearn.utils.validation", false]], "slep": [[394, "term-SLEP", true]], "sleps": [[394, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[692, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[854, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[394, "term-sparse-graph", true]], "sparse matrix": [[394, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[644, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[650, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[658, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[660, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[540, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[892, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[460, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[693, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[449, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[450, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[451, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[689, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.SplineTransformer", false]], "split": [[394, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[797, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[798, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[801, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[803, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[804, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[805, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[806, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[809, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[811, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[812, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[813, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[814, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[815, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[816, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[817, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[394, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[814, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[815, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[816, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[394, "term-supervised", true]], "supervised learning": [[394, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[904, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[905, "sklearn.svm.SVR", false]], "target": [[394, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[394, "term-targets", true]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[588, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[677, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[595, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[817, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.train_test_split", false]], "transduction": [[394, "term-transduction", true]], "transductive": [[394, "term-transductive", true]], "transform": [[394, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[463, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[394, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[431, "sklearn.base.TransformerMixin", false]], "transformers": [[394, "term-transformers", true]], "truncatedsvd (class in sklearn.decomposition)": [[542, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[694, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[690, "sklearn.manifold.TSNE", false]], "tweedieregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[950, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning (class in sklearn.exceptions)": [[576, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[951, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[394, "term-unlabeled", true]], "unlabeled data": [[394, "term-unlabeled-data", true]], "unsupervised": [[394, "term-unsupervised", true]], "unsupervised learning": [[394, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.v_measure_score", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[818, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[394, "term-vectorizer", true]], "vectorizers": [[394, "term-vectorizers", true]], "verbose": [[394, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[461, "sklearn.cluster.ward_tree", false]], "warm_start": [[394, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[938, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[569, "sklearn.exceptions.ConvergenceWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[570, "sklearn.exceptions.DataConversionWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[571, "sklearn.exceptions.DataDimensionalityWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[572, "sklearn.exceptions.EfficiencyWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[573, "sklearn.exceptions.FitFailedWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[574, "sklearn.exceptions.InconsistentVersionWarning.with_traceback", false]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[575, "sklearn.exceptions.NotFittedError.with_traceback", false]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[576, "sklearn.exceptions.UndefinedMetricWarning.with_traceback", false]], "x": [[394, "term-X", true]], "xt": [[394, "term-Xt", true]], "y": [[394, "term-Y", true], [394, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[793, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[406, 0, 0, "-", "sklearn"]], "sklearn": [[406, 0, 0, "-", "base"], [406, 0, 0, "-", "calibration"], [406, 0, 0, "-", "cluster"], [406, 0, 0, "-", "compose"], [466, 4, 1, "", "config_context"], [406, 0, 0, "-", "covariance"], [406, 0, 0, "-", "cross_decomposition"], [406, 0, 0, "-", "datasets"], [406, 0, 0, "-", "decomposition"], [406, 0, 0, "-", "discriminant_analysis"], [406, 0, 0, "-", "dummy"], [406, 0, 0, "-", "ensemble"], [406, 0, 0, "-", "exceptions"], [406, 0, 0, "-", "experimental"], [406, 0, 0, "-", "feature_extraction"], [406, 0, 0, "-", "feature_selection"], [406, 0, 0, "-", "gaussian_process"], [624, 4, 1, "", "get_config"], [406, 0, 0, "-", "impute"], [406, 0, 0, "-", "inspection"], [406, 0, 0, "-", "isotonic"], [406, 0, 0, "-", "kernel_approximation"], [406, 0, 0, "-", "kernel_ridge"], [406, 0, 0, "-", "linear_model"], [406, 0, 0, "-", "manifold"], [406, 0, 0, "-", "metrics"], [406, 0, 0, "-", "mixture"], [406, 0, 0, "-", "model_selection"], [406, 0, 0, "-", "multiclass"], [406, 0, 0, "-", "multioutput"], [406, 0, 0, "-", "naive_bayes"], [406, 0, 0, "-", "neighbors"], [406, 0, 0, "-", "neural_network"], [406, 0, 0, "-", "pipeline"], [406, 0, 0, "-", "preprocessing"], [406, 0, 0, "-", "random_projection"], [406, 0, 0, "-", "semi_supervised"], [897, 4, 1, "", "set_config"], [898, 4, 1, "", "show_versions"], [406, 0, 0, "-", "svm"], [406, 0, 0, "-", "tree"], [406, 0, 0, "-", "utils"]], "sklearn.base": [[421, 1, 1, "", "BaseEstimator"], [422, 1, 1, "", "BiclusterMixin"], [423, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [424, 1, 1, "", "ClassifierMixin"], [425, 1, 1, "", "ClusterMixin"], [426, 1, 1, "", "DensityMixin"], [427, 1, 1, "", "MetaEstimatorMixin"], [428, 1, 1, "", "OneToOneFeatureMixin"], [429, 1, 1, "", "OutlierMixin"], [430, 1, 1, "", "RegressorMixin"], [431, 1, 1, "", "TransformerMixin"], [432, 4, 1, "", "clone"], [433, 4, 1, "", "is_classifier"], [434, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[421, 2, 1, "", "get_metadata_routing"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[422, 3, 1, "", "biclusters_"], [422, 2, 1, "", "get_indices"], [422, 2, 1, "", "get_shape"], [422, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[423, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[424, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[425, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[426, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[428, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[429, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[430, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[431, 2, 1, "", "fit_transform"], [431, 2, 1, "", "set_output"]], "sklearn.calibration": [[435, 1, 1, "", "CalibratedClassifierCV"], [436, 1, 1, "", "CalibrationDisplay"], [437, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "get_metadata_routing"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "predict"], [435, 2, 1, "", "predict_proba"], [435, 2, 1, "", "score"], [435, 2, 1, "", "set_fit_request"], [435, 2, 1, "", "set_params"], [435, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[436, 2, 1, "", "from_estimator"], [436, 2, 1, "", "from_predictions"], [436, 2, 1, "", "plot"]], "sklearn.cluster": [[438, 1, 1, "", "AffinityPropagation"], [439, 1, 1, "", "AgglomerativeClustering"], [440, 1, 1, "", "Birch"], [441, 1, 1, "", "BisectingKMeans"], [442, 1, 1, "", "DBSCAN"], [443, 1, 1, "", "FeatureAgglomeration"], [444, 1, 1, "", "HDBSCAN"], [445, 1, 1, "", "KMeans"], [446, 1, 1, "", "MeanShift"], [447, 1, 1, "", "MiniBatchKMeans"], [448, 1, 1, "", "OPTICS"], [449, 1, 1, "", "SpectralBiclustering"], [450, 1, 1, "", "SpectralClustering"], [451, 1, 1, "", "SpectralCoclustering"], [452, 4, 1, "", "affinity_propagation"], [453, 4, 1, "", "cluster_optics_dbscan"], [454, 4, 1, "", "cluster_optics_xi"], [455, 4, 1, "", "compute_optics_graph"], [418, 4, 1, "", "dbscan"], [456, 4, 1, "", "estimate_bandwidth"], [457, 4, 1, "", "k_means"], [458, 4, 1, "", "kmeans_plusplus"], [459, 4, 1, "", "mean_shift"], [460, 4, 1, "", "spectral_clustering"], [461, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "predict"], [438, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "fit_transform"], [440, 2, 1, "", "get_feature_names_out"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "partial_fit"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "set_output"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "fit_transform"], [441, 2, 1, "", "get_feature_names_out"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "score"], [441, 2, 1, "", "set_fit_request"], [441, 2, 1, "", "set_output"], [441, 2, 1, "", "set_params"], [441, 2, 1, "", "set_score_request"], [441, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "set_fit_request"], [442, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[443, 2, 1, "", "fit"], [443, 3, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "inverse_transform"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[444, 2, 1, "", "dbscan_clustering"], [444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "score"], [445, 2, 1, "", "set_fit_request"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "set_score_request"], [445, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "partial_fit"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_partial_fit_request"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[449, 3, 1, "", "biclusters_"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "get_indices"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "get_shape"], [449, 2, 1, "", "get_submatrix"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[451, 3, 1, "", "biclusters_"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_indices"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_shape"], [451, 2, 1, "", "get_submatrix"], [451, 2, 1, "", "set_params"]], "sklearn.compose": [[462, 1, 1, "", "ColumnTransformer"], [463, 1, 1, "", "TransformedTargetRegressor"], [464, 4, 1, "", "make_column_selector"], [465, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[462, 2, 1, "", "fit"], [462, 2, 1, "", "fit_transform"], [462, 2, 1, "", "get_feature_names_out"], [462, 2, 1, "", "get_metadata_routing"], [462, 2, 1, "", "get_params"], [462, 3, 1, "", "named_transformers_"], [462, 2, 1, "", "set_output"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[463, 2, 1, "", "fit"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 3, 1, "", "n_features_in_"], [463, 2, 1, "", "predict"], [463, 2, 1, "", "score"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[467, 1, 1, "", "EllipticEnvelope"], [468, 1, 1, "", "EmpiricalCovariance"], [469, 1, 1, "", "GraphicalLasso"], [470, 1, 1, "", "GraphicalLassoCV"], [471, 1, 1, "", "LedoitWolf"], [472, 1, 1, "", "MinCovDet"], [473, 1, 1, "", "OAS"], [474, 1, 1, "", "ShrunkCovariance"], [475, 4, 1, "", "empirical_covariance"], [476, 4, 1, "", "graphical_lasso"], [477, 4, 1, "", "ledoit_wolf"], [478, 4, 1, "", "ledoit_wolf_shrinkage"], [420, 4, 1, "", "oas"], [479, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[467, 2, 1, "", "correct_covariance"], [467, 2, 1, "", "decision_function"], [467, 2, 1, "", "error_norm"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "fit_predict"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "get_precision"], [467, 2, 1, "", "mahalanobis"], [467, 2, 1, "", "predict"], [467, 2, 1, "", "reweight_covariance"], [467, 2, 1, "", "score"], [467, 2, 1, "", "score_samples"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[472, 2, 1, "", "correct_covariance"], [472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "reweight_covariance"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[480, 1, 1, "", "CCA"], [481, 1, 1, "", "PLSCanonical"], [482, 1, 1, "", "PLSRegression"], [483, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[480, 2, 1, "", "fit"], [480, 2, 1, "", "fit_transform"], [480, 2, 1, "", "get_feature_names_out"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "inverse_transform"], [480, 2, 1, "", "predict"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_output"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_predict_request"], [480, 2, 1, "", "set_score_request"], [480, 2, 1, "", "set_transform_request"], [480, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[481, 2, 1, "", "fit"], [481, 2, 1, "", "fit_transform"], [481, 2, 1, "", "get_feature_names_out"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "inverse_transform"], [481, 2, 1, "", "predict"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_output"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_predict_request"], [481, 2, 1, "", "set_score_request"], [481, 2, 1, "", "set_transform_request"], [481, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "inverse_transform"], [482, 2, 1, "", "predict"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_predict_request"], [482, 2, 1, "", "set_score_request"], [482, 2, 1, "", "set_transform_request"], [482, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "transform"]], "sklearn.datasets": [[484, 4, 1, "", "clear_data_home"], [485, 4, 1, "", "dump_svmlight_file"], [486, 4, 1, "", "fetch_20newsgroups"], [487, 4, 1, "", "fetch_20newsgroups_vectorized"], [488, 4, 1, "", "fetch_california_housing"], [489, 4, 1, "", "fetch_covtype"], [490, 4, 1, "", "fetch_kddcup99"], [491, 4, 1, "", "fetch_lfw_pairs"], [492, 4, 1, "", "fetch_lfw_people"], [493, 4, 1, "", "fetch_olivetti_faces"], [494, 4, 1, "", "fetch_openml"], [495, 4, 1, "", "fetch_rcv1"], [496, 4, 1, "", "fetch_species_distributions"], [497, 4, 1, "", "get_data_home"], [498, 4, 1, "", "load_breast_cancer"], [499, 4, 1, "", "load_diabetes"], [500, 4, 1, "", "load_digits"], [501, 4, 1, "", "load_files"], [502, 4, 1, "", "load_iris"], [503, 4, 1, "", "load_linnerud"], [504, 4, 1, "", "load_sample_image"], [505, 4, 1, "", "load_sample_images"], [506, 4, 1, "", "load_svmlight_file"], [507, 4, 1, "", "load_svmlight_files"], [508, 4, 1, "", "load_wine"], [509, 4, 1, "", "make_biclusters"], [510, 4, 1, "", "make_blobs"], [511, 4, 1, "", "make_checkerboard"], [512, 4, 1, "", "make_circles"], [513, 4, 1, "", "make_classification"], [514, 4, 1, "", "make_friedman1"], [515, 4, 1, "", "make_friedman2"], [516, 4, 1, "", "make_friedman3"], [517, 4, 1, "", "make_gaussian_quantiles"], [518, 4, 1, "", "make_hastie_10_2"], [519, 4, 1, "", "make_low_rank_matrix"], [520, 4, 1, "", "make_moons"], [521, 4, 1, "", "make_multilabel_classification"], [522, 4, 1, "", "make_regression"], [523, 4, 1, "", "make_s_curve"], [524, 4, 1, "", "make_sparse_coded_signal"], [525, 4, 1, "", "make_sparse_spd_matrix"], [526, 4, 1, "", "make_sparse_uncorrelated"], [527, 4, 1, "", "make_spd_matrix"], [528, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[529, 1, 1, "", "DictionaryLearning"], [530, 1, 1, "", "FactorAnalysis"], [531, 1, 1, "", "FastICA"], [532, 1, 1, "", "IncrementalPCA"], [533, 1, 1, "", "KernelPCA"], [534, 1, 1, "", "LatentDirichletAllocation"], [535, 1, 1, "", "MiniBatchDictionaryLearning"], [536, 1, 1, "", "MiniBatchNMF"], [537, 1, 1, "", "MiniBatchSparsePCA"], [538, 1, 1, "", "NMF"], [539, 1, 1, "", "PCA"], [540, 1, 1, "", "SparseCoder"], [541, 1, 1, "", "SparsePCA"], [542, 1, 1, "", "TruncatedSVD"], [543, 4, 1, "", "dict_learning"], [544, 4, 1, "", "dict_learning_online"], [419, 4, 1, "", "fastica"], [545, 4, 1, "", "non_negative_factorization"], [546, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_covariance"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "get_precision"], [530, 2, 1, "", "score"], [530, 2, 1, "", "score_samples"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "inverse_transform"], [531, 2, 1, "", "set_inverse_transform_request"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "set_transform_request"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_covariance"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "get_precision"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "partial_fit"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "set_partial_fit_request"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "partial_fit"], [534, 2, 1, "", "perplexity"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "partial_fit"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "partial_fit"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "set_partial_fit_request"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_covariance"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "get_precision"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "score"], [539, 2, 1, "", "score_samples"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 3, 1, "", "n_components_"], [540, 3, 1, "", "n_features_in_"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[547, 1, 1, "", "LinearDiscriminantAnalysis"], [548, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[547, 2, 1, "", "decision_function"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_log_proba"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"], [547, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[548, 2, 1, "", "decision_function"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_log_proba"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[549, 1, 1, "", "DummyClassifier"], [550, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_predict_request"], [550, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[551, 1, 1, "", "AdaBoostClassifier"], [552, 1, 1, "", "AdaBoostRegressor"], [553, 1, 1, "", "BaggingClassifier"], [554, 1, 1, "", "BaggingRegressor"], [555, 1, 1, "", "ExtraTreesClassifier"], [556, 1, 1, "", "ExtraTreesRegressor"], [557, 1, 1, "", "GradientBoostingClassifier"], [558, 1, 1, "", "GradientBoostingRegressor"], [559, 1, 1, "", "HistGradientBoostingClassifier"], [560, 1, 1, "", "HistGradientBoostingRegressor"], [561, 1, 1, "", "IsolationForest"], [562, 1, 1, "", "RandomForestClassifier"], [563, 1, 1, "", "RandomForestRegressor"], [564, 1, 1, "", "RandomTreesEmbedding"], [565, 1, 1, "", "StackingClassifier"], [566, 1, 1, "", "StackingRegressor"], [567, 1, 1, "", "VotingClassifier"], [568, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[551, 2, 1, "", "decision_function"], [551, 3, 1, "", "feature_importances_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"], [551, 2, 1, "", "staged_decision_function"], [551, 2, 1, "", "staged_predict"], [551, 2, 1, "", "staged_predict_proba"], [551, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[552, 3, 1, "", "feature_importances_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"], [552, 2, 1, "", "staged_predict"], [552, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[553, 2, 1, "", "decision_function"], [553, 3, 1, "", "estimators_samples_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[554, 3, 1, "", "estimators_samples_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[555, 2, 1, "", "apply"], [555, 2, 1, "", "decision_path"], [555, 3, 1, "", "estimators_samples_"], [555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[556, 2, 1, "", "apply"], [556, 2, 1, "", "decision_path"], [556, 3, 1, "", "estimators_samples_"], [556, 3, 1, "", "feature_importances_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[557, 2, 1, "", "apply"], [557, 2, 1, "", "decision_function"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "staged_decision_function"], [557, 2, 1, "", "staged_predict"], [557, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[558, 2, 1, "", "apply"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[559, 2, 1, "", "decision_function"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 3, 1, "", "n_iter_"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_decision_function"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 3, 1, "", "n_iter_"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[561, 2, 1, "", "decision_function"], [561, 3, 1, "", "estimators_samples_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "fit_predict"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score_samples"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[562, 2, 1, "", "apply"], [562, 2, 1, "", "decision_path"], [562, 3, 1, "", "estimators_samples_"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_log_proba"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[563, 2, 1, "", "apply"], [563, 2, 1, "", "decision_path"], [563, 3, 1, "", "estimators_samples_"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 3, 1, "", "estimators_samples_"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[565, 2, 1, "", "decision_function"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "n_features_in_"], [565, 3, 1, "", "named_estimators"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "n_features_in_"], [566, 3, 1, "", "named_estimators"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_features_in_"], [567, 3, 1, "", "named_estimators"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.exceptions": [[569, 1, 1, "", "ConvergenceWarning"], [570, 1, 1, "", "DataConversionWarning"], [571, 1, 1, "", "DataDimensionalityWarning"], [572, 1, 1, "", "EfficiencyWarning"], [573, 1, 1, "", "FitFailedWarning"], [574, 1, 1, "", "InconsistentVersionWarning"], [575, 1, 1, "", "NotFittedError"], [576, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[569, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[570, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[571, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[572, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[573, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[574, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[575, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[576, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[577, 0, 0, "-", "enable_halving_search_cv"], [578, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[579, 1, 1, "", "DictVectorizer"], [580, 1, 1, "", "FeatureHasher"], [406, 0, 0, "-", "image"], [406, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_metadata_routing"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "restrict"], [579, 2, 1, "", "set_inverse_transform_request"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_metadata_routing"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "set_transform_request"], [580, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[581, 1, 1, "", "PatchExtractor"], [582, 4, 1, "", "extract_patches_2d"], [583, 4, 1, "", "grid_to_graph"], [584, 4, 1, "", "img_to_graph"], [585, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[586, 1, 1, "", "CountVectorizer"], [587, 1, 1, "", "HashingVectorizer"], [588, 1, 1, "", "TfidfTransformer"], [589, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[586, 2, 1, "", "build_analyzer"], [586, 2, 1, "", "build_preprocessor"], [586, 2, 1, "", "build_tokenizer"], [586, 2, 1, "", "decode"], [586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_stop_words"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "set_fit_request"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "set_transform_request"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[587, 2, 1, "", "build_analyzer"], [587, 2, 1, "", "build_preprocessor"], [587, 2, 1, "", "build_tokenizer"], [587, 2, 1, "", "decode"], [587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_stop_words"], [587, 2, 1, "", "partial_fit"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "set_transform_request"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[589, 2, 1, "", "build_analyzer"], [589, 2, 1, "", "build_preprocessor"], [589, 2, 1, "", "build_tokenizer"], [589, 2, 1, "", "decode"], [589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_stop_words"], [589, 3, 1, "", "idf_"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_fit_request"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "set_transform_request"], [589, 2, 1, "", "transform"]], "sklearn.feature_selection": [[590, 1, 1, "", "GenericUnivariateSelect"], [591, 1, 1, "", "RFE"], [592, 1, 1, "", "RFECV"], [593, 1, 1, "", "SelectFdr"], [594, 1, 1, "", "SelectFpr"], [595, 1, 1, "", "SelectFromModel"], [596, 1, 1, "", "SelectFwe"], [597, 1, 1, "", "SelectKBest"], [598, 1, 1, "", "SelectPercentile"], [599, 1, 1, "", "SelectorMixin"], [600, 1, 1, "", "SequentialFeatureSelector"], [601, 1, 1, "", "VarianceThreshold"], [602, 4, 1, "", "chi2"], [603, 4, 1, "", "f_classif"], [604, 4, 1, "", "f_regression"], [605, 4, 1, "", "mutual_info_classif"], [606, 4, 1, "", "mutual_info_regression"], [607, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_support"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[591, 3, 1, "", "classes_"], [591, 2, 1, "", "decision_function"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "predict"], [591, 2, 1, "", "predict_log_proba"], [591, 2, 1, "", "predict_proba"], [591, 2, 1, "", "score"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[592, 3, 1, "", "classes_"], [592, 2, 1, "", "decision_function"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "predict"], [592, 2, 1, "", "predict_log_proba"], [592, 2, 1, "", "predict_proba"], [592, 2, 1, "", "score"], [592, 2, 1, "", "set_fit_request"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 3, 1, "", "n_features_in_"], [595, 2, 1, "", "partial_fit"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 3, 1, "", "threshold_"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[608, 1, 1, "", "GaussianProcessClassifier"], [609, 1, 1, "", "GaussianProcessRegressor"], [406, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "kernel_"], [608, 2, 1, "", "log_marginal_likelihood"], [608, 2, 1, "", "predict"], [608, 2, 1, "", "predict_proba"], [608, 2, 1, "", "score"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "log_marginal_likelihood"], [609, 2, 1, "", "predict"], [609, 2, 1, "", "sample_y"], [609, 2, 1, "", "score"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "set_predict_request"], [609, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[610, 1, 1, "", "CompoundKernel"], [611, 1, 1, "", "ConstantKernel"], [612, 1, 1, "", "DotProduct"], [613, 1, 1, "", "ExpSineSquared"], [614, 1, 1, "", "Exponentiation"], [615, 1, 1, "", "Hyperparameter"], [616, 1, 1, "", "Kernel"], [617, 1, 1, "", "Matern"], [618, 1, 1, "", "PairwiseKernel"], [619, 1, 1, "", "Product"], [620, 1, 1, "", "RBF"], [621, 1, 1, "", "RationalQuadratic"], [622, 1, 1, "", "Sum"], [623, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameter_length_scale"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[615, 2, 1, "", "__call__"], [615, 5, 1, "", "bounds"], [615, 2, 1, "", "count"], [615, 5, 1, "", "fixed"], [615, 2, 1, "", "index"], [615, 5, 1, "", "n_elements"], [615, 5, 1, "", "name"], [615, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.impute": [[625, 1, 1, "", "IterativeImputer"], [626, 1, 1, "", "KNNImputer"], [627, 1, 1, "", "MissingIndicator"], [628, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "fit_transform"], [625, 2, 1, "", "get_feature_names_out"], [625, 2, 1, "", "get_metadata_routing"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "set_output"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "fit_transform"], [626, 2, 1, "", "get_feature_names_out"], [626, 2, 1, "", "get_metadata_routing"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "set_output"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "inverse_transform"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.inspection": [[629, 1, 1, "", "DecisionBoundaryDisplay"], [630, 1, 1, "", "PartialDependenceDisplay"], [631, 4, 1, "", "partial_dependence"], [632, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[629, 2, 1, "", "from_estimator"], [629, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[630, 2, 1, "", "from_estimator"], [630, 2, 1, "", "plot"]], "sklearn.isotonic": [[633, 1, 1, "", "IsotonicRegression"], [634, 4, 1, "", "check_increasing"], [635, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_fit_request"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "set_predict_request"], [633, 2, 1, "", "set_score_request"], [633, 2, 1, "", "set_transform_request"], [633, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[636, 1, 1, "", "AdditiveChi2Sampler"], [637, 1, 1, "", "Nystroem"], [638, 1, 1, "", "PolynomialCountSketch"], [639, 1, 1, "", "RBFSampler"], [640, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "fit_transform"], [637, 2, 1, "", "get_feature_names_out"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "set_output"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[641, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[642, 1, 1, "", "ARDRegression"], [643, 1, 1, "", "BayesianRidge"], [644, 1, 1, "", "ElasticNet"], [645, 1, 1, "", "ElasticNetCV"], [646, 1, 1, "", "GammaRegressor"], [647, 1, 1, "", "HuberRegressor"], [648, 1, 1, "", "Lars"], [649, 1, 1, "", "LarsCV"], [650, 1, 1, "", "Lasso"], [651, 1, 1, "", "LassoCV"], [652, 1, 1, "", "LassoLars"], [653, 1, 1, "", "LassoLarsCV"], [654, 1, 1, "", "LassoLarsIC"], [655, 1, 1, "", "LinearRegression"], [656, 1, 1, "", "LogisticRegression"], [657, 1, 1, "", "LogisticRegressionCV"], [658, 1, 1, "", "MultiTaskElasticNet"], [659, 1, 1, "", "MultiTaskElasticNetCV"], [660, 1, 1, "", "MultiTaskLasso"], [661, 1, 1, "", "MultiTaskLassoCV"], [662, 1, 1, "", "OrthogonalMatchingPursuit"], [663, 1, 1, "", "OrthogonalMatchingPursuitCV"], [664, 1, 1, "", "PassiveAggressiveClassifier"], [665, 1, 1, "", "PassiveAggressiveRegressor"], [666, 1, 1, "", "Perceptron"], [667, 1, 1, "", "PoissonRegressor"], [668, 1, 1, "", "QuantileRegressor"], [669, 1, 1, "", "RANSACRegressor"], [670, 1, 1, "", "Ridge"], [671, 1, 1, "", "RidgeCV"], [672, 1, 1, "", "RidgeClassifier"], [673, 1, 1, "", "RidgeClassifierCV"], [674, 1, 1, "", "SGDClassifier"], [675, 1, 1, "", "SGDOneClassSVM"], [676, 1, 1, "", "SGDRegressor"], [677, 1, 1, "", "TheilSenRegressor"], [678, 1, 1, "", "TweedieRegressor"], [679, 4, 1, "", "enet_path"], [680, 4, 1, "", "lars_path"], [681, 4, 1, "", "lars_path_gram"], [682, 4, 1, "", "lasso_path"], [683, 4, 1, "", "orthogonal_mp"], [684, 4, 1, "", "orthogonal_mp_gram"], [685, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_predict_request"], [642, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_predict_request"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "path"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"], [644, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "path"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "path"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"], [650, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[656, 2, 1, "", "decision_function"], [656, 2, 1, "", "densify"], [656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "predict_log_proba"], [656, 2, 1, "", "predict_proba"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"], [656, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[657, 2, 1, "", "decision_function"], [657, 2, 1, "", "densify"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "predict_log_proba"], [657, 2, 1, "", "predict_proba"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"], [657, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "path"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "path"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"], [660, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[664, 2, 1, "", "decision_function"], [664, 2, 1, "", "densify"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "partial_fit"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_partial_fit_request"], [664, 2, 1, "", "set_score_request"], [664, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[665, 2, 1, "", "densify"], [665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "partial_fit"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_partial_fit_request"], [665, 2, 1, "", "set_score_request"], [665, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "partial_fit"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_partial_fit_request"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[672, 3, 1, "", "classes_"], [672, 2, 1, "", "decision_function"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[673, 3, 1, "", "classes_"], [673, 2, 1, "", "decision_function"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[674, 2, 1, "", "decision_function"], [674, 2, 1, "", "densify"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "partial_fit"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "predict_log_proba"], [674, 2, 1, "", "predict_proba"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_partial_fit_request"], [674, 2, 1, "", "set_score_request"], [674, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[675, 2, 1, "", "decision_function"], [675, 2, 1, "", "densify"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "fit_predict"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "partial_fit"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score_samples"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_partial_fit_request"], [675, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "set_score_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[686, 1, 1, "", "Isomap"], [687, 1, 1, "", "LocallyLinearEmbedding"], [688, 1, 1, "", "MDS"], [689, 1, 1, "", "SpectralEmbedding"], [690, 1, 1, "", "TSNE"], [691, 4, 1, "", "locally_linear_embedding"], [692, 4, 1, "", "smacof"], [693, 4, 1, "", "spectral_embedding"], [694, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[686, 2, 1, "", "fit"], [686, 2, 1, "", "fit_transform"], [686, 2, 1, "", "get_feature_names_out"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "reconstruction_error"], [686, 2, 1, "", "set_output"], [686, 2, 1, "", "set_params"], [686, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[687, 2, 1, "", "fit"], [687, 2, 1, "", "fit_transform"], [687, 2, 1, "", "get_feature_names_out"], [687, 2, 1, "", "get_metadata_routing"], [687, 2, 1, "", "get_params"], [687, 2, 1, "", "set_output"], [687, 2, 1, "", "set_params"], [687, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "set_fit_request"], [688, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_feature_names_out"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_output"], [690, 2, 1, "", "set_params"]], "sklearn.metrics": [[695, 1, 1, "", "ConfusionMatrixDisplay"], [696, 1, 1, "", "DetCurveDisplay"], [697, 1, 1, "", "DistanceMetric"], [698, 1, 1, "", "PrecisionRecallDisplay"], [699, 1, 1, "", "PredictionErrorDisplay"], [700, 1, 1, "", "RocCurveDisplay"], [701, 4, 1, "", "accuracy_score"], [702, 4, 1, "", "adjusted_mutual_info_score"], [703, 4, 1, "", "adjusted_rand_score"], [704, 4, 1, "", "auc"], [705, 4, 1, "", "average_precision_score"], [706, 4, 1, "", "balanced_accuracy_score"], [707, 4, 1, "", "brier_score_loss"], [708, 4, 1, "", "calinski_harabasz_score"], [709, 4, 1, "", "check_scoring"], [710, 4, 1, "", "class_likelihood_ratios"], [711, 4, 1, "", "classification_report"], [406, 0, 0, "-", "cluster"], [714, 4, 1, "", "cohen_kappa_score"], [715, 4, 1, "", "completeness_score"], [716, 4, 1, "", "confusion_matrix"], [717, 4, 1, "", "consensus_score"], [718, 4, 1, "", "coverage_error"], [719, 4, 1, "", "d2_absolute_error_score"], [720, 4, 1, "", "d2_pinball_score"], [721, 4, 1, "", "d2_tweedie_score"], [722, 4, 1, "", "davies_bouldin_score"], [723, 4, 1, "", "dcg_score"], [724, 4, 1, "", "det_curve"], [725, 4, 1, "", "explained_variance_score"], [726, 4, 1, "", "f1_score"], [727, 4, 1, "", "fbeta_score"], [728, 4, 1, "", "fowlkes_mallows_score"], [729, 4, 1, "", "get_scorer"], [730, 4, 1, "", "get_scorer_names"], [731, 4, 1, "", "hamming_loss"], [732, 4, 1, "", "hinge_loss"], [733, 4, 1, "", "homogeneity_completeness_v_measure"], [734, 4, 1, "", "homogeneity_score"], [735, 4, 1, "", "jaccard_score"], [736, 4, 1, "", "label_ranking_average_precision_score"], [737, 4, 1, "", "label_ranking_loss"], [738, 4, 1, "", "log_loss"], [739, 4, 1, "", "make_scorer"], [740, 4, 1, "", "matthews_corrcoef"], [741, 4, 1, "", "max_error"], [742, 4, 1, "", "mean_absolute_error"], [743, 4, 1, "", "mean_absolute_percentage_error"], [744, 4, 1, "", "mean_gamma_deviance"], [745, 4, 1, "", "mean_pinball_loss"], [746, 4, 1, "", "mean_poisson_deviance"], [747, 4, 1, "", "mean_squared_error"], [748, 4, 1, "", "mean_squared_log_error"], [749, 4, 1, "", "mean_tweedie_deviance"], [750, 4, 1, "", "median_absolute_error"], [751, 4, 1, "", "multilabel_confusion_matrix"], [752, 4, 1, "", "mutual_info_score"], [753, 4, 1, "", "ndcg_score"], [754, 4, 1, "", "normalized_mutual_info_score"], [406, 0, 0, "-", "pairwise"], [775, 4, 1, "", "pairwise_distances"], [776, 4, 1, "", "pairwise_distances_argmin"], [777, 4, 1, "", "pairwise_distances_argmin_min"], [778, 4, 1, "", "pairwise_distances_chunked"], [779, 4, 1, "", "precision_recall_curve"], [780, 4, 1, "", "precision_recall_fscore_support"], [781, 4, 1, "", "precision_score"], [782, 4, 1, "", "r2_score"], [783, 4, 1, "", "rand_score"], [784, 4, 1, "", "recall_score"], [785, 4, 1, "", "roc_auc_score"], [786, 4, 1, "", "roc_curve"], [787, 4, 1, "", "root_mean_squared_error"], [788, 4, 1, "", "root_mean_squared_log_error"], [789, 4, 1, "", "silhouette_samples"], [790, 4, 1, "", "silhouette_score"], [791, 4, 1, "", "top_k_accuracy_score"], [792, 4, 1, "", "v_measure_score"], [793, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[695, 2, 1, "", "from_estimator"], [695, 2, 1, "", "from_predictions"], [695, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[696, 2, 1, "", "from_estimator"], [696, 2, 1, "", "from_predictions"], [696, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[697, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[699, 2, 1, "", "from_estimator"], [699, 2, 1, "", "from_predictions"], [699, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[712, 4, 1, "", "contingency_matrix"], [713, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[755, 4, 1, "", "additive_chi2_kernel"], [756, 4, 1, "", "chi2_kernel"], [757, 4, 1, "", "cosine_distances"], [758, 4, 1, "", "cosine_similarity"], [759, 4, 1, "", "distance_metrics"], [760, 4, 1, "", "euclidean_distances"], [761, 4, 1, "", "haversine_distances"], [762, 4, 1, "", "kernel_metrics"], [763, 4, 1, "", "laplacian_kernel"], [764, 4, 1, "", "linear_kernel"], [765, 4, 1, "", "manhattan_distances"], [766, 4, 1, "", "nan_euclidean_distances"], [767, 4, 1, "", "paired_cosine_distances"], [768, 4, 1, "", "paired_distances"], [769, 4, 1, "", "paired_euclidean_distances"], [770, 4, 1, "", "paired_manhattan_distances"], [771, 4, 1, "", "pairwise_kernels"], [772, 4, 1, "", "polynomial_kernel"], [773, 4, 1, "", "rbf_kernel"], [774, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[794, 1, 1, "", "BayesianGaussianMixture"], [795, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[794, 2, 1, "", "fit"], [794, 2, 1, "", "fit_predict"], [794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_params"], [794, 2, 1, "", "predict"], [794, 2, 1, "", "predict_proba"], [794, 2, 1, "", "sample"], [794, 2, 1, "", "score"], [794, 2, 1, "", "score_samples"], [794, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[795, 2, 1, "", "aic"], [795, 2, 1, "", "bic"], [795, 2, 1, "", "fit"], [795, 2, 1, "", "fit_predict"], [795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_params"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "predict_proba"], [795, 2, 1, "", "sample"], [795, 2, 1, "", "score"], [795, 2, 1, "", "score_samples"], [795, 2, 1, "", "set_params"]], "sklearn.model_selection": [[796, 1, 1, "", "GridSearchCV"], [797, 1, 1, "", "GroupKFold"], [798, 1, 1, "", "GroupShuffleSplit"], [799, 1, 1, "", "HalvingGridSearchCV"], [800, 1, 1, "", "HalvingRandomSearchCV"], [801, 1, 1, "", "KFold"], [802, 1, 1, "", "LearningCurveDisplay"], [803, 1, 1, "", "LeaveOneGroupOut"], [804, 1, 1, "", "LeaveOneOut"], [805, 1, 1, "", "LeavePGroupsOut"], [806, 1, 1, "", "LeavePOut"], [807, 1, 1, "", "ParameterGrid"], [808, 1, 1, "", "ParameterSampler"], [809, 1, 1, "", "PredefinedSplit"], [810, 1, 1, "", "RandomizedSearchCV"], [811, 1, 1, "", "RepeatedKFold"], [812, 1, 1, "", "RepeatedStratifiedKFold"], [813, 1, 1, "", "ShuffleSplit"], [814, 1, 1, "", "StratifiedGroupKFold"], [815, 1, 1, "", "StratifiedKFold"], [816, 1, 1, "", "StratifiedShuffleSplit"], [817, 1, 1, "", "TimeSeriesSplit"], [818, 1, 1, "", "ValidationCurveDisplay"], [819, 4, 1, "", "check_cv"], [820, 4, 1, "", "cross_val_predict"], [821, 4, 1, "", "cross_val_score"], [822, 4, 1, "", "cross_validate"], [823, 4, 1, "", "learning_curve"], [824, 4, 1, "", "permutation_test_score"], [825, 4, 1, "", "train_test_split"], [826, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[796, 3, 1, "", "classes_"], [796, 2, 1, "", "decision_function"], [796, 2, 1, "", "fit"], [796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "inverse_transform"], [796, 3, 1, "", "n_features_in_"], [796, 2, 1, "", "predict"], [796, 2, 1, "", "predict_log_proba"], [796, 2, 1, "", "predict_proba"], [796, 2, 1, "", "score"], [796, 2, 1, "", "score_samples"], [796, 2, 1, "", "set_params"], [796, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "set_split_request"], [797, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "set_split_request"], [798, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[799, 3, 1, "", "classes_"], [799, 2, 1, "", "decision_function"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "inverse_transform"], [799, 3, 1, "", "n_features_in_"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_log_proba"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "score"], [799, 2, 1, "", "score_samples"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[800, 3, 1, "", "classes_"], [800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "inverse_transform"], [800, 3, 1, "", "n_features_in_"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "score_samples"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[802, 2, 1, "", "from_estimator"], [802, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "set_split_request"], [803, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[810, 3, 1, "", "classes_"], [810, 2, 1, "", "decision_function"], [810, 2, 1, "", "fit"], [810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "inverse_transform"], [810, 3, 1, "", "n_features_in_"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_log_proba"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "score_samples"], [810, 2, 1, "", "set_params"], [810, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "set_split_request"], [814, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[818, 2, 1, "", "from_estimator"], [818, 2, 1, "", "plot"]], "sklearn.multiclass": [[827, 1, 1, "", "OneVsOneClassifier"], [828, 1, 1, "", "OneVsRestClassifier"], [829, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[827, 2, 1, "", "decision_function"], [827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 3, 1, "", "n_classes_"], [827, 2, 1, "", "partial_fit"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_partial_fit_request"], [827, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[828, 2, 1, "", "decision_function"], [828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 3, 1, "", "multilabel_"], [828, 3, 1, "", "n_classes_"], [828, 2, 1, "", "partial_fit"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "predict_proba"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_partial_fit_request"], [828, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[830, 1, 1, "", "ClassifierChain"], [831, 1, 1, "", "MultiOutputClassifier"], [832, 1, 1, "", "MultiOutputRegressor"], [833, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[830, 2, 1, "", "decision_function"], [830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_log_proba"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "partial_fit"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "predict_proba"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_fit_request"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_fit_request"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_partial_fit_request"], [832, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[834, 1, 1, "", "BernoulliNB"], [835, 1, 1, "", "CategoricalNB"], [836, 1, 1, "", "ComplementNB"], [837, 1, 1, "", "GaussianNB"], [838, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "predict_joint_log_proba"], [834, 2, 1, "", "predict_log_proba"], [834, 2, 1, "", "predict_proba"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_fit_request"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_partial_fit_request"], [834, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_joint_log_proba"], [835, 2, 1, "", "predict_log_proba"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_fit_request"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_partial_fit_request"], [835, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_joint_log_proba"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_joint_log_proba"], [837, 2, 1, "", "predict_log_proba"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_joint_log_proba"], [838, 2, 1, "", "predict_log_proba"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_fit_request"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"], [838, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[839, 1, 1, "", "BallTree"], [840, 1, 1, "", "KDTree"], [841, 1, 1, "", "KNeighborsClassifier"], [842, 1, 1, "", "KNeighborsRegressor"], [843, 1, 1, "", "KNeighborsTransformer"], [844, 1, 1, "", "KernelDensity"], [845, 1, 1, "", "LocalOutlierFactor"], [846, 1, 1, "", "NearestCentroid"], [847, 1, 1, "", "NearestNeighbors"], [848, 1, 1, "", "NeighborhoodComponentsAnalysis"], [849, 1, 1, "", "RadiusNeighborsClassifier"], [850, 1, 1, "", "RadiusNeighborsRegressor"], [851, 1, 1, "", "RadiusNeighborsTransformer"], [852, 4, 1, "", "kneighbors_graph"], [853, 4, 1, "", "radius_neighbors_graph"], [854, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[839, 2, 1, "", "get_arrays"], [839, 2, 1, "", "get_n_calls"], [839, 2, 1, "", "get_tree_stats"], [839, 2, 1, "", "kernel_density"], [839, 2, 1, "", "query"], [839, 2, 1, "", "query_radius"], [839, 2, 1, "", "reset_n_calls"], [839, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[840, 2, 1, "", "get_arrays"], [840, 2, 1, "", "get_n_calls"], [840, 2, 1, "", "get_tree_stats"], [840, 2, 1, "", "kernel_density"], [840, 2, 1, "", "query"], [840, 2, 1, "", "query_radius"], [840, 2, 1, "", "reset_n_calls"], [840, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "kneighbors"], [841, 2, 1, "", "kneighbors_graph"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "kneighbors"], [842, 2, 1, "", "kneighbors_graph"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "kneighbors"], [843, 2, 1, "", "kneighbors_graph"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "sample"], [844, 2, 1, "", "score"], [844, 2, 1, "", "score_samples"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[845, 2, 1, "", "decision_function"], [845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_predict"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "kneighbors"], [845, 2, 1, "", "kneighbors_graph"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "score_samples"], [845, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "kneighbors"], [847, 2, 1, "", "kneighbors_graph"], [847, 2, 1, "", "radius_neighbors"], [847, 2, 1, "", "radius_neighbors_graph"], [847, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "radius_neighbors"], [849, 2, 1, "", "radius_neighbors_graph"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "radius_neighbors"], [850, 2, 1, "", "radius_neighbors_graph"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "radius_neighbors"], [851, 2, 1, "", "radius_neighbors_graph"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.neural_network": [[855, 1, 1, "", "BernoulliRBM"], [856, 1, 1, "", "MLPClassifier"], [857, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "gibbs"], [855, 2, 1, "", "partial_fit"], [855, 2, 1, "", "score_samples"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "partial_fit"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "predict_log_proba"], [856, 2, 1, "", "predict_proba"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_partial_fit_request"], [856, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "partial_fit"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[858, 1, 1, "", "FeatureUnion"], [859, 1, 1, "", "Pipeline"], [860, 4, 1, "", "make_pipeline"], [861, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[858, 3, 1, "", "feature_names_in_"], [858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 3, 1, "", "n_features_in_"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[859, 3, 1, "", "classes_"], [859, 2, 1, "", "decision_function"], [859, 3, 1, "", "feature_names_in_"], [859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_predict"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 3, 1, "", "n_features_in_"], [859, 3, 1, "", "named_steps"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "predict_log_proba"], [859, 2, 1, "", "predict_proba"], [859, 2, 1, "", "score"], [859, 2, 1, "", "score_samples"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "set_score_request"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing": [[862, 1, 1, "", "Binarizer"], [863, 1, 1, "", "FunctionTransformer"], [864, 1, 1, "", "KBinsDiscretizer"], [865, 1, 1, "", "KernelCenterer"], [866, 1, 1, "", "LabelBinarizer"], [867, 1, 1, "", "LabelEncoder"], [868, 1, 1, "", "MaxAbsScaler"], [869, 1, 1, "", "MinMaxScaler"], [870, 1, 1, "", "MultiLabelBinarizer"], [871, 1, 1, "", "Normalizer"], [872, 1, 1, "", "OneHotEncoder"], [873, 1, 1, "", "OrdinalEncoder"], [874, 1, 1, "", "PolynomialFeatures"], [875, 1, 1, "", "PowerTransformer"], [876, 1, 1, "", "QuantileTransformer"], [877, 1, 1, "", "RobustScaler"], [878, 1, 1, "", "SplineTransformer"], [879, 1, 1, "", "StandardScaler"], [880, 1, 1, "", "TargetEncoder"], [881, 4, 1, "", "add_dummy_feature"], [882, 4, 1, "", "binarize"], [883, 4, 1, "", "label_binarize"], [884, 4, 1, "", "maxabs_scale"], [885, 4, 1, "", "minmax_scale"], [886, 4, 1, "", "normalize"], [887, 4, 1, "", "power_transform"], [888, 4, 1, "", "quantile_transform"], [889, 4, 1, "", "robust_scale"], [890, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_transform_request"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "inverse_transform"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "set_fit_request"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "set_fit_request"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_transform_request"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "set_inverse_transform_request"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "partial_fit"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "partial_fit"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_transform_request"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 3, 1, "", "infrequent_categories_"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 3, 1, "", "infrequent_categories_"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 3, 1, "", "powers_"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "set_fit_request"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "partial_fit"], [879, 2, 1, "", "set_fit_request"], [879, 2, 1, "", "set_inverse_transform_request"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "set_partial_fit_request"], [879, 2, 1, "", "set_transform_request"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "infrequent_categories_"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.random_projection": [[891, 1, 1, "", "GaussianRandomProjection"], [892, 1, 1, "", "SparseRandomProjection"], [893, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[891, 2, 1, "", "fit"], [891, 2, 1, "", "fit_transform"], [891, 2, 1, "", "get_feature_names_out"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "inverse_transform"], [891, 2, 1, "", "set_output"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[892, 2, 1, "", "fit"], [892, 2, 1, "", "fit_transform"], [892, 2, 1, "", "get_feature_names_out"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "inverse_transform"], [892, 2, 1, "", "set_output"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[894, 1, 1, "", "LabelPropagation"], [895, 1, 1, "", "LabelSpreading"], [896, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[894, 2, 1, "", "fit"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "predict_proba"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_params"], [894, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[895, 2, 1, "", "fit"], [895, 2, 1, "", "get_metadata_routing"], [895, 2, 1, "", "get_params"], [895, 2, 1, "", "predict"], [895, 2, 1, "", "predict_proba"], [895, 2, 1, "", "score"], [895, 2, 1, "", "set_params"], [895, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[896, 2, 1, "", "decision_function"], [896, 2, 1, "", "fit"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 2, 1, "", "predict"], [896, 2, 1, "", "predict_log_proba"], [896, 2, 1, "", "predict_proba"], [896, 2, 1, "", "score"], [896, 2, 1, "", "set_params"]], "sklearn.svm": [[899, 1, 1, "", "LinearSVC"], [900, 1, 1, "", "LinearSVR"], [901, 1, 1, "", "NuSVC"], [902, 1, 1, "", "NuSVR"], [903, 1, 1, "", "OneClassSVM"], [904, 1, 1, "", "SVC"], [905, 1, 1, "", "SVR"], [906, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[899, 2, 1, "", "decision_function"], [899, 2, 1, "", "densify"], [899, 2, 1, "", "fit"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_fit_request"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_score_request"], [899, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_fit_request"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[901, 3, 1, "", "coef_"], [901, 2, 1, "", "decision_function"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 3, 1, "", "n_support_"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_log_proba"], [901, 2, 1, "", "predict_proba"], [901, 3, 1, "", "probA_"], [901, 3, 1, "", "probB_"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[902, 3, 1, "", "coef_"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 3, 1, "", "n_support_"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_fit_request"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[903, 3, 1, "", "coef_"], [903, 2, 1, "", "decision_function"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "fit_predict"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 3, 1, "", "n_support_"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "score_samples"], [903, 2, 1, "", "set_fit_request"], [903, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[904, 3, 1, "", "coef_"], [904, 2, 1, "", "decision_function"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 3, 1, "", "n_support_"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "predict_log_proba"], [904, 2, 1, "", "predict_proba"], [904, 3, 1, "", "probA_"], [904, 3, 1, "", "probB_"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[905, 3, 1, "", "coef_"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 3, 1, "", "n_support_"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"]], "sklearn.tree": [[907, 1, 1, "", "DecisionTreeClassifier"], [908, 1, 1, "", "DecisionTreeRegressor"], [909, 1, 1, "", "ExtraTreeClassifier"], [910, 1, 1, "", "ExtraTreeRegressor"], [911, 4, 1, "", "export_graphviz"], [912, 4, 1, "", "export_text"], [913, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[907, 2, 1, "", "apply"], [907, 2, 1, "", "cost_complexity_pruning_path"], [907, 2, 1, "", "decision_path"], [907, 3, 1, "", "feature_importances_"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_depth"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_n_leaves"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "predict_log_proba"], [907, 2, 1, "", "predict_proba"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_predict_proba_request"], [907, 2, 1, "", "set_predict_request"], [907, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[908, 2, 1, "", "apply"], [908, 2, 1, "", "cost_complexity_pruning_path"], [908, 2, 1, "", "decision_path"], [908, 3, 1, "", "feature_importances_"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_depth"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_n_leaves"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_predict_request"], [908, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[909, 2, 1, "", "apply"], [909, 2, 1, "", "cost_complexity_pruning_path"], [909, 2, 1, "", "decision_path"], [909, 3, 1, "", "feature_importances_"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_depth"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_n_leaves"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_predict_proba_request"], [909, 2, 1, "", "set_predict_request"], [909, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[910, 2, 1, "", "apply"], [910, 2, 1, "", "cost_complexity_pruning_path"], [910, 2, 1, "", "decision_path"], [910, 3, 1, "", "feature_importances_"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_depth"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_n_leaves"], [910, 2, 1, "", "get_params"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_predict_request"], [910, 2, 1, "", "set_score_request"]], "sklearn.utils": [[914, 1, 1, "", "Bunch"], [915, 4, 1, "", "_safe_indexing"], [406, 0, 0, "-", "arrayfuncs"], [917, 4, 1, "", "as_float_array"], [918, 4, 1, "", "assert_all_finite"], [919, 4, 1, "", "check_X_y"], [920, 4, 1, "", "check_array"], [921, 4, 1, "", "check_consistent_length"], [922, 4, 1, "", "check_random_state"], [923, 4, 1, "", "check_scalar"], [406, 0, 0, "-", "class_weight"], [926, 4, 1, "", "deprecated"], [406, 0, 0, "-", "discovery"], [406, 0, 0, "-", "estimator_checks"], [932, 4, 1, "", "estimator_html_repr"], [406, 0, 0, "-", "extmath"], [939, 4, 1, "", "gen_batches"], [940, 4, 1, "", "gen_even_slices"], [406, 0, 0, "-", "graph"], [942, 4, 1, "", "indexable"], [406, 0, 0, "-", "metadata_routing"], [406, 0, 0, "-", "metaestimators"], [406, 0, 0, "-", "multiclass"], [952, 4, 1, "", "murmurhash3_32"], [406, 0, 0, "-", "parallel"], [955, 4, 1, "", "parallel_backend"], [406, 0, 0, "-", "random"], [957, 4, 1, "", "register_parallel_backend"], [958, 4, 1, "", "resample"], [959, 4, 1, "", "safe_mask"], [960, 4, 1, "", "safe_sqr"], [961, 4, 1, "", "shuffle"], [406, 0, 0, "-", "sparsefuncs"], [406, 0, 0, "-", "sparsefuncs_fast"], [406, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[914, 2, 1, "", "clear"], [914, 2, 1, "", "copy"], [914, 2, 1, "", "fromkeys"], [914, 2, 1, "", "get"], [914, 2, 1, "", "items"], [914, 2, 1, "", "keys"], [914, 2, 1, "", "pop"], [914, 2, 1, "", "popitem"], [914, 2, 1, "", "setdefault"], [914, 2, 1, "", "update"], [914, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[916, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[924, 4, 1, "", "compute_class_weight"], [925, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[927, 4, 1, "", "all_displays"], [928, 4, 1, "", "all_estimators"], [929, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[930, 4, 1, "", "check_estimator"], [931, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[933, 4, 1, "", "density"], [934, 4, 1, "", "fast_logdet"], [935, 4, 1, "", "randomized_range_finder"], [936, 4, 1, "", "randomized_svd"], [937, 4, 1, "", "safe_sparse_dot"], [938, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[941, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[943, 1, 1, "", "MetadataRequest"], [944, 1, 1, "", "MetadataRouter"], [945, 1, 1, "", "MethodMapping"], [946, 4, 1, "", "get_routing_for_object"], [947, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[943, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[944, 2, 1, "", "add"], [944, 2, 1, "", "add_self_request"], [944, 2, 1, "", "consumes"], [944, 2, 1, "", "route_params"], [944, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[945, 2, 1, "", "add"], [945, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[948, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[949, 4, 1, "", "is_multilabel"], [950, 4, 1, "", "type_of_target"], [951, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[953, 1, 1, "", "Parallel"], [954, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[953, 2, 1, "", "dispatch_next"], [953, 2, 1, "", "dispatch_one_batch"], [953, 2, 1, "", "format"], [953, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[956, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[962, 4, 1, "", "incr_mean_variance_axis"], [963, 4, 1, "", "inplace_column_scale"], [964, 4, 1, "", "inplace_csr_column_scale"], [965, 4, 1, "", "inplace_row_scale"], [966, 4, 1, "", "inplace_swap_column"], [967, 4, 1, "", "inplace_swap_row"], [968, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[969, 4, 1, "", "inplace_csr_row_normalize_l1"], [970, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[971, 4, 1, "", "check_is_fitted"], [972, 4, 1, "", "check_memory"], [973, 4, 1, "", "check_symmetric"], [974, 4, 1, "", "column_or_1d"], [975, 4, 1, "", "has_fit_parameter"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "terms": {"": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 20, 24, 27, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 78, 79, 82, 85, 90, 91, 92, 95, 96, 97, 100, 103, 104, 105, 109, 111, 113, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 140, 143, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 166, 169, 170, 172, 175, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 197, 199, 201, 203, 205, 206, 208, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 228, 229, 232, 234, 235, 236, 238, 245, 247, 248, 250, 255, 260, 261, 262, 263, 264, 267, 271, 273, 274, 283, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 302, 304, 305, 308, 311, 313, 315, 317, 318, 319, 320, 321, 322, 326, 327, 335, 336, 337, 338, 339, 342, 343, 344, 345, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 367, 368, 369, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 394, 395, 396, 397, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 421, 428, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 487, 489, 494, 496, 498, 502, 508, 509, 517, 523, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 691, 698, 699, 700, 706, 709, 714, 718, 732, 738, 755, 756, 776, 777, 794, 795, 796, 798, 799, 800, 805, 810, 814, 815, 820, 821, 822, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 917, 919, 920, 923, 936, 938, 944, 945, 947, 971, 975, 976, 978, 979, 981, 983, 984, 985, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1012, 1014, 1018, 1019, 1021, 1022, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 366, 367, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 919, 920, 924, 925, 927, 928, 929, 930, 931, 933, 935, 936, 938, 939, 940, 941, 948, 949, 950, 952, 953, 955, 956, 957, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 976, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028], "00": [13, 16, 22, 28, 32, 35, 68, 76, 80, 83, 87, 93, 98, 106, 108, 136, 141, 149, 156, 161, 165, 169, 170, 173, 176, 190, 217, 218, 226, 232, 243, 252, 258, 261, 276, 279, 282, 297, 302, 303, 313, 322, 323, 325, 326, 331, 332, 349, 352, 354, 361, 374, 377, 386, 407, 414, 415, 603, 604, 711, 713, 785, 796, 810, 823, 908, 983, 987, 997, 999, 1001, 1009, 1022], "000": [4, 5, 16, 21, 25, 27, 42, 74, 108, 152, 171, 175, 232, 258, 260, 262, 297, 310, 318, 332, 351, 352, 362, 375, 386, 414, 415, 488, 559, 560, 642, 675, 1001, 1009, 1023, 1041], "0000": [4, 320], "000000": [44, 169, 188, 217, 260, 309, 734], "00000000": 154, "000000e": 217, "000024": 366, "000045": 169, "00005": 15, "0000ff": [31, 291, 299], "0001": [10, 148, 207, 258, 382, 419, 441, 445, 457, 469, 470, 476, 531, 536, 538, 545, 547, 548, 557, 558, 644, 645, 646, 647, 650, 651, 656, 657, 658, 659, 660, 661, 666, 667, 670, 672, 674, 676, 678, 685, 687, 691, 856, 857, 899, 900, 976], "000176": 7, "000184": 7, "000196": 7, "000198": 169, "00020991037201085544": 273, "000235": 7, "000256": 7, "000268": 7, "000297": 7, "0003": 114, "0004": [114, 310, 602], "000475": 7, "000515": 351, "000623": 7, "000626": 351, "000662": 351, "0008": 388, "000921": 7, "000939": 351, "000977": 260, "00099547": 154, "000e": 415, "001": [7, 14, 32, 44, 56, 62, 68, 122, 123, 136, 148, 151, 169, 183, 207, 208, 218, 228, 238, 245, 258, 260, 262, 328, 352, 377, 386, 411, 534, 535, 537, 544, 625, 642, 643, 644, 645, 650, 651, 658, 659, 660, 661, 664, 665, 666, 674, 675, 676, 677, 679, 682, 687, 688, 691, 692, 794, 795, 856, 857, 894, 895, 901, 902, 903, 904, 905, 976, 1009, 1014, 1023], "00106": 351, "00112": 351, "0012": [4, 692], "0013": 4, "0014": 4, "0015": 4, "001540": 13, "00166409": 659, "00171412": [755, 756, 985], "00177": 351, "00188": 351, "001882": [187, 188], "002": [4, 12, 148, 151, 352, 377], "002592": [187, 188], "00271": 351, "00274": 199, "0028": 4, "002861": [187, 188], "003": 4, "0032": 4, "0034189458230957995": 6, "003533": 188, "003586": 534, "00360392": 534, "0036211": 534, "00362644": 534, "00364": 319, "00368320": 13, "00375": 1018, "00393284e": 180, "003935": [187, 188], "003e": 415, "004": 4, "0044": 906, "004577621581492997": 312, "00462428": 748, "004838": 258, "0049896314219659565": 312, "005": [4, 118, 260, 264, 288, 305, 352, 386], "005027": 263, "005383": [187, 188], "005422": 260, "005670": [187, 188], "0057717": 13, "005840": 263, "005861": 263, "006": [4, 268, 386], "006360": 263, "007": [6, 245, 268, 283, 352], "0072b2": 245, "0075": [471, 539], "00755": 539, "007581": 265, "00768662e": 180, "0077": 1018, "007833": 265, "008": [148, 352, 377, 386], "008142": [187, 188], "0083899664": 761, "008449": [187, 188], "00860051": 656, "008915": 263, "009": [4, 386], "009075": 169, "00911944e": 180, "0092": 114, "009362": [187, 188], "009778": 263, "0098": 114, "00ff00": 291, "01": [6, 8, 10, 13, 14, 16, 28, 35, 40, 44, 51, 62, 68, 76, 95, 97, 98, 114, 123, 125, 127, 129, 130, 136, 148, 156, 160, 161, 169, 170, 180, 183, 190, 206, 211, 212, 217, 218, 220, 221, 228, 232, 233, 234, 238, 239, 243, 247, 251, 252, 254, 259, 260, 261, 265, 267, 268, 269, 276, 288, 297, 300, 302, 305, 313, 316, 322, 323, 340, 349, 352, 358, 359, 361, 375, 377, 385, 407, 416, 447, 469, 513, 519, 530, 537, 541, 543, 593, 594, 596, 603, 640, 644, 652, 656, 676, 694, 713, 796, 810, 893, 956, 983, 987, 991, 997, 999, 1001, 1009, 1019, 1023], "010": [13, 352, 386, 824, 995], "0106": 647, "010877306503748912": 268, "011": [4, 58, 268, 283, 352, 386], "011595": [187, 188], "0116": 602, "011e": 415, "012": [13, 172, 175, 352], "012191": [187, 188], "012521": 188, "012831": 188, "0129126": 374, "013": [4, 13, 268, 352], "01327": 375, "013519": 169, "014": [4, 145, 149, 268, 386, 1009], "0144": 613, "015": [318, 323, 352, 356, 995, 1009], "0152": 114, "015347e": 217, "015414e": 217, "015587e": 217, "015596": [187, 188], "0157": 542, "015716e": 217, "016": [40, 68, 183, 352, 1009], "01621459": 407, "016445": 260, "017": [48, 386, 469, 470], "017379": 13, "017646": [187, 188], "018": [13, 260, 470], "0182": 892, "018727": 169, "0188ff": 309, "018900": 188, "019": [148, 377, 386, 469], "019023": 260, "019069": 188, "01915283": 105, "019163": [187, 188], "0193": [468, 474], "0195": [420, 473], "0196": 114, "0198e1": 92, "019907": [187, 188], "01e": 185, "02": [4, 12, 13, 28, 30, 35, 44, 50, 52, 58, 62, 64, 68, 76, 82, 83, 85, 95, 98, 113, 120, 136, 148, 153, 158, 161, 168, 169, 173, 180, 217, 218, 226, 228, 236, 238, 243, 255, 261, 267, 276, 282, 288, 297, 299, 302, 303, 305, 307, 313, 323, 330, 334, 352, 357, 374, 377, 385, 411, 439, 443, 595, 603, 656, 674, 796, 810, 878, 894, 908, 983, 1009], "020": [4, 7, 13, 16, 995, 1009], "02069427": 53, "021849": 320, "021872": [187, 188], "022": [352, 995], "022594": 169, "0226": 647, "022688": [187, 188], "023": [13, 268, 900, 995], "02306214": 665, "02449161": 105, "02456369": 183, "024991": [187, 188], "025": [31, 201, 238, 257, 688, 692], "025102": 169, "025118864315095794": 1021, "025422": 260, "0255": 114, "0256": 154, "02564103": 360, "025930": [187, 188], "026": [86, 352], "026328": [187, 188], "026711": 54, "027": [13, 148, 230, 243, 352, 377, 1009], "027400": 366, "028": 258, "02818216": 85, "02891072": 988, "029": 995, "0292": 351, "02d": 188, "03": [12, 13, 52, 67, 68, 80, 95, 106, 127, 136, 148, 149, 156, 161, 169, 180, 217, 232, 243, 245, 251, 261, 297, 313, 326, 377, 415, 745, 796, 983, 987, 1009], "030": [127, 352], "030462": 71, "030498": 71, "030677e": 217, "030867": 169, "031": [58, 148, 352, 377], "031020": 71, "031025": 169, "031255": 169, "031555": 188, "03162278": 12, "031988": [187, 188], "0321": 830, "032179": 188, "03228": 620, "03228706": 608, "0323": 351, "032356": [187, 188], "03237920e": 180, "032405": 169, "03260883": 988, "033": [48, 120, 136, 151, 995, 1009], "033764e": 217, "033823": 169, "034": [58, 127, 469], "034077": 188, "034194": [187, 188], "034278": 263, "0343": 351, "034309": [187, 188], "03433306456": 6, "034821": [187, 188], "03498585": 988, "035005": 169, "035046": 7, "03531816": [821, 822], "0358": 7, "036": [386, 470], "036038": [187, 188], "036385": [187, 188], "036445": 260, "036656": [187, 188], "0367": 156, "0368": 617, "036829": 7, "037": [152, 161, 195, 218, 707, 1009], "0370": 845, "037600e": 217, "038": [469, 470, 856], "038076": [187, 188], "03812219": 988, "038159": 808, "03823144": 154, "038689": 250, "0387": 602, "039": [258, 748, 778, 987], "039493": [187, 188], "039497": 242, "03f": 258, "04": [13, 30, 40, 42, 54, 85, 97, 104, 136, 148, 156, 161, 169, 173, 180, 198, 217, 236, 245, 251, 260, 261, 273, 296, 297, 323, 345, 377, 414, 416, 469, 470, 644, 645, 650, 658, 659, 660, 679, 785, 796, 810, 983, 987, 991, 1001, 1009], "040": 185, "040530e": 217, "041": [13, 148, 149, 1009], "041297": 300, "042": 386, "0427": [217, 467, 472], "042898": 300, "043": 386, "043401": [187, 188], "044": [4, 6, 222, 258, 748, 987], "044223": [187, 188], "044451": [187, 188], "044642": [187, 188], "044666": 7, "0448": 217, "045": 720, "04520": 138, "0453": 542, "045311": 300, "045390e": 217, "045599": [187, 188], "045934": 300, "046010e": 217, "046636": 169, "046641": [187, 188], "047": 386, "0479": 542, "048": [182, 218, 995, 1009], "049": [235, 243, 469, 1009], "049530": 300, "049540": 300, "0499": 542, "04995982": 85, "05": [7, 8, 13, 15, 16, 22, 24, 26, 37, 44, 46, 52, 60, 62, 64, 65, 67, 68, 75, 85, 91, 100, 114, 117, 124, 127, 130, 138, 144, 148, 156, 159, 160, 169, 179, 180, 198, 201, 213, 218, 224, 225, 226, 228, 238, 245, 247, 248, 251, 252, 260, 261, 269, 271, 276, 288, 291, 296, 305, 307, 315, 319, 326, 328, 331, 343, 349, 377, 416, 448, 454, 476, 523, 528, 529, 544, 590, 593, 594, 596, 611, 612, 613, 617, 618, 620, 621, 623, 630, 631, 647, 688, 692, 753, 796, 848, 899, 900, 983, 991, 997, 1009], "050": [13, 995], "05063247886572012": 268, "050680": [187, 188], "051": [89, 93, 470, 1009], "0512": 542, "051474": [187, 188], "0517578125e": 7, "052": 535, "05216586": 85, "052506": 320, "053": [4, 148, 352, 377, 386], "05306648": 103, "054045": 263, "054699": 169, "0547": 903, "055": [148, 377, 987], "05518": 621, "05532": 618, "05534985": 301, "0556": 903, "056": [13, 752, 995], "0561": 903, "0566": 621, "05663": 618, "0568": 744, "057": [222, 386, 824], "057122": 188, "05752333": 105, "057711": 188, "058": [59, 68, 148, 258, 377, 1009], "05840206": 105, "059": [6, 16, 180, 218, 352, 1009], "0595": 471, "05968": 138, "059842": 7, "05994843": 12, "05e": 160, "06": [13, 16, 22, 28, 52, 67, 68, 83, 141, 160, 165, 169, 190, 198, 199, 260, 261, 276, 302, 307, 345, 352, 354, 386, 480, 481, 482, 642, 643, 687, 691, 794, 795, 796, 810, 908, 983, 997, 999, 1009], "060": [4, 13, 352, 748], "0602": 7, "061": [258, 268, 276, 1009], "0614": 621, "06165": 618, "061696": [187, 188], "062": 352, "0622": [468, 474], "0626": 830, "063": [258, 260, 435], "0631": 13, "063184": 258, "064": [386, 995], "065": [237, 243, 258, 386, 1009], "06506307": 301, "0651": 351, "0652": 620, "06525643": 608, "066": [194, 218, 258, 292, 297, 646, 1009], "06686804": 214, "06694199": 105, "06695631e": 80, "067": 160, "067109": 188, "067528": 188, "068": [4, 13, 260], "068332": [187, 188], "06880943": 85, "06896552": 447, "069": [258, 339, 349, 1009], "0693": 617, "07": [13, 16, 35, 85, 104, 136, 141, 169, 195, 217, 269, 276, 303, 331, 362, 375, 407, 559, 560, 690, 692, 987, 1001, 1009], "070": [211, 218, 1009], "0707": 621, "07073": 618, "071": [8, 16, 148, 377, 435, 1009], "071964": 169, "072": [435, 646], "073": [31, 35, 258, 469, 470, 1009], "074": [139, 141, 258, 343, 349, 1009], "074412": [187, 188], "075": 98, "07582983e": 180, "075887": 188, "076": [4, 212, 218, 360, 361, 887, 1009], "077": [234, 283], "077846": 260, "0779": 7, "078": [4, 15], "07846529": 301, "07880": 138, "079": [53, 68, 148, 151, 186, 218, 377, 1009], "079297": 260, "07963978e": 180, "07993421": 214, "08": [4, 8, 16, 44, 50, 98, 106, 169, 170, 183, 218, 243, 252, 276, 302, 313, 354, 377, 476, 529, 541, 543, 561, 639, 656, 796, 856, 857, 878, 993, 1009], "08022103": [821, 822], "080295": 188, "081": [153, 161, 995, 1009], "0813": [467, 472], "082": [4, 309, 313, 1009], "0825": 310, "083": [48, 199, 218, 258, 352, 358, 361, 1009], "08333333": 360, "08377444": 748, "084": [24, 290, 297, 1009], "085299": [187, 188], "08533159": 202, "085711": 54, "08604995": 85, "086944": 242, "08699432": 203, "0872422": 658, "088": [667, 995], "089063": [187, 188], "08d": 17, "08t16": 374, "09": [8, 16, 97, 98, 104, 136, 165, 169, 222, 232, 236, 238, 273, 276, 302, 354, 407, 527, 605, 732, 837, 987, 997, 1001, 1009], "090": [57, 68, 1009], "09000": 199, "090528": 169, "090808": 169, "091": 6, "091053": 169, "091621": 54, "092": [101, 106, 1009], "092204": [187, 188], "093": [334, 349, 469, 1009, 1035], "094": [315, 323, 470, 1009], "09443967": 301, "09517222": 1021, "09541846": 534, "096": [41, 68, 202, 218, 1009], "09684337": 214, "096950": 300, "096mb": 351, "097": [4, 148, 209, 218, 377, 1009], "098": 352, "098332": 25, "0986": [415, 863], "09861229": [610, 997], "098758": 25, "098776": 260, "098932": 25, "099": 4, "099820": 25, "09999999999999999": [234, 268, 338], "0d": 1031, "0e": [271, 547, 548], "0e4": 206, "0f": [19, 58], "0min": 54, "0rc1": 384, "0x": [322, 922], "0x7f19383cad00": 325, "0x7f19470b2ac0": 239, "0x7f19478ba3d0": 272, "0x7f19481540d0": 258, "0x7f194b51e940": 272, "0x7f194b56fbb0": 199, "0x7f194b5d7670": 116, "0x7f194b5f7610": 272, "0x7f194b76b820": 116, "0x7f195cf72040": 272, "0x7f195d544070": 132, "0x7f195d842340": 267, "0x7f195e395430": 71, "0x7f195e395f40": 71, "0x7f195e5353a0": 250, "0x7f195f075670": 132, "0x7f19824e7a60": 71, "0x7f19824faf70": 72, "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 930, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1026, 1028, 1032], "10": [4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 20, 25, 26, 27, 30, 31, 32, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 82, 85, 86, 92, 97, 98, 99, 100, 104, 105, 111, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 127, 129, 130, 133, 135, 140, 145, 148, 152, 153, 155, 157, 158, 160, 161, 163, 164, 168, 169, 170, 171, 172, 175, 178, 183, 189, 190, 192, 193, 197, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 215, 216, 217, 221, 222, 228, 231, 232, 233, 234, 235, 237, 238, 239, 241, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 268, 271, 274, 276, 278, 281, 288, 299, 300, 301, 302, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 321, 322, 325, 326, 327, 329, 336, 337, 338, 340, 341, 343, 345, 346, 348, 351, 352, 362, 366, 374, 375, 376, 377, 378, 380, 382, 385, 386, 392, 393, 394, 397, 398, 399, 400, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 436, 441, 445, 447, 449, 450, 451, 457, 458, 460, 473, 486, 490, 491, 494, 498, 499, 500, 502, 508, 509, 510, 511, 514, 518, 519, 522, 524, 526, 529, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 546, 550, 553, 554, 555, 556, 559, 560, 562, 563, 564, 565, 566, 568, 580, 581, 585, 591, 592, 597, 598, 603, 605, 609, 615, 617, 625, 628, 630, 632, 633, 634, 635, 638, 640, 641, 642, 644, 645, 647, 650, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 670, 671, 673, 674, 675, 676, 679, 683, 684, 689, 690, 693, 694, 697, 703, 713, 723, 739, 753, 766, 794, 795, 796, 797, 798, 799, 800, 807, 810, 811, 812, 813, 814, 816, 817, 818, 823, 825, 826, 827, 828, 834, 835, 836, 838, 839, 840, 846, 855, 856, 857, 859, 865, 869, 872, 873, 876, 888, 896, 902, 905, 907, 908, 912, 923, 933, 936, 940, 951, 955, 956, 957, 963, 964, 973, 976, 977, 982, 983, 984, 985, 987, 988, 990, 991, 993, 994, 997, 1001, 1002, 1009, 1014, 1018, 1019, 1021, 1022, 1023, 1027, 1028, 1031, 1032, 1033, 1038, 1040, 1041, 1042, 1044, 1045], "100": [4, 5, 7, 10, 12, 13, 17, 19, 25, 27, 37, 42, 50, 53, 57, 61, 66, 71, 72, 75, 79, 80, 95, 97, 98, 104, 112, 117, 127, 128, 131, 134, 152, 156, 159, 160, 169, 170, 172, 175, 178, 179, 181, 183, 185, 189, 190, 191, 193, 198, 199, 200, 201, 203, 208, 209, 210, 212, 214, 215, 217, 222, 223, 225, 231, 232, 233, 234, 235, 239, 243, 245, 247, 251, 255, 256, 258, 260, 263, 265, 270, 271, 274, 288, 289, 290, 302, 306, 307, 309, 311, 312, 318, 322, 329, 330, 336, 337, 339, 340, 341, 345, 346, 348, 351, 352, 356, 359, 360, 366, 368, 375, 377, 380, 382, 385, 386, 398, 404, 407, 408, 411, 412, 413, 414, 415, 435, 439, 443, 447, 469, 470, 476, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 528, 532, 534, 537, 542, 543, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 603, 605, 608, 629, 630, 631, 637, 638, 639, 640, 644, 645, 646, 647, 650, 651, 656, 657, 658, 659, 660, 661, 663, 665, 667, 669, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 743, 794, 795, 798, 823, 824, 829, 834, 835, 836, 838, 839, 840, 844, 856, 857, 875, 877, 880, 889, 906, 976, 977, 980, 984, 987, 988, 994, 997, 999, 1014, 1018, 1022, 1023, 1038, 1039, 1040, 1043, 1044], "1000": [4, 7, 8, 15, 26, 31, 37, 50, 72, 75, 85, 104, 114, 116, 118, 122, 123, 124, 129, 134, 139, 143, 157, 175, 185, 191, 202, 222, 231, 232, 234, 245, 249, 258, 260, 266, 269, 271, 288, 290, 306, 309, 316, 317, 319, 321, 322, 339, 340, 347, 351, 352, 385, 386, 393, 405, 415, 435, 471, 477, 478, 529, 530, 535, 537, 539, 540, 541, 543, 544, 546, 551, 562, 630, 644, 645, 649, 650, 651, 653, 658, 659, 660, 661, 664, 665, 666, 670, 674, 675, 676, 685, 690, 696, 699, 761, 876, 888, 894, 899, 900, 976, 980, 1002, 1018, 1021, 1037, 1039, 1048], "10000": [4, 11, 13, 30, 43, 63, 72, 73, 125, 138, 185, 192, 199, 207, 215, 232, 234, 273, 317, 335, 337, 362, 368, 414, 415, 559, 560, 642, 677, 876, 905, 999, 1019, 1023], "100000": [155, 234, 245, 380, 611, 612, 613, 617, 618, 620, 621, 623, 888, 980, 1021, 1023], "1000000": [17, 534], "10005": 1038, "1000x": 1036, "1001": [210, 242], "10027": 1043, "10045": 1038, "1005": 1002, "10058": 1039, "10059": 1038, "10065": 238, "1007": 703, "10070308464041304": 199, "10071": 1038, "10093": 1038, "10095": 1038, "10096": 1043, "100_000": [25, 27, 169], "100k": 232, "100x": [1030, 1033, 1047], "101": [27, 148, 272, 276, 278, 377, 845, 1009, 1031], "10101": 1038, "10112": 1038, "1013": 995, "10142": 1038, "10153": 1038, "10168": 1045, "10181": 1038, "10192": 1038, "10195": 1038, "101alexmartin": 1047, "102": [386, 1021, 1032], "10210": 1038, "10229": 1038, "1024": [53, 104, 447, 466, 536, 897, 1043], "10280": 1038, "10297": 1038, "103": [119, 127, 240, 243, 281, 283, 375, 414, 495, 553, 554, 1009, 1030], "10306": 1038, "10325": 1038, "10336": 1038, "10346": 1038, "10377": 1038, "1038": 407, "10397": 1038, "104": [4, 24, 181, 218, 1009], "10403": 217, "10412": 1038, "10428": 1038, "10437": 1038, "10440": 1039, "10441": 1038, "1045": 71, "10452": 1038, "10458": 1038, "1046": [71, 250], "10463": 1008, "10468": 1045, "10469096": 154, "1047": 71, "10471": 1038, "10474": 1038, "10478008": 407, "10482": 1040, "1048576": [580, 587], "10493": 1042, "105": 309, "10500": 1038, "10521": 1038, "10526": 407, "10536": 1038, "10580": 1039, "10581": 1038, "10584743": 154, "10587": 1038, "10591": 1042, "10593": 1038, "106": [148, 185, 242, 377, 875, 981, 1031], "10606655": 214, "10610": 1038, "10655": 1038, "10663": 1038, "10677": 1038, "10687": 1038, "107": [127, 320, 407, 894, 988, 1032], "10708": 1042, "10711": 1042, "10723": [1037, 1038], "10727": 1039, "1073": [375, 486], "10733": 1008, "10740": 1038, "1076": 329, "10774": 1038, "10795": 1038, "108": [0, 8, 1031], "1080": [374, 407], "10805": 1044, "10811": 1038, "10815": 1040, "10827": 1038, "10829": 1038, "10834": 217, "10836": 1038, "1084": 250, "10845": 1038, "10869": 1038, "1088": 242, "10881": 1038, "108843": 263, "10887": 1038, "108880": 25, "10898": 1038, "10899": 1038, "109": [24, 53, 988, 1032], "10908": 1038, "10913": 1038, "10914094": 214, "10928": 1038, "10933": 1038, "10982": 1038, "10992": 1038, "10998": 1038, "10999": 1038, "10_000": [7, 25, 75, 116, 124, 168, 175, 232, 263, 283, 557, 558, 562, 563, 876], "10_fold": [375, 491], "10e": [178, 183], "10k": [316, 445], "10x": 1030, "10x10": 204, "10\u2079": 1038, "11": [4, 19, 35, 74, 81, 97, 98, 106, 148, 154, 169, 170, 183, 199, 200, 201, 204, 222, 232, 238, 243, 257, 265, 266, 272, 286, 287, 289, 309, 317, 320, 321, 323, 337, 341, 346, 374, 377, 378, 386, 393, 407, 410, 411, 414, 448, 455, 480, 481, 482, 483, 494, 499, 515, 516, 610, 648, 654, 668, 713, 719, 720, 721, 775, 776, 777, 797, 800, 814, 817, 824, 851, 908, 937, 951, 979, 983, 985, 997, 1001, 1002, 1009, 1014, 1021, 1023, 1028, 1032, 1036, 1038, 1039, 1041, 1044, 1045], "110": [15, 90, 178, 187, 196, 206, 218, 231, 311, 322, 435, 981, 982, 1009], "1100": 50, "11000": 1039, "11005": 1038, "11006": 1038, "11010": 1038, "11011": 1038, "11021": 127, "11042": 1038, "11047": [1008, 1040], "11064": 1042, "11082": 1038, "110923": 188, "11099": 761, "111": [4, 7, 8, 67, 90, 101, 189, 196, 214, 218, 224, 260, 283, 851, 1009, 1022, 1033], "1111": [648, 654], "1111111111111111": 268, "11124": 1038, "1112658": [893, 999], "11135": 1038, "11136": 1038, "1114": 250, "11144": [1038, 1039], "11144673": 214, "11160": 1038, "11166": 1038, "1117": 617, "11176": 1038, "11179": 1039, "1118": 71, "112": [54, 148, 322, 323, 375, 377, 1009, 1032], "11206": 1038, "11211": 1038, "112141": 386, "11232": 1040, "11235": 1038, "112589990684262": 743, "11272": 1038, "11293": 1038, "11295": 1038, "11296": 1041, "113": [208, 218, 278, 279, 386, 1009, 1033], "11306": 1038, "11308": 1038, "11310": 1038, "11314": 375, "11315": 1038, "11327": 1038, "113516": 263, "11353": 1038, "11354": 1039, "11364": 1039, "11364637": 12, "113781": 320, "11378556": 301, "114": [13, 16, 320, 708, 1009, 1030], "1140": 375, "11413": 4, "11420": 1038, "1145": [175, 407, 674], "11452112": 214, "11458": 1039, "11464": 1038, "11466": 1038, "11467": 1038, "1148": 250, "115": [170, 995], "11505": 1038, "11514": 1041, "11520": 1038, "11526": 1039, "11528972": 214, "11542": 1038, "11553": 1038, "11556": 1038, "11557": 1038, "11558": 1038, "11576": 1038, "11585": 1038, "11596": 1038, "116": 1030, "1162": 407, "11635": 1040, "11646": 1039, "11650": 1039, "11679": 1038, "11680": 8, "11682": 1042, "11682692": 214, "11693539": 85, "11699": 1039, "117": [234, 1031], "11705": 1039, "117154": 169, "11724": 1038, "11727": 1039, "11741": 1038, "11754": 1039, "11756": [1038, 1039], "117608": 25, "11774": 1038, "1179": 250, "118": [170, 588], "11805": 1008, "11841": [893, 999], "1185": 386, "11860": 1045, "1189": 414, "119": [981, 1033], "11901": 1038, "11905": 1038, "11912": 1038, "11915045": 362, "11924": 1038, "11931": 199, "11932": 199, "11933": 199, "11935": 199, "11950": 1041, "11951": 1038, "11973": 1039, "11977": 1008, "12": [0, 4, 6, 8, 15, 16, 20, 34, 40, 42, 43, 53, 55, 56, 57, 73, 74, 85, 120, 121, 122, 125, 127, 148, 154, 155, 156, 164, 169, 170, 172, 173, 179, 183, 185, 199, 207, 217, 220, 223, 224, 228, 229, 231, 239, 242, 247, 248, 259, 260, 262, 263, 266, 272, 276, 286, 302, 309, 310, 311, 320, 346, 353, 377, 378, 385, 393, 395, 397, 399, 400, 407, 411, 415, 441, 445, 447, 455, 480, 481, 482, 483, 494, 530, 532, 539, 568, 644, 645, 650, 658, 659, 660, 662, 667, 669, 679, 683, 684, 687, 690, 691, 722, 727, 794, 795, 797, 814, 817, 830, 851, 867, 968, 976, 977, 979, 983, 985, 988, 997, 1001, 1002, 1009, 1014, 1019, 1028, 1031, 1033, 1037, 1038, 1040, 1041, 1046, 1047], "120": [128, 221, 238, 243, 322, 347, 349, 416, 588, 1009, 1030], "1200": [50, 123, 305, 414], "12000": 518, "12068": 1040, "12069": 1043, "121": [67, 92, 93, 113, 164, 233, 616, 667, 997, 1009], "12105": 1038, "1211": 255, "12116": 1039, "1212": 496, "12122": 1038, "121351": 188, "12143": 1039, "12145": 1040, "12147": 1008, "12159": 1038, "12165": 1038, "12165031": 988, "1217": 199, "12171": 1038, "12174": 1039, "12177": 1039, "12190903": 85, "12196": 199, "12197": 1039, "122": [0, 113, 156, 164, 170, 233, 249, 252, 386, 988, 1009], "1220": 617, "12211": 1038, "12222": 1039, "12232": 1039, "12234": 1038, "12246": 1038, "12251": 1039, "12258": 1040, "12274212": 988, "12279": 1039, "12285": 1045, "1229": 515, "123": [115, 134, 362, 414, 514, 515, 516, 553, 554, 832, 988, 995], "12300": 1039, "12303": 1040, "12304": 1038, "12317": 1038, "1232": 414, "12326": 4, "12327": 4, "12328": [4, 1039], "12329": 4, "12330": [4, 1038], "12334": 1039, "12338": 1038, "12339": 1038, "1234": [179, 248, 263, 380], "12344": 1039, "12345": 1038, "12350": 1038, "1236": 311, "12360": 1038, "12365": 1038, "12379": 4, "12380": 4, "12381": 4, "12382": 4, "123828": 263, "12383": 4, "12388": 1038, "12393": 1038, "124": [7, 414, 1032], "124225": 188, "12436": 1039, "12441": 1038, "12451": 1038, "12462": 1038, "12467": 1038, "12471": 1038, "12481": 1038, "125": [4, 53, 80, 98, 318, 352, 532, 976, 987, 997], "12513": 1039, "12514": 1038, "125140": 263, "12517": 1038, "12518": 1038, "12522": 1038, "125247168": 13, "12543": 1039, "12557": 1040, "12568": 1039, "12569": 1040, "12582": 1039, "12583": 1039, "1259": 19, "12599": 1039, "126": 414, "12612": 1038, "12613": 1039, "12625": 1038, "1263": 386, "12638": 1042, "12650": 1040, "126502": 188, "12669": 1039, "1268187": 214, "12685": 1038, "12699": 1038, "127": [123, 1030], "12701": 1038, "12704": 1038, "127128": 124, "12715": 1039, "12732": 1039, "1276": 8, "12789": 1040, "128": [14, 15, 199, 366, 534], "12800": 1008, "12807": 1039, "12821": 1039, "12834": 1039, "12852": [1008, 1040], "12855": 1039, "12860": [217, 1039], "12861": 1039, "12866": 1008, "1288": [6, 375], "12881": 1038, "12883823": 411, "12887": 1040, "129": [201, 1019, 1030], "12908": 1039, "12914884": 988, "12916": 1039, "12927": 1040, "12946": 1038, "12949": 1038, "12955": 1039, "12972": 1039, "12983": 1039, "12988": 1039, "1299": [865, 997], "12th": 999, "13": [4, 6, 8, 10, 11, 13, 16, 44, 74, 100, 104, 120, 123, 125, 163, 169, 175, 185, 208, 220, 225, 226, 254, 261, 264, 266, 297, 302, 305, 309, 338, 375, 377, 380, 386, 393, 411, 419, 494, 508, 511, 530, 531, 549, 550, 580, 604, 633, 637, 731, 756, 814, 843, 858, 865, 891, 892, 983, 987, 988, 993, 994, 997, 1002, 1005, 1009, 1014, 1028, 1030, 1032, 1033, 1036, 1037, 1038, 1039, 1042], "130": 386, "1300": 50, "13003": 1042, "13005": 1038, "13007": 1039, "130107": [214, 232, 487], "13013": 1040, "13042": 1045, "13046": 1038, "13077794": 362, "13086": 1039, "131": [4, 14, 56, 386, 987, 1031], "13124": [1038, 1039], "13134": 1038, "13142": 1039, "13146": [1008, 1040], "13151": 1039, "13157": 1039, "13164": 1039, "13165": 1038, "13170937": 1021, "13174": 1039, "1319": [865, 997], "131900": 70, "13193": 1039, "132": [4, 8, 14, 56, 414], "13204": 1042, "13213": 1040, "1322": 620, "13221": 1038, "13222543": 608, "13227": 1008, "1323": 199, "13231": 1040, "13233": [375, 491, 492], "13240": 1039, "13241": 1039, "13250": 1039, "13251": 1039, "13253": 1039, "13260": 1039, "13266": 1039, "13276": 1038, "13279": 1039, "13283": 1039, "13286": 977, "13290": 1040, "133": [14, 56], "13312": 1038, "13317": 1039, "13328": 1039, "13333": 1039, "13336": 1039, "13350": 1039, "13363": 1039, "13366": 1039, "13374": 4, "13375": 4, "13376": 4, "13377": 4, "13378": 4, "1338": 255, "13382": 1039, "13389": 1039, "13392": 1040, "13393": 1040, "13397": 1039, "134": [45, 53, 101, 114, 123, 136, 260, 1009, 1033], "13422": 1039, "13427": 1039, "13439": 1039, "13447": 1039, "13459": 1039, "13467": 1040, "13485": 1039, "13486": 1039, "13496": 1039, "135": [117, 136, 148, 320, 377, 1009], "13511": 1041, "13524": 1039, "1353": 351, "13531": 1039, "13545": 1039, "13549": 1039, "13554": 1039, "13562": 1039, "13575": 1040, "13601": 1039, "13607": 1039, "13609": 1040, "13618": 1040, "13620": 1039, "13628": 1039, "13636": [983, 1039], "13641": 1039, "13649": 1047, "13651": 1039, "137": [51, 68, 238, 386, 1009, 1031], "13704": 1040, "13707": 1040, "1371": 532, "13726": 1040, "1373": 984, "1374": 532, "13741": 1039, "13769": 1040, "13772": [1038, 1039], "13773": 1040, "13779": 1039, "1378": 217, "13780": 1039, "1379": 217, "138": [60, 68, 154, 161, 386, 414, 987, 1009], "13806": 1040, "1382": 522, "13822072286080167": 268, "13835": 1039, "1385": 472, "13864": 1039, "13875": 1040, "13877": 1039, "13894": 1039, "13896": 1040, "139": [217, 283, 386, 414, 450, 460, 689, 693, 988], "13900": 1042, "13902": [1008, 1040], "13903": [1038, 1039], "13910": 1039, "13911": [1008, 1040], "13925": 1040, "13933": 1040, "13938": 1040, "13947": 1039, "1396": 984, "13960": 1040, "1397": 386, "13974": 1039, "13983521": 301, "13987": 1040, "13988486": 214, "13995": 1040, "13th": 27, "14": [4, 11, 13, 38, 49, 55, 60, 62, 63, 66, 68, 74, 81, 100, 143, 170, 183, 188, 190, 217, 222, 225, 228, 233, 238, 259, 265, 266, 268, 274, 281, 283, 297, 308, 309, 320, 331, 345, 348, 367, 375, 377, 378, 393, 397, 399, 400, 407, 411, 494, 496, 508, 551, 552, 633, 641, 690, 810, 814, 865, 980, 983, 987, 997, 1002, 1005, 1009, 1014, 1028, 1030, 1031, 1033, 1034, 1038, 1043], "140": [53, 206, 218, 322, 414, 508, 514, 515, 516, 553, 554, 988, 1009], "1400": [50, 472], "14012": 1040, "14024": 1039, "14028": 1040, "14035": 1040, "14048": 1041, "14053": 1039, "14067": 1039, "14075": 1041, "14087": 1039, "14092": 1039, "141": [278, 499, 532, 899, 988], "14108": 1040, "14114": 1040, "14156": 217, "14170": 1040, "14180": [1008, 1041], "1419": 4, "14194": 1040, "14197": 1039, "142": [4, 47, 414], "1422": 4, "14228": 367, "14237": [1038, 1039], "14259": 1040, "14264": 1041, "142857": 217, "14286": 1040, "14287": 1040, "14294": 1040, "14296": 1040, "143": [148, 346, 349, 377, 469, 470, 999, 1009, 1030, 1031], "14300": 1041, "14302": 238, "14305": 1040, "14309": 1039, "14336": 1040, "14338": 977, "14356": 1040, "14357": 1040, "14378": 1040, "14381": 1040, "14393": 1039, "144": [260, 386, 1030], "1440": 4, "14406": 1040, "1441": 620, "14410151": 608, "14417": 1040, "144204": 124, "1443": 993, "14430": 1040, "14446": 1042, "14458": 1040, "14464": 1040, "14475": 1040, "144943": 25, "14496": [386, 1039], "145": [13, 407], "14510": 1040, "14516": 1041, "14520": 1040, "14538": 1040, "14544": 1040, "14549": 1040, "1456": 217, "14582": 1008, "14591": 1040, "14593": 1040, "14595": 1040, "145957": 124, "146": [6, 10, 16, 192, 218, 414, 1009], "1460": [121, 132], "14602": 1040, "14603365": 214, "14623": 1040, "14625": 8, "14629": 1040, "1464": 229, "14646": 1040, "14647": 1040, "14680": 1040, "14682": 1040, "14696": 1041, "147": [349, 988], "14702": 1040, "147022": 188, "14704": 1040, "14706": 1040, "1471": 993, "14710": 1040, "14732": 1040, "14736": 1045, "1474": 386, "14740": 1040, "14764": 1040, "148": 1033, "14800": 1042, "14810": 311, "14848": 1041, "14849": 1040, "14862": 1045, "14864": 1040, "14865": 1040, "14869": 1040, "14872": 1040, "14884": 1040, "14890": 1040, "14894": 1040, "14898": 1040, "149": [988, 1030], "14900": 1040, "14902": 1040, "14907": 1040, "14908": 1040, "14933": 1040, "14936": 1040, "14971": 1040, "14975": 1044, "14982": 1042, "1499": 8, "15": [4, 6, 7, 12, 13, 14, 15, 19, 30, 31, 34, 40, 44, 53, 54, 61, 62, 66, 73, 74, 80, 82, 92, 98, 104, 115, 117, 120, 121, 124, 127, 143, 145, 147, 151, 155, 163, 165, 168, 169, 170, 188, 196, 201, 213, 217, 222, 225, 228, 243, 247, 248, 255, 263, 265, 268, 271, 272, 274, 287, 291, 299, 300, 303, 305, 307, 309, 321, 326, 336, 338, 341, 345, 348, 349, 357, 374, 375, 378, 380, 393, 397, 399, 400, 411, 414, 415, 438, 452, 488, 494, 495, 496, 529, 535, 543, 544, 553, 554, 596, 602, 607, 642, 650, 659, 661, 666, 674, 676, 690, 738, 814, 828, 851, 880, 976, 982, 983, 984, 987, 990, 991, 997, 1002, 1005, 1014, 1019, 1026, 1028, 1032, 1042, 1044, 1045], "150": [4, 6, 90, 92, 98, 106, 115, 124, 138, 221, 225, 228, 273, 322, 342, 346, 377, 411, 416, 502, 599, 600, 820, 821, 822, 987, 1009, 1018, 1019, 1020], "1500": [39, 50, 57, 62, 67, 92, 220, 224, 245], "15000": [670, 685, 856, 857], "15005": [1041, 1043], "15007": 1042, "15010": 1040, "1502": 1023, "15028": 1040, "15038": 1040, "150407": 386, "15044": 1040, "15049": 1040, "150527": 300, "15053": 1040, "15057": 1040, "1506": 388, "15080": 1040, "15082": 1040, "15083": 1040, "15084": 1040, "15086": 1040, "15094": 1040, "15096": 1040, "15099": 1040, "150x4": 90, "151": [293, 297, 320, 386, 414, 499, 999, 1009], "15100": 1040, "1511007": 242, "151101": 242, "15119": 1040, "15120": 1040, "15126": 1042, "1513": 302, "15138": 1040, "15160": 1040, "15179": 1041, "152": [58, 337, 349, 386, 1009], "15257": 1040, "1527": 855, "15274": 1040, "15297572": 534, "153": 661, "15304": 1040, "15319": 1008, "153244303321897735": 407, "15361": 1042, "15375": 1040, "15380": 1041, "15382": 1040, "15393": 1040, "154": [302, 649, 988], "1542": 386, "15427": 1042, "15429": 1040, "1543": 8, "15436": 1041, "154453": 300, "15463": 1040, "15488": 1040, "15490": 1040, "1550": 8, "15503": 1041, "15521": 138, "15524": 1040, "1553374": 407, "1553511": 407, "1554": 855, "15550": 1008, "15557": 1040, "15558": 1041, "15582": 1041, "156": [148, 169, 231, 243, 377, 1009], "15611": 977, "15622": 1041, "15625": 1040, "156252": 188, "15636": 1042, "15652": 1041, "15655": 1041, "15661": 1040, "15669": 1041, "15699552": 988, "157": [259, 276, 386, 1009], "1570": 8, "15707": 1041, "15709": 1041, "15730": 1041, "157334": 300, "15751": 1040, "15760": 1040, "15762": 1041, "15763": 1042, "15773": 1041, "1578": 8, "15782": 1041, "15785": 1041, "15797": 1040, "158": [42, 414, 667], "15806": 1041, "15810": 1040, "15834": 1041, "15863": 1040, "15864": 1041, "15868": 1040, "15879": 1040, "15888": 1040, "15898": 1040, "159": [25, 28, 53, 375, 1009, 1030], "15918": 1041, "1592": 496, "15926": 1041, "15930": 1040, "15933": 1040, "15936": 1040, "15937": 1040, "159419": 242, "15946": 1041, "15947": 1040, "15948": 1044, "15950": 1041, "15953": 1041, "15959": 1041, "15963": 1041, "15980": 1041, "15984": 1044, "15996": 1040, "15e": 95, "16": [4, 5, 13, 19, 27, 43, 50, 51, 54, 66, 74, 80, 95, 98, 143, 170, 192, 198, 199, 200, 217, 220, 221, 222, 225, 226, 233, 237, 262, 263, 264, 287, 302, 305, 309, 315, 342, 352, 358, 375, 377, 386, 393, 411, 412, 415, 440, 455, 457, 469, 470, 476, 477, 495, 496, 500, 514, 532, 533, 568, 587, 593, 594, 605, 606, 637, 648, 649, 652, 653, 654, 655, 680, 681, 809, 814, 825, 874, 900, 908, 963, 964, 965, 976, 983, 987, 997, 1002, 1005, 1009, 1014, 1023, 1026, 1028, 1030, 1031, 1035, 1036, 1038, 1039], "160": [236, 294, 297, 976, 1009, 1021], "1600": 50, "160030": 188, "16006": 1041, "1600x1600": 54, "16018": 1044, "16021": 1041, "16052385": 105, "16061": 1044, "16066": 1042, "16069": 1041, "16075": 1041, "16076": 1040, "16084": 1041, "16090": 1041, "161": [327, 331, 1009], "16103": 1041, "16111": 1041, "16112": 1041, "16117": 1041, "161245": 54, "16132": 1041, "16144": 386, "16147": 377, "16149": 1041, "16159": [386, 1041], "1616": 471, "16182": 1041, "16183": 1041, "162": [58, 377], "16224": 1041, "1623": 19, "1624": 496, "16245": 1041, "16257": 1041, "1626": 1008, "16261": 1041, "16266": 1041, "16280": 1041, "16289": 1042, "163": [111, 136, 148, 278, 353, 354, 377, 995, 1009], "163224": 188, "16323": 1041, "16326": [4, 1042], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "16331": 1041, "16335": 1042, "16352": 1042, "16362": 1041, "16379": 4, "1638": 352, "16380": 4, "16381": 4, "16382": 4, "16383": 4, "16392": 1042, "16397": [1040, 1041], "164": 414, "164009": 263, "16401": 1041, "16403": 1041, "16431": 1041, "16437": 1041, "16442": 1041, "16443186": 988, "16449": 1043, "16451": 1041, "16466": 1041, "16484": 1041, "16493": 1042, "165": 988, "16500": 1040, "16505": 1040, "16508": 1041, "16530": 1042, "16531": 127, "16539": 1041, "16585": 1041, "166": [4, 16, 49, 68, 242, 243, 302, 386, 987, 1009, 1030], "16605": 1044, "16619": 1042, "16622": 1041, "16625": 1042, "16632": 1041, "16655": 1041, "16663": 1041, "166667315173": 13, "16692": 1041, "16695": 1045, "167": [386, 1030], "16718": 1041, "16726": 1041, "16728": 1041, "16747": 1045, "16748": 1044, "168": 1030, "1680": 377, "16801": 1041, "16837": 1041, "16841": 1041, "16849": 1041, "1689": 352, "169": [58, 302], "16906": 1042, "1691": 983, "169106": 260, "1693": 899, "16935": 1042, "16948": 1044, "16950": 1041, "169504": 217, "16979946": 988, "1698": 647, "16981": 1041, "16985": 1042, "16993": 1041, "17": [10, 13, 16, 19, 39, 52, 74, 80, 127, 152, 169, 198, 224, 226, 232, 263, 299, 309, 375, 378, 385, 397, 399, 400, 407, 411, 442, 459, 485, 495, 496, 498, 521, 529, 534, 538, 545, 547, 548, 553, 557, 558, 567, 568, 595, 626, 647, 655, 656, 657, 664, 667, 670, 672, 685, 690, 726, 727, 737, 758, 763, 781, 784, 786, 814, 837, 848, 863, 868, 869, 877, 879, 885, 901, 904, 907, 908, 909, 910, 937, 976, 977, 988, 990, 997, 1005, 1009, 1026, 1028, 1030, 1031, 1032, 1033, 1036, 1039, 1044], "170": [44, 57, 58, 62, 386], "1700": 50, "170087": 300, "17021": 1041, "17032": 1041, "17036": 1043, "17038": 1042, "170388": 988, "1706": 329, "17061": 1041, "17090": 1042, "17095": 1042, "171": [53, 148, 264, 276, 377, 386, 785, 987, 1009], "17107": 1042, "1714": 983, "17148": 1042, "17159": 1042, "17169": 1043, "17187": 1042, "17192": 1042, "17193": 1042, "172": [386, 491, 492, 647, 983], "17204": 1041, "17205": 1041, "17210": [13, 1041], "17225": 1042, "17226834": 53, "1723": 7, "17233": 1042, "17235": 1041, "17236387": 202, "17266": 1044, "17289014": 154, "1729": 170, "173": [241, 243, 270, 276, 386, 582, 1009], "17309": 1041, "17317": 1042, "17357": 1041, "17360": [8, 1041], "17367": 1042, "17370318": 214, "17374": 4, "17375": 4, "17376": 4, "17377": 4, "17378": 4, "17379": [4, 13, 1042], "1738": 987, "17386": 1042, "17388": 1046, "17396": 1042, "174": [123, 302, 386, 582], "17406": 1042, "17412": 1042, "17414": 1042, "17427": 1042, "17433": 1041, "17443": 1043, "17448": 1042, "1747": 170, "17474": 217, "17478": 1042, "17491": 1042, "17499": 1042, "175": [196, 218, 386, 997, 1009], "17526": 1042, "175298": 263, "17546": 1042, "17569": 1042, "17578": 1042, "17598": 1042, "176": [90, 93, 257, 276, 386, 832, 988, 995, 1009], "17603": 1042, "17604": 1042, "17606": 1042, "17608": 1042, "17609": 1042, "17610": 1042, "17612": 1042, "17614": 1042, "17616": 1042, "17622": 1043, "17633": 1042, "17644": 1042, "17651": 1042, "17661": 1042, "17662": 1042, "17679": 1042, "17694": 1041, "177": [223, 226, 386, 1009], "17702": 1042, "1771": 352, "17742": 1041, "17743": 1043, "17746": 1043, "17750": 1043, "17759": 1042, "17769": 1043, "17772": 1043, "17777": 1042, "17785": 1043, "178": [7, 185, 218, 377, 386, 508, 843, 1009], "178000": 307, "17804": 1042, "17812": 1041, "17819": 1044, "17826": 1042, "17833": 1042, "17848": 1041, "17856": 1042, "17864": 1042, "17876": 1042, "17878": 1042, "179": [185, 377, 386, 414, 1030], "17914": 1041, "17928620": 374, "17932": 1042, "17935": 1042, "17937": 1042, "17959": 1041, "1797": [58, 89, 258, 302, 325, 377, 419, 443, 500, 530, 531, 532, 533, 597, 598, 686, 687, 688, 689, 691, 990, 1020], "17984": 1042, "17985": 1041, "17985197": 214, "17987": 1042, "17992": 1042, "17995": 1041, "17997": 1042, "17_760": 127, "17t14": 374, "18": [4, 7, 8, 19, 40, 44, 49, 53, 60, 62, 74, 102, 124, 160, 169, 210, 228, 233, 260, 302, 309, 311, 326, 351, 352, 353, 380, 386, 411, 412, 415, 445, 457, 490, 498, 499, 500, 502, 503, 508, 533, 534, 536, 538, 539, 555, 556, 557, 558, 561, 562, 563, 564, 567, 569, 570, 571, 572, 573, 575, 576, 587, 592, 597, 598, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 644, 647, 656, 657, 669, 712, 716, 728, 731, 732, 738, 740, 757, 767, 794, 795, 817, 832, 855, 856, 857, 863, 869, 877, 878, 889, 899, 900, 907, 908, 909, 910, 911, 935, 936, 976, 985, 987, 997, 1005, 1026, 1028, 1030, 1031, 1034, 1035, 1037, 1038, 1040, 1041], "180": [34, 119, 136, 245, 246, 247, 250, 251, 292, 296, 386, 500, 1009], "1800": 50, "18000": [353, 375], "18010": 1043, "18016": 1041, "18020": 1045, "1804243": 374, "18052": 1042, "18094": 1045, "181": [217, 218, 278, 302, 386, 1009], "18114": 1042, "18121": 1042, "18124": 1042, "18149": 1042, "18167": 1042, "18170": 1044, "18176": 1042, "18197458": 362, "182": [151, 254, 276, 302, 386, 414, 1009], "18222": 1042, "18256": 1042, "18266": 1042, "18269": 1042, "18278": 1042, "18280": 1042, "18293": 1042, "18298": 1045, "183": [326, 386, 988, 1030], "18302": 1042, "18310": 1044, "18326": 1042, "18328": 1043, "18334": 1042, "18341": 1042, "18343": 1042, "18368": 1043, "18370": 1042, "18393": 1043, "18394": 1042, "184": [4, 170, 199, 302, 386, 1021], "18405": 1042, "18406": 1042, "18410": 1042, "18429": 1042, "18433": 1043, "18444": 1043, "18447": 1042, "18459": 1043, "1847": 7, "18482": 1044, "18488": 1046, "185": [53, 148, 160, 281, 282, 377, 386, 856, 857, 1009], "1850": [6, 375], "18508": 1042, "18510": 1042, "18525": 1042, "18527": 1042, "18528": 1042, "18543": 1043, "18545": 1042, "18555": 1048, "185654": 263, "18565811e": 1022, "185659": 188, "18595": 1042, "186": [199, 302, 386, 785, 987], "18607": 1042, "18612": 1042, "18622": 1042, "18639": 1042, "18649": 1043, "1865": 8, "18682": 1042, "18689": 1047, "18691": 1042, "187": [260, 386, 582, 988, 1021, 1032], "1871": 1002, "18723": 1046, "18736": 1043, "1874": 1002, "18746": 1042, "1875": 968, "18768": 1042, "188": [64, 68, 148, 156, 377, 386, 582, 1009], "1880": 386, "18805": 1045, "18815268": 242, "188153": 242, "18818427": 665, "18832": 1044, "18842": 1043, "18843": 1048, "18846": [375, 486, 487], "1887": 352, "18898": 1043, "189": [103, 106, 199, 256, 276, 386, 896, 1000, 1009], "18925": 1043, "189267": 263, "18959": 1043, "189631": 188, "18964": 1043, "18975": 1044, "189830": 320, "18987": 1042, "19": [4, 13, 42, 127, 136, 156, 161, 169, 203, 225, 250, 309, 310, 326, 377, 378, 384, 394, 397, 399, 400, 407, 415, 418, 442, 490, 514, 515, 516, 534, 538, 539, 545, 547, 548, 555, 556, 557, 558, 562, 563, 564, 580, 587, 605, 646, 656, 657, 664, 665, 666, 669, 670, 672, 674, 676, 685, 705, 778, 782, 796, 810, 822, 827, 828, 830, 831, 845, 846, 865, 876, 897, 901, 904, 907, 908, 909, 910, 976, 987, 997, 1005, 1009, 1026, 1028, 1030, 1031, 1032, 1033, 1035, 1038, 1047], "190": [11, 123, 217, 269, 296, 375, 386, 496], "1900": 50, "19002": 1043, "19004": 1043, "19011": 1043, "19024": 1043, "19035": 1043, "1903908407869": 202, "19041": 1043, "19046": 1043, "19047631514961908949361222113": 13, "1905": [148, 377], "19052": 1043, "19055": 1043, "19069": 1043, "19075": 1045, "19085": 1044, "191": [386, 988], "19112072e": 180, "19126": 1042, "19145": 353, "19158": 1044, "19159": 1043, "19162": 1043, "19172": 1043, "19174891": 301, "19179": 1042, "19182": 1042, "19198": 1043, "192": [123, 386, 1030], "19210": 1043, "19211": 1042, "19234": 1042, "19244": 1043, "19263": 1043, "19271": 1042, "19278": 1043, "192913": 263, "192938": 13, "19296": 1043, "19297": 1043, "193": [246, 252, 386, 414, 713, 783, 1000, 1009], "19308": 1042, "1931": 80, "19310": 1043, "19336": 1043, "19346747e": 1022, "193548": 217, "19356": 1043, "1936": 377, "19365": 1043, "19390": 1043, "19391": 1043, "193949": 263, "194": 302, "1940": 217, "19401": 1043, "19407": 1042, "19411": 1043, "19415": 1043, "19417": 1042, "194239": 386, "19426": 1043, "19428": 1043, "19438": 1044, "19459": 1043, "19472": 1043, "19473": 1043, "1948": 19, "19483": 1043, "19490": 1044, "19491": 1043, "19499": 1043, "195": [491, 492], "1950": [377, 987], "1951": 217, "195133": 386, "19520": 1043, "19522393": 214, "19527": 1043, "19564": 1043, "19568": 1043, "19571": 1043, "19579": 1042, "1958": [156, 412, 414, 530], "19580": 1042, "196": [148, 896, 1000], "1960": [625, 714], "19616": 1043, "19631": 1043, "1964": [688, 692, 875, 887, 984], "19641": 1043, "19643": 1043, "19646": 1042, "19659": 1042, "19662693": [839, 840], "19664": 1046, "19669": 1043, "196795181": 13, "19680": 1044, "196861": 188, "19689": 1044, "197": 232, "19703": 1042, "1972": 377, "19721": 1042, "19727": 1042, "1973": [377, 405], "19732": 1042, "19733": 1043, "19734": 1043, "1974": [407, 415, 708], "19747": 1044, "1975": 990, "19752": 1043, "19766": 1043, "197666": 263, "1977": 633, "1978": [217, 983], "19784": 1043, "19788": 1043, "1979": [407, 722, 766], "19790": 1043, "19794": 1044, "19799": 1043, "198": [191, 218, 1009, 1030], "1980": 377, "19803308": 85, "1981": [217, 983], "19829832": 214, "1983": [407, 728, 879], "19836": 1043, "1984": [80, 81, 409, 472, 907, 908, 1003], "19847": 1042, "1985": [169, 407, 703, 713, 783], "1986": [977, 1003], "19869": 1043, "1987": [407, 605, 606, 789, 790], "198766": 263, "19879": 1043, "1988": 377, "19883": 1043, "19888": 1042, "1989": [269, 633, 785, 856, 857, 983, 990], "199": [645, 788, 1002], "1990": 375, "19906": 1043, "19908": 1043, "1990a": 405, "1991": [514, 515, 516], "19916": 1044, "1992": [148, 375, 377, 411, 414, 565, 566, 643, 983], "19922": 1042, "19924": 1042, "1993": [148, 377, 472, 662, 683, 684, 1003], "19934": 1043, "19939": 1042, "1993apr6": 70, "1994": [148, 375, 377, 642], "19948": 1043, "1995": [148, 260, 377, 405, 414, 551, 552, 829, 896, 988], "1996": [27, 127, 407, 414, 418, 442, 514, 515, 516, 553, 554, 997], "1997": [112, 375, 412, 414, 533, 552, 688, 692, 983, 984, 987], "1998": [127, 260, 375, 377, 412, 414, 553, 554, 829, 834, 865, 988, 989, 991, 997, 1001], "19982": 1042, "1999": [159, 375, 405, 407, 409, 412, 414, 435, 448, 455, 467, 472, 532, 539, 553, 554, 557, 558, 720, 893, 901, 902, 904, 905, 993, 999], "19th": 407, "1_": 997, "1_000": [5, 27, 34, 48, 72, 100, 127, 151, 156, 158, 170, 232, 257, 346, 535, 537, 699, 818, 826], "1d": [112, 114, 166, 170, 200, 232, 284, 287, 296, 297, 310, 345, 358, 380, 387, 389, 393, 394, 408, 413, 462, 465, 615, 628, 631, 651, 655, 658, 661, 682, 701, 710, 711, 717, 726, 727, 731, 735, 739, 780, 781, 784, 793, 841, 842, 843, 844, 845, 847, 849, 850, 851, 864, 915, 919, 920, 950, 974, 988, 1009, 1014, 1021, 1030, 1035, 1036, 1037, 1039, 1043, 1044], "1dlabel": 382, "1e": [5, 6, 7, 10, 17, 26, 46, 95, 148, 151, 154, 156, 157, 158, 159, 160, 163, 169, 179, 192, 199, 200, 206, 213, 217, 223, 228, 234, 239, 245, 248, 251, 258, 268, 271, 301, 312, 318, 321, 329, 336, 338, 346, 351, 386, 419, 441, 445, 450, 457, 460, 469, 470, 476, 480, 481, 482, 529, 530, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 557, 558, 559, 560, 590, 595, 604, 606, 607, 609, 611, 612, 613, 617, 618, 620, 621, 623, 625, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 687, 688, 689, 690, 691, 692, 693, 725, 738, 782, 794, 795, 810, 834, 835, 836, 837, 838, 839, 840, 848, 856, 857, 864, 894, 895, 899, 900, 901, 902, 903, 904, 905, 973, 976, 987, 991, 995, 997, 1001, 1019, 1023, 1038, 1043, 1044, 1045], "1e0": [151, 234, 251, 268, 976], "1e1": [151, 157, 199, 234, 338], "1e15": 160, "1e2": [10, 151, 158, 234, 251, 338, 743], "1e3": [6, 7, 10, 151, 157, 163, 234, 271, 321, 976, 1019], "1e4": [271, 657, 677, 893, 999], "1e5": [6, 156, 180, 182, 189, 271, 611, 612, 613, 617, 618, 620, 621, 623, 888, 893, 999, 1019, 1021], "1e6": [8, 10, 192, 232, 351, 353, 366, 534, 893, 987, 999], "1e7": 386, "1er": 415, "1f": [13, 20, 50, 53, 98, 179, 199, 232, 245, 247, 267, 315, 322, 352, 353], "1gb": 366, "1kastner": 1037, "1m": 953, "1mb": [367, 1035], "1nn": 377, "1or": 415, "1px": 302, "1qlettinn8oi": 351, "1st": [0, 4, 60, 90, 159, 200, 310, 877, 878], "1x4": 415, "1x5": 415, "1x6": 415, "1z": 415, "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 138, 140, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 377, 378, 380, 382, 384, 385, 386, 387, 389, 392, 393, 394, 397, 398, 399, 400, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 480, 481, 482, 483, 491, 494, 498, 499, 502, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 703, 704, 705, 706, 709, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 760, 761, 764, 765, 766, 768, 770, 771, 772, 773, 775, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 889, 890, 892, 893, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 914, 915, 916, 917, 919, 920, 921, 925, 928, 934, 935, 936, 937, 938, 939, 940, 941, 942, 948, 949, 950, 951, 952, 953, 955, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1009, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1035], "20": [4, 7, 8, 13, 15, 19, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 55, 61, 67, 78, 82, 92, 95, 102, 104, 113, 117, 120, 121, 124, 128, 132, 133, 135, 140, 143, 144, 145, 148, 157, 168, 170, 171, 175, 176, 181, 188, 189, 191, 195, 196, 198, 199, 200, 203, 208, 211, 212, 213, 214, 216, 218, 223, 232, 238, 247, 249, 250, 260, 261, 263, 264, 266, 271, 272, 274, 278, 279, 283, 287, 288, 289, 290, 291, 294, 302, 309, 310, 311, 316, 317, 318, 319, 321, 325, 326, 329, 335, 337, 341, 343, 348, 352, 353, 358, 359, 373, 377, 380, 382, 384, 385, 386, 397, 407, 414, 415, 439, 444, 445, 447, 462, 463, 467, 469, 470, 476, 486, 487, 488, 489, 490, 492, 494, 495, 498, 500, 502, 503, 509, 510, 513, 514, 521, 529, 534, 535, 540, 543, 544, 546, 550, 553, 554, 557, 558, 559, 560, 561, 567, 568, 580, 587, 588, 590, 592, 595, 597, 627, 628, 643, 647, 656, 664, 665, 666, 674, 676, 694, 702, 706, 711, 714, 722, 723, 736, 753, 754, 764, 789, 790, 794, 795, 796, 810, 821, 822, 823, 826, 828, 831, 832, 833, 836, 837, 844, 845, 856, 857, 858, 859, 861, 863, 864, 872, 873, 874, 875, 880, 894, 895, 897, 898, 903, 906, 911, 917, 919, 920, 923, 965, 976, 983, 987, 990, 993, 994, 997, 1000, 1005, 1009, 1011, 1012, 1015, 1021, 1025, 1026, 1028, 1030, 1036, 1039, 1042, 1044, 1045], "200": [33, 34, 44, 50, 54, 60, 75, 85, 87, 98, 113, 124, 131, 155, 185, 194, 200, 203, 204, 205, 211, 216, 221, 240, 245, 261, 267, 269, 270, 305, 308, 327, 337, 338, 359, 362, 375, 382, 392, 412, 414, 419, 438, 452, 466, 469, 470, 520, 531, 532, 533, 536, 537, 538, 541, 545, 582, 647, 649, 669, 677, 690, 810, 856, 857, 897, 901, 902, 903, 904, 905, 1002, 1009], "2000": [15, 26, 40, 50, 75, 96, 102, 175, 248, 251, 260, 278, 299, 319, 352, 375, 377, 407, 408, 414, 419, 450, 460, 531, 532, 557, 687, 689, 691, 740, 785, 794, 845, 875, 887, 984, 987, 993, 999, 1014, 1022], "20000": [19, 97], "200000": [217, 864], "20002": 1043, "2001": [27, 156, 171, 259, 404, 407, 414, 435, 449, 450, 451, 460, 509, 557, 558, 562, 563, 626, 632, 637, 643, 689, 694, 732, 785, 880, 892, 924, 977, 979, 983, 987, 993, 995, 997, 999, 1002], "2002": [63, 405, 407, 414, 435, 446, 591, 592, 723, 753, 846, 894, 979, 987], "20023": 1043, "2003": [12, 404, 407, 412, 415, 449, 450, 460, 511, 513, 687, 691, 834, 836, 983, 984, 989, 999, 1038], "20030": 1043, "20031": 1044, "2004": [5, 148, 260, 278, 375, 377, 407, 409, 412, 471, 533, 605, 606, 687, 691, 703, 740, 780, 895, 981, 983, 984, 989, 1002, 1021], "2005": [25, 27, 81, 377, 405, 435, 437, 848, 983, 990, 1000], "20056": 1043, "2006": [11, 296, 375, 414, 417, 460, 496, 555, 556, 563, 564, 608, 609, 612, 617, 620, 647, 664, 665, 738, 785, 786, 794, 834, 892, 909, 910, 983, 987, 989, 992, 999, 1000], "2007": [0, 38, 187, 375, 407, 416, 438, 450, 452, 458, 460, 564, 654, 689, 715, 731, 734, 755, 756, 792, 979, 983, 985, 987], "20072": 1043, "2008": [12, 409, 411, 412, 476, 532, 561, 588, 643, 662, 683, 684, 690, 714, 723, 753, 829, 834, 838, 855, 981, 984, 985, 987, 988, 989, 992, 993, 1002], "20087": 1043, "2009": [111, 114, 115, 126, 183, 407, 411, 412, 414, 415, 517, 518, 526, 529, 535, 536, 538, 539, 542, 545, 551, 557, 558, 633, 669, 677, 694, 830, 907, 908, 935, 936, 983, 987, 988, 994, 1003], "200_000": [864, 1046], "200j": 140, "200m": 375, "200x": 1030, "201": [123, 148, 377, 582], "2010": [0, 47, 67, 79, 170, 265, 266, 404, 407, 409, 411, 412, 420, 473, 534, 702, 706, 717, 718, 737, 824, 856, 857, 979, 983, 987, 991, 1001, 1006, 1030], "2011": [0, 47, 170, 221, 386, 412, 415, 533, 536, 538, 539, 545, 588, 625, 636, 656, 727, 977, 991, 1001, 1006, 1030], "20117": 1043, "2012": [0, 81, 405, 414, 553, 554, 561, 637, 740, 976, 980, 987, 1006, 1030], "2013": [0, 175, 377, 407, 411, 412, 534, 723, 753, 979, 987, 1006, 1031, 1032], "2014": [0, 52, 374, 412, 414, 417, 528, 605, 606, 620, 621, 656, 690, 856, 857, 935, 936, 984, 991, 1012, 1033], "20145": 1044, "2015": [0, 170, 374, 706, 719, 720, 721, 856, 857, 987, 994, 1012, 1034, 1035], "201520": 188, "20155": 1043, "20159": 1043, "2016": [0, 225, 374, 407, 976, 1035, 1036], "20161": 1043, "20165": 1043, "2017": [0, 260, 374, 405, 407, 418, 442, 987, 1036, 1037], "2018": [0, 199, 217, 415, 448, 976, 987, 1005, 1012, 1037, 1038], "2019": [0, 170, 378, 407, 450, 460, 690, 984, 987, 994, 997, 1038, 1039, 1040], "2020": [0, 375, 1040, 1041, 1042, 1043], "20200": 1043, "20207": 1043, "20209": 1043, "2021": [0, 378, 380, 669, 1042, 1043], "2022": [0, 367, 414, 703, 997, 1044, 1045], "2023": [0, 392, 405, 1045, 1046], "20231": 1043, "2024": 1047, "20240": 1043, "20250": 1043, "20272": 1043, "20297": 1043, "203": 53, "20312": 1043, "203174": 188, "20326": 1043, "20331": 1045, "2034": [351, 375], "20380": 1043, "20385": 1043, "2039": 263, "204": [995, 1000], "20408": 1044, "20415": 1045, "20416": 1043, "20431": 1043, "20477": 1043, "20512": 1043, "20515": 1043, "20521": 1043, "20524": 1046, "20526": 1043, "20528": 1043, "20531": 1043, "20534": 1043, "20552": 1043, "20554": 1043, "20560": 1043, "20567": 1044, "20583": 1043, "20597": 1043, "20617": 1045, "20619": 1043, "20638": 1043, "20640": [117, 164, 375, 488], "20652": 1043, "20653": 1044, "20657": 1043, "20673": 1043, "20683": 1043, "207": [302, 1030], "2071716": [839, 840], "20727": 1043, "20729": 1043, "20752": 1043, "2075215": 214, "20753": 1044, "20761": 1043, "207667": 263, "2079": 265, "208": [148, 283, 377], "20802": 1045, "20803": 1044, "20811": 1044, "20842": 1043, "20843": 1043, "20860": 1044, "20880": 1043, "208864": 188, "20899": 1043, "209": [198, 218, 738, 875, 1009], "20904": 1043, "20959": 1043, "20960": 1043, "20961": 1043, "20_000": 283, "20new": [375, 1023], "20newgroup": [30, 166, 177, 191, 215, 218, 300, 302, 487, 569, 656, 825, 983, 1009], "20news_hom": 375, "20newsgroup": [214, 373, 1030], "20th": 706, "21": [4, 13, 73, 148, 169, 188, 200, 217, 225, 250, 283, 302, 307, 309, 321, 323, 346, 349, 377, 378, 382, 384, 397, 404, 414, 415, 439, 443, 472, 476, 527, 530, 559, 560, 561, 567, 568, 586, 587, 589, 625, 667, 685, 751, 796, 798, 810, 822, 865, 872, 874, 880, 897, 913, 935, 979, 983, 988, 997, 1005, 1009, 1026, 1028, 1030, 1031, 1033, 1037, 1038, 1040], "2100": [50, 318], "2102": 542, "21020": 1045, "21026": 1044, "21032": 1044, "21038": 1044, "2107": 265, "21078": 1044, "21079": 1044, "21080": 1043, "21086": 1044, "21093": 1043, "211": [247, 252, 265, 320, 328, 352, 875, 887, 1009], "21109": 1044, "21114": 1044, "211217613": 1038, "21130": 1043, "21145": 1043, "21148": 1044, "2117": 329, "21177": 1044, "21179": 1043, "21194": [46, 1043], "21195": 1043, "21199": 1043, "212": [123, 148, 159, 161, 265, 328, 340, 349, 377, 467, 498, 993, 1009, 1021], "21219": 1044, "212197e": 217, "21243": 46, "21251": 1043, "2126": 238, "21271": 1043, "21278": 1044, "21295": 1043, "21298": 1044, "21301203": 154, "213056e": 217, "21310": 1044, "21316": 1044, "21330": 1044, "21334": 1044, "21336": 1043, "21340": 1043, "21341": 1044, "21351": 1043, "21389": 1043, "2139": [199, 217], "214": [152, 582], "21408": 1044, "21425": 1044, "21430": 1044, "21432": 1044, "21434": 1044, "21436": 1044, "21443888": 214, "21445": 1044, "21448": 1044, "21469": 1045, "21481": [1043, 1044], "21482": 1044, "21493": 1043, "215": [144, 149, 295, 297, 582, 1009], "21517": 1043, "21534": 1044, "21542": 1044, "21544347": 12, "21552": 1043, "21565": 1044, "2156660": 322, "21567": 1044, "21569": 1044, "21573": 1044, "21576": 1044, "21578": [8, 1043], "2159048": [651, 661, 682], "216": 1000, "21606": 1044, "21616": 738, "21617": 1044, "21632": 1044, "21694": 1043, "217": [533, 539], "21701": 1044, "21705": 1044, "2171": 7, "21713": 1044, "21724": 1044, "2173": [187, 654, 983], "21735": 1044, "21741": 1043, "21762": 1044, "21767": 1044, "2179": 8, "218": [377, 469, 713, 783], "2180": 19, "21800": 1044, "21805": 1044, "21807": 1047, "21808": 1044, "21809": 1046, "21814": 1044, "21832": 1044, "21833": 1043, "21837": 1044, "21845": 1043, "21871": 1043, "21873": 1044, "21880": 1044, "21881": 1044, "21888": 1044, "218997": 188, "219": [143, 149, 259, 1009], "21901": 1044, "21915": 1043, "21917": 1043, "2192": [187, 654, 983], "21938": 1045, "21954": 1044, "21987": 1044, "21988": 1044, "21991": 1043, "21998": 1044, "22": [4, 13, 42, 92, 115, 116, 118, 132, 136, 163, 164, 166, 169, 170, 171, 173, 216, 241, 250, 269, 276, 278, 281, 285, 302, 305, 309, 314, 317, 320, 321, 322, 323, 326, 329, 353, 380, 384, 385, 397, 404, 435, 446, 470, 476, 486, 487, 493, 494, 502, 513, 522, 529, 535, 540, 543, 544, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 592, 607, 625, 626, 630, 632, 643, 645, 649, 651, 653, 656, 657, 659, 661, 663, 667, 686, 690, 700, 702, 711, 754, 766, 775, 780, 781, 785, 796, 797, 801, 810, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 843, 845, 847, 849, 850, 851, 856, 857, 858, 860, 863, 879, 890, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 930, 931, 979, 987, 997, 1005, 1009, 1026, 1028, 1030, 1033, 1038, 1041, 1043], "220": [44, 99, 106, 265, 276, 1009, 1030], "2200": [50, 375, 491], "22002": 1044, "22014": 1045, "22015": 1044, "22016": 1044, "22027": 1044, "220446049250313e": [469, 470, 476, 648, 649, 652, 653, 654, 680, 681], "22050": 1043, "22054": 1045, "22058": 1044, "22059": 1044, "22062": 1044, "22063": 1044, "22064": 1044, "22065": 1044, "221": [85, 130, 1033], "22106": 1044, "22108": 1044, "2211": 632, "22111": 1044, "22114": 1044, "22118": 1044, "22119": 1044, "22120": 1044, "22137": 1044, "22148": 1044, "22149": 1044, "22150": 1044, "22154": 1044, "22159": 1044, "22181": 1044, "22188": 1044, "22191": 1044, "22199": 1044, "222": [85, 130, 329, 1002], "22203": 1044, "22206": 1044, "22212": 1044, "22215": 1044, "22217": 1044, "22218": 1044, "2222": 654, "22223": 1044, "22235": 1044, "22237": 1044, "2224": 1032, "22240": 1044, "22248": 1044, "22249": 1044, "22254": 1044, "22255": 1044, "22268": 1045, "22269": 1045, "22284": 1044, "22288": 1044, "223": [85, 130, 148, 335, 349, 377, 1009], "22300": 1044, "22314355": 588, "22318": 1044, "22320": 1044, "2234": 8, "22356": 1044, "22361": 377, "2237": 8, "22370": 1044, "223745": 199, "224": [53, 85, 130, 407, 722], "22409": 1046, "22410": 1044, "22412": 1044, "22438": 392, "2246": [8, 217], "22476": 1044, "22486": 1044, "22493": 1044, "22498": 1044, "225": 414, "2250": 8, "22504": 407, "22506": 1046, "22508": 1044, "22518": 1045, "22525": 1044, "22526": 1044, "22527": 1045, "22537": 1044, "22548": 1044, "22553": 1044, "22554": 1045, "22562": 1045, "22566": 1044, "2257": 1023, "22578": 1044, "225806": 217, "22595": 1044, "226": [407, 418, 442], "22604": 1044, "22629": 1045, "22635": 1044, "22665": 1045, "22685": 1044, "22687": 1044, "22692": 98, "22694": 1044, "22695": 1044, "22696": 1044, "22697": 1044, "227": [260, 407, 722], "22710": 1045, "22735": 1044, "22747343e": 80, "22775": 1044, "22784907": 822, "228": [306, 313, 1009], "22806": 1044, "22808": 1044, "22830": 1044, "2284": 170, "22856": 1044, "2286": 375, "22866": 1044, "22868": 1044, "2287": 375, "2288": 375, "22891": 1044, "22898": 1045, "22899": 1044, "229": [6, 987], "22908": 1044, "22913": 1044, "22950": 1044, "22953": 1044, "22965": 1045, "22968": 1045, "22982": 1044, "22993": 1045, "22nd": 437, "22publish": 384, "22wheel": 384, "23": [4, 19, 26, 34, 50, 98, 127, 129, 148, 166, 180, 199, 222, 230, 240, 242, 250, 302, 309, 314, 317, 318, 319, 321, 322, 323, 326, 354, 377, 386, 397, 414, 420, 430, 438, 445, 450, 452, 460, 463, 465, 466, 473, 476, 477, 478, 480, 481, 482, 488, 490, 498, 499, 500, 502, 503, 508, 510, 512, 520, 522, 536, 537, 538, 541, 545, 552, 554, 556, 558, 559, 560, 563, 566, 567, 568, 605, 606, 609, 625, 628, 630, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 673, 676, 677, 678, 679, 715, 727, 775, 825, 831, 832, 833, 842, 850, 857, 860, 872, 879, 887, 888, 897, 900, 902, 905, 908, 910, 917, 919, 920, 930, 931, 936, 987, 1005, 1009, 1026, 1028, 1030, 1031, 1037, 1038, 1039, 1042], "230": 582, "2300": [50, 188], "23023": 1044, "23033": 1044, "23034": 1044, "23036": 1044, "23038": 1045, "23040": 1044, "23046": 1044, "23047": 1044, "23077": 1044, "23079": 1044, "23095": 1044, "23097": 1044, "23098": 1044, "23099": 1046, "231": [11, 296, 336, 349, 375, 407, 418, 442, 496, 582, 1009], "23101": 1045, "23113": 1044, "23115": 1044, "23127": 1045, "23139": 1045, "23149": [375, 495, 1044], "23194": 1044, "23197": 1045, "23198": 1044, "232": 987, "23210": 1045, "23214": 1044, "2323": [687, 691, 984], "23252": 1045, "23256": 1044, "23264": 1044, "23271": 1044, "23273": 1044, "23275": 1045, "2328": 255, "23299": 1044, "2331": 4, "23317": 1047, "2332": 4, "2333": 4, "2334": 4, "2335": 4, "23358": 1044, "2336": 386, "23370": 1044, "23395": 1044, "233mb": [6, 1019], "234": [53, 834, 838, 856, 857, 989], "2341": 522, "23410": 1044, "234137": 188, "23442": 1045, "23446": 1045, "23461": 1045, "23470": 1045, "23471": 1044, "23480": 1045, "235": 311, "235430": 263, "23548": 1044, "2357juan": [1044, 1045, 1046], "23585": 1045, "2359": 8, "23595": 1046, "2360": 8, "23604": 1045, "23608": 1044, "23619": 1045, "2363": 8, "23636": 1044, "23637": 1045, "2365": 8, "23668876": [651, 661, 682], "236720": 188, "23683": 1045, "23689075": [651, 661, 682], "237": [33, 35, 234, 359, 361, 1009, 1021], "23726": 1045, "23731": 1046, "23734": 1045, "237703": 188, "23773583": 80, "23786125": 195, "23798": 1045, "23819": [1045, 1046], "23833": 1044, "23834": 1045, "23865": 1045, "23874": 1045, "238744": 188, "23877": 1045, "2389": 8, "238955": 263, "239": 1030, "23905": 1045, "2391": 8, "23935": 1045, "2397": 8, "23977": 1045, "2399": 8, "23990": 1044, "23993": 1045, "24": [4, 5, 13, 66, 127, 145, 148, 166, 170, 175, 183, 238, 272, 283, 314, 315, 316, 318, 320, 321, 322, 323, 325, 326, 352, 378, 380, 384, 397, 399, 400, 407, 414, 415, 435, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 458, 460, 462, 467, 468, 469, 470, 471, 472, 473, 474, 487, 488, 489, 490, 494, 502, 513, 514, 515, 516, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 541, 542, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 611, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 696, 697, 698, 700, 706, 712, 724, 743, 750, 794, 795, 796, 799, 800, 810, 817, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 860, 862, 863, 864, 865, 868, 869, 871, 873, 874, 875, 876, 877, 879, 889, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 930, 931, 935, 962, 968, 976, 994, 997, 1005, 1009, 1026, 1028, 1030, 1038, 1039, 1040, 1041, 1043], "240": [4, 13, 44, 236, 243, 995, 1009, 1030], "2400": [8, 50], "24000": 518, "2401": 8, "24015": 1044, "24017": 1044, "24027": 1046, "2404": 8, "2405": 8, "24051": 1045, "24058": 1045, "24075": 1045, "24076": 1046, "24083": 1046, "24084": 1045, "24087": 1044, "241": [414, 565, 566], "2410": 542, "24140": 1046, "24141": 1045, "24145": 1046, "24146": 1045, "24160": 320, "242": [879, 1030], "24218": 1045, "24230": 1046, "24245": 1045, "24258": 1045, "24264": 1045, "24283": 1045, "243": 582, "2431": 473, "24317": 1045, "24338": 1045, "2435": 8, "24350": 1045, "24354": 1045, "2436": 8, "24365": 1045, "2438": 8, "243802": 300, "2439": 8, "244": [71, 76, 278, 582, 1009], "24404831511191221642141021252626109": 13, "24405": 1045, "2441": 217, "24412": 1045, "24421": 1045, "24433": 1045, "24446": 1044, "244466": 242, "24465": 1045, "2449": 386, "245": [193, 218, 999, 1009, 1032], "24512": 1045, "24523": 1045, "24528": 1045, "24538": 1045, "24539": 1045, "24543": 1045, "24556": 1045, "24568": 1046, "2459": 8, "245961": 124, "245mb": 353, "246": [183, 995, 1030], "2461": 8, "24617": 1045, "2463": 983, "24630": 1045, "24631": 1044, "24637": 1045, "24640578": 80, "24645": 1045, "2466": 8, "24667": 1045, "24668": 1046, "2467": 8, "24677": 1046, "24683": 1045, "24688": 1045, "24699": 1045, "247": [320, 323, 879, 1009], "24714": 1045, "24747": 1045, "24750": 1045, "24755": 1045, "24767": 1045, "24769": 1046, "248": [274, 276, 1009], "24838": 1047, "24849": 1045, "24855": 1045, "24856": 1045, "24871": 1046, "24873": 1045, "2487575": 175, "2487591": 175, "24882": 1046, "24889": 1045, "24894": 1045, "249": 141, "24935": 1046, "24951": 1045, "25": [4, 5, 6, 7, 9, 10, 11, 13, 19, 24, 26, 42, 45, 54, 55, 80, 85, 91, 102, 104, 115, 124, 136, 144, 145, 152, 163, 169, 179, 189, 203, 207, 218, 225, 228, 247, 260, 262, 276, 296, 299, 302, 305, 307, 311, 313, 320, 325, 326, 351, 359, 362, 366, 386, 411, 414, 415, 418, 442, 475, 479, 499, 502, 519, 568, 595, 616, 676, 731, 793, 813, 825, 851, 869, 874, 876, 877, 880, 888, 889, 891, 892, 933, 937, 968, 983, 987, 988, 990, 997, 1009, 1019, 1030, 1032, 1038, 1041], "250": [10, 65, 124, 175, 220, 342, 353, 491, 690, 976, 999, 1037], "2500": 987, "25000": 42, "2501": [148, 377], "25044": 1046, "250639": 188, "25067": 1045, "25077": 1045, "25080": 1045, "25089": 1045, "25093": 1046, "25094": 1045, "251": [106, 148, 222, 377], "25102": 1046, "25120": 1046, "25129": 1045, "25147": 1045, "25163598": 388, "25172": 1045, "25174": 1045, "25177": 1046, "25183501383331797": 268, "25186": 1046, "25188": 1045, "25190": 1046, "25193977": 988, "25196": 1046, "252": [148, 222, 377, 532, 875, 887], "25209": 1046, "25214": 1046, "25220": 1046, "25232": 1046, "25250": 1045, "25251": 1046, "25257": 1046, "25274": 1045, "25275": 1047, "25291": 1046, "25291366": 362, "25294": 1046, "25295": 1045, "25296": 1045, "25297": 1046, "25299": 1046, "253": [123, 532], "25308": 1046, "25312": 1045, "25334": 1046, "25341": 1045, "253445": 124, "25349312e": 180, "2535": [467, 472], "25354": 1045, "2536": 474, "25363": 1045, "25367": 1046, "25370": 1045, "25387": 1046, "25402": 1046, "25417": 1046, "25432": 1046, "25438": 1046, "25443": 1046, "25477": 1045, "2548": 195, "25490": 1046, "25499205": 534, "255": [48, 98, 283, 301, 311, 318, 375, 414, 491, 492, 559, 560], "25500": 1045, "25506": 1046, "25511": 1045, "25531": 1046, "25563": 1045, "25570": 1045, "25587": 1046, "25589": 1045, "256": [42, 48, 53, 123, 311, 367, 375, 407, 414, 447, 466, 535, 544, 561, 855, 887, 897, 1023, 1044], "25601": 1046, "25619": 1045, "25629": 1046, "25638": 1045, "25659": 1046, "25664": 1045, "25672": 1046, "25677": 1046, "2568": 1039, "25694": 1045, "25697": 1046, "257": [222, 258], "25704": 1045, "25713": 1046, "25719016": 988, "25732": 1046, "25733": 1046, "25744": 1045, "25747": 1045, "25752": 1046, "25774": 1045, "25784": 1046, "2579": 690, "258": 222, "25805": 1046, "25813": 1046, "25814": 1046, "25815": 1046, "259": [11, 215, 222, 296, 375, 414, 496, 565, 566], "259031": 188, "259297": 188, "25931": 1046, "25956": 1046, "25973": 1046, "25987": 1046, "25991": 1048, "25th": [4, 238, 877], "26": [4, 46, 54, 80, 97, 156, 169, 214, 237, 243, 273, 326, 386, 568, 646, 726, 780, 875, 887, 936, 987, 997, 1030, 1033, 1034, 1042, 1048], "260": [259, 1043], "26019": 1046, "26021": 1046, "26033": 1046, "2605": 690, "26082": 1046, "26093": 1046, "26106": 1046, "26108": 1046, "26113448": 145, "26121": 1046, "26163": 1047, "26194": 1046, "262": 1030, "26207": 1046, "26242": 1046, "26243": 1047, "26253567e": 80, "26264": 1046, "26267": 1047, "26278": 1047, "26286": 1046, "26286057": 214, "26289": 1046, "26299": 1047, "26315": 1047, "26318": 1046, "26323": 1046, "263234": 242, "26323428": 242, "26325": 1046, "26333": 1046, "26337": 1046, "26362917": 214, "26366": 1047, "263758": [581, 585], "26376": 1046, "26385": 1046, "26386": 1046, "26386883": 154, "26391": 1047, "264": 15, "2640": 830, "26400": 1046, "26410": 1047, "26411": 1047, "26416": 1046, "26424": 1046, "26433": 1046, "26454": 1046, "26459": 1047, "26464": 1047, "26466": 1046, "265": [15, 104, 106, 232, 732, 834, 838, 989, 1009], "26503": 1046, "26506": 1047, "26521": 1046, "2652124": 811, "26525": 1047, "26551": 1046, "26566": 1046, "26579": 1046, "26593496": 214, "266": 15, "26600": 1046, "26602": 1046, "26616": 1047, "26634": 1047, "26642044": 664, "26644": 1046, "26648": 1047, "26653": 1046, "26657": 1046, "2666": 987, "2667": 496, "26674": 1047, "26683": 1047, "267": [80, 83, 1009, 1030], "2671": 997, "26721": 1047, "26734": 1047, "26736": 1047, "26744": 1047, "26748": 1046, "2675": 7, "26754": 1046, "26760": 1046, "26765": 1047, "267703": 54, "26772": 1046, "26786": 1047, "26789": 1047, "268": 232, "26814": 1046, "268147": 263, "26828": 1047, "26830": 1047, "26831": 1047, "26837": 1048, "26840": 1047, "26855": 1047, "26862": 1047, "26893": 1046, "26896": 1047, "269": [262, 276, 509, 1009], "26903": 1046, "26909": 1047, "26913": 1046, "2692": 997, "26931": 1046, "26934744": 105, "26940": 1046, "26944": 1047, "26957": 1047, "26th": [407, 723, 753, 987], "27": [4, 6, 13, 19, 31, 47, 54, 98, 106, 325, 326, 347, 377, 407, 415, 515, 522, 603, 711, 785, 786, 880, 900, 987, 997, 1009, 1022, 1030, 1032], "270": [183, 246, 326], "27000": 217, "27002": 1046, "27005": 1047, "27006": 1047, "27017": 1047, "27018": 1047, "27044": 1046, "27054655": 214, "27058": 1047, "27098": 1047, "27100": 1047, "27104": 1047, "27110": 1047, "27137": 1047, "27139": 1047, "2714": 238, "271411": 242, "27161": 1047, "27161955": 145, "27166": 1047, "27167": 1046, "27179": 1047, "27185": 1047, "272": [210, 218, 1009], "27204": 1047, "27219": 1047, "272214": 582, "27239": 1047, "27240": 1047, "27243": 1046, "27250": 1047, "27252": 1047, "2727": 556, "27274": 1047, "27277": 1047, "27291": 1047, "27292": 1046, "27301": 1047, "27308": 1047, "27309": 1047, "27311": 1046, "27314": 1047, "27315": 1047, "27328": 1047, "27336": 1047, "2734": 386, "27344": 1048, "27372": 1047, "27389": 1047, "274": [351, 354, 509, 1009], "27417": 1047, "27431": 1047, "27438": 1047, "27456": 1048, "27468": 1046, "27478": 1047, "27490": 1047, "27491": 1048, "27499706": 12, "275": [4, 326, 1033], "27500": 1047, "27526": 1048, "27538": 1047, "27544": 1047, "27556": 1047, "27558": 1047, "27560": 1048, "27566": 1048, "275706": 54, "27573": 1046, "27576": 1048, "27577": 1047, "27580": 1046, "27583": 1046, "27584": 1048, "275851": 242, "2759": [891, 892], "27597342": 85, "276": [260, 351], "27601": 1047, "27614": 1047, "27624": 1047, "2763": [420, 473], "27636": 1048, "27645": 1047, "27650": 1047, "27651": 1047, "27668": 1047, "27670": 1047, "27675": 1047, "27678": 1047, "277": [995, 1032], "27700": 1048, "27702": 1047, "27710": 1047, "27718": 1047, "27720": 1047, "27721": 1047, "27734": 1047, "27757": 1047, "27760": 1047, "27772182": 13, "278": [179, 218, 377, 839, 840, 1009], "2780": 386, "27801": 1047, "27817": 1047, "27821": 1047, "27828": 1047, "27834": 1047, "27835": 1047, "27841": 1047, "27844": 1048, "27865": 1047, "27898": 1047, "27899": 1047, "279": [102, 106, 160, 983, 1009], "27904": 1048, "27937": 1048, "27979": 1047, "27990": 1048, "27990247": 322, "28": [4, 66, 124, 148, 169, 215, 269, 301, 325, 326, 377, 386, 407, 411, 448, 455, 997, 1019, 1030, 1033, 1036], "280": 326, "28009951": 822, "2802": 19, "28040": 1048, "28048": 1047, "28051": 1048, "28053": 1048, "28074": 1047, "28085": 1048, "28090": 1047, "28092": 1048, "28095": 1047, "28102": 1048, "28111": 1047, "28121": 1047, "28136": 1048, "28160": 1048, "28165": 1047, "28167": 1047, "2818": 468, "28184": 1047, "28187": 1048, "28188": 1047, "28191": 1047, "28195": 1047, "28198": 1047, "282": [1019, 1030], "28205": 1048, "28207552": 214, "28210": 1048, "28222": 1047, "28225276": 53, "2823": 329, "28233": 1047, "28235": 1047, "28240": 1047, "28241": 1047, "28247": 1047, "2825": 0, "28256": 1047, "28261": 1048, "28262": 1047, "28263": 1047, "28295": 1047, "2830": 0, "28303565": 322, "28306": 1048, "28327": 1047, "2833": 386, "28352": 1048, "28360": 1048, "28365": 1047, "28377": 1047, "28385": 1047, "28399": 1048, "284": [197, 218, 647, 1009], "28407": 1048, "28425": 1048, "28432": 1048, "28435": 1048, "28471": 1048, "28483": 1048, "28491": 1048, "28498": 1048, "285": [242, 326, 721], "28521": 1048, "28552": 1048, "28557": 1048, "28582": 1048, "286": 414, "28604": 1048, "28651": 1048, "28664": 1048, "28670": 1048, "28692": 1048, "287": [91, 93, 170, 999, 1009], "28718": 1048, "28722": 1048, "28763": 1048, "28768": 1048, "2879": 1037, "288": [533, 539], "28808734": 203, "28822": 1048, "28843": 1048, "28847": 1048, "289": 169, "28975": 1043, "28x28": 301, "29": [81, 92, 152, 156, 190, 199, 203, 216, 218, 225, 238, 320, 326, 377, 414, 557, 558, 688, 692, 778, 794, 851, 983, 984, 1001], "290": [326, 352, 686, 687, 691, 984], "290075": 188, "290584": 300, "291": [148, 352, 375, 377, 1009], "2914": 492, "292": [397, 414, 732], "2928359": 214, "293": 232, "2939931": 322, "29473397": [839, 840], "295040e": 217, "295505e": 217, "296": 999, "2961": 649, "296575": 188, "297": 375, "298": [38, 68, 995, 1009], "298688": 260, "29898468": 214, "299": [112, 678], "299546e": 217, "2_": 979, "2_000": 111, "2_2": [644, 645, 650, 651, 652, 653, 654, 658, 659, 660, 661, 670, 679, 680, 681, 682], "2_f": 650, "2_fro": [651, 660, 661, 682], "2_poli": 260, "2_y": 989, "2c": [641, 650, 670, 671, 672, 673, 685, 979], "2d": [4, 33, 36, 39, 41, 44, 47, 48, 49, 53, 61, 62, 68, 89, 90, 94, 96, 99, 101, 105, 106, 130, 146, 166, 193, 200, 205, 220, 221, 222, 225, 228, 231, 232, 292, 325, 326, 335, 338, 360, 374, 376, 380, 382, 389, 394, 407, 408, 412, 415, 417, 439, 450, 460, 462, 465, 479, 486, 488, 489, 490, 491, 492, 498, 499, 500, 502, 508, 512, 531, 539, 547, 582, 584, 633, 641, 655, 670, 689, 735, 776, 820, 824, 828, 866, 915, 919, 920, 935, 950, 973, 974, 981, 983, 984, 987, 994, 998, 1003, 1009, 1014, 1020, 1030, 1034, 1037, 1038, 1039, 1042, 1044], "2darrai": 382, "2dlabel": 382, "2e": [185, 274], "2e6": 987, "2ec5ac": 309, "2f": [5, 8, 11, 13, 19, 31, 39, 42, 44, 46, 50, 52, 62, 64, 67, 85, 92, 98, 104, 124, 127, 131, 132, 143, 169, 170, 175, 179, 188, 190, 195, 199, 214, 215, 216, 217, 228, 232, 238, 259, 263, 264, 266, 268, 269, 270, 291, 292, 299, 307, 310, 319, 338, 351, 352, 362, 408, 411, 414, 694, 823, 826], "2fbf01908075": 703, "2fx": 248, "2g": [222, 225, 695, 1041], "2h": 413, "2k": 163, "2l": [417, 620], "2n": [694, 979, 991], "2n_": 983, "2nd": [60, 90, 159, 310, 407, 418, 442, 528, 997, 1045], "2t_p": 267, "2x": 1030, "2x2": [335, 407, 751], "2x_iy_im": 375, "31": [4, 68, 70, 79, 217, 288, 318, 325, 326, 404, 415, 498, 559, 560, 595, 647, 669, 677, 952, 988, 1030], "310": [184, 218, 1009], "3109306": 154, "311": 352, "312": [127, 1033], "3121": 706, "313": 1021, "313276e": 217, "315": [50, 68, 283, 377, 1009], "316": [21, 22, 30, 35, 156, 160, 609, 612, 623, 875, 1009], "31622776601683794": 138, "3164764": [199, 217], "317": 156, "31760": 983, "318": [134, 136, 250, 252, 352, 448, 1009], "318387": 300, "319": [152, 1023], "31973683": 214, "31bit": 1041, "31st": [200, 878], "32": [4, 5, 13, 51, 92, 168, 171, 237, 261, 276, 319, 326, 349, 374, 378, 385, 394, 404, 414, 415, 443, 562, 563, 580, 587, 632, 674, 878, 880, 919, 920, 952, 995, 997, 1009, 1022, 1030, 1033, 1036, 1038, 1039, 1042, 1043, 1044, 1047], "320": [352, 375, 976, 1001, 1030], "3204": 1036, "321": 91, "321301": 25, "322": [6, 91, 469, 470], "3221": [690, 984], "323": [91, 232], "323200": 25, "324": [91, 215, 218, 375, 1009], "324084": 188, "3245": [690, 984], "325": 91, "325198e": 217, "3252": 595, "326": [91, 163, 165, 1009], "32634568": 203, "3264": 7, "327": [26, 204, 218, 727, 1009, 1021], "3272984419327777": 356, "3273": 743, "327407": 242, "327605": 242, "32767": 1041, "32782448": 154, "3279": 7, "328": [24, 28, 727, 1009], "3288": 542, "329": 448, "329616": 188, "32987858": 563, "32bit": [366, 952], "32x32": 377, "33": [4, 80, 199, 238, 320, 326, 375, 377, 384, 385, 386, 407, 415, 459, 530, 635, 646, 710, 711, 726, 727, 735, 740, 780, 781, 784, 802, 823, 825, 827, 886, 910, 969, 983, 987, 997, 1019, 1030, 1038], "330": 326, "33035714": 360, "331263": 188, "3315057": [821, 822], "3317": 199, "332": [352, 887], "333": [325, 331, 841, 1009], "3333": 496, "333333": 217, "33333333": [849, 997], "334": 154, "334795": 263, "335": [4, 338, 349, 1009], "335919": 300, "336": [127, 130, 136, 386, 997, 1009], "336188": 300, "3367": 1037, "337": 386, "3375": 320, "338": 238, "3383": 7, "3384": 352, "3387": 352, "3397": [662, 683, 684], "33rd": [896, 1000], "34": [4, 13, 124, 136, 148, 149, 151, 288, 302, 325, 326, 360, 377, 411, 518, 527, 568, 595, 647, 665, 714, 761, 1009, 1019, 1030], "340": [234, 325, 352], "34118": 375, "34125758": 214, "3415": [662, 683, 684], "341523": 300, "3419": 263, "341949": 188, "342": 352, "34279478": 214, "3433": 7, "34346583": 53, "3445": 7, "345": [148, 377], "34545455": 983, "3456": 7, "34586917": 214, "346": [414, 499, 553, 554], "3467": 613, "347717": 124, "348": [42, 67, 68, 96, 106, 1009], "34867495": 988, "349": [111, 386, 551], "34990341": 85, "35": [4, 6, 7, 9, 11, 55, 71, 113, 134, 169, 170, 178, 187, 228, 278, 310, 325, 326, 542, 646, 647, 654, 700, 704, 705, 724, 738, 753, 779, 786, 832, 976, 983, 987, 993, 994, 997, 1019, 1023, 1030, 1032], "350": [169, 229, 243, 352, 1009], "351": [329, 331, 1009], "351390": 260, "352": [260, 352, 386], "352124": 188, "35278655": 214, "353": [97, 106, 1009, 1023], "3534": 19, "3539": 70, "354": 352, "354394": 124, "3551": 7, "355440": 260, "355445": 124, "356": 995, "356497": 124, "3565178": 952, "357": [122, 136, 148, 377, 498, 900, 1009], "3573": 822, "3577618906572577": 316, "35788": 1023, "3582": 7, "358295": 188, "358990": 188, "3591": 1039, "36": [4, 6, 7, 13, 14, 97, 148, 157, 169, 217, 238, 341, 377, 386, 414, 415, 553, 554, 568, 732, 756, 987, 1023, 1030], "360": [111, 551], "360000": 300, "36047253": 214, "361": [375, 414, 553, 554], "362176": 320, "363": 13, "3635": 822, "364": [352, 469, 470, 1031], "365": [409, 471], "3659": 1035, "36607143": 360, "367": [352, 414, 1030], "36787944": 985, "368": [9, 15, 16, 61, 68, 1009], "3680": [609, 612, 623], "3684": 830, "36851234": 812, "368896": 25, "369": [267, 276, 1009], "3690483151908911912247722318110": 13, "3696": 611, "3697": 845, "3697178": 13, "37": [4, 183, 238, 263, 325, 360, 375, 414, 522, 714, 879, 890, 997, 1030], "370000e": 217, "370039": 188, "370738": 25, "37257991": 85, "373": 15, "373333": 263, "375": [53, 447, 747, 987], "376": 995, "37647423": 13, "376999": 25, "377": 352, "37741762": 105, "377eb8": [40, 44, 62, 63, 228], "378": [169, 414, 1023, 1030], "37815029": 214, "37845099": 362, "379": 118, "37967282": 988, "379710": 169, "379763": 124, "38": [92, 149, 170, 190, 198, 203, 254, 269, 288, 321, 414, 630, 880, 935, 987, 997, 1030, 1031, 1032], "380": 1023, "3800": 188, "3803": 353, "381327": 375, "382005": 124, "382120e": 217, "38353048": 214, "383973": 263, "384": [694, 900], "3840": 1038, "38428989": 322, "384338": 188, "384616559": 389, "385": [301, 303, 1009], "385000e": 217, "3854": [662, 663], "3855": 1008, "386": [34, 35, 875, 1009], "3862": 863, "38629436": 997, "38690531511642143152471231333333107": 13, "387": 1030, "387580e": 217, "387599": 13, "387830e": 217, "3889": 473, "3889873516666431": 13, "389": [63, 68, 105, 106, 591, 592, 1009, 1023], "3894": 613, "39": [4, 13, 148, 242, 375, 377, 378, 384, 407, 415, 493, 890, 908, 937], "3908844": 822, "391": 694, "3910350737": 389, "3911": 8, "3928": 468, "393297": 242, "39329747": 242, "394": [70, 160, 170], "3947": 999, "395": [4, 352], "39568399": 534, "396": [70, 148, 377, 1023], "3964": [420, 473], "397": [263, 276, 375, 1009], "3972": 653, "398": [26, 28, 645, 1009, 1023], "3986": 217, "3996": 649, "3_": 979, "3_poli": 260, "3a": 384, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "3c479a6885bfa0438971388283a1ce32": 374, "3d": [45, 48, 67, 90, 101, 196, 220, 222, 224, 360, 415, 504, 584, 950, 1022, 1037, 1038, 1040], "3f": [4, 6, 8, 11, 13, 15, 17, 21, 24, 26, 38, 40, 47, 48, 49, 58, 71, 73, 75, 86, 111, 118, 119, 127, 144, 148, 151, 152, 153, 155, 160, 168, 170, 171, 179, 183, 185, 191, 199, 201, 205, 214, 215, 217, 221, 232, 234, 258, 260, 261, 263, 266, 268, 271, 283, 299, 329, 351, 352, 353, 824, 995, 1019], "3k": 694, "3l": 417, "3llobo": 1045, "3m": 12, "3rd": [90, 159, 834, 877, 989, 997], "3ssnporch": 121, "3x1": 942, "3x2": [958, 961], "3x3": 973, "4": [4, 5, 6, 7, 8, 9, 10, 12, 13, 17, 19, 20, 25, 26, 27, 28, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 70, 71, 72, 73, 74, 81, 82, 85, 86, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 111, 112, 114, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 138, 144, 148, 151, 154, 156, 157, 159, 160, 163, 164, 166, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 203, 205, 206, 207, 209, 212, 213, 217, 220, 228, 232, 233, 234, 235, 236, 237, 238, 240, 242, 245, 246, 247, 248, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 269, 271, 272, 274, 281, 283, 285, 287, 288, 289, 290, 293, 299, 301, 302, 303, 305, 306, 308, 309, 311, 314, 315, 316, 317, 318, 320, 321, 323, 325, 326, 327, 328, 329, 335, 337, 341, 342, 343, 346, 347, 348, 351, 352, 353, 360, 362, 367, 374, 375, 377, 378, 380, 385, 386, 389, 392, 393, 394, 397, 398, 399, 400, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 494, 502, 510, 511, 514, 515, 516, 522, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 581, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 612, 615, 616, 617, 620, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 672, 674, 675, 677, 678, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 696, 697, 700, 704, 705, 713, 714, 722, 723, 724, 729, 731, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 753, 765, 766, 778, 779, 785, 786, 787, 788, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 825, 827, 828, 829, 830, 833, 834, 835, 836, 838, 843, 847, 848, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 886, 887, 891, 892, 893, 897, 899, 900, 903, 907, 908, 909, 910, 915, 916, 918, 919, 920, 921, 925, 935, 936, 937, 938, 940, 941, 942, 943, 944, 951, 955, 958, 959, 960, 962, 963, 964, 965, 968, 969, 970, 976, 977, 980, 981, 982, 983, 985, 987, 988, 989, 990, 997, 998, 1001, 1002, 1005, 1009, 1014, 1018, 1019, 1020, 1021, 1023, 1026, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1043, 1044, 1045, 1048], "40": [4, 15, 54, 66, 78, 90, 95, 128, 134, 151, 183, 190, 191, 193, 216, 218, 222, 224, 236, 238, 249, 261, 289, 295, 301, 307, 325, 326, 336, 337, 339, 341, 343, 345, 360, 367, 375, 411, 444, 493, 515, 516, 839, 840, 844, 856, 857, 976, 988, 997, 1030, 1031], "400": [5, 26, 50, 95, 126, 131, 151, 164, 205, 225, 272, 300, 352, 375, 412, 493, 1023], "4000": [59, 126, 248], "400000e": 217, "4017": 522, "4018260": 322, "402": 264, "402344": 386, "4025": 1035, "403": [264, 352], "404": [32, 35, 217, 1009], "40597": 281, "406": [75, 76, 687, 691, 984, 1009], "4066": 7, "407": [148, 377], "40842387": 12, "40887718": 57, "409": [83, 125, 136, 352, 1009], "40945": 71, "4096": [95, 375, 412, 493], "40966": 374, "409717": 263, "41": [13, 106, 148, 199, 214, 238, 360, 375, 377, 455, 467, 479, 490, 619, 622, 633, 644, 645, 650, 656, 658, 659, 660, 662, 679, 683, 684, 697, 778, 834, 989, 993], "41075698": 413, "41076071": 413, "41082": 5, "411": [169, 329, 409, 419, 471, 531], "4110": 474, "41187": 156, "412": [494, 983], "412021": 124, "41214": [199, 217], "41215": 217, "412304": 188, "414": [217, 408, 723, 753, 875, 887, 987], "41421356": [760, 766, 990], "4143": 392, "414810": 242, "414912": 127, "415": [55, 68, 221, 226, 1009], "416": [35, 266, 276, 736, 987, 1009], "416010": 320, "41666667": 747, "41691605": 105, "417": [79, 83, 281, 299, 303, 1009], "41726413": 105, "418": [76, 213, 218, 1009], "41888636": 660, "419": [352, 614], "4194": 377, "42": [4, 5, 6, 13, 16, 20, 24, 25, 26, 27, 31, 44, 46, 56, 78, 85, 97, 102, 111, 118, 119, 121, 122, 124, 125, 127, 128, 132, 144, 145, 164, 169, 171, 172, 175, 178, 188, 191, 193, 194, 201, 205, 206, 207, 213, 214, 216, 220, 221, 222, 228, 233, 234, 235, 238, 241, 259, 261, 264, 283, 289, 290, 291, 299, 305, 306, 307, 308, 310, 312, 313, 315, 317, 319, 328, 336, 338, 351, 352, 362, 367, 382, 385, 386, 394, 398, 407, 411, 414, 415, 418, 435, 442, 476, 486, 490, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 525, 527, 529, 535, 542, 543, 544, 555, 556, 563, 564, 565, 566, 568, 603, 604, 605, 606, 607, 675, 692, 693, 694, 757, 789, 790, 794, 798, 823, 825, 839, 840, 844, 848, 851, 891, 892, 894, 895, 896, 906, 909, 910, 922, 935, 952, 956, 990, 997, 1019, 1023, 1026, 1027, 1030], "420": [128, 136, 1009], "42074": 311, "421": [276, 723, 753, 987], "421087": 263, "42165": 121, "422": [591, 592, 723, 753, 987], "4226193151": 13, "4232": [4, 13], "423641": 188, "424": [95, 106, 217, 1009], "4242": [4, 13], "42425183539869404": 316, "425": [221, 352, 613], "4254": [148, 377], "426": [356, 361, 1009], "4260": [746, 749], "427": [148, 164, 165, 377, 504, 505, 581, 582, 585, 1009], "427329": 242, "4285714285714286": 987, "429": 278, "4294": 1036, "43": [148, 158, 196, 232, 260, 283, 377, 385, 796, 810, 880], "430": [419, 531], "43026679e": 1022, "431": 377, "4310090": 766, "432": [260, 409], "4325": 19, "433": [78, 83, 377, 1009], "43348936": 214, "4337": 983, "434": 351, "43475": 873, "436": 232, "4362": 1035, "437362": 188, "438": [169, 183, 218, 285, 297, 995, 1009], "43847489": 105, "43873": 353, "4387766": 13, "439": [190, 218, 1009], "4394": 1038, "44": [4, 156, 169, 170, 183, 278, 287, 477, 778, 880, 900, 903, 970, 987, 994, 1030], "440": 169, "440409": 188, "4406": 471, "4409": [4, 13], "44139186": 301, "4415": 19, "442": [148, 164, 172, 173, 341, 345, 349, 377, 499, 1009, 1021], "4425765": [651, 661, 682], "44300751539296973": 13, "44300752": 13, "443238": 263, "44373091": 988, "44381023": 203, "444": [121, 136, 1009], "44412786": 534, "445": [159, 995], "445978": 188, "446": [352, 723, 753, 987], "447": 352, "447268": 54, "4472869": 105, "4474": 386, "4478": 1035, "448": 283, "4486": 542, "449": [5, 412, 533], "4496": [4, 13], "4497": 1008, "45": [40, 64, 72, 73, 76, 85, 127, 144, 156, 171, 188, 199, 217, 267, 271, 272, 326, 338, 411, 414, 415, 562, 563, 625, 632, 644, 645, 650, 658, 659, 660, 679, 680, 681, 785, 794, 903, 977, 987, 995, 1006, 1009, 1019, 1026, 1030, 1033], "450": [251, 252, 1009], "4500": 214, "45053937": 322, "45070924": 664, "451": [305, 313, 644, 1009], "45192": 138, "451933": 54, "453": [112, 136, 1009], "45333333": 360, "4544": 4, "455": [155, 157, 311], "4550": 374, "456": [5, 328, 331, 412, 533, 1009], "45612256": 658, "45663524": 658, "457": 613, "4576": 830, "458": [158, 161, 1009], "458333315172": 13, "459": [54, 68, 407, 440, 1009], "459074": 242, "46": [4, 13, 53, 92, 173, 199, 238, 362, 386, 591, 592, 680, 681, 714, 903, 908, 997, 1026], "46033": 494, "46043": 494, "46081961": 988, "461": 386, "462234": 242, "463": [217, 278], "463088": 13, "46428631511221642143151251232633109": 13, "465": [74, 76, 1009], "465660": 25, "465730": 188, "466": 994, "4666": 632, "467": [124, 136, 1009], "46779927": 12, "468": 58, "46858513287221654": 321, "46874778": [651, 661, 682], "469": 58, "4690": 1023, "46915237": [651, 661, 682], "4694": 522, "469474": 188, "46958558": 659, "4697": 47, "47": [4, 160, 191, 195, 375, 491, 492, 533, 539], "471": 377, "47140": 407, "47236": [375, 495], "4733": 125, "47330339": 415, "4738": 1035, "475": [111, 261, 276, 1009], "47668": 353, "477": [155, 160, 161, 1009], "478522": 188, "47885": 353, "4792": 217, "47922861": 242, "479229": 242, "47928": 353, "4794": 188, "4795": 188, "4796": 188, "4798": 188, "47985": 494, "47987268e": 180, "4799": 188, "48": [4, 13, 45, 85, 101, 127, 156, 242, 311, 377, 386, 407, 508, 595, 697, 743, 823, 834, 976, 989, 997, 1026], "480": [183, 352, 354, 1009], "4801": 188, "4802": 188, "4803": 188, "4804": 188, "4805": 188, "4806": 188, "4807": 188, "4809": [188, 263], "481": [160, 170], "4810": 188, "4812": 7, "4815": 188, "48204257": 988, "4828": 188, "483": 646, "4830": 188, "4831": [188, 653], "4832": 188, "4836": 188, "484": [160, 297], "4841": 188, "484109": 188, "4846": 188, "485": [296, 297, 694, 1009], "4852": 188, "4855": 188, "4857596147013469": 60, "486": 201, "4860": 188, "4866": 188, "4867": 188, "4869": 188, "487": [13, 70, 76, 82, 83, 721, 1009], "4872": 188, "48736655": 665, "4874": 188, "4876": 188, "488": [147, 149, 1009], "4880": 188, "4881": [188, 1035], "48841": 494, "48842": 494, "4885": 188, "48858": 386, "4888": 188, "4891": 188, "48938813e": 180, "4894": 188, "48979592": 447, "4898431": [375, 490], "49": [4, 148, 203, 238, 374, 375, 377, 385, 407, 448, 455, 711, 723, 753, 761, 790, 794, 796, 880, 987, 997, 1033], "490": [20, 22, 1009], "491": 694, "492": [351, 641, 980, 1021], "4923": 647, "4928": 188, "493": [641, 899, 980], "4936": 188, "4939": 1037, "494": [344, 349, 1009], "494021": 490, "4948": 7, "495": [48, 66, 68, 1009], "4951": 651, "495761": 386, "49665188": 203, "4967": 522, "497": [156, 161, 239, 243, 1009], "4976": 595, "499": [148, 377, 386], "4995": 1036, "49999993": 983, "4daf4a": [44, 62], "4dbd33": 92, "4e": 221, "4e9a06": [59, 64], "4eacc5": [59, 64], "4f": [7, 8, 19, 114, 123, 125, 214, 215, 217, 310, 906], "4gb": 1023, "4i": 50, "4th": [148, 159, 377], "4x": [386, 1045], "4x10": 415, "4x1048576": 415, "4x11": 287, "4x4": [377, 412, 415], "4x9": 415, "5": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 21, 24, 25, 26, 27, 31, 32, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 79, 80, 81, 82, 83, 85, 86, 92, 95, 96, 97, 98, 99, 101, 102, 104, 109, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 138, 140, 143, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 173, 175, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 193, 194, 196, 197, 199, 200, 201, 202, 205, 207, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 375, 377, 378, 380, 382, 385, 386, 388, 392, 393, 394, 397, 399, 400, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 422, 435, 436, 437, 438, 440, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 467, 470, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 502, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 526, 529, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 550, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 590, 591, 592, 595, 600, 602, 603, 604, 605, 606, 608, 611, 612, 613, 614, 617, 618, 620, 621, 623, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 639, 641, 644, 645, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 686, 687, 689, 690, 691, 693, 694, 697, 701, 703, 705, 707, 710, 711, 718, 719, 720, 721, 723, 724, 725, 727, 729, 732, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 766, 767, 778, 779, 781, 782, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 893, 899, 900, 901, 902, 903, 904, 905, 907, 909, 915, 916, 919, 920, 924, 925, 934, 935, 936, 937, 938, 940, 941, 942, 950, 951, 955, 956, 958, 959, 962, 963, 964, 965, 966, 967, 968, 976, 977, 979, 982, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 999, 1001, 1002, 1005, 1010, 1011, 1014, 1018, 1019, 1021, 1022, 1023, 1025, 1026, 1028, 1031, 1032, 1033, 1035, 1037, 1038, 1040, 1044, 1045, 1046], "50": [0, 4, 7, 10, 13, 15, 24, 32, 33, 38, 42, 50, 52, 59, 60, 65, 66, 70, 71, 85, 92, 95, 98, 104, 111, 114, 117, 124, 127, 130, 131, 148, 152, 154, 155, 156, 157, 168, 169, 170, 179, 183, 194, 199, 202, 206, 207, 211, 213, 215, 217, 220, 224, 225, 231, 232, 234, 238, 242, 255, 260, 262, 263, 273, 283, 302, 305, 309, 317, 319, 326, 328, 330, 336, 345, 352, 375, 377, 380, 385, 411, 414, 415, 416, 419, 440, 471, 477, 478, 498, 502, 519, 521, 524, 531, 537, 542, 551, 552, 567, 591, 592, 604, 606, 607, 613, 615, 656, 657, 664, 665, 666, 668, 674, 675, 676, 690, 711, 789, 796, 810, 828, 848, 899, 908, 982, 983, 987, 988, 990, 993, 997, 1011, 1030, 1047], "500": [10, 44, 50, 57, 60, 61, 63, 85, 86, 102, 104, 115, 117, 125, 147, 151, 175, 212, 213, 221, 239, 240, 245, 246, 250, 260, 263, 273, 283, 289, 295, 309, 316, 321, 322, 344, 348, 366, 414, 420, 467, 468, 472, 473, 474, 479, 480, 481, 482, 609, 611, 612, 614, 619, 622, 623, 648, 649, 652, 653, 654, 678, 680, 681, 857, 976, 1002], "5000": [56, 185, 214, 215, 217, 317, 880], "50000": 24, "500000": 300, "5000000": 17, "50000000": 154, "50000013": 983, "5000083": 13, "500526": 127, "500x500": 539, "501": [228, 243, 1009], "5012": 1036, "5016": [409, 420, 473], "5025616": 13, "5029": [409, 420, 473], "503452": 300, "5036": 1037, "504": 352, "504185": 300, "50447799": 988, "505": 824, "506": [275, 276, 1009], "507": 408, "50755672": 464, "507943": 263, "508": [131, 136, 1009, 1021], "5082": 1008, "509": [14, 16, 1009], "50941682": 988, "50_000": [312, 352], "51": [24, 156, 217, 278, 283, 407, 408, 763, 773, 778, 983, 1026], "510": 1021, "51082562": 588, "51104228": 322, "512": [72, 76, 198, 1009], "512281": 250, "512595": 300, "51292546": 610, "513": [848, 990], "513034": 300, "5131": [7, 1035], "51341712": 985, "5141": 1036, "51462041": 844, "5149": 7, "515": 4, "515390": 386, "516": [86, 87, 200, 218, 1009], "5166": 671, "5166646": 761, "517": [8, 450, 460, 1021], "517272": 250, "5182": 1035, "5186": 1035, "519": [326, 331, 1009], "5193": 7, "51961675": 1021, "51963999": 80, "52": [4, 76, 98, 117, 136, 156, 199, 529, 631, 794, 935, 1009, 1030], "520": [626, 848, 977, 990], "52003279": 988, "5208": 188, "52106591": 105, "5211": 1037, "5212": 188, "522": [261, 900], "5224167": 13, "5229": 1037, "523": 522, "524": [13, 286, 297, 1009], "5243": 415, "52433293": 415, "5244": 188, "525": [28, 222, 226, 437, 626, 977, 1009], "5251": 1036, "526": 899, "526599": 188, "527": [216, 218, 1009], "5279": 1037, "528": 136, "5282": 1035, "52875032": 659, "5289": 7, "5291": 1036, "5295": 1037, "52955942": 844, "5299": 1036, "53": [4, 53, 68, 238, 407, 414, 533, 539, 544, 789, 790], "53060544": 1021, "531": 352, "5315170": 13, "5316": 351, "53284267": 242, "532843": 242, "533": [169, 220, 226, 1009], "5337": 1035, "534": 169, "5355": 1035, "5359": 1037, "536": [156, 283], "5360": 1035, "53777511": 13, "53844117956": 761, "5395559": 214, "53959628e": 180, "54": [92, 148, 175, 183, 199, 202, 238, 243, 375, 377, 407, 489, 1009, 1031, 1032], "54035582": 761, "541": [450, 460], "5415": 984, "5417": 217, "542": [100, 106, 148, 168, 173, 377, 1009], "5420": 542, "542052": 188, "54209": 138, "5425": 522, "543": 183, "5431": 1035, "543841": 188, "54434690031882": 73, "54488318": 389, "545": [342, 349, 1009], "5460": 1036, "546068": 242, "54606834": 242, "54666667": 360, "5467523": 13, "5469": 377, "548": [52, 68, 1009], "5488135": 389, "549": 26, "5495": 1035, "54980": 539, "55": [169, 175, 194, 199, 217, 222, 226, 326, 385, 407, 411, 489, 595, 796, 802, 810, 823, 987, 1030], "5500": [320, 686, 984], "550213": 188, "551": [148, 160, 161, 1009], "55102041": 447, "5515": 743, "55212743": 362, "5523": 1008, "55249": 595, "553": 234, "55390036": 105, "554": [207, 215, 301, 307, 313, 323, 1009], "5540": 1036, "55422893": 415, "555": 714, "5555555555555556": 268, "5557": 263, "5558": 7, "55800226": 214, "559": 614, "5591": [687, 691, 984], "55968825": 644, "56": [4, 13, 208, 217, 232, 329, 386, 644, 645, 650, 658, 659, 660, 679, 711, 732, 987, 997, 1026, 1030], "560": [199, 515, 516], "561": 407, "561464362648773": 60, "562": [140, 141, 157, 161, 1009], "564": 199, "56479934": 362, "56485654": 105, "565": 260, "566": [65, 68, 170, 199, 303, 1009], "569": [148, 328, 377, 498, 590, 593, 594, 596], "5697": 1037, "56b4e9": 245, "57": [98, 151, 169, 215, 269, 302, 377, 378, 397, 399, 400, 408, 703, 758, 778, 832, 987, 997, 1030], "570": [148, 377, 1021], "570655": 188, "5713": 661, "57142857": 719, "572": [132, 136, 1009], "573": [348, 349, 415, 1009], "5732": 1037, "57320793": 415, "573491": 188, "574": [58, 532, 539], "5748": 492, "5749": [375, 491, 492], "575": [70, 199], "5762": 1036, "576989": 242, "577": [148, 377], "578": 22, "579": 522, "58": [13, 66, 79, 377, 409, 420, 473, 605, 761, 997, 1019], "580": [352, 839, 840], "5804131": 105, "5805": 1036, "5807": 990, "581": 175, "581012": [375, 489], "5814": 1037, "58149261": 415, "58195950e": 180, "582": [15, 16, 316, 323, 900, 1009], "5828": [375, 491, 492], "583": [407, 1021], "5833": [735, 987], "583333315172": 13, "58364548": 985, "585": 1021, "5853": 1008, "5854": 1021, "5855": 1021, "5857": 1035, "586": [248, 252, 1009], "5863": 386, "58667835e": 180, "586798": 188, "587": [129, 136, 1009], "5871": 677, "5874": 1036, "5882004012129721": 60, "589715": 188, "59": [4, 175, 183, 217, 343, 377, 386, 407, 408, 508, 987, 1026, 1030], "59122734": 665, "592": [609, 612, 623, 994], "592373": 320, "5925110": 13, "5929": 1036, "593": 115, "594": [160, 199], "594754": 188, "59489497": 214, "595": 199, "5956": 1038, "596": [288, 297, 714, 1009], "5960": 214, "5963": 1040, "597": 199, "598": [58, 102, 152, 539], "5981": 542, "598533": 188, "599": 678, "5991": 1037, "5_000": 175, "5a": 879, "5d": 8, "5e": [5, 95, 184, 593, 594, 596], "5e5": 199, "5f": [138, 319], "5m": 17, "5n_": 81, "5th": [13, 124, 127, 159, 407], "5x": 1047, "6": [4, 6, 8, 9, 10, 11, 12, 13, 19, 26, 27, 31, 32, 40, 44, 46, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 67, 73, 74, 75, 76, 78, 79, 80, 82, 85, 90, 95, 97, 104, 112, 124, 125, 127, 129, 131, 138, 140, 143, 148, 149, 151, 154, 156, 158, 159, 163, 164, 169, 170, 172, 175, 178, 179, 180, 183, 188, 192, 197, 199, 200, 201, 203, 213, 217, 220, 221, 222, 224, 226, 228, 231, 232, 236, 239, 240, 245, 246, 247, 248, 250, 251, 254, 255, 258, 259, 260, 261, 262, 263, 265, 269, 270, 271, 272, 273, 275, 281, 285, 288, 296, 299, 301, 302, 305, 307, 309, 310, 312, 315, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 338, 339, 341, 343, 346, 348, 351, 352, 353, 359, 362, 374, 375, 377, 378, 380, 385, 386, 393, 397, 399, 400, 405, 407, 408, 411, 412, 414, 415, 416, 422, 439, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 459, 460, 461, 480, 481, 482, 483, 488, 494, 503, 515, 522, 525, 528, 535, 536, 537, 538, 539, 543, 544, 545, 551, 559, 560, 561, 567, 568, 591, 592, 602, 603, 604, 606, 609, 612, 613, 623, 625, 626, 628, 634, 635, 642, 643, 668, 674, 675, 687, 691, 697, 719, 725, 735, 739, 742, 743, 747, 748, 750, 766, 782, 785, 787, 794, 795, 797, 798, 803, 805, 806, 808, 813, 814, 817, 820, 821, 822, 823, 825, 834, 835, 836, 838, 839, 840, 847, 849, 850, 851, 866, 867, 869, 872, 874, 877, 878, 882, 883, 914, 915, 919, 920, 935, 936, 937, 939, 941, 942, 950, 962, 965, 973, 976, 977, 981, 983, 984, 987, 997, 998, 1001, 1002, 1003, 1014, 1018, 1019, 1021, 1026, 1028, 1031, 1032, 1033, 1036, 1038, 1043, 1047], "60": [4, 6, 59, 73, 82, 199, 211, 217, 220, 221, 242, 248, 268, 273, 326, 341, 351, 374, 407, 411, 448, 455, 711, 796, 987, 997, 1019, 1030, 1033], "600": [26, 50, 58, 122, 131, 132, 375, 678], "6000": [302, 625], "601052": 300, "601707": 188, "60244657": 844, "60276338": 389, "603": [63, 446], "604": [102, 539], "606": [611, 829, 988], "60648906": 1021, "607275806426107": 151, "607752": 124, "608": [115, 136, 1009], "60809415": 660, "60834549": 57, "60836363e": 180, "609": [160, 386], "61": [8, 81, 170, 217, 374, 377, 386, 408, 456, 539, 558, 644, 645, 650, 658, 659, 660, 679, 711, 937], "610": [44, 68, 1009], "6101": 1037, "610mb": 351, "611": [258, 260, 539], "6114": 822, "6114326": 199, "6114327": 199, "6114328": 199, "6114329": 199, "6114330": 199, "611676": 188, "612": 787, "6121": 1036, "6126": 1037, "613": [178, 218, 1009], "614": [138, 141, 1009], "6147": 1035, "615": 48, "615373": 169, "616": [836, 989, 997], "61611719": 154, "617": [58, 263, 407, 766], "617050e": 217, "6173": 1036, "617715": 124, "6178": 1036, "618": [58, 258], "6181": 1037, "6182": 1036, "618263": 188, "619": [63, 446], "619052": 375, "6196": [263, 1035], "6198": 743, "62": [8, 13, 170, 175, 217, 254, 320, 326, 362, 375, 491, 492, 839, 840, 1026, 1033], "620": [361, 496], "621": [58, 766], "621645": 188, "622": [58, 539], "62241605": 183, "622811": 124, "623": [836, 989], "6231": 1008, "6237": 217, "624": 994, "625": [53, 199, 616, 706], "6250": 1037, "6258": 1035, "626": [49, 185], "6261": 1039, "626286": 188, "627": [289, 297, 1009], "62717609": 214, "62722912": 13, "62745778": 988, "628": 352, "6282": 1036, "6284": 1008, "6288": 1037, "6291456": 53, "63": [6, 377, 414, 555, 556, 563, 564, 644, 645, 650, 658, 659, 660, 679, 697, 723, 796, 810, 909, 910, 987], "630": [269, 276, 721, 1009], "63035731": 415, "630382": 320, "6312": 13, "632": 311, "6323": 1008, "6331": 4, "6332": 4, "63327171": 183, "6333": 4, "6334": 4, "6335": 4, "6338211367102258": 312, "63394388": 183, "635": [4, 614], "636": [93, 183, 386], "63667341": 57, "6371000": 761, "6374": 1038, "6375861597263857": 934, "638": [352, 353, 386], "638768": 54, "638843": 300, "63931533": 1021, "63bit": 1041, "64": [4, 13, 32, 48, 53, 58, 89, 95, 156, 169, 221, 232, 233, 237, 258, 269, 287, 292, 357, 366, 367, 377, 378, 386, 394, 408, 412, 419, 493, 496, 500, 597, 598, 644, 656, 686, 687, 688, 689, 691, 900, 990, 1020, 1026, 1030, 1032, 1038, 1039, 1042, 1043, 1044, 1047], "640": [27, 28, 405, 488, 504, 505, 581, 582, 585, 976, 1009], "640000e": 217, "640770e": 217, "640880e": 217, "64185414": 664, "64236448": 534, "6424": 1008, "6425": 1008, "643": 258, "644": [329, 353], "6440": 214, "64447187": 53, "645": 58, "6451": 1008, "6452": 1038, "646": [113, 136, 159, 1009], "6463": 1039, "647": 58, "6472": 1036, "6476": 522, "647689": 188, "648": [133, 136, 1009], "648026": 124, "649": 218, "6497": 1036, "64bit": [397, 1030], "64x64": [95, 375, 412], "65": [4, 33, 170, 199, 269, 311, 407, 437, 500, 515, 595, 697, 738, 789, 790, 994, 1019, 1030, 1031, 1032], "650": 405, "6505186632729437": 60, "6507": 1037, "651": [353, 386], "652": 352, "652739": 188, "653": [386, 609, 612, 623], "654": 170, "6545": 1042, "655": [58, 68, 1009], "656": 375, "6567": 846, "657": [242, 260], "6572": 846, "6573": 1037, "65799352e": 180, "658": 86, "6586": 1036, "659": [4, 16, 160, 1009], "6599": 1008, "65e": 185, "66": [4, 224, 311, 377, 407, 424, 459, 530, 630, 710, 780, 781, 792, 878, 886, 969, 987, 999], "660": 242, "660797": 242, "661086": 263, "6624": 1042, "662409": 188, "663": [893, 995, 999], "664": [148, 377], "665": 4, "6650": 13, "6651": 1036, "666": [154, 407, 841, 977], "6660": 1036, "6666": [735, 987, 1036], "66666667": [726, 779, 849, 997], "666667315174": 13, "6667": 1036, "66670169e": 180, "667": [718, 737, 987], "667219": 124, "6689": 1038, "6691": 1036, "6697": 1036, "669930e": 217, "67": [66, 169, 217, 377, 496, 514, 515, 516, 625, 665, 711, 810, 977, 987, 1001, 1026, 1030], "670": 201, "671": 999, "6715": 1008, "67251877": 664, "673": [86, 170, 352, 386], "67443065": 105, "67451144e": 180, "675": 151, "675318": 54, "676": 667, "6764": 1036, "678": 68, "678008": 199, "678009": 199, "678010": 199, "678011": 199, "678012": 199, "678013": [199, 217], "678359": 188, "679": [201, 899], "68": [4, 11, 160, 190, 302, 325, 407, 476, 533, 539, 588, 683, 684, 1030], "681": [58, 386], "6817": 1036, "682": 386, "6821": 8, "682880e": 217, "683980e": 217, "684": [71, 80, 148], "6846": 1036, "6848": 1039, "685": [718, 737, 987], "6852": 260, "6860": 123, "687": 999, "6875": 714, "688": 80, "689015": 300, "689143": 300, "689751": 300, "69": [6, 98, 190, 310, 326, 407, 469, 470, 605, 606, 753, 987, 997, 1021], "690": 201, "6902": 1036, "691": 719, "6913": 1036, "692": 111, "692270e": 217, "692470": 300, "6929": 1008, "692901": 124, "693": 987, "6931": 863, "69314718": [417, 610, 997], "695": 258, "69513": 58, "6954": 1036, "69545": 58, "695740e": 217, "696": [308, 313, 1009], "69735": 58, "698": 58, "6984743": 154, "69892343": 203, "699691": 375, "6d": 8, "6f": [17, 99, 265, 734, 792], "6ppm": 156, "6th": 159, "6x3": 415, "7": [4, 5, 6, 8, 12, 13, 14, 15, 19, 26, 30, 32, 33, 34, 39, 42, 44, 46, 53, 54, 55, 56, 60, 64, 65, 67, 71, 72, 74, 80, 82, 98, 111, 114, 120, 124, 126, 127, 128, 132, 133, 148, 160, 168, 169, 170, 172, 175, 180, 181, 198, 199, 200, 201, 217, 220, 228, 233, 234, 240, 242, 245, 246, 249, 250, 252, 255, 260, 264, 266, 267, 271, 273, 278, 281, 283, 285, 288, 289, 291, 301, 302, 305, 309, 315, 318, 319, 320, 322, 325, 326, 328, 329, 335, 342, 346, 347, 352, 353, 362, 375, 377, 378, 384, 385, 386, 397, 399, 400, 405, 411, 412, 414, 415, 416, 418, 419, 422, 437, 442, 446, 448, 449, 450, 451, 453, 454, 455, 456, 459, 460, 461, 469, 470, 480, 481, 482, 483, 489, 494, 496, 530, 531, 532, 533, 534, 536, 542, 559, 560, 586, 589, 598, 603, 604, 625, 626, 628, 635, 644, 645, 647, 650, 656, 658, 659, 660, 679, 680, 681, 690, 697, 705, 707, 719, 720, 721, 723, 725, 741, 742, 743, 747, 748, 750, 779, 782, 787, 788, 791, 794, 797, 798, 803, 806, 813, 814, 817, 822, 825, 829, 839, 840, 848, 857, 858, 871, 872, 894, 895, 935, 936, 939, 940, 942, 951, 956, 976, 977, 982, 983, 985, 987, 988, 990, 991, 993, 997, 1001, 1002, 1014, 1018, 1021, 1026, 1028, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1043, 1048], "70": [4, 6, 11, 66, 71, 73, 111, 170, 238, 245, 260, 326, 375, 377, 411, 491, 492, 680, 681, 711, 723, 753, 796, 810, 886, 976, 997, 1019], "700": [50, 317], "7000": 217, "701": [58, 148], "702266": 188, "703": [405, 511], "70359377": 183, "704": [351, 353], "70432034": 85, "7049": 1036, "7049787496083262": 60, "705": [201, 218, 1009], "706026": 188, "707": [875, 887], "7071": 1038, "70763101": 53, "708": [116, 136, 536, 538, 545, 747, 1009], "70814003": 362, "7083": 987, "708333315174": 13, "7089": 1037, "709": 261, "70x": 1047, "71": [4, 92, 148, 203, 217, 377, 508, 727, 733, 763, 773, 987, 1021, 1026, 1032], "710": 405, "7101": 1036, "714": 317, "71518937": 389, "7152": 1036, "7154": 1036, "715413": 124, "7159": 1036, "716": [87, 511], "7187": 1036, "718747": 188, "7194": 1036, "72": [4, 6, 7, 13, 117, 154, 222, 385, 823], "7200": 647, "721": [536, 538, 545], "722128e": 217, "72295655": 85, "723": [58, 234], "7239": 1036, "7242": 1008, "724702": 263, "7248": 1036, "7256": 633, "726": 995, "7260": 1036, "7261": 1036, "726573": 169, "72667194": 988, "7271482064048191": 268, "72850319": 988, "7295": 1036, "7298221281347033": 4, "73": [92, 113, 264, 326, 393, 479, 733, 796, 810, 845, 908, 997, 1019, 1030, 1032], "7301": 1036, "730119e": 217, "731249e": 217, "7313": 7, "73153": 386, "732": 201, "7321432711315247203224138160467097": 13, "7323": 1036, "7325": 1036, "733": 283, "7331": 1037, "7332": 903, "7337046907": 160, "734": [310, 313, 1009], "7343": 317, "7350": 1036, "7353": 1036, "7356": 1037, "736": 331, "7365": 1037, "73654189": 13, "73698041": 1021, "737": [234, 522], "7376": 1037, "738": 352, "7382": 1008, "7387": 474, "7388": 1037, "739865e": 217, "74": [4, 8, 215, 325, 326, 377, 588, 692, 796, 810, 878, 1026], "7411": [467, 472, 1036], "7419": 1036, "743": [258, 1021], "74310541": 154, "7436926291700353": 194, "744": [258, 283], "744042e": 217, "7441": 1037, "744497e": 217, "74495357": 183, "7459": 1037, "746": 377, "7464": 1037, "746492": 260, "748": [351, 386], "7490": [1036, 1037], "75": [4, 6, 7, 8, 10, 13, 33, 44, 55, 82, 114, 145, 158, 159, 164, 169, 175, 178, 181, 190, 206, 217, 242, 247, 248, 260, 269, 273, 288, 305, 318, 348, 351, 362, 447, 499, 549, 635, 656, 692, 704, 710, 731, 736, 737, 742, 750, 753, 791, 796, 877, 885, 889, 896, 912, 924, 925, 968, 987, 989, 997, 1003, 1006, 1019, 1032], "750": [49, 55, 119, 149, 260, 1009], "75000": 199, "7501": 1037, "750348": 124, "750389": 188, "7506": 1037, "752": 351, "752867": 188, "753": [38, 165, 351], "7532": 487, "7533": [420, 473, 1037], "754": [151, 161, 1009], "75474165": 988, "7548": 1037, "7548291": 322, "7553": 1036, "7565": 1037, "756687e": 217, "7567": 1037, "756746e": 217, "7569": 468, "757": [148, 258, 283, 377], "7573": 1037, "75747153": 203, "7578": [263, 1037], "75788833": 145, "759": 283, "7593": 1036, "7594": 1036, "75949622": 203, "75th": [238, 877], "76": [4, 175, 199, 326, 351, 362, 377, 386, 774, 778, 859, 1021, 1026], "760": [4, 39, 68, 127, 1009], "7608": 1008, "76195467e": 180, "762": 351, "7621951219512195": 242, "7632": 1036, "7638": 983, "764": [719, 987], "7646": 1008, "764779": 188, "765012": 320, "7655": 1037, "765671": 188, "7660": 1036, "7661": 1037, "7668": 1038, "767": 161, "7674": [522, 1037], "767498": 124, "7676": 1036, "768": 53, "7680": 1036, "76823": 6, "7685": 1037, "769": 283, "76995": 375, "77": [4, 6, 44, 148, 175, 269, 326, 374, 377, 532, 705, 733, 772], "770": [170, 173, 1009], "77000": 199, "7702": 1037, "772": [19, 22, 351, 720, 1009], "7721": 1037, "7723": 1037, "7724": 1036, "773": [260, 329, 646, 837], "77310": 375, "7732": 1036, "77322639": 85, "7738": 1038, "7739": 1037, "774": [146, 149, 1009], "77426368": 12, "775": 19, "7750": 1036, "775047": 674, "775151": 674, "7756": 1036, "77630514": 415, "7768366": 985, "777": [126, 136, 386, 1009], "7771": 1037, "77764": 403, "77777215": 85, "778": 185, "7786": 1036, "779": 351, "7794": 1037, "7798": 903, "7799": 1036, "78": [4, 53, 92, 175, 217, 269, 307, 326, 491, 492, 644, 645, 650, 651, 653, 658, 659, 660, 662, 663, 679, 683, 684, 796, 802, 823, 987, 1008, 1019], "780": 258, "7812": 1037, "781265": [375, 495], "7814": 1037, "7816": 13, "7819": [407, 1037], "7823": [1037, 1038], "7825": 1037, "7825594": 12, "7826": 377, "782755": 25, "7831": 351, "783149": 71, "7833": 473, "783392": 260, "7838": 1037, "784": 301, "7840": 54, "7849": 1037, "785063": 71, "78571427112143152472031331383346104": 13, "786": [53, 71], "786015": 71, "7863": 1037, "786432": 53, "78681467": 53, "7872": 1037, "7880": 1037, "7887550": 13, "788808": 320, "789": [144, 414], "7894": [893, 999], "79": [4, 6, 30, 32, 80, 81, 98, 148, 175, 302, 326, 377, 385, 409, 472, 522, 595, 692, 837, 1030, 1032], "790": [4, 70], "7906": [620, 647], "79064206": 608, "79084103": 362, "791": 160, "7914": 1037, "791667315161908911936472223112": 13, "792": [127, 136, 1009], "79269019073225": 287, "7927845601690917": 312, "7929": [352, 1037], "7943": 1040, "7944": 1037, "7946": 1036, "795": 646, "7954": 1037, "796": [124, 175, 176, 1009], "7970": 1037, "7971": 661, "7972": 552, "79769376": 85, "798": [71, 357, 361, 414, 1009], "7983": 1037, "798301": 242, "7986": 1037, "7986499491396727": 151, "798982054": 987, "799": [160, 352], "7990": 1037, "7998": 1037, "7_qbz5n2kfra8p0": 397, "8": [4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 55, 60, 62, 64, 65, 70, 72, 74, 75, 81, 85, 90, 91, 92, 95, 96, 98, 99, 100, 103, 105, 111, 114, 116, 117, 121, 123, 124, 126, 130, 133, 134, 138, 147, 148, 152, 154, 156, 157, 159, 160, 164, 168, 169, 170, 172, 175, 178, 179, 184, 185, 190, 193, 199, 200, 203, 206, 207, 209, 215, 217, 220, 221, 222, 224, 225, 229, 232, 233, 234, 236, 240, 241, 242, 245, 246, 247, 249, 250, 251, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 270, 271, 278, 281, 285, 287, 291, 295, 299, 301, 302, 305, 307, 308, 309, 310, 311, 313, 315, 320, 323, 325, 326, 327, 329, 330, 335, 338, 342, 343, 345, 346, 347, 351, 352, 353, 359, 362, 367, 374, 375, 377, 378, 380, 385, 386, 397, 405, 407, 411, 412, 414, 415, 416, 418, 420, 437, 441, 442, 445, 447, 448, 450, 453, 454, 455, 460, 461, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 481, 482, 483, 485, 488, 494, 496, 500, 501, 512, 514, 529, 532, 536, 538, 541, 543, 545, 547, 548, 553, 554, 563, 568, 580, 586, 587, 588, 589, 602, 603, 626, 627, 634, 635, 646, 656, 668, 674, 687, 690, 691, 692, 693, 697, 700, 704, 705, 707, 708, 713, 719, 724, 725, 726, 738, 742, 743, 747, 748, 750, 779, 780, 782, 785, 786, 787, 788, 792, 794, 797, 798, 803, 806, 813, 814, 817, 818, 825, 826, 828, 837, 839, 840, 846, 856, 857, 858, 864, 871, 878, 880, 901, 904, 934, 935, 936, 940, 956, 962, 963, 964, 965, 966, 967, 968, 976, 977, 983, 984, 985, 987, 990, 995, 997, 1001, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1026, 1027, 1028, 1031, 1032, 1033, 1037, 1038, 1043, 1044, 1046], "80": [4, 6, 11, 27, 67, 81, 132, 140, 145, 170, 178, 236, 307, 311, 325, 341, 343, 351, 358, 362, 375, 377, 380, 405, 411, 416, 418, 442, 477, 508, 539, 711, 796, 810, 880, 893, 912, 976, 982, 983, 987, 994, 1000, 1003, 1023], "800": [50, 318, 375, 582, 690], "8000": [217, 263, 264], "800000011920929": 360, "8000184677460305": 312, "8002": 1037, "8003": 1038, "8005": 1037, "8006": 1037, "8010": 1037, "801770e": 217, "802": [7, 148, 377], "8022": [7, 394, 471, 1039], "802601": 188, "8028": 1037, "803483": 124, "803882e": 217, "804": [203, 218, 1009], "8040": 1036, "804414": [375, 495], "805": [81, 83, 201, 1009], "8053": 1037, "8059798": 183, "806": 647, "8061": 1037, "8065": 1037, "8066": 1038, "8068": 1037, "807": [258, 260], "8075": 1038, "8086": [617, 1037], "8087": 1037, "8093": 1037, "8094": 1037, "80956739": 988, "80_000": 116, "81": [4, 50, 242, 325, 326, 407, 697, 758, 785, 796, 810, 826, 987, 988, 990, 997], "810": [171, 824], "8100": 1008, "8102": 1038, "810596": 375, "8117": 1037, "812": [148, 302, 303, 1009], "8120": 1037, "8125": 719, "812526": 188, "8129": 1038, "8133333333333334": 294, "81355169": 415, "8137": 1037, "8139": 1037, "814": [171, 1021], "81458798": 1021, "815476315189119122164721021826110": 13, "8157": 1008, "8159": 1037, "816": [261, 469, 470], "8160": 1037, "8174": 1037, "817724": 188, "8181": 1037, "819": 415, "8190": 1038, "81940995": 415, "8198": 1037, "82": [4, 30, 53, 58, 120, 145, 202, 294, 325, 785, 796, 810, 935, 987, 990, 1019, 1030], "820": [4, 13, 839, 840], "820705": 188, "8216": 1039, "822": 787, "822097": 169, "8224": 1037, "8225220806196525": 194, "823": [214, 283], "8243": 1008, "825": 747, "8251": 1037, "8253": 215, "8259": 1037, "827917": 124, "828": 283, "8282": 1037, "829": [273, 276, 1009], "829429": 250, "8295": 1037, "83": [6, 30, 34, 39, 325, 377, 382, 692, 705, 783, 982, 987, 1019, 1023, 1033], "830000": 300, "8306": 1037, "8316": 1037, "832": [171, 414, 553, 554], "83236428": 415, "83281226": [839, 840], "8333": 496, "83333": 761, "833333": 169, "8335": 1037, "834": [258, 276, 329, 1009], "834310": 188, "8344": 1037, "8345": 595, "8348": 1023, "835": [234, 243, 1009], "8353": 7, "8354": [620, 1037], "83548752": 608, "8355": 1036, "836": [260, 276, 1009], "8361": 1038, "836224": 25, "8363": 1037, "8370": 1008, "8377": 1037, "83816048": 644, "83822343": 985, "83833": 386, "8387": 830, "839": [252, 291, 297, 678, 1009], "84": [4, 6, 8, 70, 145, 190, 217, 307, 325, 362, 377, 414, 415, 785, 810, 987, 997, 1019], "840": 386, "84000": 199, "840000": 300, "8407": 70, "84077985": 183, "841": 71, "84127814": 664, "84253": 988, "844": [11, 16, 311, 313, 414, 553, 554, 1009], "8446": 1037, "8449": 1037, "845": [62, 68, 1009], "847222222222214": 194, "8473": 415, "8478": 1039, "848": [232, 255, 353], "8480": 1008, "8481": 1037, "8484": 1038, "84845219": 1021, "848743": 25, "849835": 54, "85": [6, 8, 17, 32, 50, 55, 70, 98, 145, 214, 217, 258, 271, 302, 326, 362, 414, 437, 496, 498, 553, 554, 595, 650, 656, 742, 750, 785, 796, 823, 987, 988, 1019, 1030], "850000": 300, "850031": 188, "8508": 1039, "851": 260, "8512": 1037, "8513": 617, "851348": 25, "8515": [415, 1037], "85151335": 415, "851792": 25, "85253229": 57, "852774": 124, "853174": 25, "853676": 258, "853846": 188, "854": 258, "85418642": 362, "8549": 1037, "855": [8, 233, 243, 1009], "8554": 1038, "855465": 300, "857": [261, 352], "857400": 25, "858486250088675": 312, "85857475": 105, "8586": 1037, "859007": 25, "8591": 1037, "86": [13, 32, 70, 145, 190, 307, 325, 326, 785, 907, 987, 1019], "860000": 300, "861": [148, 377, 785, 786, 987], "861053": 25, "861106": 25, "8614": 1008, "861533": 25, "8617": 1038, "861868": 25, "8626621": 322, "8628": 633, "8640": 170, "865400": 25, "866": 995, "866161": 25, "866571": 25, "867": 74, "8672": 1037, "8676": [618, 1037], "8678": 621, "868": [124, 144], "868443": 11, "8698": 1037, "87": [6, 32, 70, 160, 326, 595, 665, 774, 785, 796, 875, 887, 987, 1023], "870": [148, 377], "871": [38, 80, 81, 409, 472], "871277": 25, "871965": 25, "872": [38, 353, 995], "8720": [554, 1038], "872186": 25, "873": [148, 377], "873724": 25, "87382323": 660, "874": [73, 785, 786, 987], "87421f": 92, "874771": 124, "875": [53, 118, 136, 152, 667, 1009], "875315171": 13, "875315173": 13, "875941": 25, "87600388": 154, "8768": 1037, "8769": 1039, "877": [8, 258], "8773": 1039, "877981": 25, "878": 8, "878051": 188, "878964": 808, "87mb": 351, "88": [4, 6, 32, 190, 203, 259, 302, 325, 326, 356, 375, 377, 380, 409, 471, 644, 645, 650, 658, 659, 660, 679, 859, 935, 1019, 1030], "880": 4, "880191": 188, "880298": 188, "88089948": 415, "88096009": 105, "881": [271, 276, 1009], "882": 260, "88213": 375, "882561": 260, "883": 49, "883065": 25, "8833": 496, "8835": 1037, "884": 283, "8845": 1037, "885": [8, 148, 329, 377], "8854": 1037, "8874": 1037, "8878": 830, "888": [319, 323, 1009], "8880": 618, "8881": 621, "889": [258, 435], "88978285": 988, "89": [4, 32, 156, 190, 325, 326, 970, 982, 987, 997, 1023, 1030, 1033, 1041], "890": [12, 16, 258, 1009], "891": 8, "8922": 1037, "893055": 188, "8931": 1037, "8936": 1037, "894264": 242, "8947": 909, "8948018": 13, "89483932": 985, "8948621": 988, "895": [214, 218, 313, 1009], "896": 646, "8963": 263, "8965": 414, "8973": 1037, "89856": 808, "899": [32, 258], "8992": 1037, "8995": 1037, "8pt": 997, "8x8": [32, 89, 190, 232, 292, 302, 377, 500, 1020], "9": [4, 7, 9, 12, 13, 14, 24, 26, 27, 31, 32, 34, 42, 44, 50, 55, 58, 62, 64, 74, 82, 85, 91, 120, 121, 123, 124, 130, 132, 138, 139, 140, 148, 154, 158, 164, 168, 169, 170, 180, 181, 190, 199, 212, 213, 216, 217, 220, 223, 232, 233, 242, 245, 246, 247, 248, 254, 263, 267, 269, 281, 285, 287, 288, 291, 292, 293, 299, 300, 302, 305, 307, 308, 309, 311, 312, 320, 321, 325, 326, 328, 329, 330, 338, 342, 348, 352, 353, 362, 377, 378, 386, 393, 397, 399, 400, 405, 408, 409, 411, 414, 415, 437, 441, 448, 455, 461, 480, 481, 482, 483, 488, 494, 496, 514, 516, 518, 525, 532, 536, 537, 538, 545, 558, 565, 568, 581, 589, 602, 603, 605, 606, 625, 628, 632, 635, 637, 644, 645, 650, 656, 658, 659, 660, 679, 680, 681, 685, 690, 697, 707, 720, 723, 738, 745, 766, 775, 776, 777, 794, 797, 799, 800, 814, 817, 823, 825, 828, 836, 837, 841, 842, 847, 850, 856, 857, 865, 871, 874, 935, 936, 940, 960, 976, 982, 983, 987, 991, 997, 1001, 1002, 1014, 1018, 1023, 1026, 1028, 1031, 1032, 1033, 1035, 1044, 1046], "90": [6, 10, 13, 15, 32, 74, 104, 105, 123, 124, 125, 127, 145, 156, 172, 179, 190, 196, 198, 201, 206, 217, 245, 269, 271, 307, 311, 321, 325, 326, 362, 366, 380, 386, 411, 561, 778, 796, 823, 828, 880, 982, 987, 1019, 1023, 1045, 1046], "900": [8, 50, 74, 75], "9000": 217, "900000e": 217, "901": [169, 173, 1009], "9010": 1036, "9012": 1038, "9015": [661, 1038], "9019": 1037, "902": [5, 16, 1009], "9022": 1037, "9024": 1037, "9026666666666666": 124, "903": 8, "904": [170, 258, 408], "9041": 1038, "9043": 1038, "9044": [260, 1037], "90453403": 464, "904556e": 217, "904558e": 217, "904747e": 217, "904751e": 217, "905": 258, "905206": 54, "9067": 1037, "9069": 1039, "9078": 1037, "908": 987, "90809432": 105, "9085": 1038, "9087": 1044, "90885631": 53, "909": 8, "909293": 300, "909909": 124, "91": [6, 32, 51, 156, 255, 268, 302, 325, 326, 414, 982, 1019, 1023], "910": 4, "9100": 1037, "9101": [1023, 1038], "9105": 1037, "9108": 1037, "912": 38, "912632": 300, "913": [414, 557], "914370e": 217, "914387e": 217, "9144052": 13, "9145": 1037, "914538e": 217, "914573e": 217, "9147": 1038, "9149": 1036, "915": 8, "9151": 1038, "9157": 1038, "916": [49, 330, 331, 1009], "91629073": 588, "916555e": 217, "91666667": 360, "9167": 320, "917": [49, 354], "917281": 124, "9173": 1008, "917618e": 217, "9179845336105943": 316, "92": [13, 32, 46, 50, 98, 145, 175, 258, 302, 325, 326, 338, 375, 377, 536, 538, 545, 560, 595, 694, 796, 810, 982, 1023], "9206": 1037, "9219": 1037, "922": 1018, "9221": 647, "9222": 1038, "92222222": 1018, "9226260871125187": 268, "923223": 808, "92329566": 105, "9234": 1038, "9239": 1037, "924": 8, "92461872": 103, "925": [170, 987, 1018], "9250": 1040, "92529176": 988, "9257": 1038, "9259": 1037, "926": [205, 218, 1009], "9266666666666666": 120, "927": 435, "92708922": 1018, "9274": 1040, "9277": 1037, "9278": 1037, "928": [81, 435], "928326156359728": 322, "9284": 1037, "928571": 217, "9288": 1040, "9289": 1037, "93": [6, 32, 46, 148, 199, 242, 326, 351, 377, 644, 645, 650, 658, 659, 660, 679, 774, 785, 796, 823, 907, 982, 987, 1019, 1023], "930": 1018, "9300": 260, "930000": 300, "9302": 1037, "93036212": 1018, "9304": 1038, "93192644": 1018, "932": 8, "9326": 1008, "93271427": 154, "933": [8, 74, 226, 411], "933197": 242, "933253": 124, "9333": 411, "933333": [139, 848], "934": 1018, "935": [37, 68, 1009, 1037], "9354": 1038, "936": [8, 435, 987], "936480": 25, "9372": 1038, "937443": 25, "937532": 25, "937597": 25, "9378": 1038, "938": [8, 195, 782, 987, 1018], "938613": 25, "939": [666, 1018], "9399": 1038, "93fletcher": 983, "93goldfarb": 983, "93lindenstrauss_lemma": 893, "93shanno_algorithm": 983, "94": [4, 8, 32, 34, 54, 97, 120, 198, 236, 273, 307, 325, 326, 414, 661, 785, 982, 987, 988, 997, 1023, 1030], "940": 4, "9400": 260, "940000": 300, "940184": 124, "940201": 25, "940374": 25, "9403917": 85, "941": 8, "94114649": [839, 840], "9416": 13, "9417": 669, "943": 1018, "9431": 830, "944": [8, 1018], "9456": 1038, "94592424": 660, "946": 81, "94731329": 665, "9473684210526315": 315, "947958": 976, "948": [43, 68, 782, 987, 1009], "9484": 1038, "949": 8, "9490": 377, "9492": 1038, "9497": 1038, "9499": 636, "95": [6, 8, 13, 15, 32, 44, 52, 57, 67, 91, 101, 120, 124, 127, 158, 169, 178, 199, 201, 206, 217, 247, 248, 251, 258, 260, 261, 288, 296, 307, 311, 319, 326, 338, 362, 414, 525, 630, 631, 634, 645, 659, 745, 896, 983, 987, 988, 1000, 1023, 1033], "950": 8, "950000047683716": 360, "9502547": 183, "9507": 1037, "9515": 1038, "951751e": 217, "951958": 976, "952": [8, 49, 300, 303, 1009], "9521": 1038, "952289": 188, "9524": 1038, "953": [8, 49, 188, 218, 1009], "953061": 301, "95373": 375, "954": [875, 887], "95433992": 85, "955": [283, 411, 652], "9558": 1037, "955989": 976, "956": [8, 173, 1018], "956038": 300, "9565": 377, "9569": 1038, "957": [8, 135, 136, 310, 725, 987, 1009], "9579": 1038, "958": 8, "9584": [625, 1037], "959": [245, 252, 875, 887, 1009], "9593": 1037, "9595": 672, "9597": 1040, "9599": 1038, "95th": [13, 124, 127, 745], "96": [4, 8, 13, 32, 48, 62, 158, 228, 238, 302, 307, 310, 311, 325, 326, 377, 411, 551, 680, 681, 709, 976, 982, 987, 997, 1030], "9600": 1037, "9604": 1037, "961": 856, "961009": 976, "961111": 139, "9612": 1038, "961904": 848, "96190476": 990, "962": 8, "96228895": 105, "9623": 1037, "963": [232, 243, 1009, 1018], "9630": 673, "96362897": 1018, "9637883": 1018, "96388889": 1018, "9641": 1037, "9647": 1038, "965": [8, 987], "9655": 1038, "9656": 1038, "96578289": 1018, "966": 6, "9666": 541, "96681476": 1018, "966981": 188, "967": [74, 987, 991], "9677": 1037, "968": [156, 168, 258], "9681": 1038, "9686": 1038, "969": 374, "9693": 1037, "9694149248180188": 321, "9697": 1037, "97": [8, 32, 104, 148, 172, 236, 238, 251, 326, 338, 377, 386, 393, 411, 644, 645, 650, 656, 658, 659, 660, 679, 680, 681, 982, 988, 997, 1030], "9701": 1038, "9707": 1038, "9711": 1037, "9717": 1037, "9723": 1038, "9726": 1038, "973": [352, 411], "9731": 1038, "9733": [618, 621], "973554": 320, "973770": 188, "97435897": 360, "974e": 415, "975": [148, 168, 1002], "9750": 1037, "97545464": 242, "975455": 242, "9759": 8, "976": [191, 268], "976158": 375, "977": [4, 411], "9771": 552, "9772": 1038, "9775": 1038, "977890": 250, "9781605585161": 407, "978444": 300, "9786": 1038, "9788": 1037, "98": [32, 42, 44, 54, 62, 64, 82, 98, 148, 228, 258, 299, 307, 326, 377, 384, 411, 414, 657, 834, 890, 982, 989, 1018, 1023], "980000": 300, "9802": 1037, "981": [148, 225, 226, 377, 987, 1009], "9815": 1037, "9816": 1038, "9821": 845, "983": 725, "9830": 1037, "9832": 1038, "9833": 496, "98350372e": 180, "983667": 976, "9837": 1038, "9843": 1043, "9847": 1037, "984ea3": [44, 62], "9850": 199, "9851": 1038, "9858": 1038, "98633022": 105, "986429": 301, "9865": 1037, "9866": [608, 617, 620], "9866666666666667": 120, "9868": [893, 999], "986989": 263, "987": [268, 352], "9875": 1038, "98809919e": 180, "9884": 677, "9885": 669, "9886": 1038, "989341": 188, "98mb": 351, "99": [6, 13, 25, 32, 44, 51, 62, 95, 217, 228, 232, 238, 245, 247, 258, 261, 305, 326, 351, 367, 373, 377, 384, 411, 414, 415, 490, 645, 659, 669, 680, 681, 785, 846, 956, 982, 987, 997, 1001, 1019, 1025, 1032], "990": [667, 987], "9900": 217, "9907": 1039, "9908": 1038, "991": [268, 987], "9915849773450223": 151, "991653": 300, "9922": 1037, "9924": 539, "99244": 539, "992766": 300, "993": [268, 352], "9933333333333333": 120, "9935": 830, "993879": 300, "9939": 1038, "993919": 11, "994": 283, "9941166666666666": 315, "9945": 1037, "995": 191, "9951": 1040, "9969977": 13, "997": [7, 40, 148], "9978": 1043, "9979": 4, "9979281": 13, "998": [148, 991], "9980": [4, 1038], "9981": 4, "998142": 13, "9987": 637, "99891212e": 180, "999": [217, 260, 384, 414, 715, 856, 857], "9990": 217, "9991": [662, 663, 1038], "99918858": 105, "9993": [4, 651, 653, 1038], "9994": 661, "9995": 4, "9996": 649, "999791942438998": 316, "9998": [11, 296], "9999": [11, 217, 296, 328, 496, 625, 1038], "99999": 328, "999999": [44, 62], "999999999999999e": 138, "A": [0, 14, 17, 18, 19, 22, 25, 27, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 53, 54, 57, 59, 60, 61, 62, 64, 67, 68, 75, 78, 81, 86, 92, 96, 97, 98, 102, 112, 113, 118, 119, 121, 131, 135, 138, 139, 140, 145, 146, 147, 151, 154, 156, 158, 159, 160, 166, 169, 170, 183, 187, 200, 203, 209, 213, 214, 217, 221, 235, 238, 248, 260, 261, 263, 267, 274, 278, 299, 305, 307, 310, 315, 317, 320, 326, 327, 328, 330, 332, 338, 343, 351, 352, 353, 358, 360, 362, 366, 368, 369, 374, 375, 377, 378, 380, 382, 383, 385, 388, 392, 393, 394, 395, 396, 398, 402, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 488, 489, 490, 492, 495, 498, 499, 500, 501, 502, 506, 508, 509, 510, 511, 512, 518, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 605, 606, 608, 609, 615, 618, 625, 626, 627, 628, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 702, 703, 708, 709, 710, 714, 715, 717, 719, 720, 721, 722, 723, 728, 733, 734, 737, 739, 740, 741, 744, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 761, 763, 764, 771, 772, 773, 774, 775, 778, 785, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 934, 935, 936, 943, 944, 945, 946, 947, 972, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1014, 1015, 1021, 1022, 1023, 1025, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "AND": 732, "AS": 419, "AT": [375, 493], "And": [13, 166, 219, 220, 221, 222, 225, 226, 235, 260, 351, 388, 401, 407, 411, 415, 528, 586, 587, 589, 690, 691, 983, 987, 1005, 1009, 1037], "As": [0, 4, 7, 20, 25, 30, 40, 43, 53, 55, 57, 58, 66, 82, 86, 100, 111, 112, 118, 121, 122, 123, 125, 127, 131, 143, 151, 156, 164, 169, 171, 172, 175, 178, 181, 183, 188, 190, 199, 203, 207, 217, 225, 235, 248, 255, 257, 258, 260, 261, 263, 273, 281, 288, 306, 318, 328, 338, 352, 353, 356, 358, 359, 362, 366, 367, 375, 379, 380, 382, 384, 385, 392, 393, 394, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 444, 491, 552, 560, 564, 617, 630, 653, 654, 670, 672, 685, 732, 755, 761, 841, 842, 843, 845, 847, 878, 976, 981, 983, 984, 986, 987, 988, 990, 994, 997, 1001, 1002, 1003, 1007, 1008, 1012, 1014, 1018, 1021, 1023, 1030, 1036, 1041, 1046], "At": [13, 75, 111, 204, 272, 278, 281, 325, 328, 366, 367, 384, 395, 398, 403, 410, 414, 435, 438, 463, 586, 587, 589, 600, 827, 829, 866, 951, 976, 983, 986, 988, 992, 1001, 1012], "Be": [145, 160, 351, 380, 409, 565, 566, 646, 652, 653, 654, 656, 657, 667, 678, 702, 814, 815, 874, 997, 1027, 1031], "Being": [380, 394, 395, 401, 983, 990], "But": [4, 9, 53, 168, 200, 201, 260, 283, 305, 380, 392, 407, 410, 413, 414, 460, 743, 907, 908, 976, 987, 1002, 1008], "By": [19, 45, 95, 127, 128, 129, 178, 203, 235, 269, 278, 305, 315, 321, 322, 342, 351, 367, 380, 382, 386, 387, 394, 398, 407, 408, 410, 411, 412, 413, 414, 416, 436, 439, 443, 444, 448, 462, 465, 466, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 522, 547, 548, 555, 556, 557, 558, 562, 563, 583, 584, 586, 587, 589, 604, 607, 630, 631, 669, 671, 673, 675, 688, 690, 692, 695, 697, 698, 700, 701, 716, 726, 727, 731, 735, 780, 781, 784, 791, 793, 799, 800, 845, 859, 860, 872, 873, 875, 877, 887, 889, 897, 902, 903, 907, 908, 909, 910, 919, 920, 955, 976, 977, 979, 983, 987, 994, 995, 997, 999, 1003, 1014, 1018, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1047, 1048], "For": [4, 8, 9, 12, 13, 14, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 55, 57, 58, 60, 67, 73, 80, 86, 91, 96, 114, 116, 119, 124, 125, 127, 128, 130, 144, 145, 148, 151, 153, 158, 163, 164, 169, 170, 183, 187, 188, 199, 200, 203, 204, 207, 216, 217, 220, 222, 225, 228, 229, 231, 232, 233, 235, 242, 250, 257, 260, 261, 267, 275, 281, 283, 293, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 328, 330, 338, 340, 342, 346, 351, 352, 353, 356, 357, 360, 362, 366, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 398, 401, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 423, 430, 435, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 470, 472, 480, 481, 482, 483, 487, 494, 496, 501, 510, 512, 513, 517, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 579, 580, 581, 582, 586, 587, 589, 590, 591, 592, 595, 600, 605, 606, 607, 608, 609, 612, 617, 620, 621, 625, 626, 627, 628, 629, 630, 631, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 690, 691, 693, 699, 702, 704, 705, 726, 727, 735, 738, 739, 760, 766, 775, 780, 781, 784, 785, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 925, 950, 971, 976, 977, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1006, 1011, 1012, 1014, 1021, 1022, 1023, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "If": [0, 4, 11, 13, 27, 32, 42, 49, 55, 71, 82, 98, 109, 119, 124, 127, 132, 160, 164, 169, 180, 199, 214, 216, 217, 235, 238, 260, 267, 275, 288, 296, 305, 310, 311, 338, 342, 346, 347, 351, 352, 353, 360, 362, 366, 367, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 397, 398, 401, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 428, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 512, 513, 517, 520, 521, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 709, 710, 711, 712, 714, 715, 716, 723, 724, 725, 726, 727, 728, 729, 733, 735, 738, 739, 742, 743, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 758, 760, 761, 763, 764, 765, 766, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 808, 810, 813, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 924, 925, 928, 934, 936, 938, 940, 944, 946, 950, 953, 955, 956, 958, 961, 962, 968, 971, 972, 973, 974, 976, 977, 979, 981, 982, 983, 984, 985, 987, 990, 991, 993, 994, 997, 999, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1014, 1015, 1021, 1022, 1023, 1030, 1033, 1034, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1046, 1048], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 15, 25, 26, 27, 34, 37, 39, 48, 49, 53, 55, 57, 58, 60, 66, 67, 71, 72, 74, 75, 78, 80, 81, 82, 86, 89, 90, 95, 97, 100, 102, 103, 109, 111, 114, 116, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 132, 135, 144, 145, 147, 148, 151, 155, 156, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 183, 187, 188, 190, 194, 199, 200, 201, 202, 203, 204, 207, 216, 217, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 248, 250, 254, 257, 258, 260, 261, 262, 263, 265, 266, 269, 270, 272, 274, 275, 278, 283, 286, 289, 290, 292, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 319, 320, 322, 327, 329, 338, 342, 346, 351, 352, 353, 356, 360, 362, 366, 367, 368, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 435, 438, 439, 440, 441, 442, 445, 446, 447, 450, 460, 461, 462, 467, 470, 473, 491, 494, 501, 506, 507, 509, 521, 532, 534, 536, 538, 539, 540, 542, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 589, 600, 604, 607, 608, 609, 628, 630, 631, 632, 634, 641, 642, 643, 645, 646, 647, 649, 651, 653, 656, 657, 659, 661, 663, 664, 666, 667, 672, 673, 674, 677, 678, 682, 683, 684, 694, 697, 701, 710, 716, 718, 723, 725, 726, 731, 732, 735, 737, 739, 751, 753, 754, 778, 780, 782, 785, 791, 793, 794, 795, 796, 799, 800, 802, 810, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856, 864, 866, 872, 873, 877, 878, 880, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 904, 907, 909, 914, 918, 920, 936, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1008, 1012, 1014, 1021, 1022, 1023, 1027, 1030, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "Ines": 1047, "It": [0, 4, 7, 8, 9, 13, 20, 25, 34, 37, 40, 53, 55, 58, 72, 78, 80, 82, 95, 98, 99, 104, 111, 114, 116, 117, 120, 122, 124, 132, 148, 156, 157, 158, 163, 164, 169, 170, 171, 179, 183, 187, 188, 196, 199, 203, 213, 216, 217, 220, 221, 228, 233, 235, 238, 255, 256, 258, 260, 261, 263, 266, 267, 278, 283, 289, 290, 291, 293, 294, 296, 305, 309, 310, 312, 315, 321, 334, 338, 342, 346, 351, 352, 353, 362, 366, 367, 368, 373, 375, 377, 378, 380, 382, 384, 385, 386, 388, 389, 392, 393, 394, 397, 398, 401, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 435, 436, 439, 440, 441, 442, 443, 445, 446, 447, 450, 457, 460, 465, 466, 467, 472, 476, 483, 485, 494, 506, 513, 522, 531, 533, 534, 536, 538, 539, 547, 548, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 587, 594, 600, 604, 605, 606, 609, 612, 613, 617, 618, 620, 621, 625, 628, 629, 630, 631, 639, 640, 641, 644, 645, 648, 650, 651, 652, 653, 656, 658, 659, 660, 661, 664, 665, 666, 668, 669, 670, 672, 674, 675, 676, 679, 680, 681, 682, 685, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 702, 706, 707, 708, 714, 720, 731, 739, 740, 744, 755, 756, 759, 762, 778, 780, 785, 796, 798, 799, 800, 802, 808, 809, 810, 818, 820, 823, 826, 835, 836, 841, 842, 843, 845, 848, 849, 850, 851, 855, 856, 857, 861, 862, 863, 867, 868, 869, 873, 876, 878, 888, 891, 892, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 923, 936, 944, 945, 955, 958, 961, 963, 964, 965, 966, 967, 968, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1007, 1012, 1014, 1020, 1021, 1022, 1023, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "Its": [78, 258, 262, 376, 382, 394, 412, 417, 536, 982, 983, 992, 995, 1001, 1007, 1012, 1033, 1047], "NOT": [235, 289, 377, 383, 806, 839, 840], "Nearness": 625, "No": [24, 113, 126, 183, 191, 205, 207, 208, 235, 326, 343, 346, 357, 377, 388, 397, 407, 472, 557, 558, 588, 589, 633, 643, 662, 674, 676, 683, 684, 794, 983, 1047], "Not": [55, 138, 170, 366, 392, 407, 425, 426, 429, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 467, 468, 469, 470, 471, 472, 473, 474, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 561, 564, 567, 568, 579, 580, 581, 586, 587, 589, 625, 626, 627, 628, 675, 686, 687, 688, 689, 691, 791, 794, 795, 796, 799, 800, 810, 836, 839, 840, 843, 844, 845, 847, 851, 863, 871, 874, 875, 877, 880, 891, 892, 903, 987, 993, 1007, 1039], "OF": 377, "ON": 320, "ONE": [374, 605, 606], "OR": [305, 407, 418, 442, 1041], "Of": [9, 25, 27, 163, 366, 382, 407, 415, 977], "On": [4, 12, 13, 17, 26, 67, 71, 72, 85, 86, 100, 111, 114, 116, 118, 119, 124, 128, 129, 132, 135, 143, 145, 155, 156, 169, 170, 171, 180, 187, 188, 201, 203, 229, 230, 231, 232, 234, 235, 238, 239, 240, 241, 242, 245, 247, 250, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 272, 302, 305, 307, 309, 310, 311, 316, 317, 319, 320, 322, 327, 338, 346, 360, 366, 378, 381, 382, 384, 392, 394, 401, 403, 405, 407, 411, 412, 414, 416, 417, 641, 654, 689, 732, 758, 864, 880, 976, 980, 983, 986, 987, 989, 993, 995, 1000, 1002, 1018, 1021], "One": [4, 9, 12, 24, 30, 49, 55, 91, 100, 102, 119, 121, 124, 127, 128, 166, 169, 172, 177, 203, 208, 214, 218, 228, 239, 250, 260, 267, 270, 278, 289, 290, 292, 306, 322, 333, 335, 336, 349, 352, 366, 377, 380, 393, 394, 407, 410, 412, 413, 414, 415, 416, 418, 442, 447, 470, 472, 476, 510, 564, 629, 637, 656, 664, 666, 671, 673, 674, 675, 785, 803, 804, 827, 828, 829, 860, 861, 872, 903, 950, 977, 979, 983, 984, 985, 986, 987, 988, 990, 991, 994, 995, 997, 1002, 1009, 1010, 1025, 1034, 1036, 1043, 1045], "Or": [351, 360, 411, 412, 872, 987, 993, 1001], "Such": [14, 128, 151, 156, 168, 178, 183, 188, 200, 263, 351, 394, 395, 411, 412, 414, 553, 554, 654, 977, 987, 990, 997, 1003, 1021, 1040, 1045, 1047], "THE": 377, "That": [13, 27, 95, 111, 127, 148, 169, 188, 228, 260, 264, 352, 353, 367, 374, 388, 394, 411, 416, 417, 441, 444, 445, 555, 562, 591, 814, 907, 908, 976, 984, 985, 993, 1003, 1039, 1040], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 170, 171, 172, 175, 178, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 207, 208, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 250, 251, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 335, 336, 338, 342, 343, 344, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 429, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 762, 763, 764, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 930, 931, 932, 933, 934, 935, 936, 938, 939, 943, 944, 947, 950, 952, 953, 954, 955, 956, 957, 958, 961, 969, 970, 971, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "Their": [169, 375, 377, 395, 407, 642, 1030], "Then": [71, 112, 116, 119, 127, 132, 135, 145, 169, 175, 183, 187, 199, 203, 224, 229, 235, 241, 262, 263, 278, 351, 374, 384, 386, 388, 397, 404, 405, 407, 410, 412, 415, 416, 568, 591, 717, 753, 796, 810, 899, 900, 977, 986, 987, 993, 1002, 1023, 1039], "There": [39, 46, 117, 151, 217, 224, 235, 251, 255, 257, 260, 281, 351, 373, 375, 377, 380, 381, 382, 385, 392, 394, 395, 397, 404, 406, 407, 412, 414, 415, 416, 444, 450, 460, 532, 551, 552, 557, 558, 586, 587, 589, 604, 643, 977, 983, 984, 985, 986, 987, 990, 994, 997, 1001, 1002, 1003, 1006, 1011, 1022, 1030, 1038], "These": [4, 5, 7, 27, 51, 95, 97, 116, 120, 166, 170, 188, 199, 200, 201, 229, 267, 278, 283, 287, 302, 305, 312, 314, 319, 326, 328, 362, 366, 367, 373, 376, 377, 380, 382, 384, 387, 389, 392, 394, 397, 398, 401, 404, 405, 406, 407, 410, 412, 414, 415, 416, 417, 440, 444, 446, 496, 506, 507, 513, 536, 565, 566, 600, 601, 666, 674, 675, 697, 704, 730, 775, 791, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 844, 845, 864, 976, 978, 981, 983, 984, 987, 988, 998, 1000, 1002, 1007, 1014, 1018, 1023, 1030, 1036, 1038, 1039, 1040, 1043, 1047], "To": [4, 8, 26, 27, 32, 46, 55, 57, 78, 80, 82, 86, 100, 111, 121, 124, 125, 134, 138, 148, 156, 157, 160, 163, 164, 168, 169, 175, 180, 183, 187, 199, 200, 201, 203, 207, 217, 232, 233, 235, 238, 240, 242, 250, 255, 257, 258, 260, 262, 263, 265, 267, 278, 281, 301, 305, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 348, 352, 356, 362, 366, 367, 373, 374, 378, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 401, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 444, 446, 447, 448, 459, 462, 465, 490, 494, 500, 501, 505, 506, 507, 529, 535, 536, 537, 539, 541, 542, 543, 544, 555, 556, 557, 558, 562, 563, 567, 595, 609, 625, 630, 644, 645, 650, 651, 654, 656, 657, 658, 659, 660, 661, 682, 698, 710, 725, 760, 782, 790, 799, 800, 821, 828, 859, 870, 875, 889, 890, 899, 900, 904, 907, 908, 909, 910, 926, 936, 955, 974, 976, 977, 979, 982, 983, 984, 985, 987, 988, 989, 990, 993, 994, 997, 1001, 1002, 1003, 1012, 1014, 1018, 1020, 1021, 1023, 1030, 1033, 1035, 1036, 1037, 1039, 1041], "Will": [380, 495, 532, 625, 642, 643, 644, 650, 654, 655, 658, 659, 660, 661, 662, 663, 671, 673, 705, 712, 785, 864, 868, 878, 879, 1033, 1034, 1036, 1038], "Willing": [1036, 1037], "With": [24, 34, 44, 67, 75, 90, 100, 127, 129, 144, 166, 170, 199, 201, 227, 229, 234, 236, 242, 243, 260, 287, 366, 369, 375, 378, 380, 382, 394, 398, 407, 408, 411, 414, 416, 435, 437, 499, 539, 580, 630, 631, 656, 857, 860, 862, 873, 879, 880, 906, 908, 980, 983, 984, 987, 988, 990, 991, 994, 1001, 1003, 1009, 1014, 1015, 1022, 1027, 1033, 1037, 1038, 1040, 1042, 1044], "_": [4, 5, 7, 8, 9, 11, 12, 13, 15, 20, 25, 26, 27, 30, 32, 33, 40, 43, 50, 53, 55, 58, 63, 67, 70, 82, 90, 92, 95, 100, 102, 104, 114, 115, 116, 127, 143, 151, 156, 157, 158, 168, 169, 170, 172, 175, 178, 182, 183, 184, 186, 187, 188, 191, 196, 197, 199, 201, 203, 212, 213, 216, 221, 224, 229, 234, 238, 242, 255, 260, 262, 263, 264, 266, 267, 269, 278, 286, 291, 294, 302, 307, 310, 311, 312, 316, 319, 320, 321, 326, 327, 337, 342, 346, 351, 353, 357, 382, 386, 394, 412, 414, 415, 419, 444, 476, 530, 531, 532, 533, 534, 536, 537, 538, 541, 543, 544, 545, 564, 595, 644, 645, 650, 651, 658, 659, 660, 661, 679, 680, 681, 682, 686, 687, 688, 689, 691, 693, 694, 696, 698, 708, 761, 796, 802, 810, 818, 843, 851, 872, 873, 880, 977, 983, 984, 987, 989, 990, 991, 994, 995, 997, 1002, 1003, 1021, 1022, 1037], "_0": [198, 683, 983, 987, 1002], "_1": [318, 342, 409, 412, 415, 529, 535, 536, 538, 543, 544, 545, 644, 645, 650, 651, 652, 653, 654, 658, 659, 660, 661, 679, 680, 681, 682, 763, 983, 985, 987, 1002], "_11": 650, "_2": [81, 156, 342, 412, 415, 529, 535, 543, 544, 644, 650, 983, 991, 1001, 1002], "_21": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682], "__": [73, 261, 394, 408, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 1019, 1038, 1039], "______________________________________________________________________": 326, "________________________________________________________________________________": [11, 54, 351], "__________________________________________________________________________________": 58, "________________________________________________________ward_tre": 54, "_____________________________________________________f_regress": 54, "__add__": [417, 622], "__array__": [1033, 1040], "__array_function__": [1008, 1040], "__c": 382, "__call__": [159, 338, 394, 415, 417, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 1037], "__class__": [163, 199, 201, 235, 238, 262, 307, 351, 352, 353, 387], "__class_weight": 382, "__dataframe__": [559, 560], "__doc__": [43, 75, 156, 248, 394], "__file__": [8, 10, 1043], "__getattr__": 382, "__getitem__": 1048, "__getstate__": [1037, 1045], "__init__": [8, 56, 109, 159, 235, 283, 338, 380, 382, 384, 385, 386, 387, 394, 415, 421, 424, 427, 430, 431, 616, 948, 1031, 1036, 1038, 1043, 1044, 1045, 1046], "__init_subclass__": 382, "__len__": 1039, "__main__": [329, 392], "__metadata_request__fit": 235, "__mul__": 619, "__mul___": 417, "__name__": [7, 25, 61, 163, 199, 201, 235, 238, 242, 255, 262, 307, 329, 351, 352, 353, 387, 392, 872], "__pow__": [417, 614], "__repr__": [382, 1008, 1039], "__sklearn_clone__": [382, 432, 1046], "__sklearn_is_fitted__": [8, 27, 56, 107, 108, 159, 166, 235, 283, 382, 421, 424, 971, 1009, 1043, 1044], "__traceback__": [569, 570, 571, 572, 573, 574, 575, 576], "__version__": 384, "_agglom": 54, "_array_api": 403, "_bag": 928, "_base": [246, 382], "_basehmm": 1030, "_bay": 928, "_birch": 1040, "_breast_cancer_dataset": 148, "_build": 380, "_c_step": 1037, "_cfnode": 440, "_check_bounds_param": 1042, "_check_param_grid": 1036, "_check_sample_weight": 1043, "_check_stop_list": 589, "_check_target": 1037, "_check_x": 1040, "_class": 987, "_class_cov": 1038, "_class_mean": 1038, "_classif": 302, "_classifier_ha": 56, "_column_transform": [71, 132], "_compon": [232, 534], "_coo": [583, 584], "_count_nonzero_coeffici": 7, "_criterion": 1038, "_csr": 872, "_cython_bla": 381, "_devianc": 987, "_diabetes_dataset": 148, "_distn_infrastructur": 272, "_doc_link_modul": 382, "_doc_link_templ": 382, "_doc_link_url_param_gener": 382, "_dotbla": 386, "_encod": 1038, "_error": 987, "_estimator_html_repr": 932, "_estimator_typ": [382, 394, 424, 425, 426, 429, 430, 1035], "_estimator_with_converted_arrai": 403, "_f": [159, 983], "_featur": [412, 536, 538, 545], "_fit_and_scor": 1038, "_fit_stag": [557, 558], "_fro": [529, 535, 543, 544, 644, 645, 650, 658, 659, 660, 679], "_g": 159, "_gb": 1040, "_generate_center_coordin": 14, "_get_support_mask": 599, "_get_tag": [382, 1041], "_get_warnings_filters_info_list": 367, "_gpr": 160, "_h": [536, 538, 545], "_hist_gradient_boost": 384, "_i": [405, 414, 978, 983, 987, 991, 1002], "_idx": 394, "_init": 179, "_init_t": 1001, "_initialize_nmf": 386, "_is_fit": 109, "_iter": 384, "_j": [405, 978], "_k": [409, 981, 983], "_l": 987, "_learntselectormixin": 1035, "_level": [417, 623], "_lfw": 1019, "_logist": 380, "_loss": [394, 987], "_m": 1003, "_mean": 311, "_mean_frequency_by_risk_group": 199, "_method": 947, "_more_tag": 382, "_my": 380, "_n": [415, 987], "_n_cluster": 380, "_n_compon": 545, "_n_features_out": 423, "_name_estim": 1040, "_neg": 386, "_newton_cg": 1041, "_nls_subproblem": 386, "_nmf": 386, "_not_in_sphinx": [8, 10], "_num_thread": 367, "_obj": 947, "_openmp_help": 381, "_pairwis": [1040, 1042], "_pairwise_cal": 626, "_plain_sgd": 1045, "_plot": 325, "_po": 386, "_posterior_mod": 608, "_preprocess_data": 685, "_pvalu": 1030, "_rand": 362, "_ratio": [536, 538, 545], "_request": [398, 1048], "_required_paramet": [235, 382, 427], "_reset": 8, "_run_search": 1038, "_safe_index": [1043, 1047, 1048], "_safe_split": 382, "_safe_tag": 1041, "_sag": 1039, "_sampl": [232, 412, 536, 538, 545], "_samples_gener": 248, "_score": [394, 796, 810, 822, 987, 1030, 1043], "_search": 1036, "_serial": 235, "_sgd_fast": 1045, "_skip_test": 382, "_spars": 386, "_sparse_fit": 1040, "_split": 255, "_std": 311, "_t": 1001, "_test": [207, 307, 367, 382, 1043], "_test_scor": [260, 470, 592, 1043], "_transform_select": 1036, "_tree": [907, 908, 909, 910, 1031, 1033], "_univariate_select": 54, "_valu": [417, 611], "_w": [536, 538, 545], "_weight": [14, 217], "_weight_boost": 928, "_weighted_percentil": 1043, "_x_is_even": 948, "_xfail_check": 382, "a16": [1040, 1041], "a65628": [44, 62], "a674e682c281": 385, "a_": [96, 404, 407, 536, 538, 545, 983, 1022], "a_column": 717, "a_i": 407, "a_mask": 269, "a_n": 404, "a_row": 717, "a_tru": 269, "aaa": 159, "aaaaff": [288, 291], "aaai": [407, 418, 442, 834, 989], "aact": 159, "aaffaa": 291, "aagaard": 1034, "aakanksha": 1038, "aapl": 12, "aarch64": 388, "aaron": [492, 983, 1033, 1034, 1035, 1040], "aarshai": [1037, 1038], "aashil": 1037, "ab": [12, 17, 40, 75, 99, 105, 113, 121, 132, 144, 148, 172, 186, 190, 210, 212, 215, 217, 223, 260, 305, 336, 348, 407, 536, 538, 545, 625, 743, 839, 840, 874, 987], "ab_mask": 269, "abadi": [1036, 1037], "abandon": 380, "abati": [1045, 1047], "abbi": [1040, 1041], "abbrevi": 697, "abdela": 1039, "abdulelah": 1043, "abdur": 1040, "abenbihi": 1040, "abhijeet": 1032, "abhinav": [1040, 1043], "abhishek": [1033, 1034, 1040, 1044, 1046, 1047], "abhyudai": 1037, "abi": 384, "abid": 380, "abil": [9, 13, 61, 80, 96, 124, 150, 151, 152, 156, 158, 160, 161, 163, 166, 168, 169, 171, 199, 203, 217, 228, 351, 368, 397, 414, 415, 417, 609, 620, 623, 779, 780, 781, 784, 785, 984, 987, 990, 993, 1003, 1008, 1009, 1030, 1032, 1037, 1039, 1043, 1044], "abirami": 407, "abl": [4, 5, 9, 24, 47, 55, 61, 82, 86, 99, 100, 127, 129, 157, 169, 172, 183, 188, 199, 215, 217, 224, 266, 271, 322, 338, 362, 366, 367, 368, 374, 378, 380, 382, 384, 385, 392, 407, 409, 411, 415, 483, 501, 532, 824, 871, 976, 977, 983, 986, 987, 988, 993, 997, 1000, 1003, 1004, 1008, 1014, 1022, 1023, 1036, 1037, 1041, 1048], "ablin": 1045, "abnorm": [213, 228, 289, 337, 375, 490, 561, 845, 993, 1038], "abnormal_termination_in_lnsrch": 160, "abo7atm": 1042, "abort": 690, "about": [7, 11, 29, 44, 53, 57, 62, 70, 86, 89, 120, 145, 160, 166, 168, 172, 203, 216, 228, 235, 257, 258, 260, 262, 267, 281, 288, 310, 315, 317, 318, 319, 320, 321, 326, 351, 353, 360, 362, 366, 367, 369, 373, 375, 379, 380, 384, 385, 386, 388, 393, 394, 395, 401, 406, 411, 412, 415, 417, 436, 490, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 513, 559, 560, 591, 592, 605, 606, 612, 638, 674, 676, 740, 796, 802, 810, 818, 828, 878, 920, 977, 983, 984, 986, 988, 990, 993, 994, 997, 998, 1000, 1002, 1003, 1005, 1007, 1011, 1012, 1014, 1015, 1021, 1023, 1035, 1036, 1046, 1048], "abov": [4, 25, 26, 27, 37, 44, 66, 70, 113, 116, 117, 124, 127, 135, 147, 148, 169, 170, 185, 199, 201, 205, 210, 232, 235, 236, 260, 266, 278, 288, 307, 310, 311, 316, 318, 322, 352, 353, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 382, 384, 386, 392, 394, 395, 405, 407, 408, 409, 411, 412, 413, 415, 417, 439, 443, 462, 465, 487, 493, 494, 495, 521, 588, 632, 702, 752, 796, 800, 808, 810, 820, 862, 863, 876, 882, 888, 896, 950, 976, 977, 979, 981, 983, 984, 987, 990, 992, 994, 997, 1001, 1002, 1003, 1008, 1014, 1015, 1021, 1022, 1023, 1036], "abraham": [1030, 1031, 1036, 1040], "abrahamowicz": 997, "absenc": [228, 263, 394, 710, 862, 986, 987], "absent": [394, 415, 726, 751, 820], "absgrad": 1041, "absher": 1032, "absolut": [4, 13, 75, 99, 121, 148, 169, 199, 201, 205, 217, 382, 407, 409, 411, 412, 414, 415, 416, 417, 418, 442, 448, 454, 455, 529, 535, 540, 543, 544, 546, 547, 548, 556, 558, 559, 560, 563, 586, 588, 589, 591, 595, 600, 617, 625, 630, 644, 647, 648, 650, 652, 654, 669, 670, 672, 674, 676, 680, 681, 702, 715, 719, 733, 734, 742, 743, 745, 750, 752, 754, 792, 798, 802, 813, 816, 823, 825, 837, 839, 840, 844, 863, 868, 871, 884, 908, 910, 973, 983, 984, 997, 1001, 1003, 1021, 1022, 1031, 1036, 1041, 1042, 1043, 1044, 1047], "absolute_error": [13, 414, 556, 558, 560, 563, 669, 908, 910, 1043], "absolute_loss": 1043, "absolutelynowarranti": 1038, "absp": 855, "abstain": 532, "abstract": [394, 412, 417, 616, 766, 1007, 1030], "abstractmethod": 1040, "absurd": 994, "abund": 375, "ac": [238, 528, 662, 683, 684, 983, 1000, 1023], "acad": [687, 691, 984], "academ": [411, 1012], "academi": [80, 846], "acc": 123, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "acc_histori": 8, "acc_knn": 292, "acceler": [233, 320, 366, 392, 403, 407, 466, 690, 897, 984, 1007, 1012, 1039, 1043, 1045, 1047], "accent": [347, 586, 587, 589, 1040], "accept": [148, 151, 235, 257, 315, 338, 351, 353, 362, 366, 367, 374, 380, 382, 389, 392, 393, 394, 395, 398, 401, 403, 407, 415, 435, 439, 442, 443, 446, 459, 462, 465, 506, 507, 553, 554, 559, 560, 567, 568, 579, 580, 591, 592, 595, 626, 633, 637, 641, 644, 645, 650, 651, 677, 724, 739, 775, 794, 795, 799, 800, 841, 842, 849, 850, 859, 863, 917, 919, 920, 923, 983, 985, 987, 990, 995, 997, 1002, 1007, 1008, 1018, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "accept_large_spars": [919, 920, 1038], "accept_spars": [863, 919, 920, 1037, 1047], "access": [4, 49, 78, 122, 238, 246, 251, 322, 351, 360, 366, 367, 380, 381, 382, 388, 392, 394, 395, 403, 407, 409, 410, 414, 415, 417, 448, 455, 462, 534, 565, 566, 567, 568, 615, 857, 858, 859, 914, 976, 983, 986, 987, 993, 994, 995, 1001, 1002, 1008, 1012, 1014, 1022, 1023, 1030, 1032, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1046], "accid": [199, 217], "accident": [1030, 1034, 1039], "accommod": [156, 1038], "accompani": [260, 1038], "accomplish": [235, 382, 405, 544, 984, 988, 990, 1012, 1047], "accord": [17, 24, 26, 37, 49, 78, 117, 123, 148, 152, 182, 199, 217, 232, 315, 342, 352, 362, 380, 382, 392, 393, 394, 395, 404, 405, 407, 409, 411, 412, 414, 415, 417, 435, 448, 450, 454, 458, 460, 463, 467, 502, 514, 515, 516, 523, 528, 530, 533, 534, 536, 538, 548, 551, 552, 559, 560, 561, 564, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 639, 640, 642, 643, 647, 656, 657, 668, 678, 689, 693, 732, 776, 777, 796, 797, 798, 799, 800, 803, 804, 805, 810, 820, 834, 835, 836, 837, 838, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 862, 869, 877, 889, 891, 892, 899, 900, 901, 902, 904, 905, 981, 983, 987, 989, 990, 997, 1000, 1001, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "accordingli": [127, 170, 238, 342, 380, 384, 385, 1037, 1038, 1045], "account": [13, 14, 55, 97, 103, 111, 127, 156, 163, 169, 217, 235, 260, 286, 292, 346, 348, 352, 366, 376, 380, 394, 395, 398, 401, 407, 410, 411, 412, 414, 415, 461, 559, 560, 565, 566, 625, 626, 628, 630, 631, 647, 671, 677, 702, 705, 725, 726, 727, 735, 740, 753, 780, 781, 784, 785, 797, 801, 814, 873, 979, 981, 985, 987, 988, 989, 990, 997, 1001, 1003, 1035, 1037, 1038, 1039, 1042, 1043, 1045, 1047], "acctactagaagtt": 392, "acctcctagaag": 392, "accumul": [8, 50, 118, 119, 188, 384, 386, 407, 415, 987, 1031, 1038], "accur": [4, 9, 13, 21, 25, 26, 80, 95, 126, 151, 158, 169, 170, 203, 214, 217, 260, 267, 271, 278, 319, 351, 352, 362, 379, 394, 405, 407, 409, 412, 414, 415, 416, 435, 441, 445, 449, 451, 457, 529, 536, 538, 540, 541, 543, 544, 545, 605, 606, 632, 799, 800, 839, 840, 935, 936, 979, 984, 987, 1003, 1044], "accuraci": [4, 6, 7, 8, 25, 30, 31, 32, 33, 70, 71, 72, 73, 111, 117, 118, 122, 123, 130, 144, 145, 147, 152, 172, 175, 199, 203, 207, 214, 215, 247, 258, 259, 260, 261, 262, 264, 266, 275, 278, 285, 291, 292, 293, 302, 307, 310, 321, 325, 326, 328, 338, 341, 342, 346, 362, 366, 382, 393, 394, 406, 407, 411, 414, 415, 416, 424, 435, 447, 467, 469, 470, 476, 530, 532, 539, 547, 548, 549, 551, 553, 555, 556, 557, 559, 562, 563, 565, 567, 608, 632, 656, 657, 664, 666, 669, 672, 673, 674, 690, 695, 701, 706, 709, 711, 716, 729, 730, 731, 735, 740, 751, 760, 784, 791, 793, 823, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 841, 846, 848, 849, 856, 894, 895, 899, 901, 904, 907, 909, 935, 936, 976, 981, 982, 983, 984, 988, 990, 991, 995, 999, 1001, 1003, 1018, 1023, 1038, 1039, 1048], "accuracy_histori": 8, "accuracy_scor": [30, 111, 152, 264, 310, 328, 351, 362, 393, 398, 403, 424, 555, 562, 706, 726, 727, 731, 735, 780, 781, 784, 791, 793, 929, 976, 987, 1031, 1032, 1033, 1042, 1047], "acf": 121, "achar": [1037, 1038, 1039, 1040], "achiev": [4, 12, 17, 19, 27, 31, 98, 111, 120, 122, 127, 130, 159, 175, 199, 207, 257, 260, 267, 310, 328, 338, 341, 342, 346, 351, 362, 366, 368, 374, 375, 377, 382, 386, 392, 394, 404, 405, 407, 411, 412, 414, 415, 551, 556, 563, 638, 647, 674, 676, 705, 726, 727, 735, 737, 760, 780, 781, 784, 799, 800, 835, 879, 976, 977, 979, 983, 987, 997, 1000, 1002, 1023, 1043], "achin": 1012, "achliopta": [232, 892, 893, 999], "acid": [310, 377], "acknowledg": [379, 607, 1047], "acl": [896, 1000, 1001], "acm": [374, 375, 407, 418, 442, 448, 455, 458, 509, 561, 674, 723, 753, 845, 987, 990, 993, 999], "acoust": 987, "acq": 8, "acquaint": 380, "acquir": [14, 119, 262, 1042], "acquisit": [404, 717], "acronym": 384, "across": [4, 13, 55, 61, 67, 85, 90, 117, 138, 169, 188, 193, 221, 255, 257, 260, 283, 305, 310, 342, 381, 382, 389, 394, 401, 406, 407, 411, 415, 416, 419, 435, 438, 448, 450, 452, 455, 458, 460, 467, 470, 472, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 565, 566, 586, 589, 592, 600, 605, 606, 608, 609, 630, 631, 632, 637, 638, 639, 640, 644, 645, 648, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 674, 676, 677, 683, 684, 687, 688, 689, 690, 691, 692, 693, 702, 703, 715, 728, 754, 785, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 844, 848, 855, 856, 857, 864, 868, 869, 876, 877, 879, 880, 888, 891, 892, 894, 895, 899, 900, 901, 904, 907, 908, 935, 936, 955, 958, 961, 976, 983, 985, 987, 997, 1001, 1003, 1008, 1012, 1023, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1048], "act": [338, 351, 380, 393, 413, 414, 711, 726, 727, 735, 780, 781, 784, 874, 878, 984, 987, 990, 1002, 1038], "action": [318, 351, 379, 383, 384, 397, 997, 1040], "activ": [0, 32, 166, 207, 237, 245, 251, 261, 324, 325, 327, 331, 353, 374, 375, 378, 380, 381, 386, 388, 392, 394, 395, 397, 398, 408, 494, 500, 524, 630, 633, 635, 648, 649, 651, 652, 653, 661, 662, 663, 680, 681, 682, 683, 684, 711, 716, 794, 855, 856, 857, 895, 953, 983, 984, 985, 986, 990, 991, 992, 1000, 1009, 1011, 1041], "active_": [648, 649, 652, 653], "active_features_": 1038, "actual": [4, 13, 27, 46, 60, 75, 86, 117, 127, 148, 169, 175, 188, 199, 203, 207, 247, 256, 263, 353, 362, 366, 368, 377, 380, 382, 385, 386, 392, 393, 394, 405, 407, 412, 414, 415, 416, 432, 507, 513, 514, 525, 533, 536, 538, 545, 560, 561, 642, 643, 646, 656, 657, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 678, 685, 689, 693, 699, 702, 707, 713, 719, 720, 721, 782, 794, 799, 800, 815, 816, 845, 876, 899, 905, 927, 928, 929, 962, 979, 986, 987, 990, 994, 995, 1011, 1037, 1038, 1044, 1045, 1046], "actual_vs_predict": [4, 75, 132, 169, 256, 320, 699], "actuari": 405, "ad": [4, 14, 20, 75, 102, 104, 111, 117, 127, 144, 151, 157, 158, 178, 183, 201, 203, 224, 234, 235, 260, 261, 262, 305, 316, 317, 318, 319, 320, 321, 322, 329, 342, 352, 379, 380, 382, 384, 386, 392, 394, 395, 412, 414, 415, 416, 417, 418, 419, 425, 429, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 508, 510, 512, 520, 521, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 702, 706, 711, 712, 716, 719, 720, 721, 722, 724, 725, 726, 727, 728, 731, 736, 737, 738, 739, 740, 743, 750, 751, 754, 758, 763, 764, 766, 772, 774, 775, 779, 780, 781, 782, 784, 786, 787, 788, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 809, 810, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 888, 889, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 917, 919, 920, 926, 930, 931, 935, 936, 943, 944, 945, 946, 947, 950, 953, 955, 957, 962, 968, 974, 976, 980, 982, 983, 984, 988, 990, 991, 993, 1008, 1012, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "adaboost": [31, 91, 110, 114, 115, 120, 122, 128, 131, 132, 135, 136, 154, 166, 306, 342, 357, 358, 359, 517, 549, 551, 552, 557, 629, 701, 825, 907, 908, 1009, 1010, 1025, 1032], "adaboost_clf": 111, "adaboostclassifi": [31, 113, 120, 398, 414, 552, 557, 559, 928, 1032, 1033, 1036, 1037, 1039, 1040, 1043, 1045, 1046, 1047], "adaboostregressor": [112, 398, 414, 551, 560, 928, 1032, 1033, 1036, 1039, 1040, 1043, 1045, 1046], "adagrad": 1007, "adam": [281, 300, 856, 857, 991, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "adamgonzo": 1044, "adamson": 1042, "adanhawth": [1038, 1039], "adapt": [53, 55, 111, 123, 124, 154, 245, 246, 307, 342, 367, 378, 379, 380, 389, 407, 414, 417, 513, 514, 515, 516, 674, 675, 676, 856, 857, 983, 989, 991, 997, 1001, 1007, 1008, 1038, 1039, 1046, 1047], "adarsh": 1047, "add": [5, 12, 13, 17, 20, 25, 26, 27, 32, 33, 40, 44, 54, 75, 80, 81, 86, 96, 120, 123, 144, 148, 151, 156, 157, 158, 163, 164, 181, 188, 194, 200, 202, 203, 214, 223, 228, 232, 234, 235, 267, 269, 270, 283, 295, 307, 309, 315, 317, 318, 341, 342, 345, 346, 352, 366, 378, 379, 380, 381, 382, 384, 386, 388, 394, 397, 403, 405, 411, 414, 415, 416, 513, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 600, 625, 626, 628, 630, 656, 657, 692, 695, 817, 839, 840, 896, 926, 944, 945, 955, 976, 977, 986, 993, 997, 1000, 1001, 1008, 1021, 1022, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "add_2d_scatt": 220, "add_artist": [34, 221, 245, 246, 247, 250, 251], "add_ax": [170, 224, 271], "add_categori": 238, "add_collect": [12, 223, 231], "add_ind": [132, 164, 625, 626, 628, 977, 1039, 1042, 1046], "add_missing_valu": 164, "add_nois": 157, "add_self_request": [235, 944], "add_subplot": [7, 25, 27, 42, 45, 64, 67, 90, 101, 170, 196, 214, 222, 224, 325, 326, 387, 1022], "add_trac": 117, "adddatapointbatch": 283, "addep": 1041, "addison": [588, 727], "addit": [4, 5, 7, 12, 14, 15, 66, 71, 82, 90, 95, 98, 111, 115, 117, 118, 121, 122, 147, 156, 157, 158, 164, 169, 170, 178, 183, 188, 200, 201, 203, 224, 239, 262, 269, 274, 281, 305, 316, 317, 322, 327, 342, 353, 358, 362, 366, 367, 372, 373, 374, 375, 376, 378, 379, 380, 382, 385, 386, 388, 392, 393, 394, 395, 397, 401, 406, 407, 409, 411, 412, 415, 416, 417, 418, 431, 439, 440, 442, 443, 444, 448, 455, 467, 472, 494, 501, 530, 532, 534, 535, 537, 539, 540, 541, 547, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 610, 617, 626, 628, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 668, 685, 686, 690, 696, 697, 700, 739, 755, 756, 785, 789, 794, 795, 802, 818, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 881, 891, 892, 899, 900, 930, 936, 976, 981, 983, 987, 988, 990, 991, 994, 997, 999, 1000, 1001, 1002, 1003, 1007, 1014, 1025, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "addition": [53, 72, 113, 127, 169, 199, 217, 235, 316, 318, 352, 380, 392, 405, 415, 608, 609, 644, 650, 669, 876, 976, 977, 987, 995, 1007, 1036, 1047], "additional_nois": 40, "additive_chi2": [618, 636, 762, 771], "additive_chi2_kernel": [636, 756, 762, 979], "additivechi2sampl": [637, 638, 639, 640, 755, 756, 979, 1044, 1046], "address": [4, 48, 203, 351, 375, 380, 407, 415, 445, 655, 983, 984, 989, 990, 991, 992, 993, 997, 1012, 1021, 1038], "adelr": 1038, "adequ": [367, 386, 565, 1014, 1043], "adher": [366, 382, 394, 930, 931, 1030, 1031], "adien": 1046, "adijohar": 1044, "adil": 1045, "adimension": 169, "adithya": 1035, "aditya": [1036, 1038, 1039, 1040, 1044, 1045], "adityadaflapurkar": 1038, "adjac": [407, 412, 450, 460, 583, 584, 633, 689, 693, 941, 984, 990, 1022], "adjacency_matrix": 407, "adjust": [4, 9, 17, 36, 38, 49, 58, 68, 78, 111, 124, 143, 166, 203, 228, 233, 241, 261, 278, 315, 329, 346, 352, 387, 407, 408, 412, 414, 415, 522, 551, 552, 555, 557, 559, 560, 562, 656, 657, 664, 666, 672, 673, 674, 702, 703, 706, 712, 713, 752, 754, 783, 792, 834, 835, 837, 838, 869, 891, 892, 899, 900, 901, 904, 907, 909, 925, 986, 987, 991, 997, 1009, 1021, 1027, 1030, 1036, 1046], "adjusted_mutual_info_scor": [37, 38, 49, 58, 407, 703, 713, 730, 752, 754, 783, 987, 1030, 1038, 1042, 1046], "adjusted_rand_index": 703, "adjusted_rand_scor": [37, 38, 49, 58, 352, 407, 702, 713, 730, 754, 783, 987, 1043], "administr": 397, "admir": [1045, 1046], "admiss": [232, 367], "adopt": [382, 392, 394, 895, 987, 1001, 1038, 1045, 1047], "adoublet": [1045, 1046], "adpot": 321, "adrian": [1043, 1044, 1045], "adrien": 1030, "adrin": [0, 1, 65, 347, 395, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "adrinjalali": [1033, 1042], "adult": [322, 494, 997], "advanc": [5, 129, 166, 170, 227, 229, 243, 260, 281, 368, 407, 412, 487, 499, 533, 630, 637, 780, 794, 848, 857, 860, 879, 908, 979, 987, 990, 997, 1009, 1012, 1027, 1032], "advani": 1042, "advantag": [4, 5, 39, 55, 57, 95, 100, 125, 199, 200, 228, 246, 261, 281, 319, 362, 394, 405, 411, 412, 415, 417, 439, 443, 458, 532, 587, 647, 672, 673, 760, 827, 828, 829, 859, 860, 899, 900, 901, 902, 903, 904, 905, 976, 979, 982, 983, 984, 987, 988, 990, 991, 995, 997, 1001, 1002, 1003, 1033], "advic": [388, 417, 620, 621], "advik": 1047, "advis": [13, 200, 235, 362, 378, 380, 407, 415, 435, 644, 650, 652, 658, 660, 670, 685, 955, 979, 983, 989, 991, 1002, 1044], "advoc": 988, "aeberhard": 377, "aesthet": [305, 1003, 1035], "af": 38, "affan": 1036, "affanv14": 1037, "affect": [7, 25, 80, 127, 158, 168, 169, 203, 224, 238, 239, 263, 270, 310, 321, 362, 366, 367, 368, 376, 394, 396, 405, 407, 410, 411, 413, 415, 418, 420, 442, 448, 455, 471, 473, 477, 547, 548, 567, 697, 710, 785, 796, 799, 800, 801, 810, 814, 815, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 879, 880, 890, 904, 986, 990, 1002, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1048], "affero": 401, "affili": 375, "affin": [36, 37, 44, 49, 55, 63, 64, 68, 166, 305, 327, 372, 382, 394, 406, 412, 438, 439, 450, 452, 460, 510, 533, 689, 693, 702, 703, 715, 734, 790, 792, 895, 981, 984, 987, 1009, 1024, 1025, 1030, 1031, 1034, 1040, 1041, 1043, 1045], "affinity_matrix": [689, 693], "affinity_matrix_": [438, 450, 689], "affinity_propag": [12, 44], "affinitypropag": [38, 44, 319, 407, 1030, 1033, 1034, 1038, 1041, 1043, 1044, 1045, 1046, 1047], "affirm": 4, "afnlp": 1001, "afor": [891, 892], "aforement": [367, 988], "afraid": 397, "africa": 997, "afroj": 1047, "aft": [311, 1033], "aftab": 1039, "after": [4, 17, 20, 21, 26, 46, 53, 55, 70, 71, 75, 81, 97, 111, 122, 127, 130, 132, 135, 144, 148, 156, 158, 160, 163, 169, 175, 192, 199, 238, 239, 242, 248, 260, 269, 281, 283, 291, 293, 305, 306, 309, 310, 351, 352, 368, 375, 377, 379, 380, 382, 384, 386, 387, 388, 392, 394, 401, 403, 404, 405, 407, 408, 411, 412, 415, 416, 419, 440, 445, 448, 449, 450, 451, 454, 460, 513, 530, 534, 551, 552, 557, 558, 559, 560, 595, 625, 628, 656, 657, 664, 665, 666, 671, 673, 674, 675, 676, 690, 710, 723, 753, 791, 794, 795, 799, 800, 848, 855, 859, 872, 878, 899, 904, 905, 976, 977, 981, 983, 987, 991, 992, 997, 999, 1001, 1002, 1003, 1008, 1014, 1021, 1023, 1030, 1033, 1037, 1038, 1041, 1042, 1045, 1048], "afterward": [20, 384, 533, 539, 823], "ag": [71, 148, 169, 171, 187, 188, 199, 217, 239, 240, 242, 305, 318, 319, 320, 322, 375, 377, 494, 1012, 1014, 1021], "again": [4, 20, 67, 72, 124, 155, 157, 159, 169, 224, 261, 351, 362, 384, 389, 394, 395, 407, 408, 409, 414, 415, 470, 565, 566, 632, 645, 649, 651, 653, 659, 661, 663, 690, 976, 983, 987, 1001, 1027, 1030, 1038, 1047], "against": [27, 37, 86, 104, 114, 125, 143, 175, 190, 191, 208, 216, 235, 269, 311, 315, 338, 375, 380, 395, 405, 407, 411, 415, 436, 507, 540, 546, 549, 674, 676, 752, 754, 785, 798, 803, 805, 824, 828, 953, 979, 983, 987, 988, 990, 1002, 1006, 1014], "agamemnon": [1037, 1038, 1039, 1040, 1042, 1043], "agarw": [1037, 1038, 1040], "agath": 1044, "agc": 159, "agct": 159, "agent": 1012, "aggfunc": 271, "agglo": [51, 443, 1022], "agglom": [12, 20, 21, 36, 37, 41, 42, 44, 47, 60, 62, 66, 67, 68, 89, 146, 166, 221, 223, 285, 325, 326, 407, 439, 443, 500, 689, 775, 852, 1009, 1033], "agglomer": [5, 32, 36, 47, 50, 68, 72, 89, 144, 146, 166, 181, 198, 237, 273, 287, 372, 407, 415, 443, 500, 598, 604, 643, 796, 801, 859, 1009, 1025], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 56, 62, 67, 394, 407, 438, 440, 443, 1022, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047], "aggreg": [60, 115, 217, 263, 269, 319, 321, 407, 414, 416, 532, 553, 554, 592, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 988, 990, 997, 1046], "aggress": [8, 206, 664, 665, 799, 800, 1010, 1025, 1031], "aggressive_elimin": [799, 800, 976], "agnost": [986, 995], "ago": [12, 1008], "agraw": [1033, 1038, 1044, 1045], "agre": [143, 388, 395, 406, 407, 783, 1014], "agreement": [407, 702, 714, 752, 754, 792, 987], "agricultur": 983, "aguiar": 416, "agundez": 1038, "ahead": 883, "ahmadi": 1041, "ahmadjubair33": 1044, "ahmedbgh": [1045, 1046], "ahn": 1042, "ahuja": [1037, 1044, 1045], "ai": [74, 115, 190, 233, 327, 346, 411], "ai8rahim": 1033, "aic": [138, 166, 177, 183, 185, 186, 187, 193, 207, 218, 250, 499, 649, 651, 652, 653, 654, 795, 860, 879, 976, 1009, 1030, 1037, 1043, 1044], "aic_criterion": 187, "aid": [257, 407, 789, 790, 984, 1012, 1030, 1042], "aidan": 1038, "aidar": 1044, "aig": 12, "aiko": 1045, "aim": [13, 20, 81, 127, 164, 203, 291, 327, 342, 368, 375, 378, 380, 394, 401, 407, 409, 415, 446, 983, 987, 990, 997, 1002, 1007, 1014, 1022, 1044], "air": [156, 761], "airport": 761, "airspe": 380, "aishgrt1": 1038, "aishwarya": 1038, "aishwaryark": 1037, "aistat": 1000, "aivision2020": 1037, "aj": [492, 1044], "ak": [405, 1044, 1045], "aka": [6, 299, 351, 392, 415, 450, 534, 536, 538, 542, 545, 579, 580, 613, 620, 649, 650, 652, 653, 654, 656, 657, 660, 664, 665, 666, 668, 674, 675, 676, 738, 866, 870, 872, 983, 991, 1001, 1014, 1019, 1032, 1044], "akai": 1043, "akaik": [187, 188, 250, 654, 795, 976, 983], "akash": 1038, "aki": [1044, 1045, 1046], "akin": [4, 200, 394], "akinkunl": 1040, "akitti": 1035, "akshai": [1034, 1037, 1042], "akshay0724": 1037, "akshayah3": 1034, "akshita": 1045, "al": [0, 11, 78, 79, 111, 126, 187, 296, 375, 377, 404, 407, 409, 412, 414, 415, 416, 449, 496, 517, 518, 526, 533, 539, 542, 561, 680, 681, 717, 718, 834, 836, 856, 857, 892, 935, 936, 983, 984, 987, 993, 997, 999, 1002, 1003, 1038, 1043, 1046, 1047], "ala": [1045, 1046], "aladago": 1040, "alam": [1045, 1046], "alan": [1037, 1038, 1041, 1043, 1044], "alastuei": 1033, "albeit": 25, "albert": [0, 228, 370, 1037, 1038, 1039, 1042, 1043], "alberto": [1039, 1043, 1044], "alcalin": 377, "alcohol": [310, 377], "alcorn": 1038, "aldrian": 1034, "aleator": 13, "alec": 1040, "alejandro": [1031, 1036, 1047], "alek": [1043, 1044], "aleksandr": 1037, "aleksandra": 1041, "alemagnani": 1033, "alert": 1037, "alessandro": [1040, 1042, 1045], "alessia": 1043, "alex": [401, 415, 1002, 1030, 1033, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "alexand": [0, 2, 407, 412, 533, 865, 1032, 1033, 1034, 1036, 1037, 1038, 1042, 1043, 1044, 1047], "alexandercbooth": 1037, "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 67, 95, 97, 102, 184, 186, 187, 188, 190, 192, 193, 228, 231, 266, 273, 295, 395, 1012, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "alexandracraciun": 1042, "alexandru": 437, "alexanmv": 1044, "alexei": 1035, "alexfield": 1036, "alexgoryainov": 1040, "alexi": [1030, 1033, 1034, 1037, 1047], "alexl": [1046, 1047], "alexryndin": 1038, "alexshack": [1040, 1041, 1042], "alfalfa": 19, "alfano": 1037, "alfaro": [0, 370, 1041, 1042, 1043, 1044, 1045], "alfr": 0, "algebra": [367, 378, 383, 392, 412, 415, 460, 865, 997], "algesheim": 407, "algo": [43, 104], "algo_param": [44, 62], "algorithm": [9, 14, 17, 18, 22, 29, 31, 36, 37, 39, 42, 43, 45, 46, 50, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 70, 79, 80, 85, 95, 97, 111, 112, 113, 117, 120, 128, 166, 175, 186, 188, 202, 213, 215, 216, 222, 224, 227, 231, 232, 238, 243, 246, 247, 248, 251, 257, 260, 269, 283, 289, 290, 292, 296, 305, 307, 310, 315, 316, 317, 320, 322, 327, 329, 337, 351, 352, 353, 362, 366, 368, 373, 374, 375, 376, 377, 380, 381, 382, 383, 388, 389, 393, 394, 396, 403, 404, 406, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 472, 473, 476, 480, 481, 482, 486, 501, 509, 510, 511, 512, 513, 520, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 551, 552, 553, 554, 557, 558, 561, 589, 601, 602, 608, 609, 633, 635, 637, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 702, 703, 706, 715, 717, 732, 734, 740, 771, 775, 776, 790, 792, 794, 795, 827, 836, 837, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 855, 860, 864, 866, 879, 883, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 919, 935, 936, 938, 952, 956, 962, 977, 979, 982, 984, 985, 986, 987, 989, 992, 993, 997, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1017, 1018, 1020, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "algorithm_nam": 43, "ali": [1035, 1038, 1039, 1042, 1043, 1045, 1046, 1047], "alia": [13, 235, 381, 384, 388, 394, 398, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 608, 609, 615, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 961, 993, 1008, 1030, 1044], "alias": [46, 47, 235, 378, 380, 383, 398, 595, 1030, 1034, 1044], "aliased_sample_weight": 235, "align": [34, 125, 127, 164, 220, 245, 271, 353, 394, 687, 691, 979, 990, 1001, 1024, 1025, 1046, 1047], "alihan": 1043, "alik": [412, 985], "alin": 1043, "alison": 1037, "all": [0, 4, 5, 7, 8, 11, 14, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 55, 60, 64, 75, 82, 91, 95, 97, 98, 109, 116, 117, 119, 120, 124, 127, 134, 135, 148, 156, 157, 159, 166, 168, 169, 170, 172, 178, 183, 185, 191, 192, 193, 199, 200, 201, 202, 203, 208, 210, 214, 216, 217, 220, 221, 228, 234, 235, 238, 239, 242, 246, 248, 250, 258, 261, 262, 263, 264, 266, 267, 268, 270, 272, 278, 283, 286, 288, 301, 305, 306, 310, 315, 316, 317, 318, 320, 321, 322, 325, 327, 328, 329, 335, 338, 342, 343, 346, 347, 351, 352, 353, 357, 360, 362, 366, 367, 368, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 388, 389, 392, 393, 394, 395, 398, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 429, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 506, 507, 513, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 703, 707, 711, 712, 713, 714, 715, 716, 718, 719, 720, 723, 725, 726, 727, 729, 730, 732, 733, 734, 735, 739, 742, 743, 745, 747, 748, 750, 753, 758, 766, 771, 775, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 806, 808, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 925, 927, 928, 929, 930, 941, 944, 945, 950, 955, 962, 971, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 992, 994, 995, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048], "all_class": 8, "all_displai": [389, 1045], "all_estim": [389, 1040, 1041, 1045], "all_funct": [389, 1045], "all_label": 896, "all_model": 124, "all_or_ani": [971, 1040], "all_scor": 730, "all_split": [4, 13], "all_uppercas": 415, "allan": [351, 405, 1042], "allclos": [96, 129, 999, 1022], "allefeld": 1043, "allen": [320, 1033, 1035, 1037, 1040], "allend": [1041, 1043], "allevi": [57, 127, 178, 183, 407, 989], "allison": 320, "alloc": [3, 6, 16, 25, 61, 166, 225, 272, 317, 319, 376, 380, 381, 407, 415, 441, 445, 457, 486, 534, 536, 538, 582, 586, 589, 644, 650, 658, 660, 799, 800, 802, 818, 823, 826, 976, 997, 1007, 1009, 1024, 1025, 1034, 1035, 1040, 1041, 1047], "allow": [4, 20, 56, 58, 74, 75, 90, 99, 100, 114, 115, 122, 130, 151, 156, 158, 160, 193, 199, 203, 217, 221, 229, 232, 239, 241, 242, 245, 260, 281, 315, 316, 317, 318, 320, 342, 343, 351, 360, 362, 366, 374, 375, 380, 381, 382, 384, 387, 389, 392, 394, 395, 398, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 435, 441, 442, 444, 445, 447, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 521, 522, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 591, 592, 595, 601, 608, 609, 613, 625, 626, 628, 632, 633, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 686, 688, 690, 697, 739, 759, 762, 771, 775, 778, 789, 790, 794, 795, 796, 797, 798, 799, 800, 803, 805, 807, 810, 814, 817, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 849, 850, 854, 856, 857, 859, 861, 862, 864, 865, 866, 871, 878, 879, 883, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 917, 919, 920, 930, 931, 951, 955, 976, 977, 979, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 997, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1012, 1014, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "allow_nan": [382, 918, 920, 1046], "allow_nd": [919, 920], "allow_non": 709, "allow_single_clust": [44, 444], "allow_unlabel": [92, 236, 521], "allowed_extens": 501, "allwein": 278, "almeida": [1031, 1032, 1043], "almeidayoel": 1044, "almer": 1037, "almost": [4, 34, 117, 123, 201, 207, 235, 238, 274, 310, 328, 362, 373, 375, 384, 386, 392, 393, 394, 398, 407, 411, 412, 468, 469, 470, 471, 473, 474, 475, 794, 976, 982, 983, 986, 987, 1002, 1022, 1023, 1038, 1043], "almubarak": [1043, 1044], "alon": [169, 203, 266, 338, 394, 401, 405, 646, 667, 678, 739, 1037, 1039], "along": [12, 14, 56, 59, 66, 86, 118, 124, 127, 186, 199, 233, 235, 264, 315, 352, 353, 362, 375, 380, 384, 386, 388, 389, 394, 397, 398, 401, 404, 412, 414, 415, 416, 419, 531, 548, 585, 609, 610, 628, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 674, 676, 679, 680, 681, 682, 683, 684, 776, 777, 789, 796, 810, 868, 869, 872, 873, 876, 877, 878, 879, 884, 885, 886, 888, 889, 890, 915, 938, 962, 968, 976, 983, 990, 997, 1000, 1012, 1030, 1035, 1036, 1038, 1042, 1043], "alongsid": [48, 380, 386, 394, 397, 416, 820, 821, 822, 987, 994, 1007, 1008], "alonso": [1041, 1043], "alpaydin": 377, "alpha": [4, 5, 7, 8, 10, 12, 13, 14, 17, 24, 26, 31, 34, 37, 40, 42, 45, 52, 56, 60, 65, 75, 82, 86, 95, 97, 98, 100, 101, 103, 104, 111, 113, 114, 120, 124, 127, 128, 129, 131, 132, 133, 148, 151, 154, 156, 157, 158, 159, 160, 163, 164, 169, 178, 179, 180, 181, 183, 184, 185, 187, 188, 193, 194, 196, 197, 199, 200, 201, 203, 204, 208, 211, 212, 217, 220, 221, 224, 233, 234, 241, 245, 260, 261, 262, 263, 264, 267, 268, 270, 272, 273, 281, 283, 286, 288, 291, 293, 299, 301, 305, 306, 307, 308, 310, 312, 316, 318, 319, 322, 327, 329, 335, 336, 339, 340, 342, 343, 346, 347, 348, 351, 366, 375, 382, 386, 392, 409, 410, 412, 414, 416, 417, 419, 444, 469, 470, 476, 525, 529, 531, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 558, 593, 594, 596, 609, 611, 613, 614, 621, 629, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 685, 720, 745, 834, 835, 836, 838, 856, 857, 895, 907, 908, 909, 910, 976, 983, 987, 989, 991, 995, 1000, 1001, 1002, 1003, 1018, 1021, 1023, 1027, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1048], "alpha_": [4, 82, 138, 169, 179, 187, 188, 470, 609, 642, 643, 645, 649, 651, 653, 654, 659, 661, 671, 673, 983, 1003, 1018, 1030, 1037], "alpha_1": [642, 643, 983], "alpha_2": [642, 643, 983], "alpha_a": 188, "alpha_b": 188, "alpha_bound": [160, 621], "alpha_h": [15, 412, 536, 538, 545, 1043], "alpha_i": [989, 1002], "alpha_init": [179, 643, 983, 1040], "alpha_max": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682], "alpha_min": [644, 645, 648, 650, 651, 652, 654, 658, 659, 660, 661, 679, 680, 681, 682], "alpha_optim": 273, "alpha_per_target": [671, 1042], "alpha_w": [15, 412, 536, 538, 545, 1043], "alphabet": [72, 394, 738], "alphalpha": 19, "alphanumer": [394, 586, 587, 589], "alphas_": [187, 188, 645, 648, 649, 651, 652, 653, 654, 659, 661, 680, 681, 1030, 1033, 1043], "alphas_enet": 184, "alphas_lasso": 184, "alphas_positive_enet": 184, "alphas_positive_lasso": 184, "alphavantag": 12, "alphonsu": 1040, "alreadi": [4, 6, 10, 55, 58, 90, 100, 111, 127, 132, 148, 169, 229, 236, 238, 241, 261, 267, 283, 318, 321, 380, 381, 385, 392, 394, 405, 409, 411, 413, 414, 419, 435, 497, 521, 531, 565, 566, 632, 644, 647, 662, 663, 664, 665, 666, 672, 674, 675, 676, 683, 684, 765, 775, 834, 854, 862, 868, 869, 871, 876, 896, 899, 900, 922, 946, 976, 979, 993, 997, 998, 1008, 1014, 1019, 1023, 1027, 1031, 1035, 1038, 1042, 1043, 1044, 1045], "alsadi": 1038, "alsaedi": 1043, "alsalhi": [0, 1033, 1034], "alsawadi": 1043, "also": [0, 4, 7, 11, 13, 17, 19, 20, 24, 25, 26, 27, 32, 46, 48, 53, 57, 58, 60, 64, 70, 71, 78, 80, 85, 86, 95, 102, 104, 111, 114, 117, 119, 121, 122, 123, 124, 125, 127, 130, 132, 144, 145, 146, 148, 151, 153, 156, 164, 169, 170, 171, 172, 175, 179, 180, 182, 188, 191, 192, 195, 199, 200, 201, 203, 204, 208, 216, 217, 220, 231, 233, 235, 238, 239, 251, 258, 260, 261, 262, 263, 266, 267, 269, 270, 271, 278, 281, 283, 291, 294, 296, 299, 305, 306, 307, 309, 310, 315, 316, 317, 318, 322, 330, 334, 335, 336, 338, 340, 342, 351, 352, 353, 356, 357, 360, 362, 366, 367, 368, 373, 374, 375, 377, 378, 379, 380, 382, 383, 386, 388, 389, 392, 393, 394, 395, 397, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 435, 436, 437, 439, 440, 443, 444, 445, 446, 448, 450, 460, 461, 463, 465, 480, 482, 490, 494, 496, 501, 506, 530, 531, 533, 534, 539, 544, 547, 549, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 605, 606, 607, 608, 609, 620, 630, 631, 633, 641, 642, 643, 644, 645, 648, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 670, 674, 676, 679, 682, 685, 689, 692, 693, 697, 708, 711, 720, 726, 727, 735, 740, 760, 776, 777, 780, 781, 784, 794, 795, 796, 799, 800, 810, 813, 816, 821, 822, 823, 824, 825, 826, 828, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 855, 856, 857, 859, 861, 862, 867, 868, 872, 876, 879, 884, 888, 901, 904, 907, 908, 909, 910, 919, 938, 944, 951, 955, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1007, 1008, 1012, 1014, 1019, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alt": [19, 261, 329, 351, 352, 353, 375, 388, 486, 1023], "altai": 1040, "alter": [25, 164, 382, 394, 726, 727, 735, 780, 781, 784, 1035, 1039, 1042], "altern": [4, 26, 71, 86, 118, 119, 125, 127, 132, 171, 183, 199, 217, 229, 248, 251, 269, 315, 342, 351, 352, 353, 362, 375, 383, 384, 386, 392, 394, 395, 397, 402, 404, 405, 407, 408, 409, 411, 412, 414, 415, 417, 439, 440, 443, 444, 445, 450, 456, 461, 497, 536, 538, 539, 545, 551, 552, 555, 556, 557, 558, 562, 563, 564, 580, 586, 587, 589, 615, 618, 641, 690, 704, 706, 768, 771, 775, 778, 798, 828, 863, 869, 872, 885, 892, 894, 907, 908, 909, 910, 954, 955, 981, 983, 984, 986, 987, 990, 991, 995, 997, 999, 1000, 1002, 1003, 1008, 1018, 1023, 1025, 1035, 1037, 1043, 1044], "alternate_sign": [8, 415, 580, 587, 1037], "although": [4, 9, 25, 118, 132, 168, 196, 217, 228, 247, 281, 342, 362, 368, 382, 394, 407, 408, 412, 415, 494, 813, 816, 870, 986, 988, 989, 990, 993, 1003, 1014, 1021, 1022, 1023, 1030, 1038, 1045], "altman": [626, 977], "altogeth": [121, 386, 1038], "alva": 1040, "alvaro": [1036, 1038], "alvin": 1038, "alwai": [117, 121, 124, 169, 178, 199, 217, 225, 232, 263, 266, 270, 312, 335, 342, 346, 352, 362, 366, 367, 374, 378, 380, 381, 382, 386, 393, 394, 397, 405, 407, 408, 411, 414, 415, 416, 417, 424, 430, 441, 447, 462, 463, 465, 467, 480, 481, 482, 486, 494, 506, 507, 542, 547, 549, 550, 552, 554, 556, 557, 558, 559, 560, 562, 563, 566, 568, 579, 586, 587, 589, 592, 609, 625, 626, 628, 630, 631, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 669, 670, 671, 674, 676, 677, 693, 703, 707, 713, 719, 720, 721, 729, 731, 732, 736, 779, 782, 783, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 832, 833, 842, 843, 850, 851, 857, 864, 872, 877, 879, 882, 884, 885, 886, 887, 888, 889, 890, 892, 900, 901, 902, 904, 905, 907, 908, 910, 937, 946, 947, 976, 977, 979, 981, 983, 986, 987, 990, 993, 995, 999, 1000, 1002, 1003, 1012, 1014, 1021, 1030, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "alyssa": [1033, 1037], "alyssaq": 1036, "am": [70, 75, 80, 132, 170, 351, 385, 409, 472, 491, 1037], "amai": 1046, "aman": [1036, 1037, 1038, 1044, 1045], "amanda": [1038, 1041, 1042, 1043, 1044], "amar": [1044, 1045, 1046, 1048], "amax": 78, "amazon": 12, "amber": 394, "ambient": 224, "ambigu": [261, 385, 415, 570, 710, 936, 990, 1039, 1041, 1043], "ambival": 60, "ambrosio": 1037, "ambroz": [1040, 1041], "amelia": 977, "amen": [386, 392, 417, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 976], "america": [11, 12, 80, 296, 375, 846, 997], "american": [11, 12, 70, 81, 375, 407, 409, 413, 414, 415, 467, 472, 728, 879], "ames_h": 238, "amg": [46, 66, 407, 450, 460, 689, 693, 1040, 1044, 1045], "amherst": 375, "ami": [37, 49, 58, 407, 702], "amicel": [1030, 1033], "amin": 78, "aminaka": 1034, "amit": [1030, 1044, 1045], "amlan": 1036, "amo": 1033, "amol": 1043, "among": [27, 159, 170, 172, 175, 199, 250, 281, 360, 368, 375, 382, 394, 395, 405, 406, 410, 445, 447, 510, 517, 791, 824, 842, 847, 849, 901, 904, 907, 908, 909, 910, 976, 979, 987, 988, 994, 997, 1002, 1030, 1036, 1037, 1040, 1047], "amongst": [12, 1003], "amor": [0, 37, 57, 117, 127, 178, 183, 238, 261, 263, 310, 351, 352, 353, 391, 1044, 1045, 1046, 1047], "amormachin": 1033, "amort": 990, "amount": [8, 12, 45, 53, 66, 78, 81, 95, 99, 112, 114, 157, 169, 183, 203, 217, 233, 317, 325, 328, 330, 338, 346, 353, 366, 367, 368, 392, 406, 407, 409, 412, 414, 415, 416, 441, 452, 467, 536, 537, 539, 541, 561, 594, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 663, 679, 682, 690, 799, 800, 839, 840, 845, 880, 895, 896, 909, 910, 982, 983, 986, 989, 991, 997, 999, 1000, 1001, 1002, 1021, 1022, 1043, 1047], "amount_iter": 328, "amount_label": 328, "amourav": 1039, "amplitud": [124, 156, 158, 193, 983], "amplitude_nois": 40, "amput": 1008, "amrcod": 1044, "amsterdam": [867, 998], "amuel": [74, 115, 190, 233, 327, 346], "amy12xx": 1042, "amzn": 12, "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 25, 26, 27, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 66, 67, 68, 70, 71, 72, 73, 75, 78, 79, 80, 81, 89, 95, 96, 97, 98, 99, 100, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 139, 140, 144, 148, 151, 152, 153, 156, 157, 158, 160, 162, 163, 165, 166, 168, 169, 170, 171, 175, 177, 178, 179, 182, 183, 187, 194, 199, 200, 201, 203, 204, 206, 207, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 242, 245, 246, 248, 250, 251, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 275, 281, 283, 286, 289, 290, 291, 294, 295, 296, 305, 310, 311, 312, 316, 317, 318, 320, 321, 322, 326, 330, 334, 335, 337, 338, 340, 341, 342, 351, 352, 353, 356, 359, 360, 362, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 428, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 574, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 610, 617, 620, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 707, 709, 710, 716, 718, 719, 724, 726, 727, 731, 732, 734, 739, 740, 742, 743, 745, 747, 748, 750, 753, 755, 756, 760, 761, 763, 764, 765, 766, 767, 770, 772, 773, 774, 775, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 914, 916, 917, 919, 920, 922, 923, 926, 930, 931, 932, 934, 935, 936, 938, 940, 943, 944, 945, 946, 947, 948, 950, 951, 952, 955, 957, 958, 961, 962, 968, 971, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1018, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "ana": [1041, 1043], "anaconda": [0, 367, 378, 384], "anak": 1042, "analog": [4, 19, 126, 386, 414, 987, 988, 1002, 1039], "analogi": [986, 987], "analys": [220, 360, 412, 799, 800, 984, 1007, 1012], "analysen": 448, "analysi": [5, 7, 9, 10, 15, 20, 25, 29, 35, 36, 37, 57, 63, 65, 68, 78, 79, 80, 81, 82, 85, 86, 90, 92, 94, 96, 97, 99, 100, 101, 103, 104, 106, 121, 139, 164, 166, 169, 188, 221, 244, 246, 250, 251, 252, 257, 260, 261, 265, 271, 284, 285, 286, 294, 295, 297, 305, 310, 346, 352, 369, 372, 375, 377, 380, 382, 395, 404, 407, 409, 414, 415, 419, 437, 445, 446, 471, 473, 474, 480, 481, 483, 500, 502, 510, 513, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 553, 554, 629, 636, 686, 688, 689, 690, 691, 708, 717, 722, 723, 753, 785, 786, 789, 790, 794, 796, 821, 825, 841, 848, 859, 860, 865, 875, 879, 887, 935, 936, 977, 983, 984, 986, 987, 997, 1006, 1007, 1009, 1010, 1012, 1015, 1024, 1025, 1030, 1031, 1032, 1034, 1039], "analyst": 862, "analyt": [100, 412, 417, 530, 618, 706, 977, 981, 987, 1006, 1012], "analyz": [4, 7, 17, 183, 262, 269, 320, 351, 353, 385, 386, 407, 415, 501, 586, 587, 589, 785, 984, 987, 994, 995, 1003, 1023, 1030, 1039], "anam": 1047, "anand": [1038, 1042], "ananiad": 1001, "anantharam": 1044, "anavelyz": 1043, "ana\u00ebl": 1040, "anbari": 526, "anchor": 271, "ander": [1034, 1040], "andersen": [740, 1044], "anderson": [11, 296, 375, 496, 1036, 1042], "andi": [1030, 1037], "ando": 1035, "andr": [1037, 1044], "andrea": [0, 1, 31, 74, 100, 115, 190, 233, 306, 307, 327, 346, 347, 395, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "andreh7": 1037, "andrei": [1045, 1047, 1048], "andrew": [46, 407, 460, 689, 693, 715, 734, 792, 874, 991, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "andrewww": 1038, "andrii": 1044, "andriushchenko": [1036, 1037], "androutsopoulo": [834, 989], "andrzej": [536, 538, 545], "andr\u00e1": [1043, 1044, 1045, 1046], "andr\u00e9": [1043, 1044, 1046], "ands": 870, "andyscanzio": 1047, "ang": 1037, "angel": [0, 2], "angela": [1040, 1041, 1045], "angelaambroz": 1041, "angermuel": [1034, 1035], "angl": [14, 34, 98, 148, 245, 246, 247, 250, 251, 377, 412, 529, 535, 537, 540, 541, 543, 544, 546, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 676, 680, 681, 682, 683, 684, 690, 984, 985, 1010, 1025, 1030], "angmar": 19, "angu": [1037, 1038, 1044], "angular": [413, 690, 761], "anh": [536, 538, 545], "ani": [4, 8, 9, 13, 14, 19, 44, 46, 55, 57, 67, 129, 143, 148, 156, 157, 158, 168, 169, 170, 171, 172, 188, 199, 203, 217, 228, 231, 232, 235, 246, 250, 251, 260, 261, 263, 266, 269, 278, 296, 305, 306, 309, 315, 317, 318, 320, 338, 342, 353, 362, 366, 367, 368, 374, 375, 377, 378, 380, 382, 384, 385, 386, 388, 393, 394, 395, 397, 398, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 432, 438, 444, 446, 447, 448, 450, 452, 454, 455, 459, 462, 465, 486, 487, 506, 507, 521, 532, 535, 537, 544, 549, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 577, 578, 580, 586, 587, 589, 591, 601, 608, 609, 618, 625, 630, 631, 643, 646, 656, 657, 664, 665, 666, 667, 674, 675, 676, 677, 678, 690, 694, 697, 698, 702, 714, 715, 717, 721, 733, 734, 749, 752, 754, 771, 775, 776, 777, 778, 789, 790, 792, 796, 799, 800, 808, 809, 828, 831, 839, 840, 845, 849, 858, 859, 863, 864, 868, 870, 872, 873, 880, 889, 890, 893, 896, 899, 900, 907, 908, 909, 910, 911, 913, 915, 919, 920, 957, 971, 976, 977, 979, 982, 983, 984, 987, 988, 989, 990, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1007, 1011, 1014, 1016, 1020, 1021, 1023, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "aniket": [1045, 1047], "anil": [407, 450, 460], "anim": [351, 415], "anirban": 415, "aniruddha": 1038, "anish": [1035, 1036], "anisha": 1040, "aniso": [44, 62], "anisotrop": [57, 153, 417, 615, 617, 620], "anisotropicli": [44, 62], "anjirbag": 1038, "ankan": 1035, "ankerst": [407, 448, 455], "ankit": [1033, 1040, 1042, 1044], "ankit810": 1041, "ankita": 1038, "ankur": [1035, 1046], "ann": [1030, 1042, 1044], "anna": 1038, "annaayzenshtat": 1038, "annal": [148, 183, 187, 377, 414, 472, 514, 515, 516, 557, 558, 654, 983], "annau": 1043, "annegnx": 1046, "anno": [690, 984], "annoi": 367, "annot": [4, 9, 26, 134, 175, 221, 264, 267, 351, 380, 381, 382, 407, 714, 913, 987, 1003, 1039], "annotationbbox": 221, "announc": [315, 316, 317, 318, 319, 320, 321, 322, 384], "annual": [377, 407, 723, 753, 896, 987, 1000], "anomali": [9, 80, 128, 166, 213, 216, 227, 238, 243, 289, 290, 375, 406, 467, 510, 520, 561, 637, 675, 845, 860, 903, 993, 1007, 1009, 1036, 1037], "anomaly_algorithm": 228, "anomaly_frac": 238, "anoth": [4, 37, 95, 100, 111, 122, 126, 148, 151, 159, 164, 169, 188, 203, 207, 225, 228, 235, 239, 246, 260, 262, 263, 266, 270, 293, 351, 353, 356, 362, 366, 368, 374, 375, 378, 380, 382, 386, 392, 394, 401, 404, 407, 411, 412, 414, 415, 416, 418, 440, 442, 450, 453, 460, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 506, 536, 538, 545, 671, 674, 690, 707, 717, 802, 818, 858, 859, 880, 976, 977, 982, 983, 984, 987, 988, 990, 993, 997, 1001, 1002, 1014, 1021, 1022, 1023, 1039, 1040, 1047], "anova": [10, 54, 74, 142, 144, 147, 148, 149, 166, 258, 333, 349, 408, 502, 513, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 711, 821, 825, 859, 860, 879, 899, 904, 1002, 1009], "anova__percentil": [54, 341], "anova_filt": 145, "anova_svm": 145, "ansam": 1046, "answer": [138, 168, 260, 380, 392, 723, 753, 987, 1012], "ant": [716, 751, 987], "anthoni": [1035, 1037, 1038], "anthony22": [1045, 1046], "anti": [183, 362, 604, 834, 989], "anti_alias": [46, 47, 1022], "anticip": 13, "antoin": [1030, 1032, 1033, 1034, 1037], "antoni": [1034, 1036, 1042, 1045], "antonin": 1037, "antonio": [1038, 1040], "anubhav": 1038, "anuja": 1040, "anulekh": 1045, "anupam": [893, 999, 1045], "any_method": 947, "anymor": [127, 171, 199, 262, 315, 316, 338, 362, 384, 408, 668, 1036, 1039, 1042, 1043, 1044, 1046, 1047], "anyon": [380, 395, 1011, 1012], "anyth": [353, 384, 386, 394, 398, 408, 411, 947, 951, 1044], "anywai": [9, 351, 382, 663, 683, 684], "anywher": 306, "anz": 1031, "aoif": [706, 987], "ap": [267, 705, 706, 987], "apart": [169, 318, 338, 392, 394, 398, 408, 410, 416, 722, 1002, 1012, 1038], "api": [0, 8, 12, 27, 50, 56, 71, 107, 108, 116, 159, 166, 227, 229, 235, 239, 240, 243, 257, 262, 269, 270, 283, 322, 352, 353, 368, 369, 373, 374, 380, 381, 383, 384, 389, 390, 392, 393, 395, 397, 401, 412, 414, 415, 417, 421, 424, 425, 426, 429, 431, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 502, 506, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 561, 562, 564, 565, 566, 567, 568, 577, 578, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 656, 669, 675, 686, 687, 688, 689, 690, 700, 794, 795, 799, 800, 802, 818, 825, 843, 845, 847, 848, 851, 855, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 903, 904, 953, 955, 971, 976, 985, 986, 987, 990, 997, 1001, 1007, 1008, 1009, 1012, 1014, 1018, 1020, 1025, 1027, 1028, 1029, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "apk": 397, "apostolo": 1045, "appar": [85, 989, 1012], "appdata": 397, "appeal": 395, "appear": [0, 8, 46, 48, 114, 169, 172, 255, 257, 258, 289, 290, 299, 301, 306, 326, 342, 351, 352, 353, 375, 378, 380, 385, 394, 409, 412, 486, 487, 553, 565, 566, 577, 608, 625, 626, 628, 695, 698, 700, 710, 714, 716, 779, 786, 797, 814, 834, 835, 836, 837, 838, 901, 904, 938, 983, 989, 993, 1030, 1038, 1042, 1043], "append": [7, 8, 9, 12, 13, 17, 25, 33, 37, 40, 44, 50, 61, 71, 102, 114, 115, 117, 122, 124, 127, 164, 172, 192, 203, 204, 206, 207, 214, 217, 233, 234, 260, 263, 269, 270, 273, 299, 300, 311, 328, 338, 341, 351, 352, 353, 356, 360, 386, 394, 408, 415, 656, 657, 899, 900, 906, 926, 997, 1018], "appendix": [643, 674, 983, 997], "appl": [12, 366, 378, 392, 988], "appli": [9, 15, 19, 25, 27, 32, 40, 44, 46, 47, 55, 56, 58, 62, 71, 75, 86, 90, 95, 96, 101, 103, 105, 116, 117, 122, 124, 144, 151, 169, 171, 183, 188, 203, 204, 213, 220, 221, 222, 228, 233, 235, 260, 261, 263, 272, 281, 292, 305, 309, 310, 316, 338, 342, 353, 360, 362, 366, 372, 380, 382, 388, 392, 393, 394, 398, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 438, 444, 450, 460, 462, 463, 465, 467, 472, 480, 481, 482, 483, 506, 507, 514, 515, 516, 522, 529, 530, 531, 532, 533, 535, 537, 539, 540, 541, 546, 547, 548, 551, 552, 555, 556, 557, 558, 562, 563, 564, 586, 587, 588, 589, 625, 630, 631, 636, 637, 639, 640, 656, 657, 666, 674, 675, 676, 689, 697, 699, 705, 723, 753, 755, 756, 778, 785, 789, 790, 796, 810, 825, 828, 834, 835, 836, 837, 838, 848, 858, 859, 868, 875, 876, 879, 884, 885, 887, 888, 889, 890, 895, 906, 907, 908, 909, 910, 919, 925, 928, 935, 936, 959, 977, 979, 983, 984, 985, 986, 987, 989, 991, 993, 995, 997, 1001, 1002, 1003, 1004, 1006, 1012, 1031, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1044], "applic": [3, 5, 16, 19, 49, 55, 80, 166, 175, 199, 216, 222, 254, 263, 305, 366, 368, 375, 377, 380, 382, 386, 388, 389, 392, 394, 405, 407, 411, 412, 413, 414, 417, 419, 442, 444, 450, 494, 496, 530, 531, 532, 551, 552, 627, 686, 687, 688, 692, 710, 726, 727, 735, 780, 781, 784, 825, 976, 983, 984, 985, 986, 987, 991, 993, 999, 1003, 1007, 1008, 1009, 1011, 1012, 1021, 1023, 1030, 1031, 1036, 1038, 1041], "apply_along_axi": 302, "appr": 617, "appreci": [0, 380, 392], "approach": [5, 8, 58, 63, 66, 99, 148, 151, 163, 169, 172, 181, 187, 199, 201, 207, 217, 220, 278, 311, 342, 351, 352, 353, 368, 379, 380, 386, 389, 394, 397, 401, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 435, 441, 444, 446, 450, 460, 518, 530, 580, 587, 609, 633, 656, 657, 672, 673, 828, 844, 936, 976, 977, 983, 984, 987, 988, 990, 991, 997, 1001, 1002, 1006, 1007, 1012, 1016, 1021, 1022, 1034, 1046], "appropri": [55, 57, 102, 156, 169, 203, 235, 269, 356, 362, 378, 380, 382, 388, 394, 405, 406, 407, 411, 413, 414, 418, 442, 448, 455, 487, 488, 489, 494, 498, 499, 500, 502, 503, 508, 575, 580, 589, 590, 593, 594, 596, 597, 598, 670, 672, 685, 707, 841, 842, 843, 845, 847, 849, 850, 851, 971, 983, 986, 987, 997, 1034, 1037, 1043, 1046, 1048], "approv": [380, 395, 414], "approx": [27, 95, 233, 412, 414, 415, 987, 994, 1001], "approxim": [4, 5, 27, 33, 46, 53, 80, 99, 100, 104, 115, 123, 124, 148, 152, 169, 176, 179, 195, 199, 200, 213, 217, 222, 225, 227, 228, 231, 234, 243, 251, 260, 265, 274, 275, 284, 285, 292, 297, 305, 307, 308, 310, 315, 318, 351, 353, 358, 359, 362, 369, 372, 377, 389, 392, 394, 404, 405, 408, 410, 411, 412, 414, 417, 419, 420, 421, 431, 447, 467, 468, 471, 472, 473, 474, 480, 481, 482, 489, 494, 500, 519, 522, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 557, 558, 580, 587, 608, 609, 617, 636, 637, 638, 639, 640, 655, 656, 657, 670, 672, 674, 675, 677, 685, 690, 755, 756, 761, 794, 797, 814, 820, 824, 825, 839, 840, 843, 847, 849, 850, 851, 855, 859, 860, 865, 869, 871, 872, 876, 888, 899, 904, 905, 935, 936, 961, 980, 981, 982, 983, 984, 986, 990, 991, 992, 993, 994, 995, 999, 1001, 1002, 1003, 1007, 1008, 1009, 1023, 1025, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "approximate_nearest_neighbor": [283, 297, 1009], "approximateident": 1031, "april": [375, 662, 683, 684, 1034, 1042, 1047], "apriori": 217, "apt": [378, 388, 397], "aptitud": 169, "aqua": 269, "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 32, 34, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 97, 100, 102, 105, 109, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 144, 145, 147, 148, 151, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 203, 208, 210, 217, 220, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 242, 246, 247, 248, 250, 254, 255, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 288, 289, 293, 296, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 325, 327, 328, 329, 330, 336, 338, 340, 342, 346, 347, 351, 352, 353, 356, 360, 362, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 394, 395, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 428, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 506, 507, 508, 510, 513, 514, 515, 516, 517, 518, 521, 522, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 707, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 737, 738, 739, 740, 742, 743, 745, 747, 748, 750, 751, 753, 754, 758, 759, 760, 762, 764, 765, 766, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 808, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 923, 924, 925, 928, 930, 935, 936, 937, 940, 941, 943, 944, 947, 950, 951, 953, 955, 958, 961, 962, 966, 967, 968, 971, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "arab": 625, "arabi": [407, 703, 713, 783], "aradwad": 1041, "arafat": 1036, "arai": 1040, "arang": [4, 11, 13, 14, 40, 58, 60, 65, 73, 79, 80, 102, 105, 120, 121, 123, 125, 126, 130, 134, 144, 151, 153, 158, 159, 163, 164, 172, 183, 199, 202, 204, 208, 223, 231, 233, 255, 260, 263, 268, 271, 281, 283, 296, 299, 307, 318, 325, 326, 328, 330, 338, 345, 351, 353, 358, 359, 360, 362, 392, 404, 411, 415, 463, 542, 825, 874, 878, 982, 983, 991, 997, 1001, 1019], "aravindh": 1045, "arbitarili": 351, "arbitrari": [4, 55, 86, 95, 96, 97, 116, 158, 178, 199, 216, 217, 258, 305, 309, 311, 317, 351, 360, 367, 380, 392, 394, 408, 411, 412, 414, 415, 419, 444, 448, 453, 455, 463, 530, 531, 557, 558, 579, 637, 646, 667, 678, 686, 739, 786, 797, 798, 803, 805, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 863, 865, 878, 976, 978, 979, 983, 984, 987, 990, 997, 1008, 1023, 1030, 1031, 1034, 1036, 1037, 1038, 1040, 1044, 1046], "arbitrarili": [152, 246, 251, 351, 394, 417, 430, 463, 480, 481, 482, 550, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 676, 677, 678, 719, 720, 721, 743, 782, 786, 832, 833, 842, 850, 857, 880, 900, 902, 905, 908, 910, 987, 990, 997, 1003], "arc": [377, 414], "archana": [1040, 1042], "archit": 1036, "architectur": [378, 382, 388, 392, 397, 401, 466, 897, 991, 1005, 1012, 1030, 1047], "archiv": [8, 278, 374, 375, 377, 378, 401, 407, 440, 498, 500, 508, 755, 756, 985, 1002, 1023], "archive_filenam": 8, "archive_path": 8, "archive_sha256": 8, "arci": [706, 987], "arcidiacono": [1044, 1045, 1047], "arcsin": [697, 761], "arctan": [34, 246, 251, 376, 516], "arctan2": [245, 247, 250], "ard": [178, 642, 643], "ard_poli": 178, "ard_scor": 178, "ardregress": [178, 183, 643, 928, 983, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047], "area": [11, 13, 128, 148, 199, 217, 238, 257, 260, 267, 269, 270, 338, 342, 343, 347, 377, 380, 384, 392, 407, 415, 700, 704, 705, 706, 739, 785, 786, 984, 987, 990, 1006, 1032], "aren": [351, 375, 384, 397, 406, 723, 753, 992, 1040, 1042], "arezki": 1030, "arfa": 1036, "arff": [320, 380, 494, 1042, 1045, 1046], "arg": [235, 300, 381, 394, 412, 414, 421, 569, 570, 571, 572, 573, 574, 575, 576, 615, 697, 863, 955, 983, 989, 990], "arg1": 1023, "arg2": 1023, "arg3": 1023, "arg_sort_bi": 13, "argentina": 761, "argmax": [26, 102, 259, 273, 382, 414, 567, 827, 907, 1002, 1043], "argmin": [12, 123, 259, 382, 409, 529, 535, 543, 544, 683, 776, 777, 1003], "argpartit": 1037, "argsort": [15, 17, 19, 20, 21, 123, 125, 171, 172, 199, 217, 315, 325, 326, 351, 352, 375, 995], "argument": [72, 200, 229, 232, 235, 367, 374, 375, 380, 381, 383, 385, 386, 388, 389, 392, 394, 407, 408, 411, 412, 414, 416, 418, 419, 421, 425, 429, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 455, 457, 459, 461, 466, 467, 491, 494, 501, 506, 531, 533, 534, 536, 538, 549, 557, 558, 561, 565, 566, 567, 568, 575, 579, 580, 586, 587, 589, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 629, 637, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 664, 666, 674, 675, 679, 682, 686, 690, 694, 696, 697, 698, 699, 700, 712, 717, 732, 739, 760, 776, 777, 802, 818, 820, 821, 822, 827, 828, 831, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 856, 859, 863, 897, 903, 913, 917, 926, 931, 954, 955, 956, 957, 971, 976, 979, 983, 984, 985, 987, 990, 994, 995, 1002, 1003, 1014, 1018, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048], "argv": 232, "ari": [37, 58, 352, 407, 703, 1035, 1041], "aria": [1038, 1039, 1045], "aric": 17, "arida": [56, 1039, 1040, 1042, 1044, 1047], "ariel": [6, 375, 1030, 1036], "ariga": 1036, "arik": 1038, "arima": 1007, "aris": [169, 263, 346, 367, 385, 407, 713, 983, 984, 1042], "arisa": [1044, 1045], "arithmet": [234, 386, 388, 407, 549, 646, 667, 678, 702, 715, 733, 734, 754, 792, 987, 1038], "ari\u00f1o": 1033, "arjona": 1039, "arka204": [1043, 1045], "arm": [378, 380, 388, 976], "arm64": [378, 383], "arm64v8": 388, "armstrong": 1042, "arnaud": [0, 2, 1031, 1032, 1033, 1034, 1035, 1036], "arnaudov": [1042, 1044], "arnaudstiegl": 1040, "arnold": [1030, 1031], "arnoldi": [686, 687, 691], "aroma": 311, "arora": [1038, 1045], "around": [0, 4, 26, 37, 52, 85, 111, 114, 124, 157, 170, 175, 235, 238, 263, 302, 325, 327, 328, 338, 341, 342, 351, 352, 353, 362, 375, 377, 380, 386, 392, 407, 411, 412, 415, 469, 470, 513, 542, 618, 638, 647, 666, 702, 739, 794, 802, 818, 845, 847, 849, 850, 851, 879, 983, 984, 986, 987, 993, 997, 1001, 1007, 1008, 1011, 1012, 1021, 1023, 1034, 1035], "arpack": [12, 19, 44, 46, 66, 70, 221, 322, 412, 449, 450, 451, 460, 533, 539, 542, 686, 687, 689, 691, 693, 984, 1036, 1037, 1042, 1046, 1047, 1048], "arpanchowdhri": 1040, "arrai": [6, 7, 8, 10, 11, 12, 13, 14, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 61, 62, 64, 70, 72, 81, 85, 92, 96, 97, 123, 125, 127, 128, 131, 134, 145, 148, 152, 153, 154, 159, 169, 178, 180, 183, 192, 193, 196, 199, 200, 206, 216, 221, 222, 228, 232, 235, 238, 239, 242, 245, 246, 247, 249, 250, 255, 256, 258, 260, 261, 264, 265, 269, 281, 296, 308, 315, 318, 319, 321, 322, 326, 334, 341, 342, 351, 359, 362, 366, 367, 373, 374, 375, 380, 381, 382, 383, 385, 386, 388, 390, 392, 393, 394, 401, 404, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 513, 517, 521, 522, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 579, 580, 581, 582, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 924, 925, 934, 935, 936, 937, 938, 940, 941, 942, 949, 950, 951, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974, 977, 982, 983, 985, 987, 988, 990, 991, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1006, 1012, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "arrang": [20, 281, 630, 830, 831, 832, 833, 987], "array_api": 403, "array_api_compat": 403, "array_api_dispatch": [403, 466, 897], "array_api_support": [382, 403], "array_convert": 920, "array_equ": [567, 1037], "array_lik": 934, "array_paramet": 380, "array_split": 1018, "array_sym": 973, "arrayfunc": [389, 406], "arrow": [26, 1044], "arrow_arg": 9, "arrowprop": [9, 26], "arrowstyl": 9, "arroyo": 1044, "art": [317, 386, 647, 690, 1007, 1012], "artem": [1034, 1037, 1047], "arth": 1044, "arthur": [214, 215, 407, 445, 458, 1035, 1036, 1037, 1038, 1039, 1042, 1044], "arthurmello": 1044, "articl": [0, 17, 70, 351, 375, 379, 380, 388, 411, 420, 473, 703, 983, 987, 1023, 1043], "artiem": 1038, "artifact": [4, 14, 46, 47, 305, 368, 384], "artifici": [118, 121, 129, 148, 164, 203, 220, 234, 302, 351, 375, 376, 377, 385, 404, 406, 407, 411, 412, 533, 694, 829, 856, 857, 980, 984, 986, 988, 994, 999, 1003, 1008, 1012, 1030], "artist": [387, 436, 630, 696, 698, 699, 700, 802, 818, 913], "artsiom": 1037, "artsion": 1036, "artstein": 714, "artur": [1045, 1046], "arturo": [0, 37, 57, 117, 127, 178, 183, 238, 261, 263, 310, 351, 352, 353, 391, 1044, 1045, 1046, 1047], "arturoamor": 1044, "artwork": 1005, "aruku": [1038, 1039], "arunav": 1041, "arunava": 1038, "arxiv": [380, 460], "arya": 1038, "as_float_arrai": 389, "as_fram": [4, 5, 13, 71, 75, 117, 121, 127, 132, 156, 169, 170, 171, 172, 187, 188, 199, 207, 215, 217, 238, 242, 278, 283, 286, 301, 310, 311, 315, 317, 319, 320, 374, 375, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 1040, 1041, 1042, 1043, 1046], "asanyarrai": 382, "asarrai": [8, 17, 199, 217, 302, 327, 351, 352, 382, 394, 403, 723, 753, 847, 849, 850, 851, 997, 1002, 1047], "ascend": [20, 71, 171, 311, 414, 448, 454, 592, 625, 633, 911, 912, 913, 1001, 1040, 1046], "ascent": [156, 417], "ascii": [11, 296, 415, 485, 586, 587, 589], "ascontiguousarrai": 539, "asctim": 95, "aseem": 1037, "asgd": [206, 1001], "ash": [9, 377, 1033, 1036], "ashah002": [1045, 1046, 1047], "ashim": 1040, "ashimb9": 1040, "ashimin": 1043, "ashish": [1043, 1046], "ashra": 642, "ashutosh": [1037, 1038, 1040, 1042], "ashvith": 1043, "ashwin": [1045, 1046], "asia": [260, 997], "asian": 415, "asid": [122, 207, 401, 557, 558, 559, 560, 664, 665, 666, 674, 676, 856, 857], "asish": [1036, 1037], "ask": [0, 163, 164, 260, 369, 379, 380, 384, 385, 388, 394, 395, 416, 841, 842, 843, 845, 847, 849, 850, 851, 1005, 1011, 1046], "asnt": 1036, "aspect": [7, 58, 86, 95, 155, 170, 220, 228, 269, 292, 344, 366, 367, 368, 380, 394, 395, 407, 489, 656, 657, 1003, 1012, 1047], "aspir": [148, 377, 380], "ass": [80, 81, 409, 472], "assembl": [281, 312, 353, 859], "assert": [8, 17, 48, 96, 232, 260, 269, 367, 383, 1008], "assert_all_finit": [366, 389, 466], "assert_allclos": 382, "assert_array_equ": 415, "assert_warn": 1043, "assert_warns_messag": 1043, "assertionerror": 1037, "assess": [5, 13, 37, 60, 111, 122, 124, 169, 199, 217, 238, 256, 257, 259, 263, 405, 414, 699, 740, 986, 987, 993, 1008, 1045], "assia": 1039, "assiaben": 1039, "assign": [8, 17, 20, 34, 37, 46, 49, 57, 58, 60, 111, 116, 128, 130, 144, 153, 212, 217, 228, 233, 236, 299, 307, 312, 330, 346, 352, 375, 380, 382, 394, 404, 411, 412, 414, 415, 416, 417, 438, 439, 440, 441, 443, 444, 445, 446, 447, 450, 452, 454, 457, 458, 459, 460, 513, 534, 559, 560, 591, 592, 605, 606, 608, 656, 657, 664, 665, 666, 674, 675, 676, 702, 703, 713, 714, 715, 718, 726, 727, 728, 735, 736, 740, 752, 754, 780, 781, 783, 784, 790, 791, 792, 796, 799, 800, 802, 805, 810, 818, 820, 821, 822, 823, 826, 843, 849, 851, 852, 853, 866, 894, 895, 899, 900, 901, 902, 903, 904, 905, 981, 983, 986, 987, 988, 989, 990, 991, 992, 997, 1000, 1012, 1014, 1023, 1030, 1035, 1037, 1038, 1047, 1048], "assign_label": [46, 407, 450, 460], "assist": [0, 380, 392, 997, 1011, 1012], "associ": [0, 11, 24, 25, 80, 111, 151, 168, 169, 203, 248, 311, 325, 327, 351, 388, 407, 409, 411, 412, 414, 415, 425, 444, 447, 467, 468, 469, 470, 471, 472, 473, 474, 491, 492, 493, 522, 555, 559, 562, 603, 604, 628, 643, 656, 657, 664, 666, 672, 673, 674, 687, 693, 697, 728, 736, 822, 842, 850, 864, 876, 888, 896, 905, 907, 909, 925, 986, 987, 990, 997, 1000, 1012, 1022, 1030, 1042, 1046], "assum": [9, 34, 55, 57, 158, 164, 168, 169, 188, 199, 217, 228, 231, 238, 251, 260, 269, 305, 346, 353, 367, 379, 380, 382, 384, 386, 392, 393, 394, 396, 401, 404, 405, 407, 409, 411, 412, 414, 415, 417, 418, 423, 428, 435, 437, 442, 444, 448, 455, 461, 467, 468, 469, 470, 471, 472, 473, 474, 501, 506, 507, 530, 540, 546, 547, 559, 560, 565, 566, 585, 586, 587, 589, 618, 630, 641, 642, 644, 645, 650, 656, 657, 658, 659, 660, 664, 665, 666, 669, 670, 674, 675, 676, 679, 683, 685, 686, 690, 707, 723, 732, 738, 753, 761, 766, 771, 775, 778, 796, 799, 800, 810, 835, 841, 842, 845, 846, 847, 849, 850, 855, 866, 879, 947, 963, 964, 965, 977, 981, 983, 985, 986, 987, 989, 990, 992, 993, 994, 997, 1001, 1003, 1036, 1042], "assume_cent": [33, 79, 409, 420, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "assume_finit": [366, 367, 466, 897], "assumpt": [4, 9, 13, 25, 27, 36, 43, 68, 78, 79, 98, 156, 160, 166, 168, 199, 201, 228, 256, 281, 305, 386, 392, 393, 396, 405, 406, 407, 409, 411, 412, 415, 417, 445, 449, 451, 486, 501, 510, 530, 532, 539, 648, 652, 795, 796, 799, 800, 810, 836, 891, 892, 981, 983, 987, 988, 989, 990, 992, 993, 994, 997, 1000, 1003, 1009, 1037, 1043], "assur": [0, 394, 794, 795, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "astel": 1038, "astolfi": 1030, "astrai": 394, "astro": [11, 158, 220, 248], "astroml": 1007, "astronom": 1006, "astronomi": 1007, "astropi": 380, "astyp": [4, 14, 37, 41, 44, 45, 53, 60, 62, 66, 81, 101, 121, 123, 140, 168, 170, 189, 190, 217, 223, 234, 238, 271, 283, 312, 415, 977, 983, 1037], "asv": 380, "asv_benchmark": 380, "asymmetr": [124, 201, 394, 1035], "asymmetri": [201, 351], "asymptot": [78, 79, 188, 366, 409, 472, 534, 727, 983, 986, 1040], "atag": 159, "atariah": 1039, "ateif": 1043, "atharva": 1044, "atheism": [19, 261, 329, 351, 352, 353, 375, 486, 1023], "atheist": 351, "athena": 1012, "ation": 415, "atla": [366, 378], "atleast_2d": [124, 382], "atmospher": 156, "atol": [382, 670, 672, 839, 840, 844], "atom": [98, 104, 412, 529, 535, 537, 540, 541, 543, 544, 651, 661, 682, 983, 1030, 1043], "atomic_benchmark": 10, "atomic_benchmark_estim": 10, "atomic_runtim": 10, "atsushi": [1042, 1043], "attach": [8, 351, 432, 844, 1031, 1041], "attack": [238, 375], "attalla": 1044, "attard": 1043, "attempt": [4, 54, 170, 195, 205, 255, 351, 366, 379, 394, 407, 419, 444, 448, 455, 466, 629, 686, 687, 691, 814, 841, 842, 843, 845, 847, 849, 850, 851, 877, 879, 897, 919, 920, 983, 984, 990, 1003, 1014, 1037, 1042, 1047], "attenberg": 415, "attend": 0, "attent": [388, 605, 606, 1001], "attenu": 151, "attia": 794, "attr": [8, 56], "attract": [418, 442, 981, 990, 1007], "attractador": [1037, 1038], "attrgett": [591, 595], "attribut": [8, 25, 32, 49, 71, 103, 109, 111, 118, 119, 122, 144, 148, 199, 207, 235, 250, 258, 259, 264, 272, 292, 296, 318, 342, 353, 360, 368, 369, 373, 374, 375, 377, 380, 383, 387, 392, 404, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 422, 423, 424, 425, 426, 429, 430, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 695, 696, 698, 699, 700, 733, 792, 794, 795, 796, 799, 800, 802, 810, 818, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 914, 948, 971, 979, 981, 983, 988, 990, 991, 993, 997, 1000, 1001, 1002, 1003, 1012, 1014, 1020, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "attributeerror": [408, 557, 575, 948, 1022, 1039, 1040, 1042, 1046, 1047], "attrselect": 1030, "atukorala": 1045, "atuo": [1046, 1047], "aubert": 1037, "auc": [11, 25, 148, 199, 217, 238, 257, 260, 264, 267, 269, 270, 322, 405, 700, 706, 785, 987, 1035, 1038, 1042], "auc_scor": [1030, 1032], "audio": [374, 501], "aufarkari": 1044, "aug": 1002, "augment": [328, 628, 881, 995, 1012], "augspurg": [1038, 1040], "august": [148, 377, 407, 509, 532, 1002, 1030, 1032, 1033, 1037, 1044], "aura": 1042, "auroc": 987, "aur\u00e9lien": [1037, 1038, 1039, 1043, 1044], "austin": 1037, "australian": [127, 397], "author": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 56, 57, 61, 65, 66, 67, 70, 71, 72, 74, 75, 82, 95, 97, 99, 100, 102, 105, 109, 112, 113, 114, 115, 116, 117, 123, 125, 126, 127, 131, 132, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 178, 179, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 199, 200, 201, 203, 204, 206, 207, 214, 215, 216, 217, 220, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 248, 259, 261, 263, 264, 266, 273, 281, 283, 285, 288, 295, 296, 299, 302, 305, 306, 308, 309, 310, 325, 326, 327, 328, 330, 346, 351, 352, 353, 374, 380, 384, 388, 392, 394, 395, 411, 449, 532, 866, 979, 1005, 1007, 1033], "authorit": 395, "authorship": 384, "auto": [19, 33, 57, 58, 92, 148, 155, 182, 220, 225, 240, 283, 286, 291, 315, 316, 317, 318, 319, 320, 334, 335, 341, 344, 345, 353, 374, 375, 382, 414, 417, 418, 439, 442, 443, 444, 445, 447, 448, 450, 453, 454, 455, 457, 460, 494, 506, 507, 533, 536, 538, 539, 542, 545, 547, 555, 556, 559, 560, 561, 562, 563, 565, 591, 592, 595, 600, 605, 606, 627, 629, 630, 631, 633, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 670, 671, 672, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 700, 738, 799, 800, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 856, 857, 872, 873, 880, 891, 892, 896, 899, 900, 901, 902, 903, 904, 905, 909, 910, 935, 936, 953, 956, 978, 981, 983, 984, 990, 997, 1007, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "auto_exampl": [16, 22, 28, 35, 68, 76, 83, 87, 93, 106, 108, 136, 141, 149, 161, 165, 173, 176, 218, 226, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 354, 361], "auto_examples_jupyt": 166, "auto_examples_python": 166, "auto_viml": 1042, "auto_wrap_output_kei": 382, "autoclass": 377, "autocorrel": 411, "autolabel": 8, "autom": [261, 384, 397, 690, 976, 983, 984, 987, 1007, 1012], "automat": [4, 8, 12, 13, 27, 46, 63, 65, 71, 102, 127, 138, 147, 178, 202, 245, 246, 258, 261, 305, 312, 316, 320, 329, 340, 342, 367, 369, 375, 378, 380, 382, 384, 388, 394, 397, 403, 407, 408, 409, 412, 414, 415, 416, 431, 448, 450, 454, 460, 462, 463, 465, 494, 497, 513, 536, 538, 539, 545, 547, 549, 555, 559, 562, 581, 586, 589, 592, 600, 641, 643, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 670, 672, 673, 674, 676, 679, 682, 685, 686, 689, 693, 798, 813, 816, 825, 835, 856, 857, 860, 861, 863, 872, 873, 880, 891, 892, 899, 900, 901, 904, 907, 909, 913, 925, 958, 961, 976, 978, 981, 986, 991, 997, 1001, 1003, 1007, 1008, 1018, 1030, 1033, 1034, 1035, 1041, 1044, 1045, 1046, 1047, 1048], "automl": [987, 1007], "automobil": 1012, "autoregress": 375, "autoviml": 1007, "autoviz": 1042, "auxiliari": [164, 378, 406, 1012, 1045], "av": 1038, "avail": [0, 5, 11, 12, 14, 41, 56, 57, 98, 119, 123, 127, 148, 151, 156, 160, 168, 169, 170, 188, 199, 207, 217, 221, 235, 238, 257, 258, 263, 264, 267, 288, 289, 290, 296, 310, 315, 316, 317, 318, 320, 321, 328, 330, 362, 366, 374, 375, 377, 378, 379, 380, 381, 385, 389, 393, 394, 397, 401, 404, 406, 407, 408, 411, 412, 413, 414, 415, 416, 418, 445, 448, 449, 450, 451, 467, 468, 469, 470, 471, 472, 473, 474, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 506, 533, 547, 553, 554, 555, 556, 557, 558, 562, 563, 567, 568, 586, 589, 591, 592, 608, 609, 625, 630, 631, 645, 649, 651, 653, 655, 659, 661, 663, 666, 668, 669, 670, 671, 672, 673, 674, 687, 694, 697, 729, 730, 796, 799, 800, 810, 821, 822, 827, 828, 829, 830, 831, 832, 833, 845, 856, 857, 859, 866, 875, 878, 883, 887, 892, 943, 948, 955, 977, 981, 984, 986, 987, 988, 989, 990, 993, 997, 1000, 1001, 1002, 1006, 1007, 1008, 1011, 1012, 1014, 1018, 1023, 1025, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1046], "available_if": [56, 394, 1043, 1044, 1047], "avebedrm": [305, 375, 488], "aventi": 12, "aveoccup": [305, 317, 375, 488], "averag": [4, 13, 25, 27, 37, 39, 40, 44, 52, 60, 62, 114, 115, 120, 124, 127, 128, 133, 134, 135, 148, 156, 170, 180, 188, 199, 206, 217, 238, 263, 265, 268, 270, 281, 305, 315, 321, 329, 351, 362, 366, 375, 377, 382, 392, 404, 405, 409, 411, 415, 416, 418, 419, 435, 436, 439, 442, 443, 444, 445, 447, 488, 491, 492, 521, 529, 530, 531, 535, 536, 538, 539, 543, 544, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 568, 585, 592, 630, 631, 646, 656, 657, 664, 665, 667, 670, 672, 674, 675, 676, 678, 685, 698, 701, 702, 704, 705, 706, 711, 718, 719, 720, 722, 723, 725, 726, 727, 731, 732, 733, 735, 736, 737, 740, 742, 743, 745, 747, 748, 750, 753, 761, 778, 779, 780, 781, 782, 784, 785, 787, 788, 792, 793, 794, 795, 823, 826, 845, 865, 880, 973, 977, 982, 983, 988, 991, 993, 994, 1001, 1002, 1003, 1021, 1023, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "average_bike_rent": 170, "average_coef_": 1041, "average_feature_effect": 351, "average_intercept_": 1041, "average_linkag": 44, "average_method": [407, 702, 754, 1038], "average_pr": 127, "average_precis": [267, 698, 705, 739, 987], "average_precision_scor": [267, 698, 704, 706, 779, 785, 987, 1030, 1033, 1037, 1038, 1044, 1046], "average_week_demand": [4, 127], "averoom": [305, 317, 375, 488], "avg": [6, 32, 70, 145, 258, 302, 325, 326, 567, 702, 711, 987, 1019, 1023, 1046], "avg_dist": [40, 778], "avgclaim": 217, "avgclaimamount": 217, "avi": [1042, 1043], "avidar": 1046, "avinash": 1042, "avm19": [1044, 1045, 1047], "avoid": [4, 7, 12, 13, 44, 57, 62, 72, 116, 117, 122, 127, 169, 170, 201, 203, 208, 217, 223, 235, 238, 255, 261, 265, 291, 293, 294, 309, 310, 322, 334, 335, 352, 367, 378, 380, 381, 382, 384, 385, 386, 392, 394, 395, 397, 401, 405, 407, 409, 411, 414, 415, 418, 438, 440, 442, 450, 460, 466, 491, 492, 493, 497, 506, 507, 532, 537, 541, 632, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 687, 689, 691, 693, 710, 789, 796, 797, 801, 807, 810, 820, 821, 822, 859, 862, 868, 869, 871, 876, 877, 878, 879, 882, 884, 885, 886, 887, 888, 889, 890, 892, 897, 936, 981, 984, 986, 987, 990, 991, 993, 995, 997, 1002, 1003, 1008, 1011, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "aw": 388, "awai": [25, 26, 27, 60, 78, 120, 151, 152, 156, 202, 342, 343, 375, 405, 417, 626, 841, 842, 849, 850, 986, 987, 1002, 1021], "await": 316, "awalei": 1038, "awar": [9, 15, 145, 160, 335, 351, 378, 380, 382, 392, 395, 411, 415, 565, 566, 646, 652, 653, 654, 656, 657, 667, 678, 845, 874, 993, 997, 1003, 1027, 1030, 1031, 1044], "aweb": 1005, "awesom": 1012, "ax": [4, 5, 7, 8, 9, 10, 12, 13, 15, 25, 27, 30, 31, 32, 34, 40, 42, 43, 45, 53, 55, 56, 57, 64, 66, 72, 75, 80, 82, 86, 90, 92, 95, 101, 105, 111, 113, 116, 118, 121, 122, 127, 129, 130, 132, 133, 134, 154, 155, 160, 163, 168, 169, 170, 171, 172, 175, 178, 179, 182, 183, 188, 190, 191, 194, 196, 197, 199, 200, 201, 203, 204, 207, 208, 210, 212, 213, 214, 217, 220, 221, 222, 223, 224, 225, 229, 234, 238, 239, 241, 245, 247, 250, 255, 256, 257, 260, 262, 263, 264, 266, 267, 269, 270, 271, 272, 274, 278, 281, 283, 285, 286, 287, 288, 291, 293, 294, 299, 300, 301, 305, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 334, 335, 336, 337, 339, 340, 342, 345, 346, 347, 348, 351, 352, 353, 356, 357, 382, 383, 412, 417, 436, 532, 539, 548, 629, 630, 695, 696, 698, 699, 700, 716, 802, 818, 913, 987, 990, 994, 1022, 1027, 1040, 1046], "ax0": [73, 75, 199, 231, 352, 1019], "ax1": [7, 10, 57, 60, 65, 67, 73, 75, 80, 92, 121, 164, 172, 199, 229, 231, 239, 245, 263, 271, 306, 310, 311, 328, 351, 352, 1019], "ax2": [7, 57, 60, 65, 67, 80, 92, 121, 164, 172, 199, 229, 239, 245, 263, 271, 293, 306, 310, 311, 328, 351], "ax3": [65, 328], "ax4": 65, "ax_": [128, 254, 263, 267, 269, 275, 286, 310, 315, 387, 436, 629, 695, 696, 698, 699, 700, 802, 818], "ax_bc": 309, "ax_bottom": 387, "ax_calibration_curv": [25, 27], "ax_colorbar": 305, "ax_det": 257, "ax_histi": 305, "ax_histx": 305, "ax_histx_zoom": 305, "ax_histy_zoom": 305, "ax_idx": 262, "ax_origin": 309, "ax_qt": 309, "ax_roc": 257, "ax_row": 34, "ax_scatt": 305, "ax_scatter_zoom": 305, "ax_top_left": 387, "ax_top_right": 387, "ax_yj": 309, "ax_zoom_in": 305, "ax_zoom_out": 305, "axa": 0, "axarr": [133, 305], "axes_": [127, 129, 239, 316, 322, 387, 630], "axes_idx": 309, "axes_list": 309, "axes_row": 190, "axesimag": 695, "axhlin": [102, 138, 189, 259, 263], "axi": [4, 5, 7, 11, 12, 14, 15, 17, 19, 25, 26, 37, 39, 40, 47, 48, 50, 52, 53, 54, 55, 61, 71, 72, 75, 82, 86, 91, 92, 95, 96, 97, 98, 99, 104, 113, 114, 118, 120, 128, 131, 135, 140, 144, 155, 156, 160, 163, 168, 169, 180, 184, 186, 188, 191, 192, 193, 199, 204, 208, 211, 213, 214, 216, 217, 221, 222, 225, 228, 232, 233, 237, 245, 247, 249, 250, 256, 257, 261, 262, 267, 269, 270, 281, 283, 288, 289, 290, 293, 294, 295, 302, 305, 309, 312, 322, 326, 328, 330, 334, 337, 338, 341, 343, 344, 345, 346, 348, 351, 352, 357, 358, 359, 360, 375, 382, 389, 394, 405, 407, 415, 419, 436, 443, 462, 465, 529, 531, 534, 535, 537, 539, 541, 543, 544, 548, 583, 610, 629, 630, 683, 684, 699, 760, 776, 777, 778, 779, 802, 818, 827, 868, 869, 876, 877, 879, 884, 885, 886, 888, 889, 890, 913, 915, 919, 920, 938, 962, 968, 977, 987, 994, 997, 1002, 1020, 1022, 1038, 1040, 1042, 1047, 1048], "axis_idx": 4, "axis_list": 97, "axp": 12, "axvlin": [53, 60, 73, 82, 102, 123, 134, 169, 171, 172, 188, 266, 346, 1019], "ayako": 1042, "ayan": 1044, "aydor": [1037, 1038, 1041], "ayerdi": 1034, "aymer": 1031, "aymericbasset": 1046, "ayomid": 1040, "ayush": [1038, 1043], "ayzenshtat": [1012, 1038], "azaria": [1045, 1046], "azencott": 1044, "azim": [45, 67, 90, 101, 170, 196, 220, 224], "azur": [0, 380], "b": [0, 8, 10, 24, 26, 59, 65, 80, 102, 113, 114, 120, 124, 125, 135, 138, 152, 153, 154, 159, 164, 181, 183, 184, 199, 200, 205, 217, 236, 238, 259, 263, 265, 270, 274, 281, 318, 328, 362, 375, 377, 380, 384, 385, 386, 404, 405, 407, 410, 411, 412, 415, 435, 480, 496, 498, 539, 564, 586, 587, 588, 589, 605, 606, 608, 609, 626, 644, 645, 646, 647, 656, 667, 670, 672, 674, 678, 685, 686, 703, 717, 727, 728, 789, 790, 807, 808, 846, 872, 873, 874, 875, 878, 879, 887, 914, 921, 936, 937, 950, 952, 977, 979, 983, 984, 985, 987, 990, 992, 997, 1001, 1002, 1018, 1030, 1038, 1041, 1043, 1044, 1045], "b0noi": 1036, "b0rxington": 1045, "b1": [213, 289, 337], "b12": [199, 217], "b1996": 414, "b1998": 414, "b1999": 414, "b2": [213, 289, 337], "b2001": 414, "b2011": 407, "b2c": 1012, "b30065": 307, "b5": 320, "b7a2ff": 309, "b_1": 991, "b_2": 991, "b_column": 717, "b_i": 992, "b_iv_i": 992, "b_j": 407, "b_k": 407, "b_mask": 269, "b_row": 717, "b_true": 269, "ba": [12, 856, 857, 991], "baak": 1044, "baam": [1043, 1044], "babino": [1043, 1044], "bac": 12, "bach": [412, 529, 534, 535, 536, 656, 983], "bachant": 1037, "back": [4, 100, 240, 367, 378, 380, 382, 394, 395, 401, 408, 415, 432, 441, 444, 445, 457, 480, 481, 482, 506, 507, 531, 532, 533, 536, 538, 539, 542, 579, 628, 656, 657, 664, 665, 666, 674, 675, 676, 725, 864, 866, 867, 868, 872, 873, 874, 876, 877, 879, 891, 892, 899, 983, 987, 991, 1008, 1014, 1023, 1033, 1038, 1040, 1041, 1044], "backend": [367, 383, 394, 466, 897, 953, 955, 957, 987, 1033, 1038, 1039, 1040, 1041, 1048], "backend_nam": 955, "background": [5, 11, 47, 66, 128, 302, 307, 375, 380, 388, 407, 491, 492, 984, 992, 1001, 1040], "background_point": 11, "backlink": 1035, "backport": [384, 389, 1037], "backprop": [991, 1001], "backpropag": 991, "backslash": 1045, "backtick": [380, 385], "backup": [506, 1030], "backward": [148, 235, 317, 383, 394, 416, 494, 575, 600, 612, 613, 616, 617, 618, 620, 621, 912, 915, 987, 991, 1008, 1030, 1033, 1038, 1039, 1040, 1042, 1044, 1046], "bad": [45, 60, 61, 152, 169, 351, 362, 380, 407, 417, 690, 743, 976, 983, 984, 989, 995, 1022, 1030], "badaracco": 1043, "badli": [188, 199, 351, 368, 879, 983, 997], "badr": 1045, "baeza": [588, 727, 1033], "bag": [10, 27, 70, 97, 110, 115, 117, 125, 126, 136, 166, 171, 278, 352, 353, 376, 405, 406, 514, 515, 516, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 738, 801, 825, 908, 985, 988, 1009, 1010, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1043, 1044, 1046], "bagai": 1043, "baggingclassifi": [394, 398, 414, 554, 909, 928, 977, 1033, 1036, 1037, 1038, 1041, 1045, 1046, 1048], "baggingregressor": [114, 398, 414, 553, 910, 977, 1033, 1036, 1038, 1041, 1045, 1046, 1048], "baharev": 1035, "bahavior": 351, "bahaviour": 351, "baibak": [1038, 1039], "bail": 1041, "bailei": [407, 702], "bajic": 1045, "baji\u0107": 1045, "bakir2003": 412, "bakiri": [829, 988], "bak\u0131r": [5, 412, 533], "bala": [1030, 1033], "balakumaran": [1037, 1038], "balanc": [4, 6, 13, 27, 53, 66, 72, 111, 117, 122, 147, 166, 203, 204, 253, 258, 261, 263, 264, 276, 305, 368, 392, 394, 405, 411, 412, 414, 500, 513, 532, 538, 539, 545, 555, 559, 562, 638, 656, 657, 664, 666, 672, 673, 674, 701, 706, 726, 740, 779, 784, 796, 797, 814, 859, 899, 901, 904, 907, 909, 924, 925, 976, 1002, 1003, 1009, 1019, 1030, 1032, 1035, 1036, 1039, 1040, 1044], "balanced_accuraci": [706, 987, 1038], "balanced_accuracy_scor": [701, 784, 987, 1038], "balanced_subsampl": [555, 562, 1038], "balaz": [24, 1034], "baldi": 740, "ball": [70, 288, 296, 407, 413, 446, 690, 839, 840, 844, 847, 849, 850, 851, 1030, 1032, 1035, 1041], "ball_tre": [296, 418, 442, 444, 448, 455, 686, 687, 841, 842, 843, 844, 845, 847, 849, 850, 851, 990, 1030, 1047], "balltre": [418, 442, 444, 448, 455, 686, 687, 697, 841, 842, 843, 844, 845, 847, 849, 850, 851, 984, 1030, 1032, 1034, 1038, 1043, 1046, 1047], "baloo": 984, "baluyot": 1039, "bamidel": 1040, "banana": [9, 987], "band": [13, 263, 307, 997], "bandit": 976, "bandol": 311, "bandwidth": [9, 44, 63, 234, 287, 288, 296, 392, 394, 407, 413, 446, 456, 459, 839, 840, 844, 980, 993, 1041, 1045], "bandwidth_": 844, "bangda": 1038, "banilo": [1034, 1035], "bank": [12, 19, 1012], "bannerje": [1046, 1047], "bansal": 1037, "bansod": [1035, 1036, 1037], "bao": [1036, 1044], "baod": 407, "baptbillard": 1043, "baptist": [1033, 1041], "bar": [8, 10, 15, 72, 117, 118, 121, 122, 125, 134, 144, 148, 159, 163, 170, 178, 245, 250, 259, 261, 265, 281, 310, 311, 319, 320, 352, 382, 410, 579, 630, 646, 667, 678, 987, 994, 1001, 1003, 1036, 1037, 1038, 1039], "bar_color": 8, "bar_kw": 630, "bar_siz": 351, "baran": 1040, "barang": 1046, "baraniuk": 416, "barankaraku": 1042, "barata": 1046, "barber": 530, "barberogaston": 1042, "bardiya": [1044, 1045], "bare": [375, 984, 1023], "barh": [15, 125, 163, 164, 168, 169, 171, 172, 242, 312, 351, 352, 353], "barikbin": 1046, "barkhorn": 1038, "barklei": 1040, "barmalei": [1034, 1035], "barn": [690, 984, 1035, 1037, 1040], "barnes_hut": [283, 690, 1037, 1038], "barnett": 1038, "barnhil": [591, 592], "barnowski": [1044, 1045], "barreca": [880, 997], "barreto": 1044, "barri": [375, 1038], "barrier": 415, "barrycg": 1040, "bars_": 630, "bartelheim": 1041, "barth\u00e9lemi": [1046, 1047], "bartosz": 1039, "bart\u0142omiej": 1045, "barycent": [295, 1030], "basbug": 1037, "base": [5, 12, 13, 14, 15, 17, 20, 25, 26, 27, 34, 49, 56, 57, 58, 67, 70, 71, 75, 80, 90, 95, 96, 109, 111, 112, 117, 122, 123, 124, 125, 127, 130, 132, 135, 142, 145, 149, 151, 156, 157, 159, 168, 170, 171, 172, 177, 178, 184, 185, 187, 188, 193, 194, 199, 200, 207, 216, 217, 218, 220, 228, 235, 236, 238, 257, 258, 263, 278, 281, 283, 296, 302, 305, 306, 308, 310, 317, 319, 330, 336, 342, 352, 356, 366, 367, 369, 374, 375, 376, 377, 378, 381, 382, 383, 388, 392, 394, 395, 396, 405, 408, 412, 413, 415, 417, 418, 419, 435, 442, 444, 445, 446, 447, 448, 450, 454, 455, 459, 461, 462, 463, 464, 465, 485, 498, 499, 506, 507, 530, 531, 533, 534, 535, 536, 537, 539, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 614, 615, 616, 619, 622, 630, 631, 633, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 662, 667, 669, 670, 671, 672, 673, 678, 680, 681, 683, 684, 685, 688, 690, 702, 715, 723, 732, 733, 734, 736, 738, 752, 753, 754, 782, 785, 792, 796, 798, 799, 800, 802, 803, 805, 810, 814, 815, 816, 817, 823, 825, 829, 830, 833, 841, 842, 843, 845, 847, 849, 850, 851, 856, 857, 860, 861, 864, 871, 872, 874, 878, 879, 880, 888, 891, 892, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 922, 930, 955, 956, 976, 978, 979, 981, 982, 984, 987, 988, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1018, 1023, 1025, 1026, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1048], "base_classifi": [328, 330, 1000], "base_clf": 435, "base_estim": [317, 382, 405, 551, 552, 553, 554, 830, 833, 896, 976, 1041, 1043, 1044, 1045, 1046], "base_estimator_": [551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 608, 896, 1045], "base_estimator__": 1045, "base_lr": [281, 830], "base_x_test": 78, "base_x_train": 78, "basebag": [1036, 1038], "basebal": [19, 375], "basedecisiontre": [1038, 1039, 1042], "basedictionarylearn": 1030, "baseensembl": [1037, 1040], "baseestim": [56, 109, 235, 283, 380, 393, 394, 417, 422, 424, 425, 429, 430, 431, 599, 630, 631, 928, 1030, 1037, 1040, 1042, 1044, 1045], "basegradientboost": 1031, "baselabelpropag": 1037, "baselibsvm": 1040, "baselin": [25, 111, 121, 124, 135, 148, 172, 178, 217, 270, 281, 317, 352, 377, 407, 416, 549, 550, 632, 987, 990, 1023, 1046], "baseline_similar": 159, "baseline_similarity_bound": 159, "basemap": [11, 296], "basemixtur": [1038, 1039], "basemultilayerperceptron": [1038, 1040], "basenb": 1040, "baserandomproject": [891, 892], "basesearchcv": [1037, 1038], "basesgd": 1001, "basesgdclassifi": 1039, "baseshufflesplit": 1043, "bash": [367, 388], "bashrc": 388, "basi": [4, 6, 14, 100, 151, 156, 158, 200, 301, 318, 338, 342, 372, 378, 381, 407, 412, 414, 450, 532, 620, 630, 637, 689, 878, 985, 997, 1002, 1010, 1018, 1019, 1022, 1025, 1038, 1040, 1043], "basic": [124, 150, 151, 156, 157, 160, 161, 164, 166, 197, 312, 343, 366, 368, 369, 380, 382, 384, 392, 394, 407, 411, 412, 414, 609, 620, 895, 907, 908, 909, 910, 976, 977, 990, 1001, 1006, 1007, 1008, 1009, 1012, 1021], "basicconfig": 95, "basil": 1037, "basis_1": 200, "basis_2": 200, "basri": 511, "bassett": 983, "bastiaan": [1031, 1032], "bastian": 1038, "bat": 378, "batch": [8, 11, 64, 95, 99, 296, 319, 368, 389, 394, 415, 438, 440, 445, 447, 449, 451, 529, 531, 532, 534, 535, 536, 537, 538, 540, 541, 543, 544, 662, 683, 684, 801, 814, 815, 834, 835, 836, 837, 838, 856, 857, 868, 869, 879, 892, 939, 953, 991, 992, 1001, 1030, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1045, 1046], "batch_dict_estim": 95, "batch_pca_estim": 95, "batch_siz": [15, 19, 42, 64, 95, 98, 99, 352, 412, 447, 532, 534, 535, 536, 537, 544, 855, 856, 857, 939, 940, 953, 1031, 1038, 1041, 1043, 1044], "batch_size_": 532, "batchkarov": [1031, 1035], "batiss": 1041, "batista": [1038, 1039, 1043], "batistaki": 407, "batoul": 1043, "battista": 1041, "batula": 1037, "bauk": [1038, 1039], "baum": 444, "baumgartn": 1037, "baxlei": 1037, "bay": [27, 31, 114, 130, 151, 188, 250, 262, 351, 369, 375, 405, 412, 414, 415, 534, 547, 548, 654, 834, 835, 836, 837, 838, 880, 981, 982, 983, 997, 1010, 1023, 1025, 1030, 1031, 1032, 1033, 1038, 1040, 1043, 1045], "bayer": [0, 1030, 1031, 1035], "bayesian": [7, 27, 54, 65, 92, 164, 166, 177, 183, 187, 200, 203, 205, 218, 244, 246, 250, 251, 252, 263, 271, 274, 288, 293, 306, 309, 310, 412, 435, 522, 526, 530, 609, 642, 643, 654, 655, 794, 795, 860, 862, 874, 879, 976, 1007, 1009, 1010, 1024, 1025, 1036, 1043], "bayesiangaussianmixtur": [245, 246, 251, 795, 986, 1036, 1038, 1039, 1043, 1044, 1048], "bayesianridg": [54, 163, 178, 179, 183, 317, 625, 642, 983, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1047], "baz": [382, 579], "baze": 1039, "bbbbbb": 64, "bbox": [9, 12, 34, 45, 101, 245, 246, 247, 250, 251, 307], "bbox_arg": 9, "bbox_to_anchor": [4, 37, 160, 265, 345], "bc": 309, "bcde": 121, "bcross_val": 1030, "bde": 121, "bdegraaff": 1045, "bdt": 113, "beach": 1038, "beam": [114, 1030], "bear": [414, 1007], "bearer": 1038, "beatrizsmg": 1042, "beauchamp": [1031, 1034], "beaugnon": 1040, "becam": [132, 395, 1038], "becaus": [4, 5, 13, 19, 25, 27, 40, 47, 50, 71, 82, 86, 111, 116, 119, 124, 127, 148, 152, 155, 158, 169, 170, 172, 179, 185, 192, 199, 203, 205, 207, 217, 234, 235, 246, 257, 260, 261, 266, 281, 283, 300, 301, 302, 305, 309, 310, 311, 312, 327, 338, 342, 351, 352, 353, 356, 360, 362, 366, 367, 375, 382, 385, 388, 392, 393, 394, 398, 401, 404, 405, 407, 408, 411, 412, 413, 414, 415, 417, 420, 430, 445, 446, 459, 463, 473, 480, 481, 482, 532, 534, 550, 552, 554, 556, 558, 560, 563, 566, 568, 586, 589, 605, 606, 609, 630, 631, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 671, 674, 675, 676, 677, 678, 687, 697, 707, 710, 711, 719, 720, 721, 743, 760, 782, 785, 791, 796, 810, 823, 827, 832, 833, 842, 845, 847, 849, 850, 851, 857, 868, 869, 877, 879, 880, 884, 885, 887, 888, 889, 890, 900, 902, 905, 908, 910, 951, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 990, 992, 994, 997, 1002, 1003, 1012, 1022, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1046], "becker": [407, 1012, 1033, 1042], "becom": [50, 55, 57, 72, 80, 122, 169, 201, 203, 235, 238, 262, 283, 306, 310, 338, 342, 351, 362, 374, 380, 382, 384, 388, 394, 395, 407, 409, 414, 415, 417, 438, 448, 452, 453, 455, 551, 579, 586, 587, 589, 617, 625, 656, 657, 674, 676, 873, 899, 900, 906, 982, 983, 984, 986, 990, 997, 1002, 1021, 1023, 1031, 1038, 1039, 1042, 1043, 1044, 1045, 1047], "bednar": 1037, "bedroom": [305, 375], "been": [0, 4, 9, 26, 44, 53, 60, 81, 100, 109, 111, 148, 151, 156, 158, 169, 224, 228, 230, 235, 236, 258, 260, 266, 315, 316, 317, 318, 319, 321, 322, 327, 351, 362, 367, 374, 375, 377, 378, 379, 380, 382, 384, 386, 388, 389, 392, 393, 394, 395, 398, 401, 404, 405, 407, 409, 411, 412, 414, 417, 432, 435, 467, 469, 470, 472, 476, 485, 521, 532, 534, 547, 548, 565, 566, 579, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 631, 632, 656, 657, 664, 665, 666, 671, 673, 674, 675, 676, 718, 775, 776, 777, 790, 796, 799, 800, 802, 810, 818, 823, 824, 848, 896, 899, 977, 979, 980, 982, 983, 984, 987, 988, 990, 993, 997, 999, 1001, 1002, 1008, 1012, 1014, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "befor": [8, 12, 25, 42, 70, 72, 75, 86, 122, 127, 132, 144, 158, 160, 162, 163, 165, 166, 169, 170, 172, 180, 183, 187, 188, 192, 235, 260, 267, 285, 286, 306, 309, 310, 312, 318, 341, 362, 366, 367, 375, 378, 380, 382, 383, 385, 386, 388, 389, 392, 394, 395, 396, 401, 403, 405, 407, 408, 409, 411, 412, 414, 416, 419, 420, 441, 445, 446, 447, 457, 459, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 488, 499, 532, 535, 536, 537, 538, 539, 542, 544, 545, 559, 560, 563, 565, 567, 568, 575, 586, 587, 589, 609, 625, 626, 628, 643, 664, 665, 666, 669, 674, 676, 685, 690, 692, 794, 795, 801, 802, 814, 815, 817, 821, 823, 825, 839, 840, 847, 848, 849, 850, 851, 854, 859, 860, 863, 866, 873, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 896, 907, 908, 936, 971, 977, 983, 984, 987, 993, 997, 1001, 1002, 1003, 1008, 1009, 1023, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "beforehand": [286, 1003], "begin": [19, 109, 148, 151, 255, 262, 281, 318, 351, 362, 380, 385, 386, 394, 404, 407, 414, 551, 552, 557, 559, 560, 664, 665, 674, 675, 676, 976, 979, 983, 987, 997, 999, 1001, 1038, 1044, 1045], "beginn": 1008, "behav": [4, 12, 52, 57, 203, 255, 305, 317, 338, 362, 380, 386, 392, 393, 407, 408, 411, 879, 983, 997, 1002, 1004, 1008, 1023, 1030, 1037, 1039, 1043, 1044], "behavior": [25, 37, 39, 52, 147, 163, 166, 169, 170, 199, 217, 235, 251, 253, 263, 265, 276, 301, 302, 305, 307, 312, 338, 362, 367, 374, 377, 380, 382, 384, 388, 389, 394, 405, 407, 411, 415, 534, 549, 564, 664, 665, 666, 674, 675, 676, 697, 699, 726, 727, 780, 781, 784, 797, 798, 801, 813, 814, 815, 816, 817, 836, 872, 899, 900, 976, 983, 987, 988, 993, 997, 1002, 1009, 1012, 1014, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "behaviour": [39, 100, 127, 200, 201, 217, 340, 380, 394, 407, 414, 557, 558, 562, 563, 600, 739, 797, 798, 801, 813, 814, 815, 816, 817, 897, 907, 908, 960, 976, 977, 987, 997, 1038, 1041, 1042, 1045, 1046], "behind": [53, 80, 111, 278, 382, 384, 388, 406, 409, 414, 986, 990, 999, 1046], "behrend": 1040, "behrouz": 1044, "behzad": 1036, "beier": 1041, "being": [24, 27, 34, 45, 52, 55, 82, 86, 90, 100, 111, 115, 127, 129, 151, 156, 171, 175, 193, 235, 238, 254, 260, 302, 309, 310, 338, 342, 351, 353, 378, 379, 380, 382, 384, 385, 392, 394, 395, 401, 407, 409, 411, 414, 415, 416, 417, 418, 420, 439, 440, 442, 443, 448, 454, 467, 473, 491, 521, 567, 638, 647, 654, 670, 672, 685, 688, 692, 710, 716, 731, 733, 780, 786, 794, 839, 840, 845, 847, 849, 850, 851, 874, 892, 937, 976, 977, 983, 986, 987, 990, 993, 994, 997, 999, 1001, 1002, 1003, 1030, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "beings": 351, "beirouti": 1037, "belatedli": 1037, "belief": [19, 260, 855, 992], "believ": [351, 352, 388, 392, 1012], "belkin": 984, "belkina": [690, 984], "bell": [519, 1038, 1040, 1042, 1043], "bella": 987, "bella2012": 987, "bellet": [1037, 1038, 1039], "belmont": [907, 908, 1003], "belong": [24, 27, 30, 55, 60, 238, 260, 315, 321, 327, 374, 375, 404, 405, 407, 408, 410, 411, 414, 422, 438, 441, 445, 446, 447, 449, 451, 521, 710, 728, 803, 809, 820, 846, 866, 880, 943, 944, 983, 986, 987, 989, 990, 991, 993, 1002, 1007, 1014, 1021], "below": [9, 13, 25, 26, 27, 32, 34, 55, 60, 70, 75, 80, 89, 90, 95, 109, 115, 118, 119, 124, 143, 168, 170, 182, 195, 196, 199, 201, 215, 216, 221, 225, 230, 235, 238, 240, 242, 255, 258, 263, 265, 266, 267, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 343, 351, 360, 362, 367, 373, 374, 378, 380, 382, 384, 385, 389, 394, 395, 397, 407, 409, 410, 411, 412, 414, 415, 416, 417, 442, 444, 446, 469, 470, 476, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 508, 529, 535, 540, 546, 580, 593, 594, 595, 596, 597, 598, 631, 644, 650, 656, 657, 665, 666, 671, 673, 690, 697, 703, 740, 760, 794, 795, 796, 807, 810, 828, 859, 862, 872, 873, 876, 882, 888, 976, 977, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 1001, 1002, 1003, 1004, 1007, 1016, 1023, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "ben": [1032, 1033, 1034, 1037, 1038, 1039, 1042, 1047], "ben3940": 1044, "benavoli": 260, "benbihi": 1039, "bench_k_mean": 58, "benchmark": [283, 317, 352, 353, 366, 373, 375, 380, 392, 397, 400, 405, 466, 513, 897], "benchmark_estim": 10, "benchmark_influ": 7, "benchmark_throughput": 10, "bend": 342, "benedek": 1046, "benedikt": 1034, "benediktsson": [1030, 1031, 1032], "benefici": [72, 74, 78, 95, 130, 305, 306, 984], "benefit": [4, 46, 56, 74, 75, 111, 112, 122, 127, 169, 213, 224, 231, 233, 285, 319, 366, 380, 389, 394, 405, 407, 446, 459, 466, 506, 565, 566, 656, 657, 664, 665, 666, 674, 675, 676, 830, 897, 899, 976, 982, 990, 997, 1008, 1012, 1030, 1033, 1034, 1035, 1042, 1043, 1044, 1045], "benfield": 1037, "bengio": [260, 856, 857, 976, 1000], "bengtsson": 1034, "benhel": 381, "benhur": 1043, "benign": [148, 377, 498], "benjamin": [639, 1032, 1033, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "benjamini": [593, 1036, 1037], "benjaminirv": 1035, "benjastudio": [1038, 1039], "benn": 1038, "bennett": [148, 377, 987], "benni": 1044, "benoit": 1047, "beno\u00eet": 1043, "benson": 19, "bentlei": 990, "bera": 1045, "berei": 1044, "beren": 690, "berenbaum": 1046, "bereng": 1043, "berg": [375, 1031, 1032, 1042, 1047], "bergman": 1047, "bergstra": [976, 1030, 1031], "berk": 1030, "berkecanrizai": 1045, "berkelei": [639, 907, 908], "berlin": [407, 412, 533, 694, 723, 753, 987], "bernardo": 1036, "bernd": 1045, "bernhard": [5, 412, 533, 830, 865, 895, 988, 993, 1002, 1036], "bernhardsson": 1012, "berni": 1041, "bernoulli": [302, 415, 416, 834, 835, 836, 837, 838, 855, 856, 857, 862, 983, 997, 1010, 1025, 1030], "bernoullinb": [130, 368, 835, 836, 837, 838, 988, 989, 1031, 1032, 1034, 1037, 1042, 1043, 1045], "bernoullirbm": [302, 856, 857, 992, 997, 1032, 1033, 1042, 1044, 1047], "bertin": 1012, "bertoncelj": 1041, "bertrand": [0, 1, 1030, 1036, 1037, 1042, 1043], "bertrandhaut": [1038, 1039], "besid": [132, 231, 380, 385, 587, 976, 1038], "bessel": [417, 617], "bessi": 320, "besson": [1035, 1036], "best": [0, 4, 6, 8, 12, 13, 14, 19, 24, 26, 27, 40, 46, 54, 55, 61, 70, 71, 72, 73, 78, 85, 95, 99, 102, 103, 104, 114, 117, 121, 123, 124, 125, 127, 132, 135, 148, 151, 152, 157, 163, 169, 178, 183, 187, 188, 195, 213, 214, 215, 220, 223, 228, 233, 234, 238, 246, 247, 251, 254, 258, 259, 260, 261, 264, 267, 268, 271, 272, 274, 281, 287, 292, 306, 311, 317, 318, 338, 341, 342, 351, 352, 353, 359, 366, 367, 369, 374, 377, 379, 380, 383, 386, 393, 394, 397, 398, 404, 405, 407, 411, 412, 414, 415, 416, 417, 430, 441, 444, 445, 447, 449, 450, 451, 457, 460, 463, 470, 480, 481, 482, 536, 543, 544, 550, 552, 554, 555, 556, 557, 558, 560, 562, 563, 564, 566, 568, 591, 592, 595, 600, 608, 609, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 686, 687, 688, 691, 692, 701, 706, 717, 718, 719, 720, 721, 725, 726, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 780, 781, 782, 784, 787, 788, 789, 790, 791, 793, 794, 795, 796, 799, 800, 810, 822, 824, 827, 832, 833, 842, 850, 856, 857, 900, 902, 905, 907, 908, 909, 910, 976, 981, 982, 983, 984, 987, 990, 991, 993, 1001, 1003, 1007, 1008, 1012, 1014, 1019, 1023, 1030, 1033, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1048], "best_alpha": [1021, 1030], "best_c": 346, "best_c_scal": 346, "best_clf": 73, "best_estim": [796, 799, 800, 810], "best_estimator_": [6, 54, 72, 73, 74, 78, 102, 234, 250, 258, 260, 261, 264, 272, 287, 796, 799, 800, 810, 976, 1018, 1019, 1037], "best_idx": [19, 259], "best_index": [258, 264], "best_index_": [259, 264, 796, 799, 800, 810], "best_loss": [674, 676], "best_loss_": [856, 857, 1045], "best_low_complex": 259, "best_n_it": 457, "best_paramet": 261, "best_parameters_": 250, "best_params_": [71, 73, 124, 151, 234, 250, 258, 264, 317, 338, 393, 796, 799, 800, 810, 976, 1019, 1023], "best_recal": 258, "best_recall_std": 258, "best_recall_threshold": 258, "best_scor": 264, "best_score_": [71, 73, 234, 261, 264, 265, 338, 671, 673, 796, 799, 800, 810, 1018, 1019, 1023, 1041], "best_score_idx": 259, "best_validation_score_": [856, 857, 1045], "bestofmedia": 1005, "beta": [46, 85, 168, 203, 386, 405, 407, 410, 534, 536, 538, 545, 642, 726, 727, 733, 739, 780, 792, 794, 987, 1021, 1032, 1035, 1037, 1039, 1040], "beta_": [203, 412], "beta_1": [856, 857], "beta_2": [856, 857], "beta_k": 412, "beta_loss": [15, 536, 538, 545, 1037], "betatim": [116, 131, 1045, 1048], "betawork": 1005, "better": [4, 5, 9, 13, 19, 20, 24, 31, 50, 55, 74, 75, 78, 79, 80, 81, 86, 90, 95, 98, 114, 117, 122, 123, 124, 127, 132, 143, 155, 156, 157, 159, 163, 169, 171, 179, 183, 185, 188, 199, 200, 201, 207, 214, 216, 217, 224, 233, 234, 235, 238, 250, 254, 260, 262, 263, 266, 269, 270, 278, 281, 302, 309, 310, 319, 320, 338, 346, 351, 352, 353, 356, 362, 366, 375, 379, 380, 381, 382, 384, 385, 386, 388, 394, 396, 401, 403, 405, 407, 409, 411, 412, 413, 414, 415, 417, 447, 448, 536, 538, 545, 557, 558, 559, 560, 605, 606, 628, 669, 675, 690, 707, 722, 731, 736, 739, 760, 795, 824, 834, 835, 836, 837, 838, 839, 840, 845, 856, 857, 876, 877, 880, 888, 891, 892, 899, 900, 976, 977, 979, 980, 981, 983, 984, 986, 987, 989, 990, 991, 995, 997, 1000, 1001, 1003, 1008, 1012, 1016, 1018, 1023, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "better_prob": 260, "between": [4, 5, 8, 9, 11, 12, 13, 20, 34, 37, 38, 39, 40, 42, 43, 53, 60, 61, 66, 85, 90, 98, 100, 103, 111, 114, 117, 121, 122, 124, 127, 143, 151, 156, 157, 159, 166, 168, 169, 170, 171, 178, 183, 185, 190, 194, 195, 199, 200, 201, 203, 204, 207, 217, 220, 228, 233, 235, 238, 253, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 276, 278, 281, 285, 289, 290, 292, 293, 305, 310, 312, 318, 328, 338, 342, 345, 346, 351, 352, 353, 360, 362, 366, 367, 375, 380, 382, 389, 392, 393, 394, 395, 398, 401, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 428, 438, 439, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 456, 461, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 512, 513, 519, 522, 525, 532, 534, 535, 536, 537, 538, 539, 544, 545, 547, 548, 551, 552, 557, 558, 560, 561, 562, 563, 582, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 609, 618, 625, 630, 631, 632, 637, 640, 643, 644, 645, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 674, 676, 677, 679, 682, 686, 688, 690, 692, 693, 694, 697, 699, 701, 702, 703, 705, 707, 708, 712, 713, 714, 715, 717, 721, 722, 723, 726, 727, 728, 731, 733, 734, 740, 749, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 783, 784, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 805, 813, 814, 815, 816, 817, 824, 825, 827, 829, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 863, 866, 867, 869, 870, 872, 873, 876, 877, 878, 880, 885, 888, 889, 893, 899, 900, 904, 907, 908, 909, 910, 912, 933, 944, 945, 956, 976, 979, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1008, 1009, 1021, 1022, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "bewar": 416, "beyond": [4, 27, 200, 201, 366, 368, 379, 380, 392, 405, 414, 726, 727, 735, 780, 781, 784, 904, 984, 988, 997, 1002, 1008, 1038], "beyst": 1044, "bezuidenhout": 1043, "bf5fff": 92, "bfg": [300, 608, 609, 646, 647, 656, 667, 670, 672, 678, 685, 990, 991, 1045], "bgm": 794, "bharat": [411, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "bharathi": 1041, "bhardwaj": [1037, 1038], "bhargav": 1036, "bhaskaran": [1037, 1038], "bhat": [1043, 1045, 1046, 1047], "bhattacharya": 1038, "bhattarai": 1040, "bhavika": 1042, "bhoomika": 1045, "bhsu": 1034, "bhtsne": [690, 1037], "bi": [55, 415], "bia": [4, 10, 27, 78, 97, 110, 118, 119, 124, 127, 136, 166, 169, 171, 178, 179, 181, 265, 299, 342, 346, 362, 375, 382, 394, 405, 409, 413, 414, 417, 522, 554, 557, 558, 605, 606, 612, 640, 646, 647, 656, 657, 667, 668, 678, 856, 857, 872, 874, 878, 884, 885, 887, 888, 889, 890, 908, 982, 983, 986, 987, 991, 992, 995, 1001, 1009, 1021], "bianca": 27, "bianp": 386, "bias": [9, 82, 98, 124, 131, 168, 169, 171, 265, 375, 396, 405, 414, 522, 547, 855, 879, 890, 982, 986, 995, 1001, 1003], "bibhash": [1040, 1041], "bibl": 352, "bibliograph": 380, "bibtex": 0, "bic": [138, 166, 177, 183, 185, 186, 187, 193, 207, 218, 416, 499, 649, 651, 652, 653, 654, 795, 860, 879, 976, 986, 1009, 1030, 1037, 1043, 1044], "bic_criterion": 187, "bicker": 1040, "biclust": [21, 22, 70, 327, 329, 351, 352, 353, 369, 415, 422, 447, 449, 451, 486, 509, 511, 589, 717, 792, 987, 1009, 1024, 1025, 1032, 1036], "bicluster_ncut": 19, "biclusters_": [20, 21, 422, 449, 451], "bidu": [1043, 1044], "biernat": 1042, "big": [4, 44, 60, 62, 204, 221, 238, 251, 367, 380, 386, 395, 409, 415, 419, 536, 559, 560, 562, 563, 802, 823, 834, 835, 836, 837, 838, 1008, 1012, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "bigg": [417, 617], "bigger": [8, 40, 60, 212, 260, 302, 342, 348, 352, 365, 367, 415, 436, 437, 506, 536, 845, 1018, 1025], "biggest": [407, 410, 412, 441], "biggest_inertia": [407, 441], "biggio": 1041, "bigram": [261, 415, 586, 587, 589, 1023], "bigram_vector": 415, "bijil": 1044, "bike": 994, "bike_shar": [4, 13], "bike_sharing_demand": [4, 13, 170], "bilbro": 1037, "bill": [1040, 1041], "billaud": 1038, "billi": 1034, "billing": [1033, 1034, 1035], "billion": 1012, "bimod": [309, 413], "bin": [4, 24, 25, 27, 53, 75, 113, 117, 199, 232, 238, 266, 288, 305, 306, 307, 308, 309, 311, 312, 378, 388, 397, 405, 413, 414, 436, 437, 446, 459, 559, 560, 862, 864, 878, 938, 1022, 1038, 1039, 1040, 1044, 1048], "bin_cent": [53, 199], "bin_edg": 53, "bin_edges_": [53, 306, 864], "bin_seed": [44, 63, 446, 459, 1041], "binar": [267, 269, 270, 372, 374, 406, 751, 834, 863, 864, 866, 870, 872, 880, 883, 987, 989, 1014, 1025, 1044, 1046], "binari": [8, 14, 25, 27, 115, 117, 128, 130, 145, 159, 169, 175, 190, 192, 199, 207, 221, 229, 238, 241, 257, 258, 263, 269, 275, 278, 287, 338, 342, 344, 360, 362, 374, 375, 376, 382, 384, 385, 394, 397, 401, 404, 405, 406, 407, 414, 415, 417, 435, 436, 437, 450, 485, 498, 506, 507, 518, 521, 547, 548, 551, 553, 557, 559, 564, 565, 566, 579, 586, 587, 589, 591, 592, 600, 608, 625, 626, 627, 628, 629, 630, 631, 656, 657, 664, 666, 671, 672, 673, 674, 698, 701, 705, 706, 707, 710, 711, 713, 716, 718, 724, 726, 727, 731, 732, 735, 736, 737, 738, 739, 740, 779, 780, 781, 784, 785, 786, 791, 793, 796, 797, 799, 800, 801, 802, 810, 814, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 834, 845, 855, 866, 870, 872, 880, 883, 899, 901, 904, 950, 977, 988, 989, 990, 991, 992, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1014, 1027, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1047], "binary_crossentropi": 1044, "binary_eros": 14, "binary_onli": [382, 1040, 1041], "binarytre": [844, 1034, 1038, 1042], "bincount": [394, 411, 555, 559, 562, 656, 657, 664, 666, 672, 673, 674, 899, 901, 904, 907, 909, 924, 925, 1037], "bind": [397, 1007, 1030, 1037, 1038], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "binesh": [1046, 1047], "binet": [1040, 1045], "bing": [1036, 1037], "bingham": 999, "binned_numer": [199, 217], "binom": 983, "binomi": [123, 126, 414, 551, 557, 559, 983, 1044, 1047], "bio": 263, "bioinformat": [626, 977], "biologi": 11, "biometrika": [875, 887], "biostatist": [409, 476], "bipartit": [404, 451, 509, 992], "biprateep": 1042, "birch": [36, 40, 44, 61, 64, 68, 91, 166, 319, 368, 394, 444, 447, 510, 1009, 1024, 1025, 1034, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "birch_model": 42, "birchbox": 1005, "bird": [580, 716, 751, 987], "birodkar": [1035, 1036, 1038], "bischl": 374, "bisect": [36, 40, 57, 59, 60, 61, 68, 160, 166, 256, 441, 445, 510, 1009, 1044], "bisect_km": 319, "bisect_mean": 441, "bisecting_strategi": [407, 441], "bisectingkmean": [43, 407, 1044, 1045, 1046], "bisector": 34, "bishop": [530, 532, 539, 738, 794, 983, 988, 1002], "bistochast": [404, 449], "biswadip": 1040, "biswaroop": 1045, "bit": [4, 13, 27, 48, 53, 78, 98, 197, 201, 278, 305, 338, 352, 362, 366, 375, 378, 394, 414, 415, 580, 587, 656, 829, 919, 920, 984, 988, 1006, 1016, 1023, 1030, 1033, 1036, 1038, 1039, 1042, 1043, 1044, 1047, 1048], "bithash": 638, "bithash_": 638, "bitli": 1012, "bitmap": 377, "bittarello": 1043, "bjerr": 1038, "bla": [366, 367, 378, 381, 386, 775, 1030, 1038, 1039, 1041, 1042, 1048], "black": [4, 9, 10, 11, 13, 26, 34, 44, 49, 55, 56, 80, 81, 92, 95, 120, 143, 151, 152, 156, 157, 160, 164, 169, 170, 178, 187, 188, 189, 191, 195, 199, 200, 201, 205, 208, 211, 212, 217, 228, 238, 245, 248, 288, 299, 300, 302, 330, 348, 357, 358, 359, 380, 397, 400, 407, 414, 417, 553, 554, 629, 993, 994, 1003, 1007, 1014], "blackberri": 311, "blackburn": [1033, 1036], "blackd0t": 1040, "blair": [6, 375], "blakeflei": 1036, "blame": 380, "blanc": 311, "blanchard": [1034, 1035], "blank": [60, 385, 977, 1003], "bldgtype": 121, "bleed": 1012, "blei": [412, 534, 794], "bleich": [170, 994], "bleki": 1042, "blend": [120, 132, 311, 394, 411, 1007], "bli": [367, 378, 392], "blind": [94, 97, 106, 166, 198, 351, 412, 531, 539, 1009], "blindli": 384, "blink": 338, "blis_num_thread": 367, "blob": [24, 33, 34, 42, 44, 57, 62, 64, 91, 407, 446, 510, 1035], "blobs_param": 228, "block": [288, 305, 319, 375, 377, 380, 385, 388, 394, 404, 407, 410, 413, 450, 451, 460, 471, 477, 478, 486, 487, 509, 511, 693, 955, 990, 992], "block_siz": [471, 477, 478, 1034], "blocker": 384, "blocknum": 8, "blockwis": [404, 983], "blog": [319, 366, 380, 386, 388, 395, 1041], "blogpost": 385, "blondel": [0, 2, 24, 48, 100, 190, 200, 221, 236, 261, 351, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1043], "blood": [148, 229, 377, 1021], "bloom": [389, 952], "blown": 341, "blue": [7, 9, 13, 20, 21, 26, 34, 80, 92, 95, 111, 114, 118, 126, 127, 129, 132, 134, 146, 156, 158, 175, 179, 187, 188, 195, 197, 223, 232, 254, 255, 260, 300, 310, 316, 322, 327, 377, 407, 412, 1047], "blueviolet": [213, 289, 337], "blum": 1037, "blyston": [1040, 1041], "bmaisonn": 1042, "bmalezieux": 1043, "bmatrix": [404, 979], "bmc": 997, "bmi": [148, 187, 188, 239, 377, 995], "bmreinig": 1044, "bmug": 19, "bmva": 669, "bmvc": [669, 983], "bnp": 1005, "bo": [26, 1042], "board": 0, "boat": 320, "bob": [1031, 1037], "bobyrev": 1037, "boca": 983, "bodega": 311, "bodenhof": [404, 717], "bodi": [8, 70, 148, 239, 320, 377], "body_bow": 70, "body_stat": 70, "boe": 12, "boechat": 1037, "boenisch": 1041, "boerner": 1044, "boersma": 1036, "bogazici": 377, "bogdan": 1030, "boggavarapu": 1042, "bohl": [1042, 1044], "bohn\u00e9": 1043, "boil": [111, 383, 394, 409], "boilerpl": [235, 382, 1012, 1023], "boisberrang": [0, 1, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "bold": [60, 124, 188, 194, 380], "boll": 983, "bolmier": [1041, 1042, 1046], "boltzmann": [73, 85, 139, 166, 189, 214, 298, 303, 500, 656, 711, 825, 855, 856, 857, 859, 885, 1009, 1024, 1025, 1032], "bommarito": [1033, 1034], "bonald": 1045, "bone": [212, 348], "bonferroni": 260, "bonn": [74, 115, 190, 233, 327, 346], "bonu": [217, 378, 380, 1018, 1023], "bonusmalu": [199, 217], "boo": [148, 377], "book": [48, 70, 441, 445, 447, 829, 834, 838, 983, 984, 985, 988, 1005, 1042], "booktitl": 0, "bool": [49, 66, 81, 164, 217, 360, 380, 419, 420, 421, 422, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 700, 701, 705, 706, 707, 709, 710, 711, 712, 723, 724, 725, 726, 727, 728, 735, 738, 739, 747, 748, 751, 753, 758, 760, 764, 766, 771, 775, 779, 780, 781, 782, 784, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 810, 814, 815, 818, 819, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 930, 936, 937, 949, 952, 958, 960, 968, 973, 974, 975, 977, 1039, 1042, 1043], "bool_": 201, "boolean": [109, 360, 375, 380, 382, 389, 408, 414, 415, 416, 462, 559, 560, 579, 580, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 627, 630, 631, 634, 647, 669, 697, 775, 828, 834, 855, 862, 882, 915, 971, 977, 983, 989, 994, 997, 1003, 1030, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045], "boom": 1048, "boost": [7, 13, 71, 110, 111, 112, 115, 116, 118, 119, 129, 132, 135, 136, 158, 166, 171, 172, 179, 201, 207, 223, 259, 261, 278, 300, 309, 311, 319, 322, 345, 386, 394, 406, 416, 446, 464, 465, 488, 494, 499, 518, 551, 552, 557, 558, 559, 560, 562, 563, 630, 631, 632, 633, 738, 739, 745, 747, 787, 796, 799, 800, 801, 817, 822, 825, 860, 872, 873, 983, 987, 1007, 1009, 1010, 1025, 1030, 1031, 1033, 1035, 1036, 1037, 1039, 1043], "booster": 1035, "boosting_error": 111, "boostingdecis": 414, "booth": 1037, "bootstrap": [114, 115, 123, 163, 263, 272, 317, 411, 414, 552, 553, 554, 555, 556, 561, 562, 563, 925, 958, 983, 1030, 1031, 1033, 1035, 1038, 1040, 1043], "bootstrap_featur": [414, 553, 554], "bootstrap_indic": 263, "borchmann": 1045, "border": [444, 1040], "borderaxespad": 80, "borderpad": 357, "borderwidth": 117, "borg": [688, 692, 984], "borgn": 1043, "bori": [1034, 1042, 1046], "borja": 1034, "born": 1036, "borovec": 1044, "borovikova": 1041, "bosch": 1043, "bossan": [1042, 1044, 1045, 1046, 1048], "bossch": [0, 1, 1037, 1038, 1039, 1043], "boston": 1012, "bot": [384, 992, 1044, 1047], "botelho": 1042, "both": [4, 5, 7, 9, 10, 13, 15, 20, 25, 26, 27, 34, 42, 54, 55, 64, 71, 78, 80, 85, 86, 100, 102, 109, 114, 117, 118, 121, 122, 127, 131, 132, 135, 143, 144, 148, 151, 158, 160, 168, 169, 170, 171, 178, 183, 185, 187, 188, 199, 200, 201, 203, 204, 205, 207, 217, 224, 234, 235, 236, 245, 246, 247, 248, 249, 250, 260, 261, 262, 263, 267, 269, 271, 275, 283, 295, 305, 309, 310, 315, 317, 321, 327, 328, 335, 340, 342, 351, 352, 353, 360, 362, 366, 367, 368, 373, 374, 375, 376, 378, 380, 382, 386, 387, 389, 392, 393, 394, 395, 397, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 420, 435, 444, 450, 460, 466, 473, 480, 481, 482, 483, 486, 487, 494, 495, 498, 500, 503, 505, 506, 507, 532, 536, 538, 545, 549, 553, 554, 555, 561, 562, 563, 564, 565, 575, 586, 587, 589, 595, 605, 606, 625, 630, 631, 641, 655, 656, 657, 670, 672, 674, 676, 685, 697, 702, 710, 714, 726, 727, 728, 733, 735, 754, 758, 764, 771, 775, 780, 781, 784, 785, 786, 792, 799, 800, 802, 818, 828, 856, 857, 871, 873, 875, 887, 892, 897, 899, 900, 907, 909, 923, 928, 937, 950, 962, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1012, 1018, 1021, 1022, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "botstein": [626, 977], "bottleneck": [366, 386, 414, 446, 856, 857], "bottom": [6, 8, 12, 14, 15, 34, 37, 39, 42, 44, 45, 51, 53, 62, 64, 91, 92, 122, 130, 135, 199, 210, 228, 245, 247, 248, 251, 257, 260, 271, 288, 305, 326, 328, 338, 380, 405, 407, 413, 585, 911, 981, 983, 987, 995, 1008, 1019, 1022], "bottom_h": 305, "bottou": [674, 675, 676, 991, 1001], "bou": [1045, 1046], "boucaud": 1038, "boucher": 1037, "bouckaert": 260, "boulard": 1047, "bould": 407, "bouldin": 722, "boulogn": 1033, "boun": 377, "bound": [27, 55, 155, 157, 159, 166, 201, 217, 227, 243, 259, 387, 407, 412, 415, 417, 418, 442, 487, 500, 510, 521, 534, 593, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 630, 633, 635, 648, 652, 656, 675, 703, 732, 785, 794, 795, 839, 840, 876, 888, 891, 892, 893, 901, 902, 903, 906, 923, 955, 983, 986, 987, 990, 999, 1001, 1002, 1004, 1009, 1038, 1041, 1042, 1044], "bound_": 534, "boundari": [8, 11, 14, 25, 26, 27, 31, 34, 56, 58, 60, 109, 110, 113, 120, 130, 134, 136, 140, 152, 153, 155, 159, 166, 170, 182, 200, 208, 228, 233, 236, 263, 274, 275, 291, 293, 294, 296, 299, 305, 307, 310, 324, 329, 331, 333, 335, 336, 337, 338, 340, 341, 347, 348, 349, 357, 376, 405, 414, 415, 417, 448, 454, 502, 534, 547, 548, 567, 586, 587, 589, 629, 732, 758, 796, 828, 841, 847, 849, 850, 851, 874, 878, 895, 896, 901, 903, 904, 907, 923, 981, 990, 993, 997, 1000, 1001, 1002, 1009, 1030, 1032, 1034, 1043, 1044, 1045, 1047], "bounding_ax_": [387, 630], "boundscheck": [367, 381], "bourassa": 414, "bourbeau": [1037, 1038, 1039], "bourboux": 1041, "bourguignat": 1035, "bournhonesqu": 1040, "bousquet": 895, "boutili": 999, "boutsidi": 412, "bow": 408, "bown": 1036, "box": [4, 10, 30, 55, 170, 171, 221, 278, 305, 309, 387, 412, 414, 510, 553, 554, 875, 887, 911, 913, 987, 988, 994, 997, 1003, 1007, 1014, 1038, 1046], "boxplot": [10, 80, 125, 169, 172, 315], "boxplot_runtim": 10, "boxstyl": [9, 307], "boy": 1044, "boyd": 983, "boyl": 1047, "boyuan": [1034, 1035, 1036], "bp": [10, 125, 148, 187, 188, 377, 995], "bpo": 873, "br": 113, "br_estim": 163, "bracket": [380, 983], "bradi": 1037, "bradlei": [148, 377, 983], "bradshaw": [1033, 1034, 1037], "bradypu": [11, 296, 375, 496], "bradypus_variegatus_0": 11, "brain": 374, "branch": [366, 378, 380, 383, 384, 407, 414, 440, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 907, 908, 909, 910, 912, 990, 994, 1003], "branching_factor": 440, "brand": [395, 397], "brandon": [1036, 1037, 1044, 1045], "brandt": 1041, "brandyn": 1030, "brault": 1037, "braun": 1038, "bravi": 1036, "braycurti": [448, 455, 697, 775, 776, 777, 990], "braycurtisdist": 697, "brc": [407, 440], "bre": [632, 1003], "bread": 1012, "breadth": [839, 840, 844, 1012, 1032], "breadth_first": [839, 840, 844], "break": [17, 39, 46, 70, 81, 166, 188, 191, 205, 235, 247, 278, 318, 326, 333, 349, 351, 353, 380, 382, 384, 386, 393, 407, 467, 510, 637, 771, 775, 778, 794, 872, 879, 884, 901, 904, 983, 986, 995, 997, 1002, 1008, 1009, 1030, 1031, 1037, 1038, 1040, 1042, 1046], "break_ti": [347, 901, 904, 1002, 1040], "breakdown": [80, 81, 216, 677, 983], "breakdown_": 677, "breast": [148, 373, 498, 995, 1025, 1035], "breast_canc": 328, "breast_cancer_data": 148, "brecht": 639, "bredin": 1034, "breiman": [171, 411, 414, 514, 515, 516, 553, 554, 562, 563, 632, 907, 908, 995, 1003], "brekk": 1045, "bremen": [24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234], "brendan": [38, 438, 452, 1046, 1047, 1048], "brenden": 1044, "brenner": 987, "breno": [1037, 1038], "brent": [1034, 1038, 1039], "brentfagan": 1039, "brett": [1033, 1035, 1036, 1037, 1038, 1045], "brettingen": 1036, "breuer": 1041, "breunig": [407, 448, 455, 845, 993], "breve": 1046, "brevin": [1046, 1047], "brew": [123, 378, 397], "brian": [0, 2, 46, 706, 987, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1044], "brice": [1042, 1043], "bridg": [392, 984, 1007], "brief": 985, "briefli": [269, 379, 393, 414, 976, 1040], "brier": [24, 25, 27, 405, 707], "brier1950": 987, "brier_scor": 24, "brier_score_loss": [24, 25, 405, 987, 1038, 1039, 1040, 1048], "brigata": 377, "bright": 338, "brighter": 159, "brigi": [1041, 1042], "brigitta": [1040, 1041, 1042, 1046], "bring": [169, 305, 412, 674, 676, 984, 1007, 1012], "british": 415, "brittl": [39, 407], "broad": [380, 394, 1007], "broadcast": 625, "broader": [307, 983, 1011], "broadli": [394, 407], "brocchini": 1042, "brochart": 1047, "brockherd": 1032, "brodersen": 706, "broke": 1037, "broken": [397, 411, 597, 598, 633, 718, 915, 987, 1003, 1033, 1037, 1038, 1039, 1041, 1044], "brook": [1033, 1034, 1042], "brought": [168, 551, 552, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "brown": [11, 92, 296, 375, 496, 626, 977, 1035, 1037, 1038, 1039, 1042], "brows": 384, "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 380, 388, 997, 1047], "broyden": 983, "brr": 178, "brr_poli": 178, "brr_score": 178, "bruce": [1040, 1041], "brucher": [0, 2, 1030], "brummitt": [1037, 1038], "brunak": 740, "brunner": 1034, "bruno": [1041, 1042, 1043], "brutal": 338, "brute": [283, 392, 402, 411, 418, 442, 444, 448, 455, 630, 631, 686, 687, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 994, 1025, 1034, 1038, 1042, 1045, 1046, 1047, 1048], "bry": [191, 208], "bryan": [1030, 1033, 1039, 1040, 1043], "br\u00f6mmel": [1044, 1045], "br\u00fblade": 311, "bsa": 761, "bsas_in_radian": 761, "bscikit": 1030, "bsd": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 105, 109, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 131, 132, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 261, 264, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 325, 326, 327, 328, 330, 342, 343, 346, 347, 351, 352, 353, 386, 392], "bsh": 1045, "bsmtfinsf1": [121, 132], "bsmtfinsf2": 121, "bsmthalfbath": 121, "bsmtunfsf": 132, "bspline": 878, "bsplines_": [200, 878], "bsr": [919, 920, 1043], "bt": 415, "btol": [670, 672], "buck": 625, "budarz": 1043, "buddha": 1035, "budget": [0, 121, 834, 835, 836, 837, 838, 976], "bueno": 761, "buffer": [50, 1043], "buffer_mb": 1030, "bug": [235, 315, 316, 317, 318, 319, 320, 321, 322, 369, 378, 382, 383, 385, 388, 392, 394, 1005, 1008, 1030, 1031, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "bugfix": [384, 1030, 1044], "buguen": 1030, "buhmann": 706, "build": [0, 4, 7, 17, 32, 43, 55, 67, 74, 99, 111, 120, 122, 129, 135, 145, 147, 162, 163, 165, 166, 169, 207, 265, 268, 278, 281, 283, 301, 302, 306, 311, 312, 353, 362, 366, 367, 368, 376, 382, 383, 384, 385, 386, 394, 397, 400, 406, 407, 411, 414, 415, 440, 488, 499, 501, 522, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 583, 584, 586, 587, 589, 625, 626, 628, 689, 711, 712, 797, 801, 805, 814, 819, 821, 860, 877, 879, 907, 908, 909, 910, 912, 932, 976, 977, 984, 987, 991, 993, 997, 1002, 1003, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1021, 1022, 1030, 1033, 1035, 1036, 1037, 1039, 1042], "build_analyz": [415, 586, 587, 589, 1040], "build_clib": 378, "build_ext": [378, 386], "build_numb": 367, "build_preprocessor": [415, 586, 587, 589, 1040], "build_projection_oper": 14, "build_token": [19, 415, 586, 587, 589], "build_tool": 384, "builder": [8, 10, 346, 384], "buildtool": 378, "built": [30, 86, 109, 111, 112, 120, 122, 171, 207, 263, 278, 296, 315, 357, 360, 366, 375, 378, 380, 381, 382, 384, 386, 388, 389, 392, 393, 394, 397, 401, 406, 407, 408, 411, 414, 416, 443, 501, 551, 552, 553, 554, 557, 558, 559, 560, 586, 587, 591, 595, 637, 638, 639, 640, 641, 644, 645, 650, 656, 658, 659, 660, 661, 670, 671, 672, 673, 679, 799, 800, 807, 830, 833, 839, 840, 909, 910, 971, 983, 987, 988, 1000, 1001, 1003, 1007, 1012, 1023, 1030, 1033, 1034, 1036, 1042], "builtin": 1002, "buitinck": [0, 2, 15, 351, 352, 353, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "bulk": [269, 418, 442], "bulk_benchmark": 10, "bulk_benchmark_estim": 10, "bulk_runtim": 10, "bull": 1037, "buluttekin": 1040, "bumblebe": 1043, "bunch": [11, 373, 374, 375, 462, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 565, 566, 567, 568, 630, 631, 632, 858, 859, 907, 908, 909, 910, 944, 947, 1012, 1023, 1035, 1037, 1040, 1042, 1046], "bundl": [1038, 1039], "bupu": 170, "burden": [380, 871, 1008], "bureau": 375, "buri": 380, "burjek": 1030, "burk": [0, 363, 1045], "burn": [1037, 1038], "burst": 987, "busch": [1038, 1039, 1041], "bush": [6, 375], "busi": [4, 199, 260, 388, 392, 785, 983, 987, 1012], "bussonni": [1030, 1042], "butler": [472, 1033, 1041, 1042], "butlerdavi": 472, "butter": 1012, "button": [380, 388, 1021], "butyugina": 1046, "buuren": [625, 977], "buzenet": [1045, 1046], "bv_bunch": 11, "bwignal": 1033, "bydat": 1023, "bypass": [408, 597, 644, 650, 907, 908, 909, 910, 1046], "byproduct": 224, "byrd": 656, "byron": 1042, "byte": [48, 53, 415, 485, 501, 506, 507, 580, 586, 587, 589, 952, 1021, 1023, 1030, 1037, 1038, 1045, 1048], "bz2": [17, 506, 507], "bz2file": 17, "bzip2": 1030, "b\u00e9gude": 311, "c": [4, 6, 7, 8, 11, 12, 13, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 56, 57, 59, 60, 61, 65, 71, 72, 74, 86, 90, 91, 92, 100, 101, 111, 113, 114, 120, 121, 128, 130, 131, 133, 134, 140, 146, 148, 152, 153, 154, 155, 159, 175, 182, 184, 189, 190, 191, 192, 194, 196, 197, 206, 208, 210, 211, 212, 213, 215, 216, 220, 221, 222, 224, 225, 233, 234, 236, 240, 246, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 263, 265, 269, 271, 283, 286, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 302, 305, 306, 307, 310, 315, 316, 317, 318, 319, 320, 321, 322, 327, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 351, 357, 358, 359, 366, 367, 374, 375, 377, 378, 380, 381, 382, 383, 385, 388, 389, 392, 397, 398, 404, 405, 407, 408, 409, 410, 411, 412, 414, 416, 420, 435, 440, 441, 444, 445, 447, 457, 466, 473, 521, 526, 532, 536, 538, 539, 545, 547, 548, 588, 605, 606, 608, 629, 637, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 670, 671, 677, 683, 684, 686, 687, 690, 691, 706, 712, 713, 716, 728, 732, 738, 739, 755, 756, 796, 810, 818, 824, 826, 834, 835, 836, 837, 838, 839, 840, 846, 848, 855, 870, 872, 873, 874, 878, 880, 894, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 914, 919, 920, 950, 976, 979, 980, 982, 983, 984, 985, 987, 989, 990, 992, 994, 997, 999, 1001, 1002, 1003, 1007, 1012, 1014, 1018, 1019, 1021, 1022, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1046], "c0": [121, 231, 311], "c1": [65, 121, 159, 231, 311], "c2": [65, 121, 159, 231, 311], "c22": 320, "c26": 320, "c3": [65, 121, 311], "c4": [65, 311, 1010, 1025], "c5": [65, 1010, 1025], "c56poni": 1040, "c6": 65, "c99": 1007, "c_": [11, 25, 26, 27, 58, 80, 96, 120, 123, 129, 130, 140, 153, 197, 212, 215, 228, 289, 308, 310, 330, 338, 344, 347, 348, 407, 657, 712, 713, 716, 987, 1018, 1021, 1022], "c_0": [979, 985], "c_1": 984, "c_2": [407, 984], "c_2d_rang": 338, "c_e": 407, "c_i": [407, 990], "c_j": [407, 992], "c_jh_j": 992, "c_k": 547, "c_option": 72, "c_p": 983, "c_q": 407, "c_rang": 338, "c_scale": 346, "ca": [148, 377, 407, 440, 907, 908, 999, 1003], "cabernet": 311, "cabin": 320, "cablevis": 12, "cabrera": 1040, "cach": [13, 54, 66, 166, 261, 283, 284, 286, 291, 295, 297, 366, 367, 375, 394, 439, 443, 448, 466, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 506, 507, 796, 841, 843, 859, 860, 897, 901, 902, 903, 904, 905, 972, 990, 1002, 1009, 1033, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1048], "cache_path": 990, "cache_s": [466, 897, 901, 902, 903, 904, 905, 1002], "cached_pip": [72, 408], "cachedir": [54, 72, 389, 408], "caching_dir": 972, "caherrera": 1043, "cai": 1043, "caicedo": 1030, "caio": [1036, 1038, 1040], "caj": 12, "caje": 1031, "cal_clf": 26, "cal_clf_prob": 26, "cal_hous": 375, "cal_scor": 26, "calcot": 1043, "calcsiz": 378, "calcul": [7, 24, 26, 33, 46, 59, 80, 109, 110, 111, 115, 133, 136, 164, 166, 172, 195, 203, 204, 216, 233, 235, 259, 260, 266, 270, 274, 281, 336, 342, 343, 362, 366, 387, 394, 398, 404, 405, 407, 411, 412, 414, 418, 436, 441, 442, 444, 446, 448, 449, 451, 453, 454, 469, 470, 476, 479, 534, 545, 551, 562, 567, 595, 609, 618, 630, 631, 632, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 677, 679, 682, 686, 688, 690, 692, 705, 714, 726, 727, 732, 733, 735, 741, 747, 748, 751, 761, 766, 768, 769, 770, 771, 775, 778, 780, 781, 784, 785, 786, 789, 790, 792, 803, 805, 820, 824, 837, 839, 840, 877, 878, 879, 885, 889, 899, 900, 925, 938, 979, 981, 983, 984, 985, 987, 989, 990, 991, 995, 997, 1000, 1002, 1009, 1018, 1021, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "cald": 894, "caleb": 1042, "calibr": [13, 28, 30, 114, 127, 134, 217, 231, 260, 262, 267, 369, 394, 398, 510, 513, 562, 567, 656, 657, 674, 707, 726, 738, 781, 784, 785, 825, 837, 896, 899, 927, 976, 983, 987, 1000, 1002, 1009, 1010, 1025, 1027, 1034, 1036], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 405, 435], "calibrated_clf": 435, "calibrated_df": [25, 27], "calibrated_forest": 976, "calibratedclassifiercv": [24, 25, 26, 362, 394, 398, 405, 674, 976, 1002, 1008, 1034, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "calibratedclassifiercvifittedcalibratedclassifiercv": 26, "calibration_curv": [24, 405, 435, 436, 1039, 1044, 1048], "calibration_displai": [25, 27], "calibrationdisplai": [25, 27, 405, 927, 1043, 1044, 1048], "california": [122, 159, 163, 164, 305, 311, 317, 373, 377, 488, 1025], "calinski": [708, 1036], "calinski_harabasz_scor": [407, 1038], "calinski_harabaz_scor": [1036, 1038], "cali\u0144ski": 407, "call": [13, 14, 17, 46, 48, 50, 54, 71, 92, 109, 116, 123, 145, 151, 155, 157, 159, 168, 170, 187, 199, 200, 203, 217, 235, 239, 241, 242, 260, 261, 269, 274, 275, 278, 283, 285, 310, 312, 317, 318, 351, 352, 353, 360, 366, 367, 368, 375, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 403, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 419, 430, 438, 441, 444, 445, 447, 448, 449, 450, 451, 452, 455, 458, 460, 462, 463, 466, 467, 472, 480, 481, 482, 486, 489, 490, 493, 495, 501, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 575, 580, 581, 586, 587, 589, 595, 600, 605, 606, 608, 609, 612, 615, 618, 625, 626, 627, 628, 629, 630, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 702, 729, 739, 752, 768, 771, 775, 776, 777, 778, 790, 794, 795, 796, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 848, 850, 855, 856, 857, 858, 859, 862, 863, 864, 866, 868, 869, 871, 876, 879, 880, 883, 888, 889, 890, 891, 892, 896, 899, 900, 901, 902, 904, 905, 908, 910, 926, 930, 935, 936, 944, 945, 947, 953, 954, 955, 958, 961, 971, 976, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 995, 997, 999, 1000, 1002, 1003, 1007, 1012, 1014, 1018, 1021, 1022, 1023, 1025, 1027, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "callabl": [250, 264, 394, 411, 414, 415, 416, 418, 419, 439, 441, 442, 443, 444, 445, 447, 448, 450, 455, 457, 458, 462, 463, 464, 465, 529, 531, 533, 535, 537, 543, 544, 555, 556, 557, 558, 559, 560, 562, 563, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 608, 609, 618, 626, 628, 632, 637, 641, 657, 664, 669, 671, 673, 686, 689, 690, 694, 709, 717, 729, 739, 768, 771, 775, 776, 777, 778, 789, 790, 796, 799, 800, 802, 810, 818, 821, 822, 823, 824, 826, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 863, 872, 894, 895, 901, 902, 903, 904, 905, 948, 954, 957, 971, 976, 987, 997, 1030, 1034, 1037, 1038, 1039, 1040, 1042, 1044, 1046], "callback": [529, 535, 537, 543, 544, 848, 953, 1008, 1046], "callbl": 841, "calle": [235, 945], "caller": [235, 408, 644, 645, 650, 658, 659, 660, 679, 889, 890, 944, 945, 955, 963, 964, 965, 1039], "callgrin": 386, "callgrind": 383, "calm": 12, "caltech": 351, "calvin": [1033, 1034], "calvo": [1038, 1039], "cambridg": [375, 412, 588, 834, 838, 983, 985, 989], "came": 986, "camera_ind": 14, "camil": [1038, 1046, 1047], "camila": 1040, "camilaagw": 1040, "camilo": 1036, "campello": [407, 444], "campustrampu": 1037, "can": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 19, 20, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 79, 80, 81, 82, 86, 90, 96, 98, 99, 100, 102, 104, 105, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 145, 147, 148, 151, 156, 157, 158, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 183, 184, 187, 188, 190, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 207, 215, 216, 217, 220, 221, 222, 228, 229, 230, 231, 232, 234, 235, 238, 239, 242, 245, 246, 247, 248, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 267, 269, 271, 272, 274, 275, 278, 281, 283, 285, 287, 288, 289, 290, 292, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 329, 330, 335, 336, 338, 341, 342, 346, 351, 352, 353, 358, 359, 360, 362, 366, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 430, 432, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 466, 470, 480, 481, 482, 485, 494, 497, 501, 506, 507, 510, 519, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 577, 578, 579, 580, 581, 582, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 630, 632, 633, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 687, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 702, 705, 707, 709, 710, 716, 718, 719, 720, 721, 723, 724, 726, 727, 729, 730, 734, 735, 736, 737, 739, 740, 743, 749, 752, 753, 754, 755, 756, 760, 776, 777, 779, 780, 781, 782, 784, 785, 786, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 856, 857, 858, 859, 862, 863, 864, 866, 867, 868, 872, 873, 874, 877, 878, 879, 884, 891, 892, 897, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 911, 912, 915, 917, 919, 923, 925, 930, 933, 935, 936, 942, 944, 945, 947, 950, 953, 955, 957, 958, 961, 968, 971, 972, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "canberra": [448, 455, 697, 775, 776, 777, 990], "canberradist": 697, "cancel": [414, 415, 760], "cancer": [148, 373, 498, 591, 592, 846, 995, 1025, 1035], "candela": 377, "candid": [74, 250, 258, 261, 268, 317, 368, 380, 384, 407, 414, 446, 448, 796, 799, 800, 808, 810, 983, 990, 1003, 1036], "candidate_idx": 259, "cannon": 1045, "cannot": [4, 13, 40, 56, 75, 82, 95, 100, 119, 169, 170, 183, 199, 217, 235, 305, 338, 346, 368, 379, 381, 386, 392, 394, 395, 407, 408, 409, 411, 412, 414, 415, 417, 463, 519, 536, 537, 538, 541, 545, 608, 611, 612, 613, 615, 617, 618, 620, 621, 623, 649, 653, 680, 690, 709, 715, 775, 799, 800, 846, 847, 849, 850, 851, 859, 860, 864, 869, 870, 881, 917, 919, 920, 976, 977, 981, 983, 984, 987, 988, 993, 997, 1002, 1003, 1008, 1012, 1018, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "canon": [12, 394, 405, 414, 480, 481, 483, 765, 1008, 1010, 1025], "canonic": 394, "cant": 1047, "cantor": [626, 977], "canuma": 1043, "canva": 12, "cao": 407, "cap": [404, 407, 752, 987, 1039], "capabl": [55, 56, 86, 127, 156, 203, 224, 382, 394, 397, 988, 991, 1002, 1003, 1012, 1030, 1039, 1047], "capac": [127, 151, 171], "capit": [10, 25, 322, 494, 802, 818], "cappion": [690, 984], "cappuzzo": 1047, "capsiz": 328, "caption": 70, "captur": [4, 9, 12, 13, 37, 39, 86, 124, 129, 143, 156, 169, 178, 183, 199, 203, 251, 281, 316, 338, 342, 388, 407, 414, 415, 416, 569, 586, 587, 589, 845, 954, 987, 992, 1000, 1004, 1021, 1042], "car": 199, "carbal": 1047, "card": 1038, "cardif": 1005, "cardin": [37, 118, 119, 125, 171, 172, 311, 312, 321, 407, 414, 461, 551, 552, 555, 556, 557, 558, 562, 563, 564, 677, 872, 873, 880, 907, 908, 909, 910, 987, 988, 995, 997, 1044, 1045], "cardiotocogram": 238, "care": [8, 55, 125, 169, 278, 342, 366, 368, 384, 386, 392, 394, 395, 407, 409, 415, 435, 458, 467, 638, 656, 657, 664, 665, 666, 674, 675, 676, 693, 899, 984, 1002, 1012, 1046], "carefulli": [366, 412, 1002], "carei": [1033, 1034, 1035, 1036, 1037], "carett": 1037, "cari": 1042, "carl": [417, 608, 609, 612, 617, 620], "carla": 1046, "carlo": [0, 233, 370, 414, 417, 609, 639, 640, 979, 992, 1030, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "carlson": 1037, "carlsson": 1033, "carmen": 311, "carnegi": 894, "caro": 1035, "carodorum": 311, "carol": [1036, 1037], "carolin": 991, "carrascosa": [1012, 1034], "carre\u00f1o": 1045, "carri": [12, 31, 111, 164, 260, 263, 268, 300, 307, 353, 395, 401, 415, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 1012, 1022], "carrillo": 1035, "carsten": 1043, "cart": [1010, 1025], "carter": [1036, 1037, 1045], "cartesian": [71, 404, 631, 990, 1045], "cartman_nabana": 1040, "cartograph": 175, "cartographi": 983, "caruana": [25, 27, 405, 435, 437], "carvaj": 1030, "casado": 1041, "casagrand": [1038, 1039], "casalegno": 1042, "cascad": 377, "case": [4, 7, 8, 13, 25, 27, 34, 37, 49, 52, 55, 57, 61, 66, 71, 72, 81, 86, 100, 102, 114, 116, 117, 124, 125, 132, 145, 147, 148, 151, 158, 169, 170, 172, 183, 185, 188, 190, 199, 200, 201, 203, 204, 207, 213, 215, 216, 217, 228, 232, 233, 234, 235, 238, 239, 250, 254, 257, 259, 260, 261, 263, 266, 267, 269, 278, 283, 286, 290, 301, 305, 307, 310, 312, 315, 318, 342, 351, 352, 353, 360, 362, 366, 367, 368, 374, 375, 380, 381, 382, 384, 385, 386, 387, 389, 392, 393, 394, 395, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 435, 438, 441, 442, 444, 445, 449, 451, 461, 462, 463, 465, 472, 494, 506, 507, 513, 537, 539, 540, 541, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 586, 589, 591, 592, 595, 600, 604, 607, 608, 609, 623, 625, 626, 628, 630, 645, 646, 651, 654, 655, 656, 657, 659, 661, 664, 666, 667, 670, 672, 673, 674, 678, 680, 681, 682, 683, 684, 685, 697, 701, 706, 707, 710, 716, 718, 719, 720, 723, 725, 726, 727, 731, 732, 735, 739, 740, 742, 743, 745, 747, 750, 751, 753, 760, 775, 778, 780, 781, 782, 784, 785, 786, 787, 791, 793, 795, 796, 799, 800, 802, 810, 814, 818, 819, 820, 821, 822, 823, 824, 826, 828, 836, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 859, 866, 868, 869, 872, 873, 874, 877, 878, 879, 880, 883, 889, 890, 891, 892, 899, 901, 904, 907, 908, 914, 915, 925, 936, 937, 955, 976, 977, 979, 981, 982, 984, 985, 986, 988, 989, 990, 991, 993, 994, 997, 1001, 1002, 1003, 1007, 1008, 1012, 1014, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "caselli": [1038, 1039], "cash": 983, "cashman": 1040, "casino": [1044, 1045], "cass": 1036, "cassi": 311, "cast": [11, 13, 53, 199, 221, 374, 395, 415, 494, 642, 643, 644, 650, 654, 655, 658, 659, 660, 661, 662, 663, 671, 673, 952, 1037, 1038, 1039, 1040, 1043, 1045, 1047], "castachick": 1041, "castello": 1034, "castor": 1041, "caswel": [1043, 1046], "cat": [12, 71, 170, 171, 238, 318, 319, 320, 321, 322, 375, 415, 486, 580, 710, 716, 751, 780, 880, 987, 997, 1039, 1040, 1042], "cat_column": 238, "cat_linear_processor": 132, "cat_proc": [230, 316], "cat_selector": 132, "cat_str": 19, "cat_tree_processor": 132, "catajara": 1040, "catalfo": 1038, "catalin": 640, "catastroph": [312, 760, 1008], "catch": [44, 62, 301, 367, 388, 389], "catch_warn": [44, 62, 235, 300, 301], "categor": [4, 71, 110, 116, 127, 132, 136, 166, 169, 170, 171, 199, 217, 238, 240, 242, 278, 312, 318, 320, 321, 368, 372, 374, 375, 382, 385, 394, 408, 415, 464, 465, 487, 488, 494, 503, 559, 560, 579, 580, 605, 606, 630, 631, 646, 656, 657, 667, 678, 707, 822, 834, 835, 836, 837, 838, 860, 862, 866, 867, 870, 872, 873, 880, 894, 895, 977, 983, 994, 995, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1023, 1025, 1030, 1031, 1034, 1035, 1038, 1040, 1042, 1045, 1046, 1047], "categori": [19, 44, 62, 70, 71, 121, 132, 169, 170, 199, 207, 214, 238, 261, 300, 301, 307, 311, 312, 317, 320, 322, 329, 351, 352, 353, 374, 375, 389, 406, 407, 408, 414, 415, 417, 486, 494, 495, 501, 559, 560, 646, 656, 657, 667, 678, 740, 755, 756, 835, 872, 873, 880, 977, 983, 984, 985, 989, 995, 1014, 1023, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "categorical_column": [4, 121, 169, 171, 238, 465], "categorical_columns_selector": 238, "categorical_columns_subset": 121, "categorical_crossentropi": [1040, 1044], "categorical_encod": 171, "categorical_featur": [4, 71, 121, 127, 170, 311, 317, 318, 319, 320, 322, 385, 414, 559, 560, 630, 631, 994, 1038, 1042, 1045, 1047], "categorical_preprocessor": [240, 311], "categorical_transform": 71, "categoricalnb": [834, 836, 837, 838, 989, 1040, 1041, 1042, 1043, 1045], "categories_": [872, 873, 880, 997, 1038, 1045], "category_1_fold": 501, "category_2_fold": 501, "category_count_": 835, "category_s": 352, "categr": 995, "caterpillar": 12, "cathi": [1034, 1040], "catindex": 170, "catplot": 250, "caught": [380, 388, 401], "caus": [4, 25, 27, 124, 152, 169, 197, 199, 203, 204, 217, 281, 312, 342, 353, 362, 378, 385, 405, 407, 412, 413, 415, 417, 441, 445, 447, 457, 507, 530, 580, 587, 608, 609, 775, 834, 835, 836, 838, 863, 872, 874, 877, 878, 919, 920, 976, 977, 983, 987, 995, 997, 1000, 1008, 1014, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047], "causal": [166, 167, 173, 194, 655, 782, 825, 1009], "causat": 169, "caution": [169, 384, 438, 452, 1038], "cautiou": 1037, "caveat": [411, 417], "cawlei": [265, 987], "cax": [30, 154, 271], "ca\u00f1ardo": 1033, "cb": [154, 232, 249], "cbar_ax": 271, "cbar_kw": [178, 183], "cc": [40, 378], "cc18": 374, "cc_home": [907, 908], "cca": [236, 410, 481, 483, 988, 1034, 1038, 1039, 1040, 1042, 1044, 1048], "ccat": 375, "ccf2002": 979, "cclauss": 1038, "cco": 351, "ccp_alpha": [315, 356, 555, 556, 557, 558, 562, 563, 907, 908, 909, 910, 1003, 1040], "ccp_path": [907, 908, 909, 910], "cd": [95, 148, 377, 378, 380, 384, 386, 412, 469, 470, 476, 529, 535, 537, 538, 541, 543, 544, 545, 983, 1023, 1035, 1045], "cdef": 381, "cdf": 260, "cdist": 1043, "cdivis": 381, "cdot": [260, 342, 404, 407, 412, 413, 417, 612, 613, 617, 620, 621, 865, 979, 981, 987, 991, 997], "cdrig": 1044, "cdt": 19, "cea": [834, 989], "ceballo": 1044, "ceder": [785, 987], "ceethinwa": [1042, 1043], "ceh": 1045, "ceil": [127, 238, 555, 556, 557, 558, 561, 562, 563, 564, 592, 669, 799, 800, 907, 908, 909, 910, 1001], "celelibi": 1039, "celeo": 1034, "celeux": 526, "cell": [11, 12, 20, 26, 32, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 148, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 296, 302, 311, 316, 317, 319, 320, 322, 327, 360, 377, 385, 690, 987, 988, 1036, 1044], "cellular": 14, "celsiu": [170, 994], "cen": 740, "censor": 1007, "censu": 375, "center": [0, 4, 7, 8, 9, 14, 24, 26, 33, 34, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 56, 59, 60, 61, 63, 64, 81, 91, 100, 101, 104, 122, 123, 124, 125, 148, 164, 170, 180, 191, 193, 199, 200, 210, 211, 223, 224, 228, 229, 238, 245, 248, 249, 255, 261, 271, 288, 291, 293, 300, 305, 307, 308, 319, 327, 336, 338, 339, 340, 345, 352, 353, 375, 376, 377, 385, 406, 407, 409, 410, 412, 413, 414, 420, 438, 440, 441, 444, 445, 446, 447, 450, 452, 457, 458, 459, 460, 461, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 499, 510, 522, 532, 533, 539, 542, 548, 604, 607, 608, 609, 630, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 688, 692, 694, 794, 864, 865, 868, 877, 879, 889, 890, 899, 900, 981, 983, 984, 986, 994, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1047], "center1": 66, "center2": 66, "center3": 66, "center4": 66, "center_": 877, "center_box": [60, 510], "centers_0": 308, "centers_1": 308, "centers_init": 59, "cento": 378, "centr": 131, "central": [14, 201, 375, 407, 993, 1007], "centrality_scor": 17, "centroid": [42, 45, 57, 58, 78, 126, 166, 284, 291, 297, 308, 319, 334, 352, 376, 398, 407, 440, 441, 444, 445, 446, 447, 450, 457, 458, 460, 502, 547, 629, 846, 1009, 1010, 1025, 1030, 1034, 1037, 1042, 1046], "centroids_": [440, 444, 846], "ceo": 1012, "cerda": 1044, "certain": [13, 55, 122, 127, 169, 204, 216, 235, 260, 283, 309, 342, 362, 375, 376, 384, 394, 396, 407, 412, 416, 636, 647, 651, 656, 661, 682, 859, 864, 899, 976, 979, 983, 984, 987, 988, 991, 997, 1002, 1007, 1014, 1018, 1035, 1039, 1042, 1045], "certainli": [53, 70, 169, 352], "certainti": [260, 382, 739, 987], "ceshin": 1036, "cetina": 1042, "cf": [312, 407, 410, 440, 698, 983, 997, 1008], "cflag": 378, "cft": 407, "cftree": 440, "cg": [302, 656, 657, 670, 672, 685, 983, 1034, 1035, 1037, 1041, 1043, 1044, 1047, 1048], "cga": 159, "cgi": 892, "cgohlk": [1033, 1034], "cgroup": [1043, 1044], "cgsavard": [1040, 1041], "ch": [199, 201, 217, 328, 330], "ch6": 528, "chacon": 703, "chac\u00f3n": 703, "chad": 1047, "chadi": 1038, "chai": [1042, 1045, 1046], "chain": [69, 75, 76, 111, 139, 166, 231, 268, 271, 278, 280, 282, 283, 286, 302, 362, 369, 372, 392, 394, 406, 417, 494, 500, 539, 609, 625, 656, 735, 796, 825, 828, 830, 831, 832, 833, 859, 860, 879, 976, 977, 988, 992, 1004, 1007, 1009, 1012, 1023, 1025], "chain_jaccard_scor": 281, "chain_method": [830, 1048], "chain_method_": 830, "chaitanya": 1041, "chaitanyamog": 1042, "chakhchoukh": 81, "chakravarti": [633, 635], "chalearn": 987, "challeng": [12, 132, 151, 170, 178, 217, 228, 368, 375, 376, 407, 409, 460, 470, 987, 993, 1012, 1014], "chalmer": 1044, "chalmerlow": 1033, "chalulu": 1045, "chan": [0, 837, 879], "chanc": [17, 36, 38, 49, 68, 111, 143, 166, 172, 199, 207, 214, 217, 260, 266, 269, 270, 311, 346, 352, 362, 379, 407, 411, 698, 700, 702, 703, 706, 714, 752, 754, 783, 792, 824, 987, 995, 1003, 1009, 1046], "chance_level_": [698, 700, 1046], "chance_level_kw": [238, 698, 700, 1046], "chandra": [1040, 1041, 1044], "chang": [7, 25, 26, 27, 95, 99, 100, 114, 117, 125, 152, 163, 168, 169, 172, 200, 201, 203, 204, 239, 240, 255, 260, 267, 270, 309, 315, 316, 317, 318, 319, 320, 321, 322, 326, 338, 342, 353, 360, 362, 366, 367, 368, 375, 382, 383, 384, 385, 388, 392, 394, 398, 407, 411, 414, 415, 417, 419, 432, 435, 438, 441, 442, 445, 447, 450, 452, 457, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 491, 492, 494, 502, 506, 507, 510, 511, 512, 520, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 586, 587, 588, 589, 591, 592, 595, 600, 608, 609, 611, 612, 613, 615, 617, 618, 620, 621, 623, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 690, 692, 698, 702, 705, 710, 714, 715, 726, 727, 733, 734, 738, 752, 754, 775, 781, 782, 784, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 810, 814, 815, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 871, 872, 878, 879, 880, 887, 888, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 917, 919, 920, 931, 936, 946, 953, 954, 955, 957, 976, 977, 978, 986, 987, 988, 990, 997, 1000, 1001, 1002, 1003, 1005, 1008, 1014, 1021, 1023, 1028, 1029], "changed_onli": 1041, "changedbehaviorwarn": 1042, "changedbehaviourwarn": 1039, "changelog": [320, 384, 394, 1028], "changing_param": 7, "changing_param_valu": 7, "changyao": [1045, 1046], "channel": [367, 375, 378, 397, 415, 491, 492, 581, 582, 584, 585, 1011], "channel_prior": 378, "chapman": 983, "chapter": [95, 362, 382, 407, 412, 414, 417, 528, 530, 532, 612, 617, 620, 641, 977, 980, 983, 1002, 1003], "char": [415, 586, 587, 589, 1030], "char_wb": [415, 586, 587, 589], "charact": [353, 380, 385, 394, 415, 501, 506, 507, 586, 587, 589, 911, 992, 1023, 1030, 1043, 1045], "character": [40, 217, 356, 407, 411, 984], "characteris": 990, "characterist": [44, 62, 148, 156, 166, 228, 229, 241, 253, 255, 257, 262, 267, 276, 305, 328, 362, 375, 377, 385, 405, 411, 414, 417, 501, 502, 621, 636, 656, 700, 704, 706, 724, 779, 785, 786, 815, 825, 828, 866, 904, 983, 1009], "chardet": 415, "chardetect": 415, "charg": 380, "charikar": 979, "charl": [27, 761, 1030, 1033, 1036, 1040, 1042, 1045], "charli": [1037, 1038, 1046], "charlton": 1037, "charra": [1045, 1047, 1048], "charron": [1012, 1033, 1034, 1041, 1042, 1043], "charset": [1030, 1032], "charset_error": 1032, "chart": [37, 122, 265, 988, 1016, 1033], "chartbeat": 1012, "chase": [12, 1030], "chasnovski": 1041, "chat": 1012, "chatterje": 1041, "chaudhuri": 444, "chauhan": [1038, 1039, 1045, 1046], "chaumond": [1012, 1038], "chauvin": 740, "chavez": [6, 375], "chawla": 1040, "chayant": 1037, "chazalon": 1044, "cheaper": [170, 407, 417, 671, 979, 983], "cheat": [13, 338, 991, 1001, 1032], "chebee7i": 1034, "chebyshev": [448, 455, 697, 775, 776, 777, 990], "chebyshevdist": 697, "check": [4, 5, 8, 17, 46, 53, 56, 99, 109, 117, 132, 151, 166, 168, 170, 171, 185, 187, 188, 199, 221, 235, 246, 253, 269, 276, 278, 318, 327, 360, 366, 367, 378, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 392, 394, 397, 398, 401, 406, 408, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 489, 500, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 687, 688, 689, 690, 691, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 921, 930, 931, 942, 943, 944, 948, 949, 971, 972, 973, 975, 982, 983, 984, 987, 1002, 1003, 1008, 1009, 1012, 1025, 1030, 1031, 1033, 1037, 1041, 1042, 1043, 1044, 1045, 1047], "check_arrai": [382, 389, 466, 532, 897, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "check_classifier_multioutput": 1040, "check_cv": [394, 1035], "check_decision_proba_consist": 1037, "check_estim": [315, 382, 394, 931, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "check_estimators_fit_returns_self": 931, "check_estimators_pickl": 1047, "check_fit_idempot": 1039, "check_input": [532, 546, 644, 645, 650, 658, 659, 660, 679, 685, 907, 908, 909, 910, 1038], "check_invers": [408, 463, 863, 997, 1038, 1044, 1045], "check_is_fit": [56, 109, 235, 383, 389, 394, 1040, 1043, 1044], "check_memori": [389, 394, 1037], "check_metadata": 235, "check_methods_sample_order_invari": [1042, 1044], "check_methods_subset_invari": [1038, 1044], "check_nam": 382, "check_pairwise_arrai": 1039, "check_random_st": [61, 215, 222, 231, 237, 382, 389, 394], "check_regressor_multioutput": 1040, "check_requires_y_non": 1044, "check_sample_weights_pandas_seri": 1038, "check_scalar": 1044, "check_scor": [394, 1048], "check_set_param": 1038, "check_transformer_data_not_an_arrai": 1040, "check_transformers_unfitted_stateless": 1046, "check_x_i": [382, 389, 1034, 1038, 1039, 1044], "checked_cv": 819, "checker": [384, 819], "checkerboard": [20, 404, 449, 451, 509, 511], "checkingclassifi": 1040, "checklist": 383, "checkout": [378, 380, 384, 388], "checkpoint": 1007, "checks_gener": 930, "checksum": 1042, "cheeseman": 377, "chege": 1044, "chemic": 377, "chemometr": 377, "chen": [78, 79, 409, 414, 420, 473, 723, 753, 979, 987, 1033, 1036, 1037, 1038, 1040, 1043, 1044, 1045, 1046], "chenal": [1039, 1040, 1042], "cherkasski": 983, "chernyi": 1044, "cherri": 384, "cherti": 1034, "cherubin": 1036, "chestervil": 320, "cheuk": [1038, 1039], "cheung": [46, 1031], "chevali": 1042, "chevalli": 1047, "chevron": 12, "chi": [71, 80, 111, 309, 372, 416, 517, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 636, 637, 638, 639, 640, 755, 756, 1025, 1030, 1035, 1036], "chi2": [71, 415, 416, 450, 579, 590, 593, 594, 596, 597, 598, 603, 604, 607, 618, 636, 637, 638, 639, 640, 641, 756, 762, 771, 1030, 1037, 1044], "chi2_featur": 640, "chi2_kernel": [636, 640, 755, 762, 985, 1031], "chi2_stat": 602, "chi2sampl": 636, "chiang": 1038, "chiara": [0, 371, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "chibuik": 1043, "chief": 1012, "chieh": [1037, 1038], "chigurupati": 1042, "chih": [656, 1035], "chilamkurthi": 1036, "child": [127, 235, 351, 360, 367, 392, 394, 398, 407, 414, 440, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 907, 908, 909, 910, 944, 945, 947, 955, 1003, 1037], "child_idx": 41, "children": [360, 407, 414, 439, 443, 461, 564, 1034, 1047], "children_": [41, 439, 443, 461], "children_left": 360, "children_right": 360, "chime": 379, "chin": [377, 1034], "china": [48, 407, 504, 505, 582, 585], "chines": 1007, "chinmaya": 1037, "chinthala": 1037, "chiotelli": 1039, "chip": [403, 1012], "chirag": 56, "chisquar": 309, "chitteti": 1044, "chkoar": 1037, "chloe": 1044, "cho": 1041, "choe": 1039, "choi": 983, "choic": [4, 7, 27, 40, 46, 55, 65, 70, 78, 102, 127, 151, 152, 158, 163, 188, 200, 238, 254, 258, 260, 263, 288, 312, 317, 351, 352, 362, 366, 378, 382, 385, 394, 397, 407, 409, 411, 413, 414, 416, 417, 450, 460, 469, 470, 471, 472, 473, 474, 476, 536, 538, 539, 545, 557, 636, 645, 646, 654, 656, 657, 659, 667, 678, 690, 703, 739, 828, 841, 842, 847, 849, 850, 876, 879, 888, 890, 899, 900, 923, 976, 981, 983, 984, 985, 986, 987, 988, 990, 993, 995, 1000, 1001, 1002, 1003, 1037, 1040, 1041, 1045, 1046], "choleski": [79, 199, 217, 389, 469, 470, 476, 525, 609, 646, 648, 649, 652, 653, 654, 656, 657, 667, 670, 672, 678, 680, 681, 685, 794, 795, 983, 1033, 1037, 1039, 1042, 1045, 1046], "cholesky_delet": 389, "cholesterol": [148, 377], "chong": 534, "choo": [1045, 1046], "choos": [4, 11, 12, 44, 46, 50, 53, 60, 62, 66, 78, 101, 120, 132, 138, 148, 169, 172, 192, 236, 255, 265, 272, 356, 362, 366, 367, 368, 369, 382, 385, 388, 394, 407, 409, 411, 414, 415, 418, 441, 442, 445, 447, 457, 521, 530, 536, 557, 558, 580, 600, 656, 657, 670, 672, 677, 685, 686, 687, 691, 723, 753, 796, 799, 800, 810, 866, 899, 900, 907, 908, 909, 910, 977, 978, 982, 983, 984, 985, 986, 990, 997, 1000, 1001, 1002, 1015, 1017, 1021, 1022, 1032, 1033, 1037, 1039, 1041], "choose_check_classifiers_label": 1040, "choose_random_sampl": 382, "choraria": 1042, "chose": [42, 169, 1018], "chosen": [8, 20, 46, 73, 132, 152, 169, 170, 188, 200, 216, 236, 254, 255, 257, 263, 352, 362, 366, 392, 407, 409, 410, 414, 417, 438, 444, 447, 449, 451, 452, 458, 494, 521, 533, 555, 556, 557, 558, 559, 560, 562, 563, 645, 651, 654, 656, 657, 659, 661, 669, 674, 675, 676, 677, 678, 688, 692, 791, 794, 795, 796, 799, 800, 810, 829, 848, 899, 900, 907, 908, 909, 910, 936, 976, 979, 981, 983, 984, 986, 988, 993, 994, 1001, 1018, 1019, 1021, 1022, 1038, 1046, 1047], "chou": [1037, 1038], "choudhari": [1034, 1035, 1044, 1046], "chowdhuri": [1038, 1044], "choyal": [1037, 1038], "chri": [0, 2, 1030, 1033, 1038, 1039, 1040, 1041, 1044], "chrissobel": 1043, "christ": 19, "christian": [0, 1, 19, 199, 200, 201, 217, 351, 352, 375, 1012, 1023, 1030, 1031, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "christianwaldmann": 1045, "christin": [1045, 1046], "christo": [56, 1039, 1040, 1042, 1044, 1047], "christof": [1034, 1035], "christoph": [170, 412, 417, 530, 608, 609, 612, 617, 620, 794, 983, 988, 1031, 1035, 1038, 1041, 1042, 1043, 1044, 1045], "christopherlim98": 1044, "chrome": 997, "chronolog": [375, 495], "chu": [846, 1046], "chuan": 991, "chugh": 1042, "chuliang": 1043, "chun": [1041, 1042, 1044, 1045, 1046], "chung": [1037, 1038], "chunk": [8, 50, 366, 367, 407, 412, 418, 442, 447, 466, 536, 775, 778, 827, 828, 834, 835, 836, 837, 838, 897, 989, 1037, 1038, 1039, 1040, 1041], "chunk_siz": 1031, "chunker": 415, "church": [892, 999], "chyi": [15, 1033, 1034, 1035, 1036, 1037], "chyikwei": 15, "ci": [55, 367, 383, 384, 388, 989, 1036, 1038], "ciccolella": [690, 984], "cice": [994, 1044], "cichocki": [412, 536, 538, 545], "cimport": [381, 389, 1038], "cindi": [1035, 1043, 1047], "cio": 374, "cipri\u00e1n": 1044, "circl": [34, 60, 100, 130, 131, 140, 225, 236, 290, 293, 300, 305, 307, 327, 342, 359, 376, 384, 388, 407, 450, 460, 512, 520, 761, 1002], "circle1": 66, "circle2": 66, "circle3": 66, "circle4": 66, "circleci": [113, 155, 157, 159, 160, 191, 208, 246, 255, 302, 343, 357, 380], "circlecl": 0, "circuit": [19, 984], "circular": 14, "circumst": [102, 217, 990, 1007], "circumstanti": 199, "cirru": [0, 380], "cisco": 12, "citat": [0, 374, 377, 392], "cite": [374, 392, 407, 1005], "citi": [408, 415, 464, 1023], "citizen": 997, "city_categori": 408, "city_london": 408, "city_pari": 408, "city_sallisaw": 408, "cityblock": [40, 44, 407, 448, 455, 759, 775, 776, 777, 990], "cividi": 40, "ciyou": 656, "cj": [989, 1033, 1034, 1035, 1036, 1037], "cjlin": [175, 374, 485, 506, 507, 656, 1033], "ckdtree": [418, 442, 1032], "cl": [0, 8, 12, 387, 394, 909], "cla": 101, "clabel": [154, 210], "clae": 1038, "clai": [325, 326, 327, 330, 1030], "claim": [166, 177, 218, 380, 462, 494, 550, 646, 667, 678, 704, 742, 747, 749, 825, 860, 863, 864, 872, 879, 983, 1009], "claimamount": 217, "claimnb": [199, 217], "clair": 1030, "clamp": [895, 1000], "clang": [378, 381], "clara": [374, 1042], "clare": 1040, "clarifi": [388, 395, 790], "clariti": [380, 388], "clark": 12, "class": [4, 8, 9, 10, 11, 14, 19, 23, 24, 25, 27, 28, 30, 34, 40, 45, 54, 55, 56, 58, 71, 72, 90, 91, 92, 100, 103, 105, 109, 110, 115, 117, 119, 122, 127, 128, 133, 136, 148, 151, 152, 154, 155, 159, 160, 163, 166, 169, 170, 175, 177, 189, 190, 191, 207, 211, 214, 215, 218, 221, 228, 235, 236, 238, 245, 246, 247, 253, 254, 255, 260, 262, 266, 270, 271, 276, 278, 281, 283, 286, 288, 289, 290, 291, 292, 293, 294, 302, 310, 315, 319, 321, 322, 325, 327, 328, 333, 334, 335, 336, 338, 339, 342, 347, 349, 351, 352, 353, 357, 360, 368, 369, 372, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 389, 392, 393, 397, 398, 403, 405, 407, 408, 410, 412, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 506, 507, 508, 510, 512, 513, 517, 520, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 718, 724, 726, 727, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 751, 752, 754, 779, 780, 781, 783, 784, 785, 786, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 924, 925, 926, 927, 928, 930, 931, 943, 944, 945, 948, 953, 955, 957, 958, 971, 973, 976, 977, 978, 979, 981, 982, 983, 984, 986, 988, 989, 991, 994, 995, 997, 998, 1000, 1003, 1008, 1009, 1010, 1012, 1014, 1018, 1021, 1023, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "class1_1": 134, "class2_1": 134, "class_0": [207, 377, 508], "class_1": [207, 377, 508], "class_2": [377, 508], "class_count_": [834, 835, 836, 837, 838], "class_id": [269, 270], "class_index": 55, "class_label": [394, 555, 559, 562, 656, 657, 664, 666, 672, 673, 674, 907, 909, 925, 1002], "class_likelihood_ratio": [263, 987, 1045], "class_log_prior_": [834, 835, 836, 838], "class_memb": 38, "class_member_mask": 49, "class_nam": [113, 254, 880, 911, 912, 913, 1003, 1046], "class_name0": [423, 440, 441, 443, 445, 447, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 865, 891, 892], "class_name1": [423, 440, 441, 443, 445, 447, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 865, 891, 892], "class_name2": [423, 440, 441, 443, 445, 447, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 865, 891, 892], "class_of_interest": [30, 269, 629, 1047], "class_prior": [375, 834, 835, 836, 838, 1031, 1034], "class_prior_": [549, 837], "class_protein_loc": 278, "class_sep": [147, 293, 513], "class_weight": [6, 340, 394, 406, 555, 559, 562, 656, 657, 664, 666, 672, 673, 674, 675, 899, 901, 904, 906, 907, 909, 976, 1001, 1002, 1019, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1044, 1045], "class_weight_": [901, 904, 1045], "class_weight_vect": 924, "classes_": [109, 191, 208, 229, 235, 269, 325, 326, 380, 382, 394, 432, 435, 436, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 591, 592, 608, 629, 656, 657, 664, 666, 672, 673, 674, 695, 698, 700, 785, 796, 799, 800, 810, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 841, 846, 849, 856, 859, 866, 867, 870, 880, 894, 895, 896, 899, 901, 904, 907, 909, 912, 987, 998, 1001, 1031, 1034, 1035, 1037, 1040, 1042], "classic": [17, 194, 224, 245, 251, 377, 384, 409, 411, 412, 441, 445, 447, 457, 490, 498, 502, 508, 539, 630, 631, 909, 910, 981, 983, 986, 989, 997, 1007, 1017, 1030, 1031, 1035, 1044], "classif": [3, 6, 7, 10, 15, 16, 19, 23, 24, 25, 27, 28, 31, 34, 35, 45, 56, 71, 72, 73, 78, 79, 85, 88, 92, 93, 98, 109, 111, 113, 115, 117, 118, 119, 120, 125, 126, 127, 128, 130, 133, 134, 137, 140, 141, 143, 144, 145, 146, 147, 148, 150, 156, 157, 158, 161, 169, 170, 175, 177, 189, 190, 191, 192, 199, 207, 209, 211, 212, 214, 218, 227, 229, 233, 234, 235, 238, 241, 243, 248, 249, 253, 254, 257, 258, 259, 260, 261, 269, 274, 275, 276, 278, 280, 282, 284, 285, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 307, 308, 309, 310, 325, 330, 331, 333, 334, 338, 341, 343, 344, 345, 346, 347, 349, 350, 352, 353, 354, 362, 366, 368, 369, 373, 374, 375, 377, 382, 385, 389, 393, 394, 402, 405, 407, 408, 411, 412, 414, 415, 416, 424, 435, 467, 473, 480, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 508, 510, 512, 513, 517, 518, 520, 521, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 567, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 607, 608, 609, 611, 612, 620, 629, 630, 631, 641, 656, 657, 664, 666, 672, 673, 674, 695, 701, 703, 706, 710, 711, 713, 714, 716, 723, 724, 726, 727, 731, 732, 735, 738, 739, 740, 751, 753, 755, 756, 758, 779, 780, 781, 783, 784, 785, 786, 791, 793, 796, 797, 799, 800, 801, 802, 810, 814, 815, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 841, 846, 848, 849, 855, 856, 857, 859, 863, 866, 871, 872, 873, 874, 879, 880, 883, 885, 894, 895, 896, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 922, 925, 933, 976, 977, 979, 980, 981, 984, 985, 989, 992, 994, 995, 997, 998, 1000, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1019, 1020, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 34, 35, 45, 56, 70, 71, 72, 73, 74, 90, 100, 103, 105, 111, 112, 113, 114, 115, 118, 119, 120, 123, 124, 130, 133, 134, 140, 144, 145, 147, 153, 159, 166, 171, 172, 175, 177, 189, 190, 191, 197, 199, 206, 208, 211, 214, 217, 218, 228, 231, 233, 235, 241, 254, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 275, 278, 280, 282, 285, 291, 292, 294, 299, 302, 307, 317, 318, 322, 324, 325, 326, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 342, 347, 348, 349, 353, 375, 377, 380, 382, 385, 392, 394, 398, 407, 408, 411, 415, 416, 417, 424, 432, 433, 434, 435, 436, 437, 486, 487, 494, 502, 510, 512, 513, 520, 529, 534, 535, 540, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 564, 565, 566, 567, 568, 591, 592, 600, 604, 608, 620, 627, 629, 630, 631, 647, 656, 657, 664, 666, 669, 670, 671, 672, 673, 674, 695, 696, 698, 700, 701, 705, 706, 707, 709, 710, 711, 716, 718, 723, 724, 726, 727, 729, 731, 732, 735, 736, 737, 738, 739, 740, 751, 753, 779, 780, 781, 784, 785, 786, 791, 793, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 847, 849, 850, 855, 856, 857, 859, 860, 866, 879, 880, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 928, 930, 976, 977, 979, 982, 983, 984, 987, 988, 989, 992, 995, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1017, 1018, 1019, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048], "classification_data": 7, "classification_report": [6, 32, 70, 145, 258, 302, 325, 326, 987, 1019, 1023, 1032, 1034, 1038, 1039, 1040, 1042, 1046, 1048], "classificationcriterion": 1038, "classifier_": [56, 235], "classifier__c": 71, "classifier__criterion": 240, "classifier__max_depth": 240, "classifier__max_featur": 240, "classifier__min_samples_leaf": 171, "classifier__n_estim": 240, "classifier__n_neighbor": 285, "classifier_idx": 30, "classifier_model": 285, "classifierchain": [281, 394, 398, 831, 833, 1037, 1042, 1045, 1047, 1048], "classifiermixin": [109, 235, 380, 382, 394, 411, 1041], "classify__c": 72, "classmethod": [387, 436, 629, 630, 695, 696, 697, 698, 699, 700, 802, 818, 945], "classnameprefixfeaturesoutmixin": [382, 431, 1045], "claudio": [377, 1044, 1045, 1047], "claus": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 105, 109, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 131, 132, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 228, 233, 234, 236, 238, 245, 247, 261, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 305, 306, 307, 308, 309, 310, 342, 343, 346, 347, 351, 352, 353, 392], "clauss": 1047, "clb": 170, "clean": [52, 71, 198, 362, 372, 378, 413, 993, 997, 1040], "cleaner": 66, "cleanli": [62, 1030], "cleanup": [380, 1030], "clear": [4, 55, 60, 72, 169, 170, 310, 375, 379, 380, 382, 392, 393, 394, 405, 408, 413, 913, 914, 976, 981, 1041, 1042, 1043], "clearer": [225, 1002], "clearli": [4, 60, 98, 170, 233, 342, 379, 380, 392, 394, 412, 414, 988, 994], "clegg": 1033, "clemen": 1034, "clement": [1037, 1038, 1042], "clenaghan": [1035, 1036], "cleveland": 375, "cleverless": 1032, "clf": [6, 10, 11, 12, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 58, 63, 71, 101, 115, 123, 126, 128, 133, 138, 140, 144, 145, 147, 153, 155, 172, 189, 191, 192, 196, 197, 203, 206, 208, 211, 212, 213, 215, 223, 229, 230, 233, 236, 242, 249, 257, 261, 265, 266, 268, 271, 272, 286, 289, 290, 291, 294, 299, 307, 310, 315, 316, 317, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 351, 356, 357, 360, 366, 375, 393, 394, 401, 408, 411, 414, 416, 436, 547, 548, 551, 553, 555, 557, 559, 561, 562, 565, 591, 592, 595, 630, 632, 636, 637, 638, 639, 640, 642, 643, 646, 650, 656, 657, 658, 659, 660, 664, 666, 667, 670, 671, 672, 673, 674, 675, 678, 695, 696, 698, 700, 785, 796, 799, 800, 810, 827, 828, 829, 831, 834, 835, 836, 837, 838, 845, 846, 856, 899, 901, 903, 904, 907, 911, 913, 977, 979, 983, 987, 988, 990, 991, 993, 994, 1001, 1002, 1003, 1014, 1018, 1019, 1023], "clf1": [33, 133, 134, 414, 567], "clf2": [33, 133, 134, 382, 401, 414, 567], "clf3": [33, 133, 134, 382, 414, 567], "clf__": 261, "clf__alpha": [261, 1023], "clf__c": 408, "clf_descr": 351, "clf_en_lr": 190, "clf_err": 115, "clf_isoton": 24, "clf_isotonic_scor": 24, "clf_l1_lr": 190, "clf_l2_lr": 190, "clf_list": [25, 27], "clf_name": [10, 351], "clf_no_weight": 348, "clf_pf": 837, "clf_prob": 26, "clf_sample_weight": 235, "clf_score": 24, "clf_sel": 172, "clf_select": 144, "clf_sgd": 213, "clf_sigmoid": 24, "clf_sigmoid_scor": 24, "clf_weight": 348, "cli": 1015, "click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "clickabl": 1044, "client": [382, 955], "clifford": 1043, "cliffordemmanuel": 1043, "clim": 154, "climatologi": 405, "climb": [407, 446, 459], "clinton": 19, "clip": [25, 27, 217, 231, 305, 338, 633, 674, 738, 869, 997, 1034, 1041, 1042], "clmbst": 1042, "clock": 4, "clone": [56, 124, 159, 170, 235, 302, 322, 362, 378, 380, 383, 384, 386, 388, 394, 405, 408, 417, 435, 463, 567, 568, 595, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 802, 818, 823, 826, 830, 833, 859, 860, 896, 1008, 1030, 1036, 1038, 1042, 1046, 1047], "clone_kernel": [608, 609, 1040], "clone_with_theta": [159, 417, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "cloned_classifi": 432, "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 60, 66, 78, 79, 82, 100, 114, 121, 124, 128, 132, 151, 152, 155, 156, 157, 158, 159, 169, 171, 183, 203, 205, 221, 228, 234, 238, 245, 251, 260, 261, 289, 290, 305, 315, 338, 342, 343, 352, 362, 375, 380, 382, 388, 392, 394, 395, 405, 406, 407, 410, 411, 414, 417, 448, 453, 470, 506, 507, 530, 561, 626, 641, 645, 659, 670, 672, 685, 703, 743, 794, 814, 815, 834, 835, 836, 838, 845, 920, 976, 980, 981, 983, 984, 986, 987, 988, 990, 993, 994, 997, 1002, 1007, 1012, 1021, 1033, 1037, 1038, 1039], "close_pric": 12, "closer": [4, 37, 98, 100, 131, 148, 151, 170, 178, 203, 342, 353, 405, 407, 412, 447, 551, 626, 710, 841, 842, 847, 849, 850, 851, 1002, 1037], "closest": [27, 46, 64, 203, 382, 407, 438, 440, 441, 445, 446, 447, 457, 651, 776, 777, 829, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 978, 981, 988, 990, 1021], "closur": 17, "cloud": [43, 85, 94, 96, 106, 166, 388, 412, 531, 539, 690, 987, 1006, 1007, 1009, 1022], "cls_info": 10, "cls_name": [8, 10], "cls_runtim": 8, "cls_stat": 8, "cls_valu": 10, "club": 377, "clue": [375, 388, 984], "clump": 224, "clust": [65, 448, 455], "cluster": [8, 9, 14, 15, 17, 18, 20, 22, 24, 27, 42, 43, 46, 48, 50, 51, 53, 54, 57, 59, 61, 62, 68, 70, 80, 89, 90, 91, 101, 109, 113, 120, 128, 143, 146, 159, 172, 196, 221, 223, 224, 225, 232, 235, 238, 245, 246, 247, 248, 261, 283, 285, 289, 290, 292, 308, 316, 320, 325, 326, 327, 329, 340, 350, 351, 353, 354, 360, 368, 369, 373, 375, 377, 380, 382, 385, 392, 394, 402, 408, 413, 415, 421, 422, 425, 486, 500, 501, 502, 509, 510, 511, 512, 513, 520, 528, 539, 542, 562, 564, 587, 588, 589, 629, 689, 690, 693, 702, 703, 708, 715, 717, 722, 728, 733, 734, 752, 754, 775, 776, 783, 789, 790, 792, 794, 795, 851, 852, 860, 864, 871, 879, 928, 930, 948, 955, 971, 977, 984, 986, 990, 993, 995, 997, 1000, 1004, 1007, 1008, 1009, 1012, 1014, 1017, 1020, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "cluster_1": 128, "cluster_2": 128, "cluster_al": [446, 459], "cluster_cent": [38, 61, 63, 64, 459], "cluster_center_indic": [438, 452], "cluster_centers_": [42, 43, 48, 50, 58, 60, 61, 63, 64, 95, 319, 352, 438, 441, 445, 446, 447, 1022], "cluster_centers_indic": [38, 452], "cluster_centers_indices_": [38, 438], "cluster_data": 59, "cluster_doc": 19, "cluster_hierarchy_": [407, 448], "cluster_id": [172, 352], "cluster_id_to_feature_id": 172, "cluster_label": [56, 60], "cluster_method": 448, "cluster_optics_dbscan": [65, 407], "cluster_qr": [46, 407, 450, 460, 1044], "cluster_s": 352, "cluster_selection_epsilon": 444, "cluster_selection_method": 444, "cluster_std": [26, 38, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 211, 228, 248, 308, 340, 510], "cluster_word": 19, "clusterer_": 56, "clustering_algorithm": [43, 44, 62], "clustering_metr": 58, "clustermixin": [382, 1047], "clusters_std": 340, "clyde": 1035, "cl\u00e9ment": [1039, 1043, 1045], "cm": [4, 6, 11, 12, 14, 20, 21, 24, 30, 31, 32, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 67, 80, 82, 89, 95, 98, 101, 113, 119, 120, 140, 146, 154, 155, 170, 182, 191, 208, 211, 212, 215, 221, 222, 223, 229, 232, 233, 237, 242, 254, 255, 283, 286, 287, 289, 293, 296, 299, 301, 302, 305, 307, 317, 320, 325, 326, 330, 334, 335, 336, 338, 339, 340, 344, 347, 348, 357, 377, 408, 695, 912, 987, 997, 1003, 1019, 1020], "cm2013": 407, "cm_bright": [31, 299, 307], "cm_displai": 229, "cm_piyg": 307, "cmap": [4, 5, 6, 11, 12, 14, 20, 21, 30, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 58, 80, 82, 89, 95, 98, 101, 105, 113, 119, 120, 140, 146, 154, 155, 170, 178, 182, 183, 190, 191, 208, 211, 212, 213, 215, 221, 222, 223, 232, 233, 237, 254, 255, 283, 287, 289, 291, 292, 294, 296, 299, 301, 302, 305, 307, 325, 326, 330, 334, 335, 336, 337, 338, 339, 340, 343, 344, 347, 348, 357, 695, 1019, 1020], "cmap_bold": [291, 294], "cmap_cv": 255, "cmap_data": 255, "cmap_light": [291, 294], "cmcsa": 12, "cmd": 378, "cmu": 894, "cname": 42, "cnb": 989, "cnp": 381, "cnx": 1038, "co": [4, 12, 14, 18, 20, 22, 39, 40, 70, 129, 131, 156, 166, 169, 200, 222, 260, 274, 319, 329, 351, 352, 353, 359, 384, 413, 415, 447, 449, 451, 486, 509, 589, 697, 717, 761, 792, 982, 997, 1009, 1012, 1024, 1025], "co2": [150, 151, 157, 158, 161, 166, 417, 494, 609, 613, 620, 621, 623, 1009, 1037], "co2_data": 156, "co2_data_resampled_monthli": 156, "co2_kernel": 156, "coars": [4, 120, 386, 446, 459], "coarser": [120, 124], "coast": [11, 296], "coastlin": [11, 148, 296, 377], "coca": 12, "cock": [132, 1039], "cockburn": 1032, "coclust": [19, 404, 449, 511], "cocoa": 1012, "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 374, 378, 379, 381, 383, 384, 389, 392, 394, 395, 397, 398, 401, 403, 406, 407, 414, 415, 440, 441, 445, 447, 457, 494, 524, 528, 529, 535, 536, 540, 541, 543, 544, 546, 564, 570, 579, 580, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 680, 681, 683, 684, 827, 828, 829, 866, 873, 955, 984, 988, 997, 999, 1001, 1002, 1007, 1008, 1009, 1011, 1012, 1015, 1023, 1030, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "code_book_": 829, "code_init": [529, 543], "code_s": [278, 829, 988], "codebas": [321, 362, 380, 381, 382, 415, 1030, 1036], "codebook": [48, 278, 564, 829], "codebook_random": 48, "codecov": 388, "codeofconduct": 380, "coder": [104, 540, 714], "codevig": 1036, "coef": [10, 54, 104, 168, 169, 178, 183, 186, 190, 191, 193, 198, 202, 203, 204, 208, 215, 242, 273, 301, 321, 347, 522, 644, 645, 647, 650, 651, 657, 658, 659, 660, 661, 667, 670, 672, 678, 679, 680, 681, 682, 683, 684, 685, 991], "coef0": [175, 342, 345, 450, 533, 637, 638, 641, 772, 774, 901, 902, 903, 904, 905, 985, 1002], "coef_": [7, 10, 14, 54, 85, 144, 145, 148, 168, 169, 178, 181, 183, 184, 185, 189, 190, 191, 192, 193, 194, 195, 198, 202, 203, 204, 208, 214, 215, 236, 242, 273, 312, 319, 336, 343, 347, 351, 362, 375, 382, 394, 410, 416, 463, 480, 481, 482, 547, 591, 592, 595, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 899, 900, 901, 902, 903, 904, 905, 971, 981, 983, 1001, 1002, 1021, 1030, 1032, 1035, 1037, 1042, 1044, 1047], "coef_agglomeration_": 54, "coef_en_lr": 190, "coef_i": 169, "coef_init": [644, 645, 650, 651, 658, 659, 660, 661, 664, 665, 666, 674, 675, 676, 679, 682], "coef_l": 184, "coef_l1_lr": 190, "coef_l2_lr": 190, "coef_lasso_": 193, "coef_multi_task_lasso_": 193, "coef_p": 184, "coef_path": [651, 661, 682], "coef_path_": [648, 649, 652, 653, 983], "coef_path_continu": [651, 661, 682], "coef_path_lar": [651, 661, 682], "coef_pl": 184, "coef_ridg": 181, "coef_selection_": 54, "coeff": 678, "coeff_diff": 185, "coeffeci": 1039, "coeffici": [4, 7, 10, 38, 49, 58, 60, 78, 79, 82, 95, 98, 138, 145, 151, 166, 167, 168, 173, 177, 181, 183, 184, 185, 186, 190, 192, 193, 194, 195, 196, 197, 201, 202, 214, 217, 218, 242, 260, 273, 301, 312, 317, 318, 319, 342, 346, 351, 352, 353, 366, 376, 380, 382, 394, 396, 406, 409, 410, 412, 416, 417, 420, 430, 450, 463, 465, 471, 473, 474, 476, 477, 478, 479, 480, 481, 482, 494, 522, 524, 525, 529, 533, 535, 537, 540, 541, 546, 550, 552, 554, 556, 558, 560, 563, 566, 568, 580, 587, 591, 595, 607, 609, 612, 625, 633, 634, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 699, 701, 714, 717, 726, 731, 735, 740, 747, 750, 772, 774, 782, 783, 785, 789, 790, 793, 811, 822, 825, 832, 833, 842, 850, 857, 860, 872, 879, 899, 900, 901, 902, 903, 904, 905, 908, 910, 978, 981, 983, 1001, 1002, 1009, 1021, 1030, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1047], "coefs_": [192, 301, 856, 857, 991, 1035], "coefs_cf": 312, "coefs_enet": 184, "coefs_lasso": 184, "coefs_no_cf": 312, "coefs_path": 657, "coefs_paths_": [657, 1040], "coefs_positive_enet": 184, "coefs_positive_lasso": 184, "coelho": [1031, 1033, 1034, 1038], "coelhudo": 1042, "cognit": [148, 377], "cohen": [714, 1038], "cohen_kappa_scor": [987, 1035, 1037], "coher": 407, "cohort": 135, "coin": [12, 14, 17, 21, 36, 39, 40, 41, 42, 44, 48, 53, 54, 62, 66, 67, 68, 98, 166, 407, 415, 439, 460, 999, 1009, 1022], "coincid": [155, 201, 417], "col": [13, 19, 25, 27, 38, 42, 49, 55, 59, 63, 64, 70, 73, 117, 133, 220, 238, 347, 509, 511], "col_compl": 19, "col_idx": 21, "col_idx_shuffl": 20, "col_ind": [422, 449, 451], "col_indic": 127, "col_nam": 13, "col_split": 13, "cola": 12, "cold": 283, "cole": 1039, "coleman": [1031, 1032], "colgat": [12, 17], "colin": [6, 375, 1036], "colin_powel": 1019, "colinear": 548, "collabor": 380, "collaps": [4, 170, 238, 305, 338, 392], "colleagu": 260, "collect": [7, 10, 12, 13, 19, 25, 73, 115, 127, 128, 135, 148, 156, 164, 172, 187, 192, 223, 231, 263, 267, 352, 353, 366, 375, 377, 384, 397, 406, 411, 412, 414, 415, 444, 462, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 567, 568, 579, 581, 582, 586, 587, 588, 589, 630, 726, 727, 735, 775, 780, 781, 784, 798, 802, 803, 805, 818, 945, 958, 961, 976, 982, 983, 987, 993, 998, 1008, 1012, 1018, 1023, 1032, 1042], "colleg": [0, 168], "college_degre": 168, "collid": 415, "collier": 1023, "collin": 1033, "collinear": [169, 172, 204, 217, 414, 565, 646, 667, 678, 872, 983, 1030], "collis": [352, 353, 415, 580, 587], "collot": [1044, 1045], "colombia": [11, 296, 375, 496], "colon": 380, "coloni": 375, "color": [4, 6, 7, 8, 9, 10, 11, 12, 13, 20, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 46, 47, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 79, 80, 81, 82, 86, 90, 91, 92, 95, 96, 97, 98, 99, 101, 102, 103, 104, 111, 112, 117, 120, 121, 123, 126, 127, 128, 129, 130, 132, 134, 138, 140, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 166, 169, 171, 172, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 213, 216, 217, 221, 222, 223, 225, 228, 232, 233, 234, 236, 239, 245, 246, 247, 248, 249, 250, 251, 255, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 281, 285, 288, 289, 290, 291, 294, 295, 296, 299, 305, 306, 307, 309, 310, 311, 316, 322, 327, 328, 330, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 357, 358, 374, 375, 377, 388, 407, 414, 415, 445, 491, 492, 504, 581, 582, 776, 961, 1001, 1003, 1009, 1035, 1040, 1042, 1047], "color_continuous_scal": 261, "color_intens": 9, "color_it": [246, 250, 251], "color_map": 330, "color_palett": [37, 112, 127, 250], "colorbar": [4, 11, 30, 40, 95, 105, 119, 128, 146, 152, 154, 155, 157, 170, 220, 232, 249, 271, 305, 338, 695, 1042], "colorbarbas": 305, "colorblind": [37, 112, 127], "coloring_matrix": [78, 79], "colormap": [95, 113, 159, 191, 208, 338, 343, 357, 695, 1043], "colors_": 42, "colors_list": 117, "colour": [248, 377, 415, 585, 988], "colt": [723, 753, 987], "colton": 979, "columbia": 0, "column": [4, 13, 20, 21, 60, 69, 72, 75, 76, 90, 118, 120, 121, 124, 127, 129, 132, 148, 156, 163, 166, 168, 169, 170, 171, 172, 188, 199, 200, 203, 207, 217, 230, 237, 238, 239, 242, 250, 260, 261, 271, 272, 281, 301, 310, 311, 312, 317, 318, 319, 320, 322, 351, 352, 353, 366, 374, 375, 377, 380, 382, 386, 389, 392, 393, 394, 404, 407, 408, 410, 412, 414, 415, 416, 419, 422, 449, 451, 462, 464, 465, 469, 470, 476, 485, 486, 487, 488, 489, 490, 492, 494, 498, 499, 500, 502, 503, 506, 507, 508, 509, 511, 513, 524, 529, 532, 535, 539, 540, 546, 553, 555, 556, 559, 560, 562, 563, 564, 565, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 625, 628, 630, 631, 632, 644, 646, 650, 656, 658, 660, 662, 663, 667, 678, 683, 684, 695, 711, 716, 717, 726, 727, 735, 751, 760, 765, 766, 767, 770, 780, 781, 784, 785, 796, 799, 800, 810, 820, 825, 830, 833, 834, 835, 836, 837, 838, 839, 840, 859, 863, 864, 865, 866, 872, 873, 874, 878, 879, 880, 881, 883, 884, 885, 889, 890, 899, 901, 904, 907, 909, 915, 919, 920, 925, 936, 950, 963, 964, 966, 974, 976, 977, 979, 983, 985, 987, 988, 995, 997, 1002, 1008, 1009, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "column_labels_": [20, 21, 404, 449, 451], "column_nam": 217, "column_or_1d": [389, 1041, 1045], "column_result": 261, "column_stack": [41, 299, 307], "column_to_drop": 169, "column_tran": [217, 408], "columnar": [374, 462, 1007], "columns_": [19, 404, 422, 449, 451], "columntransform": [4, 70, 71, 132, 169, 170, 171, 199, 217, 230, 238, 240, 242, 311, 316, 318, 319, 320, 322, 372, 374, 392, 393, 398, 464, 465, 627, 864, 976, 977, 1008, 1025, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "columntransformercolumntransform": [71, 132, 169, 171, 230, 240, 311, 316, 319], "columntransformerinot": [132, 170], "columnwis": 412, "com": [7, 8, 11, 12, 15, 20, 21, 24, 42, 48, 57, 65, 70, 71, 109, 111, 112, 113, 114, 115, 116, 123, 125, 126, 131, 132, 151, 154, 156, 158, 160, 164, 179, 199, 201, 206, 216, 217, 221, 223, 225, 231, 245, 247, 248, 261, 264, 283, 305, 306, 309, 310, 351, 352, 374, 375, 378, 380, 384, 385, 386, 388, 392, 397, 403, 407, 440, 450, 460, 506, 532, 534, 539, 669, 689, 693, 703, 990, 1005, 1035, 1037, 1040], "coma": 1012, "comaniciu": [63, 407, 446], "comapar": 407, "comb": 1044, "combat": [299, 412], "combin": [4, 12, 13, 20, 25, 27, 61, 70, 71, 73, 74, 75, 90, 95, 103, 104, 110, 112, 121, 122, 126, 127, 135, 136, 151, 157, 163, 164, 166, 169, 183, 199, 203, 216, 217, 224, 228, 230, 233, 238, 256, 260, 261, 269, 271, 272, 292, 300, 311, 317, 318, 320, 341, 342, 353, 357, 366, 372, 376, 377, 380, 385, 393, 394, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 443, 462, 464, 465, 471, 473, 474, 477, 478, 479, 487, 494, 506, 507, 513, 519, 522, 524, 529, 535, 536, 538, 540, 545, 547, 558, 560, 563, 565, 566, 608, 612, 614, 619, 622, 628, 632, 641, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 664, 666, 670, 671, 672, 673, 674, 676, 677, 679, 682, 690, 699, 727, 785, 796, 799, 800, 807, 808, 820, 822, 826, 843, 858, 859, 860, 864, 872, 873, 874, 879, 899, 961, 976, 979, 980, 983, 987, 988, 990, 993, 997, 1000, 1001, 1003, 1004, 1009, 1012, 1019, 1021, 1023, 1030, 1035, 1038, 1041, 1042, 1043, 1045, 1046], "combinator": 806, "combined_featur": 74, "combsccod": 1044, "comcast": 12, "come": [49, 67, 70, 80, 86, 100, 148, 151, 233, 315, 351, 352, 366, 368, 373, 377, 380, 381, 384, 388, 392, 394, 397, 407, 411, 414, 415, 437, 448, 454, 470, 548, 703, 792, 817, 901, 904, 976, 977, 981, 984, 986, 990, 993, 1002, 1014, 1030, 1041, 1044, 1046], "comedi": 870, "comfort": [55, 414], "command": [232, 366, 367, 378, 380, 384, 386, 388, 397, 415, 506, 1007, 1023, 1032], "comment": [46, 351, 378, 379, 380, 381, 383, 384, 388, 485, 577, 987], "commerc": 1012, "commerci": [411, 1012], "commit": [380, 384, 388, 1011, 1030, 1031, 1032, 1033], "committ": [380, 1030], "commod": 987, "common": [4, 13, 15, 17, 19, 98, 145, 148, 166, 167, 168, 173, 195, 203, 204, 255, 260, 267, 278, 317, 342, 351, 353, 360, 366, 369, 374, 380, 382, 388, 390, 392, 393, 396, 398, 404, 405, 406, 407, 408, 411, 413, 416, 417, 445, 463, 465, 494, 588, 630, 651, 670, 671, 699, 743, 750, 766, 797, 798, 801, 811, 813, 814, 815, 816, 817, 822, 825, 860, 862, 870, 871, 872, 877, 879, 884, 885, 887, 888, 889, 890, 938, 976, 977, 983, 990, 993, 997, 1002, 1003, 1007, 1008, 1009, 1012, 1014, 1025, 1030, 1038, 1040, 1041, 1045], "common_nod": 360, "common_node_id": 360, "common_param": [57, 124, 127, 170, 234, 262, 263, 342], "commonli": [199, 257, 342, 373, 394, 407, 408, 417, 612, 755, 756, 794, 828, 871, 984, 985, 987, 988, 990, 1046], "commun": [235, 373, 379, 385, 388, 394, 407, 414, 536, 538, 545, 690, 708, 871, 977, 984, 990, 997, 1001, 1005, 1007, 1011, 1012, 1038, 1039], "commut": [4, 13], "comp": [19, 85, 86, 98, 105, 302, 329, 351, 352, 353, 375, 1023], "comp_cov": [467, 468, 469, 470, 471, 472, 473, 474], "compact": [148, 175, 305, 366, 377, 839, 840, 1003, 1032], "compani": [199, 217, 407, 1012], "companion": [380, 997], "companioni": 1030, "compar": [4, 5, 9, 13, 19, 20, 24, 25, 27, 34, 36, 37, 39, 40, 41, 43, 47, 49, 52, 54, 55, 57, 58, 61, 64, 67, 68, 71, 72, 73, 74, 80, 81, 84, 86, 87, 91, 92, 98, 102, 104, 110, 111, 112, 114, 116, 120, 121, 122, 124, 126, 127, 128, 130, 132, 135, 136, 139, 148, 155, 163, 164, 166, 169, 170, 171, 172, 177, 179, 181, 183, 187, 188, 194, 196, 199, 200, 202, 203, 205, 207, 209, 213, 216, 217, 218, 220, 221, 224, 227, 230, 233, 236, 238, 239, 240, 241, 243, 247, 248, 253, 255, 257, 258, 259, 261, 263, 265, 267, 269, 271, 272, 274, 276, 278, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 297, 298, 301, 303, 304, 306, 309, 310, 312, 313, 317, 342, 351, 352, 353, 359, 360, 362, 368, 375, 377, 380, 382, 404, 405, 407, 409, 410, 411, 412, 414, 416, 417, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 456, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 488, 494, 500, 502, 510, 512, 520, 522, 526, 529, 535, 537, 539, 543, 544, 549, 550, 559, 560, 561, 562, 563, 569, 629, 637, 642, 643, 651, 653, 655, 656, 661, 664, 666, 674, 675, 682, 693, 703, 710, 713, 728, 735, 740, 783, 795, 796, 801, 810, 822, 825, 832, 841, 845, 848, 852, 856, 857, 859, 860, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 884, 885, 886, 887, 888, 889, 890, 899, 900, 901, 903, 904, 976, 979, 980, 981, 983, 984, 986, 987, 988, 989, 990, 991, 993, 997, 998, 1001, 1002, 1003, 1006, 1007, 1009, 1021, 1022, 1030, 1032, 1037, 1038, 1043], "comparison": [12, 14, 19, 23, 24, 25, 26, 28, 29, 33, 35, 36, 38, 40, 42, 48, 50, 57, 58, 59, 60, 61, 63, 68, 70, 79, 90, 94, 96, 97, 99, 101, 105, 106, 111, 114, 117, 124, 127, 130, 134, 135, 142, 144, 149, 150, 156, 158, 160, 161, 166, 171, 181, 183, 185, 187, 190, 197, 199, 203, 214, 217, 219, 222, 223, 224, 225, 226, 227, 231, 232, 243, 247, 253, 255, 256, 257, 264, 268, 272, 276, 281, 292, 299, 307, 309, 310, 312, 315, 317, 329, 330, 335, 345, 350, 351, 352, 354, 362, 375, 377, 394, 405, 407, 409, 410, 412, 416, 417, 435, 436, 441, 444, 445, 447, 480, 481, 482, 486, 502, 510, 512, 513, 520, 523, 539, 547, 548, 551, 562, 563, 579, 580, 586, 587, 588, 589, 604, 606, 608, 609, 613, 620, 623, 629, 637, 641, 657, 670, 686, 687, 688, 689, 690, 702, 735, 740, 776, 785, 796, 797, 798, 799, 801, 802, 810, 812, 813, 814, 815, 816, 817, 825, 834, 837, 841, 856, 857, 860, 872, 873, 877, 879, 880, 884, 885, 886, 887, 888, 889, 890, 899, 901, 902, 904, 905, 907, 976, 980, 981, 984, 987, 989, 990, 993, 1002, 1009, 1027], "compat": [235, 263, 283, 316, 374, 383, 389, 390, 392, 394, 397, 398, 415, 461, 467, 506, 564, 575, 587, 601, 612, 613, 616, 617, 618, 620, 621, 630, 631, 632, 656, 657, 671, 673, 771, 775, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 843, 844, 859, 864, 872, 873, 911, 912, 915, 950, 984, 987, 990, 992, 1007, 1008, 1012, 1025, 1030, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "compens": [81, 168, 170, 175, 199, 217, 261, 409, 412], "compet": [4, 169], "competit": [4, 124, 351, 414, 642, 990], "compil": [132, 283, 353, 366, 367, 381, 382, 383, 388, 389, 392, 1007, 1030], "compl": 58, "complement": [170, 270, 351, 630, 631, 798, 813, 816, 825, 834, 835, 836, 837, 838, 994, 1010, 1025, 1038], "complementari": [4, 415], "complementnb": [261, 351, 834, 835, 837, 838, 989, 1038, 1042, 1043, 1045], "complementnbcomplementnb": 261, "complet": [4, 37, 38, 39, 44, 49, 50, 52, 58, 62, 86, 127, 130, 143, 145, 148, 166, 171, 172, 205, 227, 228, 235, 238, 243, 258, 310, 312, 315, 352, 362, 375, 380, 384, 385, 388, 392, 408, 411, 412, 414, 415, 439, 443, 447, 450, 460, 461, 462, 465, 493, 534, 535, 536, 537, 542, 544, 556, 567, 568, 579, 585, 586, 587, 589, 625, 626, 627, 628, 643, 647, 655, 669, 671, 702, 703, 713, 714, 715, 726, 728, 733, 734, 754, 783, 792, 827, 830, 833, 842, 858, 859, 860, 861, 922, 972, 976, 981, 983, 987, 988, 990, 1002, 1003, 1009, 1014, 1023, 1030, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "completed_fac": 237, "completeness_scor": [38, 49, 58, 316, 352, 407, 733, 734, 792, 987], "complex": [3, 9, 10, 15, 16, 20, 72, 117, 132, 147, 151, 156, 163, 166, 203, 213, 216, 227, 234, 235, 238, 243, 253, 258, 261, 264, 269, 276, 306, 315, 318, 319, 324, 331, 338, 342, 353, 355, 360, 361, 376, 380, 385, 392, 407, 408, 412, 414, 418, 438, 442, 445, 446, 448, 465, 487, 498, 499, 500, 512, 532, 539, 549, 555, 556, 557, 558, 560, 562, 563, 602, 628, 636, 654, 656, 674, 675, 731, 747, 796, 825, 827, 855, 859, 860, 864, 872, 879, 895, 899, 902, 905, 907, 908, 909, 910, 976, 977, 979, 980, 982, 984, 986, 988, 993, 997, 1000, 1008, 1009, 1010, 1012, 1025, 1031, 1033, 1039, 1040, 1043], "complexity_comput": [7, 10], "complexity_label": [7, 10], "compli": [380, 394, 930, 1008], "complianc": [0, 127], "compliant": [320, 380, 1048], "complic": [27, 235, 299, 386, 417, 692, 990], "compon": [4, 5, 17, 33, 44, 58, 62, 70, 73, 84, 85, 87, 90, 96, 97, 99, 100, 101, 102, 103, 105, 130, 139, 156, 164, 166, 168, 183, 220, 232, 233, 236, 245, 246, 249, 250, 251, 259, 261, 284, 285, 286, 294, 295, 297, 302, 310, 317, 366, 372, 375, 380, 382, 386, 389, 392, 403, 406, 407, 408, 410, 415, 417, 419, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 461, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 500, 502, 513, 519, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 693, 794, 795, 796, 799, 800, 810, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 935, 936, 979, 984, 986, 997, 999, 1002, 1007, 1008, 1009, 1010, 1012, 1017, 1023, 1024, 1025, 1030, 1032, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "component_1": 250, "component_2": 250, "component_indices_": [637, 1043], "components_": [6, 15, 58, 86, 95, 97, 98, 105, 232, 233, 302, 310, 319, 394, 408, 412, 442, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 637, 848, 855, 891, 892, 979, 999, 1019, 1034, 1036, 1042, 1045, 1048], "components_col": 73, "compos": [4, 5, 25, 69, 70, 71, 75, 76, 86, 113, 121, 132, 166, 169, 170, 171, 199, 201, 217, 230, 238, 240, 242, 278, 311, 316, 318, 319, 320, 322, 369, 393, 398, 407, 408, 411, 513, 610, 986, 988, 1009, 1030], "composit": [230, 316, 369, 372, 411, 656, 785, 977, 983, 996, 1025, 1031], "compound": [4, 217, 415, 608, 610, 678, 721, 749, 983, 1023], "compoundkernel": [608, 1044], "comprehens": [342, 415, 755, 756, 985, 1012, 1038], "compress": [3, 11, 16, 17, 48, 66, 166, 278, 305, 375, 407, 412, 415, 416, 650, 670, 690, 829, 872, 958, 961, 973, 983, 997, 1009, 1022, 1030, 1039], "compressed_raccoon_kmean": 53, "compressed_raccoon_uniform": 53, "compris": [70, 124, 258, 351, 352, 353, 375, 392, 412, 414, 513, 803, 984], "compromis": [9, 27, 170, 366, 380, 645, 677, 990, 1033], "comput": [0, 4, 6, 7, 11, 13, 14, 20, 26, 37, 39, 41, 42, 46, 52, 54, 57, 58, 60, 61, 70, 72, 79, 80, 81, 82, 96, 104, 114, 118, 119, 122, 123, 124, 125, 126, 127, 147, 148, 151, 156, 158, 159, 163, 169, 170, 171, 172, 175, 179, 180, 183, 184, 185, 186, 187, 188, 199, 201, 203, 207, 213, 216, 217, 221, 224, 229, 231, 232, 234, 238, 239, 241, 256, 258, 260, 261, 262, 263, 267, 269, 271, 283, 285, 287, 289, 290, 292, 293, 296, 305, 315, 319, 320, 326, 328, 338, 342, 346, 351, 352, 353, 360, 367, 368, 369, 374, 375, 377, 380, 385, 386, 387, 389, 392, 393, 394, 396, 397, 401, 402, 403, 404, 405, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 455, 457, 459, 460, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 514, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 580, 583, 584, 587, 588, 589, 591, 592, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 722, 723, 724, 726, 727, 728, 731, 733, 735, 736, 737, 739, 740, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 789, 790, 791, 793, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 864, 865, 868, 869, 874, 875, 876, 877, 878, 879, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 904, 906, 907, 908, 909, 910, 933, 934, 935, 936, 952, 953, 960, 962, 968, 976, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1012, 1018, 1019, 1022, 1023, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "computation": [14, 78, 95, 117, 123, 132, 151, 283, 342, 351, 365, 381, 392, 406, 407, 408, 411, 412, 414, 417, 536, 630, 631, 669, 760, 796, 798, 799, 800, 810, 822, 983, 984, 986, 994, 995, 999, 1022, 1025, 1034], "compute_class_weight": [394, 1033, 1044], "compute_corrected_ttest": 260, "compute_dist": [439, 443, 1042], "compute_full_tre": [439, 443, 1034], "compute_import": 1032, "compute_inverse_compon": [891, 892, 999], "compute_inverse_transform": 1044, "compute_label": [440, 447], "compute_node_depth": 360, "compute_optics_graph": [453, 454, 1047], "compute_sample_weight": 1044, "compute_scor": [75, 102, 178, 179, 642, 643, 1039], "compute_sourc": 419, "computed_scor": 643, "con": 587, "concat": [4, 163, 168, 188, 217, 872], "concaten": [26, 34, 39, 50, 61, 69, 72, 76, 81, 113, 128, 144, 159, 166, 175, 178, 181, 213, 221, 228, 245, 249, 250, 256, 265, 266, 267, 268, 269, 270, 288, 302, 309, 312, 326, 337, 341, 351, 408, 462, 465, 502, 507, 529, 535, 539, 540, 597, 778, 796, 858, 859, 861, 864, 872, 904, 988, 1009, 1018, 1022, 1031], "concav": [148, 377], "concentr": [7, 9, 65, 92, 100, 111, 130, 156, 164, 166, 225, 244, 246, 251, 252, 271, 293, 307, 327, 376, 380, 414, 441, 517, 794, 986, 993, 1009], "concentrations_prior": 245, "concept": [81, 117, 122, 235, 269, 369, 380, 392, 406, 407, 413, 415, 979, 987, 990, 1003, 1012], "conceptu": [377, 414, 985], "concern": [18, 36, 77, 84, 88, 94, 107, 110, 142, 150, 162, 166, 174, 177, 219, 244, 250, 277, 280, 284, 298, 304, 324, 333, 350, 355, 366, 382, 406, 984, 999], "concis": [27, 199, 380, 385, 1041, 1043], "conclud": [111, 169, 179, 217, 260, 353, 362, 395, 859], "conclus": [4, 100, 169, 171, 199, 201, 260, 262, 362, 414, 1017], "concomit": [647, 983], "concret": [203, 381, 395, 416, 666, 672, 673, 674, 675, 891, 892, 983, 1001, 1007], "concurr": [394, 415, 953, 1042, 1044], "conda": [315, 316, 317, 318, 319, 320, 321, 322, 367, 380, 381, 383, 384, 386, 388, 397, 400, 1003], "conda_prefix": 386, "condarc": 378, "condens": [175, 444], "condit": [4, 12, 13, 25, 27, 82, 119, 124, 129, 166, 167, 169, 173, 188, 201, 204, 217, 235, 239, 263, 318, 360, 386, 392, 396, 404, 405, 407, 409, 412, 414, 416, 449, 462, 469, 470, 471, 476, 494, 511, 521, 522, 534, 537, 538, 539, 541, 543, 545, 547, 548, 560, 625, 630, 631, 641, 648, 649, 650, 652, 653, 654, 668, 670, 671, 672, 673, 680, 681, 685, 695, 710, 715, 716, 733, 734, 792, 834, 835, 836, 837, 838, 857, 860, 863, 872, 873, 876, 880, 936, 959, 981, 983, 984, 985, 987, 989, 990, 992, 997, 1003, 1007, 1009, 1021, 1025, 1031, 1033, 1034, 1035, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1048], "condition": [12, 27, 199, 405, 409, 755, 981], "condition2": 132, "conduct": [168, 260, 417, 1011, 1044], "conf": [7, 27, 384, 405, 411, 834, 989, 1044], "confer": [260, 375, 407, 412, 418, 437, 442, 448, 509, 533, 561, 694, 706, 723, 753, 855, 856, 857, 987, 993, 999, 1003], "confid": [13, 24, 25, 26, 27, 127, 156, 158, 246, 260, 263, 328, 395, 405, 417, 634, 656, 657, 664, 666, 669, 672, 673, 674, 696, 700, 705, 718, 723, 724, 736, 737, 753, 786, 827, 866, 899, 901, 904, 983, 986, 987, 988, 993, 1000, 1001, 1002, 1012, 1023, 1040], "config": [13, 367, 378, 380, 381, 388, 624, 1038], "config_context": [242, 366, 367, 403, 624, 897, 1037, 1043, 1046], "configur": [7, 10, 27, 71, 72, 170, 235, 240, 242, 312, 351, 365, 378, 380, 382, 386, 388, 392, 394, 397, 398, 403, 406, 408, 415, 416, 431, 440, 441, 443, 445, 447, 450, 460, 462, 466, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 624, 625, 626, 627, 628, 630, 633, 636, 637, 638, 639, 640, 686, 687, 688, 689, 690, 692, 693, 785, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 953, 954, 955, 984, 987, 997, 1002, 1007, 1023, 1025, 1034, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047], "confirm": [4, 13, 86, 114, 121, 124, 127, 171, 199, 201, 263, 266, 269, 310, 353, 384, 976, 997, 1038], "conflict": [378, 380, 384, 388, 397, 1037, 1038], "conform": [13, 579, 626, 827, 828, 987, 1007, 1008, 1037, 1043], "confound": [168, 169], "confus": [32, 166, 229, 253, 269, 276, 325, 326, 351, 394, 466, 502, 629, 650, 695, 711, 713, 716, 726, 727, 735, 751, 781, 784, 825, 897, 904, 1009, 1023, 1030, 1031, 1035, 1039, 1040, 1042, 1043, 1044, 1045], "confusingli": 378, "confusion_matrix": [32, 229, 254, 325, 326, 695, 711, 751, 822, 987, 1023, 1031, 1036, 1037, 1040, 1041, 1043, 1047], "confusion_matrix_scor": 987, "confusionmatrixdisplai": [6, 32, 254, 318, 325, 351, 629, 716, 987, 1019, 1040, 1041, 1043, 1044, 1045], "congruenc": [652, 653, 654, 680, 681], "conjug": [260, 450, 460, 670, 672, 685, 693, 983], "conjunct": [398, 407, 592, 802, 818, 820, 821, 822, 823, 826, 954, 977, 983, 1045], "connect": [12, 39, 44, 47, 51, 54, 62, 66, 67, 378, 380, 389, 394, 409, 439, 443, 450, 460, 461, 583, 584, 693, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 985, 990, 992, 1000, 1011, 1034, 1043, 1047], "connected_compon": 1037, "connectionist": [856, 857], "conner": 1043, "connor": [1038, 1043, 1047], "connossor": [1038, 1039], "conocophillip": 12, "conort": 1012, "conquer": 936, "conrad": [1030, 1031, 1045], "conroi": 1045, "consecut": [111, 122, 200, 392, 405, 411, 415, 441, 445, 447, 448, 450, 454, 457, 460, 535, 536, 537, 544, 600, 643, 664, 665, 666, 674, 675, 676, 794, 795, 801, 834, 835, 836, 837, 838, 856, 857, 976, 997, 1023, 1038], "consensu": [20, 21, 37, 379, 380, 395, 404, 407, 647, 669, 676, 677, 717, 987], "consensus_scor": [20, 21, 404, 1032], "consequ": [57, 102, 217, 260, 261, 305, 335, 362, 405, 412, 414, 559, 560, 564, 653, 654, 977, 983, 987, 995, 1003, 1039, 1041, 1046], "conserv": [11, 394, 580, 587, 891, 892, 986, 999], "consid": [0, 4, 12, 13, 14, 20, 25, 39, 55, 66, 71, 81, 90, 95, 99, 121, 124, 143, 147, 148, 164, 170, 199, 201, 235, 260, 263, 267, 271, 283, 286, 289, 290, 305, 317, 335, 342, 343, 346, 351, 362, 366, 367, 368, 372, 379, 380, 382, 386, 388, 392, 394, 395, 398, 403, 407, 412, 413, 414, 415, 416, 417, 418, 419, 436, 442, 444, 448, 455, 472, 506, 507, 519, 531, 539, 547, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 583, 584, 586, 587, 589, 591, 605, 606, 618, 629, 630, 631, 644, 650, 656, 657, 658, 660, 669, 677, 686, 687, 688, 690, 691, 692, 694, 698, 700, 703, 705, 707, 713, 723, 727, 731, 753, 783, 785, 791, 841, 842, 843, 845, 847, 849, 850, 851, 854, 856, 857, 862, 872, 873, 880, 894, 895, 904, 905, 907, 908, 909, 910, 971, 976, 982, 983, 984, 985, 987, 988, 990, 993, 994, 995, 997, 1001, 1002, 1003, 1008, 1014, 1021, 1033, 1034, 1038, 1042, 1043, 1045, 1046, 1047], "consider": [126, 127, 152, 155, 238, 255, 261, 267, 380, 417, 617, 796, 810, 976, 983, 989, 993, 1001, 1012, 1047], "consist": [4, 7, 26, 32, 37, 56, 57, 70, 80, 90, 92, 95, 117, 121, 127, 128, 135, 148, 154, 156, 159, 164, 172, 199, 217, 234, 238, 266, 269, 301, 310, 315, 318, 346, 352, 362, 366, 373, 375, 377, 380, 382, 386, 387, 388, 389, 393, 394, 395, 405, 407, 409, 413, 414, 415, 425, 426, 429, 430, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 488, 495, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 589, 609, 625, 626, 627, 628, 633, 636, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 672, 675, 676, 677, 685, 686, 687, 688, 689, 698, 732, 794, 795, 803, 827, 828, 829, 831, 832, 833, 834, 842, 843, 845, 847, 850, 851, 857, 862, 863, 864, 866, 870, 871, 874, 875, 877, 878, 880, 891, 892, 895, 899, 900, 902, 903, 905, 908, 910, 919, 921, 942, 958, 961, 976, 979, 980, 981, 983, 984, 986, 987, 988, 990, 991, 997, 1000, 1002, 1003, 1006, 1008, 1012, 1014, 1021, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "consol": [120, 378, 1015], "consolid": [394, 395, 1030], "consolidate_scor": 13, "consortium": [0, 1012], "constant": [4, 104, 114, 127, 154, 158, 164, 169, 187, 200, 201, 203, 217, 230, 235, 240, 263, 295, 300, 302, 306, 308, 316, 346, 348, 362, 372, 382, 389, 394, 404, 414, 417, 430, 444, 463, 480, 481, 482, 509, 511, 532, 536, 538, 545, 547, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 588, 604, 607, 609, 611, 625, 628, 630, 631, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 674, 675, 676, 677, 678, 685, 687, 691, 693, 719, 720, 721, 725, 729, 772, 774, 782, 832, 833, 842, 850, 856, 857, 864, 875, 878, 887, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 979, 981, 983, 984, 987, 989, 990, 997, 1001, 1003, 1025, 1033, 1038, 1040, 1042, 1043, 1044, 1046], "constant_": 550, "constant_valu": [417, 611, 615], "constant_value_bound": [417, 609, 611, 615], "constantini": 1046, "constantkernel": [154, 160, 417, 609, 615, 619, 622], "constantli": [37, 199, 1012], "constitu": 377, "constitut": [50, 394, 411, 414, 448, 454, 586, 587, 589, 991], "constrain": [47, 95, 121, 127, 129, 170, 190, 299, 316, 322, 336, 338, 373, 394, 406, 407, 412, 414, 507, 559, 560, 633, 656, 657, 688, 692, 824, 983, 986, 1034], "constrained_layout": [95, 170, 220, 311, 312, 320], "constraint": [55, 57, 67, 95, 110, 136, 166, 194, 203, 238, 239, 255, 300, 301, 302, 316, 380, 392, 412, 415, 485, 506, 507, 555, 556, 559, 560, 562, 563, 630, 633, 814, 815, 907, 908, 909, 910, 956, 976, 978, 983, 984, 1001, 1009, 1034, 1037, 1038, 1041, 1043, 1045, 1047], "constru": 415, "construct": [4, 11, 70, 72, 111, 113, 115, 119, 132, 148, 217, 229, 235, 240, 242, 296, 306, 308, 316, 319, 374, 377, 382, 389, 394, 407, 408, 411, 412, 414, 415, 418, 432, 439, 440, 442, 443, 448, 450, 455, 461, 463, 465, 517, 533, 539, 542, 553, 554, 579, 585, 637, 686, 688, 689, 810, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 858, 859, 860, 861, 863, 904, 918, 920, 935, 936, 945, 946, 950, 976, 977, 979, 983, 984, 987, 988, 990, 997, 1000, 1002, 1003, 1008, 1014, 1018, 1035, 1037, 1038, 1041, 1044], "construct_grid": [11, 296], "constructor": [72, 231, 367, 382, 394, 406, 408, 415, 462, 465, 547, 548, 553, 565, 566, 567, 568, 579, 580, 586, 587, 595, 666, 674, 675, 841, 842, 843, 845, 846, 847, 849, 850, 851, 858, 859, 860, 861, 955, 976, 988, 997, 1002, 1008, 1014, 1030, 1031, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "consult": 987, "consum": [95, 362, 374, 382, 394, 398, 407, 411, 414, 447, 799, 800, 859, 860, 943, 944, 983, 1012, 1035, 1047], "consumpt": [8, 366, 394, 407, 532, 555, 556, 562, 563, 796, 810, 820, 821, 822, 907, 908, 909, 910, 953, 1014, 1030, 1032, 1036, 1038, 1039, 1044], "contact": [309, 392, 1007], "contain": [10, 19, 24, 27, 33, 40, 49, 56, 58, 70, 71, 113, 115, 119, 127, 128, 157, 169, 170, 172, 175, 190, 203, 217, 228, 235, 238, 239, 242, 250, 258, 260, 266, 269, 270, 281, 289, 290, 292, 305, 318, 326, 329, 351, 352, 373, 374, 375, 377, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 401, 403, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 421, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 500, 501, 502, 506, 507, 508, 512, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 689, 690, 694, 695, 696, 698, 699, 700, 707, 710, 732, 733, 734, 769, 776, 777, 785, 791, 794, 795, 796, 799, 800, 802, 810, 814, 815, 818, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 919, 920, 939, 940, 942, 943, 950, 954, 956, 976, 977, 979, 985, 988, 991, 993, 995, 997, 998, 1000, 1003, 1007, 1011, 1014, 1023, 1030, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "container_fold": 501, "container_path": 501, "contamin": [9, 80, 81, 228, 238, 289, 290, 467, 561, 845, 993, 1038, 1046, 1047], "content": [17, 310, 351, 353, 375, 380, 384, 386, 401, 406, 415, 484, 501, 506, 507, 586, 587, 589, 669, 913, 996, 1012, 1023, 1031, 1040], "context": [58, 242, 283, 366, 367, 374, 379, 381, 393, 394, 407, 408, 413, 414, 415, 417, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 466, 470, 529, 533, 534, 535, 537, 540, 541, 542, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 624, 625, 628, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 845, 847, 849, 850, 852, 853, 858, 861, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 955, 977, 983, 987, 993, 997, 1001, 1008, 1011, 1012, 1021, 1030, 1037, 1038, 1043, 1046], "contigu": [4, 21, 382, 392, 404, 411, 415, 441, 445, 447, 457, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 778, 815, 839, 840, 899, 901, 902, 903, 904, 905, 1002, 1033, 1040, 1044, 1048], "contin": [413, 712, 997], "conting": [712, 713, 728, 752, 1036], "contingency_matrix": [407, 752, 1038], "continu": [0, 13, 17, 19, 42, 75, 92, 121, 151, 166, 170, 179, 200, 207, 217, 221, 224, 238, 239, 241, 246, 250, 251, 293, 301, 304, 310, 311, 313, 317, 318, 358, 360, 367, 375, 378, 382, 383, 384, 385, 388, 392, 394, 395, 397, 407, 412, 414, 466, 490, 590, 593, 594, 597, 598, 605, 606, 607, 630, 644, 645, 650, 651, 655, 658, 659, 660, 661, 723, 739, 753, 808, 810, 862, 864, 866, 868, 869, 878, 879, 880, 896, 897, 908, 950, 976, 983, 984, 987, 988, 990, 991, 997, 1003, 1008, 1009, 1012, 1014, 1021, 1027, 1030, 1032, 1033, 1038, 1043, 1044, 1045, 1047], "continuous_featur": 385, "contour": [9, 11, 34, 46, 47, 80, 120, 140, 148, 154, 155, 157, 210, 211, 212, 213, 228, 233, 249, 289, 296, 336, 337, 339, 340, 342, 343, 344, 377, 387, 629, 630, 993, 1001], "contour_kw": 630, "contourf": [11, 120, 213, 233, 289, 296, 299, 307, 308, 330, 337, 343, 348, 629, 630], "contours_": [387, 630], "contract": [199, 217, 342, 367, 394, 1008], "contradict": [172, 1008], "contrari": [4, 14, 169, 221, 225, 238, 245, 263, 305, 351, 374, 407, 494, 542, 604, 813, 880, 983, 989, 993], "contrast": [103, 170, 201, 234, 238, 260, 262, 292, 310, 352, 394, 405, 407, 410, 414, 417, 447, 450, 460, 617, 641, 810, 855, 977, 980, 982, 983, 987, 990, 992, 995, 997, 1000, 1001, 1003, 1040], "contrib": [321, 380, 382, 388, 392, 394, 407, 444, 1007, 1008, 1046], "contribut": [0, 14, 20, 125, 156, 183, 203, 269, 310, 369, 377, 378, 382, 383, 384, 388, 394, 395, 397, 412, 413, 414, 445, 447, 551, 552, 557, 558, 723, 726, 753, 981, 987, 990, 995, 1002, 1005, 1007, 1008, 1011, 1012, 1021, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "contributor": [367, 383, 384, 385, 388, 392, 394, 987, 1005, 1008, 1031, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "control": [12, 34, 61, 99, 100, 117, 138, 156, 158, 183, 200, 203, 207, 231, 232, 261, 263, 278, 285, 302, 316, 318, 342, 356, 358, 359, 366, 367, 373, 376, 380, 382, 385, 388, 392, 394, 397, 401, 406, 407, 410, 411, 412, 413, 416, 417, 432, 438, 447, 452, 469, 470, 476, 529, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 591, 592, 594, 612, 617, 623, 625, 630, 632, 637, 639, 640, 644, 645, 647, 648, 649, 650, 652, 653, 654, 670, 672, 674, 675, 680, 681, 685, 690, 699, 707, 794, 795, 796, 798, 799, 800, 801, 802, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 825, 826, 829, 830, 833, 856, 857, 878, 880, 891, 892, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 913, 953, 955, 974, 976, 983, 984, 986, 987, 988, 990, 993, 994, 997, 999, 1001, 1002, 1003, 1007, 1008, 1010, 1021, 1025, 1030, 1032, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "convei": [31, 225, 307, 1021], "conveni": [55, 203, 238, 372, 388, 392, 408, 411, 415, 417, 422, 441, 445, 447, 449, 451, 462, 487, 609, 674, 676, 697, 725, 782, 858, 859, 961, 977, 979, 983, 984, 994, 1012, 1023, 1030], "convent": [109, 127, 260, 369, 380, 382, 383, 384, 386, 394, 403, 425, 426, 429, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 467, 468, 469, 470, 471, 472, 473, 474, 506, 507, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 545, 561, 564, 567, 568, 579, 580, 581, 586, 587, 589, 625, 626, 627, 628, 675, 686, 687, 688, 689, 716, 794, 795, 827, 828, 843, 845, 847, 851, 863, 871, 874, 875, 877, 880, 891, 892, 903, 930, 931, 987, 1015, 1030, 1037, 1038, 1041, 1043, 1044, 1046, 1047], "convention": [336, 394, 895], "converg": [17, 57, 61, 78, 79, 122, 124, 127, 151, 157, 160, 192, 201, 207, 215, 246, 248, 300, 301, 305, 310, 326, 368, 389, 394, 404, 407, 412, 415, 417, 419, 438, 441, 444, 445, 446, 447, 450, 452, 457, 458, 459, 460, 469, 470, 476, 480, 481, 482, 531, 533, 534, 535, 536, 537, 544, 551, 569, 608, 642, 643, 644, 645, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 666, 670, 672, 674, 676, 680, 681, 685, 686, 688, 689, 692, 693, 794, 795, 848, 856, 857, 894, 895, 901, 977, 982, 983, 984, 986, 991, 1001, 1030, 1033, 1034, 1035, 1037, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "converged_": [794, 795, 1048], "convergence_it": [438, 452], "convergencewarn": [155, 157, 159, 160, 207, 214, 246, 300, 301, 307, 389, 394, 794, 795, 1038, 1039, 1042], "convers": [17, 124, 190, 351, 362, 368, 374, 380, 382, 388, 392, 394, 401, 415, 570, 854, 863, 871, 919, 920, 973, 984, 1008, 1012, 1038, 1039, 1040, 1043, 1046], "convert": [13, 17, 34, 46, 48, 66, 71, 98, 156, 172, 199, 220, 238, 241, 246, 247, 250, 251, 296, 366, 374, 375, 389, 392, 394, 401, 415, 438, 441, 442, 445, 447, 448, 449, 450, 457, 462, 463, 494, 532, 539, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 579, 580, 586, 587, 588, 589, 591, 592, 604, 625, 626, 627, 628, 644, 650, 656, 657, 658, 660, 664, 665, 666, 668, 672, 674, 675, 676, 690, 775, 854, 863, 864, 866, 870, 872, 873, 874, 876, 899, 907, 908, 909, 910, 917, 919, 920, 942, 972, 973, 976, 983, 984, 985, 987, 997, 998, 1002, 1003, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1045, 1046, 1047], "convex": [79, 104, 123, 124, 166, 177, 206, 218, 220, 347, 352, 407, 409, 412, 420, 444, 450, 460, 471, 473, 474, 477, 478, 479, 656, 674, 690, 983, 984, 990, 991, 1001, 1009, 1043], "convinc": 169, "convolut": [6, 159, 1019], "convolv": 302, "coo": [394, 551, 552, 690, 866, 915, 919, 920, 990, 1031, 1047], "coo_matrix": [14, 185, 450, 583, 584, 958, 961], "cook": [377, 492, 1030, 1036], "cookbook": [417, 620, 621], "cool": [415, 1030], "coolwarm": [255, 335], "cooman": 377, "coordin": [11, 12, 14, 54, 100, 131, 155, 184, 220, 261, 296, 366, 375, 412, 417, 441, 445, 446, 447, 459, 469, 470, 476, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 548, 612, 644, 645, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 679, 680, 681, 682, 686, 687, 688, 691, 692, 704, 761, 766, 899, 983, 984, 1002, 1021, 1030, 1033, 1034, 1035, 1039, 1041, 1043, 1044, 1045], "cop": 12, "cope": [228, 368, 375, 983], "copeland": [1038, 1039], "copi": [5, 12, 17, 44, 62, 75, 98, 114, 127, 148, 163, 164, 169, 170, 171, 185, 192, 205, 215, 217, 221, 283, 325, 326, 328, 330, 352, 357, 367, 377, 380, 382, 384, 385, 386, 392, 394, 432, 435, 438, 440, 441, 442, 444, 445, 447, 452, 457, 480, 481, 482, 483, 498, 500, 508, 530, 531, 532, 533, 539, 546, 551, 552, 557, 559, 560, 570, 588, 595, 605, 606, 608, 609, 626, 628, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 669, 670, 672, 677, 679, 682, 683, 684, 729, 766, 789, 796, 810, 839, 840, 854, 862, 865, 868, 869, 870, 871, 875, 876, 877, 879, 882, 884, 885, 886, 887, 888, 889, 890, 894, 895, 899, 901, 902, 903, 904, 905, 914, 917, 919, 920, 946, 958, 960, 961, 997, 1002, 1003, 1008, 1015, 1018, 1023, 1030, 1033, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "copy_": 1030, "copy_cov": 546, "copy_gram": [680, 681, 684], "copy_x": [441, 445, 457, 533, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 670, 672, 677, 679, 680, 681, 682, 683, 1032, 1038, 1039], "copy_x_train": [608, 609], "copy_xi": 684, "copybutton": [380, 397, 400], "copyright": [17, 82], "corani": 260, "cordier": 1037, "core": [3, 10, 16, 49, 55, 56, 65, 71, 109, 111, 117, 119, 120, 159, 166, 169, 170, 235, 320, 365, 367, 369, 380, 383, 388, 394, 397, 407, 412, 414, 415, 418, 442, 444, 447, 448, 453, 455, 494, 497, 536, 587, 592, 656, 657, 664, 666, 674, 834, 835, 836, 837, 838, 843, 851, 983, 990, 993, 1002, 1005, 1008, 1009, 1010, 1012, 1021, 1023, 1025, 1032, 1034, 1035, 1037, 1040, 1044, 1045, 1046], "core_dist": [65, 453, 454, 455], "core_distances_": [65, 448, 453, 455], "core_sampl": 418, "core_sample_indices_": [49, 442], "core_samples_mask": 49, "corei": [1031, 1038, 1039], "corentin": 1044, "cori": 1035, "corneil": 1043, "corner": [11, 14, 26, 53, 168, 257, 261, 269, 270, 296, 322, 375, 380, 496, 911, 913, 987, 1044], "cornerston": 1012, "cornflowerblu": [131, 193, 202, 209, 246, 248, 251, 267, 269, 288, 294, 358, 359], "corollari": 382, "corona": 1043, "corpora": 412, "corpu": [15, 352, 353, 375, 412, 586, 587, 588, 589, 1023, 1031], "corr": [85, 172, 260], "corrcoef": [85, 105], "correct": [13, 26, 27, 57, 81, 111, 122, 159, 169, 183, 188, 199, 217, 245, 254, 260, 267, 269, 278, 281, 338, 340, 351, 362, 377, 380, 382, 384, 395, 405, 406, 407, 411, 412, 414, 415, 424, 430, 448, 454, 467, 472, 486, 499, 501, 633, 665, 674, 676, 701, 702, 706, 710, 711, 716, 719, 720, 721, 725, 726, 727, 731, 735, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 780, 781, 782, 784, 787, 788, 791, 793, 827, 828, 829, 836, 844, 870, 972, 983, 987, 988, 1002, 1014, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "correct_covari": [467, 472], "corrected_std": 260, "corrected_var": 260, "correctli": [143, 147, 199, 217, 235, 267, 269, 274, 293, 312, 327, 338, 380, 389, 412, 414, 424, 435, 467, 491, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 608, 656, 664, 666, 672, 673, 674, 701, 791, 793, 827, 828, 829, 830, 834, 835, 836, 837, 838, 841, 846, 849, 856, 879, 894, 895, 899, 901, 902, 903, 904, 905, 907, 909, 937, 984, 987, 990, 991, 997, 1002, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "correl": [12, 27, 82, 85, 86, 105, 118, 119, 127, 129, 144, 147, 148, 156, 166, 167, 168, 170, 171, 173, 183, 188, 194, 217, 260, 266, 281, 311, 316, 317, 328, 373, 376, 377, 385, 394, 396, 404, 409, 411, 416, 448, 455, 480, 481, 483, 491, 492, 498, 522, 562, 604, 607, 625, 632, 633, 634, 680, 681, 740, 754, 775, 776, 777, 825, 839, 840, 876, 877, 879, 888, 978, 983, 988, 994, 997, 1001, 1003, 1008, 1009, 1010, 1025, 1030, 1031, 1032, 1043, 1044], "correlation_coeffici": 607, "correlation_model": 1037, "correspond": [11, 13, 14, 20, 26, 27, 32, 41, 53, 65, 78, 82, 97, 111, 114, 117, 118, 120, 128, 144, 147, 148, 152, 157, 160, 169, 188, 191, 199, 200, 203, 208, 217, 229, 234, 235, 242, 250, 259, 261, 263, 264, 269, 270, 296, 310, 317, 318, 319, 352, 356, 357, 362, 367, 374, 375, 376, 379, 380, 382, 384, 387, 388, 393, 394, 395, 404, 405, 407, 409, 410, 411, 412, 414, 415, 416, 417, 422, 428, 435, 437, 439, 443, 446, 449, 451, 457, 459, 461, 462, 470, 480, 481, 482, 488, 489, 490, 491, 492, 493, 494, 532, 539, 542, 543, 544, 547, 548, 550, 553, 555, 557, 558, 559, 562, 580, 582, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 615, 628, 630, 631, 633, 641, 644, 645, 646, 650, 656, 657, 658, 659, 660, 666, 667, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 685, 688, 689, 690, 692, 701, 708, 711, 721, 722, 731, 735, 739, 749, 751, 771, 775, 779, 785, 786, 791, 793, 794, 795, 796, 799, 800, 802, 810, 818, 820, 828, 830, 831, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 848, 856, 857, 866, 869, 870, 872, 873, 876, 880, 888, 899, 900, 901, 904, 907, 908, 909, 910, 924, 930, 944, 947, 962, 976, 977, 979, 980, 981, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 997, 998, 1001, 1002, 1006, 1014, 1020, 1023, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "correspondingli": 1047, "corri": 1041, "corrobor": 392, "corrupt": [5, 102, 183, 205, 216, 392, 855, 983, 995], "cort": [1041, 1042, 1045, 1046], "cortex": 412, "cos_transform": 4, "cosin": [4, 40, 274, 283, 288, 372, 375, 394, 407, 412, 413, 439, 443, 448, 455, 533, 588, 589, 618, 694, 757, 758, 759, 762, 767, 768, 771, 775, 776, 777, 839, 840, 844, 871, 990, 1003, 1025, 1040], "cosine_dist": [694, 759, 990, 1036], "cosine_similar": [342, 757, 762, 985, 1035], "cosinesimil": 283, "cosmo": 19, "cost": [4, 39, 98, 117, 127, 151, 166, 175, 220, 233, 262, 269, 315, 338, 352, 353, 355, 360, 361, 380, 386, 388, 392, 407, 414, 476, 498, 535, 536, 537, 544, 555, 556, 557, 558, 562, 563, 600, 608, 617, 625, 644, 645, 650, 651, 658, 659, 660, 661, 666, 670, 672, 674, 676, 685, 686, 690, 825, 899, 900, 901, 904, 907, 908, 909, 910, 936, 979, 983, 984, 987, 990, 1000, 1001, 1002, 1009, 1010, 1025, 1036, 1039, 1040], "cost_complexity_pruning_path": [356, 907, 908, 909, 910], "costa": [1038, 1043], "costin": 1030, "costli": [72, 78, 118, 163, 261, 347, 367, 381, 386, 407, 441, 625, 804, 806, 891, 892, 936, 987, 990, 999, 1008], "costlier": 669, "costs_": [469, 470, 1046], "could": [0, 4, 9, 13, 14, 27, 37, 42, 53, 71, 72, 95, 98, 112, 113, 121, 124, 127, 145, 151, 156, 164, 168, 169, 170, 199, 200, 203, 208, 217, 224, 233, 234, 235, 254, 260, 281, 291, 294, 318, 334, 335, 351, 356, 368, 380, 386, 388, 394, 397, 401, 405, 411, 414, 415, 419, 472, 531, 536, 605, 606, 627, 669, 798, 803, 805, 976, 977, 983, 984, 994, 995, 997, 1002, 1008, 1022, 1027, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "couldn": [1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "count": [4, 13, 15, 25, 27, 41, 49, 53, 70, 71, 92, 133, 134, 169, 170, 199, 201, 217, 232, 242, 269, 278, 283, 316, 317, 352, 353, 360, 375, 377, 384, 389, 394, 395, 405, 406, 407, 412, 414, 415, 444, 447, 487, 494, 534, 542, 579, 586, 587, 588, 589, 592, 602, 615, 638, 695, 703, 713, 716, 726, 727, 735, 751, 780, 781, 783, 784, 834, 838, 839, 840, 848, 851, 862, 911, 913, 938, 952, 976, 979, 983, 987, 989, 990, 997, 1003, 1012, 1023, 1030, 1033, 1035, 1038, 1039, 1041, 1042], "count_nonzero": [7, 10, 366], "count_onli": [839, 840], "count_vect": 1023, "counter": [19, 111, 267, 407, 674, 675, 676, 1043], "counterpart": [378, 976, 984, 1002, 1018], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 13, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 13, "countri": [311, 322, 494, 984], "counts_": 1042, "countvector": [15, 329, 353, 375, 385, 408, 412, 415, 462, 487, 534, 580, 587, 588, 589, 1023, 1030, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043], "coupl": [15, 52, 53, 55, 221, 374, 375, 404, 405, 407, 416, 587, 905, 976, 1002], "cournapeau": [0, 2, 1030, 1033], "cours": [8, 9, 175, 366, 380, 382, 412, 415, 416, 977, 982, 983, 1012], "coursecentr": [407, 440], "courtesi": 380, "couvreur": [1039, 1040], "cov": [34, 82, 86, 113, 250, 380, 394, 397, 400, 410, 420, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 517, 530, 532, 539, 546], "cov_": [11, 82], "cov_class_1": 34, "cov_class_2": 34, "cov_init": 1046, "cov_test": 11, "cov_train": 11, "cov_typ": [247, 489], "covar": [245, 246, 251], "covari": [9, 12, 29, 33, 35, 79, 83, 85, 102, 105, 126, 128, 151, 158, 202, 228, 244, 246, 248, 249, 250, 251, 252, 267, 294, 322, 369, 389, 394, 398, 407, 410, 412, 417, 480, 481, 482, 483, 502, 513, 517, 525, 530, 532, 539, 546, 547, 548, 561, 608, 609, 611, 620, 621, 629, 642, 643, 648, 652, 654, 680, 681, 684, 687, 691, 794, 795, 796, 815, 986, 993, 997, 1009, 1010, 1024, 1025, 1030, 1032, 1033, 1034, 1035, 1037, 1039], "covariance_": [12, 34, 80, 82, 467, 468, 469, 470, 471, 472, 473, 474, 547, 548, 981, 1037], "covariance_correct": [467, 472], "covariance_eigh": [539, 1048], "covariance_estim": [33, 547, 981, 1042], "covariance_prior": [251, 794], "covariance_prior_": 794, "covariance_reweight": [467, 472], "covariance_typ": [44, 246, 247, 249, 250, 251, 794, 795, 1046], "covariances_": [245, 246, 247, 250, 251, 794, 795, 1037], "cover": [0, 52, 175, 199, 217, 362, 372, 375, 380, 393, 633, 718, 791, 987, 988, 1006], "coverag": [11, 13, 124, 127, 199, 217, 296, 375, 383, 403, 496, 625, 718], "coverage_error": [987, 1034, 1044], "coverage_fract": 124, "coverages_land": 11, "covertyp": [373, 489, 1025], "covtyp": 175, "cow": 1031, "cowlei": 1040, "cowton": 1044, "cox": [305, 309, 875, 887, 997, 1038, 1046], "cp": 1023, "cpickl": 1023, "cpo": [148, 377], "cpp": 386, "cppflag": 378, "cpu": [0, 61, 261, 283, 320, 366, 367, 386, 394, 397, 403, 415, 494, 630, 645, 649, 651, 653, 656, 657, 659, 661, 663, 664, 666, 674, 677, 796, 810, 820, 821, 822, 843, 851, 892, 955, 987, 1014, 1018, 1023, 1035, 1044, 1045, 1047], "cpu_count": [42, 117, 283, 955], "cpython": [380, 381, 386, 1045], "craft": [369, 383], "craig": [999, 1033, 1038], "crall": [1037, 1043], "crammer": [664, 665, 732, 983, 987, 1002], "crammer06a": [664, 665], "crammer_sing": [899, 988, 1002, 1030], "cranenburgh": 1034, "crash": [12, 380, 466, 889, 890, 897, 997, 1034, 1038, 1046, 1047], "crawl": [519, 928], "craze": 1037, "crc": 983, "creat": [4, 5, 8, 11, 20, 21, 26, 27, 30, 32, 34, 37, 39, 41, 43, 44, 46, 49, 52, 58, 60, 62, 71, 72, 80, 86, 90, 97, 100, 113, 116, 120, 121, 122, 124, 128, 131, 146, 147, 151, 153, 156, 157, 158, 160, 164, 168, 170, 178, 180, 182, 185, 195, 200, 201, 211, 212, 222, 233, 235, 238, 239, 241, 250, 255, 256, 258, 260, 270, 291, 293, 294, 307, 309, 310, 315, 318, 319, 330, 334, 335, 339, 340, 343, 346, 347, 348, 353, 356, 358, 359, 362, 367, 375, 376, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 393, 394, 397, 405, 407, 408, 411, 413, 414, 415, 417, 436, 449, 451, 463, 464, 497, 513, 514, 515, 516, 544, 551, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 586, 587, 589, 595, 626, 628, 629, 630, 631, 695, 696, 698, 699, 700, 779, 786, 796, 798, 802, 806, 810, 814, 818, 820, 821, 829, 860, 872, 901, 904, 907, 908, 909, 910, 914, 917, 939, 940, 946, 955, 960, 972, 977, 983, 986, 987, 988, 990, 994, 997, 998, 999, 1001, 1002, 1003, 1007, 1008, 1012, 1019, 1021, 1022, 1027, 1030, 1031, 1033, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "create_ax": 305, "create_species_bunch": 11, "createindex": 283, "creation": [382, 509, 510, 511, 513, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 654, 839, 840, 1012, 1037, 1038, 1039, 1043], "creativ": 374, "creator": [148, 374, 377], "cred_int_df": 260, "cred_interv": 260, "credibl": 260, "credit": [375, 388, 414, 983, 1012], "creighton": 320, "crfsuit": 1007, "crispinlogan": [1042, 1045, 1046], "cristian": 640, "cristina": 1042, "criteria": [57, 117, 166, 177, 188, 207, 218, 250, 260, 388, 407, 416, 464, 480, 481, 482, 499, 555, 556, 557, 558, 562, 563, 644, 650, 654, 656, 657, 669, 690, 860, 879, 899, 900, 907, 908, 909, 910, 977, 986, 991, 1001, 1009, 1022, 1033, 1038, 1041], "criterion": [27, 78, 79, 172, 187, 207, 250, 272, 316, 382, 389, 394, 407, 412, 439, 443, 447, 450, 457, 460, 530, 535, 537, 544, 551, 552, 555, 556, 557, 558, 562, 563, 564, 604, 625, 642, 643, 646, 654, 664, 665, 666, 667, 669, 670, 672, 674, 675, 676, 678, 689, 693, 708, 795, 896, 901, 902, 903, 904, 905, 907, 908, 909, 910, 983, 986, 987, 995, 1000, 1003, 1010, 1022, 1025, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047], "criterion_": [187, 188, 654], "critic": [374, 380, 393, 401, 414, 690, 984, 987, 995, 1002, 1012, 1041], "crockett": 1045, "crombach": 1032, "crop": [388, 1045], "cross": [13, 14, 27, 34, 54, 57, 58, 71, 72, 74, 75, 78, 82, 86, 87, 91, 92, 102, 117, 120, 121, 123, 124, 127, 137, 141, 142, 145, 146, 148, 149, 169, 170, 177, 181, 183, 185, 186, 187, 193, 199, 201, 207, 217, 218, 229, 236, 241, 247, 248, 250, 253, 257, 260, 261, 262, 264, 266, 267, 268, 269, 272, 273, 274, 276, 278, 287, 302, 304, 306, 311, 313, 315, 317, 322, 328, 338, 346, 369, 375, 380, 382, 389, 392, 393, 394, 401, 402, 405, 408, 409, 412, 414, 415, 416, 417, 435, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 491, 499, 500, 502, 513, 539, 565, 566, 573, 591, 592, 595, 600, 604, 607, 640, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 699, 700, 704, 711, 725, 738, 782, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 833, 859, 860, 864, 879, 880, 897, 899, 901, 904, 942, 986, 987, 990, 991, 995, 997, 1002, 1003, 1007, 1008, 1009, 1010, 1012, 1014, 1017, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "cross_decomposit": [84, 85, 86, 87, 166, 236, 369, 988, 1009, 1034, 1035, 1037, 1038, 1039], "cross_val": 1030, "cross_val_predict": [132, 256, 315, 398, 405, 411, 414, 435, 565, 566, 821, 822, 1034, 1035, 1036, 1037, 1039, 1041, 1043, 1047], "cross_val_scor": [13, 102, 163, 164, 166, 253, 256, 265, 271, 274, 276, 321, 341, 362, 380, 382, 392, 398, 411, 414, 470, 518, 573, 701, 739, 796, 820, 822, 907, 908, 976, 987, 1009, 1018, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1042, 1043, 1046, 1047], "cross_valid": [4, 13, 121, 127, 132, 169, 201, 256, 263, 278, 311, 322, 380, 393, 398, 573, 820, 821, 987, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047], "crossentropi": 559, "crossvalid": [260, 274], "crowd": [388, 395, 984, 1008], "crucial": [12, 127, 168, 203, 255, 366, 379, 380, 394, 395, 407, 417, 1002], "crude": 1041, "crunch": 386, "cruz": 159, "crypt": [19, 375], "cryptograph": 389, "cs_": 657, "cs_note": 416, "cs_point": 120, "csail": [407, 664, 665, 674, 836], "csc": [366, 392, 394, 415, 525, 549, 551, 552, 668, 690, 866, 868, 874, 879, 882, 884, 890, 915, 919, 920, 950, 962, 963, 965, 966, 967, 968, 990, 997, 1038, 1039, 1041, 1044], "csc_matrix": [450, 555, 556, 561, 562, 563, 564, 876, 907, 908, 909, 910, 977, 997, 1003, 1035], "csco": 12, "csgraph": [394, 1043], "csie": [175, 374, 485, 506, 507, 656], "csizsek": 1037, "csr": [17, 353, 366, 374, 375, 389, 392, 394, 415, 418, 441, 444, 445, 447, 448, 457, 495, 506, 521, 525, 551, 552, 555, 556, 562, 563, 564, 588, 628, 656, 690, 712, 765, 789, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 854, 862, 866, 868, 870, 871, 872, 874, 877, 878, 879, 882, 883, 884, 886, 889, 892, 907, 908, 909, 910, 915, 919, 920, 942, 950, 962, 963, 964, 965, 966, 967, 968, 969, 970, 990, 997, 1001, 1030, 1031, 1036, 1038, 1039, 1045, 1046, 1047], "csr_arrai": 969, "csr_matrix": [283, 316, 438, 442, 450, 494, 532, 542, 555, 556, 557, 558, 561, 562, 563, 564, 586, 591, 592, 712, 825, 854, 872, 874, 901, 902, 904, 905, 907, 908, 909, 910, 937, 942, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 988, 997, 1001, 1002, 1003, 1045], "css": 1042, "cst": 981, "cstr": 837, "cstride": 170, "csv": [12, 374, 377, 385, 1038, 1043], "csytraci": 1033, "ct": [14, 159, 242, 408, 462, 464, 465], "ctc": 159, "cttt": 159, "cube": [419, 531], "cubic": [80, 417], "cuda": [392, 403], "cue": 986, "culprit": 392, "cultiv": 377, "cultur": 375, "cum_claim": [199, 217], "cum_exposur": 199, "cumsum": [123, 199, 217, 1037], "cumtim": 386, "cumul": [123, 199, 217, 407, 723, 732, 753, 876, 888, 997, 1001, 1037, 1039, 1040], "cumulated_claim": 199, "cumulated_claim_amount": 217, "cumulated_exposur": 199, "cumulated_sampl": 217, "cunha": [1031, 1032], "cup": [375, 987], "cupi": [320, 392, 403, 1047, 1048], "cupy_to_ndarrai": 403, "curat": [369, 380, 383, 384], "cure": 983, "curic": [1038, 1039], "current": [0, 8, 46, 111, 156, 169, 217, 305, 315, 367, 368, 375, 378, 380, 381, 382, 385, 389, 392, 394, 395, 403, 404, 406, 407, 411, 414, 415, 416, 417, 438, 444, 448, 466, 467, 468, 469, 470, 471, 472, 473, 474, 530, 533, 539, 551, 552, 555, 556, 557, 558, 560, 562, 563, 564, 574, 589, 591, 608, 615, 624, 625, 644, 656, 665, 669, 673, 674, 675, 676, 785, 794, 795, 844, 848, 856, 857, 875, 887, 897, 907, 908, 909, 910, 913, 954, 962, 976, 981, 983, 987, 990, 991, 997, 1008, 1011, 1021, 1038, 1042, 1044, 1045, 1046], "current_count": 41, "current_month": 156, "current_sklearn_vers": 574, "current_sz_mb": 8, "currentcontrolset": 397, "currentmodul": 380, "curs": [351, 352, 407, 413, 989, 990, 1017, 1022], "cursor": [117, 261], "curv": [8, 11, 23, 24, 26, 28, 37, 75, 78, 114, 116, 117, 123, 128, 166, 177, 178, 189, 199, 217, 218, 220, 222, 225, 227, 229, 231, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 260, 270, 276, 300, 306, 309, 315, 338, 342, 358, 387, 402, 406, 411, 413, 435, 436, 437, 500, 508, 513, 519, 523, 562, 630, 643, 656, 696, 698, 700, 704, 705, 706, 707, 724, 726, 738, 739, 779, 781, 784, 785, 786, 794, 795, 802, 813, 818, 823, 825, 826, 837, 860, 879, 899, 904, 983, 984, 986, 987, 993, 1003, 1009, 1010, 1012, 1025, 1027, 1032, 1033, 1036, 1040, 1042, 1043, 1044, 1045, 1046], "curvatur": 299, "cusick": 1040, "custom": [107, 145, 147, 166, 182, 208, 229, 239, 253, 259, 261, 264, 267, 268, 272, 276, 285, 290, 294, 315, 333, 335, 336, 338, 339, 341, 349, 351, 353, 372, 375, 378, 382, 387, 388, 389, 392, 393, 394, 398, 406, 407, 408, 411, 417, 466, 487, 491, 492, 500, 502, 536, 538, 545, 547, 555, 556, 562, 563, 569, 571, 600, 628, 629, 688, 697, 711, 775, 796, 825, 863, 897, 904, 971, 976, 981, 987, 990, 1007, 1008, 1009, 1012, 1023, 1025, 1030, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "custom_combin": 872, "custom_cv": 411, "custom_cv_2fold": 411, "custom_fnames_enc": 872, "custom_nam": 351, "custom_scorer_modul": 987, "custom_scoring_funct": 987, "customestim": 109, "customkernel": 616, "customvector": 415, "cut": [19, 43, 46, 65, 66, 222, 384, 392, 404, 407, 444, 450, 451, 460, 586, 589, 689, 693, 997], "cut_dist": [55, 444], "cutler": [907, 908], "cutoff": [178, 941, 997, 1039], "cutoffs_x0": 305, "cutoffs_x1": 305, "cv": [4, 12, 13, 24, 25, 26, 27, 54, 71, 72, 73, 74, 78, 102, 117, 121, 123, 127, 138, 147, 163, 164, 169, 188, 198, 201, 256, 258, 259, 260, 261, 262, 263, 265, 266, 270, 274, 278, 311, 320, 322, 338, 346, 393, 394, 398, 405, 411, 414, 416, 435, 470, 565, 566, 592, 600, 645, 649, 651, 653, 657, 659, 661, 663, 671, 673, 796, 798, 799, 800, 801, 802, 810, 811, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 880, 907, 908, 976, 979, 982, 983, 987, 997, 1008, 1018, 1019, 1023, 1032, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048], "cv_alpha": [649, 653], "cv_alphas_": [188, 649, 653, 1042], "cv_best_it": 123, "cv_clf": 123, "cv_color": 123, "cv_estim": 123, "cv_line": 123, "cv_mape_scor": 13, "cv_model": 169, "cv_result": [4, 13, 71, 117, 127, 147, 258, 259, 261, 263, 398, 810, 822, 987], "cv_results_": [71, 72, 73, 82, 117, 138, 147, 250, 258, 259, 260, 261, 264, 268, 271, 272, 285, 338, 470, 592, 796, 799, 800, 810, 1023, 1036, 1040, 1042, 1043, 1048], "cv_results_ecoc": 278, "cv_results_lr": 201, "cv_results_ovo": 278, "cv_results_ovr": 278, "cv_results_qr": 201, "cv_results_tre": 278, "cv_score": 123, "cv_test_scor": 823, "cv_train_scor": 823, "cv_valu": 1038, "cv_values_": [671, 673], "cvc": 12, "cve": 1043, "cvx": 12, "cwitt": 1038, "cxx": 378, "cxxflag": 378, "cyan": [78, 114, 169, 294], "cybernet": 766, "cycl": [0, 4, 42, 44, 50, 62, 95, 184, 246, 251, 267, 269, 318, 319, 380, 384, 398, 406, 412, 577, 578, 625, 799, 800, 915, 976, 977, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "cycler": 38, "cyclic": [4, 644, 645, 650, 651, 658, 659, 660, 661, 1042], "cyclic_cossin_linear_pipelin": 4, "cyclic_cossin_linear_predict": 4, "cyclic_cossin_transform": 4, "cyclic_hour": 4, "cyclic_month": 4, "cyclic_spline_interactions_pipelin": 4, "cyclic_spline_linear_pipelin": 4, "cyclic_spline_linear_predict": 4, "cyclic_spline_poly_pipelin": 4, "cyclic_spline_poly_predict": 4, "cyclic_spline_transform": 4, "cyclic_weekdai": 4, "cyl": [11, 296], "cynthias13w": 1047, "cyt": 278, "cython": [319, 366, 367, 369, 378, 380, 383, 389, 392, 397, 400, 403, 406, 407, 414, 506, 997, 998, 1001, 1002, 1007, 1008, 1030, 1033, 1034, 1036, 1042, 1045, 1046, 1047], "cython3": 378, "cythonx": 381, "c\u00e8sar": 987, "d": [0, 6, 7, 8, 10, 11, 12, 13, 15, 17, 19, 31, 32, 37, 38, 42, 48, 49, 50, 60, 61, 63, 70, 71, 82, 89, 92, 95, 98, 102, 104, 151, 159, 169, 199, 207, 215, 217, 225, 229, 231, 232, 233, 234, 248, 259, 260, 268, 281, 289, 290, 296, 301, 325, 326, 329, 338, 342, 343, 353, 374, 375, 377, 382, 386, 392, 405, 407, 409, 410, 412, 414, 415, 417, 418, 442, 444, 445, 450, 458, 461, 486, 491, 501, 524, 532, 534, 555, 556, 563, 564, 579, 580, 588, 612, 613, 617, 620, 621, 642, 643, 646, 667, 668, 669, 678, 686, 687, 690, 691, 695, 697, 703, 706, 719, 720, 721, 723, 753, 761, 775, 778, 785, 808, 834, 836, 838, 839, 840, 855, 866, 870, 872, 873, 875, 887, 892, 909, 910, 914, 979, 981, 983, 984, 985, 986, 987, 989, 995, 997, 999, 1002, 1003, 1019, 1020, 1021, 1033, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046], "d1997": 414, "d2": 720, "d2_absolute_error_scor": [720, 987, 1044], "d2_pinball_scor": [987, 1044], "d2_pinball_score_08": 987, "d2_tweedie_scor": [987, 1043], "d2_tweedie_score_15": 987, "d55e00": 245, "d81b60": 309, "d83": 377, "d_": [80, 407, 412, 646, 667, 678, 775, 984, 989], "d_c": 407, "d_chunk": 778, "d_fit": 686, "d_fix": 104, "d_m": 407, "d_multi": 104, "da": [375, 1045, 1046, 1048], "dae": 983, "dagm": 979, "dagstuhl": 987, "dai": [4, 12, 13, 127, 156, 170, 200, 367, 377, 380, 878, 1012, 1036, 1037, 1044, 1045], "daiki": 1034, "daili": [12, 127, 1012], "dakota": 1040, "dale": [201, 1043], "dalla": 1038, "dalmia": [1036, 1037, 1038], "damag": 415, "damicelli": 1045, "damink": 1047, "daml": [407, 450, 460], "damp": [44, 407, 438, 452], "dan": [17, 1030, 1034, 1035, 1036, 1038, 1039], "danfrankj": 1034, "dang": [677, 983, 1048], "danger": [200, 411], "dangi": 1047, "dangl": 17, "dangonite57": [1045, 1046], "daniel": [175, 320, 366, 880, 997, 1012, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1047], "daniela": [1044, 1045], "danielgaerb": 1045, "danielsen": 1037, "danielweitzenfeld": 1033, "daniil": 1037, "danil": 1038, "dani\u00ebl": 1041, "danna": 1040, "danni": [1033, 1034, 1035], "dantzig": 346, "danylo": 1039, "dao": 1038, "daphn": 1041, "dare": 1040, "darioka": [1042, 1044, 1045], "dariu": [1037, 1038], "dark": [114, 169, 338, 375, 1047], "dark2": [25, 27, 221], "darkblu": 294, "darkorang": [79, 99, 103, 104, 200, 210, 223, 246, 247, 248, 251, 267, 269, 288, 294, 295, 327, 358], "darkorchid": 209, "darkr": [213, 289, 337], "darpa": 375, "darren": [1044, 1045], "darshan": 1042, "dart": 1007, "dartmouth": 0, "dasarathi": 377, "dasgupta": [415, 444, 893, 999], "dash": [33, 80, 111, 123, 134, 151, 154, 156, 169, 186, 191, 194, 200, 201, 208, 211, 212, 238, 260, 270, 340, 344, 1001], "dashdot": [123, 151, 154, 238], "dask": [955, 1008, 1038], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 21, 25, 27, 30, 31, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 59, 60, 61, 62, 65, 68, 69, 71, 72, 74, 76, 79, 81, 90, 92, 94, 95, 98, 99, 103, 105, 106, 109, 111, 113, 114, 116, 117, 120, 121, 123, 124, 129, 130, 131, 133, 135, 138, 139, 140, 145, 150, 151, 152, 153, 155, 156, 158, 160, 161, 163, 166, 169, 170, 177, 178, 181, 182, 183, 184, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 228, 231, 232, 233, 235, 237, 238, 239, 242, 245, 246, 247, 248, 249, 251, 254, 258, 260, 262, 263, 264, 265, 268, 274, 278, 281, 283, 287, 289, 291, 292, 293, 294, 296, 300, 301, 304, 306, 307, 308, 312, 313, 315, 317, 319, 320, 321, 326, 327, 329, 330, 334, 335, 337, 342, 343, 351, 357, 358, 359, 360, 365, 367, 369, 372, 373, 374, 376, 377, 380, 382, 383, 386, 387, 388, 389, 393, 397, 398, 401, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 513, 518, 519, 520, 521, 522, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 615, 616, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 708, 709, 711, 715, 716, 718, 722, 724, 725, 726, 727, 728, 731, 733, 734, 735, 737, 738, 751, 752, 754, 758, 760, 761, 766, 775, 780, 781, 782, 784, 785, 786, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 923, 924, 925, 933, 935, 936, 950, 953, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1018, 1019, 1021, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "data1010": 1035, "data_filenam": [499, 503], "data_hom": [484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 1037, 1046], "data_home_path": 497, "data_id": [5, 121, 156, 169, 199, 217, 229, 278, 311, 374, 494], "data_ind": 14, "data_max": 1035, "data_max_": [869, 1035], "data_min": 1035, "data_min_": [869, 1035], "data_nam": 397, "data_path": 8, "data_rang": 1035, "data_range_": [869, 1035], "data_sampl": 15, "data_set": 300, "data_size_mb": 353, "data_stream": 8, "data_test": [233, 261, 351, 507], "data_test_size_mb": 351, "data_train": [233, 261, 351, 507], "data_train_size_mb": 351, "data_transform": 637, "data_transpos": [1044, 1046], "data_unravel_indic": 14, "data_vers": 397, "databas": [8, 148, 310, 366, 368, 375, 377, 407, 412, 414, 415, 418, 440, 442, 508, 553, 554, 892, 999], "datafram": [4, 13, 25, 70, 71, 72, 111, 117, 121, 124, 129, 147, 156, 163, 168, 169, 170, 171, 178, 183, 188, 203, 207, 217, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 310, 311, 312, 318, 319, 320, 346, 351, 352, 374, 375, 380, 382, 385, 394, 408, 414, 431, 440, 441, 443, 445, 447, 462, 464, 465, 466, 480, 481, 482, 483, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 686, 687, 690, 796, 799, 800, 810, 825, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 915, 942, 958, 961, 976, 977, 1008, 1023, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "dataia": 0, "dataiku": 1005, "datalim": 247, "datapoint": [4, 42, 52, 56, 155, 158, 182, 233, 234, 238, 255, 260, 281, 344, 417, 444, 500, 555, 556, 557, 558, 562, 563, 564, 609, 907, 908, 909, 910, 980], "datarobot": 1005, "dataset": [6, 7, 9, 10, 11, 14, 15, 17, 19, 20, 21, 26, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 80, 81, 82, 86, 93, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 112, 113, 114, 115, 116, 118, 119, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 147, 148, 150, 152, 154, 157, 159, 161, 163, 164, 171, 172, 175, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 222, 224, 225, 227, 229, 232, 234, 236, 237, 241, 242, 243, 245, 247, 248, 249, 251, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 275, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 333, 334, 336, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 352, 353, 355, 356, 358, 359, 360, 361, 362, 367, 368, 369, 382, 383, 384, 386, 393, 394, 396, 397, 401, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 419, 422, 427, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 467, 468, 471, 472, 473, 474, 476, 479, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 581, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 626, 629, 630, 631, 632, 633, 636, 637, 638, 641, 643, 644, 645, 647, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 706, 708, 709, 726, 752, 754, 784, 785, 789, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 863, 864, 872, 873, 877, 879, 881, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 924, 925, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1012, 1015, 1017, 1018, 1019, 1022, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "dataset_nam": [238, 283], "datasets_nam": 238, "datastructur": [403, 1038, 1042], "datastuctur": 1047, "datatyp": [462, 464, 1037, 1040], "date": [4, 70, 127, 148, 156, 170, 375, 377, 380, 384, 395, 408, 1008], "daten": [448, 1038, 1039], "datenbergwerk": 1040, "datetim": [4, 17, 156, 170], "dauphin": [302, 1032], "dave": [1030, 1037, 1038, 1044, 1046], "davi": [472, 722, 987, 1034], "david": [0, 2, 37, 57, 81, 117, 127, 178, 183, 201, 238, 261, 263, 310, 351, 352, 353, 375, 407, 414, 417, 460, 530, 534, 565, 566, 620, 621, 626, 722, 794, 896, 977, 983, 991, 1000, 1012, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "davidblnc": [1045, 1046], "davies_bouldin_scor": [407, 1038], "davis2006": 987, "daw": [0, 2, 111, 112, 113, 1030, 1031, 1032, 1033, 1034], "dawson": 1034, "dayn": [1045, 1046], "db": [49, 55, 407], "dbauer9": 1041, "dberenbaum": 1046, "dbg": 386, "dbpedia": 17, "dbpedia_resource_prefix_len": 17, "dbscan": [36, 37, 38, 44, 55, 58, 60, 63, 65, 68, 166, 321, 327, 392, 394, 444, 448, 450, 453, 510, 702, 703, 715, 734, 790, 792, 851, 879, 990, 1009, 1024, 1025, 1030, 1032, 1034, 1035, 1037, 1038, 1039, 1046, 1047], "dbscan_clust": 444, "dcc": 375, "dcg": [723, 753, 987, 1037], "dcg_score": [753, 987, 1037, 1040], "dd": [11, 12, 130, 296, 496], "ddof": [260, 879, 890], "de": [0, 12, 24, 25, 26, 27, 74, 115, 132, 151, 152, 154, 155, 156, 157, 158, 160, 190, 233, 234, 311, 327, 346, 377, 633, 686, 761, 983, 984, 1008, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "dea": [1044, 1045, 1046], "deactiv": [240, 374, 381, 386, 397, 408, 799, 800, 1044], "dead": 1048, "deadlock": 395, "deal": [25, 57, 71, 127, 163, 169, 183, 224, 278, 342, 353, 380, 385, 408, 415, 416, 417, 472, 494, 701, 706, 760, 784, 865, 936, 983, 1012, 1020, 1033, 1045, 1046], "dealloc": 1047, "dean": [132, 1038, 1044, 1046], "deap": 1007, "death": 375, "debian": [0, 366, 378, 386], "debias": 104, "deborah": [1036, 1037, 1047], "debug": [362, 367, 381, 383, 386, 394, 396, 625, 898, 953, 1007, 1023, 1038, 1042], "debugg": [383, 388], "dec": [200, 278, 675, 878, 903, 1002], "decad": [169, 1008], "decai": [156, 542, 856, 857, 936, 987, 1001, 1034], "decal": 1042, "decemb": [81, 127, 156, 375, 662, 683, 684, 1030, 1038, 1040, 1042, 1043, 1045], "decent": [228, 259, 375, 989], "deci": 269, "decid": [4, 11, 57, 60, 71, 122, 127, 251, 257, 260, 267, 375, 380, 395, 415, 417, 448, 455, 557, 558, 609, 633, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 669, 679, 682, 794, 841, 842, 843, 845, 847, 849, 850, 851, 862, 986, 993, 1012, 1043, 1046], "decil": [630, 1041], "deciles_hlines_": 630, "deciles_vlines_": 630, "decim": [25, 157, 469, 470, 912, 1037, 1038], "decis": [0, 4, 8, 25, 27, 31, 34, 41, 56, 58, 60, 90, 99, 109, 110, 113, 114, 115, 116, 122, 130, 131, 132, 134, 135, 136, 140, 143, 148, 153, 155, 159, 169, 181, 182, 191, 208, 209, 212, 228, 229, 231, 239, 263, 266, 278, 291, 294, 299, 305, 306, 307, 310, 324, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 351, 361, 366, 369, 376, 377, 380, 394, 405, 407, 414, 435, 467, 498, 502, 517, 534, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 591, 592, 629, 630, 631, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 696, 698, 700, 701, 705, 718, 723, 724, 732, 736, 737, 739, 753, 779, 785, 786, 791, 796, 799, 800, 810, 825, 827, 828, 830, 841, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 981, 987, 988, 989, 990, 991, 993, 994, 995, 1000, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1012, 1021, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1044, 1046, 1047], "decision_funct": [9, 11, 25, 27, 56, 113, 128, 140, 211, 212, 213, 229, 235, 238, 267, 289, 290, 299, 307, 322, 336, 337, 338, 342, 343, 344, 348, 382, 394, 405, 414, 435, 467, 547, 548, 551, 553, 557, 559, 561, 565, 591, 592, 629, 630, 631, 656, 657, 664, 666, 672, 673, 674, 675, 696, 698, 700, 705, 718, 723, 724, 732, 736, 737, 739, 753, 779, 785, 786, 791, 796, 799, 800, 810, 820, 827, 828, 829, 830, 845, 859, 866, 896, 899, 901, 903, 904, 983, 987, 993, 994, 1001, 1002, 1021, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1047], "decision_function_shap": [315, 347, 901, 904, 1002, 1035, 1036, 1039, 1040], "decision_path": [360, 555, 556, 562, 563, 564, 907, 908, 909, 910, 1036, 1041], "decision_tre": [911, 912, 913, 1003], "decision_tree_learn": [907, 908, 1003], "decisionboundarydisplai": [9, 30, 31, 34, 56, 113, 128, 133, 182, 191, 208, 213, 263, 286, 291, 294, 310, 334, 335, 336, 337, 339, 340, 342, 357, 1044, 1045, 1047, 1048], "decisiontre": [120, 551, 1035], "decisiontreeclassifi": [31, 111, 113, 120, 133, 264, 278, 321, 356, 357, 360, 394, 414, 551, 553, 555, 557, 559, 562, 629, 709, 802, 823, 908, 909, 911, 912, 913, 977, 988, 1003, 1031, 1032, 1034, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "decisiontreeclassifierifitteddecisiontreeclassifi": 360, "decisiontreeregressor": [112, 114, 239, 306, 315, 321, 358, 359, 385, 552, 554, 556, 557, 558, 560, 562, 563, 630, 631, 907, 910, 912, 931, 977, 988, 1003, 1031, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "decisiontreeregressorifitteddecisiontreeregressor": 317, "declan": 1042, "declar": [56, 221, 235, 362, 380, 381, 382, 386, 394, 441, 444, 445, 457, 469, 470, 476, 688, 692, 1037, 1041], "decod": [8, 296, 375, 394, 501, 567, 586, 587, 589, 1030, 1031], "decode_error": [8, 415, 501, 586, 587, 589, 1032], "decompos": [95, 99, 114, 307, 406, 532, 536, 707, 820, 936, 982, 983, 987, 1004, 1024, 1025], "decomposit": [5, 6, 10, 15, 17, 50, 58, 70, 72, 73, 74, 86, 87, 90, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 130, 136, 175, 220, 221, 223, 232, 233, 236, 237, 240, 259, 287, 292, 310, 319, 322, 352, 368, 369, 373, 386, 389, 394, 403, 404, 405, 408, 414, 447, 449, 450, 451, 460, 480, 481, 482, 493, 547, 554, 609, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 670, 671, 672, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 794, 795, 848, 855, 858, 861, 877, 908, 935, 936, 983, 984, 987, 1004, 1007, 1009, 1010, 1017, 1019, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "decompress": 1030, "decor": [170, 315, 380, 381, 382, 389, 802, 818, 926, 930, 931, 948, 954, 1040, 1043, 1046, 1048], "decoupl": [414, 989], "decreas": [26, 39, 46, 55, 58, 66, 75, 127, 129, 147, 148, 159, 169, 170, 172, 207, 231, 232, 262, 267, 273, 299, 307, 310, 315, 356, 366, 368, 380, 405, 407, 414, 439, 443, 461, 519, 532, 533, 539, 555, 556, 557, 558, 559, 560, 562, 563, 564, 600, 633, 634, 635, 674, 675, 676, 704, 710, 724, 779, 786, 856, 857, 907, 908, 909, 910, 976, 978, 979, 983, 984, 987, 990, 991, 994, 995, 1001, 1002, 1012, 1021, 1032, 1037, 1040, 1043], "dede00": [44, 62, 63], "dedic": [4, 258, 348, 378, 384, 386, 392, 395, 403, 407, 582, 670, 672, 685, 976, 983, 1007, 1014, 1038, 1047], "deduc": 7, "deduct": 991, "dedupl": 1034, "deeksha": 1042, "deem": [268, 269, 532, 995, 1043], "deep": [199, 382, 394, 414, 421, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 766, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 991, 992, 1007, 1008, 1012, 1035, 1041, 1042, 1044], "deepcopi": 382, "deeper": [351, 1003], "deepest": [559, 560, 1041], "deeplook": 1040, "deeppink": 269, "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 56, 58, 61, 70, 75, 92, 95, 97, 98, 102, 104, 109, 111, 114, 116, 121, 123, 124, 127, 132, 154, 157, 159, 160, 164, 172, 179, 187, 188, 191, 196, 199, 200, 207, 208, 209, 217, 220, 221, 235, 236, 238, 245, 246, 247, 248, 250, 251, 255, 258, 259, 260, 261, 263, 268, 271, 274, 283, 288, 290, 293, 296, 300, 302, 305, 307, 310, 311, 315, 329, 334, 338, 342, 348, 351, 352, 353, 366, 375, 380, 382, 386, 387, 392, 408, 411, 415, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 506, 507, 531, 595, 599, 608, 609, 616, 778, 872, 926, 931, 948, 987, 994, 1002, 1019], "default": [4, 13, 15, 25, 30, 42, 45, 46, 48, 55, 59, 95, 117, 144, 151, 163, 170, 178, 179, 188, 199, 200, 217, 230, 232, 238, 240, 242, 248, 255, 263, 269, 281, 283, 305, 309, 312, 315, 316, 320, 322, 342, 346, 347, 351, 352, 353, 356, 362, 366, 367, 374, 375, 378, 382, 383, 384, 385, 386, 387, 389, 392, 393, 394, 397, 398, 401, 405, 407, 408, 411, 412, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 731, 732, 733, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 923, 925, 926, 928, 930, 935, 936, 937, 938, 939, 940, 941, 950, 952, 953, 955, 956, 957, 958, 960, 961, 962, 968, 971, 973, 974, 976, 977, 979, 981, 983, 986, 987, 988, 990, 991, 993, 994, 997, 999, 1001, 1002, 1003, 1014, 1018, 1021, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "default_bas": [44, 62], "default_rng": 263, "default_scor": 385, "default_target_attribut": 374, "default_tim": [214, 248], "defaultdict": [10, 13, 19, 25, 172, 263, 352, 353], "defazio": [656, 983], "defens": 278, "defer": 380, "defici": [984, 1001], "defin": [7, 12, 27, 34, 53, 55, 57, 66, 70, 71, 73, 86, 95, 100, 109, 111, 112, 132, 148, 151, 158, 159, 160, 170, 171, 172, 178, 200, 207, 216, 217, 228, 232, 235, 239, 241, 245, 250, 260, 261, 263, 267, 269, 270, 271, 272, 278, 283, 302, 305, 316, 322, 338, 342, 346, 351, 352, 366, 376, 379, 380, 381, 382, 386, 387, 389, 392, 393, 394, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 422, 423, 424, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 487, 517, 518, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 625, 626, 627, 628, 630, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 694, 695, 697, 706, 708, 709, 714, 719, 720, 721, 722, 725, 728, 735, 738, 742, 743, 745, 747, 748, 750, 751, 754, 757, 763, 778, 782, 787, 788, 789, 790, 794, 795, 796, 799, 800, 802, 810, 818, 822, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 886, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 923, 925, 928, 934, 945, 947, 971, 976, 977, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1008, 1019, 1022, 1025, 1027, 1032, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "definit": [58, 81, 187, 199, 267, 283, 352, 380, 381, 382, 394, 396, 407, 409, 410, 412, 525, 527, 533, 609, 626, 690, 706, 716, 725, 755, 794, 795, 976, 979, 981, 983, 985, 987, 990, 1001, 1006, 1025, 1034, 1038, 1045], "definitelyuncertain": 1036, "deflat": [169, 410, 419, 531], "defoi": 1043, "deform": [128, 250, 348], "degener": [92, 246, 419, 438, 452, 531, 718, 983, 987, 1039, 1043, 1044], "degrad": [127, 170, 228, 305, 346, 352, 413, 775, 995], "degre": [4, 34, 97, 113, 156, 163, 168, 169, 170, 175, 178, 183, 187, 188, 200, 203, 234, 240, 245, 246, 247, 250, 251, 260, 274, 302, 317, 318, 335, 342, 345, 412, 416, 444, 450, 496, 533, 539, 637, 638, 641, 654, 772, 794, 796, 845, 874, 878, 901, 902, 903, 904, 905, 979, 980, 982, 983, 984, 985, 987, 988, 990, 993, 994, 997, 1000, 1002, 1021, 1033, 1039, 1043, 1044, 1047], "degrees_of_freedom_": 794, "degrees_of_freedom_prior": 794, "degrees_of_freedom_prior_": 794, "dei": 1042, "deil": [1031, 1041, 1042], "dein": 415, "dekel": [664, 665, 983], "del": [17, 386, 1042, 1043], "delai": [380, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 796, 810, 820, 821, 955, 1044, 1045, 1048], "delalleau": 1000, "delanou": 1041, "delattr": [586, 589, 1042], "delbert": [38, 438, 452], "deleg": [56, 386, 431, 432, 912, 1034, 1036, 1042], "delet": [72, 326, 328, 384, 385, 467, 472, 484], "delete_index": 326, "delete_indic": 326, "deleteri": 1037, "deliber": 983, "delimit": [380, 993, 1045], "deliv": [45, 366, 1012], "deliveri": 384, "dell": 12, "delong": [1042, 1043], "delta": [410, 450], "delta_": 984, "delta_k": 410, "delteil": 1034, "delv": [856, 857], "demand": [123, 127, 394, 415, 796, 810, 820, 821], "demarc": 60, "demiraj": [1045, 1046], "demo": [13, 14, 18, 19, 22, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 54, 57, 59, 60, 61, 62, 64, 67, 68, 128, 166, 172, 183, 205, 232, 248, 250, 261, 269, 310, 327, 351, 352, 382, 404, 407, 415, 438, 439, 442, 444, 445, 446, 448, 449, 451, 453, 456, 500, 509, 510, 511, 539, 702, 703, 715, 717, 734, 790, 792, 860, 879, 880, 1009], "demo_param": 382, "demonstr": [7, 13, 19, 20, 21, 25, 32, 36, 40, 43, 55, 61, 68, 70, 72, 89, 111, 115, 122, 125, 145, 146, 159, 160, 166, 172, 200, 201, 235, 241, 242, 247, 251, 253, 256, 263, 266, 269, 271, 274, 276, 285, 288, 295, 304, 306, 307, 309, 312, 313, 317, 324, 326, 327, 330, 331, 336, 342, 351, 352, 353, 362, 368, 375, 376, 380, 385, 392, 398, 403, 407, 411, 414, 445, 500, 510, 518, 695, 701, 711, 739, 795, 796, 864, 895, 907, 976, 977, 981, 987, 988, 989, 990, 997, 1000, 1003, 1006, 1009], "dem\u0161ar": 260, "den": [0, 1, 1031, 1032, 1037, 1038, 1039, 1042, 1043], "dendrit": [407, 708], "dendro": 172, "dendro_idx": 172, "dendrogram": [36, 67, 68, 166, 172, 360, 407, 439, 443, 502, 1009, 1042], "denero": 732, "deng": [1034, 1035, 1036], "dengemann": 1031, "dengyong": 895, "deni": [102, 1032, 1033, 1037, 1038, 1039, 1045, 1046], "denni": 1044, "denois": [3, 16, 48, 50, 51, 53, 94, 100, 104, 106, 166, 412, 494, 533, 535, 539, 582, 585, 825, 869, 1009], "denomin": [267, 414, 415, 420, 473, 588, 702, 754, 981], "denot": [389, 394, 397, 405, 407, 411, 414, 586, 587, 589, 796, 802, 810, 818, 872, 873, 972, 976, 979, 983, 985, 987, 988, 997, 1000, 1014, 1047], "dens": [12, 14, 55, 166, 177, 183, 193, 218, 319, 320, 329, 366, 389, 394, 407, 412, 414, 416, 441, 444, 445, 447, 462, 465, 494, 521, 522, 525, 532, 533, 542, 564, 605, 606, 627, 628, 650, 655, 656, 657, 664, 665, 666, 670, 671, 674, 675, 676, 685, 686, 687, 690, 691, 757, 758, 764, 776, 789, 856, 857, 864, 871, 872, 874, 876, 877, 878, 879, 888, 889, 890, 891, 892, 899, 900, 901, 902, 904, 905, 937, 958, 961, 977, 980, 983, 984, 987, 988, 990, 993, 997, 999, 1000, 1001, 1002, 1003, 1009, 1030, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "dense_lasso": 185, "dense_output": [758, 764, 892, 937, 1038], "denser": 442, "densif": 1039, "densifi": [394, 656, 657, 664, 665, 666, 674, 675, 676, 899, 977, 1032], "densiti": [11, 49, 55, 60, 65, 75, 104, 148, 154, 166, 185, 199, 200, 214, 217, 224, 228, 232, 244, 245, 246, 251, 252, 260, 266, 278, 284, 289, 290, 297, 305, 310, 338, 351, 375, 377, 389, 394, 407, 414, 418, 426, 442, 444, 446, 448, 450, 462, 465, 496, 500, 534, 539, 547, 548, 794, 795, 796, 839, 840, 844, 845, 892, 981, 983, 986, 990, 992, 993, 999, 1007, 1009, 1010, 1014, 1024, 1025, 1032, 1034, 1038, 1039, 1045, 1046], "density_": 892, "densityestim": 426, "denton": 1032, "deodhar": 1042, "deoli": 1043, "depart": [159, 407], "depedend": 1047, "depend": [4, 5, 7, 13, 27, 37, 53, 75, 99, 117, 121, 124, 125, 127, 129, 132, 143, 147, 157, 163, 166, 167, 169, 172, 173, 175, 179, 183, 217, 221, 227, 228, 234, 238, 243, 250, 260, 261, 265, 266, 267, 283, 300, 305, 310, 317, 320, 335, 342, 346, 352, 353, 362, 366, 367, 368, 373, 380, 382, 383, 388, 389, 392, 393, 394, 395, 396, 397, 400, 401, 403, 406, 407, 409, 411, 412, 414, 415, 416, 417, 418, 436, 437, 438, 442, 444, 445, 447, 448, 450, 452, 455, 457, 458, 460, 462, 467, 482, 487, 488, 489, 491, 494, 498, 499, 500, 502, 503, 508, 532, 533, 539, 542, 549, 557, 558, 560, 586, 587, 588, 589, 600, 602, 605, 606, 609, 625, 630, 631, 636, 638, 646, 656, 657, 667, 669, 671, 674, 675, 676, 678, 685, 688, 689, 692, 693, 709, 726, 727, 735, 738, 775, 778, 780, 781, 784, 789, 790, 794, 795, 815, 824, 841, 842, 843, 845, 847, 848, 849, 850, 851, 857, 858, 860, 872, 873, 876, 879, 893, 900, 901, 904, 908, 917, 976, 977, 979, 980, 981, 983, 984, 986, 987, 989, 990, 991, 992, 995, 999, 1001, 1002, 1003, 1009, 1014, 1021, 1023, 1025, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1045, 1046, 1047], "dependen": 346, "depict": [111, 262, 414, 986], "deploi": [366, 396, 401, 1008, 1012], "deploy": [388, 1007, 1008, 1012], "depot": 12, "deprec": [318, 367, 369, 383, 384, 389, 394, 398, 439, 443, 444, 445, 448, 455, 457, 480, 481, 482, 483, 525, 534, 535, 536, 537, 538, 544, 551, 567, 568, 577, 578, 580, 625, 636, 674, 675, 690, 707, 738, 739, 747, 748, 775, 776, 777, 779, 799, 800, 820, 821, 822, 846, 858, 901, 904, 915, 930, 931, 976, 977, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "deprecationwarn": 1040, "dept": 377, "depth": [4, 116, 121, 125, 128, 133, 278, 356, 358, 359, 360, 366, 378, 380, 384, 393, 414, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 839, 840, 844, 907, 908, 909, 910, 911, 913, 941, 992, 993, 1003, 1032, 1033, 1041], "der": [690, 694, 984, 1033, 1034, 1038], "derek": 1038, "deriv": [4, 19, 104, 105, 123, 156, 159, 171, 187, 188, 192, 200, 367, 375, 382, 409, 411, 413, 414, 415, 417, 419, 439, 443, 444, 463, 531, 604, 615, 620, 646, 667, 674, 678, 856, 857, 872, 878, 899, 900, 981, 983, 984, 987, 991, 993, 1002, 1030, 1031, 1032, 1037, 1038, 1039, 1045], "deros": 1041, "derouich": 1030, "desai": [1037, 1039, 1042, 1043, 1045, 1046], "desalvo": 976, "descamp": 1038, "descend": [120, 625, 1040], "descent": [7, 14, 122, 166, 177, 184, 187, 218, 228, 233, 289, 318, 336, 337, 412, 414, 469, 470, 476, 486, 494, 501, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 569, 629, 637, 644, 645, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 666, 670, 672, 674, 675, 676, 679, 680, 681, 682, 685, 692, 825, 856, 857, 860, 899, 903, 961, 984, 991, 993, 1002, 1009, 1010, 1021, 1025, 1030, 1033, 1034, 1035, 1037, 1039, 1041, 1043, 1044, 1045], "descr": [148, 373, 374, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 1020, 1038], "describ": [4, 13, 56, 132, 148, 169, 217, 233, 260, 269, 362, 366, 367, 373, 375, 377, 379, 380, 382, 385, 388, 394, 395, 404, 407, 409, 410, 411, 412, 414, 415, 460, 467, 471, 472, 489, 491, 493, 494, 495, 498, 499, 500, 501, 502, 503, 508, 514, 515, 516, 526, 605, 606, 643, 657, 666, 712, 794, 795, 834, 836, 874, 936, 976, 979, 982, 983, 986, 987, 989, 993, 1001, 1002, 1003, 1011, 1014, 1020, 1021, 1038, 1040], "descript": [13, 148, 169, 311, 373, 374, 379, 380, 384, 385, 388, 394, 407, 415, 450, 460, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 542, 628, 674, 759, 762, 775, 987, 1001, 1002, 1008, 1011, 1023, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "descriptor": [394, 506, 507], "deserv": [380, 386], "deshmukh": 1043, "deshpand": [1035, 1036], "design": [0, 14, 20, 80, 111, 132, 154, 168, 169, 180, 250, 305, 311, 360, 368, 374, 380, 385, 392, 393, 394, 395, 396, 407, 414, 416, 513, 526, 630, 631, 646, 663, 667, 674, 678, 683, 796, 814, 815, 834, 836, 977, 983, 984, 987, 988, 997, 1007, 1008, 1012, 1016, 1032, 1039], "desir": [11, 24, 113, 148, 164, 199, 201, 305, 309, 373, 380, 382, 384, 388, 401, 404, 407, 410, 411, 412, 416, 501, 536, 538, 542, 545, 565, 591, 600, 601, 662, 668, 683, 684, 697, 706, 733, 839, 840, 844, 859, 864, 866, 869, 870, 872, 873, 875, 876, 880, 883, 885, 887, 888, 923, 956, 979, 981, 984, 990, 997, 1001, 1002, 1003, 1014, 1030, 1038, 1039, 1040, 1043], "desislava": 1044, "desktop": 378, "despit": [27, 86, 197, 199, 217, 234, 292, 394, 398, 409, 625, 626, 628, 983, 990, 1012, 1038, 1039], "dessyvv": 1044, "dest": 320, "destin": 1012, "destroi": [266, 415, 792, 868, 997], "det": [166, 239, 241, 253, 269, 270, 276, 380, 409, 513, 562, 696, 700, 724, 786, 825, 860, 879, 899, 934, 1009, 1042], "det_curv": [257, 696, 779, 786, 987, 1042, 1043, 1048], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "detcurvedisplai": [257, 318, 724, 1042, 1043, 1047, 1048], "detect": [3, 8, 10, 16, 20, 34, 63, 65, 80, 81, 82, 118, 121, 128, 166, 180, 199, 203, 213, 216, 227, 239, 241, 243, 253, 260, 263, 269, 270, 276, 284, 297, 305, 311, 337, 375, 378, 380, 384, 392, 394, 405, 406, 407, 409, 411, 415, 429, 444, 447, 462, 464, 467, 468, 471, 472, 473, 474, 486, 487, 489, 490, 494, 508, 510, 513, 520, 535, 536, 537, 544, 561, 562, 586, 589, 594, 629, 637, 675, 696, 700, 724, 786, 825, 845, 849, 860, 869, 872, 873, 877, 878, 879, 899, 903, 979, 983, 1007, 1008, 1009, 1010, 1012, 1018, 1023, 1024, 1025, 1030, 1033, 1036, 1037, 1038, 1040, 1042, 1043, 1045, 1046], "detection_error_tradeoff": 987, "detector": [375, 394, 845], "determin": [9, 11, 14, 19, 46, 55, 80, 111, 113, 117, 127, 156, 169, 178, 179, 195, 202, 260, 305, 310, 342, 353, 360, 362, 379, 380, 382, 389, 393, 394, 404, 405, 407, 411, 412, 414, 415, 416, 417, 430, 435, 439, 440, 441, 443, 445, 447, 448, 454, 457, 458, 459, 463, 467, 468, 470, 471, 472, 473, 474, 480, 481, 482, 486, 489, 490, 493, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 535, 537, 540, 541, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 563, 565, 566, 568, 580, 581, 582, 586, 589, 592, 600, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 633, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 685, 687, 688, 690, 691, 692, 705, 709, 720, 726, 727, 735, 780, 781, 782, 784, 785, 790, 796, 798, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 826, 830, 832, 833, 835, 842, 844, 845, 850, 855, 856, 857, 863, 864, 872, 873, 874, 876, 880, 888, 899, 900, 902, 905, 908, 910, 913, 934, 950, 956, 958, 961, 976, 979, 981, 986, 990, 992, 993, 995, 997, 1000, 1001, 1003, 1014, 1030, 1035, 1038, 1039, 1041, 1042, 1043], "determinist": [58, 124, 367, 376, 382, 394, 407, 441, 445, 447, 449, 450, 451, 456, 457, 460, 549, 557, 558, 562, 563, 581, 582, 689, 693, 807, 808, 855, 907, 908, 979, 983, 1031, 1034, 1036, 1038, 1039, 1042, 1045, 1046], "detlefsen": 1044, "detomaso": 1037, "detriment": [7, 147, 367, 416, 983], "dev": [160, 169, 217, 265, 270, 378, 380, 384, 386, 388, 987, 1012, 1026, 1037, 1042, 1045, 1046], "dev0": [378, 384, 1011, 1026], "dev514": 1044, "devansh": [1037, 1038], "devanshkyada27": 1047, "devashish": 1036, "devel": 378, "develop": [8, 27, 56, 108, 159, 217, 258, 260, 278, 283, 315, 321, 351, 366, 369, 375, 379, 380, 386, 392, 394, 395, 396, 398, 401, 404, 406, 409, 410, 414, 415, 421, 424, 431, 491, 796, 971, 983, 987, 990, 1003, 1005, 1007, 1008, 1009, 1011, 1012, 1021, 1030, 1038, 1039, 1040, 1045, 1048], "developing_estim": [108, 1009], "devi": 1042, "devianc": [123, 126, 199, 217, 321, 414, 551, 556, 557, 559, 560, 563, 646, 667, 678, 719, 720, 721, 744, 746, 749, 908, 910, 983, 1003, 1031, 1040, 1041, 1043, 1044, 1046], "deviant": [205, 993], "deviat": [13, 20, 34, 61, 80, 114, 117, 118, 119, 120, 122, 148, 151, 156, 158, 160, 169, 178, 205, 238, 257, 258, 259, 260, 261, 263, 289, 290, 305, 310, 372, 376, 377, 385, 389, 394, 411, 414, 417, 448, 470, 499, 509, 510, 511, 512, 514, 515, 516, 520, 522, 523, 528, 550, 592, 609, 632, 642, 643, 669, 721, 749, 802, 818, 845, 868, 869, 879, 888, 889, 890, 983, 987, 993, 997, 1021, 1036, 1037, 1038, 1041, 1042, 1043], "devic": [411, 580, 1007], "devnani": 1042, "deweight": 938, "dexter": 1040, "dezub": 1037, "df": [4, 13, 25, 27, 127, 132, 168, 170, 178, 183, 199, 217, 250, 260, 309, 311, 322, 352, 385, 415, 588, 589, 976, 977, 1047], "df_": 217, "df_freq": 217, "df_max_": [25, 27], "df_min_": [25, 27], "df_out": 322, "df_sev": 217, "df_std": 352, "df_test": [199, 217], "df_train": [199, 217], "dfrac": [991, 997], "dgemm": 366, "dgesdd": 386, "dhanshre": 1045, "dhillon": [19, 404, 449, 451, 509], "dhingra": [1038, 1039, 1042, 1047], "di": [394, 407, 412, 529, 535, 662, 683, 684, 892, 1034, 1043], "dia": 1047, "diabet": [7, 125, 135, 137, 141, 147, 148, 164, 166, 186, 187, 188, 195, 196, 255, 256, 265, 273, 373, 414, 499, 650, 651, 796, 801, 820, 821, 822, 995, 1009, 1014, 1018, 1025], "diabetes_i": [195, 1021], "diabetes_x": [195, 1021], "diabetes_x_test": [195, 1021], "diabetes_x_train": [195, 1021], "diabetes_y_pr": 195, "diabetes_y_test": [195, 1021], "diabetes_y_train": [195, 1021], "diadochokinet": 1045, "diag": [12, 82, 159, 247, 250, 412, 417, 530, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 794, 795, 983, 1045], "diag_kind": [168, 169], "diagnos": [148, 263, 377, 388, 396, 408], "diagnosi": [148, 263, 377, 846], "diagnost": [148, 172, 263, 373, 394, 498, 710, 821, 822, 987, 995, 1007, 1008, 1025], "diagon": [4, 25, 27, 40, 82, 85, 217, 238, 247, 250, 251, 254, 338, 404, 407, 409, 417, 451, 469, 470, 476, 479, 509, 511, 525, 530, 548, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 648, 649, 652, 653, 654, 680, 681, 699, 713, 789, 794, 795, 843, 851, 979, 981, 983, 986, 987, 990, 997, 1036, 1038, 1039, 1040], "diagram": [25, 27, 71, 240, 316, 322, 382, 405, 407, 436, 437, 466, 897, 997, 1041, 1042, 1047, 1048], "diamet": 407, "diamond": 248, "diaz": 1038, "dice": [448, 455, 697, 775, 776, 777, 990], "dicedist": 697, "dichotomis": 1003, "dickerson": 1031, "dickson": 1037, "dico": 98, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 70, 73, 74, 101, 117, 122, 124, 126, 197, 205, 228, 237, 247, 258, 259, 261, 264, 267, 269, 283, 287, 307, 311, 319, 329, 338, 352, 353, 368, 372, 374, 382, 392, 394, 408, 411, 418, 419, 421, 425, 429, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 695, 696, 698, 699, 700, 709, 711, 759, 762, 768, 776, 777, 794, 795, 796, 799, 800, 802, 807, 808, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 924, 925, 941, 944, 947, 976, 987, 997, 1018, 1019, 1023, 1025, 1030, 1036, 1037, 1046, 1047, 1048], "dict_count_vector": 353, "dict_init": [529, 535, 543, 544], "dict_kei": 624, "dict_learn": [389, 529, 535, 544, 1031, 1038, 1040, 1043, 1044, 1046], "dict_learning_onlin": [543, 1031, 1040, 1043, 1044, 1047], "dict_pos_code_estim": 95, "dict_pos_dict_estim": 95, "dict_pos_estim": 95, "dict_typ": 579, "dictat": 407, "dictionari": [5, 6, 7, 8, 36, 48, 51, 53, 68, 94, 96, 106, 119, 127, 129, 166, 198, 235, 237, 352, 353, 373, 374, 375, 382, 392, 394, 415, 447, 462, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 524, 529, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 565, 566, 567, 568, 579, 580, 582, 585, 586, 587, 592, 630, 631, 632, 662, 683, 684, 699, 709, 711, 796, 799, 800, 807, 808, 810, 822, 858, 863, 872, 907, 908, 909, 910, 914, 924, 944, 947, 976, 983, 987, 1002, 1009, 1014, 1023, 1024, 1025, 1030, 1038, 1041, 1042, 1043, 1044, 1045], "dictionarylearn": [412, 535, 537, 538, 540, 541, 542, 543, 544, 1031, 1035, 1037, 1040, 1043, 1044, 1045, 1046], "dictlearn": 1035, "dictvector": [19, 70, 166, 329, 350, 351, 352, 354, 375, 415, 486, 580, 586, 587, 588, 589, 872, 1009, 1030, 1031, 1034, 1040, 1042, 1043, 1046, 1047], "did": [124, 151, 169, 172, 199, 207, 217, 246, 312, 375, 625, 710, 815, 901, 1022, 1031, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045], "didact": [380, 1008], "didi": [1036, 1037, 1038, 1039], "didn": [362, 394, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "die": 984, "diebold": 260, "diederik": [856, 857, 991, 1045], "diederikwp": 1045, "diego": [1031, 1032], "diegodlh": [1037, 1038], "diemert": [7, 8, 10, 1012, 1032, 1033], "diesel": [199, 217], "dietterich": [260, 829, 988], "diff": [383, 987], "diff_embed": 293, "differ": [4, 5, 7, 10, 12, 14, 15, 20, 21, 24, 27, 30, 31, 34, 36, 37, 39, 41, 42, 43, 45, 46, 47, 49, 52, 53, 55, 57, 58, 60, 64, 65, 66, 67, 68, 70, 71, 72, 74, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 102, 103, 104, 111, 114, 116, 117, 120, 121, 122, 124, 126, 127, 128, 132, 133, 134, 135, 138, 140, 143, 148, 150, 151, 152, 153, 156, 157, 158, 161, 163, 164, 166, 168, 169, 171, 175, 178, 179, 182, 185, 186, 187, 188, 190, 196, 199, 200, 201, 203, 204, 205, 206, 207, 216, 217, 220, 221, 222, 223, 225, 228, 230, 233, 234, 235, 238, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 274, 275, 278, 281, 283, 286, 289, 290, 292, 299, 300, 304, 306, 307, 309, 310, 313, 315, 330, 333, 334, 336, 337, 338, 340, 341, 346, 347, 349, 351, 352, 353, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 383, 385, 387, 389, 393, 394, 397, 401, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 432, 435, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 460, 462, 473, 476, 488, 491, 492, 494, 501, 502, 506, 507, 510, 512, 520, 535, 536, 537, 538, 544, 545, 547, 548, 553, 554, 561, 579, 580, 586, 587, 588, 589, 592, 609, 611, 612, 613, 617, 620, 621, 625, 629, 630, 631, 632, 636, 641, 642, 645, 647, 649, 651, 653, 656, 659, 664, 665, 666, 670, 672, 674, 675, 676, 678, 688, 690, 692, 696, 698, 699, 702, 703, 704, 705, 707, 713, 715, 716, 724, 725, 726, 727, 728, 731, 732, 734, 740, 754, 755, 756, 758, 775, 779, 780, 781, 783, 784, 786, 789, 790, 792, 795, 796, 798, 799, 800, 801, 802, 805, 810, 811, 812, 813, 814, 815, 816, 818, 820, 822, 823, 826, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 849, 852, 855, 859, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 884, 885, 886, 887, 888, 889, 890, 899, 900, 901, 904, 907, 908, 909, 910, 944, 951, 976, 977, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1012, 1014, 1016, 1017, 1018, 1022, 1023, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "difference_plot": 265, "differenti": [90, 267, 414, 417, 557, 558, 617, 620], "difficult": [55, 111, 169, 207, 238, 380, 388, 405, 412, 414, 551, 552, 557, 559, 560, 982, 984, 986, 990, 992, 994, 1003, 1012, 1030, 1044], "difficulti": [9, 27, 217, 305, 368, 380, 405, 856, 857, 986, 990], "diffus": 156, "digest": [380, 1045], "digg": [1012, 1037], "digicosm": 0, "digit": [5, 12, 13, 29, 35, 36, 38, 39, 41, 43, 45, 46, 48, 49, 51, 53, 57, 59, 61, 62, 68, 72, 73, 85, 88, 93, 98, 116, 137, 141, 146, 148, 166, 189, 190, 206, 214, 215, 219, 220, 222, 224, 226, 232, 233, 237, 248, 254, 258, 259, 262, 287, 292, 293, 298, 300, 301, 303, 321, 324, 327, 331, 352, 373, 380, 386, 407, 413, 414, 416, 439, 443, 445, 500, 539, 542, 547, 564, 656, 686, 687, 688, 689, 690, 695, 702, 703, 711, 715, 716, 734, 790, 792, 825, 841, 848, 855, 859, 860, 869, 879, 885, 892, 895, 904, 911, 912, 913, 976, 982, 984, 987, 990, 992, 1000, 1009, 1014, 1018, 1021, 1022, 1025, 1034], "digraph": 911, "dijkstra": [389, 686, 984], "dilemma": 982, "dillon": [1038, 1039, 1040], "dilut": [172, 377], "dilutedsauc": 1038, "dim": [208, 232, 291, 292, 294, 334, 335, 525, 697, 1047], "dim_reduction_method": 292, "dimens": [9, 12, 13, 15, 37, 40, 53, 82, 85, 90, 95, 148, 153, 155, 157, 159, 170, 182, 183, 197, 222, 224, 228, 232, 233, 239, 246, 247, 287, 288, 292, 308, 342, 351, 352, 353, 375, 377, 381, 394, 406, 407, 412, 413, 417, 419, 440, 441, 443, 445, 446, 447, 450, 462, 463, 480, 481, 482, 491, 492, 513, 522, 523, 527, 528, 531, 539, 547, 580, 581, 582, 583, 585, 587, 595, 609, 617, 620, 639, 642, 657, 688, 689, 690, 692, 693, 697, 761, 820, 839, 840, 844, 858, 891, 892, 893, 901, 902, 903, 904, 905, 919, 920, 921, 950, 958, 961, 977, 979, 981, 983, 984, 985, 988, 990, 991, 993, 999, 1002, 1014, 1021, 1022, 1037, 1039, 1040, 1042], "dimension": [6, 9, 10, 19, 31, 33, 40, 44, 54, 55, 57, 58, 62, 69, 71, 73, 74, 76, 85, 86, 92, 95, 99, 102, 103, 111, 116, 130, 139, 140, 148, 151, 153, 154, 158, 166, 183, 195, 200, 216, 219, 221, 222, 224, 226, 228, 232, 233, 236, 246, 247, 259, 284, 287, 291, 293, 297, 307, 335, 342, 351, 362, 366, 372, 375, 376, 377, 380, 389, 394, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 443, 445, 447, 463, 467, 471, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 500, 502, 503, 508, 513, 517, 530, 532, 533, 536, 537, 538, 539, 542, 545, 547, 561, 564, 571, 597, 605, 629, 638, 639, 640, 650, 686, 687, 688, 689, 690, 691, 692, 694, 697, 708, 722, 794, 795, 796, 825, 839, 840, 841, 844, 847, 848, 855, 859, 860, 863, 869, 874, 879, 891, 892, 893, 899, 903, 936, 973, 978, 979, 982, 983, 988, 989, 993, 999, 1000, 1001, 1002, 1003, 1009, 1010, 1012, 1014, 1015, 1017, 1019, 1020, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1042, 1045, 1046], "dimensionalityreduct": 377, "diminish": 415, "dimitri": [1043, 1044, 1045, 1046, 1047], "dimmick": 377, "dingwal": 1037, "dionisi": 1044, "diop": 1040, "direct": [12, 85, 86, 95, 97, 103, 148, 205, 245, 251, 257, 292, 302, 310, 338, 343, 378, 380, 381, 384, 388, 395, 397, 407, 410, 412, 415, 416, 450, 460, 469, 470, 476, 532, 539, 547, 586, 587, 589, 600, 639, 686, 848, 981, 982, 983, 988, 990, 992, 1008, 1022, 1030, 1033], "direction": 1048, "direction_vector": 302, "directli": [0, 6, 19, 27, 45, 46, 56, 71, 116, 121, 148, 159, 183, 187, 199, 205, 217, 229, 265, 302, 305, 319, 322, 353, 362, 366, 378, 380, 381, 382, 384, 386, 393, 394, 395, 403, 404, 405, 407, 408, 409, 410, 411, 415, 417, 440, 450, 460, 462, 467, 472, 525, 565, 566, 567, 568, 595, 609, 618, 630, 641, 644, 645, 650, 651, 658, 659, 660, 661, 662, 675, 679, 682, 688, 771, 775, 778, 789, 790, 796, 799, 800, 810, 842, 844, 858, 859, 860, 866, 876, 878, 881, 888, 955, 976, 983, 985, 990, 992, 994, 997, 1002, 1003, 1008, 1015, 1018, 1019, 1030, 1038, 1039, 1041, 1042, 1043, 1046, 1047], "director": 1012, "directori": [0, 8, 285, 374, 378, 380, 382, 386, 388, 394, 397, 408, 439, 443, 448, 484, 497, 859, 860, 1044], "direr": [1033, 1034, 1037, 1038], "dirichlet": [3, 6, 16, 166, 225, 245, 246, 251, 255, 319, 415, 486, 534, 536, 538, 586, 589, 794, 1007, 1009, 1024, 1025, 1030, 1035, 1036], "dirichlet_distribut": [245, 794, 986, 1036], "dirichlet_process": [245, 251, 794, 986, 1036], "disabl": [115, 235, 312, 322, 351, 378, 380, 398, 415, 447, 458, 466, 535, 536, 537, 544, 557, 558, 559, 560, 858, 876, 888, 897, 919, 920, 997, 1036, 1039, 1043, 1045, 1048], "disadvantag": [412, 417, 983, 984, 991, 1001, 1002, 1003], "disagre": [732, 994], "disambigu": [380, 827, 896, 1000, 1045], "disappear": [983, 1030], "disappoint": 4, "discard": [8, 55, 180, 263, 366, 404, 409, 416, 506, 507, 547, 595, 625, 628, 642, 872, 876, 888, 977, 983, 1038, 1042], "disclaim": 1007, "disclos": 393, "disconnect": 1043, "discontinu": [4, 392], "discord": [703, 1011], "discount": [375, 407, 723, 753, 1037, 1040], "discounted_cumulative_gain": 723, "discourag": [203, 392, 397, 687], "discov": [352, 406, 407, 412, 415, 418, 442, 446, 1014, 1045], "discoveri": [260, 375, 386, 389, 407, 414, 416, 418, 442, 509, 553, 554, 561, 590, 593, 594, 596, 597, 598, 604, 718, 737, 780, 987, 999, 1012, 1044, 1045], "discrep": [415, 1023, 1034], "discret": [4, 8, 31, 46, 56, 75, 92, 104, 109, 111, 130, 150, 161, 166, 170, 179, 199, 206, 217, 235, 239, 278, 293, 299, 304, 308, 313, 358, 368, 372, 375, 376, 384, 393, 394, 407, 412, 415, 417, 436, 437, 446, 450, 458, 459, 460, 490, 512, 513, 520, 551, 557, 569, 586, 587, 590, 593, 594, 597, 598, 605, 606, 608, 609, 610, 614, 615, 616, 655, 656, 739, 796, 807, 825, 834, 835, 838, 860, 864, 872, 873, 876, 879, 888, 899, 904, 908, 950, 976, 983, 984, 985, 987, 988, 990, 1003, 1007, 1009, 1014, 1025, 1032, 1035, 1043, 1044, 1045], "discrete_featur": [605, 606], "discrim": 199, "discrimin": [9, 10, 15, 29, 35, 78, 79, 80, 81, 82, 103, 143, 145, 148, 166, 175, 214, 221, 236, 250, 292, 369, 377, 405, 414, 473, 510, 547, 548, 564, 629, 780, 848, 976, 984, 987, 990, 1001, 1003, 1009, 1010, 1021, 1025, 1033], "discriminant_analysi": [31, 33, 34, 103, 221, 292, 362, 369, 403, 534, 848, 981, 988, 1030, 1033, 1034, 1035, 1036, 1037], "discriminatori": 405, "discuss": [4, 53, 58, 148, 169, 188, 220, 225, 263, 278, 351, 362, 368, 375, 377, 380, 385, 386, 388, 392, 394, 395, 407, 409, 413, 414, 417, 496, 680, 681, 841, 842, 847, 849, 850, 977, 981, 983, 984, 987, 990, 997, 1004, 1008, 1011, 1033], "diseas": [7, 135, 148, 164, 263, 377, 710, 987, 1021], "disentangl": 984, "disjoint": [405, 407, 408, 435, 702, 728, 752, 754, 984], "disk": [6, 14, 375, 380, 385, 394, 401, 1019], "disp": [4, 30, 32, 113, 127, 128, 129, 254, 263, 275, 286, 310, 316, 322, 335, 340, 436, 629, 695, 698, 699, 848], "disp1": 630, "disp2": 630, "dispar": [688, 692, 984], "dispatch": [71, 369, 394, 403, 466, 796, 810, 820, 821, 822, 897, 953, 954, 1018, 1025, 1045], "dispatch_next": 953, "dispatch_one_batch": 953, "dispers": [34, 407, 708, 722, 983], "displai": [12, 25, 27, 34, 37, 46, 48, 60, 71, 81, 82, 85, 86, 89, 95, 117, 128, 129, 132, 163, 166, 169, 170, 184, 186, 217, 227, 228, 238, 241, 242, 243, 249, 257, 261, 262, 267, 269, 270, 274, 293, 311, 316, 317, 337, 357, 366, 380, 382, 383, 387, 389, 397, 406, 408, 412, 415, 416, 421, 436, 462, 465, 466, 494, 539, 562, 628, 629, 630, 656, 685, 695, 696, 698, 699, 700, 711, 716, 779, 786, 796, 802, 810, 818, 825, 859, 860, 872, 874, 879, 897, 904, 911, 912, 913, 927, 953, 974, 987, 991, 1007, 1009, 1025, 1039, 1041, 1042, 1044, 1045], "display_label": [6, 254, 695, 1019, 1042], "dispos": [976, 1023], "disproportion": 413, "disput": 117, "disregard": [351, 394, 415, 430, 463, 480, 481, 482, 550, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 719, 720, 721, 782, 832, 833, 842, 850, 857, 868, 869, 875, 876, 879, 884, 887, 888, 890, 900, 902, 905, 908, 910, 987, 1038], "disrupt": [367, 378], "dissemin": 1007, "dissimilar": [223, 342, 394, 404, 450, 688, 692, 984, 1036, 1046], "dissimilarity_matrix_": 688, "dist": [80, 221, 232, 384, 467, 468, 469, 470, 471, 472, 473, 474, 697, 760, 766, 839, 840], "dist_": [467, 472], "dist_embed": 293, "dist_linkag": 172, "dist_matrix": 450, "dist_matrix_": 686, "distanc": [9, 39, 40, 55, 57, 60, 61, 65, 67, 77, 81, 83, 100, 148, 163, 166, 172, 185, 200, 202, 220, 222, 225, 232, 238, 283, 285, 286, 291, 293, 295, 296, 305, 310, 315, 319, 320, 342, 351, 352, 366, 377, 389, 392, 394, 404, 407, 409, 412, 413, 417, 418, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 453, 454, 455, 456, 457, 459, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 536, 538, 545, 605, 606, 613, 617, 618, 620, 621, 626, 656, 657, 664, 666, 672, 673, 674, 675, 676, 686, 687, 688, 690, 691, 692, 693, 694, 697, 701, 722, 731, 755, 757, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 775, 776, 777, 778, 789, 790, 793, 828, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 878, 893, 897, 899, 901, 903, 904, 905, 907, 908, 909, 910, 977, 981, 984, 985, 987, 990, 993, 997, 999, 1001, 1002, 1008, 1009, 1021, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "distance_matrix": 172, "distance_metr": [775, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853], "distance_threshold": [41, 439, 443, 1039, 1042], "distancemetr": [394, 413, 842, 990, 1038, 1042, 1043, 1044, 1047], "distancemetric64": [839, 840], "distances_": [41, 439, 443, 1042], "distant": [407, 690, 707, 990], "distil": 225, "distinct": [60, 260, 327, 351, 353, 375, 382, 385, 394, 395, 411, 414, 415, 587, 797, 806, 814, 873, 874, 894, 895, 976, 983, 990, 993, 1023, 1038], "distinguish": [4, 20, 40, 80, 92, 100, 201, 257, 278, 375, 382, 394, 395, 417, 976, 987, 990, 993], "distort": [198, 232, 377, 405, 406, 876, 888, 893, 984, 997, 999], "distribut": [3, 4, 8, 9, 10, 13, 16, 20, 27, 34, 37, 39, 44, 52, 53, 55, 57, 62, 75, 79, 80, 81, 86, 92, 111, 113, 124, 128, 143, 148, 151, 160, 166, 168, 169, 172, 175, 178, 199, 201, 203, 222, 224, 228, 232, 238, 245, 250, 251, 256, 260, 266, 268, 278, 284, 288, 297, 304, 305, 307, 310, 313, 321, 325, 326, 343, 346, 351, 366, 367, 373, 376, 377, 378, 380, 381, 384, 385, 386, 394, 401, 405, 406, 407, 409, 411, 412, 413, 419, 445, 447, 467, 468, 469, 470, 471, 472, 473, 474, 486, 496, 501, 513, 514, 515, 516, 517, 521, 530, 531, 534, 548, 549, 550, 561, 609, 623, 638, 640, 642, 643, 646, 656, 657, 667, 677, 678, 686, 687, 688, 690, 704, 706, 721, 749, 786, 794, 795, 800, 801, 808, 810, 814, 815, 825, 835, 838, 844, 848, 855, 862, 875, 876, 877, 878, 879, 887, 888, 889, 894, 895, 903, 914, 938, 955, 976, 981, 983, 985, 986, 987, 989, 990, 992, 993, 999, 1000, 1005, 1007, 1008, 1009, 1014, 1018, 1022, 1024, 1025, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "district": [164, 375], "distutils_use_sdk": 378, "ditenberg": 1037, "div": [238, 932], "dive": [86, 380, 386], "diverg": [15, 123, 220, 225, 288, 536, 538, 545, 690, 855, 984, 986, 987, 992, 994, 1037, 1038, 1043], "divers": [394, 414], "divid": [37, 43, 48, 91, 95, 145, 156, 199, 238, 245, 352, 362, 376, 377, 404, 407, 411, 412, 414, 467, 468, 469, 470, 471, 472, 473, 474, 510, 517, 532, 539, 674, 675, 676, 717, 723, 731, 735, 753, 791, 793, 856, 857, 901, 904, 936, 939, 940, 976, 984, 986, 987, 990, 997, 1001, 1023, 1030, 1037, 1038, 1041], "dividend": 987, "divis": [319, 407, 415, 588, 589, 592, 710, 711, 726, 727, 735, 743, 780, 781, 784, 987, 1022, 1034, 1038, 1039, 1042, 1046, 1047], "divisor": 987, "divo": 1040, "divyanshu": 1043, "divyaprabha": 1041, "diwakar": 1044, "dixon": [766, 1040, 1041], "dizietasahi": 1040, "di\u1ec5n": 1045, "djipei": [1035, 1036], "dl": 674, "dlabal": 1034, "dll": 1044, "dlovel": 1038, "dmallia17": 1043, "dmitri": [1035, 1037, 1038, 1039, 1043, 1046, 1047], "dmitrij": 1034, "dmytro": 1043, "dn": [0, 990], "dna": [392, 626, 977], "dnf": 397, "do": [0, 4, 10, 13, 25, 27, 42, 55, 61, 67, 74, 90, 99, 101, 104, 115, 118, 120, 124, 125, 127, 132, 145, 156, 163, 169, 170, 171, 196, 199, 203, 217, 220, 222, 235, 236, 238, 251, 255, 258, 261, 263, 281, 283, 285, 289, 318, 322, 330, 335, 338, 342, 343, 346, 351, 352, 353, 360, 362, 366, 367, 368, 375, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 394, 395, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 426, 448, 459, 501, 534, 536, 540, 542, 550, 553, 579, 580, 586, 587, 589, 630, 631, 643, 644, 650, 653, 654, 657, 664, 666, 674, 734, 760, 775, 779, 813, 816, 831, 832, 836, 863, 864, 866, 873, 877, 879, 884, 885, 887, 888, 889, 890, 907, 908, 909, 910, 918, 961, 976, 979, 981, 983, 984, 987, 988, 990, 991, 995, 997, 1002, 1003, 1007, 1008, 1011, 1012, 1014, 1021, 1022, 1023, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "do_early_stopping_": [559, 560], "doc": [0, 4, 8, 13, 19, 351, 353, 367, 380, 384, 385, 388, 394, 397, 400, 401, 415, 586, 587, 589, 775, 778, 789, 790, 822, 1023, 1030, 1034, 1044], "doc_it": 8, "doc_topic_distr": [534, 1037], "doc_topic_prior": [412, 534], "doc_topic_prior_": 534, "docker": [388, 401, 1043, 1044], "dock\u00e8": [1039, 1040, 1041, 1047], "docs_new": 1023, "docs_test": 1023, "docstr": [380, 382, 386, 394, 446, 459, 470, 697, 699, 926, 976, 987, 990, 991, 1001, 1030, 1037, 1038, 1043, 1044, 1047], "doctest": [380, 394, 1015, 1030], "doctest_mod": 1015, "document": [3, 6, 7, 10, 12, 15, 16, 17, 18, 21, 22, 26, 31, 37, 45, 51, 56, 57, 58, 60, 61, 64, 70, 71, 72, 73, 89, 90, 92, 95, 109, 116, 118, 119, 128, 129, 132, 135, 145, 156, 159, 169, 170, 171, 180, 182, 196, 197, 214, 229, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 250, 254, 258, 260, 261, 267, 272, 301, 302, 311, 316, 319, 320, 322, 327, 329, 343, 346, 353, 354, 360, 366, 367, 368, 369, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 388, 392, 394, 397, 398, 401, 404, 406, 407, 412, 415, 418, 442, 445, 446, 447, 448, 451, 455, 462, 486, 487, 497, 499, 509, 519, 521, 534, 542, 562, 586, 587, 588, 589, 592, 602, 629, 637, 641, 656, 657, 664, 666, 671, 672, 673, 674, 694, 695, 697, 701, 703, 715, 734, 755, 756, 766, 775, 776, 777, 790, 792, 796, 799, 800, 802, 810, 818, 821, 823, 826, 829, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 860, 871, 899, 904, 915, 918, 920, 933, 953, 976, 983, 985, 987, 988, 989, 990, 991, 995, 1001, 1004, 1005, 1006, 1009, 1012, 1016, 1021, 1023, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "document_clust": 1036, "document_nam": 19, "doddington": 987, "doe": [4, 7, 8, 9, 12, 13, 24, 25, 31, 34, 40, 46, 53, 55, 57, 70, 72, 73, 86, 105, 111, 116, 117, 120, 121, 122, 126, 127, 132, 148, 157, 169, 170, 183, 196, 199, 205, 217, 220, 221, 222, 225, 228, 231, 232, 233, 235, 236, 238, 247, 248, 255, 260, 262, 263, 267, 269, 270, 281, 283, 296, 305, 307, 309, 311, 312, 318, 319, 328, 329, 336, 338, 346, 348, 351, 352, 353, 366, 367, 374, 378, 380, 381, 382, 384, 388, 393, 394, 398, 401, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 432, 438, 440, 444, 445, 447, 448, 452, 454, 463, 465, 471, 477, 485, 497, 501, 506, 525, 533, 535, 536, 537, 542, 544, 547, 548, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 579, 580, 581, 586, 587, 589, 591, 592, 595, 600, 604, 608, 630, 636, 647, 648, 649, 652, 653, 654, 657, 669, 680, 681, 696, 698, 700, 705, 725, 726, 727, 731, 733, 735, 740, 743, 775, 780, 781, 784, 785, 791, 796, 799, 800, 810, 856, 860, 861, 862, 864, 866, 868, 871, 872, 873, 876, 879, 880, 888, 891, 892, 896, 899, 900, 907, 908, 909, 910, 914, 919, 923, 936, 939, 940, 953, 955, 971, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 995, 997, 1001, 1002, 1003, 1023, 1030, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "doepk": 1037, "doesn": [8, 169, 199, 235, 246, 281, 301, 338, 388, 394, 397, 407, 415, 416, 420, 432, 473, 630, 631, 664, 666, 674, 714, 823, 826, 831, 841, 842, 856, 868, 869, 986, 987, 1003, 1034, 1047], "dog": [318, 319, 321, 322, 580, 780, 880, 997], "dohmatob": [1035, 1036, 1037], "dohri": 1047, "doi": [175, 199, 217, 380, 407, 674], "dok": [551, 552, 866, 1043], "dokato": 1037, "dolan": 375, "dollar": [169, 375], "dolmatov": 1040, "dolphin": 351, "domain": [127, 199, 311, 394, 396, 411, 633, 719, 720, 721, 797, 798, 803, 804, 805, 983, 1008], "domin": [117, 164, 172, 199, 204, 238, 269, 310, 375, 386, 405, 879, 989, 997, 1003, 1046], "domingo": [27, 785, 987], "dominik": [1037, 1046], "don": [12, 27, 54, 70, 127, 169, 221, 235, 236, 260, 283, 328, 335, 339, 351, 352, 366, 374, 380, 382, 384, 386, 388, 393, 398, 408, 415, 644, 650, 827, 907, 908, 909, 910, 951, 976, 983, 986, 988, 991, 993, 1001, 1023, 1034, 1039, 1046, 1047, 1048], "don86": 1037, "donald": [6, 375, 407, 722, 977], "donald_rumsfeld": 1019, "donat": 229, "done": [6, 8, 9, 11, 13, 15, 17, 19, 48, 50, 52, 53, 98, 127, 145, 148, 156, 169, 170, 175, 178, 183, 185, 203, 216, 234, 235, 250, 258, 261, 264, 269, 283, 308, 317, 351, 352, 353, 362, 367, 374, 378, 380, 382, 384, 387, 388, 389, 392, 394, 398, 407, 409, 411, 412, 414, 439, 440, 443, 448, 450, 470, 480, 481, 482, 483, 487, 533, 559, 560, 580, 604, 605, 606, 626, 628, 630, 632, 641, 642, 643, 657, 738, 794, 795, 796, 810, 815, 816, 863, 877, 972, 976, 977, 980, 983, 984, 987, 989, 990, 991, 997, 1000, 1001, 1002, 1003, 1008, 1014, 1018, 1019, 1021, 1023, 1030, 1032, 1037, 1040, 1042, 1046], "dong": 1040, "donn": 1035, "donoho": [687, 691, 984], "donor": [148, 377], "donovan": 1036, "dor": 1038, "dorin": [63, 446], "dormagen": 1040, "dot": [17, 32, 33, 44, 49, 54, 57, 62, 78, 79, 80, 82, 85, 86, 96, 97, 98, 102, 104, 111, 114, 151, 152, 158, 159, 169, 180, 183, 191, 193, 194, 206, 233, 246, 247, 249, 250, 264, 334, 336, 342, 366, 382, 386, 389, 394, 404, 412, 415, 531, 536, 538, 545, 588, 589, 612, 644, 645, 648, 650, 651, 652, 655, 658, 659, 660, 661, 679, 682, 685, 758, 760, 871, 911, 937, 985, 989, 997, 1001, 1002, 1022, 1039], "dot_data": [911, 1003], "dot_product": 937, "dotproduct": [154, 155, 160, 417, 609, 623], "dotson": 1035, "doubl": [34, 117, 272, 380, 394, 412, 536, 538, 539, 545, 839, 840, 850, 971, 977, 1002, 1003, 1030, 1040, 1041], "doubt": [380, 381, 384, 983, 993, 1007], "doucet": 1044, "douetteau": 1012, "doug": [1031, 1032, 1042], "dougal": [1032, 1034, 1035, 1037, 1038, 1039, 1040], "dougla": 1038, "douillard": 1037, "doumouro": 1039, "douriez": [1040, 1041], "dowl": 1036, "down": [46, 47, 81, 111, 214, 215, 222, 232, 233, 235, 263, 278, 302, 305, 342, 362, 374, 383, 388, 394, 409, 412, 441, 448, 454, 588, 591, 592, 637, 647, 771, 775, 778, 868, 869, 874, 877, 878, 889, 901, 904, 911, 983, 1014, 1022, 1038, 1048], "downarrow": 989, "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 373, 375, 377, 378, 384, 385, 388, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 508, 1003, 1019, 1021, 1023, 1025, 1034, 1035, 1038, 1042, 1043, 1044], "download_20newsgroup": 1034, "download_if_miss": [486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 1037], "download_url": 8, "downsampl": 98, "downscal": 1023, "downsid": 353, "downstream": [4, 80, 312, 353, 415, 529, 532, 535, 539, 540, 604, 872, 997, 1040], "downweight": [409, 534], "dowon": [1038, 1039], "dozen": [393, 417], "do\u0161ilovi\u0107": [1047, 1048], "dp": [246, 251], "dpgmm": [246, 251, 1030, 1034, 1036], "dpi": [210, 913, 1043], "dpy_debug": 386, "dqd": 386, "dr": [0, 148, 377, 407, 1044], "draft": [384, 395], "dragon": 997, "drama": 415, "dramat": 368, "dramsch": 1040, "drastic": [151, 232, 268, 407, 411, 990, 1000], "draw": [4, 7, 60, 160, 169, 195, 239, 262, 267, 338, 387, 410, 412, 413, 414, 553, 554, 555, 556, 561, 562, 563, 564, 609, 632, 699, 802, 818, 911, 913, 986, 1007, 1017, 1043, 1044], "drawback": [119, 216, 979, 982], "drawcoastlin": [11, 296], "drawcountri": [11, 296], "drawn": [7, 52, 80, 114, 147, 151, 160, 168, 239, 267, 287, 351, 376, 407, 413, 414, 417, 419, 467, 468, 469, 470, 471, 472, 473, 474, 513, 521, 531, 553, 554, 555, 556, 561, 562, 563, 564, 609, 625, 630, 639, 835, 891, 892, 909, 910, 983, 997, 999, 1033], "drawstyl": [356, 698], "draxu": 1030, "drew": 1039, "drewhogg": 1045, "drewmjohnston": 1039, "drgfreeman": 1040, "driessen": [409, 467, 472, 993], "drift": 1008, "drivag": [199, 217], "drive": [368, 412, 413, 547, 1001, 1012, 1023], "driven": [0, 172, 1012], "driver": [199, 217, 1045], "drop": [4, 5, 13, 71, 75, 86, 127, 156, 168, 169, 170, 172, 199, 203, 217, 238, 242, 270, 311, 317, 320, 322, 352, 384, 388, 408, 412, 414, 462, 465, 565, 566, 567, 568, 693, 698, 700, 779, 786, 858, 872, 878, 977, 983, 987, 997, 1007, 1030, 1031, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "drop_binary_enc": 872, "drop_dupl": 272, "drop_enc": [872, 997], "drop_first": 693, "drop_idx": 872, "drop_idx_": [872, 1041, 1045], "drop_intermedi": [698, 700, 779, 786, 1046], "drop_nul": 13, "dropdown": 380, "dropna": 156, "dropped_result": 121, "dropper": 121, "dror": 1039, "dross": 532, "dro\u017cd\u017c": 1033, "drskd": 1044, "druck": 1044, "drucker": [112, 414, 552], "drug": 983, "dry": 170, "dryden": 70, "ds_ana": 1043, "ds_cnt": [31, 307, 308], "dschult": 17, "dscullei": 447, "dseg": 70, "dsouza": [1041, 1042, 1043, 1044], "dsquareindia": 1036, "dss": 1012, "dt": [50, 98, 133, 414, 415, 1003], "dtreeviz": 1007, "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 65, 70, 71, 121, 123, 125, 126, 128, 152, 153, 154, 164, 169, 170, 201, 217, 242, 245, 258, 264, 268, 278, 290, 296, 311, 318, 319, 321, 326, 360, 374, 375, 380, 382, 392, 394, 403, 408, 411, 414, 422, 423, 425, 428, 440, 441, 445, 446, 447, 448, 449, 451, 457, 462, 464, 465, 467, 470, 472, 486, 487, 488, 489, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 512, 520, 540, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 583, 584, 586, 587, 589, 591, 592, 599, 600, 604, 625, 626, 627, 628, 630, 631, 638, 639, 642, 643, 644, 650, 654, 655, 658, 659, 660, 661, 662, 663, 669, 671, 673, 695, 697, 703, 712, 713, 728, 735, 738, 752, 783, 802, 820, 822, 823, 835, 839, 840, 842, 850, 864, 870, 872, 873, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 893, 901, 902, 903, 904, 905, 907, 908, 909, 910, 916, 917, 919, 920, 952, 962, 963, 964, 965, 968, 974, 977, 997, 1000, 1002, 1014, 1031, 1033, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dtype_exclud": [71, 464], "dtype_includ": [71, 121, 132, 238, 408, 464], "du": [0, 1, 2, 1030, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dua": 1039, "dual": [70, 72, 315, 346, 351, 415, 416, 469, 470, 476, 609, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 679, 682, 839, 840, 899, 900, 901, 904, 1002, 1032, 1041, 1044, 1046], "dual_coef_": [533, 641, 901, 902, 903, 904, 905, 1002, 1034], "dual_gap": [469, 470, 476, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682], "dual_gap_": [644, 645, 650, 651, 658, 659, 660, 661, 1043], "dualiti": [470, 983], "dualtre": [839, 840], "duan": [1039, 1041], "duart": [1035, 1043, 1045], "dubai": 415, "duboi": [1036, 1038], "dubou": 1040, "dubourg": [0, 2, 154, 158, 1012, 1030, 1034], "duchesnai": [0, 2, 1030], "duck": [382, 394, 1040], "ducktyp": [1034, 1047], "duckworth": 1030, "ducout": 1044, "duda": [377, 981], "due": [9, 13, 26, 27, 53, 55, 60, 75, 111, 114, 151, 169, 170, 178, 183, 190, 197, 199, 201, 216, 217, 232, 238, 246, 268, 269, 281, 283, 310, 311, 342, 346, 351, 352, 353, 380, 386, 394, 397, 405, 407, 411, 412, 414, 417, 441, 444, 445, 457, 533, 537, 541, 542, 572, 669, 796, 799, 800, 804, 806, 810, 820, 821, 824, 827, 831, 832, 864, 868, 869, 879, 977, 983, 984, 986, 987, 988, 990, 994, 1001, 1002, 1008, 1022, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "dueck": [38, 438, 452], "dugnat": 1044, "duhaim": 1038, "dummi": [111, 112, 199, 217, 235, 263, 369, 382, 385, 402, 729, 872, 881, 988, 997, 1003, 1025, 1031, 1033, 1034, 1035, 1037], "dummy_classifiers_misclassification_error": 111, "dummy_clf": [111, 549], "dummy_leaf_": 440, "dummy_regr": 550, "dummy_sev": 217, "dummybiclust": 422, "dummyclassifi": [111, 263, 550, 729, 987, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1048], "dummyestim": [557, 558], "dummyregressor": [199, 217, 549, 987, 988, 1031, 1033, 1034, 1037, 1038, 1040, 1043, 1044, 1048], "dumont": 1003, "dump": [17, 401, 485, 839, 840], "dump_svmlight_fil": [1030, 1031, 1035, 1045, 1047], "duong": 1047, "duplic": [367, 379, 380, 394, 407, 418, 442, 446, 447, 513, 633, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 823, 870, 973, 990, 1030, 1033, 1042, 1044, 1046, 1047], "dupont": 12, "dupr": [191, 207, 283, 285, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "dupr\u00e9": [0, 1, 307, 308, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "duqu": 1043, "durat": [4, 8, 199, 217, 238, 285, 353, 367, 953, 954, 983], "duration_sec": 10, "duration_test": 351, "duration_train": 351, "dure": [0, 4, 5, 12, 13, 50, 55, 58, 72, 75, 86, 100, 115, 121, 122, 127, 129, 145, 151, 156, 169, 170, 172, 188, 200, 207, 258, 262, 283, 317, 318, 342, 366, 368, 378, 380, 382, 385, 394, 395, 407, 408, 412, 414, 415, 417, 418, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 457, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 611, 612, 613, 615, 617, 618, 620, 621, 623, 625, 626, 627, 628, 630, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 698, 786, 794, 795, 796, 799, 800, 810, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 977, 979, 983, 984, 990, 997, 999, 1003, 1018, 1023, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "duron": 1044, "duti": 395, "dutt": 1046, "dutta": 1047, "duv2014": 417, "duvenaud": [417, 620, 621], "dwight": 1045, "dx": [12, 14, 697], "dx_c": 994, "dy": [12, 697], "dye": 1043, "dylan": [1037, 1040], "dynam": [12, 13, 170, 553, 554, 555, 556, 561, 562, 563, 564, 577, 578, 674, 675, 676, 1003, 1012, 1036, 1042, 1047], "dziki": 1033, "d\u00b2": 217, "d\u00f6pfert": 1038, "e": [0, 4, 8, 10, 11, 13, 25, 26, 27, 32, 34, 53, 55, 57, 61, 70, 78, 80, 81, 82, 85, 86, 90, 98, 100, 111, 114, 121, 123, 124, 127, 128, 138, 144, 147, 148, 159, 168, 169, 170, 175, 179, 183, 188, 189, 199, 200, 201, 203, 217, 220, 221, 234, 235, 256, 260, 261, 263, 265, 266, 274, 275, 278, 281, 289, 296, 307, 310, 315, 317, 346, 353, 358, 359, 360, 362, 366, 367, 368, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 392, 393, 394, 397, 398, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 435, 437, 439, 441, 442, 443, 445, 447, 448, 452, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 496, 498, 499, 500, 501, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 586, 587, 588, 589, 591, 592, 595, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 620, 621, 628, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 686, 688, 690, 692, 695, 697, 699, 702, 703, 706, 707, 725, 726, 727, 728, 735, 738, 739, 752, 760, 764, 775, 782, 785, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 809, 810, 814, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 855, 856, 857, 859, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 894, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 914, 930, 935, 936, 938, 941, 942, 944, 947, 955, 962, 973, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1008, 1011, 1012, 1021, 1022, 1023, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "e0129126": 374, "e11": 375, "e2": [893, 983], "e41a1c": [44, 62], "e501": [148, 351], "e_": 412, "each": [4, 7, 8, 10, 11, 12, 13, 15, 17, 20, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 55, 58, 60, 61, 70, 71, 73, 74, 75, 85, 86, 89, 90, 91, 92, 95, 96, 100, 102, 103, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 127, 128, 130, 131, 132, 133, 134, 135, 144, 146, 148, 153, 155, 160, 163, 164, 168, 169, 170, 172, 175, 178, 185, 186, 188, 193, 197, 199, 200, 201, 203, 204, 207, 214, 217, 221, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 245, 248, 250, 254, 255, 256, 258, 260, 261, 263, 265, 266, 269, 270, 278, 281, 283, 286, 288, 292, 294, 296, 299, 300, 302, 305, 306, 307, 308, 310, 311, 312, 315, 317, 318, 319, 321, 322, 325, 326, 327, 330, 338, 342, 344, 346, 352, 353, 356, 357, 360, 362, 366, 367, 368, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 394, 398, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 705, 706, 708, 711, 717, 722, 725, 726, 727, 735, 736, 742, 743, 745, 747, 748, 750, 751, 755, 756, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 773, 775, 776, 777, 778, 780, 781, 782, 784, 785, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 925, 930, 931, 936, 938, 939, 943, 944, 955, 963, 964, 965, 968, 977, 979, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1012, 1014, 1018, 1020, 1021, 1022, 1023, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "eargl": 1044, "earl": 1033, "earli": [4, 7, 15, 44, 62, 110, 111, 117, 120, 125, 136, 166, 177, 187, 188, 218, 309, 316, 345, 394, 414, 439, 443, 447, 461, 488, 494, 534, 535, 536, 537, 544, 551, 552, 557, 558, 559, 560, 569, 625, 643, 654, 664, 665, 666, 674, 676, 690, 747, 825, 856, 857, 961, 984, 990, 997, 1006, 1008, 1009, 1012, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047], "earlier": [117, 170, 203, 374, 380, 410, 830, 833, 997, 1028, 1031, 1043, 1045], "earliest": [374, 984], "early_exager": 1037, "early_exagger": 690, "early_stop": [117, 127, 170, 207, 299, 318, 351, 394, 414, 559, 560, 664, 665, 666, 674, 675, 676, 856, 857, 1001, 1038, 1041, 1044, 1045], "earn": [168, 169, 395], "earth": [222, 352, 761, 1007], "eas": [72, 172, 250, 310, 380, 383, 386, 983, 1001, 1007, 1008, 1012, 1041, 1042, 1044], "easi": [91, 170, 207, 217, 248, 258, 260, 338, 351, 362, 375, 386, 388, 392, 393, 407, 414, 498, 502, 508, 866, 976, 982, 986, 994, 997, 1007, 1008, 1012, 1023, 1040, 1045, 1046], "easier": [44, 62, 66, 82, 121, 178, 184, 230, 238, 257, 258, 305, 338, 351, 362, 375, 380, 382, 385, 388, 392, 397, 409, 411, 466, 513, 897, 930, 982, 987, 994, 1003, 1008, 1012, 1023, 1039, 1044], "easiest": [382, 388, 408, 984], "easili": [4, 9, 31, 90, 145, 172, 202, 215, 233, 235, 239, 242, 260, 262, 269, 288, 307, 380, 382, 394, 395, 408, 414, 415, 417, 447, 981, 983, 984, 997, 1001, 1002, 1003, 1011, 1015, 1018, 1023, 1036], "easlii": 229, "ec": [305, 528], "ecat": 375, "echo": [378, 384], "eckert": 1035, "eckhart": 492, "eclf": [133, 134, 414], "eclf1": 567, "eclf2": 567, "eclf3": 567, "ecml": 0, "ecoc": 278, "ecolog": [11, 296, 375, 496], "econom": [168, 169, 260], "econometr": 983, "econometrica": 983, "ecosystem": [380, 388, 977, 1006, 1012], "ecuador": [11, 296, 375, 496], "ed": [115, 126, 407, 414, 518, 557, 558, 999, 1030, 1037], "eddi": [1033, 1047], "eden": 1045, "edern": [1045, 1046], "edg": [12, 26, 46, 66, 98, 121, 223, 267, 388, 394, 404, 407, 409, 451, 559, 560, 583, 584, 586, 587, 589, 794, 836, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 864, 912, 997, 1000, 1012, 1036, 1038, 1041, 1044], "edge_model": 12, "edgecolor": [12, 24, 30, 31, 34, 42, 45, 56, 60, 67, 91, 92, 101, 113, 120, 128, 130, 131, 133, 134, 140, 143, 152, 153, 155, 159, 170, 182, 191, 201, 208, 211, 212, 213, 232, 233, 234, 236, 238, 245, 248, 260, 263, 274, 286, 289, 290, 291, 294, 299, 307, 308, 310, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 357, 358, 359, 629], "edit": [42, 377, 378, 379, 380, 384, 388, 392, 397, 528, 532, 829, 981, 983, 988, 994, 1023], "editor": [380, 388, 392], "edm": 983, "edoardo": [1045, 1047], "edouard": [0, 2, 1030], "edson": [987, 1035], "edu": [6, 8, 11, 17, 46, 148, 158, 175, 181, 220, 248, 259, 278, 288, 296, 309, 351, 374, 375, 377, 407, 447, 485, 498, 500, 506, 507, 508, 532, 639, 642, 647, 656, 664, 665, 674, 677, 680, 681, 834, 836, 837, 838, 848, 855, 892, 894, 907, 908, 983, 985, 1019], "eduardo": [1033, 1035, 1043, 1044], "educ": [168, 169, 322, 380, 494, 714, 988], "edvardlindelof": 1040, "edward": [612, 617, 620, 1033, 1038, 1039, 1040, 1041, 1045], "edwinensa": 1036, "edwinwenink": 1043, "eec": [447, 639], "ef": 1045, "eff": 1003, "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 57, 62, 65, 69, 73, 76, 86, 92, 98, 100, 111, 122, 124, 126, 128, 129, 132, 147, 151, 152, 156, 158, 166, 167, 169, 170, 172, 173, 183, 194, 199, 200, 201, 203, 204, 205, 216, 219, 220, 222, 224, 226, 231, 238, 242, 246, 250, 256, 260, 261, 262, 265, 268, 269, 270, 272, 283, 302, 304, 306, 309, 313, 316, 324, 331, 338, 342, 343, 346, 347, 348, 351, 352, 353, 362, 367, 380, 382, 385, 392, 394, 405, 407, 408, 412, 413, 414, 415, 417, 418, 435, 441, 442, 444, 445, 447, 448, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 488, 494, 498, 512, 522, 523, 531, 532, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 592, 604, 607, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 689, 690, 699, 701, 750, 782, 794, 797, 798, 801, 803, 805, 807, 814, 815, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 849, 850, 856, 857, 859, 862, 863, 864, 865, 866, 868, 869, 871, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 936, 953, 961, 976, 981, 983, 984, 986, 987, 988, 990, 994, 995, 997, 1000, 1002, 1003, 1009, 1019, 1021, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "effective_learning_r": [856, 857], "effective_metric_": [841, 842, 843, 845, 847, 849, 850, 851, 990], "effective_metric_params_": [841, 842, 843, 845, 847, 849, 850, 851], "effective_n_job": 955, "effective_rank": [519, 522], "efficaci": 188, "effici": [4, 5, 12, 14, 42, 46, 53, 55, 95, 112, 117, 122, 130, 175, 188, 192, 201, 207, 288, 351, 366, 372, 374, 380, 382, 383, 385, 386, 392, 394, 401, 404, 406, 407, 412, 413, 414, 417, 419, 440, 441, 444, 445, 447, 448, 450, 452, 455, 457, 459, 460, 494, 531, 532, 533, 536, 538, 539, 542, 561, 564, 572, 579, 580, 586, 587, 589, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 630, 631, 632, 636, 638, 653, 656, 657, 662, 664, 665, 666, 671, 673, 674, 675, 676, 677, 683, 684, 686, 723, 753, 760, 776, 777, 794, 795, 796, 810, 828, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 864, 876, 888, 892, 899, 908, 910, 936, 955, 976, 979, 981, 983, 984, 986, 987, 988, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1007, 1012, 1014, 1018, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "efficiencywarn": [854, 1045], "effort": [317, 380, 386, 1007, 1012, 1041, 1043], "efron": [148, 377, 680, 681, 983], "eg": 971, "egashira": 1045, "egg": 1038, "egger": 1048, "egin": 407, "egli": [1037, 1047], "egor": 1042, "ehrenheim": [1037, 1038], "eib": [830, 988], "eickenberg": [1030, 1032, 1033, 1034, 1035], "eig": 1037, "eig_tol": 1031, "eig_val": 245, "eig_vec": 245, "eigen": [450, 547, 671, 689, 693, 981, 1036, 1039], "eigen_solv": [12, 44, 46, 66, 220, 221, 412, 450, 460, 533, 686, 687, 689, 691, 693, 984, 1031, 1040, 1043, 1044, 1045], "eigen_tol": [46, 450, 460, 689, 693, 1031, 1044, 1045], "eigendecompos": 412, "eigendecomposit": [460, 671, 689, 693, 865, 979], "eigenfac": [3, 15, 16, 48, 166, 234, 237, 351, 375, 412, 492, 539, 695, 711, 810, 825, 879, 904, 1004, 1009, 1017, 1030], "eigenface_titl": [6, 1019], "eigenmap": [220, 687, 689, 691, 693, 1024, 1025, 1031], "eigensolv": [412, 450, 460, 533, 542, 693, 984], "eigenvalu": [90, 250, 322, 404, 407, 409, 450, 460, 467, 468, 469, 470, 471, 472, 473, 474, 533, 539, 547, 671, 686, 687, 689, 691, 693, 865, 979, 984, 997, 1032, 1036, 1039, 1040, 1041, 1042], "eigenvalues_": [533, 1043], "eigenvector": [3, 16, 46, 86, 90, 166, 245, 407, 450, 460, 532, 533, 539, 548, 686, 687, 689, 693, 984, 1009, 1030, 1034, 1044], "eigenvector_centr": 17, "eigenvectors_": [533, 1043], "eigh": [34, 245, 246, 247, 250, 251, 412, 419, 531, 533, 1045], "eight": 1023, "eighteenth": 407, "eighth": [561, 993], "eigsh": [412, 533, 1036, 1037], "eiler": 997, "einsum": 293, "eitan": 1047, "either": [4, 10, 27, 30, 71, 117, 120, 121, 169, 187, 189, 229, 238, 255, 264, 269, 288, 346, 351, 360, 366, 367, 372, 375, 378, 380, 381, 382, 386, 394, 398, 401, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 440, 445, 450, 485, 494, 510, 522, 531, 532, 534, 542, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 580, 581, 582, 586, 587, 588, 589, 591, 592, 595, 600, 605, 606, 608, 609, 620, 625, 628, 630, 631, 648, 652, 654, 662, 674, 676, 680, 681, 688, 695, 696, 700, 704, 705, 709, 710, 718, 721, 723, 724, 725, 726, 727, 732, 735, 736, 737, 739, 749, 753, 766, 771, 775, 779, 780, 781, 782, 784, 785, 786, 791, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 826, 829, 859, 889, 890, 896, 899, 900, 907, 908, 909, 910, 914, 944, 948, 976, 983, 987, 988, 989, 990, 991, 992, 995, 997, 1001, 1002, 1014, 1022, 1023, 1030, 1033, 1039, 1040, 1041, 1044], "ekaterina": [1036, 1037, 1038, 1039, 1041, 1046], "ekman": [1032, 1036], "el": [526, 1043, 1045, 1046], "elabonga": [1046, 1047], "elabor": 988, "elad": [662, 683, 684], "elaps": [11, 47, 67, 117, 118, 119, 366, 462, 465, 567, 568, 858, 859, 860, 861], "elapsed_tim": [7, 39, 67, 118, 119, 132, 216], "elast": [166, 177, 183, 185, 186, 190, 192, 193, 210, 218, 232, 235, 273, 295, 406, 469, 470, 476, 499, 522, 644, 645, 650, 655, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 682, 976, 987, 1001, 1009, 1010, 1025, 1030, 1035, 1039, 1040], "elastic_net": 210, "elastic_net_color": 210, "elastic_net_contour": 210, "elasticnet": [7, 10, 180, 190, 268, 273, 366, 386, 392, 412, 645, 650, 655, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 983, 988, 1001, 1030, 1031, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1048], "elasticnetcv": [183, 394, 398, 644, 650, 658, 659, 660, 661, 679, 983, 1030, 1033, 1041, 1043, 1044, 1047, 1048], "elasticnetifittedelasticnet": 180, "elbo": 412, "eldar": [409, 420, 473], "eleanor": 1045, "elec2": 127, "electr": [12, 127, 377, 407], "electron": [19, 148, 375, 377, 536, 538, 545, 625], "element": [54, 95, 114, 115, 126, 230, 254, 259, 267, 269, 316, 352, 356, 360, 369, 377, 379, 380, 382, 389, 395, 404, 406, 407, 411, 412, 414, 415, 418, 442, 444, 450, 462, 485, 506, 510, 512, 518, 520, 524, 525, 529, 535, 536, 538, 548, 555, 556, 557, 558, 562, 563, 564, 565, 566, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 615, 630, 656, 657, 664, 665, 666, 674, 675, 676, 705, 715, 724, 731, 733, 743, 760, 766, 775, 779, 785, 786, 829, 839, 840, 841, 842, 843, 845, 847, 849, 850, 854, 856, 857, 862, 878, 879, 882, 886, 899, 904, 907, 908, 909, 910, 938, 939, 940, 958, 960, 961, 973, 981, 983, 987, 988, 991, 994, 997, 998, 999, 1003, 1012, 1014, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1046], "elementari": [893, 999], "elementwis": [412, 536, 538, 545], "elena": 1037, "eleni": 1043, "eleph": 580, "elev": [45, 67, 90, 101, 170, 196, 220, 224, 489], "eleven": 1008, "elfner": 1044, "eli5": 1007, "elia": 1036, "eliaschiavon": 1045, "eliasi": [1045, 1046, 1047], "elicit": 987, "elif": [7, 8, 179, 201, 236, 247, 288, 875], "elimin": [32, 51, 89, 91, 138, 142, 145, 148, 149, 166, 255, 258, 259, 263, 265, 287, 325, 326, 328, 406, 407, 411, 446, 500, 513, 591, 592, 595, 600, 656, 799, 800, 815, 904, 973, 987, 1009, 1010, 1012, 1025, 1030], "elisabeth": [320, 1047], "elizabeth": [1037, 1039, 1042], "elkan": [27, 316, 405, 435, 441, 445, 457, 674, 1036, 1040, 1041, 1043, 1044], "ell": [34, 245, 246, 247, 251, 404], "ell_": 983, "ell_0": [983, 987], "ell_1": [412, 983], "ell_2": 983, "ella": 999, "ellen": 1037, "elli": [1036, 1039], "elliot": [1047, 1048], "elliott": 1037, "ellips": [34, 228, 245, 246, 247, 250, 251, 993], "ellipsoid": [9, 29, 33, 35, 80, 81, 82, 166, 244, 245, 247, 248, 249, 250, 251, 252, 547, 548, 629, 794, 795, 981, 986, 1009], "ellipt": [57, 983], "ellipticenvelop": [9, 228, 468, 471, 472, 473, 474, 561, 993, 1030, 1033, 1037, 1038, 1043], "eln": 1041, "elong": 407, "els": [4, 8, 11, 12, 13, 19, 34, 41, 44, 49, 55, 56, 62, 82, 99, 114, 120, 121, 124, 159, 169, 170, 188, 201, 217, 221, 228, 232, 234, 235, 236, 237, 238, 260, 261, 264, 271, 283, 288, 296, 299, 300, 307, 351, 352, 360, 380, 384, 386, 414, 415, 417, 419, 427, 435, 447, 506, 518, 531, 567, 616, 623, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 670, 671, 672, 674, 677, 679, 680, 681, 682, 701, 707, 785, 791, 793, 799, 800, 825, 863, 875, 878, 886, 899, 900, 914, 949, 951, 953, 974, 1003], "elsewher": [394, 460, 461, 469, 470, 476], "eltermann": 1033, "elucid": 979, "elvezio": [647, 983], "elvi": [1035, 1036, 1037], "em": [246, 247, 251, 441, 445, 457, 534, 794, 795, 986, 1044], "email": [0, 351, 380, 392, 415, 834, 989, 1012], "emami": 1044, "emanuel": 1031, "emb": [151, 221, 232, 292, 373, 374, 460, 693, 984], "embark": [71, 171, 242, 315, 319, 320], "embed": [36, 39, 41, 44, 46, 55, 62, 68, 89, 116, 146, 151, 166, 219, 222, 224, 226, 227, 243, 283, 292, 325, 326, 386, 394, 406, 407, 439, 450, 460, 487, 500, 542, 547, 564, 580, 637, 686, 687, 688, 689, 690, 691, 692, 693, 694, 848, 860, 869, 891, 892, 893, 979, 990, 993, 999, 1004, 1007, 1009, 1024, 1025, 1030, 1031, 1041, 1042, 1044], "embedding_": [223, 394, 686, 687, 688, 689, 690], "emerg": [407, 1012], "emeritu": [395, 1005], "emiko": 1044, "emil": 1044, "emili": [1041, 1042], "emipr": 794, "emir": [1045, 1046], "emit": [1041, 1048], "emlearn": 1007, "emma": 1047, "emmanouil": 1044, "emmanuel": [14, 66, 1030, 1037, 1038, 1039, 1047], "emp_cov": [78, 80, 82, 476, 479], "emp_cov_contour": 80, "emp_mah": 80, "emphas": [169, 348, 386, 412, 987], "emphasi": [348, 410, 901, 902, 903, 904, 905, 994, 1007], "empir": [9, 13, 24, 25, 34, 36, 42, 43, 59, 63, 64, 68, 77, 79, 80, 82, 83, 127, 166, 179, 217, 266, 305, 405, 411, 414, 417, 445, 447, 458, 467, 468, 469, 472, 475, 476, 530, 532, 537, 539, 541, 547, 549, 563, 588, 601, 637, 647, 665, 669, 676, 677, 714, 719, 720, 721, 824, 834, 835, 836, 838, 857, 880, 922, 961, 979, 981, 987, 989, 991, 997, 999, 1001, 1009, 1024, 1025], "empirical_covari": [78, 409, 476, 477, 479, 1046], "empiricalcovari": [78, 80, 81, 409, 467, 471, 472, 473, 474, 993], "emploi": [12, 151, 234, 394, 409, 415, 448, 476, 580, 587, 1012, 1022, 1036], "employ": 169, "empti": [61, 70, 104, 211, 328, 366, 375, 382, 384, 407, 419, 481, 531, 559, 560, 629, 807, 864, 904, 906, 914, 919, 920, 926, 946, 947, 977, 1002, 1021, 1032, 1034, 1038, 1039, 1041, 1042, 1044, 1045, 1046], "emptyset": 987, "emul": [169, 388], "en": [17, 24, 388, 529, 535, 593, 634, 662, 666, 669, 683, 684, 693, 703, 841, 842, 847, 848, 849, 850, 877, 893, 907, 908, 983, 987, 1002, 1003], "enabl": [13, 30, 50, 72, 127, 170, 207, 222, 235, 307, 316, 318, 319, 321, 322, 347, 378, 380, 385, 388, 392, 394, 397, 398, 403, 406, 407, 408, 412, 414, 415, 447, 462, 466, 532, 533, 539, 557, 558, 559, 560, 561, 577, 578, 588, 589, 600, 608, 794, 795, 796, 799, 820, 821, 822, 859, 860, 872, 873, 896, 897, 899, 900, 901, 902, 903, 904, 905, 914, 947, 954, 977, 979, 984, 986, 987, 990, 997, 998, 1001, 1002, 1008, 1012, 1030, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "enable_cython_pairwise_dist": [466, 897], "enable_halving_search_cv": [124, 271, 272, 317, 384, 799, 800, 976], "enable_hist_gradient_boost": [384, 1039], "enable_iterative_imput": [163, 164, 384, 625, 977, 1039], "enable_metadata_rout": [235, 322, 398, 435, 441, 442, 445, 447, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 595, 608, 609, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 796, 797, 798, 799, 800, 803, 805, 810, 814, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 858, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 1046], "enable_my_experimental_featur": 384, "enc": [306, 308, 319, 321, 872, 873, 997], "enc_auto": 880, "enc_high_smooth": 880, "enc_low_smooth": 880, "encapsul": [387, 408, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910], "enclos": 976, "encod": [4, 8, 11, 48, 55, 71, 95, 116, 127, 132, 166, 169, 170, 171, 181, 198, 199, 238, 240, 269, 304, 306, 307, 308, 313, 317, 319, 320, 338, 351, 353, 372, 374, 376, 382, 385, 392, 394, 408, 411, 412, 414, 415, 417, 462, 485, 494, 501, 524, 529, 535, 537, 538, 540, 542, 543, 544, 546, 549, 559, 560, 564, 565, 567, 579, 586, 587, 589, 628, 646, 656, 657, 667, 670, 678, 732, 798, 803, 805, 822, 825, 859, 860, 862, 864, 866, 867, 870, 872, 873, 880, 883, 897, 976, 977, 983, 984, 987, 989, 990, 992, 1001, 1007, 1008, 1009, 1025, 1031, 1032, 1038, 1042, 1044, 1045, 1046, 1047, 1048], "encoded_missing_valu": [132, 171, 873, 997, 1044, 1045], "encodings_": [321, 880, 997], "encompass": [394, 448, 454, 553, 554, 984], "encount": [367, 378, 401, 407, 414, 415, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 559, 560, 579, 834, 835, 836, 838, 872, 962, 997, 1001, 1007, 1011, 1012, 1023, 1038, 1041], "encourag": [169, 203, 299, 338, 379, 380, 392, 1002, 1007], "encrypt": 1007, "encyclopedia": 987, "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 378, 380, 382, 384, 392, 394, 395, 397, 398, 404, 407, 408, 410, 414, 448, 454, 466, 486, 487, 506, 507, 535, 544, 555, 556, 557, 558, 562, 563, 564, 643, 644, 645, 648, 649, 650, 651, 652, 653, 658, 659, 660, 661, 679, 680, 681, 682, 796, 799, 800, 810, 817, 820, 857, 859, 897, 907, 908, 909, 910, 940, 941, 971, 976, 979, 983, 984, 986, 987, 997, 999, 1001, 1007, 1012, 1020, 1023, 1035, 1037, 1040, 1043, 1044], "end_": 8, "end_bodi": 8, "end_d": 8, "end_idx": [12, 223], "end_reut": 8, "end_titl": 8, "end_top": 8, "endian": 1042, "endo": 1043, "endpoint": [14, 306, 341, 633], "enemi": 380, "energi": [12, 127, 388, 855, 992, 1021], "enet": [183, 273], "enet_path": [184, 394, 644, 645, 650, 658, 659, 660, 1032, 1034, 1043], "enet_tol": [469, 470, 476, 1035], "enforc": [4, 12, 34, 53, 95, 127, 156, 193, 292, 366, 380, 409, 412, 414, 424, 430, 506, 525, 529, 535, 537, 540, 541, 543, 544, 546, 555, 556, 559, 560, 562, 563, 863, 878, 907, 908, 909, 910, 919, 920, 977, 984, 1032, 1038, 1040, 1042, 1046], "enforce_estimator_tags_i": 1040, "eng": 1038, "engag": [386, 395], "engemann": [102, 1032, 1033, 1037], "engin": [3, 16, 40, 116, 121, 127, 156, 166, 169, 170, 200, 366, 374, 377, 407, 413, 415, 462, 494, 560, 637, 671, 699, 817, 822, 857, 858, 860, 863, 864, 869, 872, 874, 878, 977, 979, 987, 997, 1005, 1009, 1036], "english": [15, 19, 70, 351, 352, 353, 385, 415, 586, 587, 589, 1007, 1008, 1023, 1043], "enh": 384, "enhanc": [95, 203, 379, 380, 384, 392, 394, 407, 987, 1005, 1028, 1029, 1030, 1031, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "enjoi": 42, "enough": [4, 13, 27, 37, 44, 62, 117, 120, 127, 151, 163, 170, 171, 188, 199, 233, 236, 238, 309, 351, 353, 362, 378, 380, 384, 395, 405, 406, 407, 409, 411, 414, 565, 566, 587, 796, 799, 800, 802, 810, 823, 936, 976, 981, 984, 986, 993, 997, 1002, 1007, 1012, 1036, 1046, 1047], "enrich": 342, "ensembl": [4, 7, 10, 12, 13, 26, 27, 31, 56, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 163, 164, 170, 171, 172, 199, 221, 228, 237, 238, 240, 241, 257, 272, 278, 281, 307, 311, 315, 316, 317, 318, 320, 321, 322, 351, 357, 358, 359, 362, 366, 369, 384, 385, 393, 394, 398, 405, 407, 411, 416, 435, 502, 513, 630, 631, 633, 656, 700, 799, 800, 825, 829, 830, 860, 863, 872, 903, 907, 909, 910, 928, 976, 987, 988, 993, 994, 1003, 1007, 1008, 1009, 1010, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "ensemble_clf": 115, "ensemble_jaccard_scor": 281, "ensta": [15, 17, 37, 48, 61, 199, 217, 221, 261, 263, 351, 352, 353], "ensur": [0, 20, 41, 57, 82, 92, 111, 117, 118, 127, 172, 199, 221, 255, 263, 301, 360, 362, 366, 367, 380, 382, 384, 385, 386, 395, 397, 398, 405, 407, 408, 411, 419, 467, 531, 532, 539, 609, 625, 694, 703, 779, 785, 786, 820, 892, 919, 920, 936, 942, 953, 983, 984, 987, 997, 1003, 1018, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "ensure_2d": [919, 920], "ensure_min_featur": [919, 920], "ensure_min_sampl": [919, 920], "entail": [393, 877, 879, 1001], "enter": [381, 384, 407, 440, 994], "entertain": 983, "entic": 169, "entir": [32, 163, 199, 207, 302, 305, 316, 342, 360, 362, 374, 381, 382, 394, 401, 407, 411, 413, 415, 470, 490, 532, 586, 587, 588, 589, 645, 649, 651, 653, 656, 657, 659, 661, 663, 664, 666, 674, 680, 681, 731, 793, 827, 828, 831, 856, 858, 859, 872, 884, 885, 887, 888, 889, 890, 956, 976, 977, 987, 997, 1001, 1003, 1021, 1039, 1040], "entireti": 394, "entiti": [395, 723, 753], "entitl": [286, 445, 609, 841, 979], "entri": [0, 71, 75, 127, 132, 164, 169, 170, 256, 315, 352, 362, 384, 386, 388, 393, 394, 404, 405, 407, 412, 414, 417, 461, 470, 494, 529, 530, 535, 543, 544, 559, 560, 586, 589, 592, 609, 618, 630, 636, 638, 645, 649, 651, 653, 654, 657, 659, 661, 662, 663, 671, 673, 680, 681, 683, 684, 697, 702, 705, 707, 710, 713, 714, 716, 723, 726, 727, 728, 731, 732, 735, 740, 753, 755, 756, 780, 782, 785, 786, 789, 790, 809, 823, 839, 840, 847, 848, 849, 850, 851, 870, 876, 888, 973, 976, 977, 983, 987, 990, 997, 1002, 1008, 1014, 1037, 1040, 1041, 1043, 1047], "entropi": [11, 27, 240, 272, 296, 317, 325, 326, 362, 375, 407, 414, 419, 496, 531, 555, 562, 605, 606, 656, 715, 733, 734, 738, 792, 907, 909, 983, 984, 987, 991, 1003, 1032, 1034, 1038, 1039, 1044, 1046, 1047], "entrypoint_to_bug_reproduc": 381, "enumer": [4, 8, 10, 11, 12, 14, 15, 17, 19, 25, 27, 30, 31, 37, 39, 40, 41, 42, 43, 44, 45, 50, 55, 59, 60, 61, 62, 65, 70, 79, 81, 82, 86, 96, 98, 104, 114, 117, 122, 123, 125, 126, 127, 138, 153, 155, 160, 172, 179, 181, 190, 199, 221, 222, 225, 228, 233, 237, 238, 245, 246, 247, 248, 250, 251, 255, 262, 263, 269, 270, 288, 292, 293, 295, 302, 307, 308, 325, 326, 328, 330, 336, 338, 345, 346, 351, 357, 375, 557, 558, 562, 563, 778, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817], "env": [378, 388, 397], "environ": [0, 12, 26, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 366, 375, 377, 378, 380, 382, 386, 388, 392, 397, 401, 403, 406, 408, 497, 1008, 1012, 1037, 1038, 1047], "environment": [11, 183, 217], "environmenterror": 1046, "eom": 444, "ep": [31, 44, 46, 49, 55, 65, 182, 184, 223, 232, 392, 407, 418, 442, 448, 453, 469, 470, 476, 629, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 679, 680, 681, 682, 688, 692, 712, 738, 851, 891, 892, 893, 999, 1045, 1046], "epanechnikov": [288, 413, 839, 840, 844], "ephemer": 388, "ephrem": 1045, "epimorph": 1047, "epistem": 13, "epoch": [214, 394, 534, 664, 665, 666, 674, 675, 676, 856, 857, 1001, 1037, 1038, 1043], "epp": [407, 702], "eps_": [658, 660], "eps_rang": 232, "epsilon": [55, 65, 181, 223, 234, 321, 345, 412, 444, 453, 641, 647, 665, 674, 676, 743, 856, 857, 900, 902, 905, 980, 983, 987, 991, 1001, 1002, 1021, 1030], "epsilon_": 837, "epsilon_i": 987, "epsilon_insensit": [665, 674, 676, 900, 983, 1001], "epsilon_valu": 181, "eq": [420, 473, 719, 720, 721], "equal": [4, 11, 12, 26, 34, 37, 39, 53, 60, 80, 86, 111, 124, 154, 169, 200, 201, 210, 216, 239, 247, 250, 254, 258, 260, 269, 293, 307, 311, 338, 340, 347, 352, 375, 376, 380, 382, 394, 404, 405, 407, 411, 412, 414, 415, 420, 435, 438, 439, 440, 441, 443, 445, 447, 452, 457, 458, 461, 467, 472, 477, 478, 501, 510, 513, 517, 530, 531, 532, 537, 539, 541, 542, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 586, 591, 592, 595, 597, 598, 605, 606, 623, 626, 627, 630, 631, 632, 633, 635, 639, 640, 647, 656, 657, 669, 697, 716, 718, 726, 780, 784, 785, 791, 793, 796, 797, 799, 800, 809, 810, 814, 820, 827, 831, 832, 839, 840, 841, 842, 847, 848, 849, 850, 851, 856, 857, 862, 863, 864, 871, 874, 877, 878, 879, 880, 882, 889, 896, 899, 900, 906, 907, 908, 909, 910, 925, 936, 962, 968, 981, 983, 987, 988, 990, 991, 993, 997, 1001, 1002, 1003, 1022, 1023, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "equat": [27, 346, 380, 407, 412, 414, 555, 556, 557, 558, 562, 563, 564, 588, 625, 656, 657, 680, 681, 685, 760, 879, 907, 908, 909, 910, 977, 984, 987, 992, 1038], "equi": 986, "equiangular": 983, "equidist": [121, 690], "equip": 1012, "equiv": [979, 1002], "equival": [4, 15, 34, 55, 57, 121, 128, 147, 151, 156, 169, 183, 217, 250, 269, 283, 310, 342, 353, 362, 366, 386, 389, 393, 394, 407, 408, 409, 410, 411, 412, 414, 416, 417, 439, 441, 442, 443, 444, 445, 447, 448, 455, 462, 467, 472, 507, 532, 539, 556, 559, 560, 561, 562, 563, 586, 589, 611, 614, 617, 619, 622, 644, 645, 646, 650, 652, 656, 657, 664, 665, 666, 667, 670, 674, 675, 678, 681, 685, 686, 691, 706, 707, 720, 731, 738, 739, 744, 745, 746, 758, 767, 776, 777, 794, 795, 799, 800, 804, 806, 830, 833, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 856, 862, 868, 869, 871, 874, 875, 876, 877, 879, 887, 889, 890, 923, 934, 973, 976, 981, 983, 984, 985, 987, 993, 997, 1001, 1002, 1003, 1038, 1039, 1040, 1041, 1043, 1044, 1047], "er": 568, "era": 1008, "eras": [557, 558, 644, 650, 656, 658, 660, 664, 665, 666, 674, 675, 676, 856, 857], "ereg": [135, 414], "eren": [0, 20, 21, 1032, 1033], "eric": [309, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "ericchang2017": 309, "ericellwang": [1043, 1044], "erich": [448, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1044], "erick": 1035, "erik": [375, 1012, 1033], "eriksson": 1037, "erin": [278, 1042], "erl": 278, "erling": 1035, "ermolaevpa": [1044, 1045], "ernst": [414, 555, 556, 563, 564, 909, 910], "err": [17, 85, 99, 111], "err_cov_emp_ful": 81, "err_cov_emp_pur": 81, "err_cov_mcd": 81, "err_loc_emp_ful": 81, "err_loc_emp_pur": 81, "err_loc_mcd": 81, "errno": 397, "erron": [80, 81, 412, 983, 1031, 1038, 1042], "error": [4, 5, 7, 13, 14, 17, 27, 54, 75, 78, 79, 81, 99, 104, 110, 114, 117, 118, 121, 123, 125, 127, 136, 148, 151, 163, 166, 169, 183, 188, 195, 198, 199, 201, 202, 205, 206, 213, 217, 231, 234, 235, 239, 241, 251, 253, 256, 260, 261, 265, 269, 270, 274, 276, 278, 289, 290, 319, 322, 337, 346, 351, 352, 367, 377, 378, 380, 382, 383, 384, 385, 389, 392, 394, 398, 401, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 435, 441, 442, 445, 447, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 513, 522, 529, 531, 532, 535, 536, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 579, 580, 586, 588, 589, 590, 592, 593, 594, 596, 597, 598, 604, 608, 609, 627, 630, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 686, 687, 688, 690, 691, 694, 696, 699, 700, 707, 709, 710, 718, 719, 720, 724, 737, 740, 741, 742, 743, 744, 745, 747, 748, 750, 761, 775, 779, 785, 786, 787, 788, 796, 797, 798, 799, 800, 802, 803, 805, 810, 814, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 849, 850, 851, 854, 856, 857, 858, 859, 860, 862, 864, 865, 866, 871, 872, 873, 878, 879, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 917, 918, 919, 920, 923, 950, 971, 974, 976, 977, 978, 980, 981, 982, 984, 988, 991, 995, 997, 1001, 1002, 1003, 1009, 1010, 1021, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "error_": [529, 541], "error_i": [117, 261], "error_norm": [79, 81, 467, 468, 469, 470, 471, 472, 473, 474], "error_on_new": 627, "error_r": 115, "error_scor": [796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 976, 1034, 1038, 1042, 1045], "error_x": [117, 261], "errorbar": [37, 61, 73, 79, 81, 147, 157, 158, 285, 328, 341, 802, 818], "errorbar_": [802, 818], "errorbar_kw": [802, 818], "errorbarcontain": [802, 818], "errors_coef": 203, "errors_lines_": 699, "erwan": 1047, "erwin": 1033, "escal": 395, "escalant": 987, "escalera": 987, "escap": [1043, 1045], "eschibli": 1042, "eschlbeck": 1044, "esdi": 19, "esp": [407, 1030], "especi": [4, 8, 13, 55, 56, 121, 124, 127, 169, 199, 235, 311, 320, 352, 362, 367, 374, 380, 388, 392, 394, 405, 407, 415, 441, 447, 499, 536, 555, 556, 557, 558, 562, 563, 564, 644, 645, 646, 648, 650, 651, 652, 656, 657, 658, 659, 660, 661, 667, 678, 693, 703, 743, 834, 835, 836, 837, 838, 907, 908, 909, 910, 983, 989, 990, 997, 1012, 1033, 1038, 1042, 1043, 1044], "espinoza": [1031, 1032], "essenc": [605, 606, 740, 984, 987], "essenti": [260, 320, 378, 382, 407, 411, 412, 507, 987, 990, 1008, 1012, 1038], "est": [45, 132, 169, 235, 237, 307, 317, 362, 401, 414, 560, 732, 864, 976, 987, 997, 1001, 1041, 1042], "est1": [394, 630], "est2": [394, 630], "est_freq": 217, "est_idx": 307, "est_sev": 217, "establish": [388, 392, 395, 977], "estefania": 1044, "ester": [407, 418, 442], "estev": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 13, 24, 26, 27, 30, 33, 34, 37, 38, 44, 45, 49, 50, 54, 55, 56, 57, 58, 61, 63, 71, 72, 73, 74, 83, 85, 86, 95, 96, 97, 102, 104, 110, 111, 115, 116, 117, 118, 120, 122, 124, 125, 126, 127, 129, 132, 133, 134, 135, 136, 138, 146, 147, 148, 150, 151, 152, 154, 156, 158, 160, 161, 162, 163, 165, 168, 169, 177, 180, 183, 187, 188, 189, 194, 199, 200, 201, 203, 204, 206, 207, 216, 217, 218, 227, 228, 229, 234, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 276, 277, 279, 281, 283, 284, 290, 294, 297, 305, 307, 310, 318, 319, 321, 341, 342, 346, 352, 353, 356, 357, 359, 366, 367, 368, 369, 372, 378, 380, 383, 384, 387, 388, 389, 390, 397, 398, 401, 402, 405, 407, 410, 412, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 489, 490, 493, 494, 496, 499, 500, 522, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 574, 575, 577, 578, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 685, 686, 687, 688, 689, 690, 695, 696, 698, 699, 700, 705, 706, 709, 710, 711, 714, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 812, 814, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 918, 919, 920, 922, 924, 925, 928, 930, 931, 932, 943, 944, 945, 947, 955, 971, 975, 982, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1014, 1015, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "estimate_bandwidth": [44, 63, 407, 446, 459], "estimated_coef": [644, 645, 650, 658, 659, 660, 679, 680, 681], "estimated_param_": 1020, "estimator_": [202, 235, 427, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 591, 592, 595, 669, 971, 1045], "estimator__alpha": 124, "estimator__max_depth": [394, 976], "estimator_alpha": 120, "estimator_check": [315, 382, 394, 406, 1037, 1038, 1040, 1041, 1044, 1045, 1046], "estimator_conf": 10, "estimator_config": 10, "estimator_dict": 207, "estimator_errors_": [111, 551, 552], "estimator_html_repr": [382, 408, 1041, 1042, 1043, 1044, 1047], "estimator_modul": 382, "estimator_nam": [10, 207, 382, 387, 436, 574, 696, 698, 700, 918], "estimator_samples_": 1041, "estimator_weights_": [111, 551, 552], "estimatorcv": [394, 1008], "estimators_": [118, 120, 236, 315, 394, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 827, 828, 829, 830, 831, 832, 833, 1031, 1037, 1044], "estimators_early_stop": 122, "estimators_features_": [553, 554, 561], "estimators_samples_": [553, 554, 555, 556, 561, 562, 563, 564, 1036, 1038, 1041, 1047], "est\u00e8v": [0, 1, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "esuli": [1037, 1042], "esvhd": 1039, "et": [0, 11, 78, 79, 111, 126, 187, 296, 375, 377, 404, 407, 409, 412, 414, 415, 416, 449, 496, 517, 518, 526, 533, 539, 542, 561, 680, 681, 717, 718, 834, 836, 856, 857, 892, 935, 936, 983, 984, 987, 993, 997, 999, 1002, 1003, 1038, 1046], "eta": [412, 534, 674, 675, 676, 991, 1001, 1035], "eta0": [666, 674, 675, 676, 1001], "eta_0": 1001, "etc": [121, 199, 217, 255, 264, 265, 362, 366, 368, 380, 382, 384, 385, 392, 393, 394, 398, 404, 408, 411, 415, 487, 501, 525, 555, 556, 562, 563, 666, 674, 690, 716, 768, 796, 810, 830, 833, 863, 874, 907, 908, 909, 910, 911, 913, 919, 920, 930, 945, 976, 977, 981, 987, 990, 1007, 1008, 1012, 1030, 1037, 1039, 1040], "eth": 1040, "ethan": [1033, 1036], "ethic": 127, "ethz": [328, 330], "etiquett": 380, "etl": [1008, 1012], "euclidean": [40, 57, 58, 185, 232, 238, 283, 286, 291, 315, 320, 342, 352, 404, 406, 407, 412, 413, 414, 415, 417, 438, 439, 442, 443, 444, 448, 450, 455, 458, 461, 529, 535, 543, 544, 587, 613, 617, 620, 621, 674, 676, 688, 690, 693, 694, 697, 759, 760, 766, 767, 768, 769, 775, 776, 777, 778, 789, 790, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 893, 977, 981, 985, 988, 990, 999, 1008, 1034, 1037, 1038, 1039, 1040, 1046, 1047], "euclidean_dist": [223, 232, 382, 448, 452, 455, 686, 692, 759, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 1030, 1035, 1038, 1039, 1047], "euclideandist": 697, "eugen": [377, 1031, 1036], "eunji": 1038, "eunseop": 1040, "europ": [415, 997], "european": [723, 753, 987], "eustach": [7, 8, 10, 1012, 1032, 1033], "eval_and_print_metr": 329, "eval_gradi": [159, 417, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "evalml": 1007, "evalu": [4, 5, 6, 10, 11, 17, 24, 32, 36, 38, 42, 43, 49, 55, 59, 63, 64, 68, 71, 72, 98, 111, 117, 118, 119, 121, 122, 124, 127, 143, 144, 154, 166, 172, 175, 179, 188, 201, 206, 217, 227, 228, 243, 253, 254, 257, 258, 259, 260, 263, 265, 266, 267, 269, 271, 272, 274, 276, 281, 290, 292, 296, 305, 310, 312, 317, 321, 322, 329, 338, 342, 351, 362, 369, 373, 375, 382, 386, 394, 396, 406, 408, 415, 416, 417, 445, 447, 462, 464, 486, 489, 490, 491, 494, 507, 518, 534, 549, 559, 560, 561, 565, 566, 589, 592, 600, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 629, 630, 631, 632, 645, 651, 657, 671, 673, 695, 697, 699, 700, 701, 702, 703, 709, 711, 712, 713, 715, 716, 723, 724, 733, 734, 739, 751, 752, 753, 754, 783, 792, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 825, 826, 830, 836, 839, 840, 845, 857, 859, 860, 866, 869, 872, 873, 877, 878, 879, 884, 885, 887, 888, 889, 890, 901, 904, 907, 922, 930, 961, 979, 983, 985, 989, 990, 993, 994, 995, 998, 1001, 1003, 1007, 1009, 1012, 1014, 1015, 1018, 1019, 1021, 1024, 1025, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "evaluate_everi": 534, "evaluate_model_and_stor": 311, "evaluation_std": 352, "evaluations_std": 352, "even": [4, 13, 14, 27, 40, 42, 52, 75, 86, 98, 117, 124, 157, 169, 170, 171, 188, 199, 200, 207, 217, 224, 225, 234, 246, 266, 278, 305, 307, 309, 310, 330, 346, 351, 352, 353, 362, 368, 375, 379, 380, 381, 382, 384, 385, 388, 392, 394, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 439, 441, 443, 444, 445, 446, 447, 457, 459, 530, 533, 555, 556, 557, 558, 562, 563, 580, 587, 592, 625, 626, 628, 637, 656, 657, 693, 698, 703, 710, 740, 758, 764, 771, 775, 778, 783, 785, 822, 859, 860, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 907, 908, 909, 910, 936, 956, 976, 977, 979, 981, 983, 986, 987, 990, 992, 993, 995, 997, 999, 1001, 1002, 1003, 1012, 1023, 1037, 1038, 1039, 1042, 1044, 1047], "evenli": [8, 39, 52, 124, 172, 203, 255, 415, 940, 1023], "event": [0, 4, 199, 217, 263, 405, 407, 586, 587, 634, 834, 924, 983, 988, 989, 1007, 1012, 1036], "eventu": [248, 406, 407, 416, 591, 1012], "ever": [117, 131, 389, 414, 1012], "everi": [4, 95, 127, 163, 197, 200, 221, 234, 246, 251, 269, 318, 322, 362, 375, 380, 382, 384, 388, 394, 407, 409, 411, 412, 415, 438, 452, 506, 529, 534, 537, 543, 555, 557, 558, 559, 560, 562, 588, 589, 601, 644, 645, 647, 650, 651, 657, 658, 659, 660, 661, 662, 663, 664, 666, 670, 671, 672, 673, 674, 683, 684, 685, 690, 694, 751, 768, 776, 777, 809, 848, 907, 909, 911, 913, 925, 980, 982, 987, 988, 989, 997, 1003, 1012, 1018, 1030, 1034, 1036, 1039, 1043, 1047], "everingham": 987, "everingham2010": 987, "evernot": 1005, "everybodi": [374, 380], "everyon": [380, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "everyth": [325, 362, 384, 386, 392, 462, 942, 1007, 1008, 1030], "everywher": 394, "evgeni": 1041, "evid": [266, 351, 388, 407, 411, 412, 414, 642, 794, 986], "evol": 987, "evolut": [8, 10, 272, 366, 368], "evolutionari": 1007, "evolv": [389, 1045], "ex": [70, 378, 381, 397, 1034, 1035], "exabyt": 1021, "exact": [5, 7, 82, 100, 117, 156, 203, 233, 283, 322, 362, 366, 367, 374, 380, 382, 389, 392, 393, 394, 407, 414, 416, 432, 480, 481, 482, 486, 494, 532, 533, 539, 559, 560, 636, 640, 644, 690, 796, 810, 820, 821, 822, 901, 904, 976, 979, 983, 984, 993, 997, 1001, 1002, 1037, 1038, 1040], "exactli": [71, 111, 168, 178, 183, 192, 199, 203, 251, 268, 306, 346, 351, 380, 382, 404, 407, 411, 412, 415, 420, 444, 451, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 513, 524, 588, 589, 613, 674, 676, 701, 703, 760, 797, 814, 820, 979, 983, 984, 985, 987, 988, 1003, 1022, 1023, 1030, 1036, 1037, 1043], "exagger": [39, 169, 690, 984], "examin": [144, 386, 388, 407, 848], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 369, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 393, 394, 397, 400, 401, 406, 418, 419, 420, 422, 423, 425, 426, 428, 429, 432, 433, 434, 437, 454, 455, 457, 459, 461, 469, 476, 478, 479, 483, 484, 485, 491, 495, 501, 503, 505, 506, 507, 514, 515, 516, 526, 527, 529, 543, 544, 545, 546, 553, 570, 571, 575, 581, 583, 584, 590, 593, 594, 596, 599, 601, 607, 610, 614, 618, 619, 622, 624, 627, 634, 635, 636, 640, 648, 649, 652, 658, 659, 661, 665, 673, 681, 683, 684, 685, 692, 693, 694, 697, 706, 708, 709, 712, 713, 714, 718, 719, 720, 721, 722, 723, 725, 727, 728, 730, 733, 736, 737, 740, 741, 744, 748, 751, 753, 755, 756, 757, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 780, 788, 791, 793, 803, 804, 805, 806, 807, 808, 809, 819, 831, 833, 835, 839, 840, 849, 850, 851, 853, 854, 861, 862, 865, 867, 870, 881, 882, 884, 886, 887, 889, 890, 891, 894, 898, 900, 909, 910, 911, 912, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 932, 934, 935, 936, 937, 938, 939, 941, 942, 949, 950, 951, 952, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 977, 985, 1008, 1009, 1010, 1012, 1015, 1018, 1019, 1023, 1025, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1043, 1045, 1046, 1047], "example_funct": 380, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1030, "example_gaussian_process_plot_gp_regress": 1030, "exampleclassifi": 235, "exampleclassifierexampleclassifi": 235, "exampleestim": 380, "exampleregressor": 235, "examples_pattern": 380, "exampletransform": 235, "exc": [278, 971], "exce": [85, 281, 316, 417, 440, 513, 600, 647, 656, 1039, 1042, 1044], "exceed": [799, 800, 1036], "excel": [130, 374, 380, 414, 688, 692, 983, 1012], "except": [11, 44, 53, 98, 109, 117, 127, 156, 207, 214, 228, 235, 268, 283, 296, 300, 301, 305, 307, 320, 369, 373, 380, 382, 383, 384, 385, 392, 394, 398, 401, 404, 408, 411, 412, 414, 415, 417, 430, 458, 463, 466, 480, 481, 482, 507, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 609, 625, 628, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 685, 709, 775, 803, 832, 833, 839, 840, 842, 845, 850, 856, 857, 863, 877, 879, 897, 900, 902, 905, 908, 910, 918, 940, 971, 973, 983, 987, 1002, 1014, 1022, 1023, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1047, 1048], "exception": 217, "excerpt": [6, 999, 1019], "excess": [203, 444, 997, 1037], "exchang": [401, 1011], "excit": 1037, "exclud": [8, 19, 168, 305, 380, 384, 394, 444, 462, 464, 726, 727, 735, 780, 781, 784, 809, 817, 874, 962, 987, 990, 1039, 1046], "exclus": [367, 392, 394, 412, 414, 625, 626, 628, 976, 983, 987, 988, 1012, 1037, 1041], "exec": 392, "execut": [16, 22, 27, 28, 35, 68, 76, 83, 87, 93, 106, 108, 136, 141, 149, 161, 163, 165, 173, 176, 183, 188, 218, 226, 234, 243, 252, 265, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 354, 361, 367, 378, 380, 386, 401, 403, 407, 412, 418, 441, 459, 796, 802, 810, 818, 820, 821, 822, 823, 826, 844, 953, 954, 997, 1000, 1009, 1015, 1023, 1032, 1035, 1038], "exemplar": [407, 438, 452, 1022], "exemplari": [133, 134], "exemplifi": 394, "exercis": [73, 120, 130, 141, 147, 153, 155, 209, 212, 255, 265, 273, 299, 300, 330, 343, 344, 347, 348, 368, 369, 377, 380, 499, 500, 502, 503, 650, 651, 656, 796, 801, 841, 904, 1009, 1015, 1033], "exercise_01_language_train_model": 1023, "exercise_02_senti": 1023, "exercise_xx_script": 1023, "exhaust": [148, 261, 315, 316, 317, 318, 319, 320, 321, 322, 366, 377, 385, 393, 402, 407, 414, 796, 799, 800, 810, 889, 890, 892, 983, 1023, 1025], "exhibit": [152, 204, 342, 351, 396, 411, 412, 414, 417, 995], "exist": [8, 9, 13, 17, 19, 53, 217, 260, 301, 305, 342, 374, 379, 382, 383, 386, 392, 394, 395, 397, 401, 407, 411, 412, 414, 415, 422, 432, 435, 441, 442, 445, 447, 449, 451, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 497, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 583, 586, 587, 588, 589, 592, 595, 601, 608, 609, 630, 631, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 696, 698, 700, 759, 762, 766, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 872, 873, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 971, 979, 984, 986, 987, 991, 993, 994, 997, 1012, 1022, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "exist_ok": 8, "exit": [72, 283, 384, 388, 466], "exp": [46, 54, 66, 104, 114, 124, 152, 183, 209, 288, 293, 296, 316, 317, 321, 342, 405, 407, 408, 413, 419, 450, 463, 519, 531, 534, 613, 614, 620, 639, 756, 763, 773, 856, 857, 875, 981, 983, 985, 989, 990, 991, 1000, 1001, 1002, 1021], "exp10": 169, "exp_dirichlet_component_": 534, "exp_dist_embed": 293, "expand": [4, 49, 65, 230, 311, 316, 362, 372, 414, 442, 448, 497, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 987, 1031, 1038, 1039, 1046], "expand_frame_repr": 217, "expans": [4, 163, 317, 448, 874, 1039], "expect": [4, 5, 10, 13, 24, 37, 44, 53, 86, 92, 100, 111, 114, 116, 118, 121, 124, 127, 129, 145, 151, 157, 166, 167, 171, 173, 185, 190, 199, 200, 201, 203, 207, 217, 232, 235, 238, 239, 246, 247, 250, 251, 267, 283, 310, 346, 351, 352, 362, 366, 367, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 398, 403, 405, 407, 408, 409, 411, 414, 415, 416, 430, 462, 463, 465, 466, 467, 480, 481, 482, 494, 521, 530, 534, 536, 539, 550, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 568, 570, 586, 587, 589, 593, 595, 604, 609, 625, 630, 631, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 672, 673, 676, 677, 693, 702, 703, 714, 732, 785, 791, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 845, 849, 850, 851, 852, 857, 860, 865, 872, 873, 876, 879, 880, 889, 890, 897, 899, 900, 901, 902, 903, 904, 905, 908, 910, 950, 976, 983, 986, 987, 989, 993, 997, 1001, 1002, 1003, 1009, 1011, 1019, 1022, 1023, 1025, 1030, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "expected_anomaly_fract": 238, "expected_i": 124, "expected_n_anomali": 238, "expected_ri": 703, "expectedli": 351, "expens": [0, 56, 117, 132, 151, 168, 170, 229, 257, 269, 338, 342, 351, 352, 353, 368, 386, 394, 407, 408, 411, 414, 415, 447, 466, 506, 796, 799, 800, 810, 822, 897, 899, 984, 986, 997, 1002, 1007, 1012, 1023, 1034], "experi": [111, 154, 158, 168, 169, 170, 171, 175, 201, 278, 310, 346, 352, 353, 367, 374, 380, 383, 406, 411, 513, 725, 782, 983, 988, 999, 1005, 1006, 1007, 1012, 1021, 1023], "experienc": 380, "experiment": [124, 163, 164, 199, 271, 272, 317, 318, 369, 380, 382, 383, 390, 392, 394, 398, 411, 494, 547, 625, 694, 799, 800, 957, 976, 977, 983, 986, 987, 1007, 1008, 1017, 1025, 1038, 1039, 1042, 1043, 1044, 1045, 1047, 1048], "expert_r": 408, "expertis": [379, 380, 392], "expit": [123, 189, 414, 559, 983, 1037], "explain": [4, 5, 12, 27, 56, 73, 85, 86, 103, 124, 151, 156, 157, 170, 171, 199, 217, 228, 235, 251, 270, 273, 311, 351, 352, 367, 378, 380, 384, 392, 401, 403, 410, 412, 417, 491, 519, 522, 532, 539, 542, 547, 623, 646, 654, 667, 678, 719, 720, 721, 725, 782, 983, 990, 1003, 1006, 1007, 1019, 1021, 1022, 1041, 1043, 1044], "explained_vari": [352, 987], "explained_variance_": [86, 532, 539, 542, 1022, 1037], "explained_variance_ratio": 1036, "explained_variance_ratio_": [73, 103, 352, 412, 532, 539, 542, 547, 1019, 1033, 1036], "explained_variance_scor": [987, 1033, 1037, 1044], "explan": [27, 86, 235, 366, 379, 380, 405, 415, 976, 986, 988, 1003, 1012, 1033], "explic": 999, "explicit": [4, 127, 166, 170, 175, 227, 235, 243, 275, 342, 366, 367, 368, 379, 381, 392, 394, 395, 398, 408, 415, 421, 470, 497, 499, 500, 539, 549, 550, 629, 636, 637, 639, 674, 796, 797, 804, 843, 851, 859, 899, 904, 951, 955, 979, 981, 983, 987, 997, 1003, 1007, 1009, 1030, 1034, 1039, 1040, 1043, 1047], "explicitli": [4, 46, 118, 151, 158, 163, 164, 200, 231, 235, 322, 342, 353, 362, 367, 374, 376, 380, 381, 382, 384, 392, 394, 398, 403, 411, 415, 417, 533, 547, 548, 577, 578, 595, 625, 646, 656, 657, 667, 678, 707, 724, 779, 785, 786, 799, 800, 830, 833, 839, 840, 865, 889, 890, 955, 976, 977, 979, 981, 983, 984, 987, 989, 990, 997, 1012, 1023, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1048], "explod": 311, "exploit": [25, 281, 988, 1008, 1033], "exploit_incremental_learn": [802, 823], "explor": [13, 37, 114, 115, 127, 172, 224, 225, 238, 261, 262, 268, 269, 278, 312, 317, 338, 352, 362, 374, 377, 379, 386, 401, 407, 414, 470, 796, 799, 807, 880, 976, 983, 984, 986, 992, 994, 997, 1012, 1017, 1023, 1036], "exploratori": [169, 1012], "explos": [796, 810, 820, 821, 822], "expm1": 75, "expon": [417, 614, 674, 675, 676, 808, 856, 857, 874, 976], "exponenti": [46, 75, 151, 156, 288, 293, 413, 414, 417, 447, 534, 552, 557, 612, 617, 620, 637, 641, 755, 756, 839, 840, 844, 856, 857, 874, 979, 983, 987, 1002, 1021, 1037, 1043], "export": [378, 381, 382, 397, 401, 911, 912, 1003, 1007, 1039], "export_graphviz": [1003, 1035, 1037, 1043, 1045, 1046], "export_text": [1003, 1039, 1046], "expos": [148, 235, 278, 318, 320, 367, 373, 377, 394, 398, 405, 408, 414, 416, 417, 435, 462, 551, 552, 559, 560, 565, 566, 567, 568, 591, 592, 600, 609, 796, 799, 800, 810, 828, 829, 830, 831, 832, 833, 914, 955, 983, 987, 989, 1018, 1020, 1022, 1027, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "exposur": [199, 217, 983], "express": [4, 7, 12, 13, 111, 117, 151, 156, 169, 260, 261, 311, 317, 335, 342, 353, 374, 375, 380, 381, 386, 392, 407, 412, 413, 414, 415, 448, 454, 455, 586, 587, 589, 714, 785, 796, 802, 810, 818, 820, 821, 822, 823, 826, 846, 979, 983, 987, 991, 997, 998, 1003, 1038], "expsinesquar": [151, 156, 160, 417], "exstrac": 987, "ext": 644, "extend": [13, 55, 56, 67, 109, 200, 249, 267, 338, 377, 378, 392, 394, 405, 406, 407, 412, 414, 629, 718, 817, 828, 831, 832, 864, 866, 883, 899, 900, 914, 979, 987, 988, 1002, 1008, 1010, 1025, 1035, 1036, 1037, 1038, 1040, 1045], "extens": [267, 269, 288, 366, 367, 374, 375, 378, 381, 383, 384, 388, 389, 392, 401, 407, 412, 494, 501, 532, 738, 930, 938, 984, 986, 987, 1006, 1007, 1012, 1030, 1036, 1043, 1044, 1046, 1047], "extent": [9, 58, 153, 154, 155, 232, 344, 347, 438, 533, 694, 794, 987], "extercond": 121, "extern": [138, 151, 368, 369, 373, 377, 380, 382, 385, 392, 394, 404, 407, 415, 416, 417, 591, 608, 609, 715, 734, 792, 983, 986, 987, 990, 1003, 1008, 1015, 1021, 1025, 1038, 1042], "exterqu": [121, 132], "extmath": [248, 351, 389, 406, 451, 1030, 1031, 1036, 1037, 1040, 1044, 1045, 1047], "extr": 8, "extra": [46, 120, 127, 237, 283, 322, 353, 378, 379, 381, 384, 394, 414, 415, 436, 441, 445, 457, 462, 530, 555, 556, 564, 588, 589, 698, 699, 700, 820, 843, 909, 910, 926, 986, 987, 990, 1030, 1033, 1035, 1036, 1038, 1043, 1045], "extra_cflag": 386, "extra_tre": [909, 910], "extract": [3, 4, 6, 8, 11, 12, 16, 17, 50, 55, 69, 70, 71, 72, 76, 85, 95, 117, 144, 148, 166, 175, 214, 225, 253, 259, 260, 264, 265, 266, 268, 276, 302, 319, 329, 341, 351, 353, 362, 369, 372, 375, 377, 382, 386, 389, 392, 407, 408, 411, 412, 448, 450, 453, 454, 460, 462, 486, 487, 491, 492, 501, 502, 529, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 581, 582, 586, 587, 589, 591, 592, 595, 597, 629, 716, 785, 796, 810, 836, 858, 859, 904, 936, 944, 951, 976, 984, 988, 992, 997, 1001, 1007, 1009, 1012, 1015, 1019, 1020, 1025, 1030, 1031, 1039, 1042], "extract_dbscan": 407, "extract_patches_2d": [50, 98, 415, 585, 1038], "extract_scor": 263, "extractal": 8, "extractor": [199, 302, 368, 375, 394, 415, 501, 579, 580, 586, 587, 589, 976, 1030], "extran": 380, "extrapol": [4, 151, 178, 200, 231, 263, 878, 987, 997, 1003, 1043, 1045], "extratre": [120, 130, 366, 1033], "extratreeclassifi": [555, 564, 910, 988, 1034, 1039, 1040, 1041, 1043, 1044, 1045, 1047], "extratreeregressor": [556, 561, 564, 909, 988, 993, 1039, 1040, 1041, 1043, 1044, 1045, 1047], "extratreesclassifi": [120, 130, 414, 416, 556, 562, 564, 909, 910, 988, 1033, 1034, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "extratreesregressor": [237, 414, 555, 563, 564, 909, 910, 988, 1033, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "extrem": [124, 199, 201, 237, 238, 305, 312, 328, 352, 380, 383, 407, 412, 555, 556, 562, 563, 564, 630, 631, 677, 721, 749, 909, 910, 911, 913, 987, 989], "extrema": 981, "exxon": 12, "ey": [80, 81, 247, 251, 338, 375, 532, 539, 548], "eyast": 1044, "ezebunandu": 1042, "ezeiza": 761, "ezri": 1043, "f": [0, 4, 5, 7, 11, 12, 13, 15, 17, 20, 26, 30, 32, 37, 43, 47, 48, 49, 52, 53, 55, 58, 64, 67, 71, 75, 86, 98, 111, 114, 117, 118, 119, 121, 122, 124, 127, 132, 133, 139, 142, 144, 147, 148, 149, 151, 157, 158, 160, 166, 168, 169, 170, 171, 172, 175, 183, 185, 188, 190, 199, 200, 201, 203, 209, 213, 217, 221, 232, 234, 235, 238, 242, 250, 258, 260, 261, 262, 263, 266, 267, 269, 270, 272, 283, 286, 299, 300, 301, 307, 310, 311, 315, 317, 319, 321, 322, 325, 326, 337, 342, 346, 351, 352, 353, 362, 375, 380, 381, 382, 384, 386, 392, 405, 408, 412, 414, 415, 416, 417, 485, 506, 507, 529, 530, 535, 536, 564, 579, 580, 581, 585, 590, 593, 594, 596, 597, 598, 602, 603, 604, 605, 606, 607, 615, 625, 630, 633, 656, 694, 711, 720, 723, 726, 727, 753, 780, 781, 784, 785, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 823, 824, 826, 856, 857, 861, 870, 873, 874, 878, 879, 880, 906, 914, 919, 920, 971, 979, 982, 991, 994, 995, 997, 1001, 1009, 1032, 1038, 1039, 1040, 1042, 1044], "f0_c0": 880, "f0_c1": 880, "f0_c2": 880, "f0e442": 245, "f1": [6, 25, 32, 70, 145, 258, 302, 325, 326, 329, 411, 711, 726, 727, 735, 780, 987, 988, 1019, 1023, 1034, 1046], "f1_c0": 880, "f1_c1": 880, "f1_c2": 880, "f1_macro": [411, 987, 1034], "f1_micro": [987, 1034], "f1_sampl": 987, "f1_score": [25, 267, 329, 375, 735, 987, 1030, 1032, 1033, 1034, 1035, 1039, 1040, 1046, 1047], "f1_weight": [987, 1034], "f2": [384, 988], "f2001": 987, "f2006": 987, "f3": 988, "f4": 496, "f401": [45, 67, 90, 101, 170, 196, 220, 222], "f781bf": [40, 44, 62, 63], "f7bd01": 40, "f_": [414, 633, 727, 987], "f_0": 129, "f_1": [129, 267, 987], "f_beta": 987, "f_classif": [144, 145, 341, 416, 590, 593, 594, 596, 597, 598, 602, 604, 607], "f_i": 405, "f_idx": 129, "f_j": [405, 995], "f_m": 414, "f_n": 267, "f_p": 267, "f_regress": [54, 143, 416, 590, 593, 594, 596, 597, 598, 602, 603, 607, 1033, 1037, 1044, 1047], "f_score": 267, "f_statist": [603, 604], "f_test": 143, "fa": [78, 94, 104, 105, 106, 166, 386, 412, 471, 474, 530, 539, 796, 821, 1009], "fa_estim": 95, "fa_scor": 102, "fab": [1012, 1040, 1041], "fabia": [404, 717], "fabian": [0, 2, 186, 204, 221, 295, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1039, 1047], "fabiana": 1041, "fabio": 1036, "fabisch": [0, 2, 1032, 1033, 1034, 1036], "fabrizio": 1045, "face": [3, 5, 15, 16, 36, 48, 51, 53, 68, 94, 98, 100, 102, 104, 105, 106, 119, 166, 175, 227, 232, 234, 243, 351, 373, 380, 384, 412, 414, 416, 447, 470, 491, 492, 493, 519, 530, 531, 535, 537, 538, 539, 541, 556, 582, 655, 671, 695, 711, 810, 825, 842, 879, 904, 922, 990, 1003, 1004, 1005, 1009, 1017, 1022, 1025, 1030, 1038], "face_compress": 1022, "face_id": 237, "facecolor": [12, 26, 34, 45, 60, 95, 101, 113, 140, 159, 220, 236, 260, 290, 307, 336, 339, 342, 343, 345], "faces_cent": 95, "facial": 375, "facil": 986, "facilit": [366, 394, 401, 1007, 1008, 1036, 1039], "fact": [4, 11, 19, 25, 81, 86, 111, 122, 124, 171, 232, 242, 278, 281, 351, 374, 387, 392, 394, 410, 412, 413, 414, 415, 647, 666, 668, 702, 981, 983, 990, 997, 1001, 1002, 1008, 1012, 1044], "facto": 1040, "factor": [3, 6, 9, 16, 26, 31, 44, 46, 53, 55, 62, 78, 85, 94, 100, 104, 106, 130, 166, 169, 213, 225, 228, 238, 271, 272, 283, 284, 297, 299, 300, 305, 307, 317, 319, 337, 366, 367, 380, 386, 389, 394, 404, 406, 407, 414, 415, 417, 438, 440, 452, 467, 469, 470, 471, 472, 474, 476, 486, 502, 512, 513, 525, 530, 533, 534, 536, 538, 539, 542, 543, 544, 545, 547, 548, 559, 560, 561, 586, 589, 595, 611, 647, 648, 649, 652, 653, 654, 680, 681, 690, 717, 780, 796, 799, 800, 821, 845, 879, 893, 895, 903, 935, 936, 976, 983, 984, 990, 997, 1000, 1004, 1007, 1009, 1024, 1025, 1030, 1031, 1033, 1034, 1036, 1044, 1046], "factoranalysi": [95, 102, 105, 412, 542, 1031, 1033, 1042, 1044], "factori": [61, 260, 415, 957, 987], "facundo": [1041, 1044], "fagan": 1039, "fail": [4, 54, 66, 96, 102, 159, 160, 178, 183, 203, 235, 260, 315, 367, 378, 380, 382, 383, 388, 395, 397, 410, 411, 438, 470, 472, 674, 675, 676, 856, 857, 918, 930, 976, 984, 1030, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "failur": [166, 167, 169, 173, 194, 380, 388, 655, 782, 825, 919, 920, 1009, 1011, 1012, 1043, 1044, 1048], "fair": [12, 27, 414, 688, 692, 828, 988, 1012], "fairer": 362, "fairli": [82, 123, 222, 275, 300, 388, 407, 557, 558, 697, 988, 1021], "faith": [19, 157, 343], "fake": 415, "falak": 1039, "fall": [4, 13, 124, 127, 158, 259, 260, 380, 382, 406, 407, 415, 432, 444, 445, 506, 507, 724, 725, 791, 876, 888, 986, 987, 997, 1014, 1022, 1039], "fallback": [395, 397, 827, 828, 987], "fals": [4, 5, 7, 8, 10, 11, 14, 15, 20, 21, 24, 26, 27, 32, 33, 34, 39, 42, 44, 46, 47, 54, 55, 64, 67, 70, 71, 72, 79, 81, 92, 99, 103, 104, 111, 117, 118, 121, 124, 125, 127, 135, 138, 151, 156, 157, 158, 159, 169, 170, 171, 172, 178, 179, 183, 185, 199, 200, 204, 205, 207, 215, 217, 220, 223, 235, 236, 238, 242, 245, 257, 258, 260, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 283, 287, 293, 296, 300, 301, 305, 306, 311, 312, 315, 317, 318, 319, 320, 322, 327, 338, 340, 346, 347, 351, 352, 374, 380, 381, 382, 385, 394, 398, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 420, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 511, 513, 521, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 633, 634, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 692, 693, 695, 696, 697, 698, 699, 700, 701, 706, 707, 709, 710, 711, 712, 713, 716, 717, 723, 724, 725, 726, 727, 728, 735, 739, 740, 747, 748, 751, 753, 758, 760, 764, 766, 771, 775, 779, 780, 781, 782, 784, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 810, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 917, 918, 919, 920, 930, 937, 948, 949, 952, 953, 957, 958, 959, 961, 968, 973, 974, 976, 977, 983, 987, 990, 997, 1001, 1002, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "false_discovery_r": 593, "famili": [6, 366, 368, 394, 407, 410, 412, 415, 416, 590, 593, 594, 596, 597, 598, 604, 856, 857, 875, 887, 983, 997, 1001, 1019, 1021, 1034, 1044], "familiar": [380, 413, 1038], "famou": [375, 377, 414, 1002], "famous": 989, "fan": [0, 1, 367, 395, 1002, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "fanci": 415, "fancybox": 345, "fanelli": [1045, 1046], "fang": [656, 1037, 1038], "fanni": 1040, "fantasi": 992, "fantast": 1012, "faouzi": [1040, 1041], "faq": [0, 388, 411, 690, 984, 997], "far": [25, 60, 82, 121, 152, 158, 169, 199, 217, 338, 342, 351, 353, 380, 389, 417, 718, 879, 962, 992, 993, 1002, 1012, 1021], "farach": 979, "farahsae": 1038, "farawai": 990, "fare": [71, 171, 242, 319, 320, 1034, 1035], "fargo": 12, "farhan": 1046, "farlei": [0, 2, 1030], "farouk": [1038, 1039], "farther": 722, "farthest": 407, "fashion": [7, 116, 122, 207, 269, 367, 394, 404, 405, 407, 412, 414, 551, 555, 556, 557, 558, 562, 563, 564, 600, 625, 825, 848, 863, 866, 872, 883, 907, 908, 909, 910, 958, 977, 983, 987, 997, 1039], "fast": [13, 27, 62, 175, 183, 188, 214, 215, 233, 234, 306, 353, 366, 375, 380, 389, 407, 409, 411, 412, 414, 415, 419, 444, 445, 467, 472, 506, 530, 531, 533, 536, 538, 542, 545, 562, 563, 564, 586, 587, 589, 630, 631, 638, 656, 657, 670, 672, 685, 697, 796, 810, 820, 821, 831, 832, 839, 840, 844, 855, 936, 956, 979, 983, 986, 989, 990, 992, 993, 1003, 1007, 1012, 1023, 1030, 1031, 1036, 1037, 1040, 1041], "fast_dict": 1040, "fast_dot": 1037, "fast_logdet": 389, "fast_svd": 1030, "faster": [7, 19, 39, 64, 73, 95, 116, 117, 121, 122, 124, 127, 148, 170, 175, 185, 199, 201, 214, 215, 217, 234, 238, 283, 285, 301, 316, 318, 319, 351, 352, 353, 366, 374, 380, 388, 389, 394, 406, 407, 412, 416, 417, 419, 441, 445, 447, 449, 450, 451, 460, 506, 529, 530, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 551, 557, 558, 559, 560, 641, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 670, 672, 682, 685, 689, 693, 723, 753, 775, 776, 777, 839, 840, 844, 856, 857, 874, 876, 878, 888, 892, 936, 956, 976, 980, 983, 988, 990, 991, 994, 999, 1001, 1002, 1003, 1007, 1019, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "fastest": [57, 258, 353, 445, 668, 670, 672, 685, 935, 936, 986], "fastest_top_recall_high_precision_index": 258, "fastfm": 1007, "fastica": [94, 106, 166, 198, 412, 530, 533, 539, 1009, 1022, 1030, 1032, 1038, 1044, 1045], "fastkmean": 447, "fastmcd": [409, 467, 472], "fastnc": 855, "fat": [519, 522], "fatima": [1044, 1047], "fato": 1043, "fauchereau": 1043, "fault": [388, 1038, 1040, 1042], "faulti": [202, 1030], "favor": [5, 82, 117, 245, 251, 392, 409, 414, 727, 804, 806, 858, 976, 995, 1032, 1034, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "favorit": [380, 392, 1012], "favour": [789, 984, 986, 1039], "fawcett": [785, 786, 987], "fazlul": 1032, "fbeta_scor": [726, 739, 780, 987, 1032, 1033, 1034, 1035, 1040, 1046], "fc": [9, 288, 375], "fc2009": 987, "fcd116": 92, "fcharra": [1045, 1048], "fcluster": 172, "fcostin": 1030, "fd": 8, "fdr": 590, "fear": 1023, "feasibl": [380, 868, 869, 879], "feast": 408, "feat": [8, 10, 384, 415], "feat0": [230, 316], "feat1": [230, 316, 415], "feat2": [230, 316, 415], "feat3": [230, 316, 415], "feat_idx": 625, "featurfeature_0": 912, "feature_1": [629, 912], "feature_2": 629, "feature_all_": 836, "feature_count_": [834, 836, 838], "feature_extract": [8, 15, 19, 46, 47, 50, 51, 54, 66, 70, 98, 166, 261, 329, 350, 351, 352, 353, 368, 369, 375, 407, 408, 415, 462, 542, 872, 985, 1022, 1023, 1030, 1031, 1032, 1033, 1036, 1037], "feature_import": 125, "feature_importances_": [118, 119, 125, 148, 171, 172, 394, 414, 416, 551, 552, 555, 556, 557, 558, 562, 563, 564, 591, 592, 595, 907, 908, 909, 910, 1032, 1035, 1039], "feature_index": 415, "feature_indices_": 1038, "feature_log_prob_": [834, 835, 836, 838], "feature_map": [233, 305], "feature_map__n_compon": 233, "feature_map_fouri": 233, "feature_map_nystroem": [233, 637], "feature_nam": [15, 19, 90, 105, 118, 125, 129, 148, 169, 171, 208, 239, 286, 305, 315, 316, 317, 322, 335, 351, 357, 373, 375, 385, 408, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 580, 629, 630, 631, 880, 911, 912, 913, 995, 1003, 1046], "feature_name_combin": [872, 1046], "feature_names_": 579, "feature_names_in": 1044, "feature_names_in_": [242, 312, 318, 394, 428, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 625, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 1043, 1044, 1045, 1046, 1048], "feature_names_out": [423, 428, 440, 441, 443, 445, 447, 462, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 1044, 1047], "feature_rang": [302, 869, 885, 997, 1032, 1042], "feature_select": [54, 71, 72, 74, 142, 143, 144, 145, 146, 147, 148, 149, 166, 242, 317, 319, 341, 362, 369, 394, 398, 408, 416, 579, 976, 1009, 1030, 1031, 1033, 1034, 1035, 1036, 1037], "feature_selector": 148, "feature_to_plot": 193, "feature_union": 1046, "featureagglomer": [51, 54, 438, 439, 1004, 1022, 1033, 1039, 1040, 1043, 1044, 1046, 1047], "featureforg": 1012, "featurehash": [19, 70, 166, 329, 350, 351, 352, 354, 368, 375, 415, 486, 579, 586, 587, 588, 589, 872, 1009, 1031, 1036, 1037, 1038, 1044, 1045], "featureheash": 353, "features_": [627, 977], "features__pca__n_compon": 74, "features__univ_select__k": 74, "features_idx": 305, "features_info": 170, "features_nam": [168, 1037], "features_samples_ratio": 33, "featureselector": 599, "featuretool": 1007, "featureunion": [4, 74, 372, 394, 398, 406, 462, 627, 861, 977, 1008, 1012, 1025, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "featurewis": 875, "feb": [38, 438, 452], "februari": [0, 409, 471, 987, 1031, 1035, 1047], "fed": [8, 132, 362, 375, 415, 976, 992, 997, 1041], "feda": [1038, 1039], "feder": 1007, "federico": [1032, 1033, 1038, 1039, 1044], "federicopisanu": 1040, "federicov": 8, "feed": [8, 86, 200, 353, 375, 378, 385, 392, 407, 415, 739, 872, 988], "feedback": [257, 379, 380, 381, 395, 1007, 1011, 1038], "feedforward": [856, 857], "feedstock": 384, "feel": [27, 164, 305, 379, 380, 388, 407, 444, 1003], "feel_temp": [4, 170], "feghali": 1047, "fei": [561, 993], "feld": [1034, 1046], "feldbauer": [1038, 1039, 1040, 1041, 1044], "feldman": [1032, 1037, 1038, 1039, 1040], "felip": [1043, 1044, 1045, 1046], "felix": [1032, 1037, 1038, 1040, 1042, 1043, 1044], "femal": [71, 169, 320, 385, 872, 873, 997], "fenc": 385, "feng": [1040, 1042, 1043, 1044], "fenil": 1043, "fenx": 1038, "ferdman": 1047, "ferenc": 1012, "fernand": [1038, 1044, 1045], "fernandez": 1039, "fernando": [1035, 1042], "fern\u00e1ndez": 1044, "ferrando": 1040, "ferrari": 1038, "ferreira": [1038, 1043, 1044], "ferri": [416, 987], "ferria": 1037, "ferrin": 1044, "ferriss": 1037, "ferr\u00e9": 1044, "ferr\u00edn": 1041, "fetal": 238, "fetch": [12, 17, 132, 169, 217, 373, 374, 375, 380, 384, 385, 388, 406, 412, 494, 553, 554, 555, 556, 561, 562, 563, 564, 586, 587, 589, 1038, 1046], "fetch_": 1037, "fetch_20newsgroup": [15, 19, 70, 261, 329, 351, 352, 353, 375, 487, 1023, 1035, 1040, 1048], "fetch_20newsgroups_vector": [7, 214, 232, 375, 1030, 1040, 1042, 1047, 1048], "fetch_california_h": [117, 122, 163, 164, 305, 317, 375, 393, 408, 1039, 1041, 1048], "fetch_covtyp": [175, 238, 317, 375, 1039, 1042, 1044, 1048], "fetch_data": 1023, "fetch_kddcup99": [238, 375, 1037, 1038, 1039, 1042, 1043, 1048], "fetch_lfw_pair": [375, 1035, 1045, 1048], "fetch_lfw_peopl": [6, 375, 1019, 1045, 1048], "fetch_mldata": 1038, "fetch_olivetti_fac": [50, 95, 119, 237, 375, 1038, 1039, 1040, 1048], "fetch_openml": [4, 5, 13, 71, 75, 121, 127, 132, 156, 169, 170, 171, 199, 207, 215, 217, 229, 238, 242, 278, 281, 283, 301, 311, 315, 319, 322, 374, 384, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "fetch_rcv1": [375, 1035, 1039, 1048], "fetch_species_distribut": [11, 296, 1039, 1048], "fetcher": [373, 1035, 1037, 1046], "feth": 1030, "feurer": [1033, 1038], "fevott": [412, 536, 538, 545], "few": [7, 15, 19, 39, 46, 52, 99, 121, 127, 154, 157, 158, 188, 197, 199, 201, 217, 234, 235, 245, 262, 263, 267, 301, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 325, 346, 353, 366, 375, 376, 377, 380, 382, 393, 395, 398, 401, 404, 405, 407, 411, 412, 414, 416, 417, 435, 447, 559, 560, 586, 589, 653, 690, 693, 892, 936, 955, 983, 984, 986, 987, 990, 991, 1000, 1002, 1003, 1012, 1014, 1021, 1022, 1023, 1036, 1046], "fewer": [4, 14, 26, 55, 111, 120, 122, 199, 366, 381, 407, 416, 417, 446, 459, 539, 551, 592, 694, 829, 940, 983, 988, 990, 1035, 1036, 1037], "fewest": [259, 625], "ff": 388, "ff0000": [31, 291, 299], "ff3333": 92, "ff7216": 92, "ff7f00": [44, 62, 228], "ff9c34": [59, 64], "ffaaaa": 291, "ffc107": 309, "fft": 638, "fhaselbeck": 1042, "fhoang7": 1039, "fhr": 238, "fi": 870, "fibins": [1038, 1039], "fidel": 14, "fidor": 1046, "fiedler": 1036, "fiegel": [1042, 1043, 1045], "field": [148, 217, 377, 404, 407, 408, 415, 496, 499, 615, 983, 985, 994, 1002, 1007, 1011, 1023, 1031], "fifth": [234, 980, 1014], "fig": [4, 5, 7, 8, 9, 10, 13, 15, 25, 27, 30, 34, 42, 43, 45, 53, 55, 57, 60, 64, 66, 73, 78, 80, 86, 90, 95, 100, 101, 105, 111, 117, 118, 121, 122, 124, 125, 127, 129, 130, 132, 134, 154, 160, 163, 170, 172, 175, 179, 187, 190, 193, 194, 196, 197, 199, 200, 203, 207, 212, 214, 217, 220, 221, 222, 223, 224, 225, 229, 231, 238, 239, 250, 255, 256, 257, 260, 261, 262, 263, 266, 269, 270, 271, 281, 283, 285, 287, 288, 296, 300, 301, 305, 306, 307, 309, 310, 311, 315, 319, 320, 335, 342, 345, 346, 347, 348, 351, 352, 353, 356, 387, 1019, 1022], "fig1": 67, "fig2": 67, "fig_num": 196, "figaspect": 309, "fight": [39, 203, 1012], "fighter": 70, "fignum": 343, "figsiz": [4, 5, 6, 10, 12, 13, 14, 15, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 73, 75, 80, 82, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 104, 105, 111, 113, 114, 121, 122, 123, 124, 125, 127, 130, 132, 133, 143, 153, 155, 159, 160, 163, 164, 169, 170, 172, 175, 178, 179, 182, 183, 189, 193, 196, 197, 198, 199, 200, 201, 203, 205, 207, 210, 213, 215, 217, 220, 221, 222, 224, 225, 228, 229, 231, 233, 236, 237, 238, 239, 245, 247, 248, 251, 255, 256, 257, 262, 263, 264, 267, 269, 270, 274, 281, 283, 285, 286, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 319, 320, 325, 327, 336, 338, 342, 343, 345, 346, 347, 348, 351, 352, 353, 913, 1019], "figur": [6, 7, 8, 10, 12, 14, 24, 25, 26, 27, 31, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 78, 82, 85, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 111, 112, 113, 114, 123, 124, 125, 126, 127, 130, 131, 135, 138, 140, 143, 144, 147, 152, 153, 154, 155, 158, 159, 164, 169, 170, 171, 172, 178, 183, 184, 189, 192, 193, 196, 198, 200, 201, 205, 210, 214, 215, 216, 222, 223, 224, 228, 232, 233, 234, 236, 237, 239, 245, 247, 248, 251, 254, 259, 264, 265, 274, 288, 292, 293, 296, 299, 302, 305, 307, 308, 312, 315, 317, 325, 326, 327, 336, 338, 343, 357, 358, 359, 380, 407, 413, 414, 415, 417, 436, 629, 630, 695, 696, 698, 699, 700, 802, 818, 913, 976, 980, 983, 986, 987, 990, 991, 994, 995, 1001, 1002, 1003, 1018, 1019, 1021, 1022, 1043], "figure_": [32, 170, 239, 315, 317, 387, 436, 629, 630, 695, 696, 698, 699, 700, 802, 818], "figure_titl": 121, "filali": 1038, "file": [8, 12, 16, 22, 28, 32, 35, 48, 68, 76, 83, 87, 93, 106, 108, 136, 141, 149, 161, 165, 173, 176, 218, 226, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 351, 352, 354, 361, 366, 367, 368, 374, 375, 377, 378, 380, 384, 385, 386, 388, 392, 401, 408, 412, 485, 491, 492, 494, 501, 506, 507, 532, 577, 578, 586, 587, 589, 911, 990, 1003, 1009, 1011, 1015, 1030, 1031, 1033, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046], "file_1": 501, "file_2": 501, "file_42": 501, "file_43": 501, "file_44": 501, "file_id": 374, "filenam": [8, 17, 329, 375, 386, 401, 486, 498, 501, 502, 505, 586, 587, 589, 1023, 1030, 1035, 1038, 1039], "filesystem": [388, 397, 1043], "filho": 405, "filip": [1047, 1048], "filipj8": [1037, 1038], "fill": [34, 120, 138, 171, 255, 288, 357, 394, 408, 412, 513, 525, 536, 538, 545, 585, 628, 911, 913, 977, 990, 1003, 1048], "fill_between": [13, 124, 127, 138, 151, 156, 158, 160, 178, 179, 217, 260, 262, 263, 264, 270, 802, 818], "fill_between_": [802, 818], "fill_between_kw": [802, 818], "fill_betweenx": 60, "fill_diagon": [172, 223], "fill_legend": 217, "fill_valu": [164, 230, 240, 316, 421, 424, 430, 431, 625, 628, 997, 1038, 1046, 1047], "fillna": [217, 238], "filo": [1030, 1033], "filter": [8, 15, 46, 47, 73, 205, 217, 258, 260, 285, 351, 367, 375, 386, 389, 406, 407, 415, 446, 486, 487, 501, 586, 589, 593, 594, 595, 596, 597, 598, 771, 834, 928, 952, 989, 990, 1020, 1023, 1040], "filter_param": 771, "filtered_cv_result": 258, "filterwarn": [44, 62, 214, 300, 301, 380, 997], "final": [4, 13, 26, 27, 34, 40, 42, 55, 70, 71, 80, 82, 86, 91, 100, 111, 112, 114, 116, 121, 122, 125, 132, 135, 145, 156, 164, 168, 170, 172, 175, 178, 183, 187, 188, 196, 199, 201, 216, 217, 221, 228, 242, 249, 258, 266, 278, 283, 311, 312, 315, 316, 338, 342, 366, 368, 375, 378, 380, 381, 382, 384, 393, 394, 404, 405, 407, 408, 411, 414, 415, 416, 435, 440, 445, 446, 450, 457, 460, 462, 534, 553, 554, 565, 566, 568, 592, 625, 645, 651, 657, 677, 688, 692, 717, 796, 827, 828, 859, 860, 896, 899, 976, 977, 979, 983, 984, 987, 990, 993, 994, 997, 1000, 1012, 1021, 1035, 1038, 1039, 1040, 1041, 1043], "final_estim": [132, 315, 414, 565, 566], "final_estimator_": [565, 566], "final_lay": 414, "final_layer_gbr": 414, "final_layer_rfr": 414, "final_step": 42, "financ": 988, "financi": [0, 12, 407, 414, 983], "find": [4, 5, 6, 12, 17, 27, 40, 46, 47, 48, 49, 52, 53, 55, 57, 65, 73, 80, 81, 95, 97, 99, 100, 105, 122, 132, 151, 155, 157, 159, 170, 183, 187, 188, 201, 207, 220, 222, 224, 225, 231, 238, 250, 259, 260, 261, 271, 286, 291, 292, 293, 310, 315, 321, 340, 341, 342, 346, 351, 352, 356, 367, 377, 378, 380, 381, 382, 385, 386, 389, 392, 393, 394, 395, 404, 407, 409, 410, 412, 414, 415, 416, 418, 439, 442, 443, 444, 448, 449, 450, 451, 460, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 556, 563, 580, 587, 608, 609, 645, 648, 651, 652, 653, 654, 656, 657, 669, 686, 705, 726, 727, 735, 779, 780, 781, 784, 785, 791, 796, 810, 841, 842, 843, 845, 847, 849, 850, 851, 872, 873, 878, 891, 892, 893, 907, 908, 910, 916, 935, 936, 938, 976, 977, 979, 982, 983, 984, 986, 987, 988, 991, 993, 997, 1001, 1002, 1003, 1006, 1008, 1011, 1012, 1014, 1016, 1018, 1019, 1021, 1022, 1023, 1030, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1048], "findal": 353, "fine": [4, 37, 120, 148, 203, 215, 251, 258, 342, 358, 359, 377, 384, 394, 415, 444, 936, 955, 990, 993, 1002, 1008, 1040], "finer": [4, 13, 37, 285, 338, 367, 407, 411, 976, 990, 1040], "finfo": [223, 469, 470, 476, 604, 648, 649, 652, 653, 654, 680, 681, 738, 1045], "finish": [148, 248, 984], "finit": [27, 245, 251, 366, 375, 394, 466, 536, 549, 580, 604, 607, 608, 609, 656, 725, 775, 782, 794, 820, 897, 917, 918, 919, 920, 983, 986, 987, 1012, 1014, 1021, 1037, 1038, 1042, 1044, 1045], "finn": [1038, 1039], "fire": 1023, "firefox": 997, "fireplac": 121, "fireplacequ": 121, "firm": [12, 407], "first": [0, 4, 5, 7, 8, 11, 13, 17, 20, 25, 26, 30, 31, 32, 34, 39, 55, 56, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 80, 85, 86, 89, 90, 91, 100, 103, 111, 112, 116, 118, 119, 120, 121, 122, 123, 125, 127, 129, 132, 133, 134, 135, 144, 145, 148, 151, 152, 153, 156, 157, 158, 159, 164, 168, 169, 170, 172, 175, 178, 180, 182, 188, 195, 196, 197, 200, 201, 207, 208, 213, 221, 224, 232, 233, 235, 236, 237, 239, 241, 242, 247, 251, 255, 260, 262, 263, 267, 269, 271, 272, 278, 281, 283, 285, 288, 292, 293, 294, 299, 301, 305, 307, 310, 311, 312, 316, 317, 326, 329, 334, 335, 338, 340, 351, 352, 353, 356, 357, 360, 362, 367, 368, 374, 375, 377, 378, 379, 382, 384, 385, 386, 388, 392, 394, 404, 405, 407, 410, 411, 412, 414, 415, 416, 417, 419, 441, 444, 445, 448, 457, 458, 462, 470, 481, 485, 486, 488, 489, 490, 492, 495, 498, 500, 502, 506, 507, 508, 526, 531, 532, 536, 539, 551, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 580, 582, 586, 587, 588, 589, 591, 592, 599, 608, 609, 615, 619, 622, 629, 630, 631, 632, 644, 650, 657, 664, 666, 672, 674, 686, 693, 696, 697, 698, 700, 710, 714, 733, 739, 760, 761, 779, 791, 794, 795, 799, 800, 801, 802, 803, 808, 810, 817, 818, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 844, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 864, 872, 876, 877, 878, 880, 881, 888, 889, 901, 904, 907, 908, 909, 910, 912, 914, 915, 919, 920, 921, 938, 940, 954, 958, 961, 973, 976, 977, 981, 982, 983, 984, 986, 987, 988, 989, 990, 994, 997, 998, 1001, 1002, 1003, 1012, 1014, 1020, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "first_img_data": 505, "first_pca_compon": 310, "first_quart": 104, "first_week": 127, "firstli": [98, 366, 392, 655, 1023], "fisach": 1036, "fiscal": 0, "fischer": [1035, 1036], "fischler": 983, "fischoff": 1042, "fish": 318, "fisher": [377, 414, 502, 634, 1007], "fisher1958": 414, "fisher_transform": 634, "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 98, 99, 100, 101, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 175, 177, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 223, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 278, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 351, 352, 356, 357, 358, 359, 360, 366, 368, 369, 372, 375, 377, 380, 383, 385, 386, 389, 392, 394, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 499, 507, 508, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 575, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 695, 696, 698, 699, 700, 708, 709, 720, 729, 732, 747, 785, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 928, 944, 945, 947, 955, 971, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1012, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "fit_": 1043, "fit_algorithm": [95, 529, 535, 1045, 1046], "fit_and_evalu": 352, "fit_and_plot_model": 310, "fit_and_scor": 207, "fit_data": 21, "fit_dur": 283, "fit_ecoc": 1034, "fit_grid_point": 1041, "fit_intercept": [7, 178, 179, 185, 204, 213, 228, 268, 312, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 899, 900, 906, 983, 1001, 1034, 1038, 1039, 1040, 1042, 1043, 1044], "fit_inverse_transform": [5, 100, 533, 1039], "fit_ovo": 1034, "fit_ovr": 1034, "fit_param": [235, 394, 431, 435, 440, 443, 463, 530, 532, 534, 535, 537, 540, 541, 547, 553, 554, 565, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 628, 633, 636, 637, 638, 639, 640, 663, 669, 802, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 843, 848, 851, 855, 858, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 891, 892, 947, 1037, 1040, 1041, 1042, 1044, 1046, 1047, 1048], "fit_path": [648, 652, 653, 654, 680, 681], "fit_predict": [19, 56, 57, 60, 228, 235, 238, 290, 382, 394, 407, 425, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 467, 561, 675, 789, 790, 794, 795, 845, 851, 859, 903, 993, 1035, 1038, 1039, 1043, 1045, 1047], "fit_prior": [375, 834, 835, 836, 838], "fit_status_": [901, 902, 903, 904, 905], "fit_tim": [13, 58, 121, 188, 207, 262, 411, 822, 823], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 13, "fit_times_nb": 262, "fit_times_svm": 262, "fit_transform": [4, 5, 6, 10, 12, 15, 19, 44, 49, 52, 53, 58, 62, 90, 96, 99, 105, 130, 175, 190, 215, 217, 220, 221, 222, 223, 224, 225, 231, 232, 235, 236, 242, 283, 287, 300, 305, 306, 310, 311, 312, 315, 318, 320, 321, 322, 338, 351, 352, 353, 362, 372, 375, 382, 385, 386, 394, 403, 408, 412, 415, 416, 423, 431, 440, 441, 443, 445, 447, 462, 464, 466, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 688, 689, 690, 694, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 977, 979, 983, 988, 990, 997, 998, 999, 1014, 1019, 1022, 1023, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048], "fitfailedwarn": [796, 799, 800, 802, 810, 818, 821, 822, 823, 826], "fitted_transform": [382, 462], "fittedcolumntransform": [132, 170], "fittedgridsearchcv": 240, "fittedpipelin": [132, 230, 240, 261, 311, 316], "fittedrandomforestclassifi": 322, "fittedrandomizedsearchcv": 71, "fittedstackingregressor": 132, "fitter": 1003, "fitting_weight": 398, "fitzgerald": 1038, "fitzk": 1012, "five": [119, 127, 246, 326, 329, 375, 529, 537, 543, 984, 990, 1002, 1012, 1030], "five_imag": 415, "fix": [4, 8, 20, 25, 34, 46, 71, 104, 116, 117, 120, 127, 151, 152, 156, 159, 169, 183, 201, 217, 238, 251, 263, 299, 315, 316, 317, 318, 319, 320, 321, 322, 352, 366, 367, 374, 376, 378, 379, 380, 382, 383, 388, 392, 394, 395, 398, 407, 408, 411, 412, 414, 415, 417, 450, 460, 470, 502, 510, 529, 535, 538, 540, 546, 547, 557, 558, 562, 563, 586, 589, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 628, 651, 661, 666, 668, 682, 685, 689, 693, 705, 782, 794, 810, 817, 841, 842, 844, 847, 849, 850, 866, 869, 883, 907, 908, 936, 954, 976, 983, 986, 987, 990, 997, 1008, 1023, 1028, 1029, 1031, 1032, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "fixed_classes_uniform_labelings_scor": 37, "fixed_vocabulary_": [586, 589], "fixm": [384, 394], "fixtur": [367, 380], "fkaren27": 1044, "flach": [405, 987], "flach2008": 987, "flach2015": 987, "flag": [156, 235, 238, 322, 378, 380, 381, 383, 398, 403, 462, 608, 609, 625, 671, 673, 725, 782, 1002, 1036, 1040, 1041, 1043, 1044, 1045, 1046], "flair": 989, "flak": 1045, "flake8": 577, "flanagan": [1039, 1040], "flat": [43, 95, 170, 220, 221, 222, 258, 407, 414, 415, 438, 444, 446, 459, 507, 994, 1022, 1030, 1031, 1046], "flat_grid": 233, "flatnonzero": [104, 187, 259, 268, 269, 778], "flatten": [15, 32, 223, 233, 258, 309, 335, 347, 386, 500, 567, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 848], "flatten_transform": [567, 1037], "flatter": [4, 25], "flavanoid": [9, 377], "flaviomorelli": 1040, "flavor": [380, 990], "flavour": 414, "flaw": [394, 414], "flaxman": [1032, 1034], "fledg": [368, 415], "fleet": 4, "fleme": 1045, "flennerhag": 1038, "fletcher": [983, 1030, 1034], "flexibl": [4, 25, 121, 163, 199, 306, 335, 353, 382, 387, 392, 411, 417, 672, 899, 900, 976, 981, 983, 987, 991, 997, 1007, 1008, 1012, 1039, 1043], "flier": 10, "flink": 70, "flip": [99, 580, 739, 936, 989, 1034, 1043], "flip_i": 513, "flip_sign": 936, "float": [7, 10, 12, 19, 41, 45, 46, 47, 48, 53, 60, 61, 65, 66, 67, 71, 98, 101, 140, 159, 169, 185, 189, 223, 259, 260, 264, 268, 346, 353, 366, 374, 375, 380, 389, 394, 403, 407, 408, 415, 416, 418, 419, 420, 424, 426, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 581, 582, 586, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 608, 609, 611, 612, 613, 614, 615, 617, 618, 620, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 756, 763, 766, 772, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 810, 813, 816, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 862, 865, 866, 872, 873, 875, 877, 879, 880, 881, 882, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 916, 917, 919, 920, 923, 933, 934, 950, 962, 968, 973, 977, 987, 988, 990, 991, 997, 1002, 1003, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "float16": 1039, "float32": [17, 123, 223, 302, 320, 367, 375, 380, 382, 394, 403, 555, 556, 557, 558, 561, 562, 563, 564, 591, 592, 638, 639, 656, 697, 760, 864, 907, 908, 909, 910, 917, 963, 964, 965, 1003, 1014, 1023, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "float64": [11, 13, 14, 48, 53, 71, 123, 125, 126, 169, 170, 271, 319, 320, 367, 374, 380, 382, 394, 415, 469, 470, 476, 494, 495, 506, 507, 540, 546, 579, 580, 587, 589, 639, 656, 671, 673, 697, 735, 864, 872, 873, 901, 902, 904, 905, 908, 910, 917, 919, 958, 961, 963, 964, 965, 1002, 1014, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "float_info": 19, "floch": 1047, "floor": 14, "floor_x": 14, "flore": 1043, "florian": [216, 1012, 1030, 1034, 1036, 1040, 1047], "florin": 1048, "flow": 382, "flowchart": [411, 1016], "flower": [90, 103, 269, 504, 505, 987, 1007], "floyd": [375, 686, 984], "floydsoft": 1034, "fluctuat": [12, 60, 127, 199, 267, 1038], "flush": 207, "fly": [123, 385, 388, 506, 507, 580, 1030, 1032, 1039], "flyingdutchman23": 1043, "flyingimmidev": 1030, "flynn": [1043, 1045], "fmax": 217, "fmi": [407, 728], "fmin_l_bfgs_b": [608, 609], "fmt": [61, 210], "fn": [407, 710, 716, 726, 727, 728, 779, 780, 781, 784, 987, 988], "fn_c": 269, "fna": [148, 377], "fnlwgt": [322, 494], "fnr": [257, 696, 724], "fo": 415, "focu": [4, 9, 95, 111, 151, 251, 293, 366, 385, 405, 414, 551, 552, 557, 559, 560, 676, 984, 990, 997, 1007, 1008, 1011], "focus": [25, 78, 188, 278, 375, 392, 984, 997, 1007], "fokow": 1047, "fold": [4, 67, 74, 78, 117, 120, 123, 138, 147, 169, 188, 247, 255, 256, 258, 260, 261, 263, 270, 312, 328, 346, 362, 375, 380, 383, 384, 393, 394, 398, 407, 416, 435, 470, 491, 534, 565, 566, 592, 600, 645, 649, 651, 653, 657, 659, 661, 663, 671, 673, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 880, 901, 904, 976, 983, 987, 997, 1002, 1018, 1030, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1047], "folder": [72, 375, 378, 380, 384, 388, 397, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 990, 1023], "folkman": 1037, "folloni": 1041, "follow": [0, 4, 7, 19, 26, 27, 32, 37, 45, 54, 55, 57, 63, 67, 71, 72, 92, 95, 104, 111, 114, 124, 129, 143, 156, 163, 168, 169, 170, 171, 172, 178, 180, 183, 187, 188, 197, 199, 200, 214, 217, 229, 235, 236, 238, 251, 260, 267, 269, 270, 278, 305, 311, 312, 315, 316, 318, 319, 320, 335, 346, 351, 352, 353, 356, 360, 362, 366, 367, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 424, 426, 427, 428, 429, 430, 431, 439, 441, 443, 444, 445, 446, 447, 451, 459, 461, 462, 463, 466, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 513, 532, 536, 538, 539, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 629, 631, 632, 644, 650, 656, 657, 668, 669, 678, 690, 692, 697, 703, 707, 711, 716, 785, 815, 836, 841, 842, 843, 845, 847, 849, 850, 851, 858, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 897, 899, 900, 904, 907, 908, 909, 910, 914, 915, 935, 955, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1014, 1023, 1027, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "folwarczn\u00fd": 1047, "fonari": [1042, 1043], "fond": [0, 1012], "fondat": 1012, "font": [124, 188, 213, 233, 911, 913], "font_manag": [81, 289, 337], "font_prop": 81, "font_siz": 309, "fontdict": [15, 39], "fontnam": [911, 1043], "fontproperti": [81, 289, 337], "fontsiz": [5, 8, 10, 15, 34, 50, 60, 91, 98, 120, 143, 154, 155, 157, 160, 170, 179, 189, 198, 210, 221, 222, 248, 255, 264, 265, 266, 271, 272, 302, 309, 345, 913], "fontweight": [60, 194], "foo": [382, 579, 991], "food": 377, "foot": 1006, "footer": [15, 70, 261, 351, 352, 375, 486, 487], "footnot": [994, 1007], "footprint": [317, 320, 366, 368, 407, 412, 539, 553, 554, 555, 556, 561, 562, 563, 564, 1032, 1035, 1036, 1041, 1042, 1045], "fopenmp": [378, 381], "foral": [407, 417, 611], "forbid": [407, 414], "forbidden": [170, 414], "forc": [111, 151, 184, 203, 283, 309, 351, 374, 378, 384, 402, 411, 414, 448, 455, 494, 604, 607, 644, 645, 650, 651, 655, 658, 659, 660, 661, 670, 671, 672, 679, 682, 685, 751, 775, 778, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 901, 902, 903, 904, 905, 917, 919, 920, 997, 1025, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1046], "force_all_finit": [775, 917, 919, 920, 1041, 1044], "force_alpha": [834, 835, 836, 838, 1045], "force_finit": [604, 607, 725, 782, 987, 1044], "ford": 12, "forecast": [3, 4, 16, 124, 127, 150, 151, 157, 158, 161, 166, 201, 217, 260, 264, 405, 417, 494, 560, 609, 613, 620, 621, 623, 699, 739, 742, 743, 745, 787, 817, 821, 822, 825, 987, 1007, 1009], "foreground": [40, 66], "foreman": 1037, "forese": 392, "forest": [11, 27, 31, 110, 111, 116, 120, 122, 123, 125, 126, 127, 128, 130, 132, 135, 136, 163, 166, 167, 173, 175, 228, 257, 259, 261, 296, 317, 351, 359, 362, 373, 393, 394, 405, 406, 416, 461, 462, 488, 489, 493, 494, 496, 513, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 628, 632, 796, 801, 825, 832, 859, 873, 903, 907, 908, 909, 976, 977, 988, 995, 1008, 1009, 1010, 1025, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1047], "forest_import": 118, "forestclassifi": 1035, "forestcov": 238, "forg": [315, 316, 317, 318, 319, 320, 321, 322, 367, 381, 383, 384, 388, 397], "forget": [170, 362, 367, 374, 384, 392, 412, 984], "forget_factor": [412, 536], "forgiv": 731, "forina": 377, "fork": [378, 380, 384, 388, 392], "forkserv": 392, "form": [4, 9, 19, 32, 42, 60, 67, 95, 135, 158, 159, 169, 234, 235, 251, 260, 325, 362, 374, 377, 380, 382, 384, 394, 395, 404, 406, 407, 410, 411, 412, 413, 414, 415, 417, 419, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 697, 794, 795, 796, 799, 800, 801, 804, 806, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 925, 944, 947, 976, 978, 980, 981, 983, 984, 987, 988, 991, 992, 993, 997, 1002, 1007, 1014, 1021, 1036, 1040, 1042], "formal": [394, 395, 407, 414, 839, 840, 984, 987, 988, 991], "format": [8, 11, 12, 13, 19, 21, 48, 54, 58, 61, 70, 80, 95, 104, 114, 120, 123, 125, 138, 143, 144, 175, 179, 185, 199, 217, 255, 265, 267, 268, 271, 274, 287, 288, 291, 292, 309, 315, 345, 356, 360, 366, 373, 379, 380, 382, 383, 388, 389, 393, 394, 408, 411, 414, 415, 431, 440, 441, 443, 445, 447, 448, 450, 457, 462, 466, 480, 481, 482, 483, 485, 487, 494, 495, 496, 506, 507, 508, 521, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 549, 555, 556, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 585, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 644, 650, 656, 657, 658, 660, 664, 665, 666, 674, 675, 676, 686, 687, 690, 695, 711, 718, 736, 737, 748, 765, 788, 789, 828, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 886, 891, 892, 897, 899, 911, 919, 920, 941, 949, 953, 958, 961, 963, 964, 965, 966, 967, 968, 973, 977, 987, 990, 995, 997, 998, 1001, 1003, 1007, 1014, 1015, 1025, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1047, 1048], "format_func": 288, "formatter_result": 58, "former": [12, 353, 414, 415, 563, 798, 805, 814, 989, 1030, 1036, 1039], "formerli": [203, 1031, 1034, 1036, 1037], "formul": [111, 151, 160, 203, 269, 380, 407, 409, 412, 415, 417, 420, 473, 547, 548, 555, 562, 648, 649, 652, 653, 654, 656, 657, 663, 668, 760, 766, 795, 901, 904, 907, 909, 983, 987, 988, 991, 997, 1010, 1025, 1047], "formula": [78, 79, 267, 404, 407, 409, 420, 471, 473, 514, 515, 516, 588, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 674, 676, 702, 726, 727, 752, 761, 976, 981, 983, 987, 992, 993, 997, 1001, 1035, 1037, 1039], "forrest": [1041, 1042], "forsal": [19, 353, 375], "forsyth": 1038, "forth": 388, "fortin": [1030, 1032, 1033, 1034], "fortran": [419, 539, 644, 645, 650, 651, 658, 659, 660, 661, 663, 679, 682, 683, 684, 919, 920, 1030, 1033, 1034, 1038], "fortun": [386, 414, 1023, 1043, 1044], "forward": [7, 111, 148, 235, 317, 366, 380, 398, 416, 506, 507, 537, 541, 551, 557, 558, 600, 666, 683, 684, 859, 863, 983, 1008, 1042], "foster": [0, 1038], "fouchet": 1036, "found": [6, 19, 20, 21, 105, 118, 147, 151, 155, 157, 159, 203, 236, 258, 261, 262, 263, 310, 315, 318, 320, 321, 338, 353, 366, 368, 374, 377, 379, 380, 382, 392, 394, 395, 404, 407, 410, 411, 412, 414, 415, 417, 432, 439, 442, 443, 457, 470, 555, 556, 557, 558, 562, 563, 586, 588, 608, 609, 626, 634, 645, 649, 651, 653, 659, 661, 663, 669, 670, 672, 674, 676, 685, 686, 710, 717, 796, 799, 800, 810, 836, 841, 842, 848, 870, 872, 873, 907, 908, 909, 910, 914, 916, 971, 975, 976, 979, 983, 984, 986, 988, 989, 990, 991, 997, 1001, 1002, 1003, 1008, 1014, 1019, 1023, 1030, 1033, 1034, 1037, 1038, 1040, 1044, 1047], "foundat": [0, 132, 380, 405, 990], "founder": 1012, "fouqu": 1030, "fouquet": [1046, 1047], "four": [27, 144, 159, 175, 181, 200, 247, 248, 326, 335, 376, 380, 394, 555, 562, 717, 907, 909, 925, 983, 985, 986, 987, 997, 1006], "fourier": [233, 406, 636, 637, 638, 639, 640, 755, 756, 979], "fourier_approx_svm": 233, "fourier_scor": 233, "fourier_tim": 233, "fournier": 1039, "fourth": [120, 1014], "fowkl": [407, 728], "fowlk": [728, 1036], "fowlkes_mallows_scor": [407, 987, 1036, 1038], "fox": [415, 1046], "fp": [8, 407, 710, 716, 726, 727, 728, 779, 780, 781, 784, 987], "fp_c": 269, "fpgawesom": 1044, "fpr": [11, 229, 238, 257, 269, 270, 387, 590, 594, 696, 700, 704, 724, 786, 987, 1027, 1030, 1046], "fpr_a": 269, "fpr_b": 269, "fpr_grid": 269, "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 57, 75, 82, 117, 127, 157, 178, 183, 184, 186, 190, 192, 193, 204, 221, 222, 228, 231, 238, 261, 263, 266, 273, 295, 310, 346, 351, 352, 353, 529, 535, 656, 662, 683, 684, 755, 756, 985, 987], "fraa\u00df": 1047, "frac": [26, 80, 81, 111, 260, 267, 269, 318, 404, 405, 407, 409, 412, 413, 414, 415, 417, 430, 461, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 613, 617, 620, 621, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 676, 677, 678, 694, 726, 727, 752, 766, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 979, 981, 982, 983, 984, 985, 987, 989, 990, 991, 992, 994, 995, 997, 999, 1001, 1002, 1003, 1021], "frac12": [414, 979], "fractal": [148, 377], "fraction": [4, 25, 27, 124, 127, 199, 207, 217, 346, 352, 405, 411, 414, 436, 437, 447, 448, 454, 455, 513, 525, 555, 556, 557, 558, 562, 563, 564, 588, 591, 600, 664, 665, 666, 669, 674, 675, 676, 701, 719, 720, 721, 731, 791, 793, 798, 802, 823, 824, 838, 866, 901, 902, 903, 907, 908, 909, 910, 953, 983, 987, 990, 994, 995, 997, 1002, 1003, 1008, 1031, 1032, 1033, 1044], "fragil": 653, "fragment": [55, 98], "frame": [4, 13, 71, 127, 156, 169, 170, 199, 311, 322, 375, 380, 392, 395, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 1007, 1019, 1042], "frameon": [7, 205], "framework": [260, 366, 382, 392, 394, 401, 407, 635, 686, 794, 983, 984, 991, 1005, 1008, 1012, 1030, 1036], "fran": [1042, 1043, 1044], "franc": [311, 761], "francesco": [1042, 1045], "franci": [534, 656, 983, 1036], "francia": 1044, "francidona": 1040, "francisco": [415, 999], "franck": [1045, 1047, 1048], "franco": 1040, "francoi": [1030, 1043], "francoisgoupil": 1044, "frank": [260, 830, 988, 1035, 1039, 1040], "frankhui": 1038, "franki": 1043, "franz": 1038, "franziska": 1041, "fran\u00e7oi": [0, 363, 1033], "fraud": [983, 1012], "fraudul": [983, 1012], "fred": [70, 1030, 1043], "freder": 1040, "frederick": 1043, "fredrik": 1038, "free": [0, 5, 27, 55, 156, 157, 164, 198, 250, 305, 374, 379, 380, 381, 388, 392, 397, 415, 450, 607, 669, 855, 905, 976, 979, 983, 987, 1008, 1038], "freebsd": 383, "freedom": [4, 97, 156, 187, 188, 190, 260, 539, 654, 794, 983, 1033], "freeland": 1045, "freestand": 382, "freez": [384, 397, 401, 1008, 1012, 1038], "frei": [38, 438, 452, 1040], "freija": 1038, "freita": [1035, 1037, 1038], "frellwan": 1043, "fremtpl2": 217, "fremtpl2freq": 217, "fremtpl2sev": 217, "french": [0, 217, 311], "freq": [169, 183, 353], "frequenc": [19, 27, 151, 170, 183, 193, 199, 232, 316, 317, 351, 352, 353, 375, 392, 405, 411, 412, 414, 415, 416, 549, 555, 557, 558, 559, 562, 586, 587, 588, 589, 602, 656, 657, 662, 664, 666, 672, 673, 674, 683, 684, 828, 863, 872, 873, 899, 901, 904, 907, 909, 925, 983, 984, 989, 997, 1001, 1003, 1032, 1034, 1035, 1041, 1048], "frequent": [37, 111, 164, 263, 269, 270, 352, 369, 377, 380, 415, 549, 588, 628, 849, 872, 873, 876, 888, 977, 979, 987, 1001, 1005, 1008], "frequentist": 526, "fresh": [536, 1008, 1040], "fresh_restart": 536, "fresh_restarts_max_it": 536, "freund": [414, 551, 552], "fri": [4, 127, 170, 375], "frid": [1012, 1033], "friedman": [114, 115, 126, 259, 409, 411, 414, 476, 514, 515, 516, 518, 556, 557, 558, 563, 591, 592, 829, 907, 908, 910, 981, 983, 988, 994, 1003], "friedman2001": 414, "friedman2002": 414, "friedman_ms": [556, 557, 558, 563, 908, 910, 1003, 1046, 1047], "friend": [421, 1034], "friendli": [95, 367, 380, 388, 412, 892, 999, 1000, 1007, 1008], "fring": [52, 407], "fritsch": [0, 2, 9, 1030, 1031, 1033], "fritzk": 1045, "fro": [412, 536, 538, 545, 691, 983], "fro_2": [659, 661], "frobeniu": [15, 98, 441, 445, 457, 467, 468, 469, 470, 471, 472, 473, 474, 529, 535, 536, 538, 543, 544, 545, 983, 1037], "frobenius_norm": 686, "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 366, 368, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1015, 1017, 1018, 1019, 1020, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "from_dtyp": [4, 121, 322, 414, 559, 560, 1047], "from_estim": [6, 9, 25, 27, 30, 31, 34, 56, 113, 116, 127, 128, 129, 133, 170, 182, 191, 208, 213, 234, 239, 241, 254, 257, 262, 263, 267, 270, 275, 286, 291, 294, 310, 315, 316, 317, 318, 320, 321, 322, 334, 335, 336, 337, 339, 340, 342, 357, 387, 405, 631, 716, 724, 779, 781, 784, 785, 786, 982, 987, 994, 1019, 1027, 1043, 1044, 1045, 1046, 1047, 1048], "from_predict": [4, 13, 32, 75, 132, 169, 238, 256, 267, 269, 318, 325, 351, 387, 436, 629, 696, 716, 724, 779, 781, 784, 785, 786, 987, 1027, 1043, 1044, 1045, 1046, 1047, 1048], "from_str": [944, 945], "frombuffer_empti": 1037, "fromkei": [261, 914], "fromnumer": 386, "front": [384, 1037], "frontal": 375, "frontend": 386, "frontier": [9, 213, 289, 337, 993, 1021], "frozen": 382, "frozentransform": 382, "frsi": 1038, "fruit": [380, 988], "fr\u00e9minvil": [1047, 1048], "fs1995": 414, "ftfy": 415, "ftorres16": [1044, 1045], "ftp": [148, 377, 680, 681], "ftwo_scor": [739, 987], "fu": [656, 1034], "fuck": [1042, 1043], "fuent": [1031, 1032], "fugled": 1047, "fujikawa": 1037, "fukatani": 1037, "fulfil": [380, 407, 414, 796, 799, 800, 810, 859, 863, 983], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 367, 368, 373, 375, 378, 380, 382, 385, 388, 392, 394, 395, 397, 403, 406, 407, 409, 411, 412, 415, 421, 424, 430, 431, 439, 443, 445, 447, 457, 486, 487, 490, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 533, 535, 539, 557, 558, 565, 566, 630, 646, 648, 652, 667, 678, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 794, 795, 807, 836, 925, 976, 983, 986, 989, 990, 994, 997, 1000, 1008, 1021, 1030, 1034, 1036, 1038, 1040, 1041, 1043, 1044, 1046, 1047, 1048], "full_data": 178, "full_lik": 65, "full_model": 285, "full_scor": 164, "fulli": [13, 44, 55, 118, 124, 366, 374, 375, 394, 407, 413, 414, 416, 441, 445, 555, 556, 562, 563, 907, 908, 909, 910, 911, 913, 976, 977, 983, 992, 1000, 1007, 1043, 1044], "fullpap": 1000, "fultz": 1043, "fun": [419, 531, 1012], "fun_arg": [419, 531], "func": [11, 75, 116, 169, 179, 217, 296, 380, 408, 463, 697, 863, 997, 1034, 1036, 1038, 1039, 1047, 1048], "func_min": [608, 609], "funcformatt": 288, "function": [4, 5, 6, 7, 8, 13, 15, 20, 21, 27, 37, 46, 53, 54, 55, 57, 59, 66, 70, 71, 72, 75, 79, 95, 98, 100, 104, 109, 116, 117, 121, 122, 123, 124, 125, 126, 127, 138, 144, 151, 154, 155, 156, 157, 158, 159, 164, 166, 168, 169, 170, 172, 177, 178, 181, 183, 186, 192, 194, 195, 196, 197, 199, 200, 205, 206, 207, 212, 215, 216, 217, 218, 220, 229, 231, 234, 235, 238, 239, 241, 242, 250, 258, 260, 261, 262, 263, 268, 269, 274, 278, 283, 299, 302, 305, 312, 315, 316, 318, 319, 321, 330, 335, 336, 337, 338, 339, 340, 342, 344, 346, 348, 351, 352, 357, 362, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 392, 393, 394, 397, 398, 401, 403, 405, 407, 408, 409, 410, 412, 413, 415, 416, 418, 419, 422, 424, 426, 427, 429, 430, 431, 435, 438, 441, 442, 443, 445, 446, 448, 450, 452, 455, 456, 457, 458, 459, 462, 463, 466, 467, 469, 470, 472, 476, 486, 487, 489, 490, 493, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 570, 573, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 602, 605, 606, 607, 608, 609, 613, 615, 617, 618, 620, 621, 625, 626, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 696, 697, 698, 700, 701, 702, 704, 709, 710, 714, 717, 719, 720, 721, 725, 729, 731, 732, 735, 737, 738, 739, 747, 752, 754, 758, 759, 760, 762, 765, 768, 771, 775, 776, 777, 778, 779, 780, 782, 786, 789, 790, 791, 793, 794, 795, 796, 798, 799, 800, 801, 802, 807, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 871, 875, 876, 877, 878, 879, 880, 883, 885, 888, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 917, 926, 928, 929, 930, 935, 936, 946, 947, 953, 954, 955, 957, 958, 961, 962, 971, 976, 977, 978, 980, 982, 984, 985, 988, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1003, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1019, 1023, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "functiontransform": [4, 70, 116, 199, 217, 329, 462, 463, 997, 1035, 1036, 1038, 1043, 1044, 1045, 1047], "functiontransformerfunctiontransform": 116, "functool": 217, "fund": 1005, "fundament": [37, 49, 81, 352, 392, 393, 410, 494, 536, 538, 545, 706, 983, 987], "funder": 0, "fung": 411, "funki": 1007, "funnel": [6, 491, 492, 1019], "funni": 70, "furlanello": 740, "furrer": 1047, "further": [4, 25, 42, 71, 78, 86, 95, 114, 120, 122, 147, 151, 156, 169, 171, 178, 183, 220, 225, 235, 257, 260, 261, 267, 320, 338, 352, 360, 366, 380, 392, 394, 406, 407, 409, 412, 414, 415, 417, 442, 450, 460, 513, 530, 533, 580, 612, 620, 626, 656, 657, 664, 665, 666, 674, 675, 676, 689, 693, 734, 771, 775, 778, 789, 790, 835, 841, 842, 849, 850, 877, 879, 899, 901, 904, 936, 986, 987, 989, 990, 991, 993, 995, 997, 1001, 1002, 1021, 1023, 1039, 1043], "furthermor": [4, 13, 37, 117, 157, 170, 171, 238, 239, 241, 283, 351, 352, 366, 368, 387, 407, 412, 414, 415, 560, 588, 604, 617, 702, 733, 743, 752, 754, 792, 899, 983, 995, 1033, 1037], "fuse": [381, 1036, 1046], "fusion": 392, "futur": [13, 156, 200, 241, 318, 321, 380, 382, 384, 394, 395, 401, 411, 415, 494, 532, 633, 957, 987, 988, 1002, 1003, 1012, 1027, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "futurewarn": [380, 388, 1037, 1038, 1039, 1041, 1043, 1046, 1047], "fuxin": 640, "fw": 686, "fwe": 590, "f\u00e9lix": [1030, 1032, 1033, 1034, 1038], "g": [0, 4, 7, 8, 10, 12, 24, 25, 26, 27, 32, 53, 55, 65, 70, 82, 86, 102, 111, 114, 115, 123, 124, 132, 151, 152, 153, 154, 156, 158, 159, 160, 164, 168, 169, 181, 184, 199, 200, 201, 203, 217, 221, 225, 234, 235, 245, 260, 264, 265, 271, 281, 289, 305, 310, 328, 345, 346, 353, 362, 366, 372, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 392, 394, 398, 401, 403, 405, 406, 407, 409, 411, 412, 414, 415, 416, 417, 419, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 501, 526, 529, 531, 532, 535, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 591, 592, 595, 602, 608, 609, 615, 620, 621, 628, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 684, 688, 690, 695, 718, 725, 735, 737, 760, 775, 782, 785, 797, 798, 799, 800, 802, 803, 805, 814, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 846, 848, 849, 850, 851, 855, 856, 857, 859, 862, 864, 865, 866, 869, 871, 872, 875, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 935, 936, 947, 955, 976, 977, 981, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 997, 1001, 1002, 1003, 1008, 1011, 1012, 1018, 1023, 1030, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "g0g0gadget": 1040, "g2015": 994, "g_": 407, "g_i": [414, 647], "g_j": [646, 667, 678], "ga": 0, "gaaca": 159, "gaatattaggccga": 392, "gabor": 1044, "gabriel": [302, 1038, 1039, 1040, 1043, 1044], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 66, 67, 82, 97, 188, 189, 221, 233, 247, 1006, 1008, 1012, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "gaido": 1039, "gaidon": 1030, "gain": [53, 127, 222, 267, 283, 285, 322, 326, 351, 352, 360, 379, 386, 388, 414, 494, 530, 555, 559, 560, 562, 723, 753, 794, 795, 828, 907, 909, 988, 992, 1000, 1003, 1033, 1037, 1040], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 375, 380, 382, 394, 397, 400, 1009, 1019, 1030, 1034, 1037], "galli": 1042, "gallopoulo": 412, "galvez": 1035, "gambl": 12, "gameiro": 1044, "gamma": [4, 5, 6, 7, 9, 11, 31, 32, 100, 133, 140, 175, 213, 228, 233, 234, 258, 260, 262, 265, 271, 275, 317, 325, 326, 328, 330, 335, 337, 338, 341, 342, 344, 345, 348, 410, 412, 414, 417, 450, 533, 560, 617, 618, 637, 638, 639, 641, 642, 643, 646, 678, 683, 689, 721, 744, 749, 756, 763, 772, 773, 774, 794, 807, 810, 894, 895, 896, 901, 902, 903, 904, 905, 976, 979, 982, 983, 985, 1000, 1002, 1014, 1018, 1019, 1021, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1044, 1045, 1046], "gamma_": [533, 1046], "gamma_0": [245, 251], "gamma_2d_rang": 338, "gamma_bound": 618, "gamma_k": 410, "gamma_rang": 338, "gammaregressor": [217, 316, 319, 678, 983, 1041, 1044, 1045], "gandenberg": 1039, "ganesh": [1035, 1047], "ganevgv": 1040, "gangesh": 1042, "gangwar": 1037, "ganiev": [1035, 1036, 1037], "ganssl": 1037, "gap": [4, 13, 127, 351, 375, 411, 469, 470, 476, 586, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 817, 907, 908, 909, 910, 983, 984, 1038, 1042, 1044], "garagecar": [121, 132], "garagefinish": 121, "garagetyp": 132, "garageyrblt": 75, "garbag": 1042, "garcia": 1043, "garc\u00eda": [1039, 1040, 1045], "gardin": 374, "gardner": [1038, 1039], "garg": [1040, 1041], "gargsya": 1040, "gari": [375, 1037], "garret": 1034, "garreta": [1032, 1033], "garrett": 1034, "garri": 377, "garriga": [266, 411, 824], "gasmi": 1044, "gasquez": 1037, "gate": [377, 1043], "gather": [319, 321, 388, 395, 406, 407, 997, 1012], "gatsbi": 1000, "gaug": 169, "gaull": 761, "gaurav": [1038, 1039, 1040, 1041, 1042, 1044], "gauravahlawat": [1038, 1039], "gaussian": [4, 5, 7, 8, 9, 26, 27, 30, 31, 34, 44, 46, 47, 55, 56, 57, 61, 65, 78, 79, 80, 81, 82, 91, 92, 96, 97, 98, 102, 104, 109, 112, 113, 120, 124, 128, 130, 140, 161, 164, 178, 181, 183, 187, 189, 209, 211, 212, 228, 232, 234, 235, 247, 248, 252, 271, 288, 293, 296, 299, 307, 308, 309, 312, 330, 335, 342, 343, 344, 369, 372, 376, 382, 385, 394, 407, 409, 412, 413, 419, 450, 467, 468, 469, 470, 471, 472, 473, 474, 494, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 528, 530, 542, 547, 548, 561, 608, 609, 611, 612, 613, 615, 616, 617, 620, 621, 623, 625, 641, 642, 670, 675, 678, 701, 721, 738, 749, 773, 794, 795, 796, 810, 834, 835, 836, 837, 838, 839, 840, 844, 875, 879, 887, 891, 892, 893, 981, 983, 984, 985, 993, 1009, 1010, 1012, 1022, 1024, 1025, 1030, 1031, 1033, 1034, 1036, 1037, 1038, 1040, 1042, 1044], "gaussian_filt": [14, 46, 47, 54, 1022], "gaussian_process": [30, 31, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 369, 394, 417, 641, 988, 1009, 1033, 1036, 1037], "gaussianhmm": 1030, "gaussianmixtur": [44, 57, 246, 247, 248, 249, 250, 251, 413, 794, 986, 1036, 1038, 1039, 1043, 1044, 1046, 1048], "gaussianmixturegaussianmixtur": 250, "gaussiannb": [24, 25, 27, 31, 134, 262, 362, 405, 414, 435, 567, 834, 835, 836, 838, 860, 981, 988, 989, 1034, 1035, 1036, 1038, 1043, 1046], "gaussiannois": 382, "gaussianprocessclassifi": [30, 31, 152, 153, 154, 155, 159, 394, 417, 609, 617, 618, 620, 621, 988, 1036, 1038, 1040, 1044], "gaussianprocessregressor": [151, 156, 157, 158, 159, 160, 417, 608, 611, 612, 613, 614, 615, 619, 622, 623, 641, 988, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "gaussianprocessregressorifittedgaussianprocessregressor": 156, "gaussianrandomproject": [892, 999, 1031, 1044, 1046, 1047], "gauthier": 1044, "gauz": 1038, "gave": [27, 405, 796, 799, 800, 810, 866], "gavin": [626, 977], "gaynor": 401, "ga\u00ebl": [31, 45, 51, 73, 89, 90, 101, 182, 196, 197, 307, 342, 343, 395, 1012], "gb": [135, 414, 551, 631], "gbc": 362, "gbdt": [116, 170, 315, 316, 321, 385, 414], "gbdt_appli": 116, "gbdt_cst": 316, "gbdt_leaves_yield": 116, "gbdt_model": 116, "gbdt_no_cst": [129, 316], "gbdt_pipelin": 132, "gbdt_with_monotonic_cst": 129, "gbdt_with_monotonic_cst_df": 129, "gbm": [123, 414, 1033], "gbm_early_stop": 122, "gbm_full": 122, "gbp": 1012, "gbr": 124, "gbr_l": 124, "gbrt": [4, 13, 199, 414], "gbrt_mean_poisson": 13, "gbrt_median": 13, "gbrt_percentile_5": 13, "gbrt_percentile_95": 13, "gbrt_predict": 4, "gbt": 366, "gc": 10, "gca": [8, 44, 62, 86, 154, 204, 208, 210, 228, 241, 264, 291, 293, 306, 334, 336, 339, 340, 994, 1027], "gcc": [378, 381, 386, 392], "gcf": [8, 994], "gcv": [671, 673], "gcv_mode": [671, 1032], "gd": [12, 135], "gdb": [381, 383, 1011], "gdex1": 1040, "ge": [12, 978, 989, 1042], "ge0": 1003, "gear": 1006, "geb": 19, "gebremichael": [1045, 1046], "gedeck": 1037, "geevarghes": 1045, "gefel": 987, "gegr": 415, "gei": 1032, "geiger": 1047, "geist": 377, "gelavizh": 1041, "gelder": 1041, "gemm": 1048, "gen": 778, "gen_batch": [389, 940], "gen_cov": 80, "gen_even_slic": [199, 389, 939], "gender": [240, 872, 997], "gender_femal": 872, "gender_mal": 872, "gene": [159, 374, 404, 449, 511, 591, 592, 846, 879], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 19, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 74, 75, 79, 81, 85, 86, 88, 89, 90, 93, 95, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 145, 146, 148, 152, 153, 154, 155, 156, 159, 163, 164, 168, 169, 170, 171, 172, 175, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 251, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 367, 369, 372, 373, 375, 377, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393, 401, 404, 405, 407, 411, 413, 415, 416, 417, 419, 423, 428, 430, 435, 438, 441, 444, 445, 447, 450, 452, 456, 457, 458, 460, 462, 463, 465, 467, 470, 472, 480, 481, 482, 486, 489, 490, 493, 494, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 536, 538, 539, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 612, 613, 616, 617, 618, 620, 621, 625, 626, 627, 628, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 683, 684, 687, 688, 689, 690, 691, 692, 693, 699, 702, 704, 715, 719, 720, 721, 734, 740, 754, 775, 778, 782, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 829, 830, 831, 832, 833, 839, 840, 842, 844, 845, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 899, 900, 901, 902, 904, 905, 908, 910, 911, 912, 913, 930, 931, 935, 936, 939, 940, 952, 956, 958, 961, 976, 977, 979, 981, 982, 984, 986, 987, 988, 990, 992, 993, 994, 995, 999, 1000, 1002, 1003, 1005, 1007, 1009, 1010, 1011, 1012, 1014, 1017, 1021, 1022, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "generalis": [785, 987, 1008], "generaliz": [342, 414], "generate_data": [7, 33], "generate_dataset": 10, "generate_missing_valu": 127, "generate_onli": [930, 1040], "generate_synthetic_data": 14, "generickernelmixin": [159, 1040], "genericunivariateselect": [416, 593, 594, 596, 597, 598, 600, 1044, 1046, 1047], "generos": 380, "genesi": [1044, 1046], "genet": 1007, "genoa": 377, "genom": [20, 511], "genotyp": 374, "gensim": 1007, "gentil": [377, 1042], "gentli": 412, "genvalen": [1042, 1043, 1044, 1045, 1046], "geodes": [220, 686, 984], "geoff": [830, 988], "geoffrei": [856, 857, 991, 1041, 1042, 1043, 1044, 1046], "geograph": [4, 11, 296, 375, 496], "geometr": [97, 407, 686, 702, 728, 754, 984, 1038], "geometri": [39, 407, 984, 990], "geomspac": 321, "georg": [6, 375, 407, 1036, 1042, 1043, 1044, 1045], "george_w_bush": 1019, "georgi": [1038, 1041], "georgiamaydai": 1045, "geospati": [296, 413], "geovan": [1043, 1044], "geq": [232, 405, 412, 414, 983, 987, 997, 1001, 1002], "ger": 415, "gerhard": [6, 375], "gerhard_schroed": 1019, "germer": [1045, 1046], "geroldcsend": 1043, "geron": [1038, 1043, 1044], "gerstein": 511, "gertrud": 1037, "gertz": 448, "gervai": [1032, 1033], "gesa": 1042, "gesdd": 936, "gesvd": 936, "get": [4, 5, 9, 12, 13, 17, 19, 37, 48, 52, 56, 96, 100, 124, 127, 134, 145, 148, 151, 156, 157, 163, 169, 170, 171, 172, 192, 201, 214, 217, 220, 236, 258, 261, 262, 264, 268, 271, 278, 283, 288, 296, 306, 315, 322, 326, 329, 335, 338, 340, 343, 348, 351, 353, 356, 367, 369, 373, 374, 375, 378, 380, 381, 382, 385, 386, 387, 388, 394, 397, 401, 403, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 421, 422, 423, 428, 430, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 693, 697, 719, 720, 721, 723, 729, 730, 739, 753, 760, 761, 766, 782, 785, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 927, 928, 929, 935, 936, 946, 976, 982, 983, 984, 986, 987, 997, 1000, 1001, 1002, 1003, 1008, 1018, 1021, 1022, 1023, 1027, 1030, 1033, 1036, 1038, 1041, 1043, 1044, 1047], "get_adjacency_matrix": 17, "get_arrai": [839, 840], "get_bin_se": 446, "get_cmap": [25, 27, 343], "get_color": 7, "get_config": [466, 778, 897, 954, 1045], "get_config_var": 378, "get_covari": [530, 532, 539], "get_data": [506, 507], "get_data_hom": 8, "get_depth": [907, 908, 909, 910, 1039], "get_feature_nam": [318, 1038, 1039, 1041, 1042, 1043], "get_feature_names_out": [15, 19, 169, 171, 318, 351, 352, 353, 375, 382, 394, 408, 415, 423, 428, 431, 440, 441, 443, 445, 447, 462, 465, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 997, 1043, 1044, 1045, 1046, 1047, 1048], "get_figur": 111, "get_full_scor": 164, "get_height": [8, 122], "get_impute_it": 164, "get_impute_knn_scor": 164, "get_impute_mean": 164, "get_impute_zero_scor": 164, "get_indic": [19, 422, 449, 451], "get_initial_mean": 248, "get_legend_handles_label": [127, 234, 262, 267], "get_lin": 300, "get_metadata_rout": [235, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 944, 945, 946, 947, 987, 1047], "get_metr": 697, "get_minibatch": 8, "get_n_cal": [839, 840], "get_n_leav": [907, 908, 909, 910, 1039], "get_n_split": [394, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817], "get_nam": 307, "get_output_feature_nam": 1044, "get_param": [261, 383, 394, 417, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 1040, 1041, 1042, 1044, 1045], "get_precis": [467, 468, 469, 470, 471, 472, 473, 474, 530, 532, 539], "get_redirect": 17, "get_routing_for_object": [235, 944], "get_scor": [322, 394, 730, 1037, 1046], "get_scorer_nam": [729, 987, 1044, 1047], "get_scores_for_imput": 164, "get_shap": [19, 422, 449, 451], "get_stop_word": [586, 587, 589], "get_submatrix": [422, 449, 451], "get_subplotspec": 387, "get_support": [144, 148, 317, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 1032], "get_tree_stat": [839, 840], "get_untrusted_typ": 401, "get_width": [8, 122], "get_x": [8, 122], "get_xaxi": [245, 293, 305], "get_xlim": [80, 194, 204, 305], "get_xticklabel": 271, "get_yaxi": [293, 305], "get_ybound": 53, "get_ylim": [194, 305, 306], "getattr": [4, 8, 305, 382, 394, 1046], "getgaurav2": 1040, "gettempdir": 990, "getter": [467, 468, 469, 470, 471, 472, 473, 474, 591, 592, 595], "geurt": [414, 553, 554, 555, 556, 563, 564, 909, 910], "gewili": [1045, 1046], "gh": 380, "ghahramani": 894, "gharibi": 1040, "ghg": 1036, "ghislain": 1042, "gholdman1": 1041, "ghorai": 1038, "ghosh": [0, 2, 407, 1030, 1031, 1047], "gia": 1041, "giancarlo": 1044, "gianr": 1045, "gibb": [855, 992, 1007], "gideon": 1040, "giessel": 1036, "gif": 48, "gigant": [1038, 1040, 1045, 1046], "gijsber": 1044, "gil": [366, 367, 381, 955, 1033, 1038, 1039, 1042, 1043, 1047], "gilad": 1012, "gilberto": 1038, "gilbertson": [1044, 1045], "gilch": 1037, "gile": [1033, 1034], "gill": [0, 2, 114, 115, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "gilliam": 1037, "gilmor": 1034, "gim": 1042, "gini": [27, 172, 199, 217, 240, 272, 317, 551, 552, 555, 556, 557, 558, 562, 563, 564, 785, 907, 908, 909, 910, 976, 995, 1003, 1038, 1039, 1046, 1047], "gionanidi": 1044, "giorgio": [1035, 1036, 1037], "giorgiop": 1035, "giotto": 1007, "giovanni": [1036, 1038], "gist": [380, 388, 1011], "git": [378, 382, 384, 386, 388, 1011, 1026, 1030, 1046], "github": [7, 8, 12, 26, 71, 72, 116, 118, 119, 125, 128, 129, 132, 135, 145, 156, 164, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 283, 302, 311, 316, 317, 319, 320, 322, 327, 360, 374, 378, 379, 383, 384, 385, 386, 388, 392, 394, 395, 397, 401, 403, 450, 460, 506, 534, 689, 690, 693, 990, 1006, 1007, 1011, 1012, 1023, 1035, 1040], "githubusercont": 12, "gitter": [1005, 1037, 1038], "giudic": 1042, "giusepp": [1038, 1039], "give": [4, 12, 13, 14, 24, 25, 39, 44, 49, 60, 62, 64, 70, 71, 75, 97, 123, 151, 156, 160, 163, 169, 170, 188, 190, 196, 199, 200, 201, 228, 251, 257, 262, 269, 285, 289, 292, 302, 318, 319, 329, 366, 368, 375, 377, 379, 380, 382, 386, 388, 392, 393, 394, 395, 401, 404, 405, 406, 407, 408, 409, 412, 414, 415, 417, 419, 432, 444, 445, 447, 449, 457, 470, 494, 497, 501, 531, 536, 547, 548, 549, 550, 555, 556, 562, 563, 564, 591, 592, 595, 605, 606, 636, 645, 659, 663, 674, 718, 727, 733, 736, 791, 796, 799, 800, 810, 820, 821, 822, 824, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 876, 877, 879, 880, 888, 983, 987, 990, 991, 992, 994, 995, 997, 1001, 1002, 1003, 1007, 1012, 1014, 1016, 1021, 1022, 1023, 1030, 1034, 1037, 1038, 1040, 1041, 1042, 1044, 1046], "given": [7, 10, 11, 13, 27, 30, 37, 49, 58, 60, 78, 85, 96, 100, 117, 127, 128, 130, 132, 151, 158, 169, 170, 183, 199, 200, 203, 217, 221, 228, 232, 233, 235, 237, 238, 239, 256, 260, 261, 262, 263, 269, 286, 289, 290, 291, 307, 311, 318, 351, 352, 353, 359, 366, 368, 375, 379, 380, 382, 384, 386, 388, 389, 392, 394, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 424, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 456, 457, 458, 459, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 479, 480, 481, 482, 485, 494, 499, 501, 503, 521, 531, 532, 534, 536, 537, 538, 541, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 591, 592, 599, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 629, 630, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 685, 686, 688, 689, 695, 696, 697, 698, 699, 700, 702, 703, 704, 710, 712, 715, 716, 718, 721, 723, 724, 731, 733, 734, 737, 749, 752, 753, 755, 756, 761, 771, 775, 778, 779, 781, 784, 785, 786, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 808, 810, 814, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 885, 886, 888, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 923, 924, 925, 943, 944, 945, 946, 971, 975, 976, 979, 981, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1012, 1014, 1018, 1019, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "gkevinyen5418": 1038, "gkf": 411, "gkiasta": 1043, "gl": [148, 377], "glad": 380, "glanc": [278, 379], "glaser": [1038, 1039], "glass": 375, "glasso": [409, 476], "glaxosmithklin": 12, "gleb": [1043, 1045, 1046, 1047], "glemaitr": [1039, 1040, 1042], "glemaitre58": 201, "glen": 1043, "glenn": 1036, "glennfrutiz": 1044, "glibc": 388, "glm": [199, 217, 316, 646, 667, 678, 983, 1030, 1041], "glm_freq": 217, "glm_pure_premium": 217, "glm_sev": 217, "glmnet": [644, 645, 1030], "glob": 8, "global": [8, 10, 42, 57, 95, 199, 220, 221, 242, 269, 301, 316, 362, 366, 367, 386, 392, 394, 406, 407, 417, 440, 450, 460, 466, 588, 624, 630, 686, 689, 690, 693, 705, 726, 727, 735, 780, 781, 784, 785, 814, 880, 895, 897, 955, 957, 976, 984, 987, 993, 997, 1003, 1012, 1038, 1045], "global_dtyp": 367, "global_random_se": 367, "globular": [62, 407], "glorot": [856, 857], "glossari": [362, 369, 380, 382, 386, 406, 418, 419, 435, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 465, 467, 470, 472, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 592, 600, 605, 606, 608, 609, 625, 630, 632, 637, 638, 639, 640, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 690, 691, 692, 693, 699, 771, 775, 778, 790, 794, 795, 796, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 841, 842, 844, 845, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 861, 864, 876, 880, 888, 891, 892, 894, 895, 899, 900, 901, 904, 907, 908, 909, 910, 935, 936, 958, 961, 976, 977, 983, 1014, 1038], "glu": [148, 377], "glushchenkov": 1044, "gl\u00f2ria": [1043, 1045], "gm": 795, "gmail": [7, 11, 15, 24, 42, 48, 57, 65, 70, 71, 109, 111, 112, 113, 114, 115, 116, 123, 125, 126, 131, 132, 151, 154, 156, 158, 160, 179, 199, 201, 216, 217, 221, 223, 231, 245, 247, 248, 261, 264, 305, 310, 351, 352], "gmil": 375, "gmm": [44, 59, 166, 244, 246, 249, 250, 251, 252, 502, 510, 795, 815, 986, 1009, 1030, 1031, 1034, 1035, 1036], "gmm_": 1031, "gmm_bic_scor": 250, "gmmhmm": [1030, 1031], "gnb": [24, 25, 27, 134, 414, 567, 989], "gnb_isoton": 25, "gnb_sigmoid": 25, "gnu": 378, "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 375, 380, 382, 384, 385, 389, 395, 397, 408, 412, 414, 416, 441, 559, 560, 718, 878, 939, 940, 997, 1003, 1007, 1008, 1014, 1023, 1041], "goadrich": 987, "goal": [10, 17, 20, 27, 52, 57, 86, 127, 163, 170, 175, 199, 214, 217, 237, 238, 257, 258, 351, 367, 368, 375, 382, 385, 386, 394, 395, 396, 398, 412, 416, 540, 546, 588, 591, 736, 987, 990, 992, 993, 1001, 1002, 1003, 1005, 1012, 1014, 1017, 1021, 1023, 1038], "god": [19, 351, 352, 1023], "godbol": 780, "goe": [4, 37, 116, 169, 360, 380, 414, 469, 470, 476, 555, 556, 562, 563, 564, 907, 908, 909, 910, 997, 1001], "goetz": [1037, 1038], "goh": 1047, "gohlk": 1035, "goix": [0, 1034, 1036, 1037, 1038, 1039], "gold": [33, 193, 200, 202, 205, 209, 213, 216, 246, 251, 267, 289, 337, 386], "goldberg": [848, 990], "goldfarb": 983, "goldman": 12, "goldstein": [170, 994], "goldszmidt": 999, "gollonet": [0, 2], "goltermann": 1042, "golub": [532, 837, 879], "golubin": 1037, "gome": [1043, 1044], "gomez": [1038, 1045, 1047], "gommer": [1033, 1036, 1037, 1045, 1046], "goncalo": [1037, 1038], "gone": [1030, 1031], "gonthier": 1041, "goo": [148, 377], "good": [4, 9, 20, 25, 27, 40, 44, 46, 49, 52, 53, 55, 58, 74, 81, 86, 104, 117, 120, 123, 124, 127, 152, 156, 163, 169, 183, 188, 199, 200, 205, 214, 225, 228, 232, 235, 238, 246, 248, 254, 260, 266, 275, 302, 310, 311, 317, 325, 330, 338, 351, 352, 362, 366, 367, 368, 379, 381, 382, 383, 384, 386, 388, 392, 394, 401, 404, 405, 407, 409, 411, 412, 414, 415, 416, 417, 435, 437, 442, 532, 557, 559, 560, 588, 628, 638, 645, 646, 654, 656, 657, 659, 667, 678, 688, 692, 720, 728, 739, 761, 824, 893, 936, 976, 982, 983, 984, 987, 988, 990, 991, 992, 994, 995, 997, 1001, 1002, 1003, 1008, 1012, 1014, 1018, 1021, 1023, 1036], "goodby": 380, "goodman": [1030, 1035], "googl": [0, 17, 392, 407, 440, 1006, 1019, 1030], "gool": 987, "gorb": 1042, "gordon": [19, 248, 1036, 1040, 1042, 1044], "gorelli": [1038, 1039, 1043, 1045, 1048], "gorgolewski": [0, 2, 1030, 1033], "gorilla": 351, "gorinevski": 983, "gorodkin": 740, "gorro\u00f1o": [1041, 1043, 1044], "got": [235, 267, 362, 385, 549, 647, 663, 1043, 1045, 1047], "gotten": [983, 997], "gou": 407, "gouillart": [14, 66, 1030], "goupil": [0, 363], "gov": [17, 377], "govern": [169, 362, 366, 369, 380, 394, 1005, 1012], "govin": 1036, "go\u0144da": 1045, "gp": [154, 159, 417, 608, 609, 620, 1036], "gp_fix": 152, "gp_opt": 152, "gpapadok": [1040, 1044], "gpassino": 1034, "gpc": [26, 30, 31, 91, 120, 130, 140, 150, 156, 157, 158, 161, 166, 209, 211, 212, 234, 249, 299, 307, 308, 330, 343, 344, 502, 608, 609, 611, 612, 617, 618, 620, 621, 701, 738, 1009, 1010, 1025, 1040], "gpc_rbf_anisotrop": 153, "gpc_rbf_isotrop": 153, "gperftool": 383, "gplearn": 1007, "gplv3": 401, "gpr": [96, 150, 151, 152, 158, 160, 161, 166, 494, 608, 609, 611, 612, 613, 614, 619, 620, 621, 622, 623, 1009, 1010, 1025, 1040], "gpr_model": 160, "gprof": 383, "gpu": [320, 403, 991, 1008, 1023, 1047], "gr": 892, "grab": 380, "gracefulli": [1033, 1034], "grad": [386, 1012], "gradd": 386, "grade": 987, "gradi": 1040, "gradient": [7, 13, 46, 66, 71, 110, 111, 112, 115, 116, 118, 119, 129, 132, 135, 136, 156, 157, 158, 166, 171, 172, 177, 179, 187, 188, 201, 218, 223, 228, 233, 259, 261, 278, 289, 300, 305, 309, 311, 319, 322, 336, 337, 345, 394, 406, 407, 417, 450, 460, 464, 465, 486, 488, 494, 499, 501, 518, 551, 552, 557, 558, 559, 560, 562, 563, 569, 584, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 629, 630, 632, 633, 637, 646, 647, 656, 657, 666, 667, 670, 672, 674, 675, 676, 678, 685, 690, 692, 693, 738, 739, 745, 747, 787, 796, 799, 800, 801, 817, 822, 825, 855, 856, 857, 860, 872, 873, 903, 961, 984, 987, 990, 991, 992, 993, 1007, 1009, 1010, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1045, 1047], "gradient_boost": [116, 1032, 1033, 1039], "gradientboost": 1035, "gradientboostingclassifi": [116, 123, 126, 307, 362, 392, 551, 559, 630, 631, 988, 994, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "gradientboostingclassifier__learning_r": 307, "gradientboostingregressor": [7, 122, 124, 125, 132, 135, 366, 385, 392, 552, 560, 630, 631, 983, 987, 988, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "gradientboostingregressorgradientboostingregressor": 135, "gradual": [203, 856, 857, 1001], "graduat": 377, "graham": [1035, 1036], "grai": [6, 14, 46, 47, 50, 51, 53, 95, 98, 126, 148, 197, 199, 217, 232, 236, 237, 267, 301, 377, 412, 491, 492, 500, 519, 1019, 1022, 1041], "grain": [4, 31, 37, 233, 251, 307, 386, 415, 444, 955, 1008], "gram": [166, 177, 218, 235, 295, 382, 412, 415, 487, 522, 546, 586, 587, 588, 589, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 679, 680, 681, 682, 683, 684, 764, 976, 997, 1002, 1009, 1023, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1043, 1044], "gram_test": 1002, "gram_train": 1002, "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 67, 95, 97, 102, 184, 186, 187, 188, 190, 192, 193, 228, 231, 266, 273, 295, 395, 1012, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "grammar": 380, "granada": 0, "grant": [0, 238, 380], "grape": 408, "graph": [17, 25, 39, 44, 46, 66, 67, 159, 220, 257, 283, 285, 328, 366, 380, 383, 394, 404, 409, 418, 439, 442, 443, 450, 451, 455, 460, 461, 469, 470, 476, 509, 583, 584, 686, 689, 690, 693, 779, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 854, 895, 984, 987, 990, 992, 1000, 1003, 1007, 1012, 1019, 1022, 1030, 1037, 1038, 1040, 1043, 1045], "graph_laplacian": 1037, "graph_lasso": [476, 1038], "graph_model": 285, "graph_shortest_path": [389, 1043], "graphic": [19, 81, 170, 329, 351, 352, 353, 375, 386, 406, 407, 409, 412, 789, 790, 794, 829, 911, 987, 988, 994, 1007, 1023], "graphical_lasso": [389, 469, 470, 1038, 1046], "graphicallasso": [82, 409, 467, 468, 470, 471, 472, 473, 474, 476, 1038, 1046], "graphicallassocv": [12, 82, 398, 409, 469, 471, 472, 473, 474, 476, 1038, 1042, 1044, 1046, 1048], "graphicallassocvifittedgraphicallassocv": 12, "graphlasso": [469, 1035, 1038], "graphlassocv": [470, 1032, 1038], "graphviz": [911, 1003], "grasp": [1002, 1008], "grassberg": [605, 606], "grate": 1012, "graviton": 388, "gray_r": [32, 89, 98, 154, 221, 302, 325, 326, 1020], "grayscal": 32, "greasemonkei": 388, "great": [55, 168, 169, 197, 362, 380, 392, 412, 761, 1008, 1012, 1030, 1037], "greater": [25, 92, 111, 113, 169, 216, 233, 238, 248, 266, 281, 289, 290, 356, 366, 376, 385, 394, 405, 407, 410, 414, 439, 443, 444, 447, 450, 461, 470, 534, 539, 555, 556, 557, 558, 559, 560, 562, 563, 564, 591, 592, 595, 608, 609, 626, 638, 640, 662, 664, 665, 669, 674, 675, 676, 690, 707, 710, 718, 732, 733, 736, 739, 785, 792, 794, 795, 829, 841, 842, 849, 850, 856, 857, 862, 877, 889, 893, 896, 899, 900, 907, 908, 909, 910, 936, 956, 976, 982, 983, 984, 987, 988, 993, 997, 1002, 1003, 1033, 1038, 1041, 1043, 1044, 1045, 1047], "greater_is_bett": [124, 739, 987], "greatest": [55, 397, 407, 866, 1038], "greatli": [197, 233, 320, 380, 388, 450, 990, 1003, 1036, 1044], "greedi": [148, 414, 416, 445, 447, 458, 557, 558, 600, 983, 1003], "greedili": [86, 148, 407, 411, 416, 458], "greek": [12, 17, 21, 36, 48, 53, 66, 68, 98, 166, 407, 460, 1009], "green": [26, 81, 92, 114, 129, 134, 151, 175, 225, 300, 306, 310, 316, 322, 394, 988, 1038, 1039, 1041, 1042], "greenhal": 1038, "greg": [1012, 1036, 1037, 1039, 1040], "gregori": [1036, 1040, 1041, 1042, 1043], "gregorystrubel": 1043, "gregov": 1038, "grei": [5, 270, 305, 346, 375], "grep": 380, "greyscal": 302, "grid": [6, 8, 10, 11, 20, 25, 26, 27, 42, 54, 61, 71, 72, 73, 74, 78, 82, 120, 130, 143, 145, 147, 155, 166, 168, 169, 170, 188, 217, 225, 229, 233, 234, 235, 239, 245, 250, 253, 257, 259, 261, 264, 265, 267, 272, 276, 281, 285, 287, 288, 296, 302, 307, 308, 310, 335, 337, 338, 344, 345, 351, 375, 382, 387, 392, 394, 402, 408, 411, 413, 414, 415, 446, 459, 462, 470, 496, 500, 513, 520, 629, 630, 631, 645, 648, 651, 652, 654, 657, 659, 661, 674, 711, 725, 739, 782, 785, 796, 799, 800, 807, 810, 812, 825, 826, 859, 904, 980, 982, 987, 990, 994, 1008, 1009, 1014, 1015, 1017, 1019, 1021, 1025, 1030, 1033, 1034, 1035, 1037, 1038, 1044, 1046, 1047], "grid_encod": 308, "grid_model": 285, "grid_posit": [25, 27], "grid_resolut": [170, 317, 336, 629, 630, 631], "grid_scores_": [1036, 1042, 1043], "grid_search": [74, 117, 240, 250, 258, 268, 322, 408, 955, 1032, 1033, 1034, 1035, 1036, 1037], "grid_siz": [11, 61, 296, 375, 496], "grid_to_graph": [47, 51, 54, 407, 415, 1022, 1043], "grid_tograph": 1033, "grid_valu": [170, 631, 994, 1046], "gridsearch": [54, 78, 271, 1007], "gridsearchcv": [4, 54, 69, 71, 73, 74, 76, 78, 99, 102, 117, 166, 234, 240, 250, 253, 258, 259, 260, 261, 265, 268, 271, 276, 278, 285, 287, 302, 307, 317, 321, 322, 338, 342, 362, 367, 382, 392, 394, 398, 408, 411, 414, 417, 421, 500, 518, 538, 539, 573, 597, 605, 651, 701, 739, 807, 810, 859, 869, 899, 907, 955, 976, 983, 987, 991, 1001, 1002, 1007, 1008, 1009, 1018, 1019, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048], "gridsearchcvifittedgridsearchcv": [72, 250, 258, 260], "gridsearchcvinot": 240, "gridsiz": 232, "gridspec": [25, 27, 65, 245, 387], "gridspecfromsubplotspec": 387, "griffith": [1038, 1039], "grigorev": 1035, "grigorio": 731, "grigsbi": 65, "grime": [687, 691, 984], "grinsztajn": 1047, "grisel": [0, 1, 15, 17, 37, 48, 61, 188, 199, 217, 221, 261, 263, 351, 352, 353, 395, 1006, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "griva": [1044, 1045], "grlivarea": 121, "grobler": [0, 2, 31, 45, 51, 53, 73, 89, 90, 182, 195, 196, 197, 222, 343, 346, 1030, 1031, 1032, 1033], "groceryheist": 1043, "groenen": [688, 692, 984], "grok": 485, "groothui": [625, 977], "grother": 377, "groud": [723, 753], "ground": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 128, 159, 183, 193, 199, 200, 238, 251, 263, 352, 394, 406, 407, 701, 702, 703, 706, 710, 711, 712, 713, 715, 716, 719, 720, 721, 725, 726, 727, 731, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 780, 781, 782, 783, 784, 787, 788, 792, 793, 987, 1000, 1014, 1022, 1038], "ground_truth": [55, 290], "group": [12, 37, 40, 55, 58, 60, 134, 170, 172, 199, 221, 235, 251, 255, 311, 322, 327, 352, 360, 375, 385, 394, 395, 398, 407, 413, 414, 415, 432, 444, 493, 586, 587, 589, 592, 716, 785, 796, 797, 798, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 872, 873, 909, 910, 983, 984, 986, 987, 988, 997, 1003, 1004, 1005, 1007, 1014, 1017, 1018, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1048], "group_1": 872, "group_2": 872, "group_3": 872, "group_df": 207, "group_kfold": 797, "group_prior": 255, "groupbi": [4, 127, 170, 207, 217], "groupkfold": [255, 265, 322, 398, 411, 592, 801, 802, 803, 804, 805, 814, 818, 820, 821, 822, 823, 826, 1018, 1036, 1043], "groupshufflesplit": [255, 411, 1018, 1036], "grow": [4, 13, 39, 175, 183, 285, 346, 353, 366, 392, 403, 409, 414, 415, 555, 556, 557, 558, 562, 563, 564, 806, 839, 840, 907, 908, 909, 910, 976, 987, 990, 1003, 1012, 1017, 1021, 1033, 1034], "grower": [127, 414, 559, 560], "grown": [377, 414, 551, 552, 553, 554, 555, 556, 562, 563, 907, 908, 909, 910, 1003], "growth": [987, 1035, 1036], "grumman": 12, "grusak": 1040, "gryllo": [1035, 1038], "gryze": [1032, 1035], "grzegorz": [1037, 1040], "gs_clf": 1023, "gs_time": 271, "gsh": 271, "gsh_time": 271, "gsiisg": 1045, "gsk": 12, "gss": [411, 798], "gt": [32, 71, 72, 116, 132, 169, 250, 258, 272, 378, 380, 384], "gu": [1041, 1042, 1044], "guan": 1040, "guangguo": 1036, "guarante": [7, 8, 27, 80, 81, 127, 169, 207, 232, 281, 283, 305, 352, 362, 368, 374, 388, 389, 407, 411, 412, 415, 444, 534, 643, 656, 657, 666, 670, 672, 674, 676, 685, 692, 813, 816, 839, 840, 877, 879, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 906, 979, 983, 984, 986, 990, 995, 999, 1003, 1022, 1040], "gubri": [1038, 1039], "gudmalwar": 1042, "guerin": [1036, 1037], "guess": [17, 111, 120, 411, 414, 415, 530, 536, 538, 539, 545, 785, 987, 1001], "guestrin": 414, "guha": 1045, "gui": [1021, 1031, 1041], "guid": [13, 25, 27, 55, 69, 95, 117, 160, 166, 169, 170, 187, 220, 267, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 322, 369, 378, 379, 380, 385, 386, 387, 388, 393, 394, 395, 398, 406, 408, 414, 418, 419, 420, 421, 424, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 932, 987, 988, 1016, 1023, 1030, 1031, 1032, 1033, 1035, 1037, 1039, 1040, 1047, 1048], "guidanc": [392, 417], "guidelin": [379, 383, 385, 386, 388, 406, 407, 414], "guiel": 492, "guilherm": 1033, "guillaum": [0, 1, 5, 7, 72, 75, 100, 132, 151, 156, 157, 158, 160, 187, 188, 201, 221, 305, 1012, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "guillem": [1039, 1040, 1045], "guillemot": [0, 245, 247, 1036, 1037], "guillermo": 1044, "guiniol": 1037, "guitar": 1045, "guitton": 1042, "guiweb": 1043, "gulati": [1035, 1036, 1037], "gun": [19, 375], "gunesbayir": [1045, 1046], "gunnar": [533, 936], "guo": 1043, "guoci": 1037, "gupta": [893, 999, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1047], "gustafson": [1045, 1046], "gustav": 1036, "gustavo": [1038, 1039, 1044], "gutierrez": 1040, "guttman": 692, "guyon": [513, 591, 592, 987], "guyon2015": 987, "gwulf": [1034, 1035], "gz": [8, 384, 397, 506, 507], "gzip": 1030, "g\u00e9ron": 1038, "g\u00f3rski": [1041, 1042], "g\u00f6khan": [5, 412, 533], "g\u00fcnther": [1043, 1047], "h": [5, 6, 13, 48, 58, 95, 96, 111, 112, 130, 148, 153, 169, 247, 288, 291, 299, 307, 319, 330, 334, 353, 377, 386, 405, 407, 409, 412, 413, 414, 415, 418, 442, 517, 530, 533, 536, 538, 545, 551, 565, 566, 580, 588, 605, 606, 687, 691, 702, 706, 754, 834, 838, 839, 840, 845, 855, 870, 879, 979, 981, 983, 984, 985, 987, 989, 991, 992, 1001, 1003, 1019, 1036, 1041, 1045, 1046, 1047], "h1998": 414, "h2009": 994, "h4dr1en": 1040, "h5py": 374, "h_": 983, "h_i": [412, 992], "h_init": 386, "h_j": 992, "h_l": 981, "h_m": 414, "h_pad": [95, 120, 357], "h_samples_": 855, "ha": [0, 4, 5, 8, 11, 12, 13, 25, 30, 34, 37, 44, 50, 55, 56, 57, 60, 74, 80, 81, 86, 95, 109, 116, 120, 122, 124, 127, 129, 134, 147, 151, 156, 157, 158, 164, 169, 170, 171, 172, 175, 192, 196, 199, 200, 201, 205, 216, 217, 220, 228, 232, 234, 235, 238, 239, 242, 245, 246, 248, 250, 251, 255, 258, 259, 260, 263, 264, 266, 271, 272, 281, 286, 289, 290, 291, 293, 301, 305, 306, 308, 310, 315, 316, 317, 318, 319, 321, 325, 328, 338, 342, 343, 345, 351, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 388, 389, 392, 393, 394, 395, 397, 401, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 491, 492, 495, 496, 506, 507, 514, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 617, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 693, 709, 711, 718, 738, 760, 771, 775, 776, 777, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 810, 814, 817, 818, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 918, 919, 920, 938, 956, 972, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1008, 1011, 1012, 1014, 1018, 1021, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "haan": 1039, "haar": [14, 1047], "haas": 1040, "habchi": 1040, "haberland": [1045, 1046], "haberth\u00fcr": 1037, "hack": [8, 10], "had": [4, 9, 47, 124, 127, 156, 235, 305, 311, 318, 362, 380, 381, 398, 415, 418, 442, 977, 987, 1012, 1014, 1030, 1031, 1037, 1038, 1039, 1040, 1041, 1045], "hadamard": 382, "haddad": 1037, "hadrien": [1037, 1040], "hadshirt": 1040, "haenel": 1033, "haesun": [1042, 1045, 1046], "hafner": 1043, "hagai": 794, "hagberg": 17, "hahn": [1037, 1038], "haiat": 1042, "haidar": [1043, 1044], "hail": 311, "hailei": [1040, 1041], "hain": 375, "haitz": [1041, 1043, 1044], "hakaa1": [1037, 1038], "hal": [545, 656, 755, 756, 985], "halchenko": [0, 1, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1046], "hale": [1032, 1044], "half": [4, 24, 98, 127, 233, 237, 258, 260, 272, 375, 376, 412, 414, 461, 520, 560, 591, 595, 600, 767, 858, 866, 987, 990, 1003], "half_cal": 595, "half_selector": 595, "halfbath": 121, "halford": [1038, 1045, 1046], "halkidi": 407, "halko": [412, 533, 539, 542, 935, 936], "hall": [983, 1037, 1041], "hallock": 1036, "halpert": [690, 984], "halv": [143, 166, 253, 264, 268, 276, 345, 402, 513, 562, 577, 796, 799, 800, 904, 1009, 1025, 1042], "halvic": 1042, "halvinggridsearchcv": [271, 272, 317, 398, 577, 800, 976, 1042, 1044, 1045, 1047, 1048], "halvingrandomsearchcv": [124, 272, 317, 398, 577, 799, 976, 1042, 1044, 1045, 1046, 1047, 1048], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 272, "halwai": 1036, "ham": [7, 448, 455, 579, 697, 701, 707, 731, 738, 775, 776, 777, 793, 990], "hamada": 1042, "hamdi": 1047, "hammerbach": 1034, "hamming_loss": [7, 701, 793, 987, 1032, 1036, 1039], "hammingdist": 697, "hammoudeh": 1039, "hamoumi": 1043, "hampton": 1023, "hampu": 1034, "hamzeh": [0, 1033, 1034], "han": [407, 440, 448, 455, 1030, 1038, 1039, 1043], "hancock": 1040, "hand": [5, 29, 35, 51, 53, 86, 89, 97, 98, 100, 117, 124, 143, 146, 156, 166, 169, 170, 192, 203, 206, 224, 231, 232, 234, 235, 238, 254, 257, 262, 269, 287, 325, 326, 338, 366, 374, 375, 377, 380, 382, 386, 388, 393, 401, 412, 413, 414, 416, 424, 430, 500, 641, 695, 711, 785, 825, 880, 904, 976, 980, 983, 987, 989, 991, 995, 1000, 1002, 1009, 1012, 1014, 1017, 1020, 1021], "handbook": [718, 737, 987], "handi": [49, 71, 352, 353, 381, 1046], "handk": 1046, "handl": [0, 4, 9, 71, 117, 121, 127, 128, 132, 175, 183, 234, 235, 262, 267, 269, 278, 281, 283, 290, 311, 315, 322, 351, 353, 360, 366, 372, 374, 378, 380, 381, 382, 389, 392, 394, 414, 415, 417, 494, 542, 575, 579, 580, 586, 587, 589, 608, 633, 644, 645, 650, 656, 657, 658, 659, 660, 666, 673, 674, 676, 679, 718, 785, 863, 872, 873, 899, 900, 904, 911, 937, 944, 947, 984, 987, 988, 989, 990, 993, 995, 1002, 1003, 1007, 1008, 1012, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "handle_data": 8, "handle_endtag": 8, "handle_starttag": 8, "handle_unknown": [4, 71, 116, 121, 132, 170, 171, 230, 238, 240, 242, 311, 316, 319, 872, 873, 997, 1034, 1038, 1042, 1043], "handler": 1041, "handler_map": 290, "handlerpathcollect": 290, "handletextpad": 357, "handpick": 228, "handprint": 377, "handwritten": [12, 36, 38, 43, 45, 46, 48, 49, 52, 57, 59, 61, 68, 116, 166, 219, 220, 222, 224, 226, 232, 248, 258, 292, 293, 301, 302, 325, 326, 352, 373, 407, 414, 445, 500, 539, 542, 547, 564, 686, 687, 688, 689, 690, 702, 703, 715, 734, 790, 792, 848, 860, 869, 879, 892, 984, 990, 1009, 1014, 1025], "hang": [380, 1040, 1041], "hank": 1033, "hanmin": [0, 1, 306, 1037, 1038, 1039, 1040, 1041], "hann": 1030, "hanna": [1034, 1035, 1041], "hannah": [1040, 1042, 1044], "hannel": [1038, 1039], "hansen": 1038, "hansin": [1044, 1045], "hanu\u0161": 1047, "hanxiang": [677, 983], "hao": [1041, 1042, 1044, 1045], "haoi": 1047, "haoran": 1038, "haoyin": [1041, 1043, 1044], "happen": [5, 27, 116, 187, 305, 311, 352, 362, 366, 367, 378, 379, 380, 384, 385, 386, 392, 394, 395, 397, 407, 409, 411, 414, 435, 513, 570, 656, 782, 877, 879, 899, 983, 987, 988, 1002, 1008, 1023, 1038, 1042, 1043, 1045, 1046, 1047, 1048], "happi": [169, 351, 392, 395, 814, 815], "haqu": [1032, 1033, 1034], "harabasz": 708, "harabaz": 1036, "hard": [9, 199, 228, 232, 260, 262, 368, 379, 392, 394, 407, 412, 415, 532, 539, 567, 674, 901, 902, 903, 904, 905, 983, 1000, 1002, 1003, 1008, 1021, 1022, 1023, 1039, 1040], "hardcod": [438, 452, 1038], "harder": [269, 270, 309, 375, 379, 382, 388, 392, 407, 513, 559, 560], "hardest": 1016, "hardin": 81, "hardli": [55, 605, 606], "hardwar": [19, 329, 353, 366, 367, 375, 378, 392, 397, 403, 1007, 1044, 1045], "hare": 983, "harfouch": 1046, "harikrishnan": 1032, "harizo": [1036, 1037], "harm": [351, 382, 415, 792], "harmanan": 1047, "harmon": [4, 37, 267, 352, 407, 533, 539, 726, 727, 733, 780, 792, 987], "haroldfox": [1038, 1039], "harper": 1037, "harri": [1034, 1036, 1042, 1043], "harsanyi": 1046, "harsh": [424, 435, 467, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 608, 656, 664, 666, 672, 673, 674, 827, 828, 829, 830, 834, 835, 836, 837, 838, 841, 846, 849, 856, 894, 895, 899, 901, 904, 907, 909, 1040, 1042, 1045], "harshit5674": 1045, "hart": [377, 981, 1038], "hartong": 1041, "harutaka": 1043, "harvest": 311, "harwar": 392, "has_fit_paramet": 389, "hasan": 1045, "hasattr": [44, 56, 62, 82, 109, 120, 217, 232, 299, 307, 351, 394, 422, 426, 432, 948, 1040], "haseeb": [1043, 1044], "hash": [8, 110, 136, 166, 236, 352, 353, 366, 368, 372, 380, 383, 392, 414, 512, 542, 555, 564, 579, 580, 587, 638, 834, 952, 979, 1009, 1023, 1025, 1031, 1034, 1037], "hashabl": [394, 867, 870, 998], "hashcode55": 1036, "hasher": [130, 353, 415], "hashingvector": [8, 353, 368, 415, 487, 586, 588, 1031, 1037, 1038, 1039, 1040, 1043], "hashlib": 8, "hasil": 1034, "haskel": 1007, "hasn": 398, "hassaan": [1038, 1039], "hassan": 1043, "hassen": 1030, "hassoun": 1045, "hasti": [111, 114, 115, 126, 148, 187, 259, 377, 411, 414, 517, 518, 551, 557, 558, 626, 654, 719, 720, 721, 829, 846, 892, 907, 908, 977, 981, 983, 988, 994, 999, 1001, 1003], "hat": [81, 104, 256, 260, 288, 318, 378, 405, 409, 413, 414, 978, 983, 984, 987, 989, 991], "hathidara": 1042, "hatwar": [1038, 1039], "hauck": 1036, "hausamann": [1038, 1039], "haussler": 159, "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 14, 24, 25, 26, 27, 37, 39, 42, 43, 46, 47, 50, 53, 55, 57, 60, 62, 64, 65, 70, 71, 78, 80, 86, 89, 91, 92, 100, 101, 111, 118, 120, 121, 122, 124, 127, 144, 145, 148, 151, 152, 156, 157, 158, 164, 168, 169, 170, 171, 172, 175, 178, 183, 199, 200, 201, 203, 217, 224, 228, 230, 235, 236, 238, 239, 246, 247, 248, 250, 254, 260, 261, 263, 266, 267, 274, 278, 283, 285, 286, 289, 290, 305, 310, 311, 312, 315, 317, 318, 322, 326, 327, 328, 335, 341, 342, 343, 346, 351, 352, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 490, 492, 493, 494, 506, 507, 512, 521, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 697, 702, 703, 710, 713, 718, 723, 728, 733, 739, 753, 754, 755, 756, 779, 782, 783, 789, 792, 794, 795, 796, 799, 800, 801, 802, 807, 810, 814, 818, 820, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 921, 923, 925, 936, 962, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1012, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "haversin": [296, 413, 697, 759, 761, 990, 1039, 1042], "haversine_dist": [759, 1039], "haversinedist": 697, "hawaii": 156, "haxbi": 0, "haya": 1044, "hayashi": 1038, "hbgt": 127, "hd": 12, "hdb": [55, 444], "hdbscan": [36, 44, 49, 65, 68, 166, 232, 442, 510, 879, 977, 1007, 1009, 1024, 1025, 1046, 1047, 1048], "hdbscan_min_cluster_s": 44, "hdbscan_min_sampl": 44, "hdf5": 374, "hdl": [148, 377], "hdmetor": 1036, "he": [380, 723, 753, 856, 857, 889, 890, 987, 1023, 1037, 1044, 1045], "head": [0, 1, 13, 26, 71, 116, 131, 156, 169, 187, 188, 217, 242, 250, 311, 315, 320, 380, 388, 412, 1012, 1035, 1036, 1045, 1046, 1047, 1048], "head_width": 26, "header": [15, 70, 261, 351, 352, 375, 378, 415, 486, 487, 796, 799, 800, 810], "heali": 407, "heap": 448, "heapq": 461, "heard": 380, "heart": 238, "heat": [132, 338, 407, 450, 460, 693], "heatingqc": 132, "heatmap": [170, 172, 178, 183, 271, 320, 338, 630, 994], "heatmap_kw": 630, "heatmaps_": 630, "heavei": 1038, "heavi": [201, 392, 404, 1008], "heavier": [104, 409, 983], "heavili": [188, 366, 367, 380, 388, 647, 653, 775, 1004], "heavy_rain": [4, 170], "hebei": 407, "hedlund": 1046, "hedyati": 1034, "hee": [1037, 1040], "heer": 1041, "hegd": 1047, "heidelberg": [407, 412, 533, 694, 723, 753, 987], "height": [8, 15, 53, 98, 121, 122, 148, 305, 311, 322, 351, 413, 444, 491, 492, 504, 584], "heightpet_catpet_dogf64f64f64": 322, "heikki": 999, "heilman": [1034, 1035], "heitz": 311, "held": [4, 8, 71, 102, 125, 171, 207, 247, 263, 268, 281, 411, 414, 557, 558, 559, 560, 699, 796, 799, 800, 810, 856, 857, 869, 976, 977, 986, 995, 1023], "helder": [1034, 1043, 1044], "heldout": 206, "heldout_scor": 123, "helen": 320, "heli": 1037, "hello": [380, 388, 948, 952], "helloifeven": 948, "helmu": 1034, "help": [0, 4, 9, 11, 55, 70, 74, 100, 105, 170, 183, 217, 220, 261, 263, 278, 302, 335, 338, 352, 353, 362, 366, 367, 378, 381, 382, 383, 384, 385, 386, 388, 389, 394, 395, 396, 401, 407, 408, 411, 415, 417, 431, 534, 575, 625, 648, 652, 663, 683, 684, 690, 712, 835, 907, 908, 909, 910, 977, 981, 982, 984, 986, 987, 989, 991, 997, 998, 1003, 1006, 1007, 1008, 1011, 1012, 1023, 1036, 1037, 1038, 1041, 1044, 1048], "helper": [5, 6, 98, 217, 271, 373, 382, 383, 393, 394, 411, 466, 573, 897, 1018, 1019, 1030, 1037, 1038, 1039, 1043], "helvetica": [911, 913], "heme": 1047, "hempstalk": 1037, "henc": [37, 60, 72, 169, 203, 232, 269, 338, 351, 352, 366, 375, 382, 384, 386, 394, 397, 407, 411, 414, 415, 485, 506, 537, 539, 540, 541, 561, 588, 641, 644, 650, 658, 660, 670, 685, 702, 703, 707, 713, 728, 754, 783, 792, 815, 816, 834, 835, 836, 837, 838, 874, 944, 984, 986, 987, 988, 993, 994, 997, 1008, 1037, 1038, 1041, 1042, 1044], "hendrik": [0, 1, 24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234, 1030, 1033, 1034, 1035, 1036], "henri": [1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045], "henrymooresc": [1044, 1045], "hepe": [677, 983], "here": [4, 8, 9, 12, 13, 14, 17, 24, 27, 57, 58, 66, 78, 82, 89, 90, 92, 97, 98, 100, 101, 102, 103, 105, 111, 114, 117, 121, 125, 127, 132, 145, 148, 151, 159, 160, 169, 170, 171, 175, 178, 183, 188, 192, 199, 203, 205, 214, 215, 217, 220, 222, 228, 233, 235, 238, 239, 246, 247, 248, 254, 257, 258, 260, 262, 263, 265, 269, 270, 272, 278, 283, 285, 292, 300, 301, 302, 307, 310, 317, 319, 322, 325, 327, 338, 342, 346, 348, 353, 356, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 392, 393, 398, 401, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 418, 420, 435, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 462, 470, 473, 534, 536, 537, 541, 542, 565, 566, 567, 568, 579, 580, 582, 586, 589, 592, 600, 626, 628, 645, 649, 651, 653, 659, 661, 663, 671, 673, 687, 689, 693, 697, 710, 723, 743, 753, 791, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 826, 835, 839, 840, 863, 871, 874, 877, 880, 891, 892, 902, 953, 976, 979, 983, 984, 985, 986, 987, 990, 993, 997, 999, 1000, 1001, 1002, 1007, 1008, 1011, 1012, 1014, 1015, 1021, 1030, 1038, 1043], "hereaft": 395, "hereund": 993, "herilalaina": [1037, 1038, 1040], "hermano": [1045, 1046], "hermida": [1039, 1043], "hernandez": 987, "hern\u00e1ndez": 987, "hero": [409, 420, 473], "herrou": 1044, "hershei": 987, "hertel": 1047, "herv": 1034, "hervieu": 1030, "herv\u00e9": 1034, "heryanto": 1037, "hesit": 380, "hessian": [220, 221, 222, 414, 559, 560, 646, 656, 657, 667, 678, 687, 691, 983, 991, 1024, 1025, 1045], "hessian_tol": [687, 691], "heterogen": [4, 9, 24, 55, 69, 71, 76, 166, 170, 199, 242, 310, 315, 353, 372, 374, 392, 462, 486, 539, 579, 589, 711, 859, 863, 899, 984, 994, 997, 1007, 1009, 1025, 1034, 1038, 1040, 1041], "heteroscedast": [95, 102, 124, 201, 412, 875, 887], "heteroschedast": 987, "heuer": 1033, "heurist": [12, 15, 123, 238, 351, 367, 407, 416, 447, 450, 459, 460, 506, 507, 535, 537, 544, 674, 675, 676, 689, 693, 799, 800, 901, 902, 903, 904, 905, 924, 984, 985, 990, 1001, 1003, 1012, 1021, 1030, 1031, 1035, 1039, 1042, 1043], "hexbin": 232, "hexdigest": 8, "hgbdt": 117, "hgbdt_model": 170, "hgbdt_model_without_interact": 170, "hgbdt_preprocessor": 170, "hgbt": [117, 127, 414], "hgbt_cst": 127, "hgbt_no_cst": 127, "hgbt_quantil": 127, "hhu": [647, 1039], "hi": [0, 408, 987, 1023], "hibon": 1037, "hida": [1045, 1046], "hidden": [4, 170, 301, 302, 380, 388, 404, 412, 855, 856, 857, 991, 992, 1007, 1030, 1041], "hidden_layer_s": [170, 239, 299, 301, 856, 857, 991], "hide": [43, 380, 388, 834, 835, 836, 837, 838, 1033, 1038, 1046], "hideaki": 1044, "hierarch": [14, 21, 36, 39, 40, 42, 44, 46, 52, 53, 54, 57, 68, 166, 172, 224, 319, 360, 394, 415, 439, 441, 443, 444, 502, 510, 512, 520, 528, 545, 728, 852, 879, 1004, 1008, 1009, 1024, 1025, 1030, 1033, 1034, 1046], "hierarchi": [41, 172, 380, 448, 454, 461, 992, 1022], "higgin": 1047, "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 55, 57, 62, 65, 70, 74, 80, 81, 97, 98, 114, 116, 117, 118, 119, 124, 125, 127, 128, 130, 139, 140, 148, 151, 157, 164, 168, 170, 171, 172, 183, 194, 200, 201, 203, 213, 220, 221, 222, 228, 232, 245, 251, 258, 262, 266, 267, 275, 289, 290, 299, 301, 307, 309, 310, 311, 312, 321, 328, 335, 337, 338, 351, 352, 358, 359, 366, 375, 377, 380, 385, 388, 389, 392, 393, 404, 405, 406, 407, 411, 413, 414, 415, 416, 417, 442, 445, 447, 448, 450, 467, 480, 481, 482, 551, 552, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 642, 668, 669, 677, 687, 690, 691, 723, 728, 739, 743, 753, 786, 789, 804, 806, 839, 840, 844, 873, 874, 878, 880, 901, 903, 904, 907, 908, 909, 910, 956, 976, 981, 982, 983, 984, 986, 987, 990, 991, 993, 995, 997, 999, 1002, 1003, 1004, 1007, 1008, 1014, 1015, 1017, 1023, 1030, 1031, 1033, 1034, 1038, 1041, 1042, 1043, 1044, 1045], "high_cardin": 311, "high_cardinality_featur": 311, "high_cardinalityindex": 311, "high_i": 194, "high_precision_cv_result": 258, "high_recall_cv_result": 258, "high_x": 194, "higher": [4, 13, 57, 80, 98, 102, 111, 114, 116, 117, 124, 128, 151, 153, 158, 159, 169, 170, 171, 175, 199, 200, 203, 217, 224, 225, 251, 254, 258, 260, 263, 274, 288, 310, 338, 342, 351, 352, 353, 362, 366, 375, 378, 382, 404, 407, 409, 414, 416, 417, 418, 442, 446, 447, 469, 476, 507, 530, 537, 541, 546, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 571, 586, 589, 605, 606, 617, 625, 629, 633, 635, 644, 645, 650, 651, 658, 659, 660, 661, 674, 676, 677, 702, 721, 725, 749, 782, 794, 796, 799, 800, 802, 810, 817, 818, 823, 826, 845, 848, 874, 891, 892, 893, 899, 900, 901, 902, 903, 904, 905, 912, 979, 983, 984, 986, 987, 990, 994, 997, 1001, 1002, 1021, 1023, 1031, 1036, 1038, 1045, 1047], "highest": [17, 19, 26, 82, 144, 148, 203, 258, 260, 271, 317, 351, 380, 392, 405, 407, 411, 414, 416, 435, 553, 555, 562, 590, 593, 594, 596, 597, 598, 601, 602, 604, 633, 635, 723, 753, 791, 794, 796, 799, 800, 810, 896, 907, 938, 976, 983, 987, 988, 991, 1001, 1003, 1042], "highli": [4, 9, 27, 72, 80, 81, 97, 105, 128, 183, 194, 204, 260, 263, 269, 300, 342, 352, 366, 367, 380, 382, 386, 392, 405, 407, 411, 414, 415, 450, 460, 494, 561, 669, 690, 808, 810, 855, 983, 987, 990, 991, 993, 1001, 1002, 1006, 1007], "highlight": [4, 13, 15, 55, 71, 80, 92, 115, 116, 118, 121, 127, 129, 145, 148, 151, 152, 157, 163, 164, 170, 171, 175, 180, 199, 200, 201, 217, 230, 240, 241, 242, 255, 269, 272, 278, 281, 285, 309, 311, 323, 351, 353, 369, 380, 384, 385, 388, 392, 417, 441, 444, 445, 462, 465, 488, 489, 494, 499, 500, 502, 510, 513, 519, 522, 536, 539, 559, 560, 562, 563, 565, 597, 600, 626, 628, 630, 632, 638, 644, 646, 650, 656, 667, 678, 686, 699, 700, 715, 729, 745, 785, 792, 796, 797, 799, 800, 802, 810, 818, 821, 822, 825, 841, 843, 860, 864, 869, 872, 873, 874, 878, 879, 880, 896, 897, 899, 904, 907, 908, 931, 984, 987, 995, 997, 1002, 1009, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "highlight_min": [124, 188], "higuera": 374, "hila": 407, "hilbert": [204, 865, 979, 997], "hilferti": 80, "hill": [407, 446, 459, 1040], "him": 415, "himanshu": [1041, 1044], "hind": 1044, "hinder": 1040, "hing": [25, 206, 209, 211, 268, 335, 336, 340, 342, 394, 664, 674, 732, 899, 906, 983, 1001, 1002, 1023], "hinge_loss": [342, 987, 1034, 1042, 1043], "hinrich": 412, "hint": [169, 366, 381, 385, 398, 401, 446, 987, 1021], "hinton": [690, 848, 855, 856, 857, 984, 990, 991, 992], "hintz": 1036, "hiramatsu": 1047, "hirofumi": [1041, 1042], "hirsch": 1038, "hirschberg": [407, 715, 734, 792], "hirzel": 1043, "hispan": 169, "hist": [4, 25, 27, 53, 75, 113, 117, 199, 201, 232, 238, 266, 288, 305, 309, 311, 319, 322, 414], "hist_drop": 121, "hist_n": 121, "hist_nbin": 305, "hist_no_interact": 320, "hist_one_hot": 121, "hist_ordin": 121, "hist_quantil": 319, "hist_x0": 305, "hist_x1": 305, "histgradientboost": 1042, "histgradientboostingclassifi": [116, 117, 315, 316, 317, 318, 320, 322, 367, 557, 562, 630, 631, 977, 1007, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "histgradientboostingregressor": [4, 7, 13, 112, 117, 121, 124, 125, 127, 129, 132, 163, 170, 199, 311, 315, 316, 317, 318, 320, 321, 322, 384, 414, 558, 563, 630, 631, 633, 977, 994, 1007, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "histgradientboostingregressor__interaction_cst": 170, "histgradientboostingregressor__max_depth": 121, "histgradientboostingregressor__max_it": 121, "histgradientboostingregressorhistgradientboostingregressor": [132, 311], "histgradientboostingregressorifittedhistgradientboostingregressor": [129, 320], "histogram": [13, 25, 27, 53, 110, 112, 116, 121, 122, 124, 125, 129, 136, 166, 199, 207, 232, 259, 261, 266, 288, 305, 317, 319, 321, 322, 405, 488, 494, 557, 558, 559, 560, 562, 563, 630, 640, 739, 745, 755, 756, 787, 796, 801, 817, 822, 825, 979, 985, 997, 1009, 1024, 1025, 1042, 1045, 1047], "histor": [12, 199, 1008], "histori": [12, 369, 557, 558, 1005, 1030], "hit": [201, 386], "hitesh": 1042, "hjortkj\u00e6r": 1044, "hkey_local_machin": 397, "hline": 97, "hlle": 984, "hmasdev": 1044, "hmc": 12, "hmm": [1030, 1031, 1032, 1033, 1035], "hmmlearn": 1007, "hn": 386, "hnyk": [1036, 1037], "ho": [115, 414, 553, 554, 987, 1035, 1038, 1039, 1044], "hoang": [1039, 1040], "hobson": 1036, "hoc": 394, "hochberg": [593, 1036, 1037], "hochreit": [404, 717], "hockei": [19, 375], "hoctor": 1042, "hoda1394": 1042, "hoenig": 1030, "hoesli": 414, "hoffman": [412, 534, 1035, 1042], "hogan": 1038, "hoh": 1038, "hold": [8, 13, 26, 27, 199, 203, 261, 360, 373, 380, 381, 382, 394, 405, 407, 411, 414, 415, 417, 501, 555, 559, 562, 587, 630, 631, 632, 733, 796, 799, 800, 810, 835, 866, 867, 872, 873, 880, 883, 907, 909, 977, 981, 987, 991, 1001, 1002, 1003, 1014, 1023, 1038, 1042, 1048], "holder": 1023, "holdgraf": 1038, "holdselig": 415, "hole": [166, 219, 220, 221, 222, 225, 226, 528, 690, 691, 1009, 1044], "holger": 1037, "holidai": [4, 170], "holm": [830, 988, 1047], "holman": 1045, "holmstr\u00f6m": 1032, "holohan": [1045, 1047], "holt": [0, 2, 1030], "holub": 532, "home": [0, 12, 113, 132, 155, 157, 159, 160, 191, 208, 246, 255, 302, 320, 343, 357, 375, 378, 388, 397, 406, 484, 497, 677, 1012], "homebrew": [383, 397], "homepag": [375, 528, 1003], "homm": 1045, "homo": 58, "homogen": [37, 38, 39, 44, 46, 49, 55, 58, 352, 375, 392, 394, 409, 414, 417, 444, 612, 702, 715, 728, 733, 734, 754, 792, 984, 985, 987, 1039], "homogeneity_completeness_v_measur": [407, 1039], "homogeneity_scor": [38, 49, 58, 352, 407, 715, 733, 792, 987], "homomorph": 1007, "homoscedast": [102, 231, 309, 987, 1038], "homoschedast": 987, "honda": 12, "honei": 981, "hong": [1036, 1038, 1042, 1043, 1044, 1046], "hongh": 1038, "hongkahjun": 1037, "honglu": 1040, "hongshaoyang": 1045, "honl": [1042, 1043], "honolulu": 987, "honor": 311, "hood": [983, 1002], "hoover": [1035, 1036, 1037, 1039], "hope": [5, 217, 394, 406, 1039], "hopefulli": [263, 388, 1030], "hopfensperg": 1047, "hopper": 1035, "horizont": [30, 95, 220, 233, 305, 308, 385, 394, 462, 513, 695, 699], "horizontal_distance_to_hydrologi": 489, "horizontalalign": [12, 26, 31, 40, 44, 45, 62, 101, 228, 245, 299, 307], "hornik": 633, "hornstein": 1045, "horrel": 1037, "hoshia": 1044, "hossein": [1038, 1039, 1040], "host": [0, 117, 321, 351, 375, 380, 384, 388, 389, 892, 955, 1023, 1046], "hot": [4, 71, 116, 119, 132, 169, 199, 269, 306, 307, 311, 317, 338, 394, 414, 415, 549, 564, 579, 646, 656, 657, 667, 678, 862, 864, 866, 867, 870, 872, 873, 880, 983, 997, 1038, 1044, 1045], "hot_r": [12, 305], "hotel": 1012, "hotspot": 386, "hotter": 119, "hour": [4, 127, 169, 170, 322, 380, 386, 494, 984, 1006], "hour_co": 4, "hour_df": 4, "hour_sin": 4, "hour_workday_interact": 4, "hourli": [4, 127, 169], "hourly_wag": 168, "hous": [75, 122, 132, 163, 164, 305, 317, 373, 488, 1025], "house_pric": [75, 132], "houseag": [305, 317, 375, 488], "household": 375, "housestyl": [121, 132], "hover": 322, "hover_data": [117, 261], "how": [0, 4, 5, 7, 8, 9, 10, 13, 20, 21, 25, 26, 27, 32, 33, 37, 50, 51, 52, 53, 57, 60, 69, 70, 71, 74, 78, 80, 86, 104, 111, 112, 115, 119, 120, 121, 122, 124, 125, 127, 130, 132, 145, 156, 158, 166, 169, 170, 171, 172, 175, 180, 188, 189, 195, 200, 201, 202, 203, 206, 207, 213, 217, 224, 225, 230, 233, 235, 237, 238, 239, 241, 251, 255, 256, 258, 260, 261, 262, 267, 269, 270, 272, 273, 274, 281, 283, 285, 286, 287, 289, 290, 301, 310, 312, 316, 317, 318, 321, 322, 335, 336, 338, 341, 342, 346, 351, 352, 356, 360, 366, 367, 368, 369, 375, 378, 379, 381, 382, 383, 385, 388, 393, 394, 395, 398, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 502, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 620, 621, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 702, 718, 754, 789, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 971, 976, 977, 981, 982, 983, 984, 986, 987, 993, 994, 995, 997, 999, 1000, 1002, 1003, 1006, 1008, 1012, 1014, 1016, 1018, 1023, 1025, 1030, 1032, 1035, 1041, 1044, 1045, 1046], "howaboutw": 1005, "howel": 1037, "howev": [0, 4, 5, 7, 13, 14, 24, 25, 27, 37, 47, 49, 53, 55, 60, 72, 75, 78, 82, 85, 100, 102, 114, 116, 117, 121, 124, 125, 132, 145, 148, 151, 156, 157, 170, 171, 180, 188, 199, 203, 221, 224, 225, 228, 234, 235, 238, 260, 267, 274, 278, 281, 283, 288, 300, 305, 317, 342, 346, 351, 352, 362, 366, 367, 368, 374, 375, 377, 379, 380, 382, 386, 388, 392, 394, 398, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 438, 441, 445, 447, 449, 452, 457, 494, 506, 530, 539, 549, 565, 579, 580, 581, 587, 604, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 628, 630, 631, 636, 641, 653, 654, 670, 685, 690, 693, 698, 760, 762, 796, 799, 800, 810, 822, 826, 827, 838, 856, 857, 862, 871, 872, 877, 901, 902, 904, 915, 956, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 994, 995, 997, 1001, 1002, 1003, 1014, 1018, 1021, 1039, 1040, 1042, 1043, 1046], "hoyer": [412, 1033], "hp": [12, 1023], "hpq": 12, "hrishikesh": [1031, 1032], "hristo": [1038, 1045], "hsiang": [656, 1034], "hsieh": 1036, "hspace": [6, 14, 15, 44, 45, 62, 95, 217, 228, 245, 247, 248, 251, 288, 317, 326, 335, 1019], "hstack": [14, 33, 42, 134, 144, 225, 237, 255, 341, 411, 858], "hsuan": 1035, "ht2001": 987, "htf": 414, "htm": [907, 908], "html": [4, 8, 12, 26, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 148, 156, 160, 169, 170, 171, 175, 180, 229, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 375, 377, 380, 381, 383, 384, 388, 408, 411, 415, 421, 485, 506, 507, 656, 834, 838, 932, 985, 1007, 1008, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "htmledit": [834, 838, 985], "htmlparser": 8, "htsedebenham": 1045, "http": [4, 6, 7, 8, 12, 13, 17, 24, 71, 125, 132, 148, 160, 164, 175, 199, 207, 215, 217, 225, 229, 278, 281, 283, 301, 374, 375, 377, 378, 380, 384, 385, 386, 388, 392, 394, 397, 403, 407, 411, 416, 440, 447, 450, 460, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 506, 507, 508, 528, 529, 532, 534, 535, 539, 593, 634, 639, 642, 647, 656, 662, 664, 665, 666, 669, 674, 677, 680, 681, 683, 684, 689, 690, 693, 703, 719, 720, 721, 755, 756, 766, 834, 836, 837, 838, 841, 842, 847, 848, 849, 850, 855, 877, 892, 893, 894, 907, 908, 983, 985, 987, 990, 1000, 1003, 1012, 1019, 1035, 1040], "hu": [1035, 1038, 1040], "hua": [561, 993], "huang": [375, 656, 1036, 1041], "huangk10": 1041, "huard": 1030, "huber": [181, 209, 406, 414, 558, 647, 674, 676, 1001, 1030, 1032, 1033, 1042], "huberlossfunct": 1043, "huberregressor": [54, 151, 166, 177, 179, 197, 203, 204, 205, 218, 312, 522, 668, 669, 670, 676, 677, 983, 1009, 1036, 1037, 1038, 1039], "hubert": [407, 703, 713, 783], "hubert1985": 703, "hudson": 320, "hue": [127, 250, 260, 310, 377], "huerta": 1040, "hug": [0, 1, 148, 309, 1005, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "huge": [201, 204, 366, 386, 625, 1033], "hugh": [874, 1032, 1043], "hugo": [6, 375, 1036, 1041, 1042, 1043, 1044], "hugorichard": 1042, "hugu": 1034, "hui": [115, 187, 536, 538, 545, 654, 983], "huiginn": 1030, "huilgolkar": [1031, 1032], "hujiahong726": 1046, "hull": 1047, "humahn": 1045, "human": [95, 170, 351, 401, 407, 412, 856, 857, 987, 994, 1039], "humid": [4, 170, 994], "hunan": 1038, "hundr": [42, 123, 221, 309, 375, 411, 414, 559, 560, 984, 1041], "hungarian": [404, 717], "hunt": 1045, "hunter": 1039, "hurt": [366, 532, 1038], "husak": 1044, "huszar": 1012, "hut": [690, 984, 1035, 1037, 1040], "huynh": [1040, 1042], "hv": 415, "hvassard": 1044, "hwan": 1041, "hwang": 1036, "hybrid": [444, 647, 1007], "hye": 1041, "hyper": [4, 27, 71, 117, 254, 260, 265, 302, 338, 362, 382, 392, 393, 394, 402, 411, 414, 416, 466, 642, 643, 800, 808, 810, 855, 897, 982, 983, 987, 990, 1001, 1002, 1014, 1025, 1030, 1044], "hyperband": 976, "hyperbol": [342, 640, 856, 857, 985, 991], "hypercub": [228, 513], "hyperlink": 1032, "hyperparamet": [71, 73, 74, 127, 151, 152, 158, 159, 163, 166, 170, 178, 183, 188, 213, 217, 228, 238, 253, 258, 263, 265, 271, 272, 276, 285, 302, 351, 382, 394, 407, 411, 412, 414, 417, 500, 533, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 641, 651, 657, 663, 671, 674, 725, 782, 796, 810, 904, 976, 981, 982, 983, 986, 987, 989, 991, 993, 1001, 1008, 1009, 1023, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1046], "hyperparameter_alpha": 621, "hyperparameter_baseline_similar": 159, "hyperparameter_constant_valu": 611, "hyperparameter_gamma": 618, "hyperparameter_grid": 322, "hyperparameter_length_scal": [613, 617, 620, 621], "hyperparameter_noise_level": 623, "hyperparameter_period": 613, "hyperparameter_sigma_0": 612, "hyperplan": [91, 113, 123, 154, 166, 177, 191, 208, 218, 236, 263, 333, 334, 335, 336, 337, 338, 342, 343, 349, 510, 629, 656, 657, 664, 666, 672, 673, 674, 675, 899, 901, 903, 904, 1001, 1002, 1009], "hyperspher": [376, 1007], "hypothes": 983, "hypothesi": [124, 260, 266, 411, 688, 692, 824, 984], "hypothet": 27, "hyunjin": 1030, "hyvarinen": [419, 531], "h\u00e9lion": 1041, "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 147, 148, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 336, 337, 338, 342, 343, 344, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 941, 942, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 968, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "i_alpha_optim": 273, "i_ax": 283, "i_dataset": [44, 62, 228], "i_j": 995, "iain": [148, 377, 983], "iampat": 1038, "ian": [1032, 1034, 1039, 1040, 1042, 1045, 1046], "iasoon": 1044, "ibay": 1030, "ibieta": 1043, "ibm": [12, 19, 329, 353, 375], "ibn": 1030, "ibnukhsein": 1047, "ibraheem": 1039, "ibrahima": 1040, "ibraim": [1035, 1036, 1037], "ib\u00e1\u00f1ez": [1038, 1039, 1042], "ic": [8, 278, 317, 374, 377, 396, 498, 500, 508, 630, 631, 1025, 1042, 1043], "ica": [97, 406, 419, 1003, 1024, 1025], "ica_estim": 95, "icann": 694, "icassp": 987, "icdm": [561, 993], "icdmw": 407, "ice_lines_kw": 630, "icml": [25, 27, 405, 407, 415, 435, 437, 834, 836, 855, 987, 989, 1001, 1006], "icml03": 836, "icml09": [529, 535], "icon": [322, 382], "icyblad": 1037, "id": [6, 19, 217, 296, 360, 374, 375, 380, 388, 409, 411, 415, 421, 492, 493, 494, 911, 913, 931, 1019, 1023, 1038, 1039, 1042], "id3": [1010, 1025], "idea": [5, 53, 80, 81, 117, 148, 156, 169, 200, 220, 288, 338, 356, 366, 367, 380, 385, 386, 409, 410, 411, 412, 413, 414, 416, 605, 606, 983, 984, 987, 990, 993, 1006, 1012, 1023], "ideal": [199, 201, 217, 257, 260, 267, 269, 270, 362, 379, 380, 384, 385, 388, 392, 394, 405, 723, 753, 976, 986, 1001, 1002, 1008, 1011], "idelberg": 1047, "ident": [13, 19, 64, 123, 194, 199, 217, 228, 232, 330, 351, 375, 382, 394, 404, 407, 408, 409, 411, 417, 420, 436, 437, 450, 462, 463, 471, 473, 474, 477, 478, 479, 486, 501, 549, 557, 558, 562, 563, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 641, 677, 678, 697, 702, 703, 733, 782, 792, 798, 801, 811, 812, 815, 816, 841, 842, 848, 856, 857, 863, 864, 876, 888, 907, 908, 980, 981, 984, 987, 990, 991, 1002, 1034, 1038, 1039, 1040, 1044, 1048], "identif": [375, 380, 407, 495, 976, 1015], "identifi": [20, 90, 97, 103, 124, 125, 168, 169, 199, 202, 203, 248, 250, 258, 263, 269, 292, 312, 317, 342, 351, 352, 374, 375, 379, 380, 384, 385, 394, 407, 408, 411, 414, 415, 444, 448, 455, 485, 494, 506, 507, 553, 554, 555, 556, 561, 562, 563, 564, 604, 641, 647, 697, 710, 771, 824, 845, 864, 894, 895, 976, 983, 987, 993, 1000, 1012, 1021, 1037, 1039, 1044, 1045], "idf": [15, 19, 232, 351, 352, 353, 375, 412, 519, 542, 586, 587, 588, 589, 838, 846, 871, 976, 985, 989, 997, 1023, 1030], "idf_": [415, 588, 589, 1038], "idier": [412, 536, 538, 545], "idiom": 386, "idiosyncrat": 382, "idl": 1041, "ido": [1045, 1046], "idpol": [199, 217], "idx": [11, 19, 45, 55, 104, 113, 117, 120, 127, 133, 160, 170, 172, 183, 191, 198, 199, 208, 221, 357, 408, 411], "idx_a": 269, "idx_b": 269, "idx_r": 198, "idx_sort": 199, "idxmax": 346, "idxmin": 258, "ie": [40, 66, 96, 438, 702, 983, 997], "ieee": [63, 79, 81, 377, 407, 409, 416, 420, 446, 473, 532, 561, 662, 683, 684, 722, 766, 983, 987, 993], "ieeexplor": 766, "ieic": [536, 538, 545], "iem": 656, "if_binari": [169, 242, 872, 997, 1041], "if_delegate_has_method": [1043, 1044], "iff": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 870], "iforest": 238, "iforest_kw": 238, "iglesi": 1045, "ignacio": 1033, "ignor": [4, 6, 8, 17, 44, 49, 55, 62, 71, 111, 113, 116, 121, 129, 132, 170, 187, 191, 199, 208, 214, 230, 235, 240, 242, 251, 255, 300, 301, 310, 311, 316, 319, 342, 343, 352, 357, 367, 380, 382, 384, 386, 394, 397, 398, 407, 408, 414, 415, 425, 426, 429, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 458, 459, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 501, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 579, 580, 581, 586, 587, 588, 589, 592, 595, 600, 601, 608, 609, 625, 626, 627, 628, 630, 631, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 705, 711, 712, 723, 726, 727, 735, 752, 753, 760, 766, 771, 775, 780, 781, 784, 785, 794, 795, 797, 798, 799, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 856, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 962, 983, 984, 987, 989, 993, 997, 1002, 1019, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "ignore_attribut": 374, "ignore_error": 54, "ignore_implicit_zero": [876, 888], "ignore_ti": [723, 753], "ignore_warn": [207, 307, 1036], "ignored_new_col": 408, "ignorerevsfil": 380, "igor": [1036, 1037, 1043], "ih": 288, "ii": [11, 96, 170, 206, 255, 377, 415, 580, 581, 587, 636, 664, 665, 862, 871, 983, 997, 1006, 1047], "iid": 1038, "iii": [1023, 1044, 1047], "iijima": 1039, "iinfo": 1045, "ij": [260, 293, 404, 407, 412, 536, 538, 545, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 983, 984, 987, 989, 992, 997, 1002], "ijcnn": 987, "ijcv": 987, "ijet": 407, "ik": [983, 987], "ikeda": 1042, "ikko": 1043, "il": [10, 662, 683, 684, 983, 987], "ilambharathi": [1033, 1034], "ili": [1046, 1047], "ilic": 1043, "ilion": 1044, "iliya": 1045, "iljin": [1045, 1046], "ill": [40, 82, 204, 302, 469, 470, 476, 648, 649, 652, 653, 654, 680, 681, 983, 986, 1022, 1040], "illustr": [9, 23, 24, 26, 31, 33, 52, 56, 57, 70, 71, 74, 75, 78, 80, 86, 92, 97, 111, 114, 119, 126, 127, 129, 131, 132, 143, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 164, 166, 168, 170, 171, 175, 188, 195, 196, 199, 201, 203, 207, 209, 212, 213, 216, 217, 220, 221, 223, 225, 228, 230, 231, 233, 234, 235, 237, 245, 249, 260, 267, 272, 273, 284, 292, 297, 308, 310, 314, 315, 317, 328, 338, 339, 343, 344, 346, 347, 352, 353, 359, 362, 366, 377, 380, 385, 388, 393, 410, 412, 414, 415, 513, 608, 609, 611, 612, 613, 617, 620, 621, 848, 976, 983, 987, 990, 993, 999, 1000, 1001, 1002, 1009, 1012, 1014], "iloc": [4, 127, 132, 169, 170, 217, 260, 286], "ilya": 1037, "im": [95, 105, 271, 287], "im_": 695, "im_kw": [695, 1044], "imacul": 1036, "imag": [3, 6, 14, 16, 20, 21, 32, 36, 39, 40, 41, 42, 44, 46, 48, 51, 54, 58, 62, 67, 68, 70, 89, 94, 95, 100, 104, 106, 119, 146, 148, 155, 166, 190, 221, 230, 233, 237, 258, 292, 301, 302, 316, 325, 326, 351, 352, 372, 373, 375, 377, 380, 385, 388, 394, 397, 400, 407, 412, 439, 443, 450, 460, 491, 492, 493, 494, 500, 501, 504, 505, 532, 533, 535, 539, 605, 606, 689, 695, 735, 825, 869, 983, 987, 988, 990, 992, 999, 1003, 1007, 1009, 1012, 1014, 1019, 1020, 1022, 1023, 1025, 1030, 1033, 1038, 1039, 1043, 1045, 1046], "image_arrai": 48, "image_array_sampl": 48, "image_height": [581, 582, 585], "image_index": [325, 326], "image_nam": 504, "image_patch": 585, "image_reconstruct": 585, "image_s": 585, "image_shap": [95, 237], "image_width": [581, 582, 585], "imagebox": 221, "imageio": 374, "imagenet": [856, 857], "images_approx": 1022, "images_restor": 51, "imagin": [96, 151, 235, 342, 411, 412, 415, 983], "imamura": 1044, "imbal": [254, 263, 411, 705, 726, 727, 735, 780, 781, 784, 785, 987], "imbalanc": [199, 263, 267, 269, 352, 392, 405, 411, 701, 706, 784, 797, 801, 836, 987, 989, 995, 1007], "imbert": [1037, 1039, 1042, 1044, 1047], "img": [5, 50, 66, 504, 584], "img_height": 581, "img_shap": 119, "img_to_graph": [46, 66, 415, 1033, 1043], "img_width": 581, "imit": 351, "immanuel": [0, 1030, 1031, 1035], "immedi": [55, 380, 392, 796, 810, 820, 821, 1038], "immens": 1012, "immensu": 1038, "immers": [688, 692], "immobil": 4, "immut": 401, "imp": 977, "imp_mean": [625, 628], "imp_reshap": 119, "impact": [12, 13, 25, 36, 37, 42, 43, 59, 63, 64, 68, 75, 111, 144, 166, 168, 169, 170, 179, 201, 203, 217, 238, 254, 278, 286, 310, 320, 346, 352, 362, 366, 367, 373, 392, 395, 405, 407, 412, 445, 447, 534, 538, 545, 588, 664, 665, 666, 670, 672, 674, 675, 676, 690, 791, 796, 799, 800, 810, 822, 839, 840, 841, 876, 888, 899, 900, 922, 936, 958, 961, 976, 986, 994, 1002, 1009, 1037, 1040, 1043], "imped": 388, "imperfect": [725, 782, 987, 1032], "imperfectli": [701, 731, 987], "implant": 21, "implement": [6, 7, 13, 14, 17, 46, 56, 81, 95, 117, 127, 164, 172, 175, 183, 184, 188, 213, 217, 220, 228, 234, 235, 258, 260, 269, 278, 281, 283, 285, 288, 308, 315, 316, 317, 318, 319, 321, 351, 353, 366, 367, 368, 374, 375, 377, 378, 380, 381, 382, 385, 386, 388, 389, 394, 397, 398, 401, 403, 404, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 435, 440, 441, 442, 444, 445, 446, 447, 448, 473, 491, 494, 506, 530, 531, 532, 533, 534, 536, 539, 540, 541, 551, 552, 553, 555, 556, 559, 560, 561, 565, 570, 580, 586, 587, 589, 591, 595, 599, 608, 609, 630, 631, 638, 639, 643, 644, 651, 655, 656, 657, 661, 662, 666, 669, 670, 672, 673, 674, 675, 676, 682, 683, 684, 685, 686, 689, 690, 693, 705, 709, 718, 732, 735, 739, 775, 779, 785, 786, 794, 796, 799, 800, 802, 810, 814, 815, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 844, 847, 849, 850, 855, 856, 857, 859, 881, 889, 890, 896, 899, 900, 901, 902, 903, 904, 905, 935, 936, 944, 947, 952, 955, 956, 958, 976, 977, 979, 981, 983, 984, 985, 986, 988, 989, 991, 992, 993, 997, 999, 1000, 1003, 1004, 1005, 1007, 1008, 1010, 1012, 1014, 1019, 1020, 1021, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "impli": [4, 151, 169, 351, 352, 353, 412, 414, 417, 472, 571, 580, 608, 609, 620, 732, 923, 983, 984, 1023, 1041], "implic": [362, 380], "implicit": [199, 394, 414, 415, 570, 680, 681, 981, 986, 1007, 1039], "implicitli": [353, 389, 414, 595, 630, 631, 878, 977, 979, 994, 997, 1002], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 173, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 948, 949, 950, 951, 952, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "importance_gett": [416, 591, 592, 595, 1042], "importances_mean": [118, 125, 171, 172, 315, 632, 995], "importances_std": [118, 632, 995], "important_word": 19, "importantli": [4, 14, 96, 170, 175, 305, 407, 1048], "importerror": [11, 53, 98, 283, 296, 388], "importlib": 1043, "impos": [39, 57, 129, 193, 203, 311, 392, 407, 412, 414, 415, 525, 655, 983], "imposs": [124, 353, 1008], "impract": 904, "impress": 1012, "improp": [394, 1037], "improv": [0, 4, 24, 25, 33, 78, 79, 82, 100, 105, 111, 112, 117, 120, 122, 123, 124, 126, 127, 132, 144, 164, 169, 175, 185, 199, 207, 217, 261, 263, 278, 283, 286, 302, 310, 321, 341, 342, 352, 362, 367, 378, 383, 385, 386, 388, 389, 392, 394, 395, 401, 406, 412, 414, 416, 447, 448, 529, 530, 532, 535, 536, 537, 539, 540, 541, 544, 552, 555, 556, 557, 558, 559, 560, 562, 563, 608, 609, 641, 650, 662, 664, 665, 666, 670, 671, 672, 673, 674, 676, 683, 685, 690, 726, 727, 781, 784, 785, 848, 856, 857, 873, 875, 887, 907, 908, 910, 936, 981, 983, 984, 987, 990, 991, 1001, 1002, 1003, 1006, 1007, 1008, 1012, 1021, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "improvis": [11, 296], "impur": [125, 172, 360, 396, 414, 416, 551, 552, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 911, 913, 1003, 1025, 1035, 1036, 1037, 1038], "imput": [71, 127, 132, 165, 171, 230, 240, 242, 316, 319, 369, 372, 384, 393, 394, 398, 408, 414, 488, 499, 563, 578, 637, 643, 670, 821, 842, 860, 918, 920, 1007, 1008, 1009, 1025, 1032, 1033], "imputation_const": 240, "imputation_mean": 240, "imputation_ord": [625, 1040], "imputation_sequence_": 625, "impute_estim": 163, "impute_scor": 164, "imran": [1032, 1033, 1034], "imread": 32, "imshow": [5, 6, 14, 32, 40, 46, 47, 48, 50, 51, 53, 54, 58, 82, 89, 95, 98, 105, 153, 154, 155, 159, 172, 190, 215, 221, 237, 271, 287, 302, 325, 326, 338, 344, 347, 374, 630, 695, 1019, 1020, 1044], "in1d": 1037, "in_bodi": 8, "in_titl": 8, "in_top": 8, "in_topic_d": 8, "inaccess": 55, "inact": [353, 374, 380], "inadvert": [168, 394], "inadvis": 401, "inappropri": [375, 411, 417, 707, 817], "inbuilt": 411, "inc": [0, 70, 259, 977, 999, 1012], "incap": 55, "incentiv": 384, "incept": 1008, "includ": [4, 32, 34, 55, 80, 117, 121, 122, 123, 168, 169, 171, 183, 199, 203, 217, 235, 261, 278, 283, 300, 305, 318, 319, 321, 338, 343, 351, 353, 362, 366, 367, 374, 376, 378, 380, 381, 382, 384, 385, 386, 388, 389, 394, 395, 397, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 442, 444, 448, 454, 464, 467, 468, 469, 470, 471, 472, 473, 474, 487, 488, 489, 494, 498, 499, 500, 502, 503, 508, 532, 539, 555, 562, 572, 630, 636, 644, 645, 650, 658, 659, 660, 663, 679, 686, 687, 695, 711, 726, 727, 732, 734, 735, 768, 780, 781, 784, 792, 796, 798, 799, 800, 809, 810, 813, 816, 822, 825, 847, 849, 850, 851, 872, 873, 874, 878, 896, 899, 900, 907, 909, 911, 913, 919, 920, 923, 925, 928, 944, 976, 983, 986, 987, 988, 990, 991, 997, 1001, 1002, 1003, 1007, 1008, 1011, 1012, 1021, 1023, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "include_bia": [4, 178, 274, 874, 878, 1044], "include_boundari": [923, 1044], "include_self": [39, 44, 67, 693, 852, 853, 1034], "include_valu": 695, "inclus": [380, 382, 388, 448, 454, 751, 783, 987, 988, 1030, 1044], "incom": [305, 375, 438], "incoming_count": 17, "incompat": [201, 384, 494, 977, 1038, 1039], "incomplet": [380, 397, 403, 407, 703, 792, 977, 984, 1023, 1034, 1036], "inconsist": [394, 401, 415, 506, 507, 574, 901, 904, 923, 993, 1002, 1025, 1030, 1035, 1036, 1037, 1038, 1040, 1043, 1045, 1046, 1047], "inconsistentversionwarn": [401, 1046], "incorpor": [321, 380, 408, 414, 986, 1007, 1012], "incorrect": [111, 168, 267, 328, 362, 380, 407, 605, 606, 630, 631, 731, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "incorrectli": [180, 414, 415, 551, 557, 559, 731, 737, 987, 1031, 1036, 1038, 1039, 1041, 1046], "incr_mean_variance_axi": [1036, 1042], "increas": [4, 7, 15, 26, 37, 43, 55, 57, 58, 61, 75, 98, 111, 112, 114, 117, 120, 122, 127, 129, 144, 148, 151, 155, 156, 157, 160, 169, 170, 175, 179, 181, 190, 199, 200, 201, 203, 217, 225, 232, 246, 247, 260, 261, 262, 267, 273, 299, 306, 307, 310, 317, 326, 338, 346, 352, 353, 356, 366, 367, 368, 379, 388, 389, 394, 405, 407, 409, 412, 414, 415, 418, 438, 442, 444, 450, 461, 469, 470, 476, 530, 534, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 586, 589, 625, 633, 634, 635, 643, 648, 649, 652, 653, 654, 656, 657, 664, 665, 666, 674, 675, 676, 680, 681, 683, 684, 690, 704, 705, 710, 775, 779, 786, 799, 800, 828, 847, 849, 850, 851, 854, 856, 857, 873, 899, 907, 908, 909, 910, 936, 976, 978, 982, 983, 984, 986, 987, 990, 997, 1001, 1002, 1003, 1012, 1030, 1032, 1035, 1039, 1041, 1042, 1045], "increasing_": 633, "increasing_bool": 634, "increment": [72, 74, 94, 100, 101, 102, 103, 106, 166, 263, 384, 386, 440, 445, 461, 502, 531, 532, 533, 534, 537, 539, 542, 600, 644, 656, 664, 802, 823, 831, 832, 834, 835, 836, 837, 838, 868, 869, 879, 899, 900, 962, 983, 989, 1009, 1033, 1034], "incrementalpca": [99, 368, 412, 531, 533, 537, 539, 542, 1034, 1037, 1038, 1040, 1041, 1044], "incur": [26, 617, 899, 1002, 1038], "ind": [14, 42, 123, 134, 352, 839, 840], "inde": [5, 7, 25, 27, 34, 39, 40, 53, 55, 58, 82, 86, 100, 111, 114, 147, 148, 151, 169, 171, 178, 183, 187, 188, 199, 201, 262, 263, 267, 269, 278, 283, 305, 310, 346, 352, 362, 366, 379, 385, 393, 394, 395, 407, 409, 414, 565, 566, 983, 997, 1001, 1044], "indecisiveus": [1041, 1042], "indefinit": 384, "indent": [382, 953], "independ": [13, 25, 27, 37, 46, 96, 97, 99, 116, 120, 158, 170, 237, 238, 260, 263, 265, 269, 281, 305, 312, 315, 352, 362, 366, 367, 376, 382, 384, 393, 394, 397, 404, 405, 406, 407, 408, 409, 410, 411, 415, 419, 447, 462, 486, 501, 513, 514, 515, 516, 518, 530, 531, 533, 535, 537, 538, 544, 545, 549, 550, 602, 605, 606, 623, 638, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 702, 703, 715, 733, 734, 752, 754, 792, 798, 824, 828, 830, 832, 833, 871, 875, 876, 877, 879, 883, 884, 885, 886, 888, 889, 890, 893, 901, 902, 903, 904, 905, 930, 976, 979, 981, 983, 984, 987, 988, 989, 992, 994, 997, 1002, 1003, 1024, 1025, 1030, 1031, 1036, 1038, 1040, 1045], "inder128": 1040, "inderjeet": 1041, "inderjit": [404, 451], "indeterminaci": 542, "index": [12, 15, 17, 37, 38, 39, 40, 41, 49, 50, 58, 71, 72, 111, 116, 118, 127, 145, 148, 156, 163, 168, 169, 170, 171, 172, 199, 203, 217, 239, 242, 246, 247, 251, 255, 258, 259, 260, 261, 263, 271, 272, 283, 305, 310, 311, 312, 319, 325, 326, 352, 353, 375, 377, 378, 380, 382, 384, 389, 392, 394, 404, 408, 411, 412, 414, 415, 422, 441, 445, 446, 447, 448, 449, 451, 452, 455, 457, 458, 462, 465, 501, 507, 555, 556, 557, 558, 562, 563, 564, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 615, 630, 631, 638, 695, 702, 703, 710, 714, 716, 728, 735, 754, 776, 777, 783, 785, 791, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 825, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 872, 907, 908, 909, 910, 940, 958, 961, 966, 967, 987, 989, 990, 991, 1001, 1003, 1007, 1021, 1023, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "index_alpha_path_a": 187, "index_alpha_path_b": 187, "index_map": 17, "indexerror": [1038, 1039], "indexhash": 638, "indexhash_": 638, "indian": 375, "indic": [12, 19, 20, 25, 26, 48, 59, 60, 66, 75, 86, 90, 95, 111, 116, 122, 156, 159, 164, 168, 170, 196, 222, 232, 235, 254, 262, 263, 266, 267, 283, 296, 325, 326, 329, 351, 352, 353, 360, 367, 375, 380, 381, 382, 384, 388, 389, 392, 394, 403, 404, 405, 407, 409, 411, 412, 414, 415, 418, 422, 435, 438, 442, 448, 449, 450, 451, 453, 454, 455, 458, 462, 465, 470, 485, 506, 507, 509, 510, 511, 521, 530, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 579, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 618, 625, 626, 627, 628, 630, 631, 637, 644, 645, 648, 649, 650, 651, 652, 653, 659, 661, 663, 671, 673, 680, 681, 688, 690, 692, 694, 701, 705, 710, 711, 716, 717, 718, 722, 725, 726, 727, 728, 731, 735, 736, 737, 738, 751, 768, 775, 776, 777, 778, 780, 781, 782, 784, 785, 789, 790, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 832, 833, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 863, 866, 870, 872, 880, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 915, 919, 920, 925, 940, 950, 951, 962, 963, 964, 965, 966, 967, 968, 977, 982, 983, 984, 987, 988, 989, 990, 991, 994, 997, 998, 1001, 1002, 1008, 1014, 1018, 1021, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "indicator_": [625, 626, 628], "indicator_matrix_": 1035, "indigo": 216, "indirect": [263, 381, 394], "indirectli": [217, 342], "indispens": 1012, "indistinguish": 305, "individu": [4, 46, 60, 80, 110, 112, 114, 129, 131, 132, 136, 143, 160, 166, 167, 169, 172, 173, 195, 199, 217, 229, 238, 239, 263, 265, 281, 315, 322, 342, 346, 367, 381, 384, 387, 389, 394, 396, 398, 404, 408, 411, 414, 415, 435, 450, 460, 462, 494, 499, 501, 507, 553, 554, 557, 558, 560, 561, 563, 565, 566, 567, 568, 601, 607, 608, 630, 631, 641, 643, 655, 656, 657, 666, 669, 670, 671, 672, 673, 674, 675, 676, 685, 710, 717, 725, 731, 747, 748, 782, 787, 788, 796, 810, 827, 831, 832, 834, 835, 836, 837, 838, 857, 860, 868, 869, 871, 872, 873, 876, 878, 879, 884, 885, 886, 899, 900, 987, 988, 997, 1002, 1009, 1018, 1023, 1025, 1031, 1034, 1036, 1042, 1044, 1046], "indptr": [17, 283, 360, 962, 963, 964, 965, 966, 967, 968, 1038, 1046], "induc": [26, 56, 169, 183, 190, 192, 197, 200, 214, 234, 238, 346, 353, 404, 406, 412, 414, 444, 447, 537, 541, 551, 555, 556, 557, 558, 562, 563, 564, 641, 723, 753, 872, 907, 908, 909, 910, 980, 987, 1001, 1021], "induct": [4, 8, 27, 36, 68, 109, 124, 159, 166, 235, 283, 394, 407, 414, 421, 439, 510, 562, 625, 629, 894, 895, 948, 971, 983, 1000, 1009, 1032], "inductive_learn": 56, "inductivecluster": 56, "industri": [407, 1007], "ineffect": [309, 997, 1038, 1039], "ineffici": [414, 441, 572, 827, 828, 990, 992], "inequ": [360, 394, 407, 441, 445, 457, 697, 984, 985, 990], "inertia": [57, 58, 61, 352, 407, 441, 445, 447, 450, 457, 458, 460, 461, 1041], "inertia_": [58, 61, 64, 441, 445, 447, 1041], "inf": [75, 154, 293, 389, 407, 417, 444, 448, 453, 454, 455, 459, 469, 470, 476, 551, 552, 557, 558, 591, 592, 595, 604, 605, 606, 617, 625, 633, 635, 646, 647, 648, 650, 667, 669, 670, 674, 675, 676, 678, 685, 725, 727, 743, 775, 782, 786, 855, 864, 871, 917, 918, 919, 920, 934, 987, 997, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046], "infant": 997, "infeas": [983, 990, 992], "infer": [166, 167, 169, 173, 194, 246, 250, 251, 260, 357, 374, 382, 392, 406, 411, 412, 494, 506, 507, 513, 532, 534, 536, 538, 545, 547, 548, 551, 557, 558, 630, 633, 655, 707, 720, 738, 782, 794, 795, 802, 818, 825, 835, 873, 880, 894, 895, 907, 908, 909, 910, 950, 977, 983, 986, 987, 992, 997, 1000, 1003, 1007, 1008, 1009, 1017, 1031, 1035, 1036, 1041, 1044, 1047], "inferenti": 56, "inferior": [439, 443, 1041], "infin": [260, 346, 539, 680, 681, 710, 820, 906, 918, 990], "infinit": [27, 200, 245, 263, 342, 366, 417, 444, 620, 621, 775, 794, 917, 919, 920, 979, 986, 997, 1002, 1038, 1040, 1043, 1044, 1045, 1047, 1048], "inflammatori": 375, "inflat": [57, 168, 169, 171, 407, 411, 987, 997], "inflect": 262, "influenc": [3, 9, 13, 16, 80, 81, 111, 166, 169, 181, 234, 245, 268, 305, 312, 338, 342, 346, 362, 368, 409, 412, 414, 430, 438, 452, 463, 480, 481, 482, 487, 499, 552, 554, 556, 558, 560, 563, 566, 568, 609, 626, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 674, 676, 677, 731, 747, 825, 832, 833, 841, 842, 849, 850, 857, 876, 877, 888, 900, 902, 905, 908, 910, 919, 976, 981, 982, 983, 990, 993, 997, 1001, 1002, 1009, 1012, 1033, 1038, 1039], "influenti": [203, 352, 1012], "info": [6, 42, 71, 95, 169, 170, 235, 258, 377, 379, 384, 394, 415, 494, 943, 953, 1019], "infonea": 1005, "inform": [4, 5, 8, 11, 12, 13, 14, 25, 27, 33, 34, 37, 38, 49, 53, 58, 66, 67, 70, 71, 86, 89, 90, 91, 101, 117, 118, 119, 142, 144, 145, 147, 148, 149, 151, 156, 166, 169, 170, 172, 175, 177, 178, 179, 183, 200, 203, 207, 214, 216, 217, 218, 235, 239, 247, 248, 250, 255, 257, 260, 261, 262, 265, 267, 269, 286, 289, 290, 293, 312, 318, 322, 341, 346, 351, 352, 353, 357, 360, 362, 366, 369, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 388, 392, 393, 394, 395, 398, 401, 404, 411, 412, 414, 415, 416, 417, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 462, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 490, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 508, 513, 522, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 604, 605, 606, 607, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 693, 695, 699, 702, 703, 713, 723, 727, 740, 752, 753, 754, 783, 785, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 944, 977, 979, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 1001, 1003, 1008, 1009, 1011, 1012, 1020, 1021, 1022, 1023, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "informatik": [24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234, 987], "informed": 987, "infrastructur": [301, 321, 1005, 1007, 1008], "infrequ": [872, 873, 880, 987, 1030, 1044, 1045, 1046], "infrequent_categories_": [319, 321, 872, 873, 880, 997], "infrequent_if_exist": [872, 997], "infrequent_sklearn": [872, 997], "infti": [217, 417, 617, 983, 997, 1037], "ing": 415, "ingela": 1044, "ingest": 415, "ingredi": 417, "ingrid": 1040, "inher": [105, 194, 362, 407, 412, 977, 979, 981, 982, 984, 988], "inherit": [235, 380, 382, 393, 394, 421, 575, 674, 928, 930, 983, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1045, 1046, 1047], "inhibit": [418, 442], "inhomogen": [417, 612], "ini": 248, "init": [15, 42, 45, 58, 59, 61, 64, 170, 179, 220, 221, 223, 224, 225, 246, 248, 283, 352, 383, 388, 407, 412, 414, 441, 445, 447, 449, 451, 457, 458, 536, 538, 545, 546, 557, 558, 630, 631, 688, 690, 692, 848, 984, 1030, 1039, 1042, 1044, 1045, 1046], "init_": [557, 558], "init_param": [245, 248, 251, 794, 795], "init_s": [61, 352, 447], "init_size_": 1042, "init_tim": 248, "initi": [0, 7, 12, 17, 36, 42, 43, 45, 57, 58, 60, 63, 64, 68, 81, 125, 133, 134, 135, 152, 157, 166, 169, 179, 192, 214, 220, 221, 225, 244, 246, 247, 252, 260, 283, 317, 327, 338, 352, 362, 367, 375, 380, 382, 388, 389, 392, 394, 407, 412, 414, 416, 417, 419, 440, 441, 445, 446, 447, 448, 449, 450, 451, 457, 458, 459, 460, 510, 513, 529, 530, 531, 535, 536, 538, 541, 543, 544, 545, 546, 551, 552, 557, 558, 591, 605, 606, 608, 609, 617, 618, 625, 638, 643, 644, 645, 646, 650, 651, 656, 658, 659, 660, 661, 664, 665, 666, 667, 669, 674, 675, 676, 678, 679, 682, 688, 689, 690, 692, 693, 794, 795, 829, 848, 855, 856, 857, 895, 922, 935, 936, 956, 961, 962, 979, 983, 984, 986, 991, 992, 993, 1001, 1003, 1007, 1009, 1020, 1022, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "initial_imputer_": 625, "initial_strategi": 625, "initial_theta": [608, 609], "initialis": [95, 536, 538, 545, 1030, 1038, 1039], "initializedcheck": 381, "inject": [238, 375, 414], "inki": 1036, "inli": [228, 983, 993], "inlier": [80, 128, 202, 228, 238, 305, 394, 409, 429, 467, 561, 669, 675, 845, 876, 888, 902, 903, 905, 983, 993, 1037, 1038, 1043], "inlier_mask": 202, "inlier_mask_": [202, 669], "inlier_plot": 80, "inliers_mask": 81, "inlin": [210, 380, 381, 1003], "inner": [27, 100, 124, 127, 261, 265, 281, 327, 366, 415, 441, 512, 580, 587, 616, 646, 667, 678, 772, 774, 979, 987, 997, 1002, 1031, 1034, 1044, 1047], "inner_clf": 987, "inner_cv": [265, 322], "inner_it": 386, "inner_max_num_thread": 955, "inner_numb": 327, "inner_stat": 1044, "inner_stats_": 1044, "inpaint": 412, "inplac": [217, 238, 272, 452, 480, 481, 482, 483, 854, 862, 865, 868, 869, 871, 875, 876, 877, 879, 960, 963, 964, 965, 969, 970, 1039], "inplace_csr_column_scal": 389, "inplace_csr_row_normalize_l1": 389, "inplace_csr_row_normalize_l2": 389, "inproceed": 0, "input": [4, 6, 10, 27, 31, 33, 73, 95, 99, 120, 124, 125, 157, 158, 159, 169, 175, 178, 199, 202, 203, 207, 214, 217, 231, 232, 234, 235, 242, 255, 278, 287, 288, 301, 306, 307, 308, 309, 315, 318, 320, 338, 342, 344, 347, 353, 374, 377, 380, 383, 385, 389, 390, 392, 393, 394, 404, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 425, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 443, 446, 447, 448, 452, 455, 456, 459, 462, 463, 465, 466, 467, 469, 470, 480, 481, 482, 487, 501, 507, 514, 515, 516, 518, 522, 526, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 618, 620, 625, 626, 627, 628, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 694, 695, 696, 697, 698, 699, 700, 719, 720, 721, 725, 742, 743, 745, 747, 748, 750, 751, 758, 764, 768, 769, 771, 775, 776, 777, 778, 782, 787, 788, 794, 795, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 886, 887, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 916, 917, 918, 919, 920, 921, 925, 930, 933, 935, 944, 946, 947, 951, 960, 962, 968, 969, 970, 973, 974, 977, 979, 981, 983, 984, 985, 986, 987, 989, 990, 991, 992, 994, 995, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1012, 1014, 1018, 1019, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "input_featur": [178, 382, 394, 423, 428, 440, 441, 443, 445, 447, 462, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 1046], "input_nam": [918, 920, 950, 1044], "input_typ": [353, 415, 580], "inria": [0, 5, 9, 30, 37, 52, 54, 57, 75, 82, 117, 127, 157, 178, 183, 184, 186, 190, 192, 193, 204, 221, 222, 228, 231, 238, 261, 263, 266, 273, 295, 310, 346, 351, 352, 353, 656, 1005, 1030], "insensit": [234, 641, 674, 676, 785, 900, 980, 1001, 1002, 1030], "insepar": [148, 377], "insert": [60, 169, 199, 392, 407, 485, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 914], "insid": [17, 19, 26, 170, 201, 235, 260, 327, 338, 368, 374, 375, 382, 386, 398, 407, 415, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 592, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 944, 947, 955, 994, 1012, 1047], "insight": [4, 7, 169, 170, 200, 201, 217, 301, 305, 351, 360, 405, 796, 799, 800, 810, 822, 994, 1003, 1012], "insist": 70, "inspect": [4, 9, 30, 31, 34, 56, 61, 113, 118, 125, 127, 128, 129, 133, 145, 151, 156, 157, 169, 170, 171, 172, 173, 182, 191, 208, 213, 239, 260, 263, 272, 286, 291, 294, 310, 315, 316, 317, 318, 320, 322, 334, 335, 336, 337, 339, 340, 342, 351, 357, 367, 369, 382, 394, 407, 408, 414, 415, 462, 551, 552, 555, 556, 557, 558, 562, 563, 564, 828, 859, 860, 907, 908, 909, 910, 975, 987, 988, 991, 994, 995, 1002, 1007, 1009, 1023, 1025, 1033], "inspir": [79, 129, 170, 217, 380, 392, 414, 559, 560, 924, 977, 1007, 1039], "instabl": [39, 169, 293, 417, 450, 533, 537, 541, 693, 1037, 1040, 1043], "instal": [53, 242, 283, 315, 316, 317, 318, 319, 320, 321, 322, 366, 367, 369, 380, 381, 383, 384, 386, 388, 392, 393, 400, 403, 407, 415, 450, 460, 494, 689, 693, 1003, 1005, 1023, 1037, 1038, 1039, 1043, 1044], "instanc": [4, 8, 10, 13, 24, 26, 27, 53, 56, 58, 114, 127, 145, 148, 164, 170, 171, 182, 183, 230, 235, 238, 256, 258, 269, 271, 272, 294, 315, 322, 330, 334, 335, 341, 342, 351, 352, 353, 365, 366, 367, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 388, 389, 392, 394, 397, 398, 403, 404, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 460, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 489, 490, 493, 494, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 618, 625, 626, 627, 628, 630, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 705, 718, 726, 727, 735, 768, 771, 775, 776, 777, 778, 780, 781, 784, 785, 786, 789, 790, 794, 795, 796, 798, 799, 800, 801, 802, 803, 805, 808, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 919, 920, 922, 930, 931, 935, 936, 943, 944, 945, 946, 955, 956, 957, 958, 961, 971, 972, 976, 977, 983, 984, 987, 989, 990, 993, 995, 997, 1001, 1002, 1003, 1008, 1014, 1021, 1022, 1023, 1025, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "instanci": 1039, "instant": 193, "instantan": 506, "instanti": [72, 154, 318, 383, 398, 414, 448, 565, 566, 600, 628, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 926, 993, 1020, 1030, 1038, 1042, 1046], "instead": [0, 4, 5, 6, 13, 20, 48, 53, 55, 56, 57, 71, 100, 114, 119, 129, 145, 148, 151, 156, 199, 201, 214, 217, 224, 238, 251, 256, 257, 261, 262, 281, 288, 305, 315, 316, 317, 318, 319, 338, 340, 342, 351, 353, 360, 362, 366, 367, 374, 375, 378, 379, 380, 381, 382, 384, 385, 388, 389, 392, 393, 394, 398, 401, 403, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 430, 435, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 454, 457, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 507, 508, 531, 532, 533, 535, 536, 537, 538, 539, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 592, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 628, 630, 633, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 690, 692, 705, 707, 739, 743, 747, 748, 771, 775, 776, 777, 779, 780, 794, 795, 796, 797, 798, 800, 803, 805, 808, 810, 814, 815, 816, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 860, 861, 862, 864, 865, 866, 871, 872, 877, 878, 879, 889, 890, 893, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 925, 931, 936, 944, 955, 962, 976, 977, 979, 983, 984, 986, 987, 988, 991, 992, 997, 1001, 1002, 1003, 1007, 1019, 1021, 1023, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "instinct": 351, "institut": [0, 377, 990], "instruct": [366, 380, 381, 382, 383, 384, 385, 388, 392, 393, 394, 501, 586, 587, 589, 1011, 1014, 1023, 1030], "instrument": [12, 70, 96, 168], "insuffici": [396, 986, 1022], "insur": [166, 177, 199, 218, 462, 494, 550, 646, 667, 678, 704, 742, 747, 749, 825, 860, 863, 864, 872, 879, 983, 1009], "int": [8, 10, 13, 14, 17, 19, 37, 44, 62, 81, 114, 123, 127, 128, 139, 140, 152, 153, 154, 160, 164, 168, 180, 190, 192, 199, 217, 225, 228, 234, 238, 245, 255, 258, 259, 260, 283, 288, 290, 296, 312, 326, 353, 375, 380, 382, 392, 394, 405, 408, 411, 415, 418, 419, 422, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 605, 606, 608, 609, 615, 625, 626, 627, 628, 629, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 705, 707, 711, 723, 724, 726, 727, 728, 731, 735, 753, 754, 766, 771, 775, 776, 777, 778, 779, 780, 781, 784, 786, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 919, 920, 922, 923, 935, 936, 938, 939, 940, 941, 952, 956, 958, 961, 966, 967, 983, 994, 1030, 1036, 1040, 1041], "int32": [238, 283, 312, 380, 394, 441, 445, 447, 449, 451, 457, 901, 902, 903, 904, 905, 952, 1002, 1039, 1045, 1046, 1047], "int64": [4, 14, 54, 71, 169, 170, 278, 311, 322, 360, 394, 415, 425, 440, 446, 448, 494, 586, 638, 644, 645, 650, 651, 712, 713, 835, 864, 917, 973, 1038, 1041, 1043, 1045, 1046, 1047], "int64dtyp": 1047, "intact": [872, 1023], "integ": [4, 17, 48, 53, 71, 169, 199, 217, 316, 317, 362, 366, 374, 375, 377, 382, 385, 389, 393, 394, 407, 408, 411, 412, 414, 415, 432, 435, 460, 462, 465, 470, 485, 494, 496, 499, 500, 501, 503, 506, 507, 510, 512, 513, 517, 520, 548, 557, 558, 559, 560, 561, 565, 566, 570, 580, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 630, 631, 642, 649, 653, 657, 663, 671, 673, 674, 676, 697, 712, 732, 796, 798, 799, 800, 801, 803, 805, 810, 811, 812, 815, 816, 819, 822, 830, 833, 835, 838, 839, 840, 864, 872, 873, 878, 879, 880, 883, 893, 895, 907, 908, 909, 910, 915, 950, 951, 952, 956, 977, 983, 988, 990, 997, 1000, 1002, 1003, 1014, 1021, 1023, 1030, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "integr": [0, 42, 71, 145, 159, 188, 301, 317, 367, 378, 382, 383, 384, 386, 388, 394, 397, 412, 417, 444, 713, 752, 783, 962, 986, 994, 1012, 1017, 1031, 1033, 1034, 1042, 1043, 1047], "intel": [987, 1007], "intelex": [397, 1007], "intellectu": 168, "intellig": [63, 148, 351, 377, 407, 414, 446, 553, 554, 636, 694, 722, 829, 856, 857, 988, 999, 1008, 1012], "intend": [57, 58, 99, 200, 342, 351, 380, 381, 382, 387, 392, 394, 411, 466, 580, 671, 697, 868, 869, 879, 897, 982, 983, 987, 991, 998], "intens": [66, 98, 283, 377, 381, 392, 394, 412, 441, 445, 457, 605, 606, 630, 631, 798, 976, 994, 1012, 1038], "intention": 27, "inter": [40, 118, 362, 414, 714, 942], "interact": [3, 125, 127, 166, 199, 225, 230, 261, 316, 379, 381, 382, 384, 386, 392, 394, 395, 408, 557, 558, 559, 560, 630, 631, 874, 878, 976, 979, 983, 984, 985, 992, 994, 997, 1006, 1008, 1032, 1037, 1044, 1045], "interaction_cst": [170, 320, 414, 559, 560, 1045], "interaction_onli": [4, 874, 983, 997], "interactiveshellapp": 386, "intercept": [98, 191, 208, 216, 347, 394, 480, 481, 482, 547, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 874, 878, 881, 899, 900, 906, 983, 985, 987, 992, 1001, 1002, 1033, 1035, 1039, 1040], "intercept_": [181, 189, 191, 208, 236, 336, 343, 347, 382, 394, 480, 481, 482, 547, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 899, 900, 901, 902, 903, 904, 905, 981, 983, 1001, 1002, 1030, 1037, 1042, 1044, 1047], "intercept_hidden_": 855, "intercept_init": [664, 665, 666, 674, 676], "intercept_sc": [192, 656, 657, 899, 900, 906, 983, 1002], "intercept_visible_": 855, "intercepts_": [856, 857, 991], "interchang": [1007, 1047], "interclass": 40, "interdepend": 513, "interest": [0, 4, 6, 13, 42, 44, 50, 55, 62, 66, 72, 111, 119, 124, 132, 145, 148, 156, 163, 169, 170, 171, 188, 199, 200, 201, 217, 221, 233, 254, 257, 260, 261, 263, 269, 278, 338, 346, 352, 360, 366, 375, 377, 380, 385, 386, 388, 392, 395, 407, 409, 412, 415, 417, 491, 492, 498, 502, 508, 644, 645, 899, 977, 983, 984, 987, 992, 993, 994, 1008, 1012, 1019, 1021, 1022, 1030, 1047], "interestingli": [78, 148, 997], "interfac": [3, 111, 166, 373, 374, 381, 382, 389, 392, 394, 411, 417, 418, 439, 443, 448, 494, 551, 697, 796, 799, 800, 810, 859, 860, 885, 972, 976, 990, 1002, 1007, 1008, 1012, 1030, 1032, 1035, 1036, 1038, 1039, 1044, 1046], "interfer": [322, 1040], "interim": 1037, "interior": [201, 668, 983, 1045], "interleav": [376, 392, 520], "intermedi": [4, 7, 52, 55, 116, 124, 238, 338, 392, 415, 557, 558, 617, 859, 987, 1042, 1048], "intern": [0, 4, 26, 71, 82, 100, 117, 122, 125, 127, 138, 148, 152, 163, 166, 181, 199, 283, 285, 304, 311, 313, 327, 353, 362, 367, 375, 377, 382, 386, 389, 392, 394, 398, 401, 403, 404, 407, 411, 412, 414, 415, 416, 417, 418, 435, 437, 442, 463, 466, 509, 532, 533, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 591, 592, 608, 609, 636, 638, 641, 644, 650, 666, 670, 674, 676, 694, 706, 728, 731, 755, 756, 780, 825, 839, 840, 855, 856, 857, 859, 860, 864, 878, 880, 894, 895, 897, 899, 900, 901, 904, 907, 908, 909, 910, 955, 983, 984, 985, 987, 990, 993, 997, 999, 1002, 1003, 1009, 1012, 1030, 1033, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "internet": [375, 385, 997, 1021], "interoper": [417, 1005, 1008, 1025], "interp": [269, 270, 338], "interp1d": [651, 661, 682], "interp_tpr": 270, "interpol": [4, 14, 32, 40, 50, 51, 54, 58, 82, 89, 95, 98, 155, 158, 166, 177, 178, 190, 215, 218, 231, 237, 269, 274, 287, 288, 295, 302, 326, 338, 344, 417, 633, 643, 651, 661, 670, 682, 698, 705, 842, 850, 860, 874, 878, 978, 983, 987, 997, 1009, 1037, 1042], "interpret": [4, 27, 127, 148, 158, 166, 167, 168, 170, 173, 195, 199, 200, 204, 215, 217, 254, 260, 262, 263, 302, 306, 309, 317, 351, 353, 366, 378, 380, 381, 386, 388, 389, 394, 396, 405, 407, 408, 413, 415, 450, 462, 463, 465, 494, 539, 570, 609, 637, 641, 651, 670, 671, 689, 690, 693, 699, 726, 750, 755, 756, 780, 789, 790, 802, 811, 822, 823, 825, 828, 860, 872, 879, 955, 981, 983, 987, 988, 994, 995, 997, 1003, 1007, 1009, 1014, 1022, 1030, 1031, 1035, 1038, 1043, 1044, 1045], "interquartil": [238, 877, 889], "interquartile_rang": 877, "interrog": 415, "interrupt": 983, "intersect": [261, 335, 404, 407, 735], "interv": [13, 27, 110, 127, 135, 136, 158, 166, 183, 199, 200, 201, 217, 260, 375, 394, 405, 411, 414, 417, 436, 437, 514, 515, 516, 555, 556, 558, 560, 562, 563, 633, 634, 636, 675, 739, 745, 747, 800, 817, 825, 862, 864, 878, 901, 902, 903, 923, 979, 983, 987, 997, 1003, 1009, 1037, 1041], "intervent": [55, 169], "intl": [27, 411], "intp": [422, 449, 451], "intra": [4, 586, 589, 789, 790], "intract": [56, 412, 984, 992], "intric": [203, 510], "intricaci": 380, "intrins": [178, 394, 412, 414, 990, 995, 1001, 1042], "introduc": [4, 71, 78, 80, 81, 100, 127, 147, 166, 171, 178, 183, 203, 227, 232, 235, 238, 240, 243, 267, 320, 321, 353, 373, 376, 378, 380, 382, 384, 385, 388, 392, 394, 398, 405, 407, 409, 411, 412, 414, 415, 431, 439, 440, 441, 443, 445, 447, 457, 462, 466, 480, 481, 482, 483, 494, 502, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 553, 554, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 656, 662, 683, 684, 686, 687, 690, 825, 843, 848, 851, 855, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 893, 897, 981, 983, 986, 989, 990, 993, 997, 999, 1001, 1002, 1009, 1014, 1021, 1030, 1031, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "introduct": [147, 217, 258, 369, 380, 411, 412, 415, 588, 785, 786, 834, 838, 983, 985, 987, 989, 1006, 1015, 1021, 1024, 1025], "introductori": [124, 150, 151, 156, 157, 160, 161, 166, 227, 417, 609, 620, 1009, 1012], "introspect": [4, 6, 71, 386, 557, 558, 586, 587, 589, 997, 1019], "intrus": 375, "intuit": [4, 13, 31, 44, 52, 62, 100, 111, 114, 121, 143, 151, 169, 170, 200, 201, 222, 228, 261, 278, 288, 307, 310, 335, 338, 342, 352, 380, 394, 405, 407, 409, 411, 413, 779, 780, 781, 784, 870, 899, 901, 902, 904, 905, 979, 983, 984, 987, 988, 994, 997, 998, 1002, 1012, 1021, 1023, 1030], "inv": [78, 82, 300], "inv_kw_arg": 863, "invalid": [8, 199, 394, 444, 576, 669, 710, 771, 983, 987, 1036, 1038, 1040, 1041, 1043, 1044, 1046], "invalidparametererror": 987, "invalu": 1012, "invari": [40, 377, 394, 407, 417, 612, 687, 744, 814, 815, 983, 984, 987, 1002, 1008, 1038, 1041, 1042, 1043], "invent": 990, "inventor": 989, "inventori": 1012, "invers": [12, 34, 54, 77, 78, 79, 81, 83, 111, 166, 250, 267, 269, 275, 286, 338, 352, 353, 372, 394, 406, 408, 410, 411, 412, 414, 415, 419, 443, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 525, 531, 532, 533, 537, 539, 541, 555, 559, 562, 587, 588, 589, 626, 642, 643, 656, 657, 664, 666, 672, 673, 674, 675, 676, 678, 721, 740, 749, 794, 795, 841, 842, 849, 850, 856, 857, 859, 863, 866, 872, 873, 875, 891, 892, 899, 900, 901, 904, 905, 907, 909, 925, 981, 983, 987, 990, 991, 997, 1001, 1002, 1009, 1021, 1023, 1024, 1025, 1030, 1033, 1038, 1041, 1042, 1044, 1048], "inverse_components_": [891, 892, 999, 1044], "inverse_func": [75, 169, 408, 463, 863, 997, 1038, 1048], "inverse_transform": [5, 51, 54, 100, 145, 235, 287, 352, 398, 412, 415, 443, 463, 480, 481, 482, 531, 532, 533, 536, 537, 538, 539, 541, 542, 579, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 628, 796, 799, 800, 810, 859, 863, 864, 866, 867, 868, 869, 870, 872, 873, 875, 876, 877, 879, 891, 892, 997, 998, 999, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "invert": [82, 100, 145, 221, 352, 353, 392, 409, 415, 628, 687, 691, 997, 1039], "invert_yaxi": [164, 353], "invest": [386, 1012], "investig": [100, 105, 111, 164, 346, 380, 983], "invit": 384, "invok": [382, 529, 535, 537, 543, 544, 565, 567, 568, 820, 896, 1042, 1047], "involv": [310, 312, 315, 338, 342, 366, 368, 375, 380, 384, 394, 395, 410, 417, 697, 827, 828, 984, 988, 990, 994, 995, 1002, 1007, 1012, 1021, 1038], "invscal": [300, 674, 675, 676, 856, 857, 1001], "io": [374, 377, 380, 384, 386, 388, 394, 401, 690, 1007, 1028], "ioangatop": 1047, "ioanni": 731, "ioerror": 1046, "iofal": 1044, "ion": 1045, "ionescu": [640, 979, 1040], "iowa": [121, 132, 238], "ipca": [99, 531, 532], "ipdb": [388, 1023], "ipm": 668, "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "ipython": [382, 385, 386, 388, 1015, 1023], "ipython_config": 386, "iq": 168, "iqbal": 1042, "iqr": [238, 877, 889], "ir": [231, 412, 588, 723, 753, 834, 838, 985, 987], "iren": [1045, 1046], "iri": [8, 11, 17, 30, 31, 33, 41, 45, 56, 74, 88, 93, 94, 97, 99, 100, 105, 106, 109, 110, 111, 112, 113, 115, 130, 133, 136, 140, 144, 150, 152, 155, 156, 159, 161, 166, 175, 177, 182, 191, 192, 196, 218, 233, 242, 247, 254, 265, 266, 269, 270, 275, 286, 292, 294, 299, 300, 307, 317, 324, 329, 331, 333, 334, 336, 338, 340, 341, 342, 347, 349, 355, 356, 358, 359, 360, 361, 373, 374, 393, 407, 408, 411, 412, 414, 445, 494, 502, 539, 547, 551, 555, 562, 608, 620, 629, 674, 796, 810, 894, 895, 896, 899, 904, 907, 911, 912, 913, 976, 977, 981, 986, 987, 990, 994, 997, 1000, 1001, 1002, 1003, 1009, 1014, 1021, 1022, 1025, 1043], "iris": [90, 266, 267, 1020], "iris_61": 374, "iris_969": 374, "iris_i": 1021, "iris_version_3": 374, "iris_x": 1021, "iris_x_test": 1021, "iris_x_train": 1021, "iris_y_test": 1021, "iris_y_train": 1021, "irreduc": [114, 987], "irregular": [156, 342, 407, 990], "irregularities_kernel": 156, "irrelev": [143, 183, 362, 386, 409, 414, 416, 602, 737, 987], "irrespect": [199, 232, 269, 283, 604], "irvin": 377, "is_categor": 630, "is_categorical_": [559, 560], "is_classifi": [382, 394], "is_data_valid": [669, 983], "is_fit": 971, "is_fitted_": [421, 424, 426, 429, 430], "is_inli": [467, 561, 845], "is_leav": 360, "is_max_test_scor": 73, "is_model_valid": [669, 983], "is_multilabel": [389, 1047], "is_paramet": 975, "is_pypi": 1048, "is_regressor": 394, "is_scalar_nan": 1043, "is_sh": 271, "is_split_nod": 360, "is_stationari": [159, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "isa": 19, "isaac": [1036, 1037, 1039, 1040, 1047], "isaack": 1043, "isaactrost": 1047, "isakov": 1042, "isbn": [377, 407, 983], "isclos": 17, "isdigit": [19, 415], "ish": 33, "ishaan": 1043, "ishan": [1043, 1044], "ishank": [1035, 1036, 1037], "ishikawa": [1042, 1043], "isin": [275, 326], "isinst": [34, 120, 217, 394], "islic": [8, 44, 62], "ism": 1034, "isn": [148, 315, 351, 353, 362, 367, 380, 388, 513, 559, 560, 592, 791, 799, 800, 872, 990, 1002, 1040], "iso": [91, 150, 161, 166, 211, 222, 608, 611, 612, 1009], "iso_reg": 633, "isoformat": 17, "isol": [121, 128, 228, 238, 352, 378, 386, 397, 561, 845, 903, 1039, 1040], "isolationforest": [110, 113, 136, 166, 202, 228, 238, 275, 305, 629, 825, 903, 993, 1009, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047], "isolationforestifittedisolationforest": 128, "isomap": [12, 52, 116, 166, 219, 222, 224, 226, 232, 292, 293, 315, 319, 414, 500, 542, 547, 564, 687, 688, 689, 690, 848, 860, 869, 892, 990, 1009, 1024, 1025, 1038, 1040, 1043, 1044, 1045, 1046, 1047], "isomap__n_neighbor": 315, "isometr": [220, 686, 688, 689, 690, 984], "isoton": [24, 25, 73, 75, 166, 223, 227, 243, 369, 435, 655, 922, 1009, 1010, 1025, 1031, 1032, 1033, 1034, 1036, 1043, 1046], "isotonic_regress": [633, 1043], "isotonicregress": [231, 978, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1044, 1045, 1046], "isotonicregression0": 633, "isotrop": [34, 55, 57, 61, 100, 153, 155, 220, 222, 407, 409, 417, 510, 517, 530, 613, 617, 618, 620, 621], "isotropi": 412, "isr": 416, "issam": [0, 299, 1036], "issu": [0, 4, 25, 79, 86, 199, 217, 265, 312, 367, 369, 374, 383, 384, 385, 388, 389, 392, 394, 395, 396, 397, 398, 401, 403, 407, 409, 410, 415, 447, 450, 460, 471, 480, 481, 482, 532, 537, 541, 571, 586, 587, 589, 609, 625, 689, 693, 766, 870, 875, 887, 926, 976, 977, 984, 990, 995, 997, 1002, 1007, 1008, 1011, 1022, 1023, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1048], "issuenumb": 388, "ist": 416, "isupp": 415, "isuru": 1042, "itakura": [412, 536, 538, 545, 1037], "itali": 377, "item": [8, 9, 10, 11, 12, 13, 17, 19, 30, 43, 55, 75, 115, 117, 121, 124, 132, 169, 197, 201, 207, 221, 234, 235, 237, 247, 257, 263, 319, 326, 352, 373, 380, 381, 382, 389, 408, 462, 524, 559, 560, 586, 587, 589, 630, 808, 872, 894, 895, 914, 915, 941, 979, 1000, 1008, 1014], "item_idx": 305, "itemgett": 19, "iter": [8, 15, 17, 31, 46, 72, 82, 95, 98, 111, 114, 117, 120, 122, 123, 125, 126, 127, 148, 160, 163, 166, 178, 179, 207, 214, 247, 248, 253, 255, 268, 271, 276, 299, 301, 302, 307, 317, 326, 328, 329, 338, 380, 382, 386, 388, 389, 393, 394, 402, 407, 410, 412, 414, 416, 419, 435, 438, 439, 441, 443, 445, 446, 447, 450, 452, 457, 459, 460, 461, 469, 470, 476, 480, 481, 482, 513, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 557, 558, 559, 560, 562, 565, 566, 579, 580, 586, 587, 589, 591, 592, 600, 608, 625, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 833, 848, 855, 856, 857, 858, 859, 863, 870, 872, 874, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 914, 935, 936, 942, 943, 944, 945, 953, 977, 983, 984, 986, 987, 990, 991, 992, 1000, 1001, 1002, 1003, 1008, 1009, 1012, 1018, 1022, 1023, 1025, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "iter_minibatch": 8, "iter_offset": 1044, "iter_offset_": 1044, "iterated_pow": [72, 530, 533, 539, 1036], "iterative_impute_scor": 164, "iterativeimput": [162, 164, 165, 166, 230, 398, 488, 563, 578, 626, 627, 628, 637, 643, 670, 821, 842, 860, 1009, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "itergrid": 1032, "itertool": [8, 42, 44, 62, 133, 170, 184, 246, 251, 260, 267, 269, 414], "ith": [494, 771, 775, 835, 856, 857, 872, 873], "ith_cluster_silhouette_valu": 60, "itk": [1040, 1041, 1042], "its": [0, 4, 9, 12, 13, 14, 19, 26, 27, 34, 37, 55, 65, 66, 78, 80, 82, 86, 90, 91, 92, 100, 109, 111, 117, 120, 122, 124, 127, 138, 148, 151, 156, 158, 169, 170, 172, 175, 178, 188, 212, 216, 217, 222, 228, 235, 237, 238, 240, 242, 245, 250, 251, 259, 263, 265, 267, 269, 283, 285, 289, 290, 307, 318, 328, 335, 342, 348, 351, 352, 356, 360, 362, 367, 368, 373, 374, 375, 376, 380, 381, 382, 384, 385, 388, 392, 393, 394, 395, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 423, 438, 440, 442, 444, 448, 452, 454, 458, 461, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 495, 501, 521, 529, 531, 532, 535, 536, 538, 539, 540, 542, 548, 551, 553, 554, 555, 556, 557, 558, 562, 563, 564, 581, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 642, 643, 669, 670, 672, 683, 684, 685, 686, 690, 694, 697, 706, 722, 726, 727, 733, 734, 738, 775, 778, 780, 794, 795, 796, 820, 827, 828, 830, 841, 842, 843, 845, 846, 847, 849, 850, 851, 858, 859, 863, 868, 871, 872, 874, 891, 892, 895, 899, 900, 907, 909, 919, 920, 925, 931, 955, 957, 976, 979, 982, 983, 984, 986, 987, 988, 989, 990, 993, 994, 995, 1000, 1001, 1002, 1003, 1007, 1012, 1014, 1016, 1018, 1021, 1022, 1023, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "itself": [24, 27, 49, 55, 111, 124, 128, 170, 183, 197, 235, 241, 269, 283, 312, 338, 352, 366, 368, 379, 380, 382, 384, 394, 398, 405, 406, 407, 418, 438, 439, 442, 443, 444, 467, 468, 469, 470, 471, 472, 473, 474, 525, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 549, 564, 567, 581, 590, 593, 594, 596, 597, 598, 600, 601, 637, 638, 639, 640, 641, 643, 653, 687, 689, 789, 790, 834, 835, 836, 837, 838, 839, 840, 844, 852, 853, 864, 865, 866, 894, 895, 944, 979, 983, 984, 986, 990, 991, 995, 1007, 1034, 1045], "iv": [168, 987], "ivan": [1038, 1039, 1042, 1045], "ivanllt": 1045, "iver": 1036, "iverson": 983, "ivicajov": 1033, "ivl": 172, "ivt": 532, "iv\u00e1n": [1037, 1043], "iwhalv": 1043, "iwona": 1047, "ix": [11, 269, 345], "iy_j": 997, "iyer": 1041, "j": [0, 1, 11, 17, 37, 38, 40, 43, 61, 70, 79, 80, 81, 111, 114, 115, 126, 152, 164, 170, 211, 223, 237, 245, 259, 260, 265, 271, 287, 293, 296, 309, 320, 360, 367, 374, 375, 377, 384, 386, 392, 404, 405, 407, 409, 411, 412, 414, 415, 417, 418, 435, 438, 442, 444, 451, 452, 467, 472, 496, 511, 514, 515, 516, 518, 526, 529, 532, 534, 535, 536, 538, 539, 545, 551, 557, 558, 591, 592, 630, 631, 635, 642, 643, 646, 647, 664, 665, 667, 678, 686, 687, 688, 690, 691, 692, 694, 703, 706, 708, 712, 714, 716, 719, 720, 721, 723, 752, 753, 755, 756, 771, 775, 785, 786, 789, 790, 828, 829, 836, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 870, 879, 880, 907, 908, 976, 977, 981, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1005, 1023, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "j0rd1smit": 1042, "ja": [410, 1037], "jaccard": [281, 404, 448, 455, 697, 701, 717, 726, 731, 735, 775, 776, 777, 793, 990, 1038, 1039], "jaccard_scor": [281, 701, 726, 731, 793, 987, 1039, 1042], "jaccard_similarity_scor": [1032, 1034, 1039], "jaccarddist": 697, "jack": [1032, 1035, 1043, 1044, 1045, 1046], "jacklangerman": [1038, 1039], "jackman": 1031, "jackmartin": 1036, "jackson": [1036, 1037, 1039], "jacob": [0, 2, 1035, 1036, 1037], "jacobi": 1045, "jacobsen": 1033, "jacopo": [1038, 1039], "jacqu": [1031, 1033], "jaehong": 1040, "jaehyun": 1042, "jaewon": 1038, "jai": [1040, 1044], "jaidev": 1035, "jaim": 1040, "jain": [1036, 1037, 1038, 1042, 1044, 1045], "jair": 1037, "jake": [0, 2, 11, 158, 200, 220, 248, 288, 296, 1006, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1044], "jakemick": 1032, "jakevdp": [288, 296], "jakhar": 1042, "jakirkham": [1037, 1038, 1039, 1045, 1046], "jakub": 1047, "jakubek": [1043, 1044], "jalali": [0, 1, 65, 347, 395, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "jalexand3r": 1044, "jamaoui": [1038, 1039, 1042], "jame": [0, 377, 411, 829, 988, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1047], "jamestwebb": [1032, 1033], "jami": 1038, "jamieson": 976, "jan": [0, 1, 24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 200, 234, 278, 878, 1030, 1033, 1034, 1035, 1036, 1038, 1039, 1042, 1046], "jana": 1040, "janet": 377, "jane\u017e": [1031, 1032], "janfidor": [1045, 1046], "janhang": 1040, "janin": 1037, "janna": 1036, "jannik": 1043, "janso": 1030, "jansson": [1033, 1045], "januari": [378, 380, 1030, 1031, 1040, 1042, 1045, 1047], "janvanrijn": [1038, 1039], "jaqu": [0, 2, 31, 45, 51, 53, 73, 89, 90, 182, 195, 196, 197, 222, 343, 346, 1030, 1031, 1032, 1033], "jardim": 1043, "jare": 1045, "jarfa": 1036, "jarir": 1043, "jarkko": 694, "jarosch": 1032, "jaroslaw": 1037, "jarrod": [0, 2, 1039, 1046, 1047], "jarvelin": [723, 753, 987], "jaskowiak": 444, "jason": [5, 412, 533, 895, 1036, 1038, 1042, 1045], "jatin": [1034, 1036], "jauhar": 1044, "jauvin": 1031, "java": [407, 440, 1007], "javascript": 1007, "javier": 1034, "jawahar": 979, "jax": 1047, "jay": 1037, "jaya": 1044, "jayaratn": [1041, 1042, 1045, 1046], "jayratn": 1042, "jayzed82": 1037, "jb": [1046, 1047], "jbdelafoss": 1037, "jbirch": [407, 440], "jblackburn": 1036, "jc": [1037, 1038], "jdcaballero": 1034, "jdethuren": [1038, 1039], "je": 1044, "jean": [1030, 1033, 1034, 1035, 1036, 1037, 1043], "jeann": 1044, "jeanselm": 1040, "jeb": 1038, "jeevan": 1042, "jeff": [1034, 1036, 1043, 1044], "jeffrei": [1033, 1036], "jeffrey04": [1035, 1036], "jelfner": 1044, "jell": 1033, "jen": [656, 1038], "jen09": 412, "jenatton": 412, "jenni": 1044, "jennif": 1043, "jensen": [1036, 1042], "jeong": 1040, "jeremi": [1012, 1035, 1036, 1037, 1038, 1041, 1042], "jeremiedbb": [1038, 1039, 1040], "jeremynixon": 1036, "jeroen": 1036, "jeroenpeterbo": 1042, "jeroko": 1037, "jeromedock": 1040, "jerphanion": [0, 1, 1042, 1043, 1044, 1045, 1046, 1047], "jerryzhu": 894, "jesper": 1040, "jess": [830, 988, 1043], "jess010": 1033, "jessica": 1036, "jessicakk0711": 1046, "jesu": [19, 351, 352], "jet": 67, "jevnik": 1035, "jewalikar": 1036, "jf": 1039, "jfraj": 1035, "jha": [1034, 1040, 1044], "jhay": 1042, "jhm": [24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234], "jhun": 472, "jia": 1036, "jiacheng": 1037, "jiali": 1035, "jian": 407, "jianbo": [407, 450, 460, 689], "jiang": [405, 1034, 1041], "jianzhu": 1043, "jiawei": [1046, 1047, 1048], "jiaxiang": 1042, "jie": [1038, 1039, 1042], "jiefangxuanyan": 1043, "jigna": 1042, "jihan": 1044, "jill": 1036, "jim": 1032, "jim0421": 1042, "jimenez": [1043, 1044], "jimmi": [856, 857, 991, 1036, 1038], "jim\u00e9nez": [0, 370, 1038, 1041, 1042, 1043, 1044, 1045], "jin": [637, 1041, 1042], "jindal": 1042, "jinkun": 1038, "jiongyan": 1038, "jiquan": 991, "jirka": 1044, "jiten": 1045, "jitendra": [407, 450, 460, 689], "jitter": [111, 648, 652, 1041], "jiyuan": 1036, "jjabl": 1038, "jjmistri": 1041, "jk": 984, "jkarolczak": 1045, "jkleint": [1037, 1038], "jl": [232, 892], "jmlr": [0, 407, 664, 665, 674, 702, 983, 1002], "jmlr_2014": 690, "jmontoyam": 1037, "jnboehm": 1043, "jnt": 411, "joaak": [1038, 1039], "joan": [1037, 1038, 1039, 1040], "joanna": 1040, "joaquin": 1042, "job": [119, 127, 169, 248, 380, 384, 388, 414, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 466, 470, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 600, 605, 606, 608, 632, 637, 655, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 858, 861, 894, 895, 897, 953, 1012, 1016], "joblib": [42, 54, 72, 117, 283, 316, 375, 378, 380, 383, 389, 392, 394, 397, 400, 401, 406, 408, 418, 435, 439, 442, 443, 444, 446, 448, 450, 455, 456, 459, 462, 465, 470, 506, 507, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 845, 847, 849, 850, 852, 853, 858, 859, 860, 861, 894, 895, 953, 954, 955, 957, 972, 987, 1008, 1030, 1031, 1033, 1035, 1037, 1038, 1039, 1041, 1042, 1045, 1047, 1048], "joblib_start_method": 392, "jochen": 1032, "jock": 70, "joe": 1035, "joei": 1046, "joel": [0, 1, 72, 395, 415, 533, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "johann": [1032, 1033, 1038, 1040, 1041, 1044], "johanna": 81, "johannah": 1036, "johanwork": 1043, "john": [377, 415, 534, 706, 732, 766, 874, 901, 902, 904, 905, 977, 983, 987, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1043, 1045, 1046, 1047], "johnathanpi": [1045, 1046], "johnson": [55, 166, 227, 243, 305, 309, 372, 406, 487, 500, 875, 887, 891, 892, 893, 997, 1004, 1009, 1025, 1038, 1044, 1046], "johnson_lindenstrauss_min_dim": [232, 999, 1031], "johnston": [148, 377, 983, 1039], "johnstott": 1038, "johnthagen": 1045, "johnwon": 309, "join": [11, 12, 19, 55, 163, 217, 260, 307, 375, 395, 461, 1011, 1023, 1030, 1038], "joint": [124, 166, 170, 177, 183, 185, 186, 187, 188, 198, 218, 220, 408, 609, 650, 660, 690, 834, 835, 836, 837, 838, 899, 983, 984, 988, 992, 994, 998, 1009, 1030], "jointli": [193, 267, 406, 407, 412, 983], "joli": [0, 2, 1031, 1032, 1033, 1034, 1035, 1036], "jon": [351, 1037, 1040, 1041, 1043, 1044, 1047], "jona": [105, 1042, 1047], "jonatan": 1038, "jonathan": [375, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1046], "joncral": 1036, "jone": [0, 2, 375, 1030], "jong": 1037, "joona": 1030, "jordal": 1036, "jordan": [407, 412, 689, 794, 1040, 1041, 1044, 1045], "jordi": 1036, "jorg": [656, 1033, 1042, 1044], "jori": [0, 1, 1037, 1038, 1039, 1042, 1043], "jose": [148, 377, 656, 987, 1038, 1040], "joseph": [1033, 1034, 1035, 1036, 1042, 1044, 1045], "josephsalmon": [1037, 1038, 1039], "josh": [415, 1037], "joshi": [1036, 1038, 1044, 1047, 1048], "joshua": [320, 375, 1032, 1033, 1035, 1036, 1042, 1045, 1046], "joshuakennethjon": 1039, "jos\u00e9": [720, 1033, 1043], "jotasi": 1038, "joudet": [1037, 1038], "journal": [0, 81, 170, 260, 266, 278, 374, 375, 377, 405, 407, 409, 414, 450, 460, 471, 532, 539, 625, 633, 643, 687, 690, 691, 703, 713, 728, 731, 732, 755, 756, 783, 824, 829, 875, 887, 976, 977, 981, 983, 984, 985, 988, 994, 999, 1001, 1002], "jovan": [1044, 1045], "joydeep": 407, "jo\u00e3o": 1045, "jo\u00ebl": 1038, "jpeg": [374, 375, 491, 492], "jpfrancoia": [1036, 1037], "jpg": [48, 504, 582, 585], "jpm": 12, "jpmml": 1007, "jpmorgan": [12, 1012], "jr": 983, "jrenni": 836, "jrfiedler": 1036, "jschendel": [1037, 1038], "jschuerz": 1044, "json": [374, 380, 397], "jth": [771, 775], "juan": [0, 370, 1030, 1041, 1042, 1043, 1044, 1045], "juanfe88": 1045, "judg": [58, 205, 407, 1018], "judgment": [251, 987], "judithabk6": 1041, "juergen": [1040, 1045], "jul": 269, "juli": [148, 377, 416, 731, 880, 997, 1033, 1037, 1038, 1039], "julia": [407, 715, 734, 792], "julian": [1037, 1038, 1048], "juliankahnert": 1036, "juliaschoepp": [1045, 1046], "juliathebrav": 1036, "julien": [0, 1, 656, 983, 1012, 1030, 1033, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047], "juliet": 1038, "julietcl": 1038, "julio": 1043, "julyrashchenko": 1043, "jumon": 1041, "jump": [4, 200, 305, 377, 380, 415, 878], "jumpi": 415, "june": [407, 984, 1036, 1046], "jung": [1037, 1041, 1045], "jungkook": 1035, "jungl": 984, "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 381, 382, 408, 466, 897, 1003, 1007, 1008, 1041, 1044], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "jurgen": 1012, "juri": 564, "jurman": 740, "just": [4, 13, 31, 70, 86, 95, 117, 121, 127, 148, 189, 196, 221, 233, 260, 267, 271, 283, 299, 338, 351, 352, 360, 362, 375, 379, 380, 381, 382, 384, 385, 388, 392, 393, 394, 404, 407, 408, 411, 414, 416, 419, 466, 531, 533, 540, 544, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 577, 582, 608, 609, 644, 650, 655, 656, 658, 660, 664, 665, 666, 674, 675, 676, 802, 818, 848, 856, 857, 976, 983, 986, 987, 988, 991, 995, 997, 1001, 1008, 1021, 1030, 1034, 1036, 1038, 1042, 1046], "justglow": 1039, "justif": 674, "justifi": [380, 386, 405, 563], "justin": [1032, 1038, 1042], "jvm": 1043, "jygerardi": [1045, 1046], "j\u00e9r\u00e9mie": [0, 1, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "j\u00e9r\u00f4me": [1039, 1040, 1041, 1047], "j\u00eann": 1036, "j\u00f6rg": [407, 448, 455, 1038], "j\u00f6rn": 1037, "j\u00f8rgensen": [983, 1047], "k": [6, 11, 12, 15, 17, 19, 24, 26, 30, 31, 36, 37, 38, 40, 42, 46, 49, 50, 53, 55, 56, 60, 63, 65, 68, 74, 75, 80, 90, 91, 92, 95, 98, 101, 102, 111, 113, 120, 124, 128, 130, 131, 133, 134, 138, 140, 144, 145, 148, 152, 154, 155, 159, 160, 164, 166, 169, 170, 171, 172, 179, 181, 182, 184, 193, 196, 201, 203, 211, 213, 232, 234, 236, 237, 238, 245, 248, 256, 260, 261, 263, 264, 269, 270, 273, 283, 285, 288, 289, 290, 291, 292, 294, 295, 296, 306, 307, 308, 309, 312, 315, 319, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 350, 351, 353, 354, 360, 362, 367, 374, 375, 377, 380, 388, 389, 392, 394, 398, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 438, 441, 444, 445, 446, 447, 448, 449, 450, 451, 457, 458, 460, 467, 470, 486, 500, 502, 504, 510, 521, 529, 535, 539, 542, 543, 544, 547, 548, 551, 553, 555, 556, 557, 579, 587, 588, 589, 590, 592, 593, 594, 596, 597, 598, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 629, 637, 638, 646, 648, 649, 651, 652, 653, 654, 656, 657, 661, 662, 663, 664, 665, 667, 677, 678, 680, 681, 682, 683, 684, 686, 689, 693, 694, 702, 703, 706, 715, 723, 734, 740, 753, 755, 756, 758, 763, 766, 771, 772, 773, 774, 776, 790, 791, 792, 794, 795, 797, 801, 803, 804, 805, 808, 811, 812, 814, 815, 817, 823, 834, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 860, 864, 865, 866, 870, 871, 872, 874, 875, 879, 887, 892, 906, 914, 922, 931, 936, 961, 976, 977, 979, 980, 981, 983, 984, 985, 986, 989, 991, 992, 993, 995, 1000, 1001, 1002, 1003, 1007, 1009, 1018, 1024, 1025, 1030, 1031, 1032, 1033, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047], "k0": 981, "k1": [417, 619, 622], "k1__": 417, "k1__constant_valu": 155, "k1__k1": 417, "k1__k1__constant_valu": 417, "k1__k1__constant_value_bound": 417, "k1__k2": 417, "k1__k2__length_scal": [157, 417], "k1__k2__length_scale_bound": 417, "k2": [417, 619, 622], "k2__": 417, "k2__length_scal": 417, "k2__length_scale_bound": 417, "k_": [404, 417, 614, 617, 619, 622, 771, 979, 997], "k_1": [417, 619, 622], "k_2": [417, 619, 622], "k_best": [590, 896, 1000, 1047], "k_diag": [610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "k_fit_all_": 865, "k_fit_rows_": 865, "k_fold": [138, 1018], "k_gradient": [610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623], "k_init": [441, 457], "k_mean": [64, 389, 394, 1022, 1038, 1046], "k_means_cluster_cent": 64, "k_means_elkan": 1038, "k_means_iris_3": 45, "k_means_iris_8": 45, "k_means_iris_bad_init": 45, "k_means_label": 64, "k_new": 865, "k_ret": [839, 840], "k_true": [839, 840], "ka00ri": [1045, 1046], "kachaiev": 1047, "kaczmarzyk": 1047, "kadatatlu": 1043, "kadota": 1044, "kaggl": [132, 393], "kahni": 1042, "kai": [377, 561, 993, 1037], "kaicheng": 1034, "kaichogami": 1036, "kailasa": [1044, 1045], "kaim": [856, 857], "kaiser": [412, 530], "kakati": 1045, "kalli": [1038, 1039], "kalyan": 1036, "kamalakerdadi": [1035, 1036], "kamar": 1038, "kamchyev": 1047, "kamel": 1030, "kamishima": [1036, 1037], "kamm": 987, "kanai": [1036, 1037, 1038], "kanazu": [1045, 1046], "kang": [1038, 1040], "kania": [1045, 1046], "kanika": 1040, "kanishk": 1045, "kanissh": 1045, "kanji": 1043, "kanniah": [1033, 1034], "kansal": 1036, "kapadni": 1045, "kapeln": [170, 994], "kapoor": [1038, 1039], "kappa": [534, 714], "kapur": 1037, "kar": 1036, "karan": [1037, 1038, 1039], "karayev": 1032, "karbownik": 1043, "karen": 1043, "karger": [836, 989], "karhunen": 532, "karin": [625, 977], "karl": 1038, "karlo": [1047, 1048], "karnofski": 1037, "karnowski": 1042, "karol": 1033, "kartik": 1042, "karypi": 407, "kaseorg": 1040, "kashif": 1035, "kasim": 1034, "kaski": 694, "kasper": 1038, "kassa": [1045, 1046], "kastner": [0, 2, 99, 1032, 1033, 1034, 1041, 1042], "kat": 1037, "kataev": [1038, 1039], "kataki": [718, 731, 737, 987], "katarina": [1040, 1042], "katheleen": 374, "kathi": [1037, 1040], "kathleen": 1037, "kathryn": 1041, "kati": 1037, "katotten": 1044, "katrin": [1038, 1039], "katrina": [125, 1041], "katriopla": 1038, "katyal": 1040, "katz": [1035, 1042, 1043], "kaufmann": [999, 1003, 1042], "kaushik": [1037, 1044, 1045, 1046, 1048], "kaushik94": 1033, "kawamura": 1043, "kawwa": 1043, "kayawari": 1043, "kaylani2": 1042, "kaynak": 377, "kazmar": 1034, "kb": [71, 169, 170], "kbest": [72, 590], "kbin": [312, 320], "kbinsdiscret": [4, 53, 75, 92, 166, 179, 199, 217, 239, 293, 304, 307, 312, 313, 320, 358, 510, 655, 862, 878, 908, 997, 1009, 1038, 1042, 1043, 1044, 1046], "kbinsdiscretizer__n_bin": 307, "kcachegrind": 383, "kd": [288, 407, 413, 990, 1038, 1039, 1040], "kd_tree": [418, 442, 444, 448, 455, 686, 687, 841, 842, 843, 844, 845, 847, 849, 850, 851, 990, 1043, 1047], "kdd": [175, 375, 405, 435, 999], "kdd06_rp": 892, "kddcup": [238, 373, 490, 1025], "kddcup99": [375, 490], "kde": [168, 169, 278, 287, 288, 296, 413, 844], "kdt": 990, "kdtree": [444, 448, 455, 686, 687, 839, 841, 842, 843, 844, 845, 847, 849, 850, 851, 1032, 1034, 1038, 1042, 1043, 1046, 1047], "ke": [414, 1041, 1042], "kearn": 1033, "keat": [1045, 1046], "keep": [0, 6, 13, 27, 42, 75, 98, 100, 117, 127, 147, 163, 168, 169, 170, 171, 172, 183, 199, 200, 201, 207, 217, 250, 255, 258, 309, 310, 318, 326, 338, 351, 352, 356, 362, 366, 367, 372, 380, 384, 393, 394, 405, 407, 408, 409, 410, 411, 412, 430, 448, 463, 480, 481, 482, 483, 491, 492, 532, 538, 539, 542, 545, 552, 554, 556, 558, 560, 563, 566, 568, 593, 596, 598, 601, 609, 632, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 674, 675, 676, 677, 706, 814, 832, 833, 842, 850, 856, 857, 895, 900, 902, 905, 908, 910, 983, 988, 992, 995, 997, 1008, 1011, 1012, 1014, 1019, 1021, 1023, 1025, 1030, 1035, 1038, 1039, 1043, 1044, 1046, 1048], "keep_empty_featur": [625, 626, 628, 977, 1045], "keerti": 1045, "kegl": [24, 1034], "kei": [8, 10, 13, 17, 19, 42, 117, 121, 132, 163, 168, 217, 235, 238, 241, 261, 263, 264, 316, 317, 318, 319, 320, 321, 322, 368, 373, 382, 385, 386, 387, 392, 394, 395, 397, 398, 407, 408, 411, 417, 462, 470, 559, 560, 565, 566, 567, 568, 586, 589, 592, 615, 624, 630, 632, 657, 709, 796, 799, 800, 808, 810, 822, 858, 859, 914, 924, 952, 995, 1008, 1023, 1027, 1036, 1042, 1043, 1045, 1046, 1048], "keith": [351, 1030, 1035], "kekalainen": [723, 753, 987], "kelkar": [1037, 1038, 1040], "kelleh": [706, 987], "kelleher2015": 987, "kellei": [375, 1032, 1033], "keller": 1042, "kellogg": 12, "kellycarmodi": 1040, "kemal": [0, 20, 21, 1032, 1033], "kemaleren": [20, 21], "kemenad": 1041, "kemk": 1041, "ken": [377, 1023, 1032, 1039], "ken4git": 1044, "kendal": 1045, "kendrick": 1042, "kennedi": [1037, 1040, 1047], "kennel": 1041, "kenneth": [999, 1030, 1031, 1036, 1037, 1044, 1045], "kenni": 1042, "kensuk": 1040, "kent": 19, "kenta": 1033, "kento": [1045, 1046], "kept": [27, 250, 283, 346, 374, 384, 401, 417, 494, 533, 536, 538, 539, 545, 595, 608, 609, 617, 618, 642, 693, 794, 795, 920, 997, 1038, 1039], "kera": [392, 1007], "kerimov": [1037, 1038], "kernal": 100, "kernc": [1030, 1044, 1045], "kernel": [3, 6, 9, 10, 11, 16, 30, 31, 51, 57, 74, 86, 94, 96, 104, 106, 133, 140, 146, 150, 152, 153, 154, 155, 158, 161, 163, 176, 181, 182, 200, 208, 213, 227, 228, 236, 240, 243, 254, 258, 260, 262, 265, 266, 270, 274, 275, 284, 289, 290, 294, 297, 310, 312, 318, 327, 330, 333, 335, 336, 338, 339, 340, 341, 343, 344, 347, 349, 362, 366, 369, 372, 382, 392, 394, 405, 407, 408, 411, 414, 415, 430, 438, 446, 450, 459, 460, 463, 480, 481, 482, 489, 494, 496, 500, 502, 512, 531, 532, 533, 539, 542, 552, 554, 556, 558, 560, 563, 566, 568, 591, 592, 608, 609, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 674, 675, 676, 677, 686, 688, 689, 690, 693, 732, 755, 756, 758, 763, 764, 771, 772, 773, 774, 796, 802, 807, 810, 825, 827, 832, 833, 839, 840, 842, 844, 850, 857, 859, 860, 865, 869, 871, 872, 874, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 908, 910, 976, 982, 983, 984, 987, 988, 990, 993, 1000, 1001, 1009, 1010, 1014, 1018, 1019, 1024, 1025, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "kernel_": [151, 152, 153, 154, 155, 156, 157, 158, 160, 608, 609], "kernel__length_scal": 151, "kernel__period": 151, "kernel_approxim": [4, 163, 166, 174, 175, 176, 213, 228, 233, 317, 369, 675, 755, 756, 865, 979, 1009, 1014, 1031, 1037, 1047], "kernel_dens": [839, 840], "kernel_label": 345, "kernel_metr": [637, 638, 639, 640], "kernel_param": [450, 533, 637, 641], "kernel_pca": [5, 100, 408], "kernel_pca_": 686, "kernel_pca_back_proj_ax": 100, "kernel_pca_proj_ax": 100, "kernel_ridg": [151, 234, 369, 988, 1034], "kernel_ridge_tun": 151, "kernel_svm": 233, "kernel_svm_scor": 233, "kernel_svm_tim": 233, "kernelcenter": [403, 997, 1040, 1044, 1046, 1047], "kerneldens": [287, 288, 296, 413, 1032, 1038, 1039, 1043, 1044, 1045], "kernelpca": [5, 408, 412, 531, 532, 539, 542, 686, 688, 690, 865, 997, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "kernelridg": [100, 151, 234, 670, 980, 988, 1034, 1047], "kertesz": 1044, "keshat": [664, 665, 983], "keshavan": 1040, "kesshi": [1040, 1041], "kevad": 1040, "kevin": [641, 1032, 1034, 1036, 1037, 1040, 1041, 1042, 1044, 1045, 1047], "kevlani": 1038, "keyerror": [914, 1040], "keyword": [351, 374, 380, 382, 385, 387, 394, 407, 418, 421, 436, 442, 443, 448, 450, 455, 462, 465, 494, 501, 533, 536, 538, 557, 558, 565, 566, 567, 568, 618, 626, 629, 630, 637, 641, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 686, 690, 695, 696, 697, 698, 699, 700, 771, 775, 776, 777, 778, 789, 790, 802, 818, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 859, 863, 931, 954, 976, 984, 987, 990, 1000, 1030, 1034, 1036, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048], "kf": [411, 801], "kfold": [54, 117, 123, 138, 255, 265, 362, 411, 435, 470, 565, 566, 592, 600, 645, 649, 651, 653, 659, 661, 663, 671, 796, 799, 800, 802, 804, 806, 810, 815, 817, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 880, 1018, 1031, 1032, 1033, 1035, 1036, 1038, 1040], "khaja": 1045, "khan": [1045, 1046], "khandelw": 1042, "khanduja": 1033, "khant": 1045, "kharsa": 1044, "khedkar": 1044, "khine": 1044, "kho": 1045, "khoo": 1042, "khosasi": 1043, "khosrow": 987, "khoual": 1043, "khwaja": 1045, "ki": 987, "kian": [115, 1035, 1045, 1046, 1047], "kid": 997, "kieker": [1038, 1039], "kielczewski": [203, 1036], "kie\u00dfl": 1041, "kilian": [415, 1045, 1046], "kill": [351, 392], "killer": [380, 1012], "kilobyt": 53, "kilomet": 761, "kim": [983, 1038, 1039, 1040, 1044], "kimayoung": 1044, "kimberli": 12, "kimbinyi": 1042, "kind": [4, 9, 12, 13, 24, 25, 75, 103, 117, 132, 143, 169, 170, 250, 254, 256, 269, 312, 317, 320, 335, 338, 351, 367, 368, 373, 375, 380, 382, 386, 392, 393, 405, 407, 410, 411, 412, 414, 415, 416, 486, 487, 501, 506, 507, 519, 522, 586, 630, 631, 699, 928, 983, 989, 994, 1003, 1033, 1042, 1044, 1045, 1046], "kindli": 0, "king": 924, "kingjr": 1036, "kingma": [856, 857, 991], "kink": 188, "kiragu": 1042, "kiran": 1042, "kirandevraj": 1045, "kiril": [1037, 1038, 1040, 1042], "kirkbi": [1037, 1038], "kirkham": [1035, 1036, 1038], "kirthi": 1040, "kishan": 1047, "kishimoto": 1042, "kishor": 1043, "kislovskii": 1047, "kit": 392, "kitchen": [639, 979], "kj": [374, 989], "kjell": 1036, "kk": 987, "kl": [412, 984, 1038], "kl_divergence_": [690, 1037], "klarup": 1037, "klass": 65, "klau": [412, 533, 865], "kleczewski": [281, 1037, 1038], "kleiber": 1044, "klevebr": 1038, "klima": 1045, "klopfer": 1039, "kluge": [1045, 1046], "kluger": [404, 449, 511], "klusacek": 987, "km": [61, 319, 352], "kmatt10": 1043, "kmb": 12, "kmean": [19, 20, 36, 37, 43, 45, 46, 48, 50, 53, 57, 58, 61, 65, 68, 166, 248, 251, 308, 319, 352, 389, 398, 407, 438, 441, 446, 447, 450, 460, 510, 708, 789, 790, 794, 795, 864, 990, 997, 1008, 1009, 1022, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "kmeans_estim": 95, "kmeans_model": 407, "kmeans_plusplu": [59, 407, 1042, 1047], "kmitl": 238, "kmode": 1007, "kms15": [1038, 1039], "knee": 407, "kneighbor": [310, 319, 841, 842, 843, 845, 847, 990, 1034, 1039, 1043, 1044, 1045, 1046], "kneighbors_graph": [39, 44, 62, 67, 283, 394, 407, 439, 443, 693, 841, 842, 843, 845, 847, 849, 850, 851, 853, 990, 1030, 1034, 1039], "kneighborsclassifi": [31, 133, 139, 285, 286, 291, 292, 310, 317, 319, 351, 414, 600, 842, 846, 847, 848, 849, 850, 988, 990, 1021, 1030, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "kneighborsregressor": [163, 237, 295, 319, 414, 568, 841, 847, 849, 850, 988, 990, 1030, 1032, 1034, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "kneighborstransform": [283, 285, 315, 690, 851, 990, 1040, 1044, 1045], "knew": 1022, "knight": 311, "knit": 1017, "knn": [114, 133, 139, 163, 286, 291, 292, 295, 310, 317, 327, 351, 414, 600, 848, 894, 895, 990, 1000, 1021, 1036], "knn__weight": 286, "knn_graph": 39, "knn_impute_scor": 164, "knnimput": [164, 315, 625, 628, 977, 1040, 1041, 1044, 1045, 1046, 1047], "knnquerybatch": 283, "knot": [4, 200, 318, 878, 997, 1043], "know": [53, 66, 145, 148, 151, 160, 169, 217, 235, 236, 260, 278, 281, 319, 325, 346, 352, 366, 380, 392, 398, 401, 407, 410, 411, 412, 415, 498, 502, 508, 644, 650, 656, 657, 723, 753, 796, 810, 884, 885, 887, 888, 889, 890, 907, 908, 909, 910, 976, 986, 987, 988, 990, 999, 1036, 1037, 1040, 1042], "knowledg": [57, 119, 127, 169, 216, 238, 260, 369, 375, 380, 383, 386, 393, 394, 407, 411, 414, 418, 442, 509, 553, 554, 561, 718, 733, 737, 780, 828, 987, 988, 999, 1023], "known": [11, 17, 25, 27, 39, 49, 57, 58, 81, 103, 104, 132, 156, 158, 164, 183, 199, 200, 217, 228, 260, 262, 269, 292, 296, 306, 318, 325, 335, 342, 352, 368, 375, 377, 378, 380, 383, 388, 392, 394, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 436, 461, 480, 482, 496, 506, 507, 542, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 586, 587, 589, 592, 607, 620, 631, 656, 657, 670, 680, 681, 692, 702, 708, 711, 716, 726, 740, 752, 754, 792, 828, 834, 835, 836, 837, 838, 841, 846, 849, 855, 883, 907, 908, 909, 910, 977, 979, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 997, 1002, 1003, 1014, 1019, 1021, 1022], "known_val": 625, "knox": 1042, "knp": 625, "knr": 414, "knyazev": [46, 407, 450, 460, 693, 1040, 1043, 1044], "ko": [12, 26, 152], "kobak": [690, 1043], "kobaski": 1043, "kobayashi": [1042, 1043], "kober": 1038, "kobi": 732, "koch": [1032, 1038, 1039, 1041, 1042], "kocot": 1041, "koehler": 1034, "koen": [1038, 1039], "koenker": [720, 983], "koh": [983, 1012], "kohavi": 411, "kohli": 1047, "koi8": 415, "koivunen": 81, "kokhlikyan": [225, 1037, 1038], "koki": 1042, "koko": [1038, 1044, 1045], "kolawol": 1043, "kolganov": 1035, "kolh": 1032, "kolstad": 19, "komey": [1044, 1045], "kommireddi": 1044, "kondratyev": 1044, "kong": 1043, "konstantin": [1035, 1036, 1037], "konstantino": [1038, 1047], "konwar": 1041, "koonc": 1038, "korba": 375, "korean": 1007, "kornel": [203, 1036], "kornev": 1045, "korobko": 1047, "korobov": [1031, 1032, 1033, 1036, 1037], "korolev": 1040, "kosic": 1042, "kosobrodov": 1038, "kossaifi": [1030, 1034, 1035], "kossen": [1045, 1046], "kossori": [1038, 1039], "kostelac": [1045, 1046], "kot271828": 1043, "kothari": 1041, "kotwalia": [1038, 1039], "koumenti": 1045, "koushik": 1044, "koustav": 1047, "kovalevskyi": 1036, "kowalski87": 1033, "koyama": 1044, "kozachenko": [605, 606], "kozynet": [1042, 1044], "kpca": [531, 532, 533, 1024, 1025, 1030], "kr": [234, 260, 1044], "kr_fit": 234, "kr_predict": 234, "kraig": 1045, "kranthi": 1044, "kranz": 1012, "kraskov": [605, 606], "krasouli": [1037, 1038, 1039, 1040, 1042, 1043], "kratzwald": 1036, "krawczyk": 1044, "krawutschk": [1045, 1046], "krell": [1034, 1036], "kriegel": [407, 418, 442, 448, 455, 845, 993], "krinitsyn": 1038, "krishna": [1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045], "krishnachaitanya9": 1041, "krishnakalyan3": 1036, "krishnan": 1040, "krivich": [1036, 1037, 1039], "kronovet": 1035, "krr": [234, 641, 980], "krsto": 1048, "krum": [1042, 1044], "krumetoft": 1044, "krump": 1035, "kruskal": [633, 688, 692, 984], "krzeminski": 1037, "krzysztof": 374, "ksemb": 1038, "kshitij": [1045, 1046, 1048], "ksvd": [662, 683, 684, 983], "ksvm": 175, "ksvm_score": 175, "ksvm_time": 175, "kth": [19, 817], "ku": [1034, 1035], "kuai": [1038, 1039], "kubin": 1041, "kuhlmann": [1037, 1038], "kulbear": 1039, "kulkarni": 1038, "kull": [405, 987], "kullback": [15, 220, 412, 536, 538, 545, 690, 984, 1037], "kulsinski": [448, 455, 697, 775, 776, 777], "kulsinskidist": [697, 1046], "kumar": [0, 2, 42, 148, 181, 375, 407, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "kumaresshan": [1038, 1039, 1042], "kumawat": 1044, "kund": [1046, 1047], "kunj": 1043, "kuo": 1034, "kurumeyuta": 1043, "kurz": [1044, 1045], "kusanagi": [1041, 1043], "kusanagi2": 1042, "kushal": [1038, 1039], "kushan": [109, 1047], "kushansharma1": 109, "kushwah": [1046, 1047], "kushwaha": 1042, "kusterl": 1040, "kuth": 1036, "kvam": [1031, 1033], "kvle": 1036, "kw_arg": [116, 863, 997, 1036], "kwarg": [41, 98, 235, 382, 387, 421, 425, 429, 436, 440, 446, 448, 462, 467, 533, 536, 538, 561, 615, 629, 644, 645, 650, 651, 658, 659, 660, 661, 675, 679, 682, 696, 697, 698, 700, 739, 839, 840, 858, 859, 863, 903, 914, 947, 955, 1037, 1041, 1043, 1047], "kwd": [626, 768, 771, 775, 778, 789, 790], "kwei": [15, 1033, 1034, 1035, 1036, 1037], "kxytim": 1043, "kybernetika": 377, "kye": 1038, "kyeongpil": 1038, "kyle": [0, 2, 99, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042], "kyledrogo": 1038, "kyler": 1035, "k\u00e4rkk\u00e4inen": 983, "l": [0, 7, 14, 17, 40, 46, 47, 66, 67, 81, 114, 148, 171, 191, 194, 203, 208, 209, 265, 266, 267, 278, 300, 309, 346, 377, 378, 386, 388, 404, 405, 407, 411, 412, 414, 417, 472, 514, 515, 516, 536, 538, 545, 553, 554, 555, 556, 563, 564, 588, 605, 606, 608, 609, 613, 617, 620, 621, 632, 646, 647, 656, 667, 670, 672, 678, 685, 687, 690, 691, 703, 713, 722, 723, 728, 753, 783, 836, 870, 907, 908, 909, 910, 976, 981, 983, 984, 987, 989, 990, 991, 995, 999, 1001, 1003, 1022, 1033, 1038, 1042, 1043, 1044, 1045, 1047], "l1": [3, 7, 16, 17, 30, 40, 66, 82, 85, 166, 168, 177, 178, 184, 185, 186, 187, 188, 193, 194, 203, 204, 210, 214, 218, 230, 261, 283, 301, 318, 389, 392, 406, 407, 409, 412, 439, 443, 448, 455, 462, 467, 468, 469, 470, 471, 472, 473, 474, 476, 494, 500, 502, 529, 535, 536, 537, 538, 540, 541, 545, 546, 556, 563, 587, 588, 589, 595, 642, 643, 644, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 670, 674, 675, 676, 677, 679, 686, 732, 759, 765, 770, 775, 776, 777, 782, 810, 817, 825, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 871, 879, 886, 899, 900, 906, 908, 910, 922, 969, 983, 985, 987, 990, 997, 1001, 1002, 1003, 1009, 1021, 1035, 1037, 1043, 1046], "l1_color": 210, "l1_contour": 210, "l1_distanc": 1030, "l1_min_c": [192, 983, 1002, 1030], "l1_plot": 215, "l1_ratio": [7, 10, 15, 183, 184, 190, 268, 273, 366, 392, 412, 536, 538, 545, 644, 645, 650, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 983, 1001, 1031, 1033, 1035, 1042, 1044], "l1_ratio_": [645, 657, 659], "l1_ratios_": 657, "l2": [14, 30, 40, 82, 85, 166, 168, 169, 177, 178, 183, 184, 190, 192, 194, 195, 199, 204, 210, 214, 215, 217, 218, 261, 273, 283, 305, 312, 329, 351, 352, 382, 389, 392, 407, 409, 412, 414, 415, 439, 443, 448, 455, 522, 536, 538, 545, 556, 559, 560, 563, 587, 588, 589, 641, 644, 645, 646, 647, 650, 655, 656, 657, 658, 659, 660, 661, 666, 667, 670, 674, 676, 678, 679, 684, 685, 686, 732, 747, 758, 759, 775, 776, 777, 810, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 856, 857, 871, 879, 886, 899, 900, 904, 905, 906, 908, 910, 970, 976, 980, 983, 985, 990, 991, 997, 1001, 1003, 1009, 1021, 1023, 1032, 1034, 1035, 1037, 1039], "l2014": 414, "l2_color": 210, "l2_contour": 210, "l2_regular": [318, 414, 559, 560], "l_": [404, 609, 650, 738, 987], "l_i": 997, "l_inf": 17, "l_m": 414, "l_p": [448, 455, 686, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853], "l_x": 14, "la": [0, 1, 191, 207, 283, 285, 307, 308, 311, 377, 1012, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "lab": [0, 375, 466, 534, 897, 1012, 1041], "label": [4, 6, 7, 9, 11, 12, 13, 14, 20, 24, 25, 26, 27, 30, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 85, 86, 89, 91, 92, 97, 99, 101, 102, 103, 104, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 144, 146, 151, 152, 156, 157, 158, 159, 160, 163, 166, 169, 172, 175, 178, 179, 181, 182, 183, 187, 188, 189, 193, 199, 200, 201, 202, 205, 206, 207, 208, 209, 213, 214, 216, 217, 221, 222, 223, 228, 233, 234, 236, 237, 238, 239, 247, 254, 255, 258, 259, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 274, 281, 288, 290, 292, 295, 300, 302, 305, 306, 310, 315, 316, 319, 322, 324, 328, 329, 330, 331, 340, 342, 345, 346, 351, 352, 356, 357, 358, 359, 368, 372, 373, 374, 379, 380, 382, 385, 389, 394, 395, 404, 405, 417, 418, 424, 425, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 463, 467, 485, 486, 487, 491, 492, 493, 494, 500, 501, 506, 507, 510, 512, 513, 517, 520, 521, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 567, 568, 590, 591, 592, 593, 594, 596, 597, 598, 602, 603, 604, 607, 608, 629, 656, 657, 664, 665, 666, 671, 672, 673, 674, 675, 676, 695, 696, 698, 700, 701, 702, 703, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 722, 723, 724, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 740, 751, 752, 753, 754, 779, 780, 781, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 810, 811, 812, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 845, 846, 848, 849, 856, 857, 859, 863, 866, 867, 870, 872, 873, 880, 883, 894, 895, 896, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 919, 924, 925, 950, 951, 958, 976, 983, 984, 988, 989, 990, 991, 993, 994, 997, 1001, 1002, 1003, 1007, 1009, 1010, 1014, 1018, 1019, 1021, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "label1": 394, "label2": 394, "label_a": 269, "label_b": 269, "label_binar": [267, 269, 866, 1034], "label_binarizer_": 828, "label_distributions_": [325, 326, 894, 895, 1041], "label_im": 66, "label_out": 43, "label_pr": [715, 733, 734, 752, 754, 792], "label_prop_model": [894, 895], "label_propag": 1031, "label_ranking_average_precision_scor": [987, 1034, 1038, 1039, 1045], "label_ranking_loss": [987, 1035], "label_spread": 327, "label_tru": [702, 715, 734, 752, 754, 792], "labelbinar": [269, 394, 738, 828, 863, 872, 880, 883, 988, 1014, 1033, 1034, 1035, 1039, 1044], "labelbottom": [135, 260], "labeled_iter_": [328, 896], "labelencod": [394, 567, 873, 998, 1030, 1038, 1045, 1046], "labelkfold": [1035, 1036], "labelleft": 245, "labelpad": 260, "labelpropag": [319, 327, 895, 896, 988, 1000, 1031, 1036, 1037, 1040, 1041, 1042, 1044, 1045, 1046], "labels": [15, 309], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 55, 58, 61, 62, 63, 65, 67, 319, 321, 352, 380, 394, 407, 425, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 708, 1022, 1035], "labels_050": 65, "labels_200": 65, "labels_a": 37, "labels_b": 37, "labels_pr": [407, 702, 703, 712, 713, 715, 728, 733, 734, 752, 754, 783, 792], "labels_random": 48, "labels_tru": [38, 49, 55, 64, 407, 702, 703, 712, 713, 715, 728, 733, 734, 752, 754, 783, 792], "labels_uniqu": 63, "labelshufflesplit": [1035, 1036], "labelspread": [319, 325, 326, 327, 329, 330, 894, 896, 988, 1000, 1031, 1036, 1037, 1040, 1041, 1044, 1045, 1046], "labelspreadingifittedlabelspread": 327, "labex": 0, "labl": 127, "laboratori": [375, 1007], "lacchia": 1037, "lack": [4, 27, 342, 380, 382, 392, 411, 824, 914, 1002, 1044], "lacost": [656, 983], "lacouth": 1043, "lacrosse91": 1043, "lad": 1043, "lag": [3, 4, 16, 124, 127, 166, 201, 217, 264, 494, 560, 699, 739, 742, 743, 745, 787, 817, 821, 822, 825, 1009], "lagacheri": 1034, "lagard": 1033, "lagat": 1040, "lagged_count_": 13, "lagged_count_1d": 13, "lagged_count_1d_1h": 13, "lagged_count_7d": 13, "lagged_count_7d_1h": 13, "lagged_df": 13, "lagged_max_24h": 13, "lagged_max_7d": 13, "lagged_mean_24h": 13, "lagged_mean_7d": 13, "lagged_min_24h": 13, "lagged_min_7d": 13, "lai": [12, 310, 342, 993], "laid": [0, 168, 380], "lakhotia": [1040, 1041], "lakshmi": 1040, "lakshmikanth": 1037, "lakshya": [1038, 1039, 1040], "lal": 895, "lalliacqua": [1040, 1043], "lam": [316, 317, 1041, 1048], "lama": 492, "lamb": [1035, 1043], "lambda": [4, 7, 8, 10, 19, 56, 123, 179, 217, 260, 261, 309, 329, 403, 407, 412, 414, 415, 642, 643, 644, 645, 863, 875, 979, 983, 997, 1018, 1038, 1044], "lambda_": [179, 642, 643, 875, 983, 1037], "lambda_1": [642, 643, 983], "lambda_2": [642, 643, 983], "lambda_i": [983, 997], "lambda_init": [178, 179, 643, 983, 1040], "lambdas_": [309, 875, 1043, 1046], "lami": 1038, "lamond": 1034, "lamp": 1012, "lamu": 1036, "lan": [656, 1045, 1046], "land": [11, 296, 395, 414], "land_mask": 296, "land_refer": [11, 296], "landeau": 1047, "landmark": [876, 888, 997], "landscap": 152, "lane": 1036, "lang": 1023, "langford": [415, 686, 984], "langl": [979, 987, 1001, 1002], "languag": [0, 353, 385, 401, 412, 415, 1001, 1007, 1008, 1012, 1015], "language_level": 381, "lanigan": [310, 1037], "lanl": 17, "lannuzel": 1042, "lanterni": 1044, "lanzani": 1036, "lapack": [366, 367, 378, 530, 533, 539, 686, 1045], "lapack_lit": 386, "lapack_svd_driv": 1045, "laplac": [152, 417, 608, 609, 834, 835, 836, 838, 989], "laplacian": [220, 372, 404, 438, 450, 460, 618, 637, 641, 689, 693, 762, 763, 771, 895, 983, 984, 1000, 1025, 1031, 1036], "laplacian_kernel": [762, 985, 1035], "laptop": [13, 388, 466, 897, 1044, 1045, 1046], "lar": [0, 2, 15, 98, 148, 166, 169, 177, 184, 185, 188, 192, 193, 204, 218, 273, 351, 352, 353, 377, 469, 470, 476, 499, 529, 535, 537, 540, 541, 543, 544, 546, 649, 650, 651, 652, 653, 654, 661, 662, 663, 676, 680, 681, 682, 683, 684, 988, 1009, 1010, 1021, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1043], "laradji": [0, 299, 1036], "larg": [4, 12, 13, 14, 21, 26, 27, 37, 39, 43, 47, 49, 50, 52, 53, 55, 73, 75, 95, 99, 114, 116, 117, 124, 127, 128, 130, 144, 156, 157, 171, 172, 178, 179, 188, 190, 199, 201, 203, 204, 205, 217, 233, 238, 257, 263, 266, 269, 285, 292, 301, 305, 307, 318, 319, 322, 338, 343, 346, 352, 353, 366, 375, 380, 386, 389, 392, 393, 394, 397, 401, 406, 407, 409, 411, 412, 413, 414, 416, 418, 420, 440, 442, 444, 445, 448, 449, 450, 451, 456, 460, 471, 473, 497, 512, 532, 534, 536, 538, 539, 542, 545, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 580, 586, 587, 589, 632, 639, 641, 644, 645, 648, 650, 651, 652, 655, 656, 657, 662, 669, 670, 672, 675, 677, 683, 685, 687, 689, 690, 691, 693, 743, 776, 777, 796, 804, 806, 810, 814, 824, 834, 835, 836, 837, 838, 839, 840, 845, 856, 857, 864, 868, 869, 877, 879, 891, 892, 899, 900, 904, 905, 907, 908, 909, 910, 935, 936, 976, 979, 981, 983, 984, 986, 989, 990, 991, 995, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1012, 1019, 1021, 1022, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "larger": [4, 7, 27, 37, 39, 42, 47, 55, 80, 82, 92, 104, 114, 125, 127, 152, 157, 158, 164, 169, 170, 175, 179, 183, 214, 215, 216, 225, 232, 234, 245, 251, 261, 263, 269, 270, 278, 283, 285, 299, 300, 302, 305, 338, 342, 352, 353, 373, 375, 380, 386, 394, 404, 405, 407, 408, 409, 411, 412, 414, 415, 417, 438, 441, 447, 448, 450, 452, 454, 513, 525, 539, 542, 559, 560, 561, 565, 566, 580, 587, 641, 650, 670, 671, 672, 673, 677, 685, 690, 702, 717, 733, 794, 844, 845, 876, 878, 879, 880, 888, 893, 935, 936, 958, 961, 979, 980, 983, 984, 986, 987, 990, 991, 995, 997, 1001, 1002, 1021, 1023, 1034, 1035, 1038, 1039, 1040, 1043, 1044, 1047, 1048], "largest": [82, 97, 117, 148, 201, 377, 407, 409, 412, 441, 525, 539, 555, 556, 557, 558, 562, 563, 586, 707, 794, 795, 815, 837, 869, 907, 908, 909, 910, 936, 984, 987, 997, 1002, 1003], "largest_clust": [407, 441], "largest_coef": [82, 525], "larrald": 1047, "lars_path": [186, 389, 529, 535, 537, 540, 541, 543, 544, 546, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 681, 682, 683, 684, 983, 1030, 1032, 1035, 1039, 1041], "lars_path_gram": [680, 983, 1039], "larscv": [398, 648, 663, 680, 681, 1037, 1043, 1047], "larson": [1035, 1039, 1040, 1042, 1044], "larsson": [1042, 1043, 1044], "lasagna": 1036, "laserjet": 1023, "laska": 1036, "lasso": [3, 16, 17, 66, 104, 132, 138, 166, 169, 177, 180, 190, 192, 198, 204, 207, 210, 218, 232, 250, 273, 318, 322, 346, 366, 392, 409, 410, 412, 414, 415, 416, 469, 470, 476, 499, 522, 529, 535, 537, 540, 541, 543, 544, 546, 595, 644, 645, 647, 648, 649, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 668, 670, 676, 679, 680, 681, 682, 683, 684, 719, 720, 721, 820, 821, 822, 860, 879, 976, 987, 988, 1001, 1009, 1010, 1018, 1021, 1025, 1030, 1034, 1035, 1036, 1038, 1039, 1041, 1043, 1044, 1048], "lasso_cd": [529, 535, 540, 546], "lasso_cv": 138, "lasso_lar": [104, 529, 535, 540, 546, 1040], "lasso_lars_": [187, 188], "lasso_path": [184, 649, 650, 651, 652, 653, 654, 661, 680, 681, 983, 1030, 1032, 1034, 1043], "lasso_pipelin": 132, "lassocv": [14, 132, 138, 169, 183, 188, 398, 414, 416, 649, 650, 652, 653, 654, 661, 682, 983, 1018, 1030, 1033, 1037, 1040, 1041, 1043, 1044, 1047, 1048], "lassocvlassocv": 132, "lassolar": [649, 650, 651, 653, 654, 661, 662, 663, 680, 681, 682, 983, 988, 1021, 1030, 1031, 1033, 1037, 1040, 1041, 1043], "lassolars": [187, 188, 416, 649, 652, 653, 983, 1030, 1037, 1039, 1043, 1044], "lassolarscv": [188, 398, 416, 650, 651, 652, 654, 661, 663, 680, 681, 682, 983, 1030, 1037, 1043, 1047], "lassolarsic__criterion": [187, 188], "last": [4, 20, 44, 58, 89, 124, 169, 178, 199, 200, 207, 212, 228, 251, 263, 271, 272, 310, 317, 319, 328, 356, 366, 375, 378, 382, 384, 385, 388, 394, 397, 407, 408, 415, 419, 436, 440, 445, 457, 462, 466, 513, 531, 557, 558, 559, 560, 581, 582, 585, 591, 592, 595, 608, 680, 681, 683, 684, 695, 696, 698, 699, 700, 705, 779, 794, 795, 799, 800, 815, 839, 840, 844, 859, 860, 864, 872, 878, 914, 939, 962, 976, 982, 983, 984, 986, 988, 991, 1001, 1008, 1014, 1021, 1030, 1036, 1037, 1038, 1039, 1044, 1046, 1047], "last_hour": [4, 13], "last_mean": 962, "last_n": 962, "last_var": 962, "lat": [11, 296, 496, 761], "late": [311, 368], "latenc": [3, 7, 16, 166, 365, 522, 563, 670, 676, 825, 879, 905, 952, 961, 1007, 1009, 1025, 1033], "latent": [3, 6, 16, 17, 105, 166, 225, 302, 319, 352, 410, 415, 417, 486, 530, 534, 536, 537, 538, 541, 542, 586, 589, 855, 986, 1007, 1009, 1023, 1024, 1025, 1032, 1035], "latentdirichletalloc": [15, 368, 385, 412, 1007, 1035, 1037, 1044, 1045], "later": [0, 11, 53, 111, 116, 125, 151, 170, 175, 178, 238, 278, 296, 353, 362, 386, 392, 393, 397, 401, 845, 868, 869, 877, 879, 979, 997, 1018, 1023, 1033, 1036, 1038, 1042], "latest": [315, 316, 317, 318, 319, 320, 321, 322, 378, 380, 384, 386, 388, 1003, 1005, 1044], "latestst": 384, "latex": 1030, "latexpdf": 380, "latin": [8, 415], "latitud": [296, 305, 375, 496, 697, 761], "lattarini": 1032, "latter": [4, 15, 250, 260, 269, 270, 291, 310, 346, 368, 377, 394, 411, 414, 415, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 739, 794, 795, 796, 799, 800, 805, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 954, 990, 995, 1039], "laughlin": 1037, "launch": [351, 352, 397, 1012], "laur": 1030, "lauren": [0, 363, 690, 694, 984, 1042, 1045], "laurent": [1033, 1034, 1037, 1038, 1045, 1046], "laurenz": 1042, "lauritzen": 1038, "laveen": 1043, "law": 1012, "lawson": [1037, 1038, 1039], "lawton": 1038, "layer": [4, 31, 120, 130, 140, 153, 155, 166, 206, 215, 239, 298, 301, 302, 303, 307, 308, 330, 343, 344, 348, 366, 388, 414, 512, 513, 520, 565, 825, 855, 856, 857, 860, 879, 992, 1009, 1010, 1025, 1036], "layout": [111, 305, 392, 899, 900, 901, 904, 920, 1002, 1033, 1035, 1047], "layton": [0, 2, 48, 1030, 1031, 1032, 1033, 1035], "lazebnik": [755, 756, 985], "lazi": [13, 395, 415, 1001, 1034], "lazyfram": 73, "lazz": 1045, "lb": [866, 998], "lbfg": [160, 299, 382, 646, 647, 656, 657, 667, 670, 672, 678, 685, 830, 833, 856, 857, 983, 991, 1034, 1035, 1037, 1038, 1043, 1044, 1045, 1047], "lbfgsb": 656, "lbfin": 1040, "lc": [12, 223, 231], "lceil": [404, 993], "lda": [15, 33, 90, 94, 97, 99, 101, 105, 106, 166, 292, 362, 377, 403, 502, 534, 539, 547, 548, 848, 1007, 1009, 1010, 1024, 1025, 1035], "lda_featur": 385, "lda_model": 385, "lda_np": 403, "ldavid": 1036, "ldflag": 378, "ldirer": 1037, "ldl": [148, 377], "ldot": [983, 987, 989, 991, 1001], "ldwy4": 1047, "le": [656, 867, 978, 983, 990, 998, 1000, 1038, 1042, 1043, 1047], "le_": 567, "lead": [0, 7, 25, 27, 31, 37, 52, 55, 61, 72, 117, 121, 122, 124, 147, 148, 169, 170, 171, 178, 183, 188, 190, 199, 203, 233, 235, 238, 260, 261, 263, 267, 288, 289, 301, 305, 307, 310, 311, 317, 338, 346, 352, 356, 362, 366, 367, 374, 379, 388, 389, 393, 394, 401, 404, 405, 407, 409, 411, 412, 413, 414, 416, 450, 460, 463, 466, 494, 513, 525, 533, 536, 537, 538, 541, 545, 549, 555, 556, 557, 558, 561, 562, 563, 564, 604, 628, 644, 645, 648, 650, 651, 652, 658, 659, 660, 661, 677, 689, 693, 743, 794, 799, 800, 827, 839, 840, 844, 863, 870, 880, 891, 892, 897, 899, 907, 908, 909, 910, 976, 981, 983, 984, 986, 987, 988, 990, 991, 993, 995, 997, 1000, 1001, 1003, 1012, 1014, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "leader": [380, 1012], "leadership": 0, "leaf": [41, 116, 128, 130, 356, 360, 407, 414, 418, 439, 440, 441, 442, 443, 444, 448, 455, 461, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 907, 908, 909, 910, 911, 912, 990, 1003, 1033, 1035, 1037, 1041, 1044], "leaf_id": 360, "leaf_rot": 172, "leaf_siz": [418, 442, 444, 448, 453, 454, 455, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 990], "leagu": 375, "leak": [116, 265, 351, 362, 408, 411, 859, 884, 885, 887, 888, 889, 890, 997, 1030, 1037, 1040, 1046, 1047], "leakag": [393, 394, 408, 1025], "leandro": [1039, 1043], "lear": 1012, "learn": [4, 6, 7, 8, 9, 10, 13, 15, 17, 20, 25, 26, 27, 31, 32, 34, 36, 37, 48, 49, 51, 52, 53, 55, 56, 67, 68, 70, 71, 75, 81, 82, 94, 100, 104, 106, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 126, 127, 129, 130, 131, 132, 138, 139, 140, 145, 147, 148, 151, 154, 156, 160, 163, 164, 167, 171, 172, 173, 174, 176, 180, 185, 187, 188, 194, 199, 200, 201, 203, 206, 213, 217, 223, 224, 225, 226, 227, 228, 230, 232, 233, 236, 237, 238, 240, 241, 242, 253, 257, 259, 260, 263, 265, 266, 268, 269, 272, 274, 276, 278, 281, 283, 285, 287, 288, 289, 290, 291, 292, 296, 298, 301, 302, 303, 305, 306, 310, 311, 312, 314, 323, 324, 328, 330, 331, 337, 342, 344, 346, 351, 352, 353, 356, 357, 358, 359, 362, 367, 369, 372, 373, 374, 375, 377, 379, 383, 386, 387, 388, 389, 393, 394, 396, 398, 401, 402, 403, 404, 405, 407, 408, 409, 411, 413, 415, 416, 417, 421, 422, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 440, 441, 444, 445, 447, 448, 455, 462, 463, 465, 466, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 506, 507, 508, 510, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 569, 574, 579, 580, 581, 582, 585, 586, 587, 588, 589, 591, 592, 597, 600, 601, 608, 609, 612, 617, 620, 624, 626, 628, 630, 632, 636, 638, 639, 641, 642, 643, 644, 646, 650, 655, 656, 666, 667, 674, 675, 676, 678, 686, 687, 688, 689, 690, 694, 698, 699, 700, 706, 711, 715, 716, 719, 720, 721, 723, 729, 732, 738, 739, 740, 745, 753, 775, 776, 777, 782, 785, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 841, 843, 848, 855, 856, 857, 858, 859, 860, 862, 864, 866, 869, 871, 872, 873, 874, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 897, 899, 900, 901, 904, 907, 908, 909, 910, 922, 930, 931, 953, 954, 955, 976, 977, 979, 980, 981, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1006, 1009, 1011, 1016, 1018, 1019, 1025, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "learn_rat": 1031, "learner": [8, 112, 122, 132, 368, 555, 556, 557, 558, 559, 560, 562, 563, 564, 580, 587, 628, 841, 842, 847, 849, 850, 989, 992, 1003, 1007, 1008, 1023, 1046], "learning_curv": [262, 320, 398, 802, 982, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1047], "learning_decai": 534, "learning_method": [15, 385, 534], "learning_offset": [15, 534], "learning_r": [7, 111, 122, 123, 124, 125, 126, 127, 225, 283, 300, 302, 316, 318, 414, 551, 552, 557, 558, 559, 560, 666, 674, 675, 676, 690, 855, 856, 857, 984, 994, 1001, 1031, 1039, 1043], "learning_rate_": [690, 857], "learning_rate_init": [170, 300, 301, 856, 857], "learningcurvedisplai": [234, 262, 320, 982, 1045, 1046], "learnt": [127, 169, 312, 362, 394, 411, 880, 976, 997], "least": [5, 13, 15, 80, 81, 84, 85, 87, 97, 98, 114, 125, 148, 159, 166, 168, 177, 178, 181, 183, 189, 192, 195, 196, 199, 201, 203, 204, 207, 216, 217, 218, 232, 238, 260, 278, 281, 310, 317, 318, 338, 352, 353, 366, 373, 375, 377, 379, 380, 384, 386, 388, 392, 394, 395, 398, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 442, 446, 448, 454, 455, 456, 459, 472, 479, 480, 481, 482, 483, 492, 514, 529, 535, 537, 539, 540, 541, 543, 544, 545, 546, 547, 555, 556, 557, 558, 560, 562, 563, 564, 591, 592, 600, 633, 641, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 690, 695, 710, 714, 716, 782, 797, 801, 802, 808, 810, 811, 812, 814, 815, 817, 820, 823, 824, 825, 856, 857, 860, 871, 879, 904, 907, 908, 909, 910, 928, 950, 977, 980, 984, 987, 990, 999, 1001, 1002, 1003, 1008, 1009, 1010, 1012, 1021, 1025, 1030, 1032, 1033, 1036, 1037, 1041], "least_absolute_devi": [1040, 1042, 1043], "least_angl": 389, "least_squar": 1043, "leastangle_2002": [148, 377], "leastsquareserror": 1039, "leav": [53, 111, 116, 125, 170, 172, 217, 267, 310, 360, 362, 366, 377, 379, 385, 394, 407, 414, 439, 440, 443, 444, 461, 501, 555, 556, 557, 558, 559, 560, 562, 563, 564, 671, 673, 798, 803, 804, 805, 806, 814, 815, 839, 840, 907, 908, 909, 910, 976, 984, 990, 994, 1003, 1018, 1021, 1030, 1037, 1039, 1041, 1042, 1046], "leaveonegroupout": [265, 411, 797, 804, 805, 1018, 1036], "leaveonelabelout": 1036, "leaveoneout": [265, 411, 1018], "leavepgroupsout": [411, 798, 1018, 1036], "leaveplabelout": 1036, "leaveplabelsout": 1036, "leavepout": [411, 804, 1018], "leaves_parallel": 911, "lebedev": [1036, 1037], "lebel": 1045, "lebourgeoi": 1012, "lectur": [407, 642, 979, 1006], "lecture2": 642, "lecun": [991, 1001], "led": 1030, "ledoit": [10, 15, 29, 34, 35, 77, 78, 81, 82, 83, 166, 292, 471, 473, 477, 478, 510, 547, 981, 1009], "ledoit_wolf": [82, 409, 1043], "ledoit_wolf_shrinkag": 1043, "ledoitwolf": [33, 77, 79, 82, 83, 102, 126, 166, 294, 409, 467, 468, 472, 473, 474, 475, 796, 1009, 1034], "lee": [412, 1030, 1031, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1045], "leepei": 1034, "leereev": 1037, "leeuw": 633, "lefebvr": [1043, 1044], "lefevr": [412, 536], "left": [6, 7, 12, 14, 15, 24, 33, 34, 39, 42, 44, 45, 51, 55, 62, 64, 72, 75, 81, 82, 91, 92, 97, 98, 111, 114, 116, 117, 118, 121, 124, 127, 132, 134, 154, 160, 164, 169, 172, 184, 192, 199, 200, 201, 203, 210, 212, 213, 216, 217, 228, 232, 236, 238, 239, 245, 247, 248, 251, 256, 257, 258, 259, 261, 269, 270, 272, 286, 288, 289, 296, 299, 302, 305, 319, 321, 322, 326, 337, 338, 342, 360, 375, 380, 382, 384, 404, 407, 410, 411, 413, 414, 415, 417, 424, 430, 444, 470, 480, 481, 482, 483, 491, 496, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 585, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 633, 637, 641, 649, 653, 794, 795, 796, 799, 800, 803, 810, 872, 879, 907, 908, 909, 910, 911, 923, 936, 958, 961, 976, 979, 981, 983, 985, 987, 989, 994, 999, 1001, 1003, 1018, 1019, 1021, 1022, 1037, 1039, 1044], "left_h": 305, "left_impur": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "leftarrow": [407, 991, 1001], "leftmost": 991, "legaci": [374, 384, 394, 955, 1030, 1037, 1042], "legarreta": [1041, 1043, 1044], "legend": [4, 7, 8, 9, 11, 13, 24, 26, 33, 37, 40, 61, 72, 73, 75, 78, 79, 80, 81, 85, 86, 90, 97, 99, 102, 103, 104, 111, 112, 113, 114, 115, 117, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 144, 151, 152, 156, 157, 158, 159, 160, 169, 170, 175, 178, 179, 181, 184, 187, 188, 189, 193, 199, 200, 201, 202, 205, 206, 207, 208, 209, 212, 213, 214, 216, 217, 223, 231, 232, 233, 234, 236, 239, 247, 255, 257, 259, 260, 262, 263, 264, 265, 267, 270, 272, 273, 274, 278, 286, 288, 289, 290, 295, 300, 306, 310, 316, 319, 322, 327, 337, 340, 342, 345, 351, 356, 357, 358, 359, 698, 1019, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "legend_el": [90, 128, 212, 263, 286, 342], "legend_handl": 290, "legend_lin": 9, "legend_titl": 205, "legitim": 984, "lego": 1007, "lehoucq": 412, "leibler": [15, 220, 412, 536, 538, 545, 690, 984, 1037], "leibniz": 987, "leig": 1036, "leightonzhang": 1036, "leinweb": [1038, 1039], "leisur": 4, "lejeun": 1037, "lekhwani": 1039, "leland": [1036, 1037, 1038, 1040, 1041, 1046], "lemaitr": [0, 1, 5, 7, 72, 75, 100, 132, 151, 156, 157, 158, 160, 187, 188, 201, 221, 305, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lemaitre58": [7, 132, 151, 156, 158, 160, 221, 305], "lemir": 1041, "lemma": [232, 372, 406, 532, 539, 547, 891, 892, 893, 981, 1025, 1033], "lemmat": 415, "lemmatoken": 415, "lemo": [1046, 1047], "len": [7, 8, 10, 11, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 55, 60, 61, 62, 63, 64, 65, 70, 72, 98, 104, 105, 109, 114, 117, 120, 121, 127, 139, 140, 146, 151, 159, 164, 170, 172, 198, 199, 217, 223, 228, 231, 232, 233, 235, 237, 238, 245, 247, 248, 255, 258, 260, 261, 268, 269, 271, 274, 281, 283, 290, 292, 293, 299, 306, 307, 308, 311, 321, 325, 326, 329, 338, 345, 348, 351, 352, 353, 360, 392, 394, 417, 425, 429, 431, 435, 443, 448, 454, 462, 505, 513, 548, 567, 568, 580, 595, 630, 631, 779, 796, 810, 821, 825, 827, 829, 830, 880, 894, 895, 1021, 1022, 1023, 1039, 1042], "lenail": [1038, 1042], "lend": 1012, "lene": 1046, "length": [45, 70, 89, 90, 92, 103, 105, 120, 148, 151, 152, 153, 156, 157, 159, 175, 182, 235, 236, 239, 242, 286, 317, 320, 335, 353, 373, 377, 380, 388, 389, 394, 408, 412, 414, 415, 417, 443, 488, 506, 507, 510, 513, 521, 549, 561, 579, 580, 587, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 630, 644, 645, 648, 649, 650, 651, 652, 654, 655, 658, 659, 660, 661, 679, 682, 778, 796, 799, 800, 810, 825, 827, 830, 831, 833, 841, 842, 843, 845, 847, 886, 912, 919, 921, 925, 941, 942, 958, 961, 986, 993, 997, 1014, 1020, 1021, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1046], "length_scal": [151, 152, 155, 156, 157, 158, 160, 417, 610, 613, 616, 617, 619, 620, 621, 622], "length_scale_bound": [151, 157, 158, 160, 417, 609, 613, 617, 620, 621], "length_scale_grid": 157, "lengthi": [380, 392], "lenient": [873, 1008, 1047], "lenz": [1041, 1045], "leo": 1047, "leon": [674, 675, 676, 1030, 1048], "leonardo": 1043, "leonenko": [605, 606], "leonieborn": 1036, "leopoldo": 1043, "leq": [154, 412, 414, 983, 987, 990, 1001, 1002, 1003], "lera": 1037, "leriqu": [1036, 1038], "lernen": 448, "lesne": 1044, "less": [4, 5, 8, 27, 52, 53, 60, 92, 95, 98, 105, 111, 118, 124, 125, 127, 151, 158, 169, 181, 183, 199, 201, 203, 234, 238, 246, 248, 260, 261, 269, 271, 274, 306, 309, 310, 311, 317, 319, 342, 351, 352, 362, 366, 368, 375, 380, 382, 392, 394, 407, 411, 412, 414, 415, 419, 437, 439, 441, 443, 446, 448, 450, 455, 458, 460, 461, 480, 481, 482, 494, 513, 529, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 588, 594, 617, 625, 632, 645, 659, 674, 676, 690, 699, 719, 720, 721, 722, 733, 749, 761, 776, 777, 782, 792, 794, 795, 798, 799, 800, 806, 823, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 862, 874, 876, 877, 879, 882, 888, 889, 899, 900, 907, 908, 909, 910, 925, 939, 976, 977, 979, 980, 981, 984, 986, 987, 990, 992, 997, 1001, 1002, 1003, 1007, 1021, 1023, 1030, 1031, 1033, 1034, 1036, 1037, 1038, 1040, 1044, 1045, 1047], "lessen": [205, 656, 657], "lesser": [299, 394, 440, 539, 983], "let": [4, 5, 13, 53, 55, 64, 71, 75, 90, 95, 100, 118, 121, 124, 125, 127, 129, 151, 157, 158, 164, 169, 170, 171, 180, 188, 199, 201, 217, 220, 224, 235, 242, 255, 260, 263, 267, 351, 353, 360, 362, 375, 380, 382, 386, 392, 404, 407, 411, 414, 415, 439, 443, 489, 498, 502, 508, 532, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 679, 682, 865, 872, 873, 983, 984, 985, 986, 987, 994, 995, 997, 1002, 1003, 1012, 1021, 1022, 1023, 1040], "letelli": 1036, "letter": [148, 159, 375, 377, 384, 415, 785, 786, 802, 818, 987], "leu": 1044, "leung": 1041, "lev_metr": 392, "levarag": 322, "level": [4, 9, 11, 12, 27, 34, 41, 53, 95, 96, 116, 120, 140, 148, 150, 151, 152, 155, 158, 160, 161, 166, 169, 170, 210, 211, 212, 213, 214, 217, 228, 232, 233, 249, 260, 263, 269, 270, 289, 296, 336, 337, 339, 340, 342, 344, 346, 352, 360, 366, 375, 377, 380, 382, 386, 392, 394, 396, 397, 398, 405, 412, 415, 417, 421, 452, 466, 491, 492, 494, 501, 519, 529, 534, 535, 543, 544, 545, 559, 560, 565, 566, 609, 613, 620, 621, 623, 664, 665, 666, 674, 675, 676, 685, 688, 690, 692, 698, 700, 714, 720, 725, 782, 820, 821, 822, 824, 827, 828, 855, 856, 857, 897, 912, 976, 983, 987, 988, 990, 995, 1001, 1003, 1007, 1008, 1009, 1023, 1033, 1041, 1044, 1045, 1046], "levelnam": 95, "leven": 392, "levenshtein": 392, "levequ": [837, 879], "leverag": [4, 8, 37, 49, 86, 217, 351, 352, 366, 367, 378, 394, 411, 414, 874, 976, 983, 1014, 1033, 1045, 1048], "levesqu": 1036, "levi": [532, 1037], "levinson": [1038, 1039], "levitski": [1045, 1046, 1047], "levitskii": 1043, "lewi": [375, 1037, 1041], "lex": [407, 450, 460], "lexicograph": [394, 565, 785, 791, 841, 849], "lexicon": 997, "lexsort": 24, "lf": 388, "lfw": [6, 375, 491, 492, 1019, 1030], "lfw_": 1019, "lfw_home": 375, "lfw_pairs_train": [375, 491], "lfw_peopl": [6, 375, 492, 1019], "lg2012": 414, "lgtm": 1037, "li": [0, 2, 328, 375, 637, 640, 694, 723, 753, 892, 976, 979, 987, 990, 997, 999, 1002, 1030, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "liabil": 217, "liac": [320, 374, 380, 494, 1045, 1046], "liam": [1038, 1039], "liang": [1036, 1041, 1042, 1047], "liau": 1033, "lib": [367, 378, 397, 1007], "liberti": 251, "libisel": 1048, "liblinear": [192, 336, 386, 656, 657, 785, 899, 900, 901, 904, 905, 983, 987, 1002, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1046], "libomp": [378, 1042], "librari": [6, 260, 318, 320, 358, 362, 372, 374, 375, 378, 379, 380, 381, 386, 392, 393, 394, 397, 403, 656, 899, 900, 901, 902, 904, 905, 955, 983, 987, 1002, 1003, 1007, 1008, 1012, 1019, 1023, 1028, 1033, 1037, 1038, 1039, 1040, 1041, 1043, 1047], "libsvm": [175, 336, 373, 386, 485, 506, 561, 899, 900, 901, 902, 903, 904, 905, 1002, 1025, 1030, 1032, 1038, 1041, 1044], "libsvmtool": [175, 374, 485, 506, 507], "licenc": [5, 374], "licens": [7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 105, 109, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 131, 132, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 261, 264, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 325, 326, 327, 328, 330, 342, 343, 346, 347, 351, 352, 353, 374, 392, 394, 401, 1003, 1012], "lichman": 377, "liddel": 1038, "lidston": [834, 835, 836, 838, 989], "lie": [13, 60, 85, 147, 169, 233, 305, 327, 336, 338, 412, 414, 604, 847, 849, 850, 851, 899, 900, 981, 984, 987, 997, 1002], "lieg": 414, "lieret": 1045, "lieu": [1036, 1037], "life": [13, 127, 254, 388, 984], "lifecycl": [1007, 1008], "lifo": 914, "lift": 397, "light": [114, 375], "lighter": [366, 698, 700, 779, 786, 1046], "lightfm": 1007, "lightgbm": [127, 414, 559, 560, 1007, 1039, 1046], "lightgreen": [134, 205, 216], "lightgrei": 10, "lightn": 1007, "lightweight": [381, 796, 810, 820, 821, 1007], "ligo": 1037, "lik_max": 78, "lik_min": 78, "like": [0, 4, 12, 13, 19, 52, 55, 58, 60, 70, 89, 92, 98, 102, 104, 109, 111, 113, 118, 124, 127, 128, 151, 157, 169, 179, 199, 251, 260, 263, 264, 267, 268, 274, 292, 302, 305, 310, 311, 315, 328, 338, 342, 351, 352, 362, 366, 368, 372, 374, 375, 379, 380, 382, 384, 387, 388, 389, 392, 393, 394, 398, 401, 403, 405, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 513, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 579, 580, 581, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 924, 925, 938, 941, 950, 951, 955, 958, 959, 960, 972, 974, 976, 979, 981, 982, 983, 984, 987, 989, 990, 991, 993, 994, 997, 1002, 1003, 1007, 1008, 1012, 1014, 1021, 1023, 1027, 1030, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "likelihood": [33, 57, 77, 79, 80, 81, 82, 83, 102, 126, 151, 152, 153, 155, 156, 157, 158, 160, 166, 187, 217, 249, 253, 260, 266, 276, 294, 302, 305, 382, 394, 405, 409, 412, 414, 417, 435, 467, 468, 469, 470, 471, 472, 473, 474, 475, 513, 530, 534, 539, 547, 548, 549, 608, 609, 629, 643, 656, 710, 738, 794, 795, 796, 822, 825, 844, 855, 875, 887, 901, 902, 904, 905, 983, 986, 989, 997, 1002, 1009, 1033, 1034, 1039, 1045], "likewis": [236, 407, 521], "lil": [394, 551, 552, 866, 915, 941, 990], "lil_matrix": 17, "lili": [1038, 1039], "lilian": [1035, 1036, 1047], "lim": [154, 532], "lima": [1043, 1044], "limit": [4, 8, 17, 27, 37, 42, 57, 66, 82, 111, 118, 119, 125, 132, 163, 169, 170, 171, 178, 199, 200, 216, 232, 267, 307, 311, 318, 346, 353, 362, 367, 381, 382, 385, 392, 394, 395, 405, 407, 410, 412, 416, 444, 461, 466, 557, 558, 559, 560, 630, 648, 656, 657, 677, 680, 681, 686, 775, 817, 847, 849, 850, 851, 872, 873, 897, 901, 902, 903, 904, 905, 955, 976, 983, 984, 986, 987, 994, 995, 997, 1008, 1014, 1025, 1038, 1040, 1043, 1044, 1047], "limits_": 990, "lin": [0, 532, 656, 1002, 1035, 1036, 1037, 1038], "lin_clf": 1002, "linalg": [34, 54, 78, 79, 82, 102, 104, 185, 245, 246, 247, 250, 251, 322, 380, 386, 412, 449, 450, 451, 460, 519, 530, 533, 539, 542, 655, 670, 672, 685, 689, 693, 934], "linalgerror": 1040, "lincoln": 375, "lindenbaum": 532, "lindenstrauss": [55, 166, 227, 243, 372, 406, 487, 500, 891, 892, 893, 1004, 1009, 1025], "lindgren": 1048, "lindquist": 1045, "line": [9, 11, 13, 17, 40, 43, 60, 70, 80, 91, 95, 100, 111, 117, 123, 150, 161, 163, 164, 166, 169, 170, 187, 188, 189, 191, 194, 195, 197, 200, 201, 202, 207, 208, 210, 211, 213, 228, 232, 233, 236, 238, 257, 264, 266, 267, 289, 293, 296, 306, 317, 337, 340, 342, 343, 347, 348, 351, 374, 375, 378, 380, 381, 382, 384, 385, 386, 387, 388, 392, 412, 413, 414, 436, 485, 486, 487, 506, 507, 540, 551, 552, 553, 554, 608, 611, 612, 630, 668, 684, 698, 699, 700, 802, 818, 955, 981, 987, 991, 994, 1001, 1007, 1009, 1011, 1021, 1023, 1032, 1041, 1043, 1046, 1047], "line0": [12, 223], "line1": [7, 12, 223], "line2": [7, 12, 223, 347], "line2d": [9, 80, 213, 289, 337, 340, 802, 818], "line_": [387, 436, 696, 698, 699, 700, 802, 818], "line_bin": 306, "line_fig": 117, "line_i": 202, "line_kw": [127, 129, 239, 262, 316, 322, 630, 802, 818], "line_kwarg": [132, 699], "line_profil": 386, "line_trac": 117, "line_x": [202, 216], "line_y_ransac": 202, "linear": [5, 9, 10, 11, 12, 13, 14, 15, 27, 29, 30, 31, 35, 37, 52, 57, 74, 75, 78, 79, 80, 81, 82, 86, 90, 95, 100, 103, 114, 116, 120, 130, 132, 135, 138, 140, 143, 146, 148, 153, 155, 157, 163, 164, 167, 168, 170, 173, 175, 179, 181, 183, 185, 187, 188, 189, 194, 196, 197, 200, 201, 203, 204, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 224, 226, 231, 232, 234, 236, 237, 240, 249, 250, 254, 256, 257, 258, 260, 263, 265, 266, 267, 268, 269, 270, 274, 288, 289, 290, 291, 292, 293, 296, 299, 302, 305, 306, 307, 308, 310, 312, 317, 318, 330, 333, 335, 338, 339, 340, 343, 346, 347, 348, 349, 351, 358, 359, 367, 369, 372, 376, 377, 378, 382, 383, 385, 394, 396, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 440, 442, 453, 463, 465, 473, 480, 481, 482, 494, 499, 500, 510, 513, 519, 522, 530, 531, 532, 533, 534, 537, 539, 541, 542, 546, 547, 548, 552, 564, 580, 587, 591, 592, 604, 607, 612, 618, 629, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 691, 699, 705, 714, 747, 750, 762, 764, 771, 782, 796, 807, 811, 822, 825, 839, 840, 844, 848, 855, 856, 857, 860, 864, 865, 866, 869, 872, 874, 876, 877, 878, 879, 888, 892, 899, 900, 901, 902, 903, 904, 905, 976, 978, 979, 980, 982, 987, 990, 991, 992, 993, 994, 995, 1001, 1002, 1007, 1009, 1010, 1012, 1014, 1017, 1018, 1023, 1024, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "linear_baselin": 317, "linear_kernel": [758, 762, 985, 1038], "linear_model": [4, 7, 8, 10, 14, 25, 27, 30, 54, 71, 73, 75, 86, 116, 132, 134, 135, 138, 139, 147, 148, 151, 163, 166, 168, 169, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 230, 231, 235, 237, 240, 242, 256, 263, 268, 269, 273, 274, 281, 302, 306, 307, 310, 312, 315, 316, 317, 318, 319, 321, 322, 329, 351, 362, 366, 368, 369, 379, 380, 382, 386, 388, 389, 393, 394, 398, 408, 414, 427, 432, 436, 463, 535, 537, 540, 541, 543, 544, 546, 565, 566, 567, 568, 595, 629, 630, 632, 633, 636, 638, 639, 640, 641, 698, 699, 785, 810, 818, 820, 821, 822, 824, 826, 830, 831, 832, 833, 857, 874, 878, 899, 900, 903, 906, 928, 930, 931, 932, 971, 979, 983, 987, 988, 993, 995, 997, 1001, 1009, 1018, 1019, 1021, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "linear_model_preprocessor": 199, "linear_pca": 408, "linear_preprocessor": 132, "linear_regress": [201, 274], "linear_svc": 1002, "linear_svm": 233, "linear_svm_scor": 233, "linear_svm_tim": 233, "lineardiscriminantanalysi": [33, 34, 103, 221, 292, 362, 403, 534, 548, 848, 981, 988, 990, 1030, 1033, 1034, 1035, 1036, 1037, 1039, 1042, 1044, 1045, 1046], "linearli": [31, 100, 113, 148, 169, 178, 213, 221, 228, 269, 270, 307, 310, 342, 351, 366, 377, 392, 412, 414, 513, 640, 705, 868, 869, 987, 990, 993, 1002, 1021, 1037, 1046], "linearly_separ": [31, 299], "linearmodel": 1043, "linearoper": [322, 685], "linearregress": [86, 135, 168, 178, 189, 194, 195, 196, 197, 202, 205, 216, 231, 235, 237, 256, 274, 306, 362, 380, 392, 393, 408, 414, 463, 568, 630, 633, 644, 647, 650, 652, 669, 670, 685, 983, 987, 988, 997, 1021, 1034, 1035, 1039, 1042, 1043, 1044, 1046], "linearregressionifittedlinearregress": 231, "linearregressionlinearregress": 135, "linearsvc": [25, 27, 70, 72, 144, 145, 166, 175, 233, 257, 259, 267, 307, 315, 333, 335, 339, 340, 346, 349, 351, 366, 382, 386, 405, 415, 416, 435, 510, 565, 575, 629, 637, 641, 650, 670, 671, 672, 673, 674, 685, 732, 739, 822, 827, 900, 901, 904, 906, 983, 987, 988, 1002, 1009, 1030, 1031, 1032, 1036, 1038, 1041, 1046], "linearsvc__c": 307, "linearsvclinearsvc": [72, 145, 267], "linearsvr": [566, 905, 1002, 1034, 1036, 1041, 1046], "linecollect": [12, 223, 231, 630], "linen": [12, 223], "lineno": 386, "lineplot": [127, 260], "liner": [382, 825], "lines_": [387, 630, 802, 818], "linestyl": [10, 11, 33, 60, 73, 80, 102, 104, 111, 123, 134, 138, 140, 151, 154, 156, 158, 160, 171, 172, 184, 186, 187, 188, 199, 200, 201, 205, 209, 211, 212, 217, 236, 238, 257, 259, 263, 264, 269, 288, 296, 300, 306, 336, 339, 340, 342, 343, 344, 346, 1019], "linewidth": [24, 33, 34, 37, 40, 58, 73, 78, 86, 92, 112, 124, 127, 129, 151, 155, 159, 188, 189, 193, 194, 195, 197, 200, 202, 205, 213, 216, 228, 236, 238, 269, 273, 289, 293, 306, 316, 322, 336, 337, 339, 344, 358, 1019], "linger": 201, "linguist": [714, 896, 1000], "lingyi1110": 1045, "link": [12, 17, 111, 169, 170, 178, 199, 203, 217, 245, 263, 293, 356, 367, 379, 380, 381, 382, 384, 388, 394, 405, 407, 409, 412, 414, 417, 559, 560, 608, 646, 667, 678, 686, 703, 918, 920, 983, 990, 1003, 1004, 1007, 1011, 1017, 1021, 1023, 1028, 1030, 1033, 1034, 1037, 1038, 1041, 1047], "link_thickness_i": 293, "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 56, 57, 67, 68, 166, 172, 438, 439, 443, 444, 461, 510, 512, 520, 879, 1007, 1009, 1022, 1033, 1038, 1041], "linkage_matrix": 41, "linkage_tre": 1034, "linkedin": 384, "linker": [378, 381], "linnerrud": [373, 1025], "linnerud": [377, 503], "linprog": [668, 983], "linspac": [4, 8, 10, 11, 14, 24, 26, 37, 38, 40, 42, 49, 55, 80, 81, 96, 104, 112, 124, 151, 152, 154, 155, 156, 157, 158, 160, 170, 178, 179, 181, 183, 189, 193, 199, 200, 201, 205, 209, 210, 211, 212, 213, 217, 225, 228, 231, 232, 234, 236, 249, 260, 262, 263, 267, 268, 269, 270, 274, 288, 289, 295, 296, 306, 308, 319, 320, 337, 338, 341, 343, 344, 346, 347, 348, 629, 630, 802, 823, 839, 840, 1022], "lint": [380, 388], "linter": 577, "linthresh": [178, 183], "linu": [1046, 1047], "linux": [380, 382, 383, 388, 1007, 1030], "lipoprotein": [148, 377], "lippert": 983, "lippmann": 375, "lipschitz": [406, 999], "lisa": [1038, 1039, 1041, 1042, 1044, 1045], "lise": 1044, "list": [4, 8, 10, 12, 13, 14, 17, 19, 20, 25, 32, 40, 44, 49, 62, 70, 104, 105, 115, 117, 123, 132, 172, 203, 238, 239, 255, 258, 260, 261, 263, 264, 269, 273, 292, 307, 311, 315, 316, 317, 318, 319, 320, 321, 322, 329, 341, 352, 353, 368, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 405, 407, 408, 411, 413, 414, 415, 430, 432, 435, 448, 454, 455, 462, 463, 464, 469, 470, 476, 480, 481, 482, 486, 487, 488, 489, 490, 491, 494, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 521, 530, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 589, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 630, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 679, 682, 684, 685, 690, 694, 695, 697, 708, 709, 710, 711, 714, 716, 722, 730, 739, 743, 751, 775, 778, 780, 785, 791, 794, 795, 796, 799, 800, 802, 807, 808, 810, 818, 820, 821, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 863, 867, 870, 872, 873, 878, 880, 896, 900, 902, 905, 907, 908, 909, 910, 913, 915, 919, 920, 921, 925, 927, 928, 929, 931, 939, 940, 942, 953, 958, 961, 971, 976, 977, 983, 987, 989, 990, 991, 994, 995, 998, 1003, 1005, 1007, 1008, 1012, 1014, 1018, 1020, 1023, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "list_param": 380, "listedcolormap": [31, 34, 120, 291, 294, 299, 307], "listen": 351, "listinfo": 388, "lite": 1030, "liter": [380, 384, 1012], "literatur": [48, 156, 260, 278, 352, 377, 380, 386, 388, 392, 393, 407, 410, 412, 414, 441, 445, 447, 499, 534, 536, 538, 545, 553, 554, 586, 589, 706, 794, 976, 979, 983, 987, 1040], "litsidi": [1045, 1046], "littl": [169, 170, 171, 172, 228, 375, 415, 460, 642, 796, 810, 936, 977, 984, 986, 1002, 1003, 1021, 1031, 1042, 1047], "lituiev": 1043, "liu": [0, 266, 370, 391, 561, 723, 753, 987, 993, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "liutong": 1038, "live": [11, 70, 169, 296, 375, 380, 407, 496, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 1011], "livesei": 351, "livni": [407, 440], "lizao": 1038, "lizsz": 1036, "lj2017": 407, "lk": 1033, "lkjcalc": 1038, "lkubin": 1041, "ll": [11, 55, 119, 255, 296, 380, 392, 530, 539, 979, 990, 1003, 1014], "llcrnrlat": [11, 296], "llcrnrlon": [11, 296], "lle": [220, 221, 222, 224, 528, 687, 691, 984, 1042], "lle_hessian": 220, "lle_ltsa": 220, "lle_method": 220, "lle_mod": 220, "lle_standard": 220, "lloyd": [407, 441, 445, 447, 457, 1044, 1045], "llvm": 378, "lm": 180, "lmbda": 309, "lmbda_bc": 309, "lmbda_yj": 309, "lml": [152, 153, 157, 417], "ln": [384, 983, 991, 997], "loa": [150, 151, 157, 158, 161, 166, 417, 494, 609, 613, 620, 621, 623, 1009], "load": [4, 6, 11, 12, 13, 15, 26, 32, 46, 48, 53, 71, 72, 89, 95, 105, 116, 118, 120, 122, 128, 129, 132, 133, 135, 145, 146, 156, 169, 170, 175, 180, 195, 196, 199, 207, 215, 230, 231, 235, 237, 238, 239, 240, 242, 250, 256, 258, 260, 265, 267, 272, 278, 283, 287, 292, 300, 301, 302, 316, 317, 319, 320, 322, 327, 328, 329, 357, 360, 366, 369, 372, 375, 377, 383, 386, 393, 401, 406, 410, 411, 412, 414, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 530, 532, 541, 839, 840, 936, 997, 1008, 1015, 1017, 1019, 1025, 1030, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "load_ames_h": 132, "load_boston": [1036, 1038, 1043], "load_breast_canc": [148, 172, 328, 356, 385, 590, 593, 594, 596, 672, 673, 785, 987, 1035, 1036, 1041], "load_cont": 501, "load_dataset": 351, "load_diabet": [7, 125, 135, 138, 148, 164, 184, 186, 187, 188, 195, 196, 239, 256, 320, 414, 556, 560, 566, 671, 699, 820, 821, 822, 908, 910, 995, 1018, 1021, 1036, 1041, 1044], "load_digit": [32, 51, 52, 58, 72, 73, 89, 139, 146, 190, 206, 221, 232, 233, 258, 259, 262, 268, 275, 285, 287, 292, 300, 302, 321, 325, 326, 386, 408, 419, 443, 444, 530, 531, 532, 533, 597, 598, 636, 637, 666, 686, 687, 688, 689, 691, 693, 1014, 1018, 1019, 1020, 1021, 1022, 1036, 1041], "load_fil": [374, 375, 1023, 1032, 1044], "load_iri": [30, 41, 45, 74, 90, 99, 101, 103, 105, 120, 133, 140, 144, 153, 182, 192, 208, 242, 247, 254, 265, 266, 267, 269, 270, 286, 291, 294, 300, 315, 317, 320, 330, 334, 335, 338, 341, 357, 360, 393, 401, 407, 408, 411, 414, 416, 427, 559, 565, 599, 600, 608, 617, 618, 620, 621, 629, 656, 657, 709, 785, 796, 799, 800, 802, 810, 827, 848, 894, 895, 896, 907, 909, 911, 912, 913, 977, 982, 987, 988, 989, 990, 994, 997, 1003, 1014, 1020, 1021, 1022, 1036, 1038, 1041], "load_lfw_pair": 1035, "load_linnerud": [832, 1036, 1041], "load_mnist": [207, 283], "load_mtpl2": 217, "load_sample_imag": [48, 581, 582, 585, 1039], "load_svmlight_fil": [374, 1030, 1031, 1036, 1037, 1038, 1045], "load_win": [9, 241, 310, 843, 851, 1027, 1041], "loader": [261, 329, 351, 373, 374, 375, 496, 497, 506, 1008, 1023, 1030, 1035, 1037, 1038, 1041], "loan": [414, 532, 983, 1012], "loayza": 1044, "lobpcg": [46, 450, 460, 686, 689, 693, 1040, 1043, 1044, 1045], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 72, 75, 79, 80, 81, 85, 90, 97, 99, 102, 103, 104, 111, 113, 114, 115, 123, 124, 125, 126, 127, 129, 132, 134, 135, 144, 151, 152, 158, 160, 169, 170, 181, 184, 189, 193, 199, 200, 201, 202, 205, 206, 209, 212, 213, 216, 217, 223, 231, 232, 233, 234, 236, 238, 247, 248, 255, 258, 259, 260, 263, 264, 267, 270, 273, 274, 286, 288, 289, 300, 306, 309, 310, 316, 319, 322, 327, 337, 340, 342, 345, 346, 351, 357, 359, 810, 876, 888, 1018], "loc_a": 309, "loc_b": 309, "local": [4, 9, 12, 20, 39, 52, 57, 61, 95, 98, 116, 117, 129, 148, 156, 157, 166, 170, 200, 213, 219, 222, 224, 226, 228, 232, 238, 284, 292, 293, 297, 337, 358, 359, 367, 377, 378, 380, 384, 386, 388, 397, 407, 412, 414, 415, 417, 445, 450, 460, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 500, 536, 538, 542, 545, 547, 557, 558, 561, 564, 608, 609, 686, 687, 688, 689, 690, 691, 693, 694, 755, 756, 842, 845, 848, 850, 860, 869, 892, 895, 903, 953, 955, 985, 986, 990, 991, 1003, 1009, 1011, 1022, 1024, 1025, 1034, 1038, 1042, 1045, 1048], "localcach": 397, "localclust": 955, "locally_linear_embed": [224, 984], "locallylinearembed": [12, 220, 221, 222, 319, 686, 688, 690, 984, 990, 1035, 1036, 1044, 1045, 1046], "localoutlierfactor": [228, 238, 289, 290, 319, 394, 561, 903, 993, 1037, 1038, 1040, 1044, 1045, 1046, 1047], "localoutlierfactor__n_neighbor": 238, "locat": [9, 25, 53, 54, 72, 80, 81, 193, 296, 317, 338, 373, 375, 378, 380, 384, 385, 388, 389, 397, 407, 409, 413, 446, 458, 459, 467, 468, 469, 470, 471, 472, 473, 474, 486, 498, 499, 502, 503, 510, 513, 972, 977, 983, 988, 993, 997, 1003, 1038], "location_": [80, 81, 467, 468, 469, 470, 471, 472, 473, 474], "location_reweight": [467, 472], "lock": [397, 400, 953, 955, 1048], "loev": 532, "lof": [9, 166, 213, 228, 238, 284, 297, 337, 561, 845, 903, 993, 1009], "lof_kw": 238, "lofti": [1040, 1041], "log": [4, 20, 25, 26, 27, 78, 95, 111, 122, 124, 132, 144, 148, 152, 153, 155, 156, 157, 160, 184, 187, 188, 192, 199, 204, 209, 217, 232, 234, 249, 293, 310, 351, 375, 377, 378, 380, 384, 388, 389, 394, 404, 405, 407, 408, 409, 412, 414, 415, 417, 446, 449, 458, 463, 468, 469, 470, 471, 472, 473, 474, 530, 534, 539, 547, 548, 549, 551, 553, 555, 557, 560, 562, 588, 589, 591, 592, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 640, 643, 646, 656, 657, 667, 669, 674, 678, 738, 748, 752, 794, 795, 796, 799, 800, 810, 834, 835, 836, 837, 838, 839, 840, 844, 855, 856, 863, 864, 893, 896, 901, 904, 906, 907, 909, 934, 976, 979, 981, 983, 984, 989, 990, 992, 995, 997, 1001, 1003, 1007, 1008, 1021, 1032, 1033, 1034, 1039, 1040, 1041, 1044, 1047], "log10": [144, 157, 169, 184, 192, 261, 338], "log1p": [75, 231, 863, 987, 997], "log2": [115, 209, 240, 555, 556, 557, 558, 562, 563, 907, 908, 909, 910, 988], "log_": 987, "log_2": [404, 561, 993], "log_bas": 723, "log_den": 288, "log_dens": 844, "log_likelihood": [78, 608, 609, 794, 795], "log_likelihood_gradi": [608, 609], "log_logist": 1047, "log_loss": [25, 26, 123, 126, 152, 310, 329, 351, 394, 405, 414, 555, 557, 559, 562, 644, 656, 674, 907, 909, 976, 983, 987, 1001, 1003, 1032, 1034, 1036, 1044, 1045, 1046, 1047], "log_marginal_likelihood": [152, 153, 155, 157, 160, 417, 608, 609, 1040], "log_marginal_likelihood_value_": [608, 609], "log_prob": [794, 795], "log_reg": [242, 319], "log_reg_input_featur": 319, "log_scal": 1046, "log_scale_transform": [199, 217], "log_scaled_numer": [199, 217], "log_y_prob": 856, "logaddexp": 1047, "logan": [1044, 1045, 1046], "logarithm": [75, 132, 169, 203, 232, 261, 338, 394, 416, 458, 588, 656, 657, 674, 702, 723, 738, 748, 752, 753, 754, 788, 830, 839, 840, 934, 1003, 1018, 1037], "logcosh": [419, 531], "logdet": 934, "logged_in": 375, "logger": 1041, "logic": [109, 367, 381, 382, 387, 403, 414, 1003, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "logical_and": [14, 124], "logical_not": [19, 64, 104, 202], "logical_or": [201, 207, 269, 386], "logical_xor": [14, 155, 344], "loginov": 1036, "logist": [25, 27, 30, 45, 69, 71, 75, 76, 90, 103, 105, 116, 139, 166, 177, 184, 186, 194, 196, 197, 203, 204, 205, 208, 210, 216, 218, 229, 231, 242, 268, 271, 281, 294, 300, 301, 302, 310, 319, 334, 335, 346, 351, 394, 395, 405, 408, 414, 416, 417, 435, 487, 494, 500, 502, 510, 539, 557, 559, 569, 608, 629, 644, 655, 656, 657, 664, 666, 674, 738, 796, 810, 825, 855, 856, 857, 859, 879, 906, 922, 924, 987, 991, 992, 1001, 1002, 1009, 1010, 1012, 1019, 1025, 1034, 1037, 1038, 1040, 1041], "logistic__c": [73, 1019], "logistic_regress": [818, 826], "logistic_regression_path": [1038, 1039], "logisticregress": [25, 30, 71, 73, 116, 134, 139, 147, 148, 182, 189, 190, 191, 192, 206, 214, 215, 229, 230, 240, 242, 263, 269, 302, 307, 315, 316, 317, 318, 319, 321, 351, 366, 380, 382, 386, 388, 393, 398, 405, 408, 414, 416, 427, 432, 436, 565, 567, 595, 629, 632, 641, 650, 657, 670, 671, 672, 673, 674, 685, 698, 785, 810, 818, 824, 826, 830, 831, 833, 884, 885, 887, 888, 889, 890, 906, 930, 931, 932, 971, 983, 987, 988, 997, 1001, 1002, 1019, 1021, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "logisticregression__c": 307, "logisticregressioncv": [27, 310, 394, 398, 656, 983, 988, 1034, 1035, 1036, 1038, 1039, 1040, 1044, 1045, 1047, 1048], "logisticregressionifittedlogisticregress": 302, "logisticregressionlogisticregress": [71, 116, 229, 230, 240, 242, 316, 319], "logit": [405, 417, 656, 657, 983], "loglik_lw": 78, "loglik_oa": 78, "loglik_r": 78, "loglike_": 530, "loglog": [78, 232], "logloss": 1041, "lognorm": [124, 157, 180, 249, 309, 997], "logo": [0, 411, 803], "logprob": 844, "logreg": [182, 833], "logspac": [4, 12, 27, 73, 78, 102, 138, 148, 152, 157, 169, 192, 203, 204, 232, 234, 249, 261, 273, 275, 287, 299, 307, 310, 338, 346, 818, 826, 982, 983, 1018, 1019, 1021], "logsumexp": [293, 1037], "loguniform": [6, 151, 268, 976, 1019, 1040], "logx": [203, 346], "lohit": 1047, "loic": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "loki": [367, 955, 987, 1038, 1041], "lomp": 378, "lon": 761, "london": [408, 415, 464], "londschien": [200, 1043, 1047], "lone": [1045, 1046], "long": [4, 11, 12, 44, 62, 124, 156, 164, 169, 171, 199, 235, 236, 238, 263, 296, 305, 316, 351, 352, 362, 367, 378, 380, 388, 392, 394, 395, 401, 406, 407, 451, 496, 536, 674, 675, 676, 799, 800, 834, 835, 836, 837, 838, 856, 857, 867, 987, 993, 997, 998, 1000, 1001, 1006, 1032, 1036, 1042, 1044], "long_term_trend_kernel": 156, "longer": [0, 4, 34, 53, 114, 169, 170, 184, 301, 318, 380, 382, 407, 411, 414, 415, 447, 534, 561, 982, 986, 987, 989, 992, 1002, 1011, 1012, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "longest": 283, "longitud": [296, 305, 375, 496, 697, 761], "longpathsen": 397, "longstand": [1031, 1037], "loo": [394, 804, 1041], "look": [4, 5, 27, 53, 55, 95, 98, 100, 124, 125, 151, 156, 157, 164, 169, 170, 201, 220, 224, 228, 235, 251, 255, 260, 262, 301, 322, 351, 352, 362, 367, 368, 374, 375, 380, 382, 384, 386, 388, 392, 393, 407, 410, 412, 413, 414, 415, 446, 486, 487, 555, 556, 557, 558, 562, 563, 600, 601, 629, 657, 690, 879, 907, 908, 909, 910, 983, 984, 997, 1001, 1002, 1004, 1022, 1023, 1030, 1038, 1040], "lookup": [389, 952, 1039], "loop": [7, 8, 114, 124, 169, 255, 265, 351, 360, 366, 380, 381, 386, 407, 411, 416, 644, 645, 650, 651, 657, 658, 659, 660, 661, 976, 1000, 1001, 1018, 1033, 1034, 1037, 1042, 1043, 1046, 1047], "loopym": 1040, "loos": [251, 257, 1002, 1038], "looser": 192, "lope": 175, "lopez": 175, "lopusz": 1041, "lorain": 320, "lorek": 1037, "lorentzen": [0, 1, 199, 200, 201, 217, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lorenz": [199, 217, 1035, 1047], "lorenz_curv": [199, 217], "lose": [203, 216, 353, 375, 394, 410, 415, 417, 935, 936, 977, 983, 1023], "losi": [0, 2, 1030], "loss": [7, 13, 24, 25, 26, 27, 79, 104, 117, 123, 124, 125, 126, 151, 152, 166, 177, 181, 189, 192, 201, 203, 204, 206, 207, 211, 217, 218, 234, 268, 300, 301, 310, 318, 322, 329, 335, 336, 340, 342, 346, 351, 392, 394, 405, 406, 412, 417, 462, 463, 494, 506, 507, 530, 536, 537, 538, 541, 545, 550, 551, 552, 556, 557, 558, 559, 560, 563, 641, 644, 647, 656, 657, 664, 665, 666, 667, 668, 669, 670, 674, 675, 676, 677, 701, 704, 707, 720, 731, 732, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 787, 788, 793, 796, 799, 800, 810, 821, 822, 825, 856, 857, 859, 860, 863, 864, 872, 873, 874, 879, 899, 900, 905, 906, 908, 910, 936, 940, 980, 983, 991, 995, 1000, 1001, 1002, 1003, 1009, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "loss_": [300, 856, 857, 991, 1044], "loss_curve_": [300, 856, 857], "loss_func": 13, "loss_funct": 13, "loss_function_": [664, 666, 674, 675, 1047], "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 13, "lossfunct": [666, 674, 675, 1039], "lossi": 407, "lossili": 394, "lost": [20, 57, 82, 375, 381, 392, 984, 987], "lostanlen": 1040, "lostcoast": 1040, "lot": [4, 82, 127, 169, 203, 375, 380, 381, 382, 388, 412, 414, 799, 800, 891, 892, 976, 999, 1001, 1002, 1007, 1008, 1012, 1022, 1023, 1030, 1035, 1037, 1038, 1039, 1040, 1042], "lot_area": 238, "lotan": 1012, "lotconfig": 121, "lotfrontag": 75, "loui": [320, 1035, 1036, 1040, 1042, 1044, 1046, 1047], "louib": [1038, 1039], "loupp": [0, 2, 114, 115, 414, 553, 554, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "lourida": 1036, "love": [1005, 1023], "low": [4, 11, 12, 37, 50, 81, 86, 97, 99, 102, 111, 114, 128, 148, 171, 192, 194, 199, 201, 203, 213, 220, 222, 228, 232, 238, 245, 246, 248, 251, 254, 260, 262, 266, 267, 275, 289, 290, 301, 309, 311, 312, 321, 328, 337, 338, 351, 360, 376, 377, 380, 385, 388, 392, 394, 397, 404, 405, 406, 411, 412, 415, 440, 442, 447, 466, 519, 522, 533, 580, 587, 601, 677, 690, 694, 703, 723, 739, 786, 844, 873, 880, 897, 936, 952, 955, 976, 982, 983, 984, 986, 987, 990, 992, 993, 994, 995, 997, 999, 1002, 1003, 1010, 1025, 1031, 1034, 1035, 1036, 1038, 1039, 1044, 1045], "low_cardin": 311, "low_cardinality_featur": 311, "low_cardinalityindex": 311, "low_i": 194, "low_x": 194, "lower": [5, 13, 26, 27, 31, 33, 58, 79, 86, 90, 95, 97, 102, 111, 114, 117, 120, 124, 127, 128, 151, 153, 155, 157, 159, 169, 170, 171, 183, 184, 185, 189, 199, 200, 201, 202, 212, 220, 224, 231, 232, 237, 247, 251, 259, 260, 262, 263, 267, 268, 270, 273, 286, 287, 289, 290, 307, 310, 319, 328, 338, 344, 351, 352, 353, 357, 375, 380, 394, 405, 406, 407, 410, 411, 412, 413, 414, 415, 418, 442, 446, 462, 465, 496, 507, 530, 532, 539, 542, 551, 557, 558, 559, 560, 561, 586, 587, 589, 601, 609, 611, 612, 613, 615, 617, 618, 620, 621, 623, 630, 631, 633, 635, 675, 677, 710, 714, 722, 725, 731, 736, 794, 795, 845, 847, 849, 850, 851, 853, 880, 899, 900, 901, 902, 903, 906, 923, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 999, 1001, 1002, 1003, 1021, 1032, 1033, 1038, 1045, 1047], "lower_bound": 259, "lower_bound_": [794, 795, 1038], "lowercas": [415, 423, 440, 441, 443, 445, 447, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 586, 587, 589, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 860, 865, 891, 892, 1043], "lowest": [75, 86, 170, 183, 250, 374, 407, 411, 633, 635, 799, 800, 803, 906, 907, 984, 987, 1003, 1045], "loyal": 1035, "loyola": [0, 370, 1043, 1044], "lo\u00efc": [0, 1, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "lp_model": [325, 326], "lpgo": [411, 805], "lpo": 806, "lprun": 386, "lr": [25, 27, 116, 134, 135, 202, 214, 230, 231, 256, 263, 393, 398, 414, 566, 567, 568, 710, 971], "lr_": 987, "lr__c": 414, "lr_base": 263, "lrap": [736, 987], "lrjball": [1040, 1041], "ls100": 330, "ls2010": 979, "ls30": 330, "ls50": 330, "ls_pipelin": 329, "lsa": [412, 542, 1032], "lsa_vector": 352, "lshforest": [1034, 1037], "lsi": 412, "lsqr": [33, 312, 547, 670, 672, 685, 981, 1031, 1037, 1044], "lstrip": [31, 44, 62, 228, 299, 307], "lstsq": [104, 380, 655, 668], "lsturtew": 1043, "lsvc": 416, "lsvm": 175, "lsvm_score": 175, "lsvm_time": 175, "lt": [71, 72, 116, 132, 169, 250, 258, 272, 378, 380], "ltd": [375, 1012], "ltg": [148, 377, 499], "ltorgo": 375, "ltsa": [220, 221, 222, 687, 691, 984], "lu": [539, 542, 935, 936, 1036, 1037, 1038, 1039, 1046, 1047, 1048], "luangkot": 1037, "luca": [1030, 1040, 1041, 1042, 1043], "lucca": 1043, "luce": 1033, "lucen": 415, "lucgiffon": 1041, "luci": [0, 266, 370, 391, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "luciano": [1038, 1045], "lucieclair": 1044, "lucija": 1038, "lucio": 1039, "lucki": 362, "lucyleeow": 1041, "ludwig": 1030, "luessi": 1032, "lui": [656, 1031, 1033, 1034, 1038, 1047], "luiz": 1044, "luk": 1039, "luka": [1034, 1041, 1047], "luke": 1038, "lukowski": 1045, "luk\u00e1\u0161": 1047, "luna": 1044, "lunt": 1033, "luo": 1034, "lupo": 1042, "luqi": 1039, "luqu": 1040, "lurk": 1030, "lustig": 983, "lutz": [1036, 1040, 1043, 1047], "luxburg": [407, 450, 460, 689], "luzgin": 1040, "lv_ep": 233, "lvdmaaten": [690, 1037], "lw": [60, 78, 79, 81, 99, 103, 104, 193, 200, 202, 205, 209, 216, 223, 248, 255, 270, 288, 305, 327, 345], "lw_cov_": 82, "lw_mse": 79, "lw_prec_": 82, "lw_score": 102, "lw_shrinkag": 79, "lwda": 448, "lx": 990, "ly": [233, 847, 849, 850, 851, 1034], "ly648499246": 1043, "lynch": [1031, 1037], "lyon": [1036, 1037], "lyra": [1031, 1034, 1035], "lyrl2004": [375, 495], "l\u00e9o": 1038, "l\u00e9on": [1001, 1044, 1045, 1046], "l\u00e9onard": [1040, 1045], "l\u00e9one": 1036, "l\u00e9oni": 1036, "l\u00f3pez": [1034, 1038, 1039, 1042], "l\u00f6fstedt": 1037, "l\u00f6ning": 1042, "m": [0, 4, 8, 11, 19, 26, 27, 44, 58, 59, 63, 64, 65, 80, 81, 95, 111, 135, 156, 181, 199, 217, 260, 264, 296, 322, 329, 334, 345, 351, 366, 367, 374, 375, 377, 378, 384, 386, 394, 397, 404, 405, 407, 409, 412, 414, 416, 418, 442, 443, 444, 448, 455, 471, 472, 498, 511, 526, 530, 532, 534, 539, 637, 643, 647, 662, 669, 683, 684, 687, 691, 706, 714, 723, 738, 753, 755, 756, 794, 795, 845, 870, 936, 966, 967, 977, 979, 981, 983, 984, 985, 987, 988, 989, 990, 991, 995, 997, 1001, 1003, 1012, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "m1": [378, 403], "m11": 375, "m2": 403, "m2012": 980, "m2019": 994, "m2cgen": 1007, "m4x": [191, 215], "m_max": 153, "ma": [82, 311, 338, 983, 1036, 1041], "maascha": 1045, "maaten": [690, 694, 984], "mabel": [1038, 1042], "mabu": 1043, "mac": [19, 311, 329, 375, 380, 706, 987], "macaulei": 311, "macbook": 1038, "macdonald": [1040, 1041], "mach": [265, 405, 411, 591, 592], "machado": [405, 720], "machin": [0, 4, 6, 8, 9, 13, 27, 63, 73, 85, 117, 139, 144, 145, 148, 151, 156, 167, 171, 173, 189, 194, 211, 214, 241, 260, 263, 266, 278, 298, 303, 305, 310, 312, 317, 320, 334, 339, 342, 346, 351, 353, 366, 367, 369, 373, 374, 375, 377, 380, 383, 386, 387, 392, 393, 394, 396, 401, 405, 407, 411, 412, 414, 415, 417, 435, 437, 446, 469, 470, 476, 500, 502, 508, 514, 515, 516, 528, 530, 532, 539, 542, 553, 554, 555, 556, 557, 558, 562, 563, 564, 591, 592, 608, 609, 612, 617, 620, 632, 636, 637, 639, 641, 642, 643, 648, 649, 652, 653, 654, 655, 656, 657, 674, 680, 681, 690, 706, 711, 722, 732, 738, 740, 782, 785, 794, 824, 825, 839, 840, 845, 848, 855, 856, 857, 859, 877, 879, 885, 899, 900, 901, 902, 904, 905, 909, 910, 955, 976, 977, 979, 980, 983, 984, 985, 987, 988, 990, 993, 994, 995, 997, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1019, 1023, 1024, 1025, 1027, 1030, 1032, 1042, 1043, 1044, 1045, 1047], "machinali": 1005, "maciej": 1041, "maci\u00e0": [987, 1043, 1045], "mackai": [642, 643, 983], "mackenbach": 1041, "maco": [381, 383, 397, 403, 1038, 1042, 1044], "macosx": 1030, "macro": [6, 32, 70, 145, 258, 302, 315, 325, 326, 375, 411, 705, 711, 726, 727, 735, 780, 781, 784, 785, 987, 1023, 1030, 1038, 1046], "macro_roc_auc_ovo": 269, "macro_roc_auc_ovr": 269, "macroscop": 407, "macsween": [1039, 1040], "mad": [669, 1036], "madan": 1042, "made": [0, 13, 27, 70, 81, 89, 100, 111, 117, 135, 158, 169, 170, 199, 217, 238, 251, 264, 311, 316, 338, 357, 366, 375, 377, 380, 384, 394, 395, 398, 407, 414, 415, 419, 441, 444, 445, 447, 457, 494, 501, 586, 587, 589, 628, 629, 654, 663, 683, 684, 732, 780, 796, 799, 800, 810, 814, 815, 816, 836, 839, 840, 988, 993, 1003, 1007, 1012, 1020, 1022, 1030, 1031, 1032, 1033, 1034, 1037, 1039, 1040, 1043, 1044], "madelon": 513, "madhura": [1039, 1041, 1042, 1045, 1046], "madinak": 1045, "madsen": [1036, 1038], "mae": [4, 13, 132, 199, 201, 556, 563, 742, 908, 910, 987, 1003, 1037, 1038, 1042, 1043], "mae_test": 169, "mae_train": 169, "maennel": 1045, "magali": 1044, "magazin": [81, 416], "magda": 1041, "magenta": [78, 126], "maggi": 1044, "maggiecheg": [1040, 1044], "maggio": [1041, 1042, 1043], "magic": [235, 381, 386, 417, 614, 619, 622], "magnesium": 377, "magnitud": [4, 104, 113, 152, 164, 169, 216, 238, 265, 305, 310, 318, 366, 375, 386, 407, 414, 417, 611, 650, 702, 879, 983, 987, 991, 997, 1001, 1003, 1032, 1039, 1048], "mahajan": [1038, 1040, 1047], "mahal": 80, "mahal_emp_cov": 80, "mahal_robust_cov": 80, "mahalanobi": [9, 77, 81, 83, 166, 202, 407, 409, 448, 455, 467, 468, 469, 470, 471, 472, 473, 474, 697, 775, 776, 777, 846, 981, 990, 993, 1009, 1038, 1041, 1042], "mahalanobisdist": 697, "mahapatra": 1037, "mahdavi": 637, "maheshakya": [0, 1033, 1034, 1035], "mahieux": 1012, "mahout": 836, "mai": [0, 8, 19, 25, 39, 44, 46, 56, 71, 86, 95, 121, 122, 127, 148, 155, 157, 159, 169, 172, 175, 179, 183, 188, 203, 205, 225, 235, 238, 263, 265, 267, 268, 299, 310, 326, 338, 342, 346, 351, 352, 353, 362, 366, 367, 368, 372, 374, 375, 376, 377, 379, 380, 382, 384, 385, 388, 392, 394, 395, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 430, 437, 438, 439, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 457, 460, 463, 467, 470, 480, 481, 482, 485, 486, 487, 494, 506, 507, 513, 532, 533, 536, 538, 539, 542, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 572, 579, 592, 595, 600, 608, 609, 615, 618, 632, 633, 635, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 674, 675, 676, 677, 679, 682, 684, 686, 687, 689, 690, 691, 693, 695, 703, 709, 710, 713, 714, 716, 717, 719, 720, 721, 723, 735, 753, 760, 782, 783, 796, 798, 799, 800, 801, 810, 811, 812, 815, 816, 820, 824, 827, 832, 833, 834, 835, 836, 838, 841, 842, 843, 845, 847, 849, 850, 851, 857, 858, 859, 862, 864, 874, 876, 877, 878, 879, 880, 882, 888, 891, 892, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 917, 939, 940, 955, 976, 977, 979, 981, 983, 984, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1014, 1020, 1021, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "maikia": [7, 125, 132, 164, 1038, 1039, 1041, 1042], "mail": [201, 310, 375, 380, 384, 388, 392, 395, 1005, 1038, 1039], "mailhot": 1030, "mailman": 388, "main": [9, 32, 62, 86, 99, 121, 166, 228, 269, 281, 314, 346, 351, 366, 367, 368, 373, 378, 380, 382, 384, 386, 388, 392, 393, 394, 396, 397, 405, 406, 407, 412, 414, 415, 417, 501, 523, 528, 547, 548, 623, 711, 829, 899, 900, 976, 984, 986, 987, 994, 999, 1008, 1011, 1020, 1023, 1030, 1033, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "mainak": 1037, "maingret": 1041, "mainli": [27, 53, 111, 114, 151, 269, 278, 366, 382, 405, 609, 989, 994], "maint": 384, "maint_tool": 384, "maintain": [0, 55, 204, 217, 220, 235, 260, 367, 369, 379, 383, 386, 387, 388, 392, 394, 397, 407, 414, 438, 440, 868, 869, 875, 876, 879, 884, 887, 888, 890, 983, 984, 997, 1007, 1008, 1014, 1025, 1045], "mainten": [0, 380, 388, 392, 397, 400, 983, 1008, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mainy": 1042, "mair": 633, "mairal": [412, 529, 535], "maisonneuv": 1042, "maithreyi": 1040, "maj": 567, "major": [10, 15, 34, 117, 267, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 342, 353, 366, 375, 379, 380, 383, 386, 392, 395, 407, 411, 413, 415, 549, 567, 568, 692, 911, 913, 987, 990, 1001, 1008, 1012, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "make": [0, 4, 7, 8, 11, 13, 15, 17, 20, 21, 25, 26, 27, 39, 40, 43, 44, 56, 61, 62, 67, 73, 100, 111, 117, 121, 124, 127, 130, 145, 148, 151, 156, 159, 168, 169, 170, 171, 178, 183, 185, 188, 191, 192, 193, 195, 199, 200, 201, 203, 205, 217, 221, 230, 232, 234, 235, 236, 238, 245, 247, 250, 251, 255, 260, 262, 263, 269, 270, 271, 281, 292, 301, 305, 306, 311, 319, 321, 338, 348, 351, 352, 353, 362, 366, 367, 368, 369, 374, 375, 378, 379, 381, 382, 383, 385, 386, 388, 392, 394, 397, 398, 401, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 419, 438, 439, 440, 441, 443, 445, 447, 449, 450, 451, 456, 457, 458, 460, 486, 501, 512, 513, 520, 521, 525, 530, 532, 539, 549, 550, 553, 554, 559, 560, 581, 582, 605, 606, 629, 647, 653, 654, 669, 689, 693, 727, 734, 739, 765, 766, 778, 794, 795, 796, 798, 801, 807, 811, 812, 815, 816, 821, 822, 829, 830, 833, 866, 875, 878, 879, 883, 887, 889, 890, 891, 892, 905, 913, 919, 920, 930, 936, 942, 948, 973, 976, 977, 979, 981, 983, 984, 986, 987, 988, 989, 990, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1014, 1019, 1021, 1023, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "make_": 1039, "make_biclust": [21, 511, 1032], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 91, 191, 211, 228, 248, 308, 316, 319, 336, 339, 340, 347, 376, 382, 383, 414, 513, 694, 708, 789, 790, 1038, 1041, 1044], "make_cbar": 271, "make_checkerboard": [20, 509, 1032], "make_circl": [31, 44, 62, 100, 130, 225, 299, 300, 307, 327, 376, 1031, 1038, 1041], "make_classif": [25, 27, 31, 91, 115, 116, 118, 145, 147, 257, 263, 271, 272, 293, 299, 307, 315, 317, 321, 346, 362, 376, 383, 403, 435, 436, 485, 510, 551, 553, 555, 562, 603, 605, 664, 695, 696, 698, 700, 818, 823, 824, 826, 829, 856, 859, 899, 906, 976, 987, 988, 997, 1002, 1036, 1037, 1038, 1040], "make_column_selector": [71, 121, 132, 238, 408, 462, 465, 1040], "make_column_transform": [121, 132, 169, 230, 316, 408, 462, 464, 1038], "make_data": [34, 61], "make_dataset": 1039, "make_default": 957, "make_ellips": 247, "make_estim": 238, "make_friedman1": [376, 414, 537, 541, 591, 592, 630], "make_friedman2": [376, 609, 611, 612, 613, 614, 615, 619, 622, 623], "make_friedman3": 376, "make_gaussian_quantil": [91, 111, 113, 376, 468, 472, 473, 474, 479, 518], "make_hastie_10_2": [126, 264, 376, 414, 557, 994], "make_heatmap": 271, "make_low_rank_matrix": [321, 522], "make_ml_clf": 92, "make_moon": [31, 44, 62, 228, 260, 299, 300, 307, 376, 976, 1037, 1041], "make_multilabel_classif": [92, 236, 376, 513, 534, 785, 830, 831, 987, 1032, 1033, 1035, 1041], "make_pipelin": [4, 31, 58, 86, 116, 121, 132, 144, 145, 148, 163, 164, 169, 170, 175, 178, 187, 188, 199, 200, 205, 213, 217, 221, 228, 229, 230, 238, 239, 240, 242, 257, 267, 283, 292, 299, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 352, 362, 393, 398, 408, 411, 565, 674, 676, 851, 859, 884, 885, 887, 888, 889, 890, 899, 900, 901, 902, 904, 905, 977, 990, 997, 1001, 1002, 1033, 1040, 1043], "make_plot": 305, "make_regress": [10, 75, 178, 180, 181, 185, 202, 203, 273, 316, 322, 362, 376, 382, 383, 393, 552, 554, 558, 563, 604, 606, 607, 633, 644, 645, 647, 649, 650, 651, 653, 658, 659, 660, 661, 662, 663, 665, 669, 677, 679, 680, 681, 683, 684, 685, 857, 900, 987, 988, 990], "make_s_curv": [220, 225], "make_scor": [13, 124, 127, 264, 398, 411, 796, 821, 822, 987, 1039, 1047], "make_sparse_coded_sign": [198, 529, 535, 543, 544, 1044, 1046], "make_sparse_spd_matrix": [82, 476, 527, 1047], "make_sparse_uncorrel": 376, "make_spd_matrix": 525, "make_subplot": 117, "make_swiss_rol": [67, 224, 1044], "make_union": [408, 858, 1033, 1037], "makedir": 1037, "maker": [168, 169], "makhija": 1045, "makoeppel": 1043, "maksym": 1045, "maladier": 1045, "maladi\u00e8r": [1045, 1046], "malcolm": 1038, "maldonado": [1040, 1043], "male": [71, 169, 320, 385, 872, 873, 997], "malem": 1047, "malet": 1030, "malform": [17, 1034], "malic": [310, 377], "malic_acid": 9, "malici": 401, "malign": [148, 377, 498], "malik": [407, 450, 460, 689], "mallat": [662, 683, 684, 983], "mallatpursuit93": [662, 683, 684], "mallow": [728, 1036], "maloo": [1038, 1039], "malt": [200, 1043, 1044, 1045, 1047], "maltimor": 1040, "malu": 217, "malzer": 444, "mal\u00e9zieux": 1043, "mame": 1047, "mammal": 11, "mammalian": 412, "man": [412, 588, 766, 834, 838, 985, 987, 989], "manag": [0, 86, 242, 365, 374, 378, 381, 382, 384, 388, 392, 394, 395, 414, 448, 466, 624, 897, 955, 981, 1003, 1007, 1008, 1012, 1023, 1025, 1043, 1046], "manaileng": 1043, "mandal": 1040, "mandatori": [380, 415, 427, 629], "mandatorili": 1037, "mandera": 1033, "mandi": [1041, 1044], "mandjev": 1044, "mandyam": 1040, "mangasarian": [148, 377], "mangipudi": 1036, "manh": 1038, "manhattan": [407, 439, 443, 448, 455, 697, 759, 768, 775, 776, 777, 846, 985, 990, 1034, 1039, 1046], "manhattan_dist": [448, 455, 686, 759, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 1030, 1040, 1045, 1046], "manhattandist": 697, "mani": [4, 7, 10, 19, 55, 56, 74, 78, 82, 111, 117, 118, 119, 120, 125, 144, 148, 171, 199, 220, 232, 246, 254, 260, 267, 268, 272, 283, 305, 310, 311, 315, 316, 317, 318, 319, 321, 322, 351, 362, 366, 368, 375, 377, 379, 380, 393, 394, 395, 397, 404, 405, 407, 408, 409, 412, 414, 415, 416, 417, 419, 501, 539, 551, 552, 555, 556, 557, 558, 562, 563, 564, 586, 589, 604, 607, 625, 637, 648, 652, 656, 657, 664, 665, 666, 674, 675, 676, 690, 693, 771, 775, 796, 800, 810, 856, 857, 872, 877, 879, 899, 907, 908, 909, 910, 976, 977, 979, 983, 984, 986, 987, 988, 989, 990, 993, 994, 997, 1000, 1002, 1004, 1006, 1007, 1008, 1012, 1021, 1023, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1045, 1046], "manideep": 1048, "manifest": [388, 984, 990], "manifold": [12, 39, 52, 67, 116, 223, 224, 225, 226, 232, 283, 292, 293, 315, 319, 320, 327, 369, 373, 394, 407, 412, 414, 500, 523, 528, 542, 547, 564, 848, 860, 869, 892, 922, 990, 1009, 1024, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1047], "manimaran": [1039, 1041, 1042, 1043, 1044], "manipul": [374, 403, 505, 955, 1007, 1036], "manish": 1041, "maniteja": [1036, 1037, 1038], "mankoo": 1045, "mann": 1040, "mannbi": 1038, "manner": [4, 75, 95, 145, 170, 175, 247, 319, 320, 367, 380, 386, 407, 412, 414, 415, 707, 839, 840, 976, 987, 1003, 1033, 1040], "mannila": 999, "manning2008": 987, "manoharan": [1037, 1038], "manoj": [0, 2, 42, 148, 181, 1033, 1034, 1035, 1036, 1037], "manojkumarsivaraj334": 42, "manraj": 1037, "mansi": 1045, "mansingh": 1044, "mansouri": 1046, "mantovani": 1045, "manu": 375, "manual": [4, 46, 55, 169, 170, 172, 200, 210, 262, 283, 328, 336, 351, 353, 366, 367, 375, 380, 384, 385, 392, 393, 397, 407, 411, 412, 413, 435, 447, 565, 849, 872, 878, 976, 981, 982, 983, 986, 987, 990, 997, 1008, 1014, 1015, 1023, 1038, 1040, 1046], "manuel": [1030, 1034, 1038, 1039, 1042, 1043], "manufactur": [169, 414], "manvendra": [1036, 1037], "maocx": 1040, "map": [4, 5, 10, 11, 17, 19, 26, 53, 86, 100, 115, 123, 126, 130, 151, 166, 175, 199, 217, 220, 222, 227, 235, 238, 243, 261, 264, 269, 275, 291, 294, 296, 304, 305, 313, 329, 338, 342, 344, 352, 353, 374, 375, 381, 392, 394, 398, 405, 406, 407, 408, 411, 412, 414, 415, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 496, 500, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 759, 762, 794, 795, 796, 799, 800, 807, 808, 810, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 887, 888, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 941, 944, 945, 976, 979, 984, 987, 989, 999, 1002, 1003, 1009, 1018, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047], "mapd": 987, "mape": [13, 743, 987], "mape_cv_mean": 121, "mape_cv_std": 121, "mapi": 13, "mar": [12, 1005], "marc": [1037, 1039, 1040, 1046], "march": [156, 723, 753, 987, 1030, 1034, 1038, 1040, 1045], "marchand": 1044, "marchman": [1031, 1032], "marco": [1036, 1038, 1039, 1043, 1044, 1045, 1048], "marcofalk": 1037, "marcogorelli": [1038, 1039], "marcolini": 1043, "marcom": 1044, "marcu": [1038, 1047], "mare": 1047, "marek": [1030, 1047], "maren": [0, 370, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "margeta": 1038, "margin": [4, 12, 25, 27, 91, 113, 123, 152, 153, 154, 155, 156, 157, 166, 169, 170, 177, 209, 210, 212, 218, 236, 238, 260, 278, 305, 308, 311, 333, 334, 336, 337, 338, 340, 342, 347, 348, 349, 377, 405, 406, 412, 414, 417, 510, 608, 609, 629, 643, 674, 732, 828, 876, 888, 901, 904, 983, 987, 989, 993, 994, 997, 1001, 1002, 1009, 1021, 1037, 1039], "marguli": 1040, "mari": [70, 1038, 1039, 1040, 1041, 1044], "maria": [7, 125, 132, 148, 164, 407, 1041, 1042, 1043, 1044, 1045], "mariam": 1042, "mariana": 1041, "mariangela": 1043, "mariano": 260, "mariel": 1041, "marielaraj": 1043, "marija": [1041, 1042], "marijn": 1042, "marin": 526, "marina": 407, "marinelm": 1039, "mario": [405, 1034, 1036, 1044, 1045, 1046], "marit": [322, 494], "mari\u00e9": [0, 370, 1039, 1040, 1041, 1042, 1043, 1044], "mark": [34, 58, 92, 143, 164, 264, 271, 372, 380, 382, 384, 388, 389, 394, 407, 533, 605, 606, 609, 630, 656, 852, 853, 894, 895, 912, 926, 931, 936, 983, 1012, 1025, 1030, 1031, 1036, 1038, 1039, 1046, 1047, 1048], "markdown": 383, "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 55, 58, 59, 60, 63, 64, 85, 91, 92, 97, 117, 131, 158, 159, 175, 187, 192, 194, 196, 197, 199, 201, 202, 214, 216, 221, 245, 247, 248, 255, 260, 262, 263, 264, 290, 305, 310, 327, 356, 380, 384, 415, 1038, 1040, 1041, 1046], "markeredgecolor": [49, 55, 61, 63, 64], "markeredgewidth": [80, 264], "markerfacecolor": [49, 55, 61, 63, 64], "markers": [49, 55, 58, 61, 63, 64, 124, 154, 158, 231, 319], "market": [3, 16, 46, 52, 66, 127, 166, 220, 221, 224, 407, 409, 452, 470, 687, 1009, 1012, 1017], "marketplac": 1012, "markham": [1034, 1041, 1042], "markiwanchyshyn": 1038, "marko": [1030, 1039, 1040, 1046], "markou": 1043, "markov": [417, 609, 992, 1007, 1030], "markovtsev": 1038, "marktab": 1035, "marku": [407, 448, 455, 1038, 1040, 1041, 1042], "markup": 401, "marmo": [0, 371, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "maron": [407, 440], "marr": 169, "marr_unmarri": 169, "marreddi": 1044, "marri": 169, "marriott": 12, "marsgui": 1038, "marsh": 1041, "marshal": 377, "marsi": 1033, "marsland": 528, "marslast": 528, "marszalek": [755, 756, 985], "mart": [12, 1040], "martel": 1044, "martha": 311, "martian": 1040, "martin": [0, 370, 719, 720, 721, 983, 987, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047], "martin1997": 987, "martina": [1040, 1042], "martinbpr": [1035, 1036], "martinez": 1037, "martino": 1035, "martinosorb": 1035, "martinsson": [17, 533, 539, 936], "martynov": 1043, "mart\u00edn": [1043, 1044], "marufo": 1045, "marufur": 1037, "marvin": [1045, 1046], "marwaha": 1038, "marx": 997, "maryanmorel": [1035, 1036], "marzinotto": [1038, 1039], "mar\u00eda": [1044, 1045, 1046], "mas_vnr_typ": 238, "masafumi": 1035, "masanori": [1045, 1046], "masashi": [1040, 1042], "masecchia": 1030, "mash": 415, "mask": [14, 42, 66, 119, 199, 207, 238, 258, 259, 329, 389, 394, 408, 414, 467, 472, 559, 560, 579, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 627, 628, 630, 631, 647, 669, 796, 799, 800, 810, 959, 977, 994, 1030, 1033, 1035, 1036, 1038, 1040, 1048], "mask_al": 977, "mask_missing_values_onli": 977, "mask_out": 14, "mask_test": 217, "mask_train": [170, 217], "mask_y_pr": 30, "maskani": [1038, 1040, 1041, 1042], "masked_arrai": [338, 796, 810], "masked_equ": 82, "maskedarrai": [264, 1036], "mason": 1034, "mass": [148, 239, 377, 444, 794, 983, 994], "massachusett": 375, "massia": [0, 1041, 1043, 1044], "massich": [1037, 1038, 1039, 1040], "massil": 1036, "masstran": 1039, "master": [12, 283, 320, 380, 384, 1012, 1035], "masurel": 1031, "masvnrarea": [75, 132], "masvnrtyp": [121, 132], "mat": [374, 415], "match": [4, 20, 37, 54, 95, 96, 98, 101, 104, 117, 166, 175, 177, 199, 218, 222, 231, 238, 273, 342, 353, 375, 378, 382, 384, 407, 412, 414, 415, 428, 447, 462, 464, 506, 507, 513, 524, 529, 535, 540, 546, 549, 565, 566, 570, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 656, 662, 663, 683, 684, 697, 701, 702, 703, 711, 713, 717, 731, 775, 776, 777, 783, 839, 840, 844, 848, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 899, 906, 912, 923, 955, 984, 986, 987, 989, 990, 1009, 1010, 1014, 1023, 1025, 1030, 1036, 1037, 1038, 1040, 1042, 1043, 1046], "matchingdist": 697, "matchmak": 1012, "matcovici": 1040, "mate": 351, "matem\u00e1tica": 983, "mateo": 1043, "materi": [14, 169, 322, 395, 539, 579, 889, 890, 1006], "matern": [160, 417, 1041, 1045], "mateusz": [1034, 1041, 1042, 1047], "math": [49, 70, 127, 148, 238, 260, 261, 377, 397, 761], "mathbb": [95, 114, 154, 410, 987, 994, 1002], "mathbf": [154, 342, 412, 983, 987, 991, 992, 1001], "mathcal": [203, 346, 412, 414, 625, 694, 979, 981, 983, 987, 1001, 1043], "mathemat": [111, 169, 187, 216, 263, 372, 377, 380, 394, 396, 407, 409, 412, 413, 417, 547, 548, 555, 562, 633, 644, 654, 789, 790, 795, 857, 901, 904, 907, 909, 983, 987, 991, 997, 999, 1010, 1012, 1021, 1025, 1044], "matheu": 1036, "mathew": 1045, "mathi": 1043, "mathia": 1044, "mathieu": [0, 2, 24, 48, 100, 190, 200, 221, 236, 261, 351, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1043], "mathrm": [407, 409, 412, 416, 983, 1003], "mathschi": 1042, "mathur": [1037, 1039, 1040, 1045, 1046, 1048], "mathurin": [0, 1041, 1043, 1044], "mathurinm": [1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "matjansen": 1044, "mato": 1042, "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 374, 380, 387, 397, 400, 436, 500, 629, 630, 695, 696, 698, 699, 700, 802, 818, 913, 982, 1007, 1017, 1018, 1019, 1020, 1021, 1022, 1027, 1039, 1042, 1043, 1044, 1045, 1048], "matric": [34, 39, 40, 80, 82, 95, 204, 246, 247, 249, 250, 251, 283, 296, 316, 322, 329, 351, 352, 372, 374, 382, 383, 392, 393, 394, 407, 408, 409, 410, 412, 415, 416, 422, 448, 449, 451, 462, 471, 479, 480, 481, 482, 524, 532, 533, 536, 538, 539, 542, 545, 547, 548, 553, 554, 561, 564, 579, 580, 587, 641, 644, 645, 650, 651, 656, 662, 670, 672, 685, 751, 757, 765, 771, 775, 776, 777, 778, 789, 794, 795, 825, 843, 846, 851, 862, 866, 868, 871, 874, 876, 877, 879, 882, 884, 886, 888, 889, 890, 891, 892, 901, 902, 904, 905, 915, 936, 942, 951, 958, 960, 961, 977, 979, 981, 984, 985, 986, 988, 990, 991, 999, 1001, 1002, 1007, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "matrix": [3, 6, 7, 9, 13, 14, 16, 19, 20, 21, 32, 34, 39, 41, 44, 54, 62, 70, 79, 80, 81, 82, 85, 95, 96, 97, 105, 158, 166, 172, 177, 185, 200, 204, 218, 225, 229, 232, 233, 235, 250, 253, 267, 276, 295, 301, 319, 322, 325, 326, 342, 351, 352, 353, 360, 366, 369, 375, 376, 377, 380, 382, 386, 389, 392, 393, 394, 404, 408, 409, 410, 415, 416, 417, 418, 419, 429, 430, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 452, 455, 457, 458, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 490, 494, 495, 498, 499, 500, 501, 502, 503, 506, 507, 508, 517, 519, 521, 522, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 601, 602, 603, 604, 605, 606, 607, 609, 618, 627, 628, 629, 631, 633, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 710, 711, 712, 713, 714, 716, 726, 727, 728, 731, 735, 736, 737, 738, 751, 752, 755, 756, 757, 758, 760, 761, 763, 764, 765, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 784, 785, 789, 790, 793, 794, 795, 796, 799, 800, 810, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 868, 870, 871, 872, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 915, 917, 918, 919, 920, 925, 933, 934, 935, 936, 937, 940, 941, 942, 950, 951, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 977, 979, 981, 983, 984, 988, 989, 990, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "matrixorz": 1033, "matshow": [20, 21, 66, 119, 146, 301, 500], "matsubara": 987, "matt": [70, 1033, 1034, 1035, 1040, 1041, 1045, 1046], "matteo": [1034, 1036, 1044], "matter": [104, 251, 342, 362, 407, 408, 414, 565, 666, 674, 676, 983, 1034], "matthew": [379, 385, 534, 740, 1030, 1033, 1037, 1039, 1043, 1044], "matthews_corrcoef": [987, 1030, 1036, 1037, 1044], "matthia": [1030, 1032, 1033, 1036, 1037, 1038, 1042, 1045], "matthieu": [0, 2, 1030, 1034, 1045], "matti": [1031, 1034, 1035], "matur": [380, 1007, 1008], "mat\u00e9rn": 617, "mat\u00eda": 1044, "maud": 1033, "mauna": 156, "maura": 1041, "mauroantonioserrano": 1045, "mavani": 1038, "mavroforaki": [1034, 1036], "max": [4, 8, 10, 11, 12, 13, 17, 19, 25, 27, 31, 33, 40, 44, 52, 58, 62, 67, 72, 73, 77, 79, 82, 83, 95, 98, 102, 105, 111, 113, 120, 126, 130, 138, 139, 140, 143, 144, 148, 153, 155, 156, 164, 166, 169, 181, 186, 187, 188, 192, 194, 201, 202, 205, 213, 215, 217, 223, 232, 236, 258, 259, 260, 271, 273, 281, 283, 285, 289, 290, 294, 296, 299, 301, 305, 307, 308, 310, 318, 328, 330, 344, 347, 366, 407, 409, 412, 467, 468, 469, 470, 471, 472, 473, 474, 475, 510, 534, 553, 554, 555, 556, 557, 558, 561, 562, 563, 604, 625, 629, 630, 646, 647, 667, 670, 672, 678, 689, 690, 694, 697, 702, 703, 738, 754, 789, 790, 796, 856, 857, 868, 869, 871, 878, 885, 886, 907, 908, 909, 910, 955, 983, 985, 990, 997, 1001, 1002, 1009, 1021, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "max_": [407, 987], "max_abs_": 868, "max_abs_scal": 997, "max_bin": [318, 319, 414, 559, 560, 1047], "max_categori": [311, 319, 321, 872, 873, 997, 1044, 1046], "max_cluster_s": 444, "max_column": 217, "max_degre": [874, 1043], "max_depth": [7, 31, 112, 113, 116, 120, 121, 122, 123, 124, 125, 126, 130, 131, 133, 163, 221, 257, 272, 278, 317, 318, 356, 358, 359, 360, 393, 394, 414, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 709, 799, 800, 823, 907, 908, 909, 910, 911, 912, 913, 976, 994, 1003, 1039, 1041], "max_df": [15, 261, 329, 351, 352, 586, 589, 1041], "max_dist": 232, "max_doc_update_it": 534, "max_ep": [407, 448, 453, 454, 455], "max_error": [987, 1039], "max_estim": 115, "max_featur": [15, 31, 115, 126, 237, 257, 272, 317, 414, 416, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 586, 589, 595, 907, 908, 909, 910, 976, 983, 1030, 1032, 1033, 1037, 1038, 1041, 1044, 1047], "max_features_": [557, 558, 595, 907, 908, 909, 910, 1044], "max_fpr": [785, 987, 1038], "max_fun": [856, 857, 1040], "max_i": [236, 989], "max_idf": 1043, "max_it": [4, 8, 13, 15, 17, 25, 27, 30, 31, 72, 73, 95, 98, 116, 117, 121, 127, 134, 138, 139, 160, 163, 164, 169, 170, 178, 185, 191, 192, 206, 207, 208, 211, 212, 214, 220, 221, 222, 223, 225, 239, 240, 245, 246, 247, 248, 251, 273, 293, 299, 300, 301, 311, 317, 318, 319, 325, 326, 335, 351, 352, 386, 394, 414, 419, 438, 441, 445, 446, 447, 452, 457, 459, 469, 470, 476, 480, 481, 482, 529, 530, 531, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 559, 560, 625, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 670, 672, 674, 675, 676, 677, 678, 680, 681, 685, 686, 687, 688, 690, 691, 692, 794, 795, 810, 848, 856, 857, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 977, 979, 983, 990, 991, 1000, 1001, 1019, 1023, 1031, 1034, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048], "max_iter": 326, "max_iter_list": 127, "max_iter_predict": 608, "max_j": [644, 650], "max_leaf_nod": [111, 117, 126, 199, 318, 360, 414, 555, 556, 557, 558, 559, 560, 562, 563, 564, 907, 908, 909, 910, 1033, 1039, 1041], "max_n": [586, 587, 589, 1030], "max_n_alpha": [649, 653], "max_nbyt": 953, "max_no_improv": [42, 61, 64, 447, 535, 536, 537, 544, 1044, 1045], "max_patch": [50, 415, 581, 582, 1038], "max_resourc": [124, 799, 800, 976], "max_resources_": [799, 800], "max_sampl": [128, 163, 414, 553, 554, 555, 556, 561, 562, 563, 632, 1040, 1043, 1046], "max_samples_": 561, "max_skip": 669, "max_subpopul": [216, 677, 1044], "max_thread": [367, 381], "max_train_s": [4, 13, 411, 817, 1037], "max_trial": [669, 983], "max_val": 923, "max_valu": [625, 1041, 1042], "max_x": 236, "maxabs_scal": [394, 868, 1038], "maxabsscal": [368, 403, 863, 884, 977, 997, 1035, 1038, 1039, 1040, 1041, 1046, 1047], "maxent": [656, 657, 983], "maxent_du": 656, "maxi": 1045, "maxim": [85, 86, 90, 95, 105, 124, 178, 250, 251, 261, 265, 269, 270, 293, 310, 317, 338, 342, 356, 360, 377, 394, 404, 407, 410, 412, 414, 416, 417, 547, 592, 608, 609, 642, 643, 646, 667, 677, 678, 718, 796, 799, 800, 810, 868, 874, 884, 981, 983, 986, 987, 990, 992, 1002, 1018, 1021, 1033, 1035, 1040, 1043, 1045], "maxima": 407, "maximesaur": [1045, 1046], "maximis": [138, 246, 291, 981, 990], "maximum": [4, 8, 11, 27, 33, 37, 57, 78, 79, 80, 81, 82, 91, 97, 111, 113, 116, 117, 120, 123, 127, 152, 154, 158, 166, 177, 187, 218, 238, 270, 285, 289, 290, 296, 305, 333, 334, 336, 337, 340, 342, 349, 352, 356, 358, 359, 366, 375, 385, 386, 393, 394, 404, 405, 407, 409, 410, 412, 414, 415, 417, 418, 419, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 452, 455, 457, 459, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 481, 482, 496, 507, 509, 510, 511, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 581, 582, 595, 608, 625, 629, 630, 633, 635, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 674, 675, 676, 677, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 714, 741, 778, 794, 796, 799, 800, 802, 810, 817, 823, 848, 855, 856, 857, 863, 864, 868, 869, 871, 874, 875, 876, 878, 887, 888, 893, 894, 895, 896, 899, 900, 904, 907, 908, 909, 910, 911, 913, 916, 923, 976, 982, 983, 984, 986, 987, 989, 990, 991, 993, 997, 1001, 1002, 1003, 1009, 1022, 1037, 1038, 1040, 1041, 1044, 1045, 1047], "maxin": [1040, 1041], "maxsiz": 615, "maxval": [509, 511], "maxwel": [0, 370, 1040, 1043, 1044, 1045, 1046], "maxwelllzh": 1045, "may_share_memori": 1047, "mayb": [74, 301, 394, 415, 1002, 1008], "mayer": [414, 1042, 1044, 1047], "mayer2022": 414, "mayilvahanan": 407, "mayorov": [1033, 1034, 1035, 1036], "mayur": 1038, "mazari": 1038, "mb": [8, 16, 22, 28, 35, 68, 76, 83, 87, 93, 106, 108, 136, 141, 149, 161, 165, 173, 176, 218, 226, 232, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 351, 353, 354, 361, 375, 386, 494, 901, 902, 903, 904, 905, 1002, 1009, 1026], "mbilling": 1035, "mbillingr": 1040, "mbk": [42, 64], "mbk_means_cluster_cent": 64, "mbk_means_label": 64, "mbk_means_labels_uniqu": 42, "mblondel": [24, 48, 190, 221, 261, 351, 374, 506], "mbnmf": 15, "mc4229": 1041, "mc_clf": 994, "mcar": 127, "mcc": [740, 987, 1044], "mccall": 70, "mccallum": [834, 989], "mccarthi": [1030, 1038], "mcclish": [269, 785], "mcconaghi": 1012, "mccullagh": 983, "mcculloh": [1035, 1036], "mcd": [12, 80, 81, 409, 467, 472], "mcdermott": [1032, 1047], "mcdonald": 12, "mcdowel": 1038, "mcfadden": 987, "mcfee": [1035, 1036], "mcgibbon": [72, 1032, 1033, 1036], "mcgushion": 1039, "mcinn": [407, 1036, 1037, 1038, 1040, 1041, 1046], "mcivor": [1045, 1046], "mcm": [751, 987], "mcm_": 751, "mcmahon": 1047, "mcsherri": [723, 753, 987], "mctiernan": [1044, 1045], "mcve": [385, 392], "md": [220, 221, 222, 223, 384, 686, 690, 692, 1024, 1025, 1030, 1042, 1045], "md5": 1042, "md5_checksum": 374, "md_scale": 220, "mdarii": 1046, "mdbecker": 1012, "mdi": [117, 118, 125, 166, 167, 172, 173, 414, 462, 494, 562, 628, 632, 825, 859, 873, 995, 1009], "mdi_import": [171, 172], "mds_result": 692, "me": [156, 351], "me1": 278, "me2": 278, "me3": 278, "mea": 58, "mean": [4, 5, 6, 8, 11, 13, 14, 15, 17, 19, 24, 25, 27, 34, 36, 37, 38, 40, 42, 44, 46, 49, 50, 53, 54, 55, 60, 68, 71, 79, 80, 81, 82, 86, 90, 92, 95, 98, 99, 100, 101, 102, 111, 113, 114, 117, 120, 121, 124, 125, 127, 132, 133, 134, 147, 148, 151, 156, 158, 160, 163, 166, 169, 170, 179, 181, 188, 190, 192, 195, 196, 199, 201, 205, 206, 208, 214, 215, 216, 217, 223, 225, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 245, 246, 247, 248, 250, 251, 256, 257, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 294, 305, 308, 310, 311, 312, 315, 318, 321, 328, 338, 341, 342, 346, 348, 350, 351, 353, 354, 362, 366, 372, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 394, 398, 404, 405, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 430, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 486, 499, 500, 502, 504, 510, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 586, 587, 588, 589, 592, 595, 600, 604, 605, 606, 607, 608, 609, 611, 620, 625, 626, 628, 630, 631, 632, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 682, 686, 687, 688, 689, 690, 691, 692, 693, 702, 703, 705, 707, 710, 711, 714, 715, 721, 723, 726, 727, 728, 733, 734, 735, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 754, 771, 775, 776, 778, 780, 781, 782, 784, 785, 787, 788, 789, 790, 792, 794, 795, 796, 799, 800, 802, 810, 814, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 863, 864, 868, 869, 871, 875, 877, 879, 880, 885, 887, 888, 890, 892, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 915, 919, 920, 922, 961, 962, 968, 972, 976, 977, 978, 981, 983, 984, 986, 989, 990, 991, 992, 994, 995, 1000, 1001, 1002, 1003, 1007, 1009, 1012, 1018, 1021, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "mean_": [96, 264, 530, 531, 532, 537, 539, 541, 879, 997, 1022, 1038], "mean_absolute_error": [13, 199, 201, 217, 987, 1031, 1033], "mean_absolute_percentage_error": [13, 121, 987, 1042, 1044], "mean_auc": 270, "mean_change_tol": 534, "mean_fit_tim": [117, 285, 796, 810], "mean_fpr": 270, "mean_gamma_devi": [987, 1040], "mean_impute_scor": 164, "mean_l1_ratio": 1033, "mean_pinball_loss": [13, 124, 127, 318, 983, 987, 1043], "mean_pinball_loss_95p": 987, "mean_poisson_devi": [199, 987, 1040], "mean_precis": 258, "mean_precision_": 794, "mean_precision_prior": [245, 251, 794], "mean_precision_prior_": 794, "mean_predict": [13, 158], "mean_predictions_gpr": 151, "mean_prior": 794, "mean_prior_": 794, "mean_recal": 258, "mean_scor": [72, 269, 272, 352, 1043], "mean_score_tim": [117, 258, 261, 796, 810], "mean_shift": [1035, 1038], "mean_square_error": 1031, "mean_squared_error": [7, 122, 124, 125, 195, 199, 201, 203, 205, 217, 362, 414, 749, 987, 1031, 1033, 1040, 1041, 1047], "mean_squared_log_error": [987, 1037, 1043, 1047], "mean_test_": 264, "mean_test_precis": [258, 264], "mean_test_recal": 258, "mean_test_scor": [71, 72, 73, 82, 117, 138, 147, 250, 259, 260, 261, 268, 271, 272, 285, 338, 470, 592, 796, 810, 976, 1036, 1043], "mean_tim": 1036, "mean_tpr": [269, 270], "mean_train_precis": [796, 810], "mean_train_scor": [796, 810, 1036], "mean_tweedie_devi": [217, 987, 1040], "mean_variance_axi": [389, 1036, 1043], "mean_y_pr": 156, "meaning": [37, 172, 225, 292, 353, 404, 411, 415, 416, 546, 726, 727, 735, 780, 781, 784, 848, 991, 1001, 1002, 1030, 1046], "meaningfulli": [199, 987], "meaningless": [170, 415, 901, 904, 1033], "means_": [34, 245, 246, 247, 248, 250, 251, 547, 548, 794, 795], "means_init": [247, 248, 795], "meanshift": [44, 319, 407, 438, 1033, 1034, 1035, 1038, 1040, 1041, 1044, 1045, 1046], "meant": [57, 127, 148, 238, 375, 382, 389, 472, 491, 675, 845, 953, 954, 977, 991, 993, 997, 1031], "meanwhil": [392, 1002], "measur": [4, 7, 8, 10, 11, 13, 19, 25, 37, 38, 49, 58, 60, 61, 96, 114, 115, 124, 128, 135, 148, 151, 156, 166, 168, 169, 170, 175, 188, 193, 198, 199, 203, 205, 217, 253, 258, 260, 266, 267, 273, 276, 310, 342, 351, 352, 366, 375, 377, 382, 386, 394, 404, 406, 409, 411, 412, 413, 414, 415, 447, 450, 460, 496, 513, 536, 538, 545, 549, 555, 556, 557, 558, 561, 562, 563, 602, 605, 606, 609, 625, 629, 656, 688, 690, 696, 700, 702, 703, 705, 707, 710, 711, 714, 715, 718, 722, 723, 724, 726, 728, 733, 734, 736, 737, 740, 744, 752, 753, 754, 779, 780, 781, 783, 784, 785, 786, 789, 792, 820, 822, 825, 845, 876, 888, 907, 908, 909, 910, 977, 983, 985, 990, 992, 993, 995, 1001, 1003, 1009, 1018, 1021, 1030, 1033, 1035, 1036, 1038, 1040], "mechan": [39, 235, 347, 351, 367, 380, 382, 405, 407, 415, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 985, 1003, 1012], "mecopur": 1047, "med": [19, 70, 269, 375, 997, 1023], "meda": [75, 169, 987], "media": [407, 1005, 1012], "median": [4, 13, 37, 71, 75, 80, 81, 124, 163, 164, 169, 201, 205, 216, 230, 238, 305, 316, 318, 319, 375, 409, 414, 416, 438, 452, 456, 459, 472, 550, 552, 556, 563, 595, 625, 628, 633, 668, 669, 677, 719, 750, 846, 877, 889, 908, 910, 977, 997, 1003, 1033, 1034], "median_absolute_error": [75, 169, 987, 1034, 1040, 1042], "median_predict": 13, "medic": [263, 411, 710, 983, 1012], "medicin": [263, 710, 987], "medina": [1030, 1032], "medinc": [305, 317, 375, 488], "medium": [3, 166, 234, 275, 312, 338, 407, 641, 873, 980, 983], "medoid": 444, "medoids_": 444, "medri": 1033, "meekail": [0, 1, 1044, 1045, 1046, 1047], "meer": [63, 407, 446], "meet": [380, 392, 395, 416, 570, 601, 856, 857, 896, 987, 1000, 1012, 1038, 1039, 1040], "megabyt": 1044, "megasari": 1042, "meghann": [1038, 1040], "mehak": 1037, "mehdi": [1034, 1043], "mehgarg": 1045, "mehmet": [1037, 1043], "mehmetcanakbai": 1045, "mehrdad": 1044, "mehta": [1034, 1035, 1036, 1038, 1039, 1040, 1041, 1045, 1046], "mehul": 1037, "mei": [1035, 1040], "meier": 1037, "meila": 407, "mein": 415, "meinshausen": 183, "meirel": 1041, "meketon": 1037, "melani": [1012, 1037, 1038], "melderi": 1038, "melemo2": 1044, "meli": [1043, 1044, 1045], "melissa": 1038, "mellon": 894, "melnik": 1045, "melsyt": [1038, 1039], "mem": [16, 22, 28, 35, 54, 68, 76, 83, 87, 93, 106, 108, 136, 141, 149, 161, 165, 173, 176, 218, 226, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 354, 361, 386, 506, 507, 1009], "member": [0, 351, 352, 375, 380, 383, 395, 407, 422, 440, 444, 446, 449, 451, 490, 553, 554, 555, 556, 561, 562, 563, 564, 579, 656, 657, 664, 665, 666, 674, 675, 676, 702, 703, 713, 715, 728, 733, 734, 754, 783, 792, 796, 899, 983, 990, 1014, 1030, 1042, 1045], "membership": [56, 395, 404, 406, 407, 509, 510, 511, 512, 513, 517, 520, 1002], "memit": 386, "memmap": [367, 375, 394, 412, 506, 532, 1038, 1047], "memoiz": [72, 375, 394], "memor": 171, "memori": [8, 54, 71, 72, 99, 169, 170, 285, 311, 315, 317, 319, 320, 351, 352, 353, 367, 368, 374, 380, 383, 389, 392, 394, 407, 408, 411, 412, 415, 418, 419, 439, 440, 441, 442, 443, 444, 445, 447, 448, 452, 455, 457, 466, 471, 477, 494, 501, 506, 507, 531, 532, 533, 536, 539, 553, 554, 555, 556, 561, 562, 563, 564, 579, 580, 586, 587, 589, 644, 645, 646, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 674, 675, 676, 677, 678, 679, 682, 775, 776, 777, 778, 796, 802, 810, 818, 820, 821, 822, 823, 826, 827, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 859, 860, 877, 879, 889, 890, 892, 897, 899, 900, 907, 908, 909, 910, 920, 956, 972, 983, 989, 990, 997, 999, 1000, 1002, 1003, 1008, 1012, 1014, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "memory_profil": [386, 397, 400], "memoryerror": [1038, 1042], "memoryview": 381, "men": 377, "menes": 1045, "meng": [1030, 1031, 1034, 1036, 1037], "menoci": 1048, "menon": 405, "mensch": [214, 215, 1035, 1036, 1037, 1038], "mention": [55, 86, 111, 217, 316, 362, 366, 380, 384, 385, 392, 407, 694, 891, 892, 976, 981, 983, 1008, 1011, 1012, 1023, 1037, 1038, 1039], "menu": 397, "menuet": 1039, "mercer": 979, "mere": [4, 260, 394, 826, 1001], "merg": [39, 41, 46, 51, 318, 378, 380, 383, 388, 392, 395, 407, 438, 439, 440, 443, 444, 461, 816, 1022, 1030, 1037], "merit": [380, 384, 395], "meritocrat": 395, "merritt": 1036, "mersenn": 1041, "merz": 405, "mesfer": 1043, "mesh": [58, 120, 130, 153, 233, 291, 299, 307, 330, 334], "meshgrid": [11, 26, 42, 58, 80, 120, 130, 152, 153, 154, 155, 157, 170, 210, 211, 212, 213, 225, 228, 249, 289, 296, 299, 307, 308, 330, 337, 338, 343, 344, 347, 348, 629], "meshulam": 1033, "meson": [378, 383, 397, 400], "mess": 1044, "messag": [38, 44, 62, 70, 95, 235, 351, 352, 375, 378, 379, 380, 384, 385, 388, 389, 407, 438, 452, 466, 537, 541, 546, 572, 625, 710, 796, 799, 800, 802, 810, 818, 823, 826, 828, 848, 856, 857, 897, 918, 919, 920, 923, 926, 950, 971, 987, 997, 1030, 1034, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "met": [119, 235, 382, 416, 532, 539, 625, 669, 983, 987, 1038], "meta": [56, 70, 110, 135, 136, 166, 199, 235, 265, 269, 277, 279, 281, 321, 322, 356, 359, 362, 374, 378, 382, 384, 392, 394, 398, 403, 405, 416, 417, 427, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 579, 580, 586, 588, 589, 592, 595, 601, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 796, 797, 798, 803, 805, 812, 814, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 947, 976, 988, 1008, 1009, 1010, 1025, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1044, 1045, 1047], "meta_clf_sample_weight": 235, "meta_est": 235, "metaclassifi": [235, 236], "metaclassifierifittedmetaclassifi": 235, "metadata": [8, 56, 109, 159, 166, 180, 227, 243, 352, 369, 374, 375, 401, 421, 424, 427, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 944, 945, 946, 947, 971, 987, 1007, 1008, 1009, 1014, 1025, 1046], "metadata_rout": [235, 406, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910], "metadatarequest": [235, 421, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 467, 468, 469, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 593, 594, 596, 597, 598, 601, 608, 609, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 652, 654, 655, 656, 658, 660, 662, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 944, 946, 1047], "metadatarout": [235, 435, 462, 470, 553, 554, 561, 567, 568, 595, 625, 645, 649, 651, 653, 657, 659, 661, 663, 669, 671, 673, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 858, 859, 946, 1047], "metaestim": [56, 382, 394, 406, 896, 1034, 1043, 1044, 1047], "metaestimatormixin": 235, "metaireau": [1030, 1033], "metal": 403, "metaregressor": 235, "metatransfom": 1035, "meteorologi": 405, "meth_nam": 309, "method": [4, 8, 12, 13, 17, 19, 20, 24, 25, 26, 27, 36, 37, 39, 40, 41, 44, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 61, 65, 67, 68, 69, 72, 76, 79, 80, 84, 86, 87, 92, 95, 98, 100, 103, 104, 105, 109, 111, 116, 118, 119, 125, 132, 143, 144, 148, 163, 175, 186, 188, 200, 207, 216, 219, 221, 223, 224, 225, 226, 228, 232, 234, 235, 236, 238, 242, 244, 247, 252, 262, 265, 266, 267, 268, 269, 278, 283, 289, 290, 292, 305, 309, 312, 315, 317, 318, 341, 351, 352, 353, 360, 362, 366, 367, 368, 369, 372, 377, 378, 380, 381, 382, 386, 387, 389, 392, 393, 396, 398, 401, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 457, 460, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 502, 510, 512, 520, 523, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 708, 709, 728, 729, 732, 733, 738, 739, 760, 765, 766, 771, 775, 780, 785, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 887, 888, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 914, 922, 936, 943, 944, 945, 946, 947, 948, 953, 956, 971, 972, 975, 976, 977, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1009, 1012, 1014, 1018, 1020, 1021, 1023, 1024, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "method_map": [235, 944], "method_max_it": [543, 544, 1040], "method_nam": [235, 944, 947], "methodmap": [235, 944], "methodmetadatarequest": 943, "methodol": 997, "methodolog": [411, 1011], "methodologi": [539, 872, 977, 987, 1012], "methodpair": 945, "metric": [4, 6, 7, 11, 13, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 42, 44, 47, 48, 49, 52, 58, 60, 62, 64, 68, 70, 75, 82, 111, 116, 122, 123, 125, 126, 127, 132, 145, 148, 152, 163, 166, 168, 169, 171, 183, 188, 194, 195, 199, 201, 203, 205, 217, 223, 229, 232, 233, 238, 241, 253, 254, 256, 257, 258, 260, 261, 263, 267, 269, 270, 271, 276, 281, 283, 285, 293, 296, 302, 305, 310, 315, 316, 318, 319, 320, 321, 322, 325, 326, 328, 329, 351, 352, 362, 366, 369, 372, 375, 380, 382, 392, 393, 394, 396, 398, 402, 405, 412, 413, 414, 417, 418, 424, 435, 439, 442, 443, 444, 448, 452, 453, 454, 455, 460, 467, 518, 533, 547, 548, 549, 551, 553, 555, 556, 557, 559, 560, 562, 563, 565, 567, 576, 600, 608, 618, 626, 629, 632, 636, 637, 638, 639, 640, 641, 656, 657, 661, 664, 666, 672, 673, 674, 686, 688, 690, 692, 694, 796, 799, 800, 802, 810, 818, 820, 821, 822, 824, 827, 828, 829, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 865, 871, 894, 895, 899, 901, 904, 907, 909, 977, 979, 982, 984, 988, 990, 993, 995, 1007, 1008, 1009, 1018, 1019, 1023, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "metric_kwarg": [776, 777], "metric_obj": 697, "metric_param": [418, 442, 444, 448, 453, 454, 455, 686, 690, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 1034, 1037, 1044], "metsi": [834, 989], "metzen": [0, 1, 24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234, 1030, 1033, 1034, 1035, 1036], "mexican": 104, "meyer89": 1041, "mferrari3": [1038, 1039], "mgrid": [14, 140], "mhg": 1035, "mi": [27, 37, 143, 407, 605, 606, 702, 752, 754, 977, 987, 1001], "mia": 1045, "miao": 1043, "mib": [366, 466, 897], "mic": [880, 997], "micah": 1040, "micci": [880, 997], "mice": [374, 625, 977], "miceprotein": 374, "michael": [377, 405, 407, 448, 626, 635, 689, 794, 977, 983, 1012, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1044, 1045, 1047], "michal": [1034, 1037, 1043, 1044], "michali": 407, "michalkrawczyk": [1043, 1044], "micha\u0142": 1041, "micha\u0142owski": 1039, "michel": [0, 2, 47, 67, 1030, 1032, 1033, 1035, 1037, 1044, 1045], "michelbach": 1034, "michiaki": 1036, "micka\u00ebl": [1038, 1039], "micky774": [1044, 1045], "micro": [10, 296, 329, 366, 705, 711, 726, 727, 735, 780, 781, 784, 785, 987, 1030, 1038, 1039, 1045, 1048], "micro_roc_auc_ovr": 269, "microarrai": [404, 449, 511, 626, 977], "microcontrol": 1007, "microml": 1007, "micromlgen": 1007, "microphon": 96, "microryzomi": [11, 296, 375, 496], "microryzomys_minutu": 496, "microryzomys_minutus_0": 11, "microsoft": [0, 12, 378, 381, 397], "mid": [26, 338, 987, 989], "middl": [4, 24, 34, 60, 100, 183, 347, 377, 994, 997], "mideast": [19, 375], "midina": 1037, "midnight": 4, "midpoint": 338, "midpointnorm": 338, "midvidi": 1043, "midwest": [148, 377], "might": [0, 4, 5, 13, 31, 42, 44, 60, 62, 70, 120, 127, 130, 145, 157, 164, 169, 170, 171, 175, 199, 217, 228, 260, 262, 286, 300, 317, 342, 348, 362, 366, 367, 374, 378, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 397, 401, 405, 408, 411, 412, 413, 414, 415, 417, 432, 441, 486, 494, 499, 501, 506, 513, 521, 534, 553, 554, 555, 559, 560, 562, 577, 578, 580, 608, 609, 625, 648, 652, 653, 654, 656, 657, 674, 676, 690, 754, 791, 799, 800, 823, 848, 864, 879, 892, 911, 913, 915, 919, 920, 936, 956, 976, 977, 979, 981, 983, 984, 986, 987, 989, 990, 994, 995, 997, 1002, 1003, 1023, 1031, 1033, 1038, 1039, 1041, 1044, 1045, 1046, 1047], "mignon": [1030, 1033, 1034, 1037], "migrat": [380, 1030], "miguel": [1040, 1048], "miguelbarao": 1040, "mihael": [407, 448, 455], "mihevc": 1040, "mike": 1037, "mikebenfield": 1037, "miketip": [532, 539], "mikhail": [1031, 1032, 1033, 1036, 1037, 1045, 1046], "miki": 1047, "mikulski": 1041, "milajev": 1034, "milan": 1042, "milana2": 1044, "mileag": 366, "milen": 1037, "mileston": 384, "militari": 70, "mill": 1040, "millawel": 1044, "miller": [375, 1038, 1039, 1043], "million": [42, 56, 156, 175, 415, 690, 984, 1002, 1012, 1044, 1045], "millman": [0, 2, 1039, 1046, 1047], "milman": 1038, "miln": 375, "miltenberg": 1045, "milton": 1047, "milutinov": 1039, "mimic": [163, 199, 351, 814], "mimicri": 351, "min": [4, 10, 11, 12, 13, 14, 25, 27, 31, 52, 58, 75, 95, 98, 111, 113, 120, 123, 124, 130, 140, 148, 153, 155, 156, 157, 164, 169, 181, 187, 188, 194, 201, 202, 205, 221, 232, 233, 236, 281, 289, 290, 296, 299, 301, 305, 307, 308, 310, 330, 344, 347, 389, 407, 410, 412, 480, 481, 483, 510, 532, 533, 536, 538, 539, 547, 548, 561, 625, 629, 630, 652, 653, 654, 655, 680, 681, 702, 738, 754, 777, 799, 800, 848, 856, 857, 869, 878, 885, 936, 952, 978, 983, 987, 990, 997, 1036, 1039, 1041, 1042, 1045], "min_": [318, 407, 414, 869, 983, 997, 1001, 1002, 1003], "min_arg": 13, "min_batch_s": 939, "min_bin_freq": [446, 459], "min_c": 989, "min_categori": [835, 1042], "min_cluster_s": [44, 65, 321, 407, 444, 448, 454, 1039], "min_degre": [874, 1043], "min_df": [15, 19, 70, 261, 329, 351, 352, 415, 586, 589, 1030, 1032, 1041], "min_dist": 232, "min_estim": 115, "min_faces_per_person": [6, 375, 492, 1019], "min_features_to_select": [147, 592, 1038], "min_frequ": [319, 321, 872, 873, 997, 1044, 1046], "min_grad_norm": [690, 1036], "min_i": 236, "min_idf": 1043, "min_impurity_decreas": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 1003, 1037], "min_impurity_split": 1037, "min_max_axi": 1039, "min_max_scal": 997, "min_n": [586, 587, 589, 1030], "min_n_compon": 232, "min_po": 389, "min_resourc": [124, 799, 800], "min_resources_": [799, 800], "min_sampl": [44, 49, 65, 392, 394, 407, 418, 442, 444, 448, 453, 454, 455, 669, 983, 1039, 1043], "min_sample_split": 1045, "min_samples_leaf": [117, 123, 124, 171, 315, 318, 356, 414, 555, 556, 557, 558, 559, 560, 562, 563, 564, 907, 908, 909, 910, 1003, 1036], "min_samples_split": [124, 125, 126, 264, 272, 306, 317, 414, 555, 556, 557, 558, 562, 563, 564, 799, 800, 907, 908, 909, 910, 976, 1003, 1036], "min_val": [916, 923], "min_valu": [625, 1041, 1042], "min_w": 983, "min_weight_fraction_leaf": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 1003, 1033, 1036, 1037], "min_x": 236, "mina": [1040, 1041], "mincovdet": [80, 81, 409, 467, 468, 471, 473, 474, 993, 1030, 1037], "mind": [100, 127, 168, 169, 170, 217, 309, 310, 351, 352, 362, 380, 401, 409, 411, 414, 644, 645, 702, 983, 1002, 1007, 1014, 1021], "minden": [407, 450, 460], "mine": [0, 260, 352, 375, 407, 418, 442, 509, 561, 718, 731, 737, 780, 983, 987, 993, 999], "ming": [561, 993, 1034, 1038, 1039, 1040, 1044], "minghui": [1037, 1038], "mingw": 1033, "minh": 1038, "mini": [8, 64, 95, 319, 368, 394, 415, 438, 440, 445, 447, 449, 451, 529, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 991, 992, 1030, 1041, 1043], "mini_batch": [449, 451], "minibatch": [8, 44, 407, 412, 447, 532, 674, 855, 856, 857, 1007, 1030], "minibatch_iter": 8, "minibatch_kmean": 352, "minibatch_s": [8, 368], "minibatchdictionarylearn": [95, 98, 368, 412, 529, 536, 540, 543, 544, 1031, 1033, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "minibatchkmean": [19, 36, 38, 40, 43, 44, 50, 58, 59, 60, 61, 63, 68, 91, 166, 352, 368, 407, 412, 438, 440, 445, 510, 776, 1009, 1031, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "minibatchnmf": [15, 368, 412, 1044, 1046, 1047], "minibatchsparsepca": [529, 531, 535, 538, 540, 541, 543, 544, 1030, 1031, 1041, 1043, 1044, 1045, 1046, 1047], "miniconda": 397, "miniforg": [378, 388, 397], "miniforge3": [378, 388], "minim": [4, 12, 13, 27, 57, 66, 78, 79, 124, 151, 159, 178, 195, 197, 199, 201, 203, 207, 217, 220, 231, 232, 245, 250, 261, 269, 270, 305, 315, 318, 335, 342, 346, 356, 369, 379, 380, 383, 388, 392, 394, 405, 407, 409, 412, 414, 438, 439, 443, 444, 448, 461, 536, 538, 545, 555, 556, 557, 558, 562, 563, 607, 608, 609, 639, 644, 647, 655, 656, 665, 669, 670, 672, 676, 677, 685, 690, 692, 693, 745, 777, 846, 848, 857, 875, 887, 893, 907, 908, 909, 910, 983, 984, 987, 990, 991, 997, 999, 1000, 1001, 1002, 1007, 1010, 1021, 1022, 1025, 1034, 1039, 1040], "minima": [157, 187, 412, 445, 690, 984, 1022, 1038], "minimal_reproduc": 388, "minimalist": [385, 415, 1011], "minimis": [13, 259, 407, 411, 656, 657, 1003], "minimum": [9, 55, 57, 80, 124, 125, 127, 147, 188, 209, 232, 238, 270, 289, 290, 382, 389, 397, 400, 404, 407, 414, 415, 439, 443, 444, 448, 452, 454, 467, 468, 471, 472, 473, 474, 509, 511, 539, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 592, 625, 629, 630, 633, 635, 666, 669, 674, 676, 677, 680, 681, 690, 703, 722, 776, 777, 799, 800, 820, 835, 856, 857, 868, 869, 872, 873, 874, 878, 892, 893, 906, 907, 908, 909, 910, 916, 919, 920, 923, 939, 984, 987, 991, 993, 997, 999, 1003, 1030, 1033, 1037, 1038, 1042, 1043, 1047], "minimum_cluster_s": 407, "minka": [102, 539, 983], "minknowski": 1043, "minkowski": [418, 442, 448, 453, 454, 455, 686, 697, 775, 776, 777, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 990, 1030, 1033, 1044, 1045, 1046], "minkowski_dist": [448, 455, 686, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853], "minkowskidist": [697, 1043], "minmax_scal": [302, 305, 869, 1035, 1038], "minmaxscal": [4, 5, 72, 144, 175, 221, 238, 300, 317, 368, 403, 408, 462, 885, 977, 997, 1032, 1035, 1038, 1040, 1041, 1042, 1046, 1047], "minmaxscalerminmaxscal": 72, "minnesota": 407, "minor": [238, 263, 267, 375, 383, 395, 494, 987, 1030, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "minu": [260, 757, 987], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 375, 380, 984, 1006], "minutu": [11, 296, 375, 496], "minval": [509, 511], "minwoo": 1030, "minyushkin": 1036, "miola": 1045, "miott": [1030, 1033], "miotto": 1041, "mir": 415, "miroslav": [1031, 1032, 1035], "mirror": [836, 976], "mirza": 1043, "misa": 1045, "misc": [19, 53, 98, 261, 329, 351, 352, 353, 375, 1022], "misc_featur": 238, "miscalibr": 27, "miscellan": [243, 369, 373, 374, 1009, 1036, 1037, 1044, 1045, 1047, 1048], "miscfeatur": 132, "misclassif": [7, 111, 342, 793, 1001, 1002, 1003, 1031], "misclassifi": [34, 111, 254, 342, 351, 1002], "misclassification_error": 111, "misdetect": 1047, "mise": 1007, "mish": 415, "mishra": [1042, 1043], "mislabel": [254, 414, 989], "mislead": [37, 118, 119, 125, 169, 381, 396, 414, 551, 552, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 1025, 1043], "mismatch": [44, 986, 1039], "misread": 225, "miss": [71, 132, 148, 165, 171, 230, 240, 260, 283, 316, 320, 362, 366, 369, 372, 375, 377, 379, 380, 382, 384, 385, 394, 403, 406, 407, 408, 409, 444, 470, 488, 494, 496, 499, 555, 556, 559, 560, 562, 563, 564, 625, 626, 627, 628, 637, 643, 670, 688, 692, 724, 766, 821, 842, 860, 868, 869, 873, 875, 876, 879, 880, 884, 887, 888, 890, 907, 908, 909, 910, 983, 984, 987, 1007, 1008, 1009, 1010, 1012, 1025, 1032, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "missclassif": 111, "missforest": [163, 977], "missing": [127, 414, 625, 626, 628, 1039], "missing_featur": [163, 164], "missing_fract": 127, "missing_fraction_list": 127, "missing_r": 164, "missing_sampl": [163, 164], "missing_valu": [163, 164, 240, 394, 625, 626, 627, 628, 766, 977, 1038, 1039], "missingind": [625, 626, 628, 977, 1038, 1039, 1040, 1044, 1046], "mission": [0, 352, 1012], "misspecifi": 27, "misspel": 415, "mistak": [111, 145, 326, 362, 407, 411, 732, 870, 884, 885, 887, 888, 889, 890, 983, 988], "misti": [4, 170], "mit": [278, 375, 386, 407, 417, 608, 609, 612, 617, 620, 641, 664, 665, 674, 836, 980], "mitar": 1039, "mitig": [27, 55, 127, 171, 312, 367, 368, 984, 1003, 1021, 1022, 1042], "mitra": [1040, 1041, 1045], "mitrov": 1039, "mitzi": [1043, 1044], "miwojc": 1044, "mix": [4, 62, 69, 70, 76, 96, 97, 121, 166, 169, 199, 230, 240, 242, 261, 305, 311, 374, 382, 392, 394, 408, 412, 419, 462, 464, 465, 494, 531, 536, 538, 545, 598, 602, 628, 644, 645, 650, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 796, 810, 825, 859, 872, 873, 879, 880, 951, 958, 961, 983, 992, 1009, 1022, 1042, 1044, 1045], "mixed_encoded_preprocessor": 311, "mixed_pip": 311, "mixed_target": 311, "mixin": [380, 394, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 599, 930, 1032, 1041, 1045], "mixing_": [96, 97, 531, 1022], "mixtur": [7, 9, 34, 44, 55, 57, 65, 92, 102, 154, 164, 187, 247, 248, 252, 271, 288, 293, 296, 322, 369, 375, 376, 394, 407, 412, 413, 417, 621, 796, 1007, 1008, 1009, 1024, 1025, 1030, 1034, 1035, 1036, 1037], "mizil": [25, 27, 405, 435, 437], "mizuki": 1044, "mk": 1003, "mkdir": [8, 386, 388], "mkdtemp": [54, 408], "mkl": [366, 367, 378, 392, 955, 1030], "mkl_num_thread": 367, "mks542": 181, "mksol": 70, "ml": [8, 148, 278, 374, 377, 385, 498, 500, 508, 983, 985, 1007, 1008, 1012], "mlant": 1044, "mlb": [375, 870], "mlc": 377, "mlcomp": 1030, "mld": 8, "mldata": [1030, 1038], "mle": [80, 102, 539, 1038, 1041], "mlewis1729": 1037, "mlflow": 1007, "mlg": 1034, "mlinari\u0107": 1045, "mline": [9, 80, 213, 289, 337, 340], "mlle": [687, 691, 984], "mlliou112": 1037, "mlo": 156, "mlondschien": 1043, "mlop": 1007, "mlp": [166, 170, 239, 298, 300, 303, 494, 569, 825, 856, 857, 991, 1009], "mlp_disp": 239, "mlp_model": 170, "mlp_preprocessor": 170, "mlpclassifi": [31, 126, 139, 166, 206, 298, 299, 301, 303, 368, 500, 502, 512, 520, 569, 855, 857, 869, 988, 991, 1009, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "mlpregressor": [4, 170, 239, 368, 855, 856, 991, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "mlpregressormlpregressor": 239, "mlxtend": 1007, "mm": 175, "mm_bunch": 11, "mmap_mod": 953, "mmm": 12, "mmse": [79, 409, 420, 473], "mn193": 1047, "mnb": 989, "mnist": [30, 166, 177, 190, 207, 214, 218, 283, 298, 300, 303, 346, 494, 569, 656, 825, 856, 879, 922, 983, 991, 1009], "mnist_10000": 283, "mnist_20000": 283, "mnist_784": [207, 215, 283, 301], "mo": [320, 1041], "mobil": 388, "mock": 1040, "mockdatafram": 1040, "mod": 406, "modal": [228, 472, 938], "mode": [9, 10, 46, 47, 80, 199, 228, 283, 285, 302, 315, 378, 380, 388, 389, 392, 404, 410, 414, 418, 441, 442, 445, 447, 450, 457, 460, 469, 470, 476, 480, 485, 506, 507, 555, 559, 562, 590, 593, 594, 596, 597, 598, 608, 625, 642, 643, 656, 657, 664, 666, 671, 672, 673, 674, 677, 680, 681, 687, 691, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 855, 899, 901, 904, 907, 909, 925, 935, 936, 938, 990, 993, 1007, 1014, 1015, 1022, 1031, 1039, 1044, 1047], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 34, 39, 40, 41, 48, 49, 54, 55, 56, 58, 61, 69, 71, 72, 73, 76, 78, 80, 82, 86, 94, 95, 104, 105, 106, 110, 111, 112, 114, 116, 120, 123, 124, 126, 127, 129, 131, 132, 135, 136, 138, 140, 142, 144, 145, 149, 154, 155, 157, 158, 159, 160, 164, 167, 168, 172, 173, 179, 181, 184, 185, 186, 189, 190, 192, 194, 195, 196, 200, 201, 203, 204, 205, 207, 211, 212, 214, 215, 216, 218, 228, 231, 236, 245, 247, 248, 249, 252, 254, 255, 256, 258, 261, 263, 264, 265, 266, 268, 269, 273, 274, 276, 278, 283, 285, 286, 287, 289, 292, 296, 306, 309, 311, 312, 315, 317, 319, 320, 321, 325, 326, 335, 337, 338, 339, 340, 341, 343, 344, 346, 348, 352, 353, 357, 358, 359, 362, 369, 372, 374, 375, 383, 386, 394, 396, 398, 403, 404, 405, 407, 408, 410, 412, 413, 414, 415, 416, 417, 426, 430, 432, 435, 440, 447, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 488, 494, 496, 498, 499, 500, 501, 507, 520, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 586, 587, 589, 591, 592, 595, 600, 604, 607, 608, 609, 613, 625, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 699, 704, 709, 719, 720, 721, 731, 732, 738, 747, 750, 782, 785, 786, 789, 794, 795, 796, 799, 800, 801, 802, 810, 811, 812, 813, 817, 818, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 844, 845, 846, 848, 850, 855, 856, 857, 859, 860, 862, 864, 866, 871, 872, 874, 875, 876, 878, 879, 880, 884, 885, 887, 888, 889, 890, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 914, 971, 977, 979, 980, 981, 984, 985, 988, 990, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1012, 1015, 1017, 1019, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035], "model_1": 260, "model_1_scor": 260, "model_2": 260, "model_2_scor": 260, "model__estimator__max_depth": 976, "model_coef": 168, "model_color": 345, "model_detail": 120, "model_displai": 116, "model_from_prevision_vers": 401, "model_i": 260, "model_i_scor": 260, "model_idx": 238, "model_k": 260, "model_k_scor": 260, "model_l1": 346, "model_l2": 346, "model_nam": [117, 238, 281], "model_no_cf": 312, "model_param": 214, "model_prop": 4, "model_scor": [260, 281], "model_select": [4, 5, 6, 7, 10, 13, 24, 25, 27, 31, 32, 54, 71, 72, 73, 74, 75, 78, 86, 100, 102, 111, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 138, 144, 145, 147, 151, 163, 164, 166, 168, 169, 171, 172, 175, 183, 194, 199, 201, 206, 207, 214, 215, 217, 229, 234, 238, 240, 241, 242, 247, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 285, 286, 287, 291, 292, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 320, 322, 328, 329, 338, 341, 346, 356, 360, 362, 369, 380, 382, 385, 393, 394, 398, 403, 408, 411, 414, 435, 436, 556, 558, 565, 566, 577, 657, 695, 696, 698, 700, 739, 827, 830, 848, 856, 857, 859, 907, 908, 909, 910, 955, 976, 977, 982, 987, 989, 990, 995, 997, 1002, 1008, 1009, 1018, 1019, 1023, 1027, 1034, 1036, 1037], "model_step": 4, "model_titl": 120, "model_with_cf": 312, "moder": [260, 380, 417, 452, 993], "modern": [4, 127, 415, 466, 501, 588, 688, 692, 727, 897, 984, 1007, 1008, 1046], "modif": [380, 410, 414, 415, 444, 1000, 1047, 1048], "modifi": [31, 45, 51, 73, 75, 89, 90, 182, 183, 196, 197, 209, 220, 221, 222, 235, 238, 247, 321, 343, 348, 380, 382, 384, 394, 407, 414, 417, 441, 445, 452, 457, 466, 480, 481, 482, 483, 493, 508, 579, 608, 609, 611, 617, 674, 676, 687, 691, 726, 727, 765, 780, 781, 784, 917, 969, 970, 983, 1000, 1001, 1008, 1020, 1024, 1025, 1030, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045], "modified_fil": 380, "modified_hub": [7, 674, 1001], "modified_huber_loss": 209, "modified_tol": [687, 691], "modrak": [1045, 1046], "modroiu": 987, "modul": [36, 37, 49, 53, 77, 84, 88, 94, 95, 110, 142, 150, 160, 162, 166, 167, 174, 177, 214, 219, 220, 244, 253, 277, 278, 280, 284, 298, 300, 301, 304, 324, 333, 350, 355, 358, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 392, 394, 396, 397, 401, 405, 406, 407, 410, 414, 415, 416, 418, 442, 501, 533, 577, 578, 657, 928, 976, 981, 983, 985, 987, 988, 991, 993, 994, 997, 999, 1001, 1003, 1004, 1012, 1017, 1018, 1023, 1031, 1032, 1033, 1035, 1036, 1040, 1044], "modulo": [415, 1041], "moeller": 1036, "mogavero": 1040, "moham": [1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "mohamedbsh": 1045, "mohammad": [1038, 1039], "mohit": [1044, 1047], "mohn": [1038, 1042], "mohr": 1036, "moin": 1042, "mois\u00e9": 999, "moitra": [1030, 1031, 1032], "mojca": 1041, "mojdeh": 1047, "mola": [1041, 1047], "molden": 1032, "molecul": 984, "molin": 1045, "molla": [1031, 1032], "molnar": [170, 994], "moment": [366, 412, 417, 438, 613, 621, 856, 857, 951, 991, 992], "momentum": [300, 856, 857, 991], "mon": [4, 127, 170], "mona": [150, 151, 157, 158, 161, 166, 417, 494, 609, 613, 620, 621, 623, 1009], "monaf": 1045, "monei": [0, 217, 1012], "monitor": [122, 183, 207, 383, 394, 551, 552, 557, 558, 559, 560, 991, 1011, 1033, 1038, 1040, 1042], "mono": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682], "monografia": 983, "monomi": 200, "monotoinc": 316, "monoton": [4, 25, 110, 136, 166, 170, 217, 231, 239, 316, 405, 555, 556, 559, 560, 562, 563, 630, 633, 634, 692, 704, 875, 887, 901, 904, 907, 908, 909, 910, 984, 988, 997, 1002, 1009, 1037, 1041, 1045, 1047], "monotonic_cst": [127, 129, 316, 318, 322, 414, 555, 556, 559, 560, 562, 563, 907, 908, 909, 910, 1045], "mont": [233, 417, 609, 639, 640, 979, 992], "montecchio": 1034, "montesel": 1048, "month": [0, 4, 156, 170, 311, 375, 380, 384, 395, 1030], "month_co": 4, "month_sin": 4, "monthli": [156, 395, 987], "montoya": 1037, "montreal": 320, "moodi": 1035, "moon": [260, 300, 307, 351, 352, 520], "moonkyung94": 1044, "moor": [0, 732, 987, 1012, 1047], "moosmann": 564, "moradizadeh": 1044, "moral": [19, 71, 351, 656, 1038, 1042, 1043], "morawiec": [1037, 1038], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "moreau": [1036, 1037, 1038, 1039, 1040], "moreov": [138, 157, 307, 319, 362, 384, 407, 411, 417, 892, 957, 987, 995, 1012, 1038, 1044, 1045], "moreyra": 1043, "morgan": [999, 1003, 1005], "mori": 1045, "morikko": 1037, "morina": 1043, "moritz": [1043, 1045], "morn": 4, "moroz": 1036, "morril": 1030, "mors": 1041, "mortem": 1023, "moslei": 987, "mosley2013": 987, "mosold": 132, "most": [4, 6, 8, 12, 14, 19, 24, 27, 52, 53, 55, 62, 78, 85, 86, 103, 111, 117, 118, 125, 127, 132, 143, 144, 145, 147, 148, 156, 164, 168, 169, 170, 171, 172, 175, 183, 199, 200, 217, 235, 239, 245, 251, 257, 258, 263, 267, 268, 270, 278, 281, 292, 305, 311, 312, 315, 318, 321, 326, 338, 342, 351, 352, 353, 362, 366, 367, 368, 375, 376, 378, 380, 382, 384, 385, 386, 388, 392, 394, 395, 397, 398, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 441, 442, 444, 448, 454, 455, 458, 466, 494, 501, 519, 522, 530, 532, 537, 541, 547, 549, 559, 560, 564, 565, 586, 587, 589, 591, 602, 609, 625, 628, 647, 656, 670, 672, 674, 676, 685, 686, 690, 693, 722, 725, 743, 755, 756, 760, 782, 791, 794, 795, 799, 800, 815, 827, 828, 841, 842, 843, 845, 847, 848, 849, 850, 851, 874, 876, 884, 885, 887, 888, 889, 890, 897, 935, 936, 938, 950, 955, 976, 977, 981, 982, 983, 984, 985, 986, 987, 988, 990, 993, 994, 995, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1012, 1019, 1021, 1022, 1023, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1047], "most_common": 19, "most_frequ": [263, 549, 625, 628, 849, 977, 987, 1038, 1040, 1042], "mostli": [0, 46, 70, 199, 217, 310, 388, 392, 394, 412, 414, 415, 519, 776, 777, 1002, 1007, 1012, 1038, 1039, 1040, 1046], "mother": 984, "motiv": [104, 380, 382, 394, 979, 987, 997, 1012, 1043], "motmoti": 1040, "motoda": 407, "motor": 217, "motorcycl": [19, 375], "mottl": [1038, 1039], "moudgalya": [1046, 1047], "moufad": 1045, "moulavi": [407, 444], "mount": 388, "mountain": 1038, "mountford": [1046, 1047], "mous": 374, "mouseid": 374, "moussa": 1036, "move": [27, 120, 261, 302, 338, 379, 380, 384, 386, 405, 407, 547, 548, 569, 570, 571, 573, 575, 576, 954, 1022, 1030, 1031, 1035, 1038, 1040, 1043, 1044], "moveabl": 408, "movelikeriv": 1039, "movement": 375, "movi": [415, 1015], "movie_entri": 415, "movie_review": 1023, "moya": 1042, "mp": 983, "mpce": 19, "mpl": [34, 245, 246, 247, 251, 305], "mpl_toolkit": [11, 45, 67, 90, 101, 170, 196, 220, 222, 296], "mplot3d": [45, 67, 90, 101, 170, 196, 220, 222], "mpoemsl": 1044, "mppca": [532, 539], "mprun": 386, "mpy": 415, "mr": [57, 320, 1031, 1034, 1044], "mrandrewandrad": 1036, "mrastgoo": [1045, 1047], "mrg": [380, 388], "mridul": 1036, "mrinal": 1044, "mrinaltyagi": 1044, "mrl09": 412, "mrmjauh": 1037, "mro": [424, 430, 1040, 1041], "mrs2008": 588, "msabati": 1044, "msc": 377, "mschaffenroth": 1040, "mse": [5, 7, 78, 79, 122, 124, 125, 163, 164, 199, 201, 203, 205, 274, 322, 645, 651, 747, 987, 1003, 1041, 1043], "mse_path_": [188, 645, 649, 651, 653, 659, 661], "mse_valu": 7, "mses_california": 164, "mses_diabet": 164, "msft": 12, "msg": [283, 971], "msle": [748, 987], "msm": [148, 377], "mssubclass": 132, "mst": 407, "msvc": 1033, "msvcp140": 1044, "mt19937": [267, 272, 922, 1041], "mthorrel": [1037, 1040], "mtrand": 362, "mtse": 677, "mu": [15, 80, 81, 260, 412, 420, 471, 473, 474, 477, 478, 479, 538, 545, 981, 983, 1037, 1040], "mu_i": 989, "mu_j": 407, "mu_k": 981, "muayyad": 1038, "much": [4, 6, 7, 9, 13, 19, 25, 40, 55, 80, 82, 92, 98, 104, 116, 124, 125, 132, 133, 134, 151, 163, 164, 169, 170, 171, 172, 175, 196, 197, 201, 232, 235, 238, 260, 262, 263, 266, 271, 301, 306, 310, 311, 312, 317, 318, 320, 338, 343, 351, 352, 362, 366, 367, 368, 375, 380, 381, 382, 385, 388, 392, 393, 397, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 445, 446, 494, 532, 533, 534, 536, 557, 558, 559, 560, 656, 657, 664, 665, 666, 674, 675, 676, 690, 776, 777, 799, 800, 814, 874, 892, 899, 976, 979, 982, 983, 984, 986, 987, 988, 990, 991, 993, 995, 999, 1000, 1002, 1003, 1008, 1012, 1018, 1019, 1021, 1022, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mudd": 1043, "mueller": [0, 1, 74, 100, 115, 190, 233, 327, 346, 347, 1012, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "muhammad": [1038, 1039, 1043], "mukherje": 1041, "mula": 1042, "multi": [11, 31, 50, 91, 110, 112, 114, 115, 120, 122, 130, 133, 135, 136, 140, 143, 153, 155, 166, 177, 183, 185, 186, 187, 188, 191, 198, 206, 215, 218, 219, 222, 226, 227, 228, 236, 239, 243, 253, 257, 269, 271, 276, 281, 298, 303, 306, 307, 308, 315, 320, 330, 334, 343, 344, 348, 351, 355, 356, 357, 358, 360, 361, 367, 375, 377, 382, 383, 389, 394, 397, 407, 414, 415, 417, 424, 435, 450, 460, 467, 472, 493, 494, 502, 503, 508, 512, 513, 517, 518, 520, 539, 547, 548, 549, 551, 553, 555, 556, 557, 559, 562, 563, 565, 567, 608, 629, 631, 641, 644, 645, 650, 651, 655, 656, 658, 659, 660, 661, 664, 666, 670, 671, 672, 673, 674, 679, 682, 688, 701, 711, 718, 731, 737, 739, 780, 796, 810, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 847, 849, 855, 856, 857, 860, 866, 879, 883, 894, 895, 899, 901, 904, 907, 908, 909, 911, 912, 913, 919, 922, 925, 976, 988, 990, 994, 997, 1001, 1007, 1008, 1009, 1010, 1014, 1020, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1047, 1048], "multi_class": [30, 191, 214, 269, 315, 567, 608, 656, 657, 785, 833, 899, 983, 988, 1002, 1030, 1034, 1038, 1043, 1045], "multi_confus": 751, "multi_layer_regressor": 414, "multi_output": [389, 919], "multi_target_forest": 988, "multialign": 272, "multiarch": 388, "multiclass": [26, 30, 117, 177, 191, 215, 218, 229, 236, 238, 241, 253, 257, 265, 267, 270, 276, 279, 281, 300, 302, 335, 347, 356, 369, 375, 376, 382, 383, 385, 394, 398, 407, 414, 435, 450, 460, 487, 494, 502, 555, 557, 559, 562, 565, 566, 569, 592, 600, 608, 629, 630, 631, 656, 657, 664, 666, 671, 672, 673, 674, 700, 704, 706, 726, 727, 731, 732, 735, 740, 751, 780, 781, 784, 785, 786, 791, 796, 797, 799, 800, 801, 802, 810, 812, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 866, 880, 899, 901, 904, 907, 909, 981, 983, 997, 998, 1002, 1003, 1009, 1010, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1045, 1046, 1047], "multicollinear": [118, 119, 148, 166, 167, 171, 173, 266, 328, 410, 498, 562, 632, 653, 825, 983, 995, 1009], "multicor": [1042, 1043], "multidimension": [410, 686, 688, 690, 692, 984, 990], "multigrid": 460, "multiindex": 1044, "multilabel": [85, 88, 93, 166, 227, 243, 267, 278, 280, 282, 328, 375, 382, 383, 394, 402, 480, 485, 494, 495, 506, 507, 513, 521, 539, 555, 562, 565, 656, 672, 673, 701, 705, 711, 723, 726, 727, 731, 732, 735, 736, 751, 753, 780, 781, 784, 785, 791, 793, 825, 828, 830, 832, 856, 863, 866, 870, 872, 883, 904, 907, 909, 925, 949, 950, 951, 998, 1009, 1010, 1023, 1025, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "multilabel_": [828, 1035], "multilabel_confusion_matrix": [711, 726, 727, 735, 781, 784, 987, 1039], "multilabelbinar": [394, 828, 863, 872, 988, 1014, 1033, 1035, 1036, 1038, 1039], "multilay": [392, 985], "multilearn": 1007, "multimetr": [976, 1040, 1045], "multimetric_": [796, 799, 800, 810], "multimod": 228, "multinomi": [8, 30, 166, 177, 190, 208, 214, 218, 236, 255, 269, 301, 346, 375, 376, 380, 412, 414, 494, 510, 521, 549, 551, 557, 559, 567, 629, 656, 657, 738, 825, 833, 834, 835, 836, 837, 838, 879, 922, 987, 988, 1003, 1009, 1010, 1023, 1025, 1030, 1034, 1036, 1037, 1038, 1043, 1044], "multinomialdevi": 1041, "multinomialhmm": 1030, "multinomialnb": [8, 368, 375, 415, 834, 835, 836, 837, 989, 1023, 1032, 1034, 1037, 1038, 1042, 1043, 1045], "multiouput": 1040, "multioutput": [131, 269, 281, 282, 369, 382, 394, 398, 430, 463, 480, 481, 482, 549, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 609, 630, 631, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 785, 787, 788, 820, 828, 842, 850, 857, 866, 900, 902, 905, 907, 908, 909, 910, 925, 950, 951, 987, 1009, 1010, 1025, 1030, 1031, 1032, 1036, 1037, 1043, 1044], "multioutput_arrai": 380, "multioutput_onli": 382, "multioutputclassifi": [398, 785, 828, 830, 832, 987, 1037, 1039, 1040, 1041, 1042, 1046, 1047], "multioutputregressor": [131, 398, 430, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 831, 833, 842, 850, 857, 900, 902, 905, 908, 910, 1036, 1037, 1039, 1041, 1042, 1046, 1047], "multipl": [13, 46, 69, 72, 76, 92, 104, 111, 117, 119, 120, 122, 144, 166, 169, 175, 193, 233, 260, 265, 266, 268, 272, 278, 281, 285, 315, 321, 341, 366, 367, 368, 374, 376, 377, 380, 382, 383, 384, 385, 392, 394, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 442, 458, 462, 464, 465, 467, 472, 486, 489, 490, 493, 494, 495, 501, 502, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 579, 597, 605, 606, 608, 609, 625, 630, 632, 637, 638, 639, 640, 644, 645, 648, 650, 651, 652, 655, 658, 659, 660, 661, 664, 665, 666, 669, 671, 674, 676, 677, 687, 688, 690, 691, 692, 709, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 785, 787, 788, 790, 794, 795, 796, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 821, 822, 823, 825, 829, 830, 831, 832, 833, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 861, 864, 876, 880, 888, 891, 892, 899, 900, 901, 904, 915, 930, 935, 936, 958, 961, 979, 982, 983, 984, 988, 989, 990, 994, 995, 1000, 1001, 1003, 1007, 1008, 1009, 1014, 1023, 1030, 1031, 1033, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "multipleloc": [220, 288], "multiplex": 1003, "multipli": [169, 203, 217, 260, 366, 389, 394, 412, 414, 415, 420, 462, 473, 513, 536, 538, 539, 545, 555, 559, 562, 644, 646, 650, 652, 656, 657, 658, 660, 666, 667, 668, 670, 674, 675, 676, 678, 684, 685, 687, 691, 761, 901, 904, 907, 909, 925, 963, 964, 965, 976, 979, 983, 987, 1001, 1041], "multiprocess": [392, 394, 953, 955, 990, 1030, 1038, 1044], "multirespons": 983, "multiscal": 460, "multisurfac": [148, 377], "multitarget": 389, "multitask": [281, 415, 988], "multitaskelasticnet": [644, 645, 650, 659, 660, 661, 679, 983, 988, 1030, 1037, 1038, 1041, 1043], "multitaskelasticnetcv": [398, 644, 645, 650, 658, 660, 661, 679, 983, 988, 1033, 1040, 1041, 1043, 1047], "multitasklasso": [193, 650, 658, 661, 983, 988, 1030, 1038, 1041, 1043], "multitasklassocv": [398, 659, 660, 988, 1033, 1040, 1041, 1043, 1047], "multithread": [366, 407, 775, 899, 900, 901, 902, 903, 904, 905], "multivari": [95, 169, 372, 409, 412, 415, 471, 514, 515, 516, 625, 626, 627, 628, 647, 669, 676, 677, 834, 835, 836, 837, 838, 981, 983, 986, 989, 1007, 1014, 1022, 1025], "multivariate_norm": [82, 86, 245, 420, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "multiwai": 1003, "muma": 81, "mungui": 1043, "munoz": [1036, 1042], "muoki": 1042, "murad": 1033, "murashkin": 1034, "murata": [1043, 1044], "murder": 351, "murezzda": 1046, "murmurhash": 389, "murmurhash3": [415, 580, 587, 952], "murmurhash3_32": 389, "murmurhash3_x86_32": [389, 952], "murphi": [405, 641, 980], "murrai": [1036, 1037], "music": 1012, "must": [55, 169, 170, 172, 180, 183, 216, 217, 228, 239, 255, 289, 306, 311, 351, 362, 375, 379, 380, 381, 382, 384, 386, 388, 394, 395, 398, 403, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 428, 436, 439, 442, 443, 444, 445, 447, 448, 449, 453, 455, 457, 459, 460, 462, 464, 465, 467, 472, 485, 506, 507, 510, 521, 529, 535, 536, 537, 538, 539, 541, 542, 545, 551, 552, 557, 558, 559, 560, 565, 566, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 608, 609, 615, 618, 625, 626, 627, 628, 630, 631, 636, 640, 641, 646, 647, 650, 656, 657, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 697, 701, 704, 707, 732, 743, 761, 768, 771, 775, 778, 785, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 803, 805, 806, 808, 810, 811, 812, 814, 815, 817, 820, 823, 825, 826, 834, 835, 836, 837, 838, 841, 842, 843, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 859, 862, 863, 864, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 899, 900, 901, 902, 903, 904, 905, 906, 912, 955, 962, 971, 973, 976, 977, 983, 984, 985, 987, 990, 991, 993, 994, 1001, 1002, 1003, 1014, 1023, 1030, 1033, 1037, 1041, 1043, 1044, 1047], "mutat": [362, 1038], "mutual": [37, 38, 49, 55, 58, 142, 144, 149, 166, 394, 414, 416, 444, 590, 593, 594, 597, 598, 604, 605, 606, 607, 702, 703, 713, 752, 754, 783, 792, 976, 983, 987, 988, 1009, 1030, 1036, 1046], "mutual_info_classif": [72, 416, 590, 593, 594, 597, 598, 1036, 1042, 1045, 1048], "mutual_info_regress": [143, 319, 416, 590, 593, 594, 597, 598, 607, 1036, 1037, 1042, 1044, 1045, 1046, 1048], "mutual_info_scor": [37, 407, 702, 987, 1038, 1041, 1042], "mu\u00f1oz": [1043, 1045], "mwestt": 1039, "my": [374, 380, 385, 388, 494], "my_custom_loss_func": 987, "my_data": 385, "my_dataset": 485, "my_estim": [382, 408], "my_extra_param": 382, "my_featur": 380, "my_fil": 386, "my_func": [381, 386], "my_g": [419, 531], "my_group": [235, 398], "my_kernel": [334, 1002], "my_memb": [61, 63, 64], "my_other_weight": [235, 398], "my_pipelin": 1039, "my_script": 367, "my_test_script": 388, "my_token": 415, "my_weight": [235, 398], "myatt": [1039, 1040], "mycach": [506, 507], "mycluster": 425, "myer": [1033, 1037], "myestim": [382, 421, 423, 424, 426, 427, 428, 429, 430], "myestimator0": 423, "myestimator1": 423, "mymultioutputestim": 382, "mypi": [380, 384, 397, 400, 1041], "myself": 380, "mysvmlightfil": 506, "mytransform": [382, 431], "m\u00e9hault": [1038, 1039], "m\u00f6rtberg": 1036, "m\u00fcller": [0, 31, 306, 307, 395, 412, 533, 865, 991, 997, 1001, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044], "n": [4, 5, 7, 8, 10, 11, 15, 17, 19, 32, 33, 37, 39, 40, 58, 70, 75, 80, 85, 92, 95, 98, 100, 102, 104, 105, 111, 113, 114, 118, 134, 143, 148, 151, 155, 160, 170, 172, 179, 183, 195, 199, 200, 203, 214, 216, 217, 220, 231, 232, 233, 236, 245, 247, 248, 258, 260, 263, 265, 266, 267, 269, 270, 283, 286, 288, 302, 307, 309, 310, 317, 320, 322, 326, 332, 342, 346, 360, 366, 374, 377, 378, 380, 384, 386, 389, 394, 397, 398, 404, 405, 407, 410, 411, 412, 413, 414, 415, 417, 418, 442, 443, 445, 446, 448, 467, 469, 472, 476, 487, 513, 514, 515, 516, 521, 526, 536, 538, 539, 545, 555, 556, 557, 558, 561, 562, 563, 564, 586, 587, 588, 589, 605, 606, 612, 625, 647, 669, 677, 690, 694, 697, 704, 705, 752, 801, 804, 806, 811, 812, 815, 835, 839, 840, 844, 864, 891, 893, 907, 908, 909, 910, 916, 934, 939, 940, 962, 966, 967, 976, 979, 981, 983, 984, 987, 988, 989, 990, 991, 993, 994, 997, 999, 1001, 1002, 1003, 1014, 1021, 1023, 1030, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048], "n1": 98, "n2": 98, "n4": 98, "n_": [80, 81, 172, 260, 318, 407, 412, 414, 644, 650, 683, 694, 979, 983, 987, 989, 990, 994, 997, 999, 1002, 1003], "n_alpha": [204, 470, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 671, 673, 679, 680, 681, 682, 1033], "n_atom": 1031, "n_averag": 33, "n_bar": 164, "n_batch_iter_": 534, "n_best": 449, "n_bin": [24, 25, 27, 53, 199, 217, 306, 308, 312, 436, 437, 864, 997], "n_bins_": 864, "n_bootstrap": [263, 1031], "n_bulk_repeat": 10, "n_byte": 232, "n_c": [407, 657], "n_call": [839, 840], "n_candid": [799, 800, 976], "n_candidates_": [272, 799, 800, 976], "n_candidates_0": 976, "n_candidates_i": 976, "n_categori": [312, 835, 873, 997], "n_categorical_featur": [121, 559, 560, 630, 631], "n_categories_": 835, "n_center": [42, 510], "n_channel": [581, 582, 585], "n_class": [6, 37, 91, 92, 111, 113, 118, 120, 145, 147, 214, 221, 233, 236, 247, 267, 268, 269, 292, 293, 315, 357, 360, 362, 380, 382, 394, 414, 435, 486, 487, 500, 513, 517, 521, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 591, 592, 602, 608, 632, 637, 656, 657, 664, 665, 666, 672, 673, 674, 675, 695, 705, 714, 716, 732, 735, 738, 751, 785, 791, 796, 799, 800, 810, 820, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 841, 846, 848, 849, 856, 859, 866, 867, 870, 873, 880, 883, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 909, 911, 912, 924, 925, 983, 987, 988, 991, 998, 1001, 1002, 1019, 1035, 1036, 1037, 1039, 1040, 1041, 1047], "n_classes_": [549, 551, 553, 555, 557, 562, 608, 827, 828, 907, 909, 1031, 1040, 1042], "n_classes_pr": [712, 752], "n_classes_tru": [712, 752], "n_classifi": [30, 567, 568], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 95, 319, 352, 380, 394, 407, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 458, 459, 460, 461, 509, 511, 708, 789, 790, 1022, 1030, 1034, 1036, 1038, 1039, 1041, 1044], "n_clusters_": [38, 49, 55, 63, 439, 443], "n_clusters_list": 43, "n_clusters_per_class": [31, 91, 115, 145, 147, 257, 293, 299, 307, 385, 513, 603, 605], "n_clusters_rang": 37, "n_clusters_tru": 61, "n_col": [6, 19, 95, 237, 422, 449, 451, 509, 511, 630, 1019], "n_color": 48, "n_column": [404, 449, 451], "n_column_clust": [449, 451, 511], "n_comp": [105, 175], "n_comparison": 260, "n_compon": [4, 5, 6, 12, 15, 44, 52, 57, 58, 59, 70, 72, 73, 74, 85, 86, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 130, 175, 198, 220, 221, 222, 223, 224, 225, 228, 232, 233, 236, 240, 245, 246, 247, 248, 249, 250, 251, 259, 287, 292, 302, 310, 317, 319, 322, 352, 382, 385, 386, 394, 408, 410, 412, 419, 449, 450, 460, 462, 480, 481, 482, 483, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 637, 638, 639, 640, 686, 687, 688, 689, 690, 691, 692, 693, 694, 794, 795, 848, 855, 858, 891, 892, 893, 936, 979, 981, 984, 986, 990, 1019, 1022, 1031, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048], "n_components_": [73, 102, 394, 439, 443, 532, 536, 537, 538, 539, 540, 541, 891, 892, 1019, 1039, 1041], "n_components_fa": 102, "n_components_pca": 102, "n_components_pca_ml": 102, "n_components_rang": 232, "n_connected_compon": 461, "n_connected_components_": [439, 443, 1039], "n_core": 117, "n_core_sampl": [418, 442], "n_cpu": [367, 394], "n_cv": [411, 435], "n_cv_alpha": [649, 653], "n_cv_fold": [121, 311, 802, 818, 823, 826], "n_digit": 58, "n_dim": [476, 525, 527, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 1047], "n_dimens": [794, 795], "n_dimensions_of_x": [901, 902, 903, 904, 905], "n_dir": 14, "n_e": 407, "n_element": [417, 615], "n_encoded_featur": [872, 873], "n_error": 290, "n_error_outli": [213, 289, 337], "n_error_outliers_sgd": 213, "n_error_test": [213, 289, 337], "n_error_test_sgd": 213, "n_error_train": [213, 337], "n_error_train_sgd": 213, "n_estim": [7, 10, 26, 31, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 130, 131, 134, 163, 172, 221, 237, 241, 247, 257, 272, 307, 315, 317, 366, 393, 394, 414, 416, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 630, 799, 800, 976, 993, 994, 1027, 1038, 1046], "n_estimators_": [122, 557, 558], "n_estimators_ful": 122, "n_exampl": 8, "n_face": 237, "n_featur": [6, 8, 15, 25, 26, 27, 30, 31, 32, 33, 34, 40, 52, 58, 60, 61, 78, 79, 80, 81, 82, 91, 92, 95, 102, 111, 113, 115, 117, 118, 145, 147, 148, 163, 164, 175, 178, 181, 183, 185, 193, 194, 198, 202, 203, 214, 216, 221, 228, 232, 233, 235, 245, 250, 257, 263, 267, 269, 270, 272, 273, 293, 299, 307, 315, 316, 317, 319, 321, 322, 346, 351, 352, 353, 362, 366, 373, 374, 380, 382, 385, 392, 393, 394, 398, 407, 409, 410, 412, 414, 415, 418, 419, 420, 422, 424, 425, 426, 429, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 492, 499, 502, 506, 507, 510, 513, 514, 517, 519, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 698, 699, 700, 708, 722, 755, 756, 757, 758, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 936, 962, 963, 964, 965, 966, 967, 968, 969, 970, 979, 983, 988, 990, 991, 997, 1001, 1002, 1003, 1014, 1019, 1020, 1022, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "n_feature_influ": 10, "n_features_": [147, 591, 592, 1043, 1045], "n_features_a": 848, "n_features_b": 848, "n_features_in_": [382, 394, 428, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 625, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 1041, 1043, 1045, 1048], "n_features_max": 33, "n_features_missing_ind": 628, "n_features_new": [431, 440, 443, 530, 532, 534, 535, 537, 540, 541, 547, 565, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 626, 628, 633, 636, 637, 638, 639, 640, 848, 855, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 891, 892], "n_features_opt": 72, "n_features_out": 628, "n_features_out_": 878, "n_features_rang": 33, "n_features_to_comput": 1038, "n_features_to_select": [146, 148, 317, 416, 591, 600, 1042, 1044], "n_features_to_select_": 600, "n_features_with_miss": 627, "n_features_with_missing_": 625, "n_fold": [138, 645, 649, 651, 653, 657, 659, 661, 1031, 1032, 1036], "n_gram_rang": 1030, "n_group": [411, 805, 1018, 1036], "n_i": [989, 997], "n_imag": 258, "n_index": [841, 842, 843, 845, 847, 849, 850], "n_inform": [25, 27, 31, 91, 115, 118, 145, 147, 178, 183, 202, 203, 257, 263, 273, 293, 299, 307, 315, 346, 382, 385, 513, 522, 551, 552, 553, 554, 562, 563, 603, 604, 605, 606, 607, 644, 645, 650, 658, 659, 660, 663, 679, 680, 681, 829, 988, 1038], "n_init": [19, 42, 43, 45, 50, 57, 58, 61, 64, 220, 221, 222, 223, 316, 319, 352, 407, 441, 445, 447, 449, 450, 451, 457, 460, 688, 692, 794, 795, 1022, 1030, 1038, 1044, 1045, 1046], "n_init_rang": 61, "n_inlier": 228, "n_input_features_": 1043, "n_instanc": [10, 631], "n_iter": [6, 17, 71, 127, 151, 207, 261, 268, 283, 302, 340, 382, 386, 393, 419, 452, 476, 530, 531, 542, 543, 544, 545, 644, 645, 650, 651, 658, 659, 660, 661, 679, 680, 681, 682, 683, 684, 685, 690, 692, 799, 800, 808, 810, 855, 857, 935, 936, 976, 1001, 1019, 1031, 1036, 1037, 1038, 1042, 1044, 1045, 1046, 1048], "n_iter_": [4, 98, 127, 207, 248, 394, 438, 445, 446, 447, 469, 470, 480, 481, 482, 529, 530, 531, 534, 535, 536, 537, 538, 541, 559, 560, 625, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 677, 678, 688, 690, 794, 795, 848, 856, 857, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 1034, 1037, 1038, 1040, 1043, 1044, 1046], "n_iter_no_chang": [7, 117, 122, 127, 207, 318, 351, 385, 394, 414, 557, 558, 559, 560, 664, 665, 666, 674, 675, 676, 856, 857, 1001, 1038, 1041], "n_iter_search": 268, "n_iter_without_progress": [221, 690, 1035, 1036], "n_iterations_": [272, 799, 800], "n_iters_": 1036, "n_job": [13, 54, 72, 73, 117, 118, 119, 124, 125, 132, 147, 148, 163, 169, 170, 171, 172, 221, 223, 240, 259, 261, 262, 264, 275, 278, 283, 315, 316, 317, 320, 346, 367, 380, 394, 414, 418, 435, 442, 444, 446, 448, 450, 453, 454, 455, 456, 459, 462, 465, 470, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 858, 861, 894, 895, 953, 955, 976, 987, 988, 990, 1018, 1019, 1023, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1048], "n_k": [407, 548], "n_kernel": 610, "n_kernel_param": [608, 609], "n_knot": [4, 200, 318, 878, 997, 1043], "n_l1_ratio": [645, 657, 659, 1033], "n_l1_ratios_": 657, "n_label": [12, 92, 236, 394, 485, 521, 711, 718, 723, 736, 737, 751, 753, 789, 790, 816, 987, 1036, 1038], "n_labeled_point": [325, 326], "n_layer": [856, 857], "n_layers_": [856, 857], "n_leav": [461, 907, 908, 909, 910], "n_leaves_": [439, 443], "n_left": 561, "n_local_tri": 458, "n_m": 1003, "n_mask": 199, "n_missing_featur": 627, "n_missing_sampl": 164, "n_nearest_featur": [164, 625], "n_neighbor": [12, 44, 62, 67, 133, 163, 220, 221, 222, 224, 228, 238, 283, 285, 286, 289, 290, 291, 292, 295, 310, 315, 317, 351, 414, 450, 600, 605, 606, 626, 686, 687, 689, 691, 693, 694, 841, 842, 843, 845, 847, 848, 852, 894, 895, 977, 984, 990, 993, 1000, 1037, 1044, 1046, 1047], "n_neighbors_": [689, 845], "n_neighbors_list": [238, 285], "n_neighbour": 1044, "n_node": [360, 439, 443, 461, 555, 556, 562, 563, 564, 907, 908, 909, 910, 941], "n_node_sampl": 360, "n_nodes_ptr": [555, 556, 562, 563, 564], "n_noise_": 49, "n_nonzero": 104, "n_nonzero_coef": [198, 524, 529, 535, 540, 543, 544, 546, 648, 662, 683, 684, 1048], "n_nonzero_coefs_": [662, 663, 1048], "n_nonzero_column": 353, "n_numerical_featur": 121, "n_order": 179, "n_original_featur": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "n_out": 564, "n_outlier": [80, 81, 128, 202, 228, 290], "n_output": [360, 394, 414, 424, 430, 431, 435, 440, 443, 463, 467, 480, 481, 482, 530, 532, 534, 535, 537, 540, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 626, 628, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 676, 677, 719, 720, 725, 742, 743, 745, 747, 748, 750, 751, 782, 785, 787, 788, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 848, 849, 850, 855, 856, 857, 858, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 891, 892, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 925, 958, 987, 988, 1003, 1037, 1040], "n_output_featur": 626, "n_output_features_": 874, "n_outputs_": [549, 550, 555, 556, 562, 563, 564, 856, 857, 907, 908, 909, 910], "n_oversampl": [449, 451, 539, 542, 936, 1044], "n_pack": [939, 940], "n_patch": [581, 582, 585], "n_permut": [266, 411, 824], "n_pixel": [237, 258], "n_point": [255, 839, 840], "n_points_per_clust": 65, "n_popul": [389, 956], "n_possible_iterations_": [799, 800], "n_predict": 10, "n_pt": 14, "n_q": 407, "n_quantil": [75, 170, 309, 876, 888, 1039], "n_quantiles_": 876, "n_queri": [686, 841, 842, 843, 845, 847, 849, 850, 851], "n_random_featur": 188, "n_redund": [25, 27, 31, 91, 118, 145, 147, 257, 263, 293, 299, 307, 385, 435, 513, 551, 553, 562, 829], "n_refin": 470, "n_region": 46, "n_regions_plu": 46, "n_regressor": 568, "n_relevant_featur": 193, "n_remaining_candidates_": [799, 800], "n_repeat": [114, 118, 125, 147, 169, 171, 172, 260, 278, 315, 411, 513, 632, 811, 812, 995], "n_required_iterations_": [799, 800], "n_resourc": 976, "n_resources_": [272, 799, 800, 976], "n_resources_0": 976, "n_resources_i": 976, "n_restarts_optim": [158, 417, 608, 609], "n_retri": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 1044, 1048], "n_row": [6, 19, 95, 404, 422, 449, 451, 509, 511, 1019], "n_row_clust": [449, 451, 511], "n_run": [37, 61, 175, 352], "n_sampl": [6, 7, 10, 15, 24, 25, 26, 27, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 70, 75, 78, 79, 80, 81, 82, 86, 92, 95, 96, 100, 102, 111, 113, 114, 115, 116, 117, 118, 123, 124, 125, 126, 128, 129, 139, 140, 147, 148, 160, 163, 164, 168, 178, 180, 181, 183, 185, 187, 189, 191, 193, 194, 198, 199, 200, 202, 203, 207, 211, 214, 216, 217, 220, 221, 222, 223, 224, 225, 228, 232, 233, 235, 238, 246, 248, 249, 250, 251, 257, 258, 260, 263, 264, 267, 269, 270, 271, 272, 273, 274, 283, 293, 307, 308, 309, 312, 316, 317, 319, 321, 322, 327, 336, 339, 340, 346, 351, 352, 362, 373, 377, 380, 382, 385, 389, 392, 393, 394, 398, 407, 409, 410, 411, 412, 414, 418, 419, 420, 422, 424, 425, 426, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 499, 502, 506, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 619, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 767, 768, 769, 770, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 924, 925, 936, 938, 940, 949, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 976, 979, 983, 987, 988, 990, 991, 997, 998, 999, 1001, 1002, 1003, 1014, 1019, 1020, 1021, 1022, 1023, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "n_samples1": 865, "n_samples2": 865, "n_samples_": 539, "n_samples_1": [340, 1002], "n_samples_2": [340, 1002], "n_samples_a": [789, 790], "n_samples_fit": [430, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 686, 832, 833, 841, 842, 843, 845, 847, 849, 850, 851, 857, 900, 902, 905, 908, 910], "n_samples_fit_": [283, 841, 842, 843, 845, 847, 849, 850, 851], "n_samples_i": [610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778], "n_samples_per_cent": 61, "n_samples_rang": [79, 232], "n_samples_seen": 879, "n_samples_seen_": [532, 868, 869, 879, 1038], "n_samples_test": [273, 901, 902, 903, 904, 905, 990, 997], "n_samples_train": [273, 901, 902, 903, 904, 905], "n_samples_transform": [283, 843, 851], "n_samples_x": [609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778], "n_seed": 459, "n_selected_featur": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "n_skips_": 1037, "n_skips_invalid_data_": 669, "n_skips_invalid_model_": 669, "n_skips_no_inliers_": 669, "n_spline": [4, 878], "n_split": [4, 13, 117, 123, 127, 163, 164, 169, 247, 255, 260, 262, 265, 270, 278, 322, 328, 338, 346, 362, 411, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 822, 1018, 1036, 1038], "n_splits_": [796, 799, 800, 810], "n_steps_": [98, 447, 535, 536, 1043], "n_subpopulation_": 677, "n_subsampl": [677, 925], "n_subsets_of_featur": 592, "n_support_": [901, 902, 903, 904, 905, 1002, 1040], "n_support_vector": 7, "n_sv": [901, 902, 903, 904, 905, 1002, 1040], "n_svd_vec": [449, 451], "n_t": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "n_t_l": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "n_t_r": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "n_target": [394, 410, 480, 481, 482, 483, 522, 554, 609, 641, 644, 645, 648, 649, 650, 651, 652, 654, 655, 658, 659, 660, 661, 662, 663, 669, 670, 671, 672, 673, 679, 682, 683, 684, 685, 988, 1042, 1044, 1046], "n_task": [193, 983], "n_test": [8, 10, 33, 114, 260, 1030, 1033], "n_test_docu": 8, "n_test_po": 8, "n_threshold": [633, 724, 779, 786], "n_tick": [802, 818, 823, 826], "n_top": 268, "n_top_word": 15, "n_topic": [385, 534, 1037], "n_tot": 697, "n_total_sampl": [325, 326], "n_train": [8, 10, 33, 114, 260, 1030, 1033], "n_train_po": 8, "n_transformed_featur": 859, "n_tree": 7, "n_trees_per_iter": 559, "n_trees_per_iteration_": [557, 558, 559, 560], "n_trials_": 669, "n_uncorrelated_featur": 266, "n_unequ": 697, "n_unique_categori": 311, "n_unique_label": [726, 727, 735, 780, 781, 784, 951], "n_unique_tick": [802, 823], "n_valu": [818, 826, 1038], "n_values_": 1038, "n_values_feature_j": 631, "n_x": [54, 583], "n_y": [54, 583, 989, 997], "n_z": 583, "na": [625, 626, 627, 628, 766, 775, 917, 919, 920, 1040, 1041, 1044, 1045, 1046, 1047], "nabarun": 1038, "nabla": 991, "nabsolut": 205, "nada": 19, "nadeau": [260, 1038], "nadia": 1042, "nadim": 1043, "nadirhan": 1044, "nadya": 1036, "nagarajan": [643, 983], "nagarjuna": [1037, 1038], "nagasaka": 1043, "naghshhnejad": [1040, 1041], "nagpal": 56, "naipawat": [1044, 1045], "naiv": [27, 31, 130, 260, 262, 281, 351, 353, 369, 375, 405, 414, 415, 435, 542, 834, 835, 836, 837, 838, 981, 982, 990, 995, 1010, 1025, 1030, 1031, 1032, 1033, 1038, 1040, 1043, 1045], "naive_bay": [8, 24, 25, 27, 31, 130, 134, 261, 262, 351, 362, 368, 369, 375, 414, 435, 567, 860, 981, 988, 989, 1023, 1031, 1032, 1034, 1035, 1036, 1037], "naive_linear_pipelin": 4, "naive_linear_predict": 4, "naivebay": 368, "naivelycalibratedlinearsvc": [25, 27], "najera": 1037, "najork": [723, 753, 987], "naka": 1043, "nakamura": 1044, "nakano": [1037, 1038], "nalepa": 1037, "naman": 1047, "name": [4, 6, 7, 9, 10, 11, 12, 17, 19, 25, 27, 30, 31, 37, 44, 45, 58, 62, 71, 73, 75, 82, 96, 101, 114, 115, 116, 117, 121, 124, 127, 132, 169, 170, 171, 188, 197, 199, 201, 203, 205, 206, 214, 216, 217, 220, 221, 228, 234, 235, 237, 238, 242, 247, 255, 257, 258, 261, 263, 264, 267, 269, 270, 278, 283, 291, 292, 299, 300, 307, 309, 311, 319, 320, 329, 343, 351, 352, 353, 367, 368, 374, 375, 378, 380, 382, 384, 385, 387, 388, 394, 397, 398, 401, 404, 407, 411, 414, 415, 417, 421, 423, 428, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 695, 696, 697, 698, 700, 706, 707, 709, 711, 729, 730, 739, 776, 777, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 808, 810, 814, 818, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 918, 919, 920, 923, 927, 928, 929, 931, 943, 944, 945, 947, 950, 957, 971, 975, 976, 981, 983, 987, 988, 994, 995, 997, 1003, 1008, 1018, 1019, 1021, 1023, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "name_to_color": 311, "named_estim": [565, 566, 567, 568], "named_estimators_": [565, 566, 567, 568, 1038, 1040], "named_step": [73, 86, 408, 591, 592, 595, 859, 860, 899, 900, 983, 1019, 1037, 1039], "named_transform": [858, 1045], "named_transformers_": 462, "namedtupl": [615, 945, 1046], "namespac": 403, "namiya": 1037, "nan": [75, 121, 127, 163, 164, 169, 217, 238, 240, 242, 255, 263, 311, 315, 320, 321, 322, 366, 372, 382, 389, 394, 414, 444, 466, 494, 553, 554, 555, 559, 560, 562, 591, 592, 595, 601, 604, 607, 625, 626, 627, 628, 633, 710, 711, 712, 719, 720, 721, 725, 726, 727, 766, 775, 780, 781, 782, 784, 796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 868, 869, 873, 875, 876, 879, 880, 884, 887, 888, 890, 917, 918, 919, 920, 962, 976, 987, 997, 1003, 1025, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "nan_euclidean": [626, 759, 775], "nan_euclidean_dist": [315, 759, 977, 1040], "nandana": [1036, 1037, 1038], "nanshan": 1043, "nanta": 1033, "nanxin": 1038, "nanyang": 377, "naois": [1045, 1047], "naoki": [1032, 1042], "naoya": [1036, 1037, 1038, 1039], "naozin555": 1043, "napa": 311, "narasimhan": 846, "nardelli": 1033, "narendra": [1041, 1047], "narendramukherje": 1041, "narendran": 1038, "narin": [225, 1037, 1038], "narinek": [1037, 1038], "narr": [380, 394, 656, 899, 904, 1030, 1031], "narrai": 592, "narrow": [13, 114, 124, 305, 307, 385, 839, 840], "nartayxd": 1044, "nasa": [70, 351, 352, 377], "nasdaq": 12, "naser": 1040, "nasir": 1038, "nass": 1045, "nastegiano": 1044, "nat": [605, 606, 702, 752, 754, 1044], "natasha": 1040, "natchiappan": [1043, 1044], "nate": [1036, 1037, 1043], "nath": 1038, "nathan": [533, 1038, 1042, 1045], "nathaniel": [1037, 1038, 1040], "nathansquan": 1044, "nati": 1045, "nation": [11, 80, 296, 375, 846], "nativ": [4, 13, 127, 131, 163, 367, 375, 394, 414, 494, 559, 560, 831, 832, 955, 983, 987, 988, 1007, 1040, 1042], "native_result": 121, "natl": [687, 691, 984], "natur": [4, 27, 31, 117, 124, 158, 169, 170, 175, 183, 199, 200, 216, 217, 224, 238, 245, 251, 269, 281, 351, 380, 382, 394, 412, 414, 415, 418, 442, 448, 455, 549, 588, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 690, 702, 738, 752, 754, 841, 842, 843, 845, 847, 849, 850, 851, 878, 934, 983, 984, 986, 987, 990, 992, 997, 1001, 1007, 1030, 1038], "naul": [1035, 1036], "nav": 12, "navarret": [1038, 1039, 1040], "navarro": 1045, "navi": [33, 70, 79, 99, 103, 104, 131, 178, 202, 210, 223, 246, 247, 248, 251, 267, 269, 288, 295, 327, 359], "navig": [388, 1032], "navin": 895, "navistar": 12, "navkal": 1038, "navractil": 987, "navratil2007": 987, "nawazish": [1045, 1046], "na\u00efv": 1023, "nb": [8, 102, 130, 362, 836, 989], "nbclaim": 217, "nber": 10, "nbr": [847, 990], "nbrs_": [686, 687], "nbsp": [12, 26, 71, 72, 116, 118, 119, 124, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 188, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360], "nbviewer": [12, 26, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360], "nbyte": [53, 232], "nca": [221, 291, 292, 293, 848, 990], "nca_pip": 990, "ncall": 386, "ncanip": 848, "nclass": 255, "ncluster": 44, "ncol": [4, 5, 13, 30, 32, 34, 53, 57, 66, 95, 100, 105, 122, 170, 199, 200, 201, 207, 217, 220, 221, 231, 238, 256, 262, 263, 271, 283, 286, 300, 306, 307, 309, 310, 320, 345, 346, 352], "ncorrect": 260, "ncsu": [148, 377], "ncv": [449, 451], "nd": [1043, 1047], "ndarrai": [53, 58, 90, 199, 242, 258, 259, 260, 380, 381, 382, 386, 387, 403, 415, 418, 419, 422, 423, 425, 428, 429, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 700, 713, 716, 719, 720, 721, 724, 725, 735, 742, 743, 745, 747, 748, 750, 751, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 786, 787, 788, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 916, 917, 918, 919, 924, 925, 933, 935, 936, 937, 938, 942, 949, 951, 952, 956, 959, 960, 962, 963, 964, 965, 968, 973, 974, 987, 1002, 1008, 1033, 1037, 1040, 1041, 1044, 1045, 1046, 1047], "ndata": 266, "ndataset": [214, 307], "ndbscan": 65, "ndcg": [723, 753, 987, 1037], "ndcg_score": [723, 987, 1037, 1040, 1045, 1046], "ndenumer": 211, "ndepend": 170, "ndim": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 919, 920], "ndimag": [14, 46, 47, 54, 302, 1022], "ndingwal": 1037, "ndirangu": [1040, 1044], "ne": [987, 990], "neal": [983, 1043], "near_uniqu": 312, "nearbi": [407, 990], "nearer": [843, 851, 990], "nearest": [12, 14, 31, 32, 39, 40, 50, 51, 54, 58, 61, 66, 72, 78, 82, 89, 95, 98, 126, 128, 133, 139, 155, 164, 190, 211, 215, 222, 225, 231, 237, 238, 254, 263, 287, 289, 292, 293, 297, 301, 302, 310, 334, 338, 343, 344, 348, 369, 372, 377, 389, 392, 394, 407, 413, 414, 418, 421, 431, 442, 444, 446, 448, 450, 455, 459, 460, 494, 500, 502, 605, 606, 625, 626, 628, 629, 633, 686, 687, 689, 690, 694, 789, 790, 796, 825, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 859, 860, 864, 879, 961, 984, 993, 1002, 1008, 1009, 1010, 1017, 1025, 1030, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1042], "nearest_neighbor": [44, 450, 689], "nearest_neighbor_algorithm": [841, 849, 850], "nearest_neighbors_algorithm": [842, 847], "nearestcentroid": [294, 351, 988, 990, 1030, 1034, 1037, 1042, 1045], "nearestneighbor": [283, 319, 397, 407, 418, 442, 444, 446, 459, 686, 687, 691, 841, 842, 843, 845, 849, 850, 851, 990, 1030, 1034, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "nearli": [25, 263, 375, 394, 406, 761, 987, 990, 999, 1023], "neat": [1007, 1030], "necess": [984, 990], "necessari": [7, 14, 115, 183, 199, 204, 245, 260, 261, 267, 285, 342, 358, 366, 375, 378, 379, 380, 381, 382, 383, 384, 388, 392, 407, 409, 414, 450, 460, 486, 487, 489, 490, 491, 492, 493, 495, 532, 642, 643, 644, 650, 654, 655, 658, 659, 660, 661, 662, 663, 669, 671, 673, 674, 689, 693, 792, 862, 871, 882, 886, 892, 976, 979, 983, 986, 989, 997, 1003, 1023, 1030, 1038], "necessarili": [4, 31, 72, 98, 169, 199, 207, 217, 233, 234, 246, 307, 351, 352, 374, 384, 403, 405, 407, 414, 625, 847, 849, 850, 851, 981, 984, 986, 987], "need": [0, 4, 9, 12, 32, 46, 48, 53, 55, 57, 82, 97, 109, 117, 121, 123, 124, 125, 127, 132, 148, 151, 156, 163, 164, 169, 187, 201, 216, 217, 221, 228, 231, 233, 235, 238, 239, 245, 246, 250, 251, 258, 260, 262, 263, 265, 278, 281, 283, 285, 310, 315, 322, 328, 338, 351, 352, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 423, 435, 439, 443, 447, 463, 501, 539, 549, 570, 580, 581, 586, 587, 588, 589, 625, 633, 636, 637, 638, 640, 647, 664, 666, 669, 674, 677, 690, 718, 719, 720, 721, 778, 782, 794, 795, 796, 799, 800, 810, 811, 812, 820, 828, 831, 839, 840, 856, 859, 862, 866, 871, 872, 876, 894, 901, 904, 944, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1008, 1012, 1020, 1021, 1022, 1023, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "needl": [148, 377], "needs_proba": [739, 1039, 1047], "needs_threshold": [739, 1047], "neeraj": 1037, "neg": [3, 4, 6, 16, 24, 60, 75, 78, 86, 117, 123, 124, 129, 166, 168, 169, 177, 189, 195, 196, 197, 199, 217, 218, 225, 249, 250, 257, 260, 263, 267, 269, 270, 283, 305, 309, 319, 351, 386, 394, 395, 407, 411, 414, 415, 416, 418, 419, 430, 438, 442, 450, 463, 467, 480, 481, 482, 486, 529, 531, 533, 534, 535, 536, 538, 540, 542, 545, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 586, 589, 590, 593, 594, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 675, 676, 677, 678, 685, 696, 697, 702, 703, 710, 711, 713, 714, 716, 717, 719, 720, 721, 724, 726, 727, 728, 732, 735, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 779, 780, 781, 782, 784, 787, 788, 790, 794, 795, 802, 818, 820, 825, 832, 833, 842, 845, 850, 857, 866, 875, 877, 878, 883, 887, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 934, 936, 955, 985, 987, 988, 990, 991, 992, 993, 1001, 1002, 1009, 1023, 1024, 1025, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "neg_": [802, 818, 1036], "neg_brier_scor": [987, 1040], "neg_label": [866, 883], "neg_log_alphas_enet": 184, "neg_log_alphas_lasso": 184, "neg_log_alphas_positive_enet": 184, "neg_log_alphas_positive_lasso": 184, "neg_log_loss": [27, 987], "neg_lr": 263, "neg_lr_bas": 263, "neg_lr_base_std": 263, "neg_mean_absolute_error": [4, 132, 201, 987], "neg_mean_absolute_percentage_error": [13, 121, 987, 995], "neg_mean_gamma_devi": 987, "neg_mean_pinball_loss_05p_scor": 124, "neg_mean_pinball_loss_95p_scor": 124, "neg_mean_poisson_devi": 987, "neg_mean_squared_error": [163, 164, 201, 234, 274, 322, 822, 987, 995, 1036], "neg_mean_squared_log_error": 987, "neg_median_absolute_error": 987, "neg_root_mean_squared_error": [4, 127, 311, 987], "neg_root_mean_squared_log_error": 987, "neg_root_mean_squared_log_error_scor": 1047, "negat": [394, 802, 818, 987], "negate_scor": [234, 802, 818], "negative_class": 710, "negative_likelihood_ratio": [263, 710], "negative_linestyl": 228, "negative_loglik": 78, "negative_mahal_dist": 467, "negative_outlier_factor": 845, "negative_outlier_factor_": [238, 290, 845, 993], "neglig": [169, 990, 1033, 1047], "neigh": [778, 841, 842, 843, 845, 847, 849, 850, 851], "neigh_dist": [841, 842, 843, 845, 847, 849, 850, 851], "neigh_ind": [841, 842, 843, 845, 847, 849, 850, 851], "neighbor": [12, 31, 39, 44, 47, 60, 66, 72, 127, 128, 130, 133, 139, 163, 164, 221, 222, 224, 225, 228, 231, 237, 238, 254, 263, 287, 288, 289, 290, 292, 293, 294, 296, 297, 301, 317, 319, 320, 351, 369, 372, 377, 389, 392, 394, 397, 407, 413, 414, 415, 418, 421, 431, 439, 442, 443, 446, 448, 450, 455, 456, 459, 461, 494, 500, 502, 561, 568, 600, 605, 606, 625, 626, 629, 686, 687, 688, 689, 690, 691, 693, 694, 778, 796, 825, 859, 860, 879, 895, 903, 961, 988, 993, 1008, 1009, 1010, 1017, 1022, 1024, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037], "neighbor_feat_idx": 625, "neighborhood": [33, 55, 82, 86, 103, 139, 164, 166, 220, 245, 284, 285, 286, 294, 295, 297, 377, 394, 407, 412, 418, 442, 444, 448, 455, 500, 502, 513, 539, 547, 626, 629, 694, 825, 841, 842, 845, 847, 848, 849, 850, 851, 853, 859, 860, 879, 984, 993, 1009, 1010, 1025, 1039], "neighborhoodcomponentanalysi": 292, "neighborhoodcomponentsanalysi": [221, 291, 292, 293, 990, 1039, 1044, 1048], "neighbors_algorithm": [686, 687], "neighborsbas": [1042, 1045], "neighborsclassifi": [847, 849, 850, 851, 1030], "neighborsregressor": 1030, "neighbour": [444, 460, 690, 992], "neighbourhood": [848, 990], "neighbourhood_components_analysi": 848, "neil": 1042, "neill": 1042, "neither": [164, 169, 315, 351, 362, 392, 405, 435, 592, 626, 923, 990, 1003], "nelder": 983, "nell": [0, 1, 39, 223, 231, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1042], "nelson": [0, 1036, 1037, 1042], "nemour": 12, "neo": 1038, "nep": 1040, "neptun": 1007, "neq": [407, 987, 989, 997], "ness": [164, 217], "nest": [100, 111, 138, 166, 188, 235, 253, 255, 276, 278, 322, 367, 386, 394, 397, 407, 411, 417, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 460, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 502, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 801, 810, 821, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 987, 990, 1009, 1030, 1031, 1034, 1036, 1037, 1038, 1044], "nested_lin": 265, "nested_scor": 265, "nesterov": [300, 856, 857, 991, 1046, 1047], "nesterovs_momentum": [300, 856, 857], "nestor": 1045, "net": [31, 166, 177, 183, 185, 186, 190, 192, 193, 210, 218, 232, 235, 273, 295, 386, 406, 411, 469, 470, 476, 499, 522, 555, 556, 557, 558, 562, 563, 564, 644, 645, 650, 655, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 682, 855, 907, 908, 909, 910, 976, 987, 992, 1001, 1009, 1010, 1012, 1025, 1030, 1035, 1039, 1040, 1042], "netbsd": 1030, "netnew": 1023, "neto": [588, 727, 1048], "nettei": 1043, "network": [6, 238, 301, 366, 367, 368, 369, 374, 375, 394, 395, 401, 407, 412, 414, 419, 494, 531, 533, 565, 566, 694, 738, 856, 857, 983, 985, 987, 1001, 1003, 1007, 1010, 1019, 1024, 1025, 1030, 1044, 1048], "networkx": [17, 389], "neural": [5, 6, 31, 260, 301, 369, 394, 401, 411, 412, 414, 419, 531, 533, 536, 538, 545, 565, 566, 637, 643, 694, 738, 794, 848, 855, 856, 857, 865, 979, 983, 984, 985, 987, 990, 993, 997, 1001, 1003, 1007, 1010, 1012, 1019, 1024, 1025, 1030, 1042], "neural_network": [31, 166, 170, 239, 298, 299, 300, 301, 302, 303, 368, 369, 392, 988, 991, 1009, 1032, 1047], "neuraxl": 1007, "neuro": 1007, "neurodebian": 0, "neuroimag": [1006, 1012], "neuron": [856, 857, 985, 991], "neutral": 714, "nevalu": 132, "never": [117, 236, 362, 380, 389, 392, 401, 407, 408, 410, 411, 448, 455, 521, 553, 554, 555, 562, 859, 860, 979, 997, 1040, 1043], "nevertheless": [4, 172, 414], "new": [4, 7, 8, 10, 50, 56, 58, 60, 70, 71, 90, 102, 111, 113, 115, 116, 117, 122, 124, 127, 131, 132, 145, 148, 151, 157, 164, 171, 172, 199, 205, 213, 228, 259, 262, 267, 281, 287, 289, 311, 316, 319, 322, 326, 329, 337, 342, 362, 367, 368, 374, 375, 377, 378, 379, 382, 383, 384, 386, 388, 389, 393, 394, 395, 397, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 432, 435, 436, 438, 440, 441, 443, 445, 446, 447, 450, 460, 461, 470, 480, 481, 482, 502, 506, 507, 532, 539, 542, 553, 554, 555, 556, 561, 562, 563, 564, 579, 600, 628, 629, 633, 638, 639, 640, 643, 644, 650, 686, 687, 688, 695, 696, 698, 699, 700, 785, 794, 795, 796, 799, 800, 802, 810, 818, 829, 845, 868, 869, 874, 875, 876, 878, 879, 880, 887, 888, 896, 914, 917, 922, 957, 962, 976, 977, 979, 983, 987, 988, 990, 991, 992, 993, 997, 999, 1000, 1001, 1002, 1008, 1012, 1014, 1015, 1018, 1021, 1023, 1028, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "new_data": [287, 382], "new_valu": [565, 566, 567, 568], "newaxi": [12, 14, 19, 24, 42, 82, 104, 112, 152, 180, 189, 195, 200, 201, 202, 204, 205, 216, 231, 233, 274, 288, 295, 358, 359, 404, 534, 983], "newei": 1038, "newer": [151, 379, 397, 412], "newgroups20": 214, "newli": [378, 393, 414, 461, 994, 1036, 1037, 1045], "newsgroup": [7, 15, 19, 232, 261, 329, 352, 353, 373, 404, 415, 486, 487, 1015, 1025], "newsgroups_test": 375, "newsgroups_train": [375, 486], "newsgroups_vector": 487, "newshap": 157, "newsl": [880, 997], "newslett": 374, "newsweed": 1023, "newswir": 375, "newton": [199, 217, 302, 608, 646, 656, 657, 667, 678, 856, 857, 983, 1034, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "newton_cg": 1040, "next": [7, 25, 60, 80, 120, 121, 125, 135, 158, 168, 172, 192, 196, 199, 229, 237, 241, 242, 247, 255, 266, 281, 310, 311, 312, 317, 326, 351, 356, 360, 362, 369, 378, 380, 382, 384, 404, 407, 408, 411, 414, 506, 507, 608, 632, 690, 696, 698, 700, 778, 794, 795, 825, 953, 976, 980, 986, 987, 997, 1012, 1027, 1030, 1043, 1044], "nezar": 1040, "nff": 697, "nfit": 326, "nfkd": [586, 587, 589, 1040], "nfor": 236, "nfrom": 156, "nft": 697, "ng": [407, 412, 689, 845, 991, 993, 1041], "ngiam": 991, "ngo": 1042, "ngram_rang": [261, 329, 415, 586, 587, 589], "ngram_vector": 415, "ngroup": 255, "ngshya": 1041, "nguyen": [1040, 1041, 1044, 1045], "nguy\u1ec5n": 1045, "ni": [125, 1036, 1041], "nic": 1043, "nice": [4, 67, 200, 235, 305, 366, 412, 1023], "nicer": 629, "nichol": 1034, "nichola": [1038, 1039, 1041], "nicholson": [1036, 1037, 1038], "nick": [148, 377, 1030, 1036, 1037, 1038, 1039], "nicki": 1044, "nickledav": 1036, "nicknam": 375, "nico": [1036, 1043], "nicol": 1037, "nicola": [0, 1, 148, 309, 656, 983, 1000, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "nicolashug": 1039, "nicolasservel": 1041, "nicolau": 1038, "nicula": [0, 1, 95, 236, 302, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039], "niculescu": [25, 27, 405, 435, 437], "nidhin": 1040, "niederb\u00fchl": 1038, "niederhut": [1038, 1040], "nielsen": [740, 1038], "nielsenmarkus11": [1037, 1038], "nigam": [834, 989], "nigel": 1043, "night": 13, "nightli": [0, 367, 383, 384], "nightwalkx": 1046, "nihal": 1045, "nihar": 1038, "niket": 1044, "nikhil": 1044, "nikita": [1037, 1038, 1040, 1043, 1044, 1045], "nikla": [1040, 1041], "nikolai": [1033, 1034, 1035, 1036, 1038, 1039, 1044, 1046], "nil": 1042, "nilearn": 1007, "nilesh": 1038, "nilichen": 125, "nilotp": [633, 635], "nima": 1045, "nima10khodaveisi": 1045, "nimbus1after2a1sun7show": 179, "nine": 1014, "ninertia": 64, "ningchi": 1036, "ninh": 175, "ninja": [378, 1012], "nip": [102, 377, 513, 539, 564, 639, 987], "nipal": [410, 481, 482], "nipy_spectr": [12, 39, 46, 47, 51, 52, 60, 61, 101], "nirvan": [1038, 1042], "nishan": 1040, "nishihara": 1042, "nishu": 1046, "nist": [377, 987], "nistir": 377, "nit": 380, "nitinramvelraj": 1045, "nitish": 1037, "nitya": 1040, "niuk": 1046, "niyogi": 984, "nizam": 1038, "nizhibitski": 1031, "nk": 694, "nkish": 1041, "nkmean": 44, "nl": 386, "nl1_ratio": 190, "nlasso": 183, "nlathia": 1036, "nlearn": 300, "nlog": 157, "nlogn": 690, "nlp": [375, 412, 415, 834, 838, 985, 1012], "nls_max_it": 1035, "nltk": [415, 1006, 1007], "nm": 366, "nmcd": 80, "nmd": 223, "nmean": 99, "nmf": [15, 72, 386, 406, 415, 533, 536, 542, 545, 1024, 1025, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "nmf_estim": 95, "nmi": [37, 407, 715, 733, 734, 754], "nmixtur": 44, "nmle": 80, "nmse": [5, 274], "nmslib": 283, "nmslib_": 283, "nmslibtransform": 283, "nn": [237, 415, 693, 1021], "nn_candid": 272, "nn_compon": [232, 233], "nn_sampl": [232, 272], "nndsvd": [412, 536, 538, 545, 1039, 1042], "nndsvda": [15, 412, 536, 538, 545, 1039, 1042], "nndsvdar": [412, 536, 538, 545, 1039], "nneq": 697, "nnl": [194, 655], "nnlnr": [1045, 1046], "nnmf": [415, 1024, 1025, 1030], "nntp": [351, 375, 1023], "nnz": [185, 352, 375, 697], "no_chang": 896, "no_interact": [559, 560, 1045], "no_mathjax": 380, "no_structur": [44, 62], "no_valid": 382, "no_weight": 212, "no_weights_handl": 212, "noa": [1041, 1047], "noah": 983, "noc": 12, "noced": 656, "nodar": 1043, "node": [12, 41, 121, 125, 183, 315, 321, 322, 356, 360, 388, 389, 407, 409, 412, 414, 439, 440, 443, 461, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 648, 652, 654, 680, 681, 690, 839, 840, 907, 908, 909, 910, 911, 913, 941, 955, 990, 992, 993, 994, 1003, 1033, 1034, 1035, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1047], "node_count": [315, 356, 360, 907, 908, 909, 910], "node_depth": 360, "node_id": [360, 911, 913], "node_ind": 360, "node_index": 360, "node_position_model": 12, "noel": [0, 2, 111, 112, 113, 1030, 1031, 1032, 1033, 1034, 1042], "noelano": 1042, "nof": 128, "nogil": [380, 381], "noinfo": 238, "noir": 311, "nois": [5, 10, 14, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 55, 61, 62, 67, 75, 86, 95, 96, 98, 100, 102, 112, 114, 124, 129, 130, 150, 151, 152, 156, 160, 161, 166, 178, 180, 181, 183, 188, 189, 194, 197, 198, 201, 202, 203, 204, 216, 223, 225, 228, 230, 231, 234, 260, 268, 273, 274, 295, 299, 300, 307, 312, 316, 322, 345, 358, 359, 362, 376, 382, 385, 405, 407, 412, 414, 416, 417, 418, 442, 444, 450, 509, 511, 512, 513, 514, 515, 516, 520, 522, 523, 528, 530, 532, 539, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 619, 620, 622, 623, 642, 643, 647, 648, 649, 651, 652, 653, 654, 661, 662, 663, 669, 677, 683, 684, 690, 876, 888, 894, 980, 982, 983, 984, 987, 990, 1000, 1009, 1021, 1022, 1031, 1036, 1041, 1043, 1044], "noise_coef": 54, "noise_kernel": 156, "noise_level": [151, 156, 157, 610, 623], "noise_level_bound": [156, 157, 623], "noise_level_grid": 157, "noise_std": 158, "noise_vari": [187, 530, 654, 983, 1044], "noise_variance_": [95, 187, 530, 532, 539, 654, 1037, 1044], "noise_variance_init": 530, "noiseless": [98, 985], "noisi": [5, 33, 49, 55, 62, 96, 111, 144, 151, 157, 183, 198, 201, 223, 231, 251, 261, 267, 269, 270, 310, 358, 359, 362, 407, 415, 417, 418, 442, 444, 448, 519, 522, 936, 982, 984, 990, 1002, 1007], "noisier": 984, "noisili": 170, "noisy_circl": [44, 62], "noisy_moon": [44, 62], "noiz": 85, "nolan": 1047, "noll": [199, 217], "nomenclatur": [983, 1036], "nomin": [170, 374, 394, 395, 414, 415, 579, 580, 714, 997, 1008], "non": [0, 3, 5, 6, 9, 10, 11, 13, 14, 16, 24, 25, 27, 33, 34, 37, 49, 57, 62, 71, 75, 80, 82, 96, 97, 98, 100, 113, 120, 121, 129, 130, 132, 138, 140, 144, 145, 147, 153, 155, 157, 164, 166, 168, 169, 170, 171, 172, 177, 178, 183, 185, 189, 192, 193, 195, 196, 197, 198, 200, 201, 205, 209, 210, 212, 213, 214, 215, 217, 218, 223, 224, 225, 229, 230, 231, 232, 233, 234, 236, 238, 245, 247, 249, 251, 253, 254, 255, 260, 269, 276, 278, 283, 287, 289, 290, 296, 299, 302, 305, 307, 308, 309, 310, 316, 317, 318, 319, 321, 322, 329, 330, 333, 335, 338, 340, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 360, 362, 366, 367, 372, 375, 376, 380, 381, 382, 385, 386, 388, 389, 392, 394, 395, 405, 406, 407, 408, 411, 413, 414, 415, 416, 417, 419, 435, 439, 443, 444, 448, 450, 454, 460, 461, 462, 463, 465, 466, 486, 494, 495, 501, 502, 506, 524, 530, 533, 534, 536, 538, 542, 545, 547, 549, 550, 551, 555, 556, 557, 558, 559, 560, 562, 563, 564, 570, 586, 587, 589, 590, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 628, 629, 633, 636, 641, 648, 650, 655, 656, 657, 658, 662, 663, 664, 665, 666, 667, 670, 674, 675, 676, 683, 684, 685, 686, 687, 688, 689, 690, 692, 696, 697, 700, 704, 705, 710, 713, 715, 717, 718, 723, 724, 725, 732, 734, 736, 737, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 755, 756, 775, 779, 782, 785, 786, 787, 788, 791, 794, 795, 796, 797, 801, 803, 804, 805, 806, 808, 814, 821, 825, 828, 847, 849, 850, 851, 854, 859, 860, 862, 863, 864, 867, 871, 872, 873, 874, 875, 876, 878, 879, 886, 887, 888, 889, 890, 892, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 918, 919, 920, 934, 936, 940, 942, 950, 976, 977, 978, 979, 980, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1021, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "non_determinist": [382, 1044], "non_neg": [580, 1037], "non_negative_factor": [1039, 1041, 1042, 1043, 1047], "non_nest": 265, "non_nested_scor": 265, "non_nested_scores_lin": 265, "non_noisy_label": 321, "non_outliers_mask": 305, "non_zero": [7, 12], "nonblasdotwarn": 1042, "none": [4, 8, 9, 10, 13, 17, 26, 30, 33, 39, 41, 42, 44, 52, 54, 55, 56, 62, 97, 100, 104, 115, 120, 121, 123, 126, 127, 140, 148, 152, 158, 159, 172, 178, 199, 200, 207, 210, 217, 220, 234, 235, 236, 238, 254, 260, 261, 272, 288, 290, 294, 309, 312, 317, 318, 326, 329, 336, 338, 339, 342, 343, 345, 351, 352, 375, 377, 380, 382, 387, 389, 394, 398, 407, 411, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 705, 706, 707, 709, 710, 711, 712, 714, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 731, 732, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 920, 922, 923, 924, 925, 928, 930, 935, 936, 939, 940, 941, 942, 946, 947, 950, 953, 956, 958, 961, 962, 968, 971, 972, 974, 976, 983, 987, 997, 1000, 1003, 1014, 1018, 1023, 1025, 1030, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "nonecheck": 381, "nonetheless": [394, 987], "nonexist": 630, "nonflavanoid": 377, "nonlinear": [274, 318, 642, 686, 687, 691, 694, 865, 983, 984, 992, 997], "nonmetr": [688, 692, 984], "nonneg": [407, 412, 451, 536, 538, 545, 876], "nonner": 1041, "nonoverlap": 377, "nonparametr": [416, 417, 605, 606], "nonzero": [17, 19, 104, 198, 232, 264, 353, 404, 418, 442, 521, 522, 529, 535, 540, 546, 586, 589, 683, 684, 697, 841, 842, 845, 847, 849, 850, 987], "nonzero_coef": 983, "noptic": 65, "noptimum": 157, "noqa": [45, 67, 90, 101, 124, 148, 163, 164, 170, 196, 220, 222, 271, 272, 317, 351, 384, 577, 578, 625, 799, 800, 976, 1039], "nor": [124, 263, 351, 362, 366, 385, 392, 405, 415, 435, 444, 592, 923, 991, 1003, 1041], "norbert": [0, 370, 1032, 1042, 1043, 1044], "nordbi": 1047, "nore\u00f1a": 1043, "norm": [12, 14, 15, 17, 30, 34, 40, 54, 98, 154, 157, 178, 183, 185, 190, 223, 245, 246, 247, 249, 251, 257, 261, 288, 305, 338, 352, 386, 389, 394, 407, 415, 416, 440, 441, 445, 457, 458, 462, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 487, 529, 532, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 587, 588, 589, 595, 641, 644, 645, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 670, 672, 674, 676, 679, 682, 683, 684, 688, 690, 691, 692, 767, 836, 871, 886, 899, 901, 904, 969, 970, 980, 983, 985, 987, 997, 1001, 1033, 1035, 1037, 1041], "norm1": 462, "norm2": 462, "norm_diag": 525, "norm_laplacian": 693, "norm_ord": [595, 1037], "norm_y_weight": 1042, "normal": [5, 10, 12, 15, 17, 19, 20, 26, 29, 34, 35, 37, 40, 44, 46, 57, 61, 62, 66, 73, 75, 78, 79, 80, 85, 86, 96, 111, 112, 114, 117, 123, 124, 127, 128, 129, 143, 154, 157, 158, 164, 166, 168, 169, 177, 178, 179, 180, 181, 183, 189, 192, 194, 197, 201, 202, 203, 205, 213, 217, 218, 223, 238, 245, 250, 251, 254, 257, 260, 266, 288, 289, 292, 304, 306, 310, 313, 316, 319, 322, 328, 338, 352, 353, 362, 369, 372, 375, 376, 377, 380, 385, 389, 393, 394, 403, 404, 405, 407, 408, 410, 413, 414, 415, 419, 438, 447, 449, 450, 451, 460, 462, 463, 473, 480, 481, 482, 487, 494, 510, 513, 517, 524, 525, 531, 534, 539, 540, 542, 546, 547, 550, 551, 552, 555, 556, 557, 558, 560, 561, 562, 563, 564, 577, 578, 580, 586, 587, 588, 589, 609, 623, 625, 637, 656, 657, 667, 670, 674, 678, 685, 689, 693, 695, 701, 702, 704, 716, 721, 723, 731, 733, 738, 742, 746, 747, 749, 752, 753, 754, 758, 767, 791, 792, 793, 799, 800, 825, 827, 836, 838, 844, 845, 848, 859, 860, 863, 864, 867, 869, 872, 873, 874, 875, 876, 877, 879, 884, 885, 887, 888, 889, 890, 894, 895, 907, 908, 909, 910, 935, 936, 940, 963, 964, 969, 970, 976, 979, 981, 983, 984, 985, 986, 989, 993, 998, 1000, 1002, 1003, 1009, 1019, 1021, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "normalesup": [12, 32, 46, 66, 233], "normalis": [169, 609, 785, 1023], "normalization_": [637, 979], "normalize_compon": [1038, 1040], "normalize_i": [156, 417, 609, 1044], "normalized_discounted_cumulative_gain": 753, "normalized_mutual_info_scor": [37, 407, 733, 752, 792, 987, 1038, 1044], "normalized_stress": [220, 688, 692, 984, 1045], "normalized_weight": 180, "norms_squar": 684, "north": [377, 407], "northern": 311, "northrop": 12, "northwestern": [309, 656], "norvan": 1040, "nose": [377, 1033, 1037], "nosetest": 1032, "not_memb": 169, "notabl": [235, 305, 374, 394, 494, 725, 872, 984, 986, 990, 1034, 1037, 1044], "notarstefano": [1038, 1039], "notat": [128, 394, 408, 412, 415, 588, 710, 983, 987, 1014, 1039, 1046], "notch": 1012, "note": [0, 4, 5, 7, 8, 11, 12, 14, 19, 20, 26, 27, 32, 37, 53, 66, 71, 72, 80, 82, 85, 86, 92, 98, 114, 115, 117, 120, 124, 125, 129, 148, 151, 158, 163, 168, 169, 170, 171, 172, 175, 187, 188, 192, 199, 200, 201, 203, 207, 213, 215, 217, 220, 221, 222, 224, 228, 229, 231, 233, 234, 235, 236, 238, 246, 255, 256, 260, 263, 266, 267, 268, 281, 283, 285, 289, 290, 300, 305, 306, 309, 315, 316, 317, 318, 319, 320, 321, 322, 326, 328, 330, 338, 342, 351, 360, 366, 367, 374, 377, 378, 380, 381, 382, 384, 386, 387, 392, 393, 394, 397, 398, 402, 405, 406, 407, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 485, 488, 494, 496, 502, 507, 513, 517, 525, 528, 531, 532, 536, 537, 538, 539, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 595, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 627, 628, 630, 631, 633, 634, 636, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 697, 698, 705, 706, 711, 713, 718, 719, 720, 721, 725, 726, 727, 729, 731, 735, 738, 743, 751, 752, 755, 760, 761, 765, 767, 771, 775, 779, 780, 781, 782, 784, 785, 786, 789, 790, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 915, 925, 926, 935, 936, 947, 950, 955, 962, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1011, 1014, 1021, 1022, 1023, 1025, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 381, 382, 386, 408, 466, 897, 1003, 1006, 1007, 1008, 1041, 1044], "notes_neighbor": 1030, "notfittederror": [109, 394, 848, 971, 1034, 1036, 1039, 1040, 1046, 1047], "noth": [19, 70, 351, 352, 385, 540, 712, 862, 871, 920, 997], "nothman": [0, 1, 72, 395, 415, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "notic": [7, 13, 25, 26, 34, 53, 57, 80, 114, 116, 117, 124, 127, 147, 178, 183, 228, 241, 257, 258, 260, 261, 263, 269, 270, 283, 310, 342, 351, 352, 353, 362, 385, 395, 411, 414, 494, 539, 561, 976, 986, 987, 993, 1023, 1027, 1043], "notifi": [570, 571, 572, 1028, 1040], "notimplementederror": [463, 551, 552, 565, 566, 591, 592, 600, 886, 896, 1037, 1047], "notin": 407, "notion": [269, 342, 352, 368, 392, 407, 412, 414, 983, 987], "notmatthancock": [1038, 1040], "noto": 1043, "noun": 394, "nouri": [366, 1031, 1033], "novak": 1033, "novarti": 12, "novaya": [1040, 1043], "novel": [213, 289, 337, 362, 405, 976], "novelti": [166, 213, 228, 238, 284, 290, 297, 337, 845, 1009, 1010, 1024, 1025, 1030, 1038], "novemb": [148, 199, 217, 377, 1035, 1036, 1038], "novic": 1032, "now": [4, 5, 7, 13, 17, 20, 53, 57, 71, 86, 100, 111, 112, 116, 118, 120, 121, 124, 125, 132, 135, 148, 151, 156, 157, 158, 164, 168, 169, 170, 171, 175, 178, 180, 185, 187, 188, 200, 201, 203, 224, 233, 235, 256, 260, 263, 271, 272, 278, 286, 310, 316, 317, 319, 320, 321, 322, 327, 338, 351, 352, 353, 362, 366, 368, 375, 380, 381, 382, 386, 392, 393, 394, 404, 407, 411, 412, 414, 415, 419, 491, 506, 507, 510, 534, 547, 577, 578, 580, 625, 628, 647, 651, 656, 661, 682, 723, 753, 794, 795, 799, 800, 831, 846, 858, 859, 962, 976, 977, 983, 987, 993, 996, 997, 1002, 1003, 1006, 1008, 1014, 1021, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "nowadai": 380, "nozawa": [1045, 1046], "np": [4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 101, 102, 104, 105, 112, 113, 114, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 140, 143, 144, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 245, 246, 247, 248, 249, 250, 251, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 374, 375, 380, 382, 385, 386, 389, 392, 394, 398, 404, 407, 408, 411, 412, 413, 414, 415, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 483, 494, 495, 506, 507, 518, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 561, 562, 563, 564, 567, 568, 579, 580, 583, 584, 586, 587, 591, 592, 595, 599, 602, 604, 607, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 668, 669, 670, 672, 673, 674, 675, 676, 679, 680, 681, 682, 685, 689, 690, 692, 693, 697, 700, 701, 704, 705, 707, 710, 711, 712, 713, 723, 724, 726, 727, 729, 731, 732, 735, 736, 738, 751, 753, 760, 766, 770, 775, 778, 779, 780, 781, 784, 785, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 849, 850, 851, 855, 856, 863, 864, 866, 872, 873, 874, 875, 876, 878, 879, 880, 887, 888, 891, 892, 894, 895, 896, 899, 901, 902, 904, 905, 907, 908, 909, 910, 915, 916, 917, 918, 919, 920, 922, 924, 925, 934, 935, 936, 941, 942, 949, 950, 952, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 973, 976, 977, 982, 983, 985, 987, 988, 990, 991, 993, 997, 998, 999, 1001, 1002, 1003, 1014, 1018, 1019, 1021, 1022, 1023, 1031, 1033, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "npach": [1045, 1046], "npo": 223, "npolynomi": 4, "nprior": 245, "npropag": 44, "nqy18": 415, "nr": 414, "nreceiv": 269, "nrow": [4, 5, 30, 32, 34, 57, 66, 73, 95, 127, 160, 170, 199, 201, 207, 217, 220, 221, 224, 238, 262, 263, 283, 307, 309, 310, 320, 326, 345, 346, 1019], "nsampl": [382, 794, 795], "nsup": 14, "nswdemand": 127, "nswprice": 127, "nt": 17, "nt_uri": 17, "ntest": 292, "ntf": 697, "nth": [267, 705, 987], "nthe": [170, 258, 360], "ntime": [11, 271], "nto": [205, 269], "ntol": 148, "ntrain": 50, "ntree": 4, "ntrue": [6, 325, 326, 1019], "ntt": 697, "ntu": [175, 374, 485, 506, 507, 656], "nu": [7, 9, 11, 160, 213, 228, 337, 366, 414, 417, 617, 675, 901, 902, 903, 993, 1001, 1002, 1041, 1045], "nuanc": 394, "nuc": 278, "nuclear": [148, 377], "nuclei": [148, 377], "nudge_dataset": 302, "nuff": 1037, "nugmanov": [1038, 1039], "nuisanc": 417, "nukariya": [1042, 1043], "null": [44, 71, 169, 170, 171, 260, 266, 407, 411, 494, 646, 667, 678, 702, 728, 754, 792, 824, 983, 984, 987, 1002, 1040], "null_count": 13, "nullabl": [625, 626, 627, 628, 1041, 1045], "nullformatt": [220, 222, 225, 283], "nullloc": 288, "num": [4, 12, 71, 148, 151, 156, 157, 158, 170, 171, 201, 267, 268, 319, 321, 322, 494, 630], "num_col": 242, "num_cor": 386, "num_featur": [985, 1045], "num_linear_processor": 132, "num_missing_cel": 127, "num_pip": 242, "num_preprocess": 462, "num_proc": [230, 316], "num_sampl": [796, 810, 1045], "num_selector": 132, "num_sent": 70, "num_thread": 283, "num_tree_processor": 132, "num_trial": 265, "numba": [283, 1008], "number": [4, 5, 7, 8, 10, 12, 13, 14, 19, 20, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 61, 62, 63, 65, 67, 68, 70, 71, 72, 73, 75, 82, 85, 86, 91, 92, 95, 97, 99, 100, 102, 111, 112, 114, 117, 119, 120, 122, 123, 124, 125, 128, 132, 134, 144, 145, 148, 159, 160, 164, 166, 169, 170, 175, 183, 188, 198, 199, 200, 201, 206, 207, 213, 214, 215, 216, 217, 220, 228, 232, 236, 238, 239, 245, 246, 248, 250, 251, 254, 255, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 278, 283, 285, 289, 290, 305, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 329, 338, 343, 346, 352, 353, 356, 360, 362, 367, 368, 372, 374, 375, 376, 377, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 579, 580, 581, 582, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 703, 705, 710, 711, 712, 714, 716, 718, 721, 725, 726, 727, 728, 731, 732, 735, 737, 749, 752, 771, 775, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 923, 935, 936, 939, 940, 955, 956, 958, 961, 962, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1014, 1021, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "number_norm": 19, "numbernormalizingvector": 19, "numer": [4, 13, 19, 66, 71, 75, 119, 121, 132, 148, 156, 159, 170, 171, 188, 199, 217, 238, 240, 242, 293, 311, 318, 322, 353, 374, 375, 377, 383, 385, 386, 392, 393, 394, 407, 409, 414, 415, 416, 417, 419, 420, 438, 441, 445, 457, 469, 470, 473, 476, 487, 488, 489, 494, 498, 499, 500, 502, 503, 508, 529, 531, 533, 538, 539, 545, 559, 560, 565, 579, 588, 609, 615, 618, 625, 628, 630, 631, 644, 650, 652, 670, 685, 688, 692, 712, 775, 785, 791, 796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 834, 835, 836, 837, 838, 856, 857, 862, 867, 872, 873, 880, 911, 912, 913, 919, 920, 935, 936, 976, 977, 983, 984, 988, 995, 997, 998, 1003, 1011, 1012, 1014, 1023, 1030, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "numeric_featur": [71, 319], "numeric_onli": 170, "numeric_preprocessor": 240, "numeric_transform": [71, 319], "numerical_column": [169, 171, 465], "numerical_columns_subset": 121, "numerical_featur": [170, 311], "numerical_pip": 171, "numerical_transform": 71, "numfocu": 0, "numpi": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 104, 105, 112, 113, 114, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 140, 143, 144, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 373, 374, 375, 378, 380, 381, 382, 383, 384, 386, 388, 389, 392, 393, 394, 397, 398, 400, 401, 403, 404, 407, 408, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 483, 488, 491, 492, 494, 501, 504, 506, 507, 519, 525, 529, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 567, 568, 579, 580, 583, 584, 586, 587, 589, 599, 602, 616, 625, 626, 627, 628, 629, 630, 631, 641, 644, 645, 647, 650, 651, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 670, 674, 675, 676, 682, 685, 686, 689, 690, 691, 692, 693, 697, 700, 701, 704, 705, 707, 710, 712, 723, 724, 726, 727, 729, 731, 732, 735, 736, 751, 753, 770, 776, 778, 779, 780, 781, 784, 785, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 825, 826, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 901, 902, 904, 905, 907, 915, 916, 917, 918, 922, 924, 933, 934, 935, 936, 940, 941, 942, 949, 950, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 973, 974, 976, 977, 982, 983, 985, 987, 988, 990, 993, 997, 999, 1002, 1003, 1006, 1008, 1014, 1017, 1018, 1019, 1021, 1022, 1023, 1030, 1033, 1034, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "numpydoc": [380, 394, 397, 400], "nune": 1031, "nuniformli": 128, "nuniqu": 311, "nurseit": 1047, "nusvc": [344, 366, 435, 902, 988, 1002, 1030, 1031, 1032, 1035, 1038, 1040, 1041, 1042, 1044], "nusvr": [7, 366, 905, 1002, 1032, 1038, 1040, 1041, 1042, 1044, 1045], "nutshel": 985, "nv": 12, "nvidia": [0, 392], "nvirginica": 269, "nwanna": 1045, "nweight": 134, "nwith": [37, 57, 61, 147, 352], "nx": [11, 296, 375, 496], "nxorabl": 1040, "ny": [11, 13, 259, 296, 375, 377, 496, 977, 999], "nyc": [1006, 1012], "nymark": 1045, "nystroem": [4, 163, 213, 228, 233, 372, 638, 639, 640, 675, 865, 904, 905, 1025, 1031, 1037, 1040, 1042, 1043, 1044], "nystroem_approx_svm": 233, "nystroem_scor": 233, "nystroem_tim": 233, "nystrom": [874, 1039, 1040], "nystr\u00f6m": [4, 979], "nyu": [0, 181, 848], "nz": 528, "nzw": 1038, "n\u00e1jera": [1034, 1035, 1036, 1037], "n\u00e1pole": 1043, "o": [0, 17, 19, 27, 30, 38, 49, 55, 60, 61, 63, 64, 82, 85, 91, 97, 129, 148, 159, 187, 192, 197, 199, 214, 234, 245, 260, 262, 269, 305, 306, 310, 316, 319, 322, 329, 342, 356, 366, 375, 377, 380, 397, 407, 409, 412, 414, 418, 420, 442, 445, 446, 448, 471, 473, 497, 532, 602, 625, 664, 665, 690, 827, 855, 870, 911, 955, 956, 979, 981, 983, 984, 987, 988, 990, 991, 1001, 1002, 1003, 1030, 1033, 1036, 1038, 1039, 1042, 1043, 1045, 1046, 1047], "oa": [10, 15, 29, 34, 35, 77, 81, 82, 83, 102, 126, 166, 292, 294, 409, 467, 468, 471, 472, 474, 475, 510, 547, 796, 981, 1009], "oa_ms": 79, "oa_shrinkag": 79, "oak": 311, "oarc": 983, "ob2019": 987, "obaja": 1034, "obatin": 310, "obei": [394, 985], "obj": [235, 401, 565, 566, 944, 945, 946, 947, 948, 953], "obj_func": [608, 609], "object": [4, 11, 14, 15, 19, 26, 27, 44, 50, 62, 66, 70, 71, 98, 109, 127, 132, 138, 146, 147, 156, 166, 170, 183, 195, 199, 215, 217, 227, 235, 239, 241, 242, 243, 257, 258, 267, 269, 270, 272, 296, 311, 318, 319, 321, 322, 325, 352, 353, 362, 373, 374, 375, 380, 381, 383, 385, 386, 387, 389, 393, 394, 395, 398, 401, 407, 408, 409, 412, 415, 416, 417, 421, 423, 428, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 709, 716, 729, 730, 739, 755, 756, 778, 779, 786, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 914, 919, 920, 921, 922, 923, 926, 930, 932, 942, 943, 944, 945, 946, 947, 948, 950, 952, 953, 955, 972, 973, 975, 983, 984, 985, 986, 990, 993, 994, 997, 1000, 1001, 1002, 1007, 1008, 1009, 1014, 1015, 1017, 1018, 1021, 1023, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "object_nam": [235, 944, 947], "obozinski": 412, "obscur": [994, 1046], "observ": [4, 5, 7, 9, 11, 13, 14, 20, 24, 27, 34, 37, 40, 43, 53, 62, 71, 78, 80, 81, 82, 96, 97, 100, 102, 111, 114, 115, 117, 118, 124, 127, 128, 131, 139, 140, 148, 151, 154, 156, 157, 158, 160, 169, 170, 171, 178, 179, 194, 195, 197, 199, 200, 201, 203, 213, 217, 224, 225, 231, 232, 238, 256, 260, 262, 263, 267, 283, 286, 289, 296, 310, 321, 328, 337, 338, 342, 343, 351, 352, 353, 358, 359, 375, 377, 394, 397, 405, 407, 409, 410, 411, 412, 413, 416, 417, 439, 441, 443, 444, 445, 447, 457, 458, 467, 468, 469, 470, 471, 472, 473, 474, 522, 530, 549, 550, 561, 608, 609, 644, 650, 655, 699, 714, 716, 755, 817, 837, 845, 878, 880, 983, 986, 987, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1011, 1015, 1017, 1018, 1020, 1031, 1043, 1044, 1045, 1046], "observatori": 156, "obsolet": [1030, 1046], "obstruct": 1037, "obtain": [4, 7, 9, 12, 13, 20, 27, 48, 55, 57, 58, 71, 74, 75, 100, 102, 111, 121, 124, 125, 130, 138, 148, 153, 155, 169, 170, 183, 199, 201, 203, 213, 224, 238, 245, 246, 247, 256, 260, 261, 262, 266, 269, 286, 310, 318, 336, 342, 352, 353, 360, 362, 375, 377, 382, 394, 401, 405, 407, 409, 410, 412, 414, 415, 416, 417, 435, 440, 467, 494, 530, 531, 553, 554, 555, 556, 557, 558, 561, 562, 563, 591, 604, 612, 643, 657, 659, 664, 666, 670, 672, 674, 675, 685, 706, 710, 723, 736, 753, 790, 802, 818, 824, 827, 828, 831, 845, 856, 876, 888, 901, 904, 907, 908, 936, 977, 979, 981, 983, 984, 986, 987, 988, 990, 991, 993, 994, 997, 1001, 1002, 1036, 1038, 1041, 1043, 1044, 1045, 1046, 1047], "obviat": 979, "obviou": [169, 342, 362, 366, 404, 412], "obvious": [164, 366, 1023], "oc": 1045, "occam": 1021, "occas": 380, "occasion": [395, 724, 1039], "occup": [169, 305, 322, 494], "occupation_cler": 169, "occupation_manag": 169, "occupation_oth": 169, "occupation_profession": 169, "occupation_sal": 169, "occupation_servic": 169, "occupi": [407, 987], "occur": [15, 70, 122, 199, 203, 217, 346, 362, 380, 382, 388, 395, 404, 407, 409, 411, 415, 442, 506, 507, 570, 579, 586, 588, 589, 625, 669, 795, 796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 869, 924, 987, 989, 997, 1023, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "occurr": [199, 311, 352, 353, 375, 380, 407, 415, 567, 568, 579, 587, 588, 615, 625, 626, 627, 628, 780, 834, 862, 989, 1031, 1036], "ocean": 296, "ocsvm": [9, 213], "oct": [690, 766, 984, 990], "octob": [79, 375, 1030, 1037, 1043, 1044, 1046], "od280": 377, "od315": 377, "odd": [263, 414, 512, 710, 987, 1037, 1038], "off": [5, 12, 14, 37, 39, 40, 47, 48, 52, 53, 78, 82, 85, 95, 117, 127, 203, 221, 233, 237, 254, 259, 261, 262, 305, 326, 330, 338, 348, 351, 375, 380, 382, 394, 407, 409, 416, 440, 551, 552, 557, 558, 586, 589, 632, 654, 690, 713, 794, 795, 796, 799, 800, 810, 822, 940, 986, 992, 1002, 1008, 1030, 1034, 1035, 1037], "offer": [4, 117, 382, 388, 392, 393, 394, 397, 411, 412, 414, 415, 976, 977, 988, 991, 1003, 1007, 1008, 1012, 1036, 1048], "offic": 1012, "offici": [375, 382, 394, 397, 491, 495, 1007, 1023, 1038, 1039, 1042], "offlin": [366, 380], "offset": [114, 175, 392, 409, 412, 467, 506, 507, 561, 630, 631, 639, 640, 642, 643, 675, 725, 772, 774, 845, 903, 987, 1001, 1021, 1038], "offset_": [467, 561, 675, 845, 903, 1038], "offset_init": 675, "offsetbox": 221, "offsetimag": 221, "ofmulticlass": 1002, "often": [4, 19, 24, 25, 27, 33, 70, 74, 117, 127, 130, 155, 163, 169, 170, 200, 217, 221, 238, 247, 262, 265, 305, 310, 338, 348, 351, 352, 353, 366, 367, 374, 375, 377, 380, 382, 385, 388, 392, 393, 394, 396, 401, 405, 407, 408, 409, 411, 412, 414, 415, 417, 419, 466, 519, 522, 531, 534, 630, 644, 645, 650, 651, 658, 659, 660, 661, 670, 672, 685, 725, 869, 877, 885, 897, 976, 977, 979, 982, 983, 984, 985, 986, 987, 989, 990, 992, 993, 994, 997, 1000, 1001, 1003, 1014, 1016, 1021, 1022, 1023, 1031, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "og": 415, "ogbonna": 1043, "ogordon100": 1043, "ogrid": 14, "ogrisel": 1048, "ogu": 415, "ogura": 1045, "oh": [872, 1040], "ohad": 1044, "ohayon": [1038, 1039, 1046], "ohio": 375, "ohno": 405, "oj_lappi": 1042, "oja": [419, 531], "ojala": [266, 411, 824], "ojeda": 1044, "ok": [10, 380, 993], "okal": 1034, "okbalefthand": 1036, "okcupid": 1005, "okhlopkov": [1036, 1037], "okon": 1044, "okroshiashvili": 1043, "ol": [178, 189, 194, 196, 197, 205, 216, 318, 654, 983], "ol2001": 977, "olatunji": 1045, "old": [217, 380, 384, 386, 407, 466, 534, 644, 650, 897, 984, 1008, 1030, 1035, 1036, 1038, 1043, 1044, 1045], "olden": 1038, "older": [201, 235, 379, 384, 1005, 1011, 1028, 1033, 1040, 1042], "oldest": [384, 494], "oldid": 987, "oldja": 1042, "oleg": 1040, "oleggio": 1034, "olegovich": 1037, "oleh": [1042, 1044], "oleksandr": [1038, 1039, 1040, 1041, 1044], "oleksii": 1047, "olemiss": 677, "olga": [626, 977], "oli": 1037, "oliblum90": [1037, 1038], "olicairn": 1041, "olimpio": 1038, "oliph": 1030, "oliv": [328, 330, 1038, 1039, 1041, 1042, 1043], "oliveira": [1036, 1038, 1040, 1044], "olivetti": [95, 119, 373, 412, 493, 1025, 1030, 1038], "olivetti_fac": 493, "olivi": [0, 1, 15, 17, 37, 48, 61, 188, 199, 217, 221, 261, 263, 351, 352, 353, 395, 895, 1000, 1006, 1008, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "oll": 1045, "olr": 178, "olsen": 1037, "olshen": [907, 908, 1003], "olson": 1036, "olszewski": 1043, "olvi": [148, 377], "om": 1037, "omar": [0, 1, 1040, 1045, 1046, 1047, 1048], "omarmanzoor": 1046, "omega": [346, 410, 981], "omega_": 981, "omega_k": [410, 981], "omer": 1035, "omit": [118, 168, 169, 330, 385, 420, 473, 532, 664, 666, 674, 803, 805, 827, 828, 831, 834, 835, 836, 837, 838, 856, 985, 992], "omohundro": 990, "omp": [98, 104, 198, 412, 529, 535, 540, 546, 662, 663, 683, 684, 1010, 1025, 1030, 1038], "omp_cv": 198, "omp_get_max_thread": 381, "omp_num_thread": 367, "omtcyfz": 1037, "onc": [4, 8, 13, 50, 145, 148, 151, 221, 235, 238, 258, 261, 278, 283, 311, 315, 319, 351, 353, 360, 362, 366, 368, 374, 375, 378, 380, 384, 385, 386, 387, 388, 393, 394, 395, 407, 408, 410, 411, 412, 414, 415, 416, 417, 447, 449, 451, 470, 506, 507, 536, 542, 549, 557, 558, 588, 589, 595, 609, 617, 625, 645, 649, 651, 653, 659, 661, 663, 664, 665, 666, 674, 675, 676, 695, 710, 714, 716, 733, 778, 797, 801, 804, 814, 834, 835, 836, 837, 838, 911, 983, 984, 990, 997, 1001, 1002, 1003, 1014, 1023, 1027, 1030, 1038, 1040, 1041, 1042, 1043, 1047], "one": [0, 4, 8, 9, 10, 13, 15, 17, 25, 26, 27, 32, 33, 34, 37, 40, 47, 53, 55, 57, 58, 60, 61, 64, 66, 71, 81, 89, 90, 91, 95, 98, 100, 104, 116, 117, 122, 124, 127, 128, 132, 135, 147, 148, 151, 158, 159, 163, 168, 169, 170, 171, 172, 175, 178, 179, 183, 188, 189, 191, 192, 193, 195, 199, 201, 208, 209, 214, 217, 222, 228, 235, 236, 238, 247, 250, 256, 257, 258, 260, 261, 263, 264, 267, 268, 269, 270, 278, 281, 283, 288, 302, 306, 307, 310, 311, 315, 317, 318, 319, 328, 337, 338, 347, 351, 352, 353, 356, 360, 362, 366, 367, 368, 374, 375, 376, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 458, 460, 462, 467, 472, 485, 486, 488, 489, 490, 491, 492, 493, 494, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 512, 532, 537, 538, 539, 541, 545, 549, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 567, 579, 581, 582, 586, 587, 588, 589, 608, 609, 613, 614, 618, 625, 628, 630, 631, 632, 633, 641, 645, 646, 647, 648, 652, 655, 656, 657, 659, 664, 666, 667, 669, 671, 672, 673, 674, 676, 678, 686, 690, 693, 697, 701, 707, 709, 718, 726, 727, 731, 735, 747, 748, 751, 760, 768, 771, 775, 776, 777, 778, 780, 781, 784, 785, 787, 788, 789, 790, 793, 794, 795, 796, 799, 800, 802, 803, 804, 806, 808, 810, 814, 815, 818, 820, 822, 823, 825, 826, 827, 828, 829, 831, 832, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 855, 859, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 878, 879, 880, 883, 885, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 915, 925, 928, 938, 945, 958, 976, 977, 979, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1012, 1014, 1018, 1020, 1021, 1022, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "one_class": 236, "one_hot": 311, "one_hot_encod": [4, 121], "one_hot_encoder_": 564, "one_hot_linear_pipelin": 4, "one_hot_linear_predict": 4, "one_hot_poly_pipelin": 4, "one_hot_poly_predict": 4, "one_hot_result": 121, "one_hot_tim": 4, "one_imag": [415, 582, 585], "one_vs_on": [417, 608, 988], "one_vs_rest": [608, 988], "oneclasssvm": [9, 11, 213, 228, 318, 337, 561, 675, 845, 993, 1001, 1002, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "oned": 397, "onehot": [240, 306, 307, 408, 864, 997], "onehot_categor": [199, 217], "onehotencod": [4, 71, 116, 121, 132, 169, 170, 199, 217, 230, 238, 240, 242, 311, 316, 318, 321, 322, 374, 394, 408, 414, 464, 465, 564, 579, 580, 862, 866, 867, 870, 873, 880, 977, 997, 1031, 1034, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "onehotencoderonehotencod": [71, 116, 132, 169, 170, 230, 240, 316, 319], "ones": [4, 11, 34, 43, 55, 71, 81, 122, 128, 151, 175, 183, 203, 204, 228, 231, 235, 260, 268, 271, 290, 309, 326, 348, 366, 367, 380, 388, 394, 407, 409, 411, 414, 422, 425, 429, 448, 530, 564, 579, 608, 609, 616, 642, 643, 656, 657, 668, 674, 701, 793, 798, 803, 814, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 874, 878, 941, 983, 987, 992, 993, 997, 1002, 1021, 1030, 1038, 1039, 1040], "onetoonefeaturemixin": [382, 431], "onevsoneclassifi": [278, 398, 828, 829, 1031, 1033, 1034, 1036, 1037, 1039, 1042, 1044, 1047], "onevsrestclassifi": [236, 267, 269, 278, 398, 405, 827, 829, 899, 1014, 1031, 1032, 1034, 1036, 1037, 1043, 1044, 1047], "ong": 706, "ongari": 1047, "onggo": 1046, "ongo": [321, 381, 395], "onli": [4, 7, 11, 14, 15, 20, 24, 25, 26, 27, 30, 33, 34, 37, 39, 40, 45, 49, 53, 55, 58, 66, 70, 71, 72, 74, 75, 81, 90, 98, 99, 101, 105, 111, 113, 118, 119, 120, 121, 123, 131, 132, 143, 144, 145, 148, 151, 153, 156, 158, 160, 164, 166, 168, 169, 170, 175, 177, 182, 183, 188, 195, 199, 200, 202, 205, 207, 208, 217, 218, 220, 221, 228, 230, 232, 234, 235, 239, 242, 245, 246, 247, 250, 251, 256, 258, 260, 262, 263, 266, 267, 268, 269, 271, 272, 278, 281, 283, 289, 291, 294, 296, 301, 305, 306, 310, 311, 317, 318, 325, 326, 328, 334, 335, 338, 342, 343, 346, 347, 351, 352, 353, 356, 357, 360, 362, 366, 367, 368, 373, 374, 375, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 397, 398, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 487, 488, 489, 490, 492, 494, 495, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 514, 517, 521, 522, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 697, 705, 707, 711, 723, 726, 727, 731, 733, 734, 735, 738, 739, 740, 753, 755, 757, 771, 775, 776, 777, 778, 780, 781, 784, 785, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 810, 814, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 923, 925, 928, 936, 938, 941, 943, 948, 953, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1007, 1008, 1009, 1012, 1021, 1022, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048], "onlin": [5, 6, 8, 15, 36, 51, 68, 95, 98, 119, 166, 177, 207, 213, 218, 237, 300, 368, 375, 379, 385, 394, 412, 415, 417, 440, 444, 445, 447, 493, 500, 529, 534, 535, 536, 537, 543, 544, 580, 582, 656, 664, 665, 666, 674, 676, 825, 834, 835, 836, 837, 838, 841, 842, 847, 849, 850, 868, 869, 879, 899, 900, 979, 983, 991, 993, 1006, 1009, 1010, 1012, 1021, 1025, 1030, 1034, 1035, 1037, 1045], "onlineldavb": 534, "only_non_neg": 1043, "only_physical_cor": 117, "onnx": [401, 1007, 1008], "onto": [86, 221, 222, 233, 305, 392, 412, 415, 419, 444, 446, 459, 531, 537, 541, 625, 626, 628, 686, 981, 985, 990], "onward": [873, 1034], "oob": [110, 111, 123, 136, 166, 414, 513, 562, 1008, 1009, 1032, 1043, 1047], "oob_best_it": 123, "oob_color": 123, "oob_decision_function_": [553, 555, 562], "oob_error": 115, "oob_improvement_": [123, 414, 557, 558, 1032], "oob_lin": 123, "oob_prediction_": [554, 556, 563], "oob_scor": [115, 414, 553, 554, 555, 556, 562, 563, 1035, 1037], "oob_score_": [115, 553, 554, 555, 556, 557, 558, 562, 563, 1032, 1046], "oob_scores_": [557, 558, 1046], "op": [384, 426, 656, 657, 664, 665, 666, 674, 675, 676, 856, 857, 899, 997], "opaqu": 995, "open": [8, 12, 17, 222, 374, 375, 378, 379, 380, 384, 386, 392, 393, 395, 401, 408, 415, 485, 494, 506, 507, 977, 1007, 1012, 1017, 1033, 1037, 1038, 1040, 1046], "open_pric": 12, "openbla": [366, 367, 378, 392, 955, 1043, 1047, 1048], "openblas_num_thread": 367, "opencv": 375, "opengl": 1023, "opengraph": [380, 397, 400], "openml": [4, 13, 71, 132, 156, 169, 199, 207, 215, 217, 229, 278, 281, 301, 373, 397, 494, 1025, 1038, 1040, 1043], "openml100": 374, "openmp": [316, 378, 383, 392, 394, 407, 414, 955, 1041, 1043, 1046], "openrec": 1007, "opentsn": 690, "oper": [14, 19, 148, 159, 166, 229, 234, 241, 253, 255, 257, 262, 267, 276, 328, 353, 366, 367, 377, 378, 380, 383, 386, 392, 394, 395, 397, 401, 403, 411, 412, 414, 415, 416, 420, 446, 459, 466, 473, 480, 481, 482, 483, 502, 531, 532, 539, 549, 550, 564, 570, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 614, 619, 622, 628, 633, 641, 656, 687, 691, 700, 704, 705, 706, 724, 771, 778, 779, 785, 786, 815, 825, 828, 839, 840, 862, 866, 871, 882, 883, 897, 904, 907, 938, 955, 960, 983, 990, 997, 1002, 1007, 1009, 1012, 1021, 1034, 1036, 1037, 1038, 1040, 1041, 1046], "operand": 417, "operation": [217, 1012], "operatornam": [412, 738, 983, 987, 1003], "opinion": 395, "opitz": 987, "opportun": [532, 1001], "oppos": [67, 235, 384, 403, 407, 895, 990, 1002, 1014, 1030, 1048], "opposit": [25, 53, 67, 100, 169, 170, 188, 267, 394, 405, 409, 411, 416, 441, 445, 447, 467, 536, 538, 545, 561, 710, 727, 845, 903, 1030], "opposite_lof_scor": 845, "opt": [378, 382], "opta": 892, "optic": [36, 44, 68, 166, 319, 373, 418, 442, 444, 453, 454, 455, 500, 1009, 1024, 1025, 1039, 1043, 1044, 1045, 1046, 1047, 1048], "optim": [7, 13, 14, 27, 53, 54, 57, 60, 72, 78, 79, 95, 122, 123, 125, 127, 147, 148, 151, 152, 155, 156, 157, 158, 159, 183, 187, 188, 192, 207, 215, 234, 238, 258, 265, 268, 273, 278, 281, 287, 302, 305, 310, 319, 328, 340, 346, 351, 352, 353, 362, 366, 369, 374, 377, 380, 382, 383, 392, 394, 397, 402, 404, 407, 409, 411, 412, 414, 416, 417, 418, 442, 445, 446, 447, 448, 450, 455, 459, 460, 470, 471, 477, 529, 532, 533, 535, 537, 541, 555, 556, 557, 558, 572, 608, 609, 617, 618, 633, 636, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 682, 685, 688, 690, 692, 693, 699, 720, 727, 796, 810, 841, 842, 843, 845, 847, 848, 849, 850, 851, 856, 857, 875, 887, 891, 892, 899, 900, 901, 902, 903, 904, 905, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 1001, 1002, 1003, 1007, 1012, 1018, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046], "optima": 417, "optimis": [382, 407, 990, 1033, 1043, 1045], "optimist": [13, 188, 265, 351, 362, 705, 983, 987], "optimum": [61, 157, 169, 175, 273, 412, 470, 983, 986], "option": [4, 30, 46, 52, 102, 117, 125, 157, 164, 180, 183, 200, 238, 263, 269, 316, 351, 356, 362, 368, 374, 375, 376, 378, 380, 381, 383, 385, 386, 388, 389, 392, 394, 395, 397, 401, 407, 408, 410, 411, 412, 414, 415, 418, 431, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 457, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 685, 686, 687, 688, 690, 692, 693, 709, 711, 715, 726, 727, 732, 733, 734, 754, 755, 756, 761, 763, 764, 768, 771, 772, 773, 774, 775, 778, 780, 781, 784, 789, 790, 792, 797, 798, 799, 800, 802, 803, 805, 814, 818, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 926, 973, 976, 977, 983, 986, 987, 990, 997, 1000, 1002, 1003, 1008, 1021, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "option_context": 217, "ora": 1043, "oracl": [33, 199, 217, 420, 467, 468, 471, 472, 473, 474, 981, 1030], "orallo": 987, "orang": [7, 9, 53, 80, 92, 96, 97, 102, 111, 126, 127, 129, 158, 164, 187, 188, 209, 236, 248, 294, 316, 322, 359, 988, 1047], "orazbayev": 1044, "orbit": [351, 352], "order": [4, 14, 20, 24, 27, 47, 55, 64, 65, 72, 78, 89, 104, 119, 120, 121, 125, 127, 140, 156, 168, 169, 172, 175, 188, 192, 195, 199, 200, 205, 213, 217, 222, 232, 235, 238, 242, 247, 255, 258, 260, 267, 281, 302, 305, 310, 311, 312, 317, 318, 346, 351, 353, 362, 366, 367, 375, 380, 382, 385, 386, 389, 394, 397, 398, 401, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 438, 441, 444, 445, 447, 448, 453, 454, 455, 457, 462, 486, 487, 488, 493, 495, 513, 532, 533, 537, 538, 539, 541, 545, 549, 551, 553, 554, 555, 556, 557, 561, 562, 563, 564, 565, 579, 586, 589, 591, 592, 595, 604, 605, 606, 608, 620, 625, 629, 638, 656, 657, 663, 674, 683, 684, 686, 687, 691, 695, 697, 698, 700, 702, 710, 711, 716, 723, 726, 727, 735, 737, 738, 739, 751, 753, 775, 779, 780, 781, 784, 785, 786, 791, 796, 797, 799, 800, 801, 803, 807, 810, 814, 815, 820, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 849, 856, 859, 870, 872, 873, 874, 878, 879, 880, 883, 884, 885, 887, 888, 889, 890, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 919, 920, 925, 936, 951, 956, 977, 983, 984, 987, 988, 990, 991, 997, 1000, 1001, 1002, 1003, 1008, 1018, 1020, 1021, 1023, 1030, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "order_": [830, 833], "order_centroid": 352, "ordered_sampl": 217, "ordereddict": 115, "ordering_": [65, 407, 448, 453, 454, 455], "ordin": [4, 53, 71, 132, 238, 308, 311, 312, 317, 320, 374, 394, 414, 494, 565, 707, 864, 867, 872, 873, 880, 983, 984, 997, 1008, 1038, 1044], "ordinal_encod": [121, 238], "ordinal_result": 121, "ordinalencod": [121, 132, 170, 171, 199, 238, 311, 320, 374, 394, 579, 835, 867, 872, 880, 977, 989, 997, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047], "ordinalencoderordinalencod": [132, 170, 171, 311], "ordinari": [97, 114, 166, 177, 178, 181, 183, 189, 195, 201, 202, 204, 216, 218, 318, 633, 644, 650, 652, 653, 654, 655, 670, 676, 680, 681, 685, 1001, 1009, 1010, 1025], "ordinarili": [392, 394], "ordowski": 987, "oregon": 311, "oren": 1038, "oresti": 1039, "orfano": [1043, 1044, 1045, 1046, 1047], "org": [4, 12, 14, 15, 17, 24, 26, 32, 37, 46, 48, 61, 66, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 156, 160, 169, 170, 171, 175, 180, 190, 191, 199, 207, 215, 217, 221, 229, 230, 231, 233, 235, 239, 240, 241, 242, 250, 258, 260, 261, 263, 267, 272, 281, 301, 302, 311, 316, 317, 319, 320, 322, 325, 326, 327, 330, 351, 352, 353, 360, 367, 373, 378, 380, 383, 386, 388, 395, 397, 411, 593, 634, 666, 669, 674, 693, 703, 766, 841, 842, 847, 848, 849, 850, 877, 893, 907, 908, 983, 987, 1003, 1005, 1025, 1038, 1042], "organ": [0, 11, 13, 70, 80, 351, 374, 379, 380, 395, 847, 1007], "ori": 1036, "orient": [30, 95, 169, 220, 305, 394, 911, 984], "orig": [14, 290], "orig_coin": [46, 47], "orig_data_ax": 100, "origin": [4, 5, 14, 20, 21, 46, 47, 48, 51, 56, 58, 74, 75, 90, 95, 97, 98, 104, 127, 130, 144, 145, 148, 151, 153, 155, 156, 163, 164, 170, 175, 187, 188, 203, 220, 221, 222, 224, 225, 232, 233, 234, 238, 251, 257, 263, 286, 291, 302, 306, 310, 321, 326, 342, 344, 351, 353, 362, 367, 375, 377, 379, 380, 382, 384, 385, 392, 394, 401, 404, 407, 408, 411, 412, 414, 415, 417, 418, 419, 420, 432, 435, 439, 441, 442, 443, 444, 445, 447, 448, 457, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 491, 492, 493, 499, 517, 529, 531, 532, 533, 535, 536, 537, 538, 539, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 579, 580, 582, 586, 588, 589, 592, 605, 606, 608, 609, 612, 628, 630, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 690, 694, 699, 725, 760, 766, 797, 798, 803, 805, 814, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 849, 850, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 875, 876, 877, 878, 879, 888, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 917, 919, 920, 924, 925, 946, 958, 961, 980, 981, 983, 984, 986, 987, 990, 993, 998, 999, 1000, 1001, 1004, 1007, 1012, 1014, 1023, 1033, 1034, 1036, 1038, 1040, 1042, 1044, 1046], "original_param": 126, "original_shap": 48, "original_sklearn_vers": [401, 574], "original_space_centroid": 352, "orii": 1032, "orphan": [446, 459, 1030], "orr": [991, 1001], "orr\u00f9": 1033, "orthogon": [54, 96, 97, 98, 104, 166, 177, 218, 273, 406, 412, 524, 529, 535, 537, 540, 541, 546, 662, 663, 683, 684, 999, 1009, 1010, 1025, 1030], "orthogonal_mp": [546, 662, 663, 684, 983], "orthogonal_mp_gram": [662, 663, 683, 1044], "orthogonalmatchingpursuit": [198, 663, 683, 684, 983, 988, 1030, 1032, 1035, 1038, 1043, 1048], "orthogonalmatchingpursuitcv": [198, 398, 662, 1032, 1043, 1047], "orthonorm": [6, 389, 935, 979, 1019], "orthotrop": 990, "ortiz": [1040, 1046], "osa": 1038, "osaid": 1038, "osborn": [1033, 1034], "oscar": [1033, 1037], "oscil": [129, 170, 204, 407, 438], "oscillatori": [200, 997], "osei": 1044, "osendorf": [1030, 1031], "oserror": [397, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496], "osindero": [855, 992], "osman": [1039, 1045], "osx": 366, "other": [0, 4, 8, 12, 13, 24, 27, 30, 31, 33, 37, 40, 44, 52, 57, 66, 69, 71, 72, 86, 97, 98, 100, 102, 114, 116, 117, 120, 121, 124, 125, 127, 128, 134, 143, 163, 164, 166, 168, 169, 170, 171, 175, 178, 192, 199, 203, 217, 220, 221, 222, 224, 228, 229, 230, 232, 234, 235, 238, 239, 240, 247, 250, 255, 257, 260, 261, 262, 269, 270, 278, 288, 289, 290, 304, 305, 309, 310, 312, 313, 315, 316, 318, 322, 325, 338, 342, 345, 348, 351, 352, 356, 360, 362, 366, 372, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 388, 389, 393, 394, 395, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 435, 441, 442, 444, 445, 446, 447, 448, 450, 455, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 494, 495, 501, 531, 532, 533, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 592, 595, 600, 608, 609, 610, 611, 618, 625, 626, 628, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 690, 694, 697, 702, 716, 760, 771, 775, 782, 789, 796, 797, 798, 799, 800, 801, 802, 803, 805, 810, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 854, 856, 857, 859, 860, 862, 864, 865, 866, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 887, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 930, 944, 976, 977, 979, 980, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1021, 1022, 1025, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1043, 1044, 1045, 1046, 1047], "other_scor": 385, "otherwis": [11, 56, 62, 113, 160, 164, 180, 201, 207, 296, 342, 346, 362, 368, 382, 384, 386, 394, 398, 407, 409, 411, 415, 417, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 451, 452, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 525, 531, 532, 533, 534, 536, 538, 539, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 595, 600, 608, 609, 612, 629, 630, 631, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 688, 690, 694, 695, 696, 698, 700, 701, 705, 707, 711, 712, 721, 723, 724, 725, 726, 727, 735, 738, 749, 751, 752, 753, 763, 771, 775, 778, 779, 780, 781, 782, 784, 785, 786, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 810, 814, 815, 818, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 856, 857, 859, 862, 863, 864, 865, 866, 870, 871, 878, 879, 880, 881, 884, 885, 886, 888, 889, 890, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 914, 920, 922, 935, 936, 946, 948, 971, 973, 982, 983, 984, 987, 990, 991, 993, 994, 997, 999, 1001, 1002, 1007, 1012, 1014, 1032, 1038, 1039, 1040, 1043, 1046], "ott": 1034, "otto": 1005, "oudshoorn": [625, 977], "ought": 366, "our": [0, 4, 5, 7, 11, 12, 13, 42, 53, 56, 70, 71, 80, 81, 86, 95, 96, 111, 112, 118, 121, 122, 124, 125, 143, 148, 151, 156, 158, 168, 169, 170, 171, 172, 199, 203, 217, 222, 224, 235, 254, 260, 263, 266, 267, 286, 301, 305, 311, 316, 318, 330, 335, 341, 343, 346, 351, 352, 353, 362, 367, 379, 384, 385, 388, 392, 393, 394, 395, 398, 407, 411, 414, 415, 417, 418, 442, 448, 561, 642, 690, 706, 718, 723, 735, 753, 841, 842, 843, 845, 847, 849, 850, 851, 976, 977, 983, 984, 987, 993, 997, 1000, 1001, 1002, 1008, 1011, 1012, 1014, 1021, 1022, 1023, 1037, 1038, 1040, 1041, 1044, 1045, 1047], "our_rand_r": 1039, "oura": [1043, 1044, 1045], "ourselv": 1012, "ouss1508": [1045, 1046], "out": [0, 3, 4, 7, 9, 10, 12, 13, 15, 16, 17, 26, 30, 40, 50, 55, 56, 70, 71, 102, 109, 110, 115, 117, 118, 125, 126, 136, 140, 159, 166, 168, 169, 171, 183, 199, 201, 203, 207, 217, 235, 238, 245, 247, 258, 260, 263, 268, 272, 278, 281, 310, 311, 318, 328, 330, 334, 335, 338, 346, 351, 365, 375, 377, 378, 380, 382, 383, 384, 386, 392, 394, 407, 410, 412, 414, 415, 417, 423, 433, 434, 440, 441, 443, 444, 445, 447, 470, 480, 481, 482, 483, 497, 513, 514, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 586, 587, 589, 602, 605, 606, 632, 637, 638, 639, 640, 649, 653, 664, 666, 671, 673, 674, 686, 687, 690, 699, 724, 738, 739, 796, 798, 799, 800, 801, 803, 804, 805, 806, 810, 825, 834, 835, 836, 837, 838, 843, 848, 851, 855, 856, 857, 865, 869, 876, 888, 891, 892, 914, 949, 951, 956, 977, 981, 982, 986, 987, 988, 990, 995, 997, 1008, 1009, 1010, 1012, 1018, 1021, 1023, 1025, 1030, 1032, 1034, 1036, 1038, 1039, 1042, 1043, 1046, 1048], "out_activation_": [856, 857], "out_bounds_predict": 201, "out_fil": [911, 1003], "out_of_bound": [231, 633], "out_of_cluster_doc": 19, "outcom": [4, 117, 169, 394, 414, 567, 656, 707, 739, 791, 827, 894, 895, 896, 901, 904, 983, 987, 1003, 1011, 1023, 1034, 1038, 1040], "outdat": 383, "outer": [20, 100, 265, 327, 449, 512, 638, 648, 649, 652, 979, 1031], "outer_cv": [265, 322], "outer_numb": 327, "outermost": 342, "outli": [9, 80, 394, 467, 472, 983, 993], "outlier": [3, 16, 34, 44, 54, 80, 81, 82, 124, 128, 151, 166, 177, 179, 197, 199, 201, 202, 203, 204, 205, 213, 218, 227, 243, 284, 297, 304, 309, 312, 313, 337, 348, 375, 394, 407, 409, 414, 429, 444, 462, 464, 467, 468, 471, 472, 473, 474, 488, 489, 490, 494, 508, 510, 520, 522, 561, 629, 637, 647, 668, 669, 670, 674, 675, 676, 677, 690, 700, 825, 845, 849, 860, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 884, 885, 886, 887, 888, 889, 890, 902, 903, 905, 987, 1001, 1002, 1007, 1009, 1010, 1024, 1025, 1030, 1035, 1036, 1038], "outlier_detector": [238, 429], "outlier_label": [849, 1040], "outlier_label_": 849, "outlier_mask": 202, "outlier_plot": 80, "outliermixin": 1047, "outliers_": 647, "outliers_cov": 80, "outliers_fract": 228, "outliers_index": 81, "outliers_offset": 81, "outlin": [66, 120, 380, 382, 394, 395, 396, 407, 976, 1025], "outlying": 993, "outperform": [78, 86, 127, 132, 278, 310, 392, 411, 414, 450, 460, 989, 997], "output": [12, 15, 25, 27, 37, 50, 53, 59, 98, 110, 111, 112, 114, 120, 132, 135, 136, 139, 140, 143, 151, 159, 163, 164, 166, 169, 195, 227, 235, 239, 242, 243, 248, 254, 258, 260, 263, 267, 269, 270, 278, 283, 306, 309, 311, 312, 315, 318, 319, 321, 352, 353, 355, 356, 358, 360, 361, 373, 374, 375, 377, 380, 382, 386, 388, 392, 393, 394, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 423, 428, 431, 435, 439, 440, 441, 443, 444, 445, 447, 448, 450, 457, 458, 460, 461, 462, 463, 464, 465, 466, 480, 481, 482, 483, 486, 489, 490, 491, 492, 493, 494, 495, 501, 503, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 644, 645, 648, 650, 651, 652, 655, 656, 658, 659, 660, 661, 664, 665, 666, 669, 671, 672, 674, 676, 677, 679, 680, 681, 682, 686, 687, 688, 690, 692, 694, 697, 698, 711, 712, 719, 720, 721, 723, 725, 732, 742, 743, 745, 747, 748, 749, 750, 751, 753, 758, 764, 769, 782, 785, 787, 788, 794, 795, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 820, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 842, 843, 844, 848, 849, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 887, 888, 891, 892, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 920, 922, 925, 936, 937, 943, 944, 946, 954, 974, 976, 977, 979, 981, 983, 984, 987, 988, 989, 990, 991, 994, 997, 1002, 1009, 1010, 1014, 1015, 1017, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "output_dict": [711, 1038, 1042], "output_distribut": [75, 305, 309, 408, 875, 876, 887, 888, 997], "output_fil": 485, "output_indices_": [462, 1043], "output_label": 327, "output_label_arrai": 327, "outputcodeclassifi": [278, 398, 827, 828, 1037, 1042, 1046, 1047], "outputs_2d_": [841, 849, 1040], "outreach": 395, "outsid": [6, 9, 19, 120, 200, 201, 231, 242, 415, 444, 633, 878, 993, 1019, 1038], "outward": 305, "outweigh": 1034, "ouvert": [755, 756, 985], "ova": [208, 664, 666, 674, 1001], "ovb": [168, 169], "over": [4, 7, 8, 9, 20, 24, 26, 27, 31, 37, 50, 55, 56, 72, 73, 74, 95, 114, 117, 122, 127, 128, 143, 147, 151, 159, 163, 168, 170, 181, 193, 199, 207, 217, 228, 238, 260, 261, 263, 265, 267, 268, 269, 272, 288, 296, 299, 300, 307, 318, 319, 321, 325, 351, 352, 366, 367, 368, 375, 376, 379, 380, 381, 382, 386, 393, 394, 403, 405, 406, 407, 408, 411, 412, 413, 414, 415, 419, 444, 447, 462, 470, 507, 531, 532, 534, 535, 536, 537, 544, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 586, 587, 589, 592, 600, 628, 630, 631, 632, 642, 643, 644, 645, 650, 651, 656, 658, 659, 660, 661, 663, 664, 665, 666, 674, 675, 676, 683, 684, 695, 714, 716, 736, 760, 785, 790, 794, 796, 799, 800, 802, 807, 808, 810, 818, 820, 821, 822, 823, 824, 826, 855, 856, 857, 858, 874, 878, 899, 907, 909, 916, 925, 955, 976, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1012, 1019, 1022, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "overal": [4, 43, 48, 111, 114, 117, 122, 132, 156, 217, 257, 283, 310, 311, 352, 366, 379, 380, 386, 404, 405, 414, 445, 447, 462, 469, 470, 476, 547, 880, 984, 987, 1003, 1012, 1040], "overallqu": 132, "overcom": [118, 203, 366, 415], "overcomplet": 412, "overconstrain": 127, "overestim": [102, 362, 411], "overfit": [4, 27, 116, 122, 124, 127, 166, 170, 171, 172, 178, 200, 203, 228, 247, 253, 255, 261, 265, 275, 276, 299, 306, 307, 309, 310, 311, 312, 338, 346, 356, 358, 359, 375, 394, 405, 411, 414, 435, 486, 487, 559, 560, 565, 566, 655, 796, 799, 800, 810, 821, 822, 856, 857, 859, 874, 878, 982, 991, 993, 995, 997, 1003, 1009, 1012, 1021, 1033], "overflow": [379, 388, 392, 1011, 1033, 1037, 1038, 1039, 1040, 1041, 1043], "overflowerror": 1040, "overhead": [8, 283, 367, 368, 380, 386, 389, 392, 394, 414, 439, 443, 447, 532, 697, 831, 832, 834, 835, 836, 837, 838, 839, 840, 955, 989, 990, 1033, 1038, 1039, 1042], "overlai": [388, 630], "overlaid": 994, "overlap": [12, 13, 37, 55, 90, 125, 147, 223, 247, 352, 404, 407, 411, 414, 415, 585, 789, 790, 797, 801, 803, 804, 805, 806, 814, 984, 997, 1036], "overli": [13, 25, 26, 188, 265, 362, 412, 987], "overlin": [260, 404], "overparameter": 983, "overrid": [382, 415, 444, 448, 455, 540, 546, 586, 587, 589, 591, 592, 595, 654, 662, 683, 684, 802, 818, 841, 842, 843, 845, 847, 849, 850, 851, 1030, 1038, 1040, 1044, 1046], "overridden": [382, 394, 417, 540, 546, 614, 619, 622, 692, 1038, 1039, 1046], "oversampl": [542, 1030], "oversc": 1045, "overset": [412, 994], "overst": 169, "oversubscript": [775, 955, 1044], "overview": [75, 166, 265, 277, 279, 281, 356, 381, 383, 393, 394, 494, 731, 740, 796, 812, 822, 827, 828, 829, 907, 989, 1001, 1009, 1024, 1025], "overwhelm": 380, "overwrit": [127, 444, 494, 629, 1014, 1030, 1041, 1046, 1047], "overwrite_": 1030, "overwritten": [440, 530, 531, 532, 534, 539, 546, 605, 606, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 670, 672, 677, 679, 680, 681, 682, 684, 955, 957, 1043], "ovo": [278, 315, 785, 827, 901, 904, 987, 988, 1002], "ovo_tpr": 269, "ovo_tre": 278, "ovr": [30, 191, 214, 278, 281, 315, 347, 656, 657, 785, 828, 899, 901, 904, 983, 987, 988, 1002, 1030, 1035, 1036, 1038, 1039, 1040, 1044, 1045], "ovr_jaccard_scor": 281, "ovr_tre": 278, "ow": 60, "owen": [647, 1039, 1040], "own": [13, 34, 117, 217, 235, 250, 283, 285, 327, 352, 367, 374, 383, 384, 385, 388, 389, 397, 406, 407, 419, 423, 438, 452, 531, 555, 562, 644, 794, 795, 841, 842, 843, 845, 847, 849, 850, 851, 873, 907, 909, 925, 930, 955, 983, 989, 990, 993, 997, 1002, 1007, 1012, 1022, 1023, 1037, 1038, 1040, 1047], "owner": [235, 375, 377, 943, 944], "ownership": 382, "oyamada": 1035, "oyindamola": 1045, "oywa": 1040, "ozga": 1038, "ozsvald": 1032, "p": [0, 11, 14, 24, 26, 27, 41, 61, 80, 81, 85, 92, 102, 123, 144, 148, 154, 175, 211, 216, 217, 220, 222, 232, 248, 260, 266, 267, 296, 374, 375, 377, 378, 385, 388, 404, 405, 407, 409, 410, 412, 414, 416, 417, 418, 420, 440, 442, 444, 445, 448, 453, 454, 455, 467, 469, 472, 473, 476, 496, 526, 532, 536, 538, 539, 545, 547, 548, 549, 551, 553, 554, 555, 556, 557, 559, 562, 563, 564, 588, 590, 591, 592, 593, 594, 596, 597, 598, 602, 603, 604, 605, 606, 607, 613, 614, 625, 638, 641, 686, 688, 690, 692, 697, 703, 713, 721, 738, 749, 783, 785, 798, 804, 805, 806, 809, 824, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 855, 859, 860, 875, 887, 893, 909, 910, 911, 980, 981, 983, 984, 985, 987, 989, 990, 991, 992, 993, 994, 997, 1001, 1002, 1005, 1018, 1021, 1030, 1031, 1033, 1036, 1038, 1045, 1046, 1047], "p0": 26, "p1": [26, 134], "p1d": 26, "p2": [26, 134, 217], "p3": 134, "p4": 134, "p5": 936, "p592": 115, "p_": [144, 987, 990, 1003], "p_c": [92, 521], "p_e": 714, "p_grid": 265, "p_i": [987, 990], "p_k": [267, 987], "p_n": [267, 705, 987], "p_o": 714, "p_val": 260, "p_val_uncorrect": 260, "p_valu": [602, 603, 604], "p_w": 92, "p_w_c": [92, 521], "pa": [664, 665, 896, 983, 987, 1000], "pab": [1045, 1046], "pablo": [1040, 1043, 1044], "pabloduque0": 1043, "pace": 375, "pacha": 1038, "pacif": 260, "pack": [389, 1038], "packag": [0, 46, 53, 163, 235, 283, 367, 373, 374, 377, 378, 380, 381, 382, 384, 386, 388, 389, 392, 394, 397, 406, 409, 414, 415, 450, 476, 644, 645, 977, 983, 986, 990, 997, 1003, 1012, 1017, 1030, 1036, 1038, 1039, 1040], "packet": 366, "pacman": 397, "paczuski": [1038, 1039], "pad": [95, 120, 163, 170, 220, 238, 351, 357, 415, 586, 587, 589], "page": [0, 12, 17, 26, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 148, 156, 169, 170, 171, 180, 220, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 366, 375, 377, 380, 382, 384, 386, 388, 395, 406, 407, 409, 471, 514, 515, 516, 626, 642, 829, 894, 936, 977, 983, 987, 988, 1014, 1023, 1028, 1030, 1034, 1035], "page_links_en": 17, "page_links_filenam": 17, "page_links_url": 17, "pagerank": 17, "pagh": [175, 979], "pai": [0, 169, 217, 380], "paid": 983, "pain": 392, "paint": [911, 913], "pair": [10, 13, 37, 44, 58, 64, 100, 113, 115, 120, 124, 140, 155, 159, 179, 182, 191, 208, 211, 217, 232, 255, 260, 267, 269, 330, 334, 336, 338, 339, 340, 342, 344, 352, 357, 375, 392, 394, 404, 405, 408, 411, 415, 417, 435, 438, 439, 443, 448, 455, 461, 469, 470, 476, 491, 506, 507, 580, 590, 593, 594, 596, 597, 598, 608, 611, 612, 613, 615, 617, 618, 620, 621, 623, 625, 630, 631, 641, 690, 697, 698, 703, 704, 705, 713, 728, 737, 755, 756, 760, 763, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 783, 827, 839, 840, 914, 987, 988, 989, 990, 997, 1003, 1030, 1042, 1043, 1045, 1046, 1047], "pair_confusion_matrix": [407, 1042], "pair_list": 269, "pair_scor": 269, "paired_dist": [760, 766, 775, 1034], "pairidx": 357, "pairplot": [168, 169], "pairwis": [64, 168, 169, 232, 238, 269, 315, 319, 320, 351, 366, 372, 382, 394, 407, 412, 417, 444, 452, 456, 459, 460, 466, 485, 506, 507, 533, 559, 560, 618, 636, 637, 638, 639, 640, 641, 686, 688, 690, 692, 694, 697, 775, 776, 777, 778, 785, 789, 790, 827, 843, 847, 851, 865, 897, 979, 987, 990, 999, 1002, 1025, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1045, 1046, 1047, 1048], "pairwise_bayesian": 260, "pairwise_bayesian_df": 260, "pairwise_comp_df": 260, "pairwise_dist": [40, 394, 407, 418, 442, 444, 448, 455, 686, 694, 759, 768, 776, 777, 789, 790, 843, 845, 847, 851, 985, 1030, 1034, 1036, 1038, 1039, 1041, 1042, 1047, 1048], "pairwise_dist_chunk_s": [466, 897], "pairwise_distance_funct": [690, 694, 775, 778, 990], "pairwise_distances_argmin": [48, 64, 319, 777, 1038, 1044, 1045, 1046, 1047], "pairwise_distances_argmin_min": [319, 776, 1033, 1038, 1044, 1045, 1046, 1047], "pairwise_distances_chunk": [366, 775, 1038, 1041, 1047], "pairwise_indices_": 827, "pairwise_kernel": [394, 417, 450, 460, 641, 762, 865, 985, 1030, 1037, 1047], "pairwise_kernel_funct": [618, 641, 771], "pairwise_kernels_kwarg": 618, "pairwise_t_test": 260, "pairwisedistancesreduct": 367, "pairwisekernel": 417, "paislei": [412, 534], "pakdd": 407, "pal": [1038, 1044], "palac": 48, "palacio": 1043, "palafox": 1030, "palett": [48, 169, 260], "palevioletr": [213, 289, 337], "palioura": [834, 989], "paliw": 1038, "palladium": 1012, "palmol": 12, "paltri": 1021, "pami": [377, 407, 722], "pamnani": 1038, "panchal": 1042, "pancholi": 1037, "panda": [4, 12, 13, 25, 70, 71, 72, 111, 117, 118, 121, 124, 127, 129, 147, 156, 163, 168, 169, 170, 171, 172, 178, 183, 188, 199, 203, 207, 217, 238, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 310, 311, 312, 315, 318, 319, 346, 351, 352, 374, 375, 378, 379, 380, 382, 383, 388, 394, 397, 400, 408, 431, 440, 441, 443, 445, 447, 462, 464, 466, 480, 481, 482, 483, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 630, 631, 633, 636, 637, 638, 639, 640, 686, 687, 690, 796, 799, 800, 810, 825, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 915, 976, 977, 997, 1007, 1008, 1023, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "pandata": [1045, 1046], "pandei": [1037, 1042], "panel": [251, 288, 305, 413, 1007], "panga": [1045, 1046], "panico": [1038, 1042], "pankaj": 1042, "pano": 1036, "panpiort8": [1040, 1042], "paolo": [0, 2, 1030, 1034, 1040, 1048], "papadopoulo": [1043, 1044, 1045, 1046, 1047], "papapanagiot": 1037, "paper": [0, 148, 175, 260, 377, 386, 392, 407, 409, 414, 440, 447, 476, 502, 532, 539, 561, 639, 656, 664, 665, 669, 674, 677, 690, 785, 836, 845, 848, 891, 892, 983, 987, 990, 993, 1002, 1023, 1030, 1037, 1038], "paper355": 669, "papier": [662, 683, 684], "par": 997, "paraboloid": 983, "paradi": 1045, "paradigm": 983, "paragraph": [415, 501, 1023], "paralel": 1046, "parallel": [14, 110, 115, 117, 118, 120, 136, 166, 170, 171, 172, 201, 261, 316, 317, 319, 343, 360, 365, 372, 378, 380, 381, 383, 384, 392, 394, 408, 416, 418, 419, 435, 442, 444, 446, 447, 448, 450, 455, 456, 459, 462, 465, 470, 493, 529, 531, 532, 533, 535, 537, 539, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 587, 592, 600, 605, 606, 608, 630, 632, 637, 656, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 807, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 858, 861, 894, 895, 955, 957, 1008, 1009, 1018, 1023, 1025, 1030, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046], "parallel_backend": [367, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 470, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 845, 847, 849, 850, 852, 853, 858, 861, 894, 895, 1038, 1048], "parallel_batch_queri": 283, "parallel_config": 955, "parallel_coordin": 261, "parallel_help": 1040, "parallelbackendbas": 957, "parallelis": [261, 466, 897, 1037], "param": [44, 55, 61, 62, 71, 122, 123, 125, 126, 220, 234, 235, 258, 260, 268, 272, 287, 300, 322, 380, 382, 394, 398, 414, 417, 421, 424, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 808, 810, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 944, 976, 1036, 1040, 1041, 1043, 1044, 1047], "param1": [382, 1020], "param2": [382, 1020], "param3": 382, "param_": 117, "param_c": [271, 796], "param_classifier__c": 71, "param_covariance_typ": 250, "param_degre": 796, "param_dist": [268, 272, 317], "param_distribut": [71, 151, 261, 268, 272, 317, 393, 800, 808, 810, 1046], "param_gamma": [271, 796, 810], "param_grid": [4, 6, 71, 72, 73, 74, 117, 124, 234, 240, 250, 258, 259, 260, 264, 265, 268, 271, 278, 285, 307, 322, 338, 394, 398, 408, 414, 739, 796, 799, 807, 808, 955, 976, 987, 1018, 1019], "param_kernel": [796, 810], "param_list": 808, "param_min_samples_split": 264, "param_n_compon": 250, "param_nam": [117, 261, 275, 321, 346, 398, 818, 826, 982, 1023], "param_pca__n_compon": 73, "param_preprocessor__cat__selector__percentil": 71, "param_preprocessor__num__imputer__strategi": 71, "param_rang": [275, 321, 346, 818, 826, 982, 1046], "param_reduce_dim__n_compon": 259, "param_valu": 7, "paramet": [4, 5, 9, 10, 11, 14, 15, 27, 34, 44, 54, 55, 58, 60, 61, 62, 71, 72, 73, 79, 81, 82, 92, 95, 109, 111, 113, 115, 117, 120, 121, 122, 125, 126, 127, 138, 145, 148, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 178, 179, 180, 181, 183, 184, 186, 187, 188, 190, 191, 199, 201, 203, 204, 207, 208, 215, 216, 217, 224, 225, 228, 230, 233, 234, 235, 245, 246, 247, 248, 250, 251, 254, 255, 259, 260, 261, 262, 264, 265, 268, 271, 272, 273, 274, 275, 278, 283, 285, 286, 289, 290, 296, 299, 300, 302, 305, 306, 307, 310, 315, 316, 318, 319, 320, 321, 328, 329, 333, 335, 340, 342, 343, 345, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 369, 372, 373, 375, 383, 385, 386, 387, 388, 389, 392, 398, 402, 405, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 984, 986, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1015, 1017, 1019, 1020, 1021, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "parameter": [356, 417, 612, 613, 620, 621, 794, 795, 983, 984, 992, 997, 1003], "parameter_grid": 261, "parameter_nam": [565, 566, 567, 568], "parametergrid": [796, 1032, 1038], "parameters_str": 55, "parametersampl": [810, 1032, 1038, 1042], "parametr": [9, 24, 25, 82, 231, 287, 309, 318, 405, 408, 413, 414, 435, 549, 551, 633, 683, 694, 875, 887, 930, 931, 983, 986, 989, 990, 997, 1000, 1003, 1038, 1040, 1043], "parametrize_with_check": [315, 382, 930, 1040, 1041], "params_str": 272, "parcel": [54, 67, 407], "parch": [171, 320], "pardeep": 1042, "parel": 1034, "parent": [8, 168, 235, 380, 384, 394, 407, 440, 461, 944, 945, 1030, 1047], "parent_hourly_wag": 168, "parenthes": 926, "parenthesi": [41, 380], "paresh": [1039, 1040], "pareto": 201, "pargent": 997, "pari": [0, 377, 408, 464, 761, 867, 998, 1044], "pariba": 1005, "pariet": [1012, 1030], "parikh": [1039, 1044, 1045, 1046, 1047], "paris_in_radian": 761, "paristech": [0, 24, 25, 42, 228, 1005], "pariti": 1003, "parizi": 1045, "park": [1035, 1040, 1042, 1045, 1046], "parmet": 1047, "parmind": 1037, "parra": 1038, "parri": [1035, 1036, 1037], "parrot": 351, "pars": [8, 17, 366, 374, 375, 381, 506], "parse_vers": [201, 668], "parser": [8, 13, 127, 315, 319, 494, 1045, 1046], "parsimoni": [412, 997], "parsing_tim": 8, "parson": [1041, 1043], "part": [0, 5, 6, 31, 36, 51, 61, 68, 71, 82, 95, 98, 114, 117, 119, 120, 124, 130, 138, 139, 140, 145, 156, 166, 178, 235, 237, 248, 255, 257, 274, 299, 307, 310, 312, 353, 368, 375, 377, 380, 382, 386, 388, 393, 394, 397, 403, 405, 407, 411, 412, 414, 415, 417, 444, 447, 491, 492, 493, 519, 529, 535, 540, 572, 582, 583, 584, 611, 623, 790, 864, 882, 884, 885, 886, 887, 888, 889, 890, 976, 977, 979, 984, 988, 1006, 1007, 1008, 1009, 1010, 1012, 1016, 1023, 1025, 1030, 1038, 1039, 1041, 1043, 1045], "part3": 411, "part_of_speech": 415, "partev": [1044, 1045, 1046, 1047], "parthiv": 1042, "parti": [217, 278, 321, 367, 379, 392, 798, 805, 955, 1005, 1030, 1041, 1046, 1047], "partial": [4, 8, 12, 50, 84, 85, 87, 97, 129, 166, 167, 173, 217, 227, 243, 317, 320, 377, 394, 396, 409, 410, 412, 414, 417, 462, 480, 481, 482, 483, 494, 499, 532, 534, 539, 560, 587, 630, 631, 655, 785, 825, 827, 828, 855, 856, 857, 860, 872, 873, 876, 879, 908, 984, 991, 1001, 1009, 1023, 1025, 1027, 1031, 1038, 1039, 1043, 1047], "partial_correl": 12, "partial_depend": [170, 630, 994, 1031, 1039, 1040, 1041, 1042, 1045, 1046], "partial_fit": [8, 50, 95, 235, 319, 368, 382, 394, 407, 412, 440, 447, 532, 534, 535, 536, 587, 595, 656, 657, 664, 665, 666, 674, 675, 676, 827, 828, 831, 832, 834, 835, 836, 837, 838, 855, 856, 857, 868, 869, 879, 899, 983, 989, 991, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1045, 1046, 1047], "partial_fit_": 1043, "partial_fit_classifi": 8, "partial_fit_param": [595, 827, 828, 831, 832], "partialdependencedisplai": [127, 129, 170, 239, 316, 317, 318, 320, 322, 387, 631, 994, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "particip": [0, 379, 380, 395, 1012], "particl": 992, "particular": [0, 4, 11, 14, 27, 37, 39, 40, 60, 71, 78, 92, 100, 103, 121, 124, 127, 128, 155, 163, 169, 170, 199, 201, 207, 233, 257, 261, 263, 269, 283, 292, 296, 305, 315, 316, 319, 352, 353, 362, 366, 367, 374, 375, 378, 379, 380, 382, 384, 385, 386, 388, 389, 393, 394, 397, 407, 408, 411, 412, 414, 415, 416, 417, 444, 467, 471, 494, 542, 561, 607, 651, 656, 661, 670, 672, 682, 685, 710, 725, 782, 831, 846, 918, 920, 977, 979, 981, 983, 987, 990, 991, 992, 993, 995, 997, 1008, 1012, 1022, 1030, 1033, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1047], "particularli": [20, 31, 70, 71, 74, 104, 130, 169, 200, 230, 260, 307, 316, 348, 362, 366, 380, 389, 394, 407, 408, 410, 413, 415, 494, 802, 818, 836, 936, 955, 956, 983, 984, 987, 989, 995, 1008, 1012, 1022, 1030, 1035, 1037, 1038, 1044], "partit": [46, 66, 70, 128, 130, 260, 301, 394, 404, 405, 407, 411, 414, 447, 449, 451, 460, 509, 555, 556, 557, 558, 561, 562, 563, 702, 703, 713, 783, 847, 907, 908, 909, 910, 986, 990, 993, 997, 1003, 1023], "partli": [46, 766], "partnership": 1012, "parvu": 377, "pasbi": [1037, 1038], "pascal": 987, "pascual": 1033, "paskov": 1037, "pass": [4, 7, 8, 20, 21, 34, 38, 117, 127, 129, 145, 180, 183, 200, 229, 231, 232, 235, 238, 239, 241, 250, 258, 261, 312, 315, 318, 343, 353, 362, 366, 367, 368, 375, 380, 381, 382, 385, 386, 387, 388, 389, 392, 394, 398, 401, 403, 407, 408, 411, 412, 414, 415, 417, 418, 419, 424, 425, 429, 430, 435, 436, 438, 440, 441, 442, 444, 445, 446, 447, 448, 450, 452, 455, 457, 458, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 489, 490, 493, 494, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 579, 580, 586, 587, 588, 589, 591, 592, 595, 605, 606, 608, 609, 615, 618, 624, 629, 630, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 729, 730, 739, 760, 771, 775, 776, 777, 778, 785, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 870, 871, 872, 873, 874, 876, 878, 879, 880, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 918, 919, 920, 926, 930, 931, 935, 936, 938, 940, 942, 944, 947, 948, 955, 957, 958, 961, 976, 977, 983, 985, 987, 988, 989, 990, 991, 994, 997, 1000, 1001, 1002, 1008, 1012, 1014, 1018, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "passiv": [8, 206, 664, 665, 1010, 1025, 1031], "passiveaggress": [368, 415], "passiveaggressiveclassifi": [8, 206, 366, 368, 983, 988, 1031, 1034, 1035, 1037, 1038, 1041, 1043, 1048], "passiveaggressiveregressor": [368, 983, 1031, 1034, 1037, 1038, 1041, 1043, 1048], "passo": [0, 2, 1030, 1031], "passthrough": [4, 72, 121, 169, 170, 199, 217, 238, 311, 320, 408, 462, 465, 565, 566, 858, 859, 997, 1039, 1041, 1044, 1045, 1047], "passthrough_numer": [199, 217], "passthroughpassthrough": [169, 170, 311], "past": [11, 13, 384, 385, 388, 392, 395, 411, 412, 414, 536, 553, 554, 676, 1012, 1015, 1046], "pat": [626, 977], "patch": [34, 50, 238, 245, 246, 247, 250, 251, 255, 375, 384, 392, 412, 414, 553, 554, 581, 582, 585, 1030, 1038], "patch_height": [581, 582, 585], "patch_siz": [50, 98, 415, 581, 582, 585], "patch_width": [581, 582, 585], "patchextractor": [415, 1046], "patel": [1038, 1040, 1041, 1042, 1044], "path": [8, 17, 166, 169, 177, 184, 185, 188, 190, 193, 203, 215, 218, 273, 346, 356, 374, 378, 380, 384, 388, 389, 394, 439, 443, 448, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 506, 507, 546, 555, 556, 561, 562, 563, 564, 591, 592, 595, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 679, 680, 681, 682, 683, 684, 686, 859, 860, 906, 907, 908, 909, 910, 941, 976, 983, 984, 993, 1008, 1009, 1030, 1031, 1034, 1036, 1037, 1039, 1040, 1042, 1043, 1045, 1046], "path_length": 941, "path_method": [686, 984], "pathak": [1045, 1046], "patheffect": 40, "pathlib": [8, 1045, 1046], "pathlik": [494, 1046], "patholog": [52, 986, 1036], "pathwai": 381, "pati": 1032, "patienc": [388, 394], "patient": [7, 135, 148, 164, 377, 388, 411, 983, 1021], "patil": [1044, 1047], "paton": 1043, "patric": [1042, 1043], "patricio": 1044, "patrick": [1037, 1038, 1043, 1044, 1047, 1048], "patrini": [1035, 1036, 1037], "pattaniyil": 1040, "pattern": [4, 13, 20, 63, 82, 85, 90, 94, 95, 102, 106, 151, 163, 166, 170, 183, 203, 235, 238, 318, 351, 352, 353, 362, 377, 380, 382, 395, 404, 407, 408, 412, 414, 415, 446, 462, 464, 502, 530, 532, 539, 553, 554, 636, 706, 722, 738, 766, 785, 786, 794, 879, 979, 981, 983, 987, 988, 994, 1002, 1004, 1008, 1009, 1012, 1042], "patterson": [492, 1035], "paul": [375, 1033, 1036, 1037, 1038, 1039, 1043, 1044], "paula": [1040, 1041], "pauli": 1035, "paulo": [1037, 1043, 1045], "paus": 46, "pava": 633, "pave": 1021, "pavel": [1031, 1039], "pavlo": [1038, 1039], "pavlyk": [1038, 1039, 1040, 1041], "pawel": 1039, "pawe\u0142": [1033, 1037, 1042, 1043], "payn": 1040, "pazzani": 27, "pb_q": [318, 983], "pbl": 124, "pc": [19, 329, 353, 375], "pca": [3, 6, 16, 33, 45, 51, 69, 70, 72, 74, 75, 76, 78, 86, 94, 97, 104, 105, 106, 139, 166, 182, 196, 221, 223, 231, 233, 236, 240, 259, 268, 271, 283, 287, 292, 302, 318, 362, 372, 382, 394, 403, 406, 407, 408, 413, 423, 471, 474, 482, 494, 500, 502, 512, 530, 531, 532, 533, 537, 538, 541, 542, 547, 641, 656, 686, 688, 690, 694, 796, 821, 825, 848, 855, 858, 859, 861, 869, 877, 879, 979, 981, 984, 990, 997, 1001, 1003, 1009, 1019, 1024, 1025, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1043, 1044, 1045, 1047, 1048], "pca0": 423, "pca1": [408, 423], "pca2": [408, 423], "pca_2": 86, "pca__n_compon": [73, 1019], "pca_back_proj_ax": 100, "pca_estim": 95, "pca_proj_ax": 100, "pca_scor": 102, "pcapca": [72, 240], "pcd": [855, 992], "pchelintsev": 1042, "pclass": [71, 171, 242, 315, 319, 320], "pcolor": 152, "pcolormesh": [34, 130, 140, 182, 286, 291, 334, 338, 342, 629], "pcr": [86, 410], "pd": [4, 12, 25, 71, 72, 111, 117, 118, 124, 129, 147, 156, 163, 168, 169, 170, 171, 172, 178, 183, 188, 199, 203, 207, 217, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 310, 311, 312, 318, 319, 346, 351, 352, 385, 394, 408, 462, 464, 625, 626, 627, 628, 630, 775, 917, 919, 920, 976, 977, 994, 997, 1041, 1043, 1044, 1045, 1047], "pd2000": 987, "pd_": 994, "pd_line_kw": 630, "pd_result": 630, "pdb": 388, "pdbcl": 388, "pdf": [148, 260, 288, 305, 377, 380, 407, 416, 440, 447, 529, 532, 535, 539, 639, 642, 647, 656, 662, 664, 665, 669, 674, 677, 680, 681, 683, 684, 690, 836, 837, 848, 855, 892, 894, 983, 1000, 1003, 1011, 1026, 1030], "pdist": [690, 775, 778], "pdp": [630, 994, 1044], "pdp_lim": 630, "pdp_line_kw": 630, "pe": 581, "pe_tran": 581, "peai": 1039, "peak": [4, 13, 27, 170, 405, 411, 1044], "pear": 988, "pearson": [604, 607, 1043], "pearu": 1030, "pedersen": [1034, 1046], "pedigo": [1042, 1043], "pedregosa": [0, 2, 186, 204, 221, 295, 1030, 1031, 1032, 1033, 1034, 1036], "pedro": [71, 1031, 1033, 1034, 1038], "peek": [170, 380, 994], "peer": 1012, "peerindex": 1005, "peev": [1038, 1041], "pegaso": 1001, "pei": [407, 1037], "peixinho": 1044, "pelennor": 1044, "penal": [14, 30, 82, 132, 183, 188, 192, 199, 203, 215, 217, 310, 346, 407, 409, 412, 414, 416, 467, 468, 469, 470, 471, 472, 473, 474, 476, 559, 560, 645, 650, 651, 659, 661, 674, 703, 713, 731, 783, 792, 872, 899, 900, 906, 983, 987, 989, 991, 1001, 1002, 1021], "penalis": [184, 197, 214, 694], "penalti": [7, 10, 30, 82, 166, 177, 178, 183, 184, 188, 192, 199, 203, 214, 215, 218, 230, 268, 299, 318, 329, 343, 351, 366, 388, 392, 406, 409, 412, 416, 469, 470, 471, 472, 473, 474, 476, 500, 529, 535, 536, 537, 538, 540, 541, 545, 546, 595, 641, 644, 645, 646, 647, 650, 651, 652, 655, 656, 657, 658, 659, 660, 666, 667, 668, 670, 674, 676, 678, 679, 685, 810, 879, 899, 900, 902, 904, 905, 906, 976, 983, 986, 991, 997, 1001, 1002, 1009, 1021, 1023, 1032, 1035, 1037, 1039, 1040, 1042, 1043, 1045, 1046], "peng": [677, 983, 1036, 1037, 1038, 1040, 1042], "peopl": [0, 6, 70, 169, 237, 263, 351, 352, 367, 368, 375, 377, 379, 380, 384, 395, 413, 491, 492, 639, 836, 1007, 1019], "pep": [12, 388, 1030], "pep073": 381, "pep101": 384, "pep257": 394, "pep8": [382, 384, 388], "pepsi": 12, "per": [4, 10, 20, 34, 48, 53, 64, 91, 116, 117, 121, 156, 158, 169, 170, 199, 214, 217, 238, 242, 246, 256, 267, 269, 305, 311, 317, 322, 346, 351, 353, 366, 375, 376, 380, 385, 386, 389, 392, 394, 405, 407, 411, 412, 413, 414, 415, 417, 444, 446, 448, 455, 459, 462, 466, 485, 494, 498, 500, 501, 502, 506, 508, 510, 513, 521, 530, 532, 533, 534, 537, 539, 541, 547, 548, 559, 560, 567, 581, 586, 589, 608, 609, 630, 631, 639, 640, 656, 657, 664, 665, 666, 669, 671, 672, 673, 674, 676, 690, 694, 711, 714, 718, 738, 751, 755, 756, 778, 780, 794, 795, 820, 827, 828, 829, 831, 832, 835, 837, 855, 858, 864, 866, 868, 869, 872, 873, 879, 880, 897, 899, 900, 901, 902, 903, 904, 905, 924, 925, 936, 962, 976, 979, 983, 986, 987, 988, 991, 994, 1001, 1002, 1003, 1007, 1008, 1021, 1023, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1047], "perc": 255, "percal": 386, "percent": [111, 490, 598, 1000], "percent10": [238, 490], "percentag": [13, 54, 103, 121, 190, 217, 255, 263, 266, 411, 416, 532, 539, 542, 547, 591, 592, 646, 667, 678, 701, 731, 743, 814, 815, 816, 829, 911, 913, 988, 1003, 1032, 1036, 1042, 1043], "percentil": [10, 13, 71, 124, 127, 238, 242, 305, 366, 590, 593, 594, 596, 597, 598, 601, 604, 630, 631, 745, 997, 1035, 1043], "percentile_5_predict": 13, "percentile_95_predict": 13, "percentile_perf_in_u": 10, "percentiles_class": 255, "percept": [143, 170, 994], "perceptron": [8, 31, 120, 130, 140, 153, 155, 166, 206, 209, 215, 239, 298, 303, 307, 308, 330, 343, 344, 348, 368, 392, 415, 512, 513, 520, 664, 674, 825, 855, 856, 857, 860, 879, 985, 988, 992, 1001, 1009, 1010, 1025, 1034, 1036, 1037, 1038, 1042], "percol": 39, "perdisci": [407, 440], "perdok": 1045, "pere": 1047, "peredachi": [605, 606], "pereira": [1035, 1038, 1039], "peretti": 1045, "perez": [1038, 1045], "perf_count": 238, "perfect": [20, 26, 37, 70, 81, 98, 100, 195, 199, 351, 352, 380, 384, 407, 411, 551, 552, 688, 692, 702, 703, 706, 715, 723, 725, 728, 734, 740, 753, 754, 782, 783, 792, 983, 987, 990, 1002, 1012, 1021, 1044], "perfectli": [26, 27, 37, 263, 274, 342, 396, 407, 414, 436, 565, 604, 702, 703, 713, 715, 733, 734, 754, 783, 792, 872, 982, 984, 987, 1002, 1043, 1044], "perform": [4, 7, 13, 17, 19, 24, 25, 26, 32, 36, 38, 40, 48, 49, 53, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 70, 71, 74, 78, 86, 89, 98, 104, 109, 111, 117, 119, 121, 122, 123, 125, 126, 127, 131, 132, 138, 143, 146, 147, 148, 152, 160, 163, 164, 166, 169, 170, 171, 172, 175, 183, 188, 199, 201, 203, 205, 206, 207, 216, 217, 221, 222, 224, 228, 233, 236, 238, 246, 247, 250, 253, 255, 256, 257, 258, 260, 261, 262, 265, 266, 268, 269, 271, 273, 275, 276, 278, 281, 283, 296, 302, 305, 307, 309, 311, 312, 315, 321, 322, 324, 326, 327, 331, 338, 341, 342, 344, 346, 351, 353, 362, 365, 367, 368, 375, 377, 382, 383, 384, 386, 388, 389, 392, 393, 394, 396, 398, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 425, 429, 438, 440, 441, 442, 444, 445, 446, 448, 450, 452, 453, 457, 459, 466, 467, 480, 481, 482, 483, 492, 500, 510, 513, 529, 530, 531, 533, 535, 540, 541, 542, 543, 544, 546, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 592, 599, 600, 601, 608, 609, 625, 628, 629, 636, 638, 643, 649, 652, 653, 654, 656, 662, 663, 664, 665, 666, 668, 671, 673, 674, 675, 676, 680, 681, 683, 685, 687, 688, 691, 692, 695, 701, 702, 703, 705, 706, 710, 711, 723, 726, 727, 735, 737, 739, 752, 753, 754, 775, 780, 781, 783, 784, 785, 791, 792, 793, 794, 795, 796, 799, 800, 807, 808, 810, 814, 820, 821, 822, 824, 825, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 846, 848, 854, 855, 856, 857, 859, 860, 862, 865, 866, 868, 869, 871, 872, 873, 875, 876, 879, 880, 882, 884, 885, 886, 888, 889, 890, 894, 895, 897, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 960, 971, 976, 977, 979, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1012, 1014, 1015, 1018, 1021, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "performancetip": 386, "perhap": [70, 120, 377, 379, 388, 394, 413, 1008], "perimet": [148, 377], "period": [13, 127, 151, 156, 160, 384, 394, 395, 405, 417, 613, 817, 878, 1038, 1043, 1045], "periodic_spline_transform": 4, "periodicity_bound": [151, 156, 160, 613], "peripheri": 407, "perla": 1033, "perm_scores_iri": 266, "perm_scores_rand": 266, "perm_sorted_idx": 172, "permalink": 384, "perman": 388, "permiss": [379, 384, 395, 397, 1012, 1045], "permit": [408, 465, 586, 587, 589, 796, 799, 800, 810, 821, 860, 861, 987, 988, 989, 1036], "permut": [20, 21, 37, 81, 117, 119, 125, 140, 143, 148, 166, 167, 173, 215, 253, 260, 276, 309, 312, 328, 396, 402, 407, 414, 462, 494, 498, 502, 557, 558, 562, 563, 625, 628, 632, 677, 702, 703, 715, 733, 734, 752, 754, 792, 813, 815, 824, 825, 859, 873, 904, 907, 908, 936, 956, 958, 961, 987, 1001, 1009, 1018, 1021, 1025, 1030, 1036, 1043, 1045], "permutation_import": [118, 119, 125, 171, 172, 315, 414, 551, 552, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 995, 1040, 1042, 1043, 1047], "permutation_scor": 824, "permutation_test_scor": [266, 398, 411, 1030, 1037, 1042], "permuted_categori": 312, "perp_tol": 534, "perpendicular": [34, 343], "perperogl": 997, "perplex": [166, 219, 220, 222, 224, 226, 283, 512, 523, 534, 690, 984, 1009, 1035, 1037, 1044], "perri": 1040, "perrin": 1036, "perrot": [0, 1030], "persian": 1007, "persist": [369, 388, 392, 412, 444, 608, 609, 855, 992, 1007, 1025, 1036, 1039], "persola": 1038, "person": [6, 169, 263, 375, 379, 411, 415, 491, 492, 493, 997, 1019, 1038], "perspect": [55, 60, 199, 366, 375, 392, 395, 528, 641, 899, 980], "pertin": 199, "perturb": [169, 216, 302, 412, 414, 986], "peru": [11, 296, 375, 496], "pervas": [362, 380], "pessimist": [123, 414], "pessoa": 1043, "pestrickland": 1036, "pet": [318, 322, 785, 987], "pet_cat": 318, "pet_dog": 318, "pet_fish": 318, "petal": [45, 90, 103, 105, 120, 242, 317, 320, 377, 408, 912, 1003, 1020, 1021], "petal_col": 320, "petar": 1045, "pete": [1037, 1041, 1042], "peter": [0, 2, 11, 63, 123, 125, 126, 261, 351, 352, 407, 446, 448, 455, 647, 789, 790, 983, 987, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1047], "peterlongo": 1047, "peterson": [1030, 1032], "petfood": 1012, "petrov": [1037, 1038, 1046], "petrushev": 1039, "pe\u00f1a": 1034, "pfaffel": 1043, "pfahring": [830, 988], "pfe": 12, "pfister": 997, "pfizer": 12, "pft": 200, "pg": [12, 386, 647, 983, 1035], "pg_i": 647, "pgithub": 1042, "ph": 1042, "pham": [175, 979, 1037], "phan": 412, "pharmaceut": 377, "pharuj": 238, "phase": [4, 183, 193, 366, 625, 979, 984, 990, 1012, 1038, 1040], "phase_nois": 40, "phd": [0, 407, 414, 1008, 1012], "phenol": 377, "phenomena": 156, "phenomenon": [352, 997], "phi": [40, 412, 414, 740, 865, 979, 987, 997, 1002], "phil": [57, 1035, 1046], "philipp": [1032, 1033, 1036, 1045], "phillip": [11, 296, 375, 496], "phimeca": 1005, "phlypo": 1033, "phongpanagnam": 1043, "phongpanangam": 1043, "photo": 48, "photogrammetr": 983, "php": [987, 1007], "phrase": 415, "phy": [605, 606], "phyo": 1044, "physic": [70, 117, 367, 503, 952, 983, 1046], "physiolog": [263, 377, 1021], "pi": [4, 14, 34, 39, 40, 96, 104, 129, 131, 143, 151, 179, 183, 187, 193, 200, 222, 245, 246, 247, 250, 251, 274, 296, 316, 322, 359, 397, 413, 417, 514, 515, 516, 613, 640, 981, 982, 983, 989, 1022], "pianomania": 1035, "pick": [48, 55, 60, 172, 236, 268, 319, 325, 375, 380, 384, 407, 414, 441, 458, 521, 671, 909, 910, 976, 983, 984, 986, 1001, 1041], "pickl": [384, 394, 401, 415, 586, 587, 589, 839, 840, 1007, 1008, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "pickleabl": [863, 1036], "pickup": 1038, "pico": [1033, 1034], "pict": [829, 988], "pictur": [12, 17, 21, 36, 48, 53, 66, 68, 98, 166, 232, 251, 375, 395, 407, 412, 415, 460, 491, 492, 519, 1008, 1009], "piec": [34, 47, 200, 367, 986], "piecewis": [104, 318, 404, 978, 983, 997, 1003], "pierr": [1030, 1038, 1039, 1041, 1043, 1045, 1047, 1048], "pierreablin": 1038, "pierreattard": [1043, 1044], "pierretallott": [1038, 1039, 1040], "pierron": 1033, "piet": [1044, 1045], "pieter": [17, 1036, 1037, 1044], "pietro": [1030, 1033, 1047], "pietruh": 1038, "pig": 780, "pillow": [380, 397, 400], "pim": 1039, "pin": 386, "pinaki": 1038, "pinbal": [13, 124, 127, 318, 414, 560, 668, 720, 745, 983, 1043, 1044], "pinball_loss_05": 13, "pinball_loss_50": 13, "pinball_loss_95": 13, "ping": [892, 999, 1036, 1037], "pink": 179, "pinki": 1044, "pinot": 311, "pinto": 1030, "pintor": 1041, "pinvh": [1037, 1039], "piontek": 1046, "piotr": [1038, 1039], "pip": [283, 315, 316, 317, 318, 319, 320, 321, 322, 367, 378, 380, 384, 386, 397, 403, 1003], "pip3": [378, 397], "pipe": [72, 73, 121, 240, 259, 311, 317, 318, 393, 398, 408, 415, 588, 859, 884, 885, 887, 888, 889, 890, 976, 997, 1019], "pipe_sgd": 213, "pipegraph": 392, "pipelin": [4, 31, 54, 58, 71, 74, 75, 76, 86, 99, 116, 117, 121, 139, 142, 144, 147, 148, 149, 163, 164, 170, 171, 175, 178, 187, 188, 199, 200, 205, 213, 217, 221, 227, 228, 229, 231, 233, 238, 239, 242, 243, 253, 257, 258, 259, 260, 264, 267, 268, 271, 274, 276, 283, 285, 286, 291, 292, 299, 302, 307, 310, 312, 315, 316, 317, 318, 319, 320, 321, 329, 351, 352, 362, 366, 369, 372, 374, 375, 380, 383, 394, 398, 411, 415, 417, 421, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 500, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 603, 605, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 695, 696, 698, 699, 700, 711, 794, 795, 796, 797, 798, 799, 800, 803, 805, 810, 814, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 977, 979, 983, 990, 991, 996, 997, 1001, 1002, 1007, 1008, 1009, 1010, 1012, 1015, 1017, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1047], "pipelineifittedpipelin": [71, 116, 145, 169, 171, 229, 239, 242, 267, 319], "pipelineinot": [132, 230, 240, 261, 311, 316], "pipelinepipelin": [71, 72, 240], "pita": 1047, "pitfal": [4, 148, 166, 167, 168, 171, 173, 195, 203, 204, 260, 317, 369, 393, 394, 396, 411, 463, 465, 494, 651, 670, 671, 699, 750, 811, 822, 825, 860, 872, 879, 983, 1009, 1025], "pitkin": [170, 994], "pitt": 19, "pitter": 1045, "pivot": [46, 271, 272], "pivot_t": 271, "pixel": [5, 6, 14, 20, 32, 47, 48, 53, 95, 110, 118, 136, 146, 166, 171, 172, 175, 232, 258, 301, 302, 377, 407, 412, 414, 415, 416, 491, 492, 493, 562, 583, 584, 605, 606, 632, 990, 992, 1003, 1009, 1019, 1022], "pixelwis": 95, "piyg": 307, "pkdd": 0, "pkg": 378, "pkgsrc": 397, "pl": [13, 73, 86, 203, 322, 377, 410, 480, 481, 482, 483, 1035], "place": [4, 60, 229, 239, 287, 366, 380, 381, 382, 385, 387, 395, 405, 415, 417, 439, 443, 444, 480, 481, 482, 513, 579, 588, 626, 628, 629, 765, 778, 794, 882, 884, 885, 886, 887, 888, 889, 890, 966, 967, 1007, 1030, 1037, 1040, 1041, 1043, 1047, 1048], "placehold": [19, 384, 625, 626, 627, 628, 811, 812, 815, 816, 977], "plagre": 1037, "plai": [96, 125, 153, 182, 208, 254, 294, 334, 335, 366, 1023], "plain": [340, 417, 655, 1001], "plan": [12, 374, 378, 380, 381, 395, 997, 1033], "planar": 407, "plane": [12, 148, 211, 233, 289, 340, 342, 343, 348, 377, 450, 460, 981, 983, 1002, 1021], "plant": [266, 269, 270, 373, 987, 1025], "plasma": 305, "plasma_r": 305, "plateau": [117, 122, 147, 258, 262], "platform": [383, 394, 395, 401, 1007, 1011, 1012, 1035, 1038, 1039, 1041, 1043, 1044, 1047], "platt": [405, 435, 901, 902, 904, 905, 1002], "platypu": 351, "pldtc325": 1037, "pleas": [0, 12, 17, 26, 71, 72, 116, 118, 119, 125, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 203, 229, 230, 231, 233, 235, 238, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 283, 293, 302, 311, 315, 316, 317, 318, 319, 320, 321, 322, 327, 342, 360, 367, 374, 375, 378, 380, 381, 382, 384, 388, 392, 393, 394, 397, 398, 401, 403, 406, 407, 414, 415, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 601, 608, 609, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 987, 991, 997, 1001, 1002, 1007, 1008, 1011, 1014, 1021, 1023, 1030, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "pleasant": [379, 1012], "plenti": 25, "plgreenliru": 1041, "plo": [374, 605, 606], "plot": [4, 5, 6, 11, 12, 13, 15, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 72, 73, 74, 75, 79, 80, 81, 86, 88, 93, 95, 98, 99, 102, 103, 104, 105, 110, 111, 113, 114, 115, 116, 118, 122, 123, 124, 126, 127, 129, 130, 131, 136, 140, 143, 144, 146, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 166, 167, 168, 169, 171, 172, 173, 175, 177, 181, 182, 184, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 209, 211, 212, 214, 215, 216, 217, 218, 222, 223, 224, 225, 227, 228, 231, 232, 234, 236, 237, 242, 243, 245, 246, 247, 249, 251, 253, 254, 255, 260, 261, 263, 265, 266, 270, 271, 272, 274, 276, 278, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 312, 316, 319, 320, 321, 322, 326, 327, 328, 330, 333, 334, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 352, 353, 355, 356, 358, 359, 360, 361, 369, 380, 383, 389, 392, 396, 397, 402, 405, 407, 409, 411, 413, 414, 436, 439, 444, 448, 454, 462, 469, 494, 499, 500, 502, 510, 513, 517, 521, 551, 555, 558, 560, 562, 563, 567, 568, 608, 620, 629, 630, 631, 655, 656, 670, 674, 695, 696, 698, 699, 700, 701, 716, 724, 732, 758, 779, 781, 784, 785, 786, 796, 802, 813, 818, 820, 821, 822, 823, 826, 837, 841, 857, 860, 872, 873, 874, 876, 879, 899, 901, 904, 907, 908, 913, 980, 981, 983, 984, 986, 987, 990, 991, 993, 1001, 1002, 1003, 1007, 1008, 1009, 1018, 1019, 1021, 1025, 1031, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "plot_": [318, 397], "plot_2d": [92, 220], "plot_3d": 220, "plot_accuraci": 8, "plot_adaboost_multiclass": [111, 136, 1009], "plot_adaboost_regress": [112, 136, 1009], "plot_adaboost_twoclass": [113, 136, 1009], "plot_adjusted_for_chance_measur": [37, 68, 1009], "plot_affinity_propag": [38, 68, 438, 452, 1009], "plot_agglomerative_clust": [39, 68, 1009], "plot_agglomerative_clustering_metr": [40, 68, 1009], "plot_agglomerative_dendrogram": [41, 68, 1009], "plot_all_sc": [305, 313, 1009], "plot_anomaly_comparison": [228, 243, 1009], "plot_ard": [178, 218, 642, 1009], "plot_arg": 300, "plot_bayesian_ridge_curvefit": [179, 218, 1009], "plot_benchmark_throughput": 10, "plot_bias_vari": [114, 136, 1009], "plot_bicluster_newsgroup": [19, 22, 1009], "plot_birch_vs_minibatchkmean": [42, 68, 1009], "plot_bisect_kmean": [43, 68, 1009], "plot_caching_nearest_neighbor": [285, 297, 1009], "plot_calibr": [24, 28, 1009], "plot_calibration_curv": [25, 28, 1009], "plot_calibration_multiclass": [26, 28, 1009], "plot_causal_interpret": [168, 173, 1009], "plot_chance_level": [238, 267, 269, 270, 698, 700, 1046], "plot_classif": [286, 297, 1009], "plot_classification_prob": [30, 35, 1009], "plot_classifier_chain_yeast": [281, 282, 1009], "plot_classifier_comparison": [31, 35, 307, 1009], "plot_clust": 52, "plot_cluster_comparison": [44, 68, 1009], "plot_cluster_iri": [45, 68, 1009], "plot_coin_segment": [46, 68, 1009], "plot_coin_ward_segment": [47, 68, 1009], "plot_color": [113, 357], "plot_color_quant": [48, 68, 1009], "plot_column_transform": [70, 76, 1009], "plot_column_transformer_mixed_typ": [71, 76, 1009], "plot_compare_calibr": [27, 28, 1009], "plot_compare_cross_decomposit": [85, 87, 1009], "plot_compare_gpr_krr": [151, 161, 1009], "plot_compare_method": [220, 226, 1009], "plot_compare_reduct": [72, 76, 1009], "plot_concentration_prior": [245, 252, 1009], "plot_confusion_matrix": [254, 276, 315, 1009, 1040, 1041, 1042, 1043], "plot_cost_complexity_prun": [356, 361, 1009], "plot_covariance_estim": [78, 83, 1009], "plot_custom_kernel": [334, 349, 1009], "plot_cv_diabet": [138, 141, 1009], "plot_cv_indic": [255, 276, 1009], "plot_cv_predict": [256, 276, 1009], "plot_cyclical_feature_engin": [4, 16, 1009], "plot_dbscan": [49, 68, 418, 442, 1009], "plot_decision_funct": 348, "plot_dendrogram": 41, "plot_det": [257, 276, 1009], "plot_det_curv": [1042, 1043], "plot_dict_face_patch": [50, 68, 1009], "plot_digit": 5, "plot_digits_agglomer": [51, 68, 1009], "plot_digits_classif": [32, 35, 1009], "plot_digits_classification_exercis": [139, 141, 1009], "plot_digits_denois": [5, 16, 1009], "plot_digits_kde_sampl": [287, 297, 1009], "plot_digits_last_imag": [89, 93, 1009], "plot_digits_linkag": [52, 68, 1009], "plot_digits_pip": [73, 76, 1009], "plot_discret": [306, 313, 1009], "plot_discretization_classif": [307, 313, 1009], "plot_discretization_strategi": [308, 313, 1009], "plot_display_object_visu": [229, 243, 1009], "plot_distribut": 305, "plot_document_classification_20newsgroup": [351, 354, 1009], "plot_document_clust": [352, 354, 1009], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [180, 218, 1009], "plot_ellips": [34, 245], "plot_embed": 221, "plot_ensemble_oob": [115, 136, 1009], "plot_estimator_represent": [230, 243, 1009], "plot_f_test_vs_mi": [143, 149, 1009], "plot_face_compress": [53, 68, 1009], "plot_face_recognit": [6, 16, 1009], "plot_faces_decomposit": [95, 106, 1009], "plot_feature_agglomeration_vs_univariate_select": [54, 68, 1009], "plot_feature_effect": 351, "plot_feature_select": [144, 149, 1009], "plot_feature_selection_pipelin": [145, 149, 1009], "plot_feature_transform": [116, 136, 1009], "plot_feature_union": [74, 76, 1009], "plot_fig": 196, "plot_forest_hist_grad_boosting_comparison": [117, 136, 1009], "plot_forest_import": [118, 136, 1009], "plot_forest_importances_fac": [119, 136, 1009], "plot_forest_iri": [120, 136, 1009], "plot_galleri": [6, 95, 1019], "plot_gmm": [246, 252, 1009], "plot_gmm_covari": [247, 252, 1009], "plot_gmm_init": [248, 252, 1009], "plot_gmm_pdf": [249, 252, 1009], "plot_gmm_select": [250, 252, 1009], "plot_gmm_sin": [251, 252, 1009], "plot_gpc": [152, 161, 1009], "plot_gpc_iri": [153, 161, 1009], "plot_gpc_isoprob": [154, 161, 1009], "plot_gpc_xor": [155, 161, 1009], "plot_gpr_co2": [156, 161, 1009], "plot_gpr_noisi": [157, 161, 1009], "plot_gpr_noisy_target": [158, 161, 1009], "plot_gpr_on_structured_data": [159, 161, 1009], "plot_gpr_prior_posterior": [160, 161, 1009], "plot_gpr_sampl": 160, "plot_gradient_boosting_categor": [121, 136, 1009], "plot_gradient_boosting_early_stop": [122, 136, 1009], "plot_gradient_boosting_oob": [123, 136, 1009], "plot_gradient_boosting_quantil": [124, 136, 1009], "plot_gradient_boosting_regress": [125, 136, 1009], "plot_gradient_boosting_regular": [126, 136, 1009], "plot_grid_search_digit": [258, 276, 1009], "plot_grid_search_refit_cal": [259, 276, 1009], "plot_grid_search_stat": [260, 276, 1009], "plot_grid_search_text_feature_extract": [261, 276, 1009], "plot_hashing_vs_dict_vector": [353, 354, 1009], "plot_hdbscan": [55, 68, 1009], "plot_hgbt_regress": [127, 136, 1009], "plot_huber_vs_ridg": [181, 218, 1009], "plot_hyperplan": [191, 208, 236], "plot_ica_blind_source_separ": [96, 106, 1009], "plot_ica_vs_pca": [97, 106, 1009], "plot_idx": 120, "plot_image_denois": [98, 106, 1009], "plot_incremental_pca": [99, 106, 1009], "plot_indic": 263, "plot_inductive_clust": [56, 68, 1009], "plot_influ": 7, "plot_info": 121, "plot_iris_dataset": [90, 93, 1009], "plot_iris_dtc": [357, 361, 1009], "plot_iris_exercis": [140, 141, 1009], "plot_iris_logist": [182, 218, 1009], "plot_iris_svc": [335, 349, 1009], "plot_isolation_forest": [128, 136, 1009], "plot_isotonic_regress": [231, 243, 1009], "plot_iterative_imputer_variants_comparison": [163, 165, 1009], "plot_johnson_lindenstrauss_bound": [232, 243, 1009], "plot_kde_1d": [288, 297, 1009], "plot_kernel_approxim": [233, 243, 1009], "plot_kernel_pca": [100, 106, 1009], "plot_kernel_ridge_regress": [234, 243, 1009], "plot_kind": 4, "plot_kmeans_assumpt": [57, 68, 1009], "plot_kmeans_digit": [58, 68, 1009], "plot_kmeans_plusplu": [59, 68, 1009], "plot_kmeans_silhouette_analysi": [60, 68, 1009], "plot_kmeans_stability_low_dim_dens": [61, 68, 1009], "plot_label_propagation_digit": [325, 331, 1009], "plot_label_propagation_digits_active_learn": [326, 331, 1009], "plot_label_propagation_structur": [327, 331, 1009], "plot_lasso_and_elasticnet": [183, 218, 1009], "plot_lasso_coordinate_descent_path": [184, 218, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 1009], "plot_lasso_dense_vs_sparse_data": [185, 218, 1009], "plot_lasso_lar": [186, 218, 1009], "plot_lasso_lars_": [187, 218, 1009], "plot_lasso_model_select": [188, 218, 645, 651, 1009], "plot_lda": [33, 35, 1009], "plot_lda_qda": [34, 35, 1009], "plot_learning_curv": [262, 276, 1009], "plot_likelihood_ratio": [263, 276, 1009], "plot_linear_model_coefficient_interpret": [169, 173, 1009], "plot_linearsvc_support_vector": [336, 349, 1009], "plot_linkage_comparison": [62, 68, 1009], "plot_lle_digit": [221, 226, 1009], "plot_lof_novelty_detect": [289, 297, 1009], "plot_lof_outlier_detect": [290, 297, 1009], "plot_logist": [189, 218, 1009], "plot_logistic_l1_l2_spars": [190, 218, 1009], "plot_logistic_multinomi": [191, 218, 1009], "plot_logistic_path": [192, 218, 1009], "plot_lw_vs_oa": [79, 83, 1009], "plot_mahalanobis_dist": [80, 83, 1009], "plot_manifold_spher": [222, 226, 1009], "plot_map_data_to_norm": [309, 313, 1009], "plot_md": [223, 226, 1009], "plot_mean_shift": [63, 68, 459, 1009], "plot_metadata_rout": [235, 243, 1009], "plot_method": [9, 34, 182, 213, 286, 291, 334, 336, 337, 339, 340, 342, 629], "plot_mini_batch_kmean": [64, 68, 1009], "plot_missing_valu": [164, 165, 1009], "plot_mlp_alpha": [299, 303, 1009], "plot_mlp_training_curv": [300, 303, 1009], "plot_mnist_filt": [301, 303, 1009], "plot_model_complexity_influ": [7, 16, 1009], "plot_monotonic_constraint": [129, 136, 1009], "plot_multi_metric_evalu": [264, 276, 1009], "plot_multi_task_lasso_support": [193, 218, 1009], "plot_multiclass_overview": [278, 279, 1009], "plot_multilabel": [236, 243, 1009], "plot_multioutput_face_complet": [237, 243, 1009], "plot_n_features_influ": 10, "plot_nca_classif": [291, 297, 1009], "plot_nca_dim_reduct": [292, 297, 1009], "plot_nca_illustr": [293, 297, 1009], "plot_nearest_centroid": [294, 297, 1009], "plot_nested_cross_validation_iri": [265, 276, 1009], "plot_nnl": [194, 218, 1009], "plot_num": [44, 62, 228], "plot_obs_pr": 217, "plot_ol": [195, 218, 1009], "plot_ols_3d": [196, 218, 1009], "plot_ols_ridge_vari": [197, 218, 1009], "plot_omp": [198, 218, 1009], "plot_on_dataset": 300, "plot_oneclass": [337, 349, 1009], "plot_opt": [65, 68, 1009], "plot_out_of_core_classif": [8, 16, 1009], "plot_outlier_detection_bench": [238, 243, 1009], "plot_outlier_detection_win": [9, 16, 1009], "plot_partial_depend": [170, 173, 315, 316, 317, 1009, 1035, 1039, 1040, 1041, 1042, 1043, 1044], "plot_partial_dependence_visualization_api": [239, 243, 1009], "plot_pca_iri": [101, 106, 1009], "plot_pca_vs_fa_model_select": [102, 106, 1009], "plot_pca_vs_lda": [103, 106, 1009], "plot_pcr_vs_pl": [86, 87, 1009], "plot_permutation_import": [171, 172, 173, 1009], "plot_permutation_importance_multicollinear": [172, 173, 1009], "plot_permutation_tests_for_classif": [266, 276, 1009], "plot_pipeline_displai": [240, 243, 1009], "plot_poisson_regression_non_normal_loss": [199, 218, 1009], "plot_polynomial_interpol": [200, 218, 874, 878, 1009], "plot_precision_recal": [267, 276, 1009], "plot_precision_recall_curv": [315, 1040, 1042, 1043], "plot_prediction_lat": [10, 16, 1009], "plot_quantile_regress": [201, 218, 1009], "plot_random_dataset": [91, 93, 1009], "plot_random_forest_embed": [130, 136, 1009], "plot_random_forest_regression_multioutput": [131, 136, 1009], "plot_random_multilabel_dataset": [92, 93, 1009], "plot_randomized_search": [268, 276, 1009], "plot_rang": 113, "plot_ransac": [202, 218, 1009], "plot_rbf_paramet": [338, 349, 1009], "plot_rbm_logistic_classif": [302, 303, 1009], "plot_regress": [295, 297, 1009], "plot_release_highlights_0_22_0": [315, 323, 1009], "plot_release_highlights_0_23_0": [316, 323, 1009], "plot_release_highlights_0_24_0": [317, 323, 1009], "plot_release_highlights_1_0_0": [318, 323, 1009], "plot_release_highlights_1_1_0": [319, 323, 1009], "plot_release_highlights_1_2_0": [320, 323, 1009], "plot_release_highlights_1_3_0": [321, 323, 1009], "plot_release_highlights_1_4_0": [322, 323, 1009], "plot_result": [34, 121, 245, 246, 251], "plot_rfe_digit": [146, 149, 1009], "plot_rfe_with_cross_valid": [147, 149, 1009], "plot_ridge_coeff": [203, 218, 1009], "plot_ridge_path": [204, 218, 1009], "plot_robust_fit": [205, 218, 1009], "plot_robust_vs_empirical_covari": [81, 83, 1009], "plot_roc": [269, 276, 1009], "plot_roc_crossv": [270, 276, 1009], "plot_roc_curv": [315, 1040, 1042], "plot_roc_curve_visualization_api": [241, 243, 1009], "plot_sampl": [97, 251], "plot_scalable_poly_kernel": [175, 176, 1009], "plot_scaling_import": [310, 313, 1009], "plot_scatt": 56, "plot_segmentation_toi": [66, 68, 1009], "plot_select_from_model_diabet": [148, 149, 1009], "plot_self_training_varying_threshold": [328, 331, 1009], "plot_semi_supervised_newsgroup": [329, 331, 1009], "plot_semi_supervised_versus_svm_iri": [330, 331, 1009], "plot_separating_hyperplan": [339, 349, 1009], "plot_separating_hyperplane_unbalanc": [340, 349, 1009], "plot_set_output": [242, 243, 1009], "plot_sgd_comparison": [206, 218, 1009], "plot_sgd_early_stop": [207, 218, 1009], "plot_sgd_iri": [208, 218, 1009], "plot_sgd_loss_funct": [209, 218, 1009], "plot_sgd_penalti": [210, 218, 1009], "plot_sgd_separating_hyperplan": [211, 218, 1009], "plot_sgd_weighted_sampl": [212, 218, 1009], "plot_sgdocsvm_vs_ocsvm": [213, 218, 1009], "plot_sparse_cod": [104, 106, 1009], "plot_sparse_cov": [82, 83, 1009], "plot_sparse_logistic_regression_20newsgroup": [214, 218, 1009], "plot_sparse_logistic_regression_mnist": [215, 218, 1009], "plot_species_distribut": 11, "plot_species_distribution_model": [11, 16, 496, 1009], "plot_species_kd": [296, 297, 1009], "plot_spectral_biclust": [20, 22, 1009], "plot_spectral_coclust": [21, 22, 1009], "plot_stack_predictor": [132, 136, 1009], "plot_step": [113, 120, 357], "plot_step_coars": 120, "plot_stock_market": [12, 16, 1009], "plot_subfigur": 236, "plot_successive_halving_heatmap": [271, 276, 1009], "plot_successive_halving_iter": [272, 276, 1009], "plot_surfac": [170, 196], "plot_svm_anova": [341, 349, 1009], "plot_svm_kernel": [342, 349, 1009], "plot_svm_margin": [343, 349, 1009], "plot_svm_nonlinear": [344, 349, 1009], "plot_svm_regress": [345, 349, 1009], "plot_svm_scale_c": [346, 349, 1009], "plot_svm_tie_break": [347, 349, 1009], "plot_swissrol": [224, 226, 1009], "plot_t_sne_perplex": [225, 226, 1009], "plot_target_encod": [311, 313, 1009], "plot_target_encoder_cross_v": [312, 313, 1009], "plot_theilsen": [216, 218, 1009], "plot_time_series_lagged_featur": [13, 16, 1009], "plot_titl": 245, "plot_tomography_l1_reconstruct": [14, 16, 1009], "plot_top_word": 15, "plot_topics_extraction_with_nmf_lda": [15, 16, 1009], "plot_train_error_vs_test_error": [273, 276, 1009], "plot_training_data_with_decision_boundari": 342, "plot_transformed_target": [75, 76, 1009], "plot_tre": [357, 360, 1003, 1039, 1041, 1042, 1043, 1045, 1046, 1048], "plot_tree_regress": [358, 361, 1009], "plot_tree_regression_multioutput": [359, 361, 1009], "plot_tweedie_regression_insurance_claim": [217, 218, 1009], "plot_underfitting_overfit": [274, 276, 1009], "plot_unveil_tree_structur": [360, 361, 1009], "plot_validation_curv": [275, 276, 1009], "plot_varimax_fa": [105, 106, 1009], "plot_voting_decision_region": [133, 136, 1009], "plot_voting_proba": [134, 136, 1009], "plot_voting_regressor": [135, 136, 1009], "plot_ward_structured_vs_unstructur": [67, 68, 1009], "plot_weighted_sampl": [348, 349, 1009], "plotli": [117, 261, 380, 397, 400], "pls1": [410, 482], "pls2": [410, 482], "plsca": [85, 481], "plscanon": [85, 480, 482, 483, 988, 1010, 1025, 1034, 1038, 1040, 1042, 1044, 1048], "plsregress": [85, 86, 988, 1010, 1025, 1037, 1040, 1042, 1044, 1046, 1048], "plssvd": [480, 481, 1010, 1025, 1042, 1044, 1048], "plsw2a": 410, "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 387, 436, 500, 629, 630, 695, 696, 698, 699, 700, 802, 818, 913, 994, 1018, 1019, 1020, 1021, 1022, 1027], "plu": [267, 377, 385, 677, 830, 833, 988, 1001], "plug": [412, 983, 1012, 1023], "plugin": 397, "plural": 1036, "plusnet": 203, "pm": [160, 170, 270, 414, 987], "pmlr": 694, "pmml": [401, 1007], "png": [0, 32, 911], "pnucci": 1046, "po": [125, 223, 415], "podshumok": [1036, 1037], "poesio": 714, "poh": [1038, 1039], "point": [4, 9, 11, 13, 14, 26, 31, 37, 38, 40, 41, 48, 49, 52, 55, 58, 60, 64, 67, 80, 81, 85, 90, 91, 92, 94, 96, 98, 100, 106, 111, 113, 117, 120, 121, 122, 127, 130, 148, 153, 158, 159, 166, 169, 170, 171, 178, 182, 188, 191, 193, 195, 197, 199, 200, 201, 203, 205, 208, 211, 212, 216, 217, 220, 221, 222, 223, 224, 228, 231, 233, 247, 251, 254, 257, 261, 262, 267, 269, 270, 281, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 306, 307, 309, 311, 325, 326, 330, 334, 338, 339, 340, 342, 343, 347, 348, 351, 352, 353, 357, 362, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 388, 392, 394, 395, 406, 407, 412, 413, 414, 415, 418, 419, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 458, 459, 467, 470, 472, 496, 502, 510, 512, 513, 517, 520, 523, 528, 531, 533, 539, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 608, 609, 626, 629, 630, 631, 635, 636, 637, 642, 643, 649, 653, 655, 668, 669, 671, 673, 674, 676, 677, 680, 681, 686, 687, 688, 689, 690, 691, 692, 699, 704, 705, 708, 711, 715, 720, 722, 728, 733, 734, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 761, 776, 777, 787, 788, 794, 795, 796, 810, 820, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 864, 869, 878, 893, 894, 895, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 917, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 999, 1000, 1002, 1003, 1007, 1008, 1009, 1018, 1021, 1022, 1023, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "pointer": [380, 388, 440, 1039], "pointplot": 127, "points_color": 220, "pointwis": [114, 158, 418, 442], "poisson": [4, 13, 166, 177, 218, 236, 376, 414, 462, 463, 494, 521, 550, 556, 560, 563, 646, 667, 670, 678, 704, 721, 742, 746, 747, 749, 825, 859, 860, 863, 864, 872, 873, 874, 879, 908, 910, 940, 983, 1003, 1009, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "poisson_gbrt": 199, "poisson_glm": 199, "poissonregressor": [199, 217, 316, 319, 646, 678, 983, 1041, 1044, 1045], "pokorni": 1045, "pola": 13, "polar": [73, 380, 397, 400, 431, 440, 441, 443, 445, 447, 462, 466, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 1023, 1047, 1048], "pole": 222, "poli": [4, 140, 175, 260, 335, 342, 345, 450, 533, 618, 762, 771, 796, 874, 901, 902, 903, 904, 905, 983, 997, 1021], "polici": [127, 168, 169, 199, 217, 394, 533, 539, 983, 1045], "policyhold": [199, 217, 983], "polit": [19, 351, 375, 379, 983, 988], "polli": 351, "pollut": [351, 725, 782, 987, 993], "polmauri": 1037, "poloso": 1044, "polycollect": [802, 818], "polynomi": [15, 163, 166, 174, 176, 177, 199, 205, 218, 233, 240, 260, 274, 288, 317, 318, 335, 345, 372, 376, 450, 489, 618, 637, 638, 639, 641, 670, 762, 771, 772, 825, 860, 869, 871, 874, 878, 899, 901, 902, 903, 904, 905, 982, 1002, 1009, 1010, 1025, 1042, 1043], "polynomial_featur": 274, "polynomial_kernel": [762, 985, 1047], "polynomialcountsketch": [175, 637, 639, 979, 1042, 1044, 1047], "polynomialfeatur": [4, 178, 199, 200, 205, 240, 274, 317, 342, 878, 983, 997, 1034, 1038, 1039, 1040, 1043, 1044, 1046, 1047], "polynomialfeaturespolynomialfeatur": 240, "polysemi": 412, "polytop": 513, "pomegran": 1007, "ponc": [412, 529, 535], "poncho": 1012, "pone": 374, "ponnuthurai": 377, "ponzi": 311, "pooch": [53, 380, 397, 400], "pooja": [1045, 1046, 1047], "pool": [269, 392, 443, 633, 956, 1008, 1041], "pooling_func": [443, 1038], "poolqc": 121, "poolsawat": [1044, 1045], "poor": [170, 175, 266, 275, 328, 405, 411, 412, 688, 692, 735, 836, 839, 840, 981, 982, 984, 989, 1008, 1014, 1037, 1038, 1039, 1041, 1043], "poor_scor": 382, "poorer": [121, 362, 412], "poorest": 989, "poorli": [25, 27, 62, 78, 86, 114, 126, 224, 367, 407, 414, 526, 628, 983, 984, 1036], "poorna": [1040, 1042], "pop": [360, 392, 914, 1018, 1038], "popa": [1040, 1041], "popitem": 914, "popo": 1033, "popul": [72, 78, 80, 127, 169, 199, 238, 263, 305, 375, 389, 394, 409, 438, 488, 710, 716, 841, 842, 843, 845, 847, 849, 850, 851, 956, 987, 993, 997, 1003], "popular": [163, 224, 375, 378, 385, 388, 392, 394, 406, 413, 414, 415, 417, 450, 460, 977, 979, 983, 985, 992, 1001, 1008, 1018, 1023], "port": [378, 397, 1040], "portabl": [401, 1007], "porter": 1007, "portfolio": [199, 217, 981], "portion": [6, 8, 81, 122, 148, 269, 366, 375, 377, 380, 386, 394, 785, 820, 837, 976, 986, 990, 1019, 1023], "portland": [407, 418, 442], "portnoi": [983, 1047], "portrait": [6, 412, 1019], "pos_class": 8, "pos_label": [229, 238, 394, 436, 437, 696, 698, 700, 704, 705, 707, 724, 726, 727, 735, 779, 780, 781, 784, 786, 866, 883, 987, 1038, 1042, 1044, 1048], "pos_lr": 263, "pos_lr_bas": 263, "pos_lr_base_std": 263, "pos_tagg": 415, "pos_vector": 415, "pos_window": 415, "pose": [203, 268, 983, 1022], "posit": [0, 4, 6, 8, 11, 12, 24, 25, 27, 67, 105, 127, 129, 134, 168, 169, 183, 184, 194, 199, 200, 201, 203, 217, 223, 232, 238, 257, 260, 263, 267, 269, 270, 305, 316, 317, 321, 351, 360, 366, 375, 379, 380, 382, 387, 389, 394, 395, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 436, 437, 440, 444, 445, 447, 462, 465, 492, 496, 498, 502, 506, 507, 508, 523, 525, 527, 528, 529, 531, 533, 534, 535, 540, 543, 544, 546, 547, 548, 555, 559, 560, 561, 562, 590, 591, 592, 593, 594, 596, 597, 598, 604, 608, 609, 618, 629, 630, 641, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 667, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 685, 688, 696, 698, 700, 705, 707, 710, 711, 713, 714, 716, 718, 721, 724, 726, 727, 728, 732, 733, 735, 736, 737, 738, 739, 740, 741, 749, 751, 755, 763, 779, 780, 781, 784, 785, 786, 794, 795, 799, 800, 822, 839, 840, 841, 843, 845, 847, 849, 851, 852, 862, 863, 866, 872, 875, 878, 883, 887, 891, 892, 894, 895, 899, 900, 903, 904, 905, 907, 909, 916, 934, 936, 952, 954, 978, 979, 983, 985, 987, 988, 990, 991, 992, 994, 997, 1002, 1019, 1021, 1023, 1031, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "position": 394, "positive_class": [8, 710], "positive_cod": [95, 529, 535, 540, 543, 544], "positive_dict": [95, 529, 535, 543, 544], "positive_featur": 385, "positive_likelihood_ratio": [263, 710], "posix": [367, 392], "possa": 1037, "possibl": [0, 4, 13, 17, 26, 27, 37, 49, 55, 71, 78, 95, 114, 117, 127, 129, 151, 169, 170, 171, 172, 199, 216, 217, 233, 235, 260, 261, 262, 263, 265, 266, 267, 269, 270, 281, 315, 338, 346, 351, 352, 362, 366, 367, 368, 373, 374, 375, 380, 381, 382, 383, 384, 386, 388, 392, 393, 394, 397, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 421, 430, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 707, 719, 720, 721, 725, 739, 753, 775, 780, 782, 785, 794, 795, 796, 798, 799, 800, 802, 808, 809, 810, 814, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 917, 919, 920, 923, 928, 955, 958, 961, 976, 979, 982, 983, 984, 986, 987, 988, 989, 990, 995, 997, 1002, 1003, 1008, 1012, 1014, 1021, 1022, 1023, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046], "possibli": [57, 86, 148, 199, 214, 342, 352, 377, 379, 388, 401, 407, 414, 415, 449, 451, 587, 834, 835, 836, 837, 838, 904, 905, 907, 908, 909, 910, 976, 979, 984, 990, 997, 1045], "post": [7, 15, 19, 70, 166, 319, 351, 352, 353, 355, 360, 361, 366, 375, 379, 380, 384, 385, 393, 407, 446, 486, 487, 498, 710, 825, 907, 987, 1003, 1009, 1011, 1012, 1023, 1041], "post1": 1028, "poster": [351, 379, 380, 1022], "posterior": [57, 150, 151, 152, 157, 161, 166, 178, 260, 412, 417, 547, 548, 550, 608, 609, 611, 612, 613, 617, 620, 621, 625, 642, 643, 706, 794, 981, 1007, 1009, 1036, 1039], "posteriori": [983, 989], "postfit_hook": 7, "postpon": [382, 384], "postprocess": [24, 405, 533, 539], "postprocessor": 1041, "postscript": 911, "potenti": [4, 27, 55, 78, 127, 164, 168, 170, 178, 289, 290, 299, 321, 322, 342, 353, 366, 367, 378, 394, 397, 398, 407, 411, 414, 415, 466, 480, 481, 482, 483, 494, 522, 547, 555, 556, 559, 560, 562, 563, 571, 604, 609, 632, 760, 889, 890, 897, 907, 908, 909, 910, 993, 1001, 1003, 1007, 1023, 1033, 1040, 1041, 1044, 1047], "poughon": 1037, "poundal": 70, "pour": 987, "pourbozorg": [1038, 1039, 1040], "pow": [674, 675, 676, 856, 857], "powel": [6, 375], "power": [4, 7, 17, 117, 122, 168, 200, 217, 251, 263, 268, 287, 305, 306, 309, 325, 335, 366, 367, 393, 405, 407, 410, 413, 414, 415, 418, 442, 480, 481, 482, 530, 533, 539, 542, 628, 678, 692, 721, 744, 746, 749, 841, 842, 849, 850, 852, 853, 874, 875, 876, 887, 888, 935, 936, 983, 984, 987, 995, 997, 1001, 1002, 1012, 1033, 1036, 1038, 1040, 1041, 1043, 1047], "power_iter": 17, "power_iteration_norm": [403, 539, 542, 935, 936, 1044], "power_t": [674, 675, 676, 856, 857, 1001], "power_transform": [875, 888, 1038], "powers_": 874, "powershel": 378, "powertransform": [309, 876, 887, 977, 997, 1038, 1041, 1044, 1046], "pox": 278, "poznik": [1043, 1044, 1045], "pp": [0, 63, 148, 259, 377, 407, 409, 415, 418, 419, 442, 446, 450, 460, 509, 531, 532, 539, 588, 633, 641, 662, 683, 684, 718, 723, 727, 737, 753, 766, 780, 834, 836, 838, 855, 875, 887, 980, 987, 989, 990, 1000], "pp2013": 979, "pp84": 417, "ppc64le": 388, "ppf": 260, "ppm": 156, "pprint": [17, 124, 235, 261, 375, 931], "pq": 320, "pr": [0, 134, 367, 380, 383, 388, 415, 738, 987, 1011, 1040, 1042], "pr_displai": 229, "pr_number": 388, "prabakaran": [1038, 1039, 1042, 1044, 1045], "prabhakar": 412, "practic": [27, 53, 71, 80, 86, 98, 117, 121, 122, 127, 151, 168, 169, 175, 183, 201, 228, 234, 261, 268, 289, 290, 317, 338, 342, 367, 369, 380, 382, 383, 386, 388, 393, 394, 407, 409, 411, 412, 413, 414, 415, 417, 445, 450, 460, 519, 522, 587, 630, 631, 668, 794, 838, 892, 899, 976, 977, 981, 983, 986, 987, 988, 989, 990, 993, 994, 997, 1007, 1008, 1010, 1012, 1014, 1023, 1024, 1025, 1032, 1036, 1038, 1040, 1042], "practicalswift": 1036, "practis": 204, "practition": [115, 203], "pradeep": [1038, 1039], "pragmat": 380, "prakash": [1035, 1037, 1043], "pramod": 1044, "pranayanchuri": 1043, "prang": 381, "prasanth": 1045, "pratama": 1041, "pratap": [1034, 1037, 1044], "prathmesh": 1039, "pratik": 1037, "pratiqu": 377, "pravar": 1038, "pravarmahajan": [1037, 1038], "pre": [5, 71, 169, 188, 305, 353, 369, 378, 380, 394, 397, 409, 411, 412, 414, 415, 416, 418, 419, 441, 442, 445, 457, 531, 533, 688, 710, 760, 862, 904, 987, 992, 997, 1002, 1003, 1007, 1008, 1025, 1033, 1038, 1044, 1048], "pre_dispatch": [796, 802, 810, 818, 820, 821, 822, 823, 826, 953, 1033], "preambl": 55, "prec": [82, 229, 525, 987], "prec_": 82, "prec_macro": 411, "preced": [367, 380, 485, 987, 1030], "precipit": 405, "precis": [6, 13, 25, 32, 70, 75, 82, 95, 145, 157, 158, 166, 175, 229, 253, 254, 258, 276, 302, 305, 325, 326, 380, 382, 394, 404, 405, 406, 407, 409, 412, 414, 441, 467, 468, 469, 470, 471, 472, 473, 474, 476, 502, 521, 530, 532, 539, 542, 642, 643, 644, 646, 648, 649, 650, 652, 653, 654, 667, 670, 672, 678, 680, 681, 685, 697, 698, 704, 705, 706, 711, 724, 726, 727, 728, 736, 760, 779, 780, 781, 784, 785, 794, 795, 825, 828, 839, 840, 845, 860, 879, 883, 899, 904, 911, 913, 936, 981, 983, 990, 991, 1002, 1009, 1019, 1023, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "precision_": [12, 82, 467, 468, 469, 470, 471, 472, 473, 474], "precision_macro": [411, 1018], "precision_recall_curv": [229, 267, 698, 704, 705, 724, 987, 1031, 1032, 1036, 1043, 1044, 1046, 1048], "precision_recall_fscore_support": [711, 726, 727, 781, 784, 987, 1034, 1038, 1040, 1046], "precision_scor": [25, 267, 706, 784, 987, 1030, 1032, 1033, 1034, 1035, 1040, 1046], "precision_threshold": 258, "precisionrecalldisplai": [267, 318, 779, 781, 784, 987, 1040, 1043, 1046, 1047, 1048], "precisions_": [794, 795], "precisions_cholesky_": [794, 795, 1044], "precisions_init": [795, 1044, 1046], "precompil": 378, "precomput": [94, 95, 96, 106, 166, 177, 198, 218, 223, 235, 283, 285, 295, 382, 389, 392, 394, 407, 415, 418, 430, 438, 439, 442, 443, 444, 448, 450, 455, 463, 469, 480, 481, 482, 522, 529, 533, 535, 538, 539, 540, 546, 552, 554, 556, 558, 560, 563, 566, 568, 608, 609, 618, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 679, 680, 682, 683, 686, 688, 689, 690, 694, 771, 775, 778, 789, 790, 832, 833, 841, 842, 843, 845, 846, 847, 849, 850, 851, 857, 900, 901, 902, 903, 904, 905, 908, 910, 963, 964, 965, 979, 985, 990, 1002, 1008, 1009, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "precompute_dist": [1034, 1041], "precompute_gram": 1032, "precomputed_nearest_neighbor": [450, 689], "precondit": [407, 450, 460, 693, 1003, 1046], "pred": [4, 7, 11, 13, 32, 347, 351, 375, 646, 667, 678, 695, 700, 704, 716, 726, 727, 735, 780, 781, 784, 785, 987], "pred1": 135, "pred2": 135, "pred3": 135, "pred4": 135, "pred_background": 11, "pred_decis": [732, 987, 1043], "pred_entropi": [325, 326], "pred_nam": [6, 1019], "pred_scor": 7, "pred_test": 11, "pred_typ": 10, "predecessor": [111, 448, 453, 454, 455, 1047], "predecessor_": [448, 455], "predecessor_correct": [448, 454], "predefin": [264, 809, 976, 990, 1018, 1045, 1047], "predefinedsplit": [411, 1018, 1034], "predetermin": [407, 984], "predict": [3, 6, 7, 8, 11, 16, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 56, 57, 58, 62, 70, 71, 72, 73, 75, 85, 105, 109, 110, 111, 113, 114, 115, 117, 119, 120, 121, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 145, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 166, 169, 170, 171, 172, 175, 178, 181, 182, 183, 191, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 207, 208, 213, 214, 216, 217, 228, 229, 231, 233, 235, 237, 246, 247, 248, 249, 250, 251, 253, 254, 258, 260, 262, 263, 266, 269, 270, 274, 276, 278, 281, 286, 289, 290, 291, 294, 295, 302, 305, 306, 310, 311, 315, 316, 317, 318, 319, 321, 322, 326, 328, 329, 330, 334, 335, 337, 338, 342, 344, 345, 346, 347, 351, 352, 357, 358, 359, 360, 362, 365, 367, 369, 372, 375, 377, 380, 382, 387, 389, 394, 396, 398, 401, 402, 403, 405, 406, 407, 408, 410, 412, 414, 415, 416, 421, 424, 429, 430, 435, 436, 437, 438, 440, 441, 442, 445, 446, 447, 463, 467, 480, 481, 482, 485, 499, 506, 522, 532, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 580, 591, 592, 600, 604, 608, 609, 611, 612, 613, 614, 620, 623, 625, 626, 628, 629, 630, 631, 632, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 712, 713, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 735, 738, 739, 740, 743, 745, 747, 749, 753, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 793, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 845, 846, 849, 850, 856, 857, 859, 866, 879, 880, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 961, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1015, 1017, 1018, 1019, 1023, 1025, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "predict_ecoc": 1034, "predict_joint_log_proba": [834, 835, 836, 837, 838, 1045], "predict_log_proba": [235, 382, 394, 547, 548, 549, 551, 553, 555, 557, 562, 591, 592, 656, 657, 674, 796, 799, 800, 810, 820, 830, 834, 835, 836, 837, 838, 856, 859, 896, 901, 904, 907, 909, 1002, 1030, 1043, 1047], "predict_ovo": 1034, "predict_ovr": 1034, "predict_param": [235, 463, 565, 566, 1043], "predict_proba": [24, 25, 26, 27, 30, 34, 130, 134, 148, 152, 153, 154, 155, 235, 269, 281, 299, 307, 310, 315, 317, 351, 382, 387, 394, 405, 406, 414, 435, 436, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 591, 592, 608, 617, 618, 620, 621, 629, 630, 631, 656, 657, 674, 696, 698, 700, 738, 739, 785, 794, 795, 796, 799, 800, 810, 820, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 841, 849, 856, 859, 866, 894, 895, 896, 901, 904, 907, 909, 983, 987, 989, 991, 994, 1000, 1001, 1002, 1003, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "predict_proba_ovr": 1034, "predicted_label": [325, 326], "prediction_df": 127, "prediction_perform": 7, "prediction_performance_comput": 7, "prediction_performance_label": 7, "prediction_pow": 7, "prediction_tim": [7, 8], "prediction_titl": [6, 1019], "predictionerrordisplai": [4, 13, 75, 132, 169, 256, 320, 987, 1045, 1047], "predictions_kr": 151, "predictive_analyt": 1003, "predictive_word": 351, "predictor": [75, 110, 112, 121, 135, 136, 163, 164, 166, 199, 217, 230, 238, 256, 311, 382, 393, 394, 408, 410, 411, 414, 417, 464, 465, 480, 481, 482, 494, 514, 515, 516, 553, 554, 560, 563, 566, 600, 608, 628, 630, 631, 646, 651, 655, 667, 671, 678, 699, 820, 822, 831, 832, 859, 860, 872, 873, 879, 961, 983, 988, 1009, 1031, 1037, 1040], "predispatch": [802, 818, 823, 826], "predit": 86, "predomin": [382, 1031], "prefer": [38, 44, 55, 127, 251, 269, 305, 362, 366, 367, 368, 380, 381, 382, 394, 407, 411, 412, 414, 415, 438, 452, 469, 470, 476, 485, 506, 507, 625, 630, 631, 652, 656, 657, 699, 723, 725, 739, 754, 755, 830, 848, 874, 899, 900, 941, 953, 976, 979, 981, 983, 987, 992, 1002, 1003, 1007, 1011, 1021, 1031, 1037, 1039, 1043, 1044, 1047], "prefetch": 953, "prefit": [26, 394, 405, 416, 435, 565, 566, 595, 1008, 1042, 1043, 1044], "prefix": [17, 70, 261, 285, 315, 380, 384, 386, 388, 417, 423, 440, 441, 443, 445, 447, 462, 465, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 637, 638, 639, 640, 686, 687, 690, 802, 823, 843, 848, 851, 855, 858, 859, 865, 891, 892, 1036, 1037, 1043, 1045, 1048], "prein": [0, 370, 1042, 1043, 1044], "preiss": 1043, "preliminari": 460, "prematur": 1043, "prepar": [200, 235, 351, 366, 382, 383, 386, 388, 1003, 1012, 1038, 1046], "prepend": [169, 1030], "preprint": 377, "preprocess": [4, 5, 6, 10, 27, 31, 42, 44, 49, 53, 55, 58, 62, 70, 71, 72, 73, 75, 86, 95, 105, 116, 121, 144, 148, 156, 160, 171, 175, 178, 180, 187, 188, 190, 199, 200, 205, 215, 217, 221, 229, 230, 239, 242, 257, 267, 269, 274, 286, 291, 292, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 329, 338, 341, 352, 368, 369, 372, 374, 377, 380, 385, 393, 394, 403, 404, 407, 408, 411, 414, 415, 416, 462, 463, 464, 465, 487, 565, 579, 580, 586, 587, 589, 628, 656, 657, 670, 672, 674, 676, 685, 828, 859, 860, 899, 900, 901, 902, 904, 905, 977, 983, 988, 991, 998, 1001, 1002, 1004, 1007, 1009, 1011, 1012, 1014, 1019, 1020, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "preprocessor": [71, 132, 169, 199, 230, 238, 240, 311, 316, 318, 319, 320, 322, 408, 415, 586, 587, 589, 1007, 1023, 1030, 1033, 1038, 1040], "preprocessor__cat__selector__percentil": 71, "preprocessor__num__imputer__strategi": 71, "preprocessor_list": 238, "prescrib": 394, "presenc": [9, 60, 62, 80, 81, 109, 168, 172, 183, 203, 238, 305, 378, 381, 394, 409, 412, 710, 723, 753, 766, 828, 862, 870, 872, 879, 971, 977, 983, 987, 988, 1001, 1011, 1033, 1034, 1036, 1040, 1042, 1044], "present": [4, 5, 13, 43, 49, 92, 95, 102, 116, 117, 124, 127, 128, 147, 148, 157, 160, 178, 181, 183, 188, 199, 228, 231, 235, 250, 258, 263, 266, 269, 270, 283, 305, 308, 310, 352, 377, 378, 382, 385, 392, 394, 398, 407, 409, 412, 414, 415, 425, 426, 429, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 487, 488, 489, 490, 494, 498, 499, 500, 501, 502, 503, 508, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 547, 548, 559, 560, 561, 564, 567, 568, 579, 580, 581, 586, 587, 589, 615, 625, 626, 627, 628, 648, 652, 675, 686, 687, 688, 689, 710, 726, 727, 735, 766, 780, 781, 784, 794, 795, 796, 799, 800, 808, 810, 823, 841, 842, 843, 845, 847, 849, 850, 851, 858, 863, 871, 872, 873, 874, 875, 877, 880, 891, 892, 903, 911, 913, 914, 936, 971, 986, 987, 988, 989, 994, 997, 1006, 1008, 1033, 1038, 1040, 1041, 1042, 1044, 1045, 1047], "preserv": [4, 48, 100, 224, 232, 255, 382, 383, 406, 411, 412, 415, 579, 586, 587, 589, 644, 650, 694, 739, 771, 775, 814, 815, 816, 883, 919, 920, 977, 983, 984, 997, 999, 1007, 1018, 1022, 1030, 1033, 1034, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048], "preserves_dtyp": 382, "preservs": 1044, "preset": [664, 666, 674, 991], "presort": [1035, 1040], "press": [375, 407, 412, 417, 418, 442, 588, 608, 609, 612, 617, 620, 641, 834, 838, 980, 983, 985, 989], "pressur": [148, 377, 1021], "preston": [1035, 1036, 1037], "presum": [169, 281, 407, 415, 834], "prettenhof": [0, 2, 11, 123, 125, 126, 261, 351, 352, 1030, 1031, 1032, 1033, 1034, 1035], "pretti": [170, 224, 258, 351, 366, 380, 392, 856, 857, 991, 1039], "preuss": 1046, "prev_scor": 17, "preval": [111, 315, 394, 698, 710, 987], "prevalence_pos_label": [267, 698], "prevent": [4, 55, 122, 124, 145, 168, 200, 203, 305, 311, 312, 338, 351, 356, 362, 380, 382, 384, 392, 393, 407, 412, 415, 440, 447, 486, 487, 559, 560, 588, 589, 609, 725, 782, 856, 857, 884, 885, 887, 888, 889, 890, 987, 989, 992, 993, 997, 1003, 1021, 1032, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "previou": [4, 43, 53, 71, 95, 114, 121, 122, 124, 132, 151, 156, 157, 168, 169, 170, 183, 185, 200, 232, 234, 235, 260, 263, 267, 305, 310, 319, 351, 352, 353, 362, 366, 375, 380, 382, 385, 386, 388, 392, 394, 395, 397, 407, 414, 415, 466, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 628, 644, 646, 650, 651, 656, 658, 660, 664, 665, 666, 667, 674, 675, 676, 678, 705, 815, 830, 833, 848, 856, 857, 896, 913, 983, 987, 991, 997, 1008, 1014, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "previous": [7, 53, 57, 71, 111, 157, 169, 258, 267, 319, 375, 388, 392, 397, 407, 412, 415, 438, 441, 452, 522, 532, 539, 647, 656, 657, 664, 665, 666, 674, 675, 676, 899, 955, 983, 997, 1007, 1027, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "previous_loss": [664, 665, 666, 675], "previs": 229, "price": [12, 75, 121, 122, 127, 132, 238, 311, 977, 983, 1012, 1019], "priceless": 380, "prieur": 1043, "primal": [656, 657, 675, 899, 900, 1001, 1002], "primari": [382, 394, 412, 513, 994, 1011, 1012], "primarili": [251, 265, 380, 394, 403, 407, 945, 1012, 1039, 1040], "primat": 351, "primdal": 1038, "primit": 1045, "princ": 1043, "princip": [3, 16, 84, 85, 87, 90, 97, 99, 100, 101, 103, 130, 166, 220, 233, 236, 292, 310, 317, 372, 407, 410, 419, 482, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 548, 655, 686, 687, 688, 690, 691, 825, 848, 860, 879, 935, 936, 984, 990, 1009, 1024, 1025, 1030], "principl": [111, 158, 288, 353, 380, 392, 394, 395, 411, 414, 936, 976, 986, 990, 1001, 1037], "print": [4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 63, 67, 70, 71, 73, 74, 75, 80, 85, 86, 92, 95, 98, 102, 103, 105, 111, 114, 117, 118, 119, 120, 121, 123, 125, 127, 138, 139, 144, 145, 147, 148, 151, 152, 154, 156, 160, 168, 170, 171, 172, 175, 183, 184, 185, 186, 190, 191, 194, 195, 199, 201, 202, 203, 206, 207, 214, 215, 217, 221, 222, 225, 230, 232, 234, 235, 238, 242, 248, 254, 258, 259, 260, 261, 263, 265, 268, 269, 273, 283, 287, 294, 296, 300, 301, 302, 307, 310, 312, 315, 316, 317, 319, 321, 322, 325, 326, 329, 338, 351, 352, 353, 356, 360, 362, 366, 374, 375, 378, 381, 382, 388, 394, 398, 401, 408, 411, 414, 415, 417, 462, 465, 466, 470, 476, 488, 492, 500, 510, 511, 539, 542, 547, 548, 557, 558, 559, 560, 562, 563, 567, 568, 575, 581, 582, 583, 585, 586, 587, 589, 610, 615, 616, 628, 644, 645, 647, 648, 650, 651, 652, 654, 658, 659, 660, 661, 664, 665, 674, 675, 682, 694, 711, 715, 734, 792, 794, 795, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 826, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 856, 857, 858, 859, 860, 861, 869, 875, 879, 887, 897, 898, 899, 900, 901, 904, 906, 912, 918, 923, 948, 955, 971, 977, 987, 988, 989, 990, 995, 1003, 1014, 1018, 1019, 1021, 1022, 1023, 1030, 1032, 1038, 1039, 1041, 1045], "print_changed_onli": [466, 897, 1039, 1041, 1042], "print_datafram": 258, "print_progress": 953, "print_rout": 235, "printabl": 1011, "prior": [3, 7, 16, 17, 46, 47, 57, 65, 66, 67, 92, 150, 151, 152, 157, 161, 164, 166, 171, 178, 180, 183, 244, 246, 250, 251, 252, 260, 271, 293, 380, 382, 384, 394, 397, 398, 407, 410, 412, 414, 417, 463, 521, 534, 546, 547, 548, 549, 557, 609, 611, 612, 613, 617, 620, 621, 628, 642, 643, 644, 645, 649, 650, 652, 653, 654, 658, 659, 660, 670, 676, 679, 714, 794, 834, 835, 836, 837, 838, 859, 860, 874, 901, 904, 954, 976, 979, 981, 983, 986, 987, 989, 995, 1003, 1004, 1009, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1046], "prior_k": 547, "priori": [199, 216, 269, 281, 305, 394, 407, 414, 586, 592, 986, 1046], "priorit": [1008, 1037], "prioriti": [379, 630, 827, 828, 1008, 1033], "priors_": [547, 548], "privaci": 1007, "privat": [0, 384, 394, 395, 915, 1012, 1030, 1038, 1040, 1041, 1043, 1044], "privileg": [238, 388], "priyam": 1045, "prng": [82, 1022], "proanthocyanin": 377, "prob_pos_clf": 24, "prob_pos_isoton": 24, "prob_pos_sigmoid": 24, "prob_pr": [436, 437], "prob_tru": [436, 437], "proba": [25, 27, 134, 435, 907, 909], "proba_": [901, 904, 1041], "proba_map": 55, "proba_neg_class": [25, 27], "proba_pos_class": [25, 27], "probabilist": [15, 26, 27, 30, 78, 82, 94, 95, 104, 105, 106, 150, 151, 154, 157, 158, 161, 166, 234, 351, 394, 405, 413, 414, 435, 471, 474, 530, 532, 533, 539, 557, 586, 587, 608, 620, 641, 643, 674, 701, 738, 796, 821, 866, 901, 902, 904, 905, 980, 981, 983, 986, 987, 992, 997, 1002, 1003, 1007, 1009, 1012, 1030, 1033, 1037], "probabilisticpca": [1030, 1033], "probabilities_": [55, 444], "probabilities_or_label": 567, "probabl": [0, 13, 23, 27, 28, 29, 34, 35, 55, 75, 91, 92, 110, 127, 133, 136, 143, 150, 151, 152, 153, 161, 166, 169, 191, 211, 214, 215, 220, 224, 229, 231, 232, 260, 262, 263, 266, 267, 270, 302, 305, 309, 315, 317, 328, 330, 345, 346, 366, 369, 375, 376, 382, 386, 392, 394, 407, 411, 412, 415, 416, 417, 433, 434, 435, 436, 437, 444, 445, 447, 502, 510, 513, 521, 525, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 568, 591, 592, 608, 611, 612, 620, 625, 629, 630, 631, 656, 657, 669, 674, 690, 696, 698, 700, 701, 704, 705, 707, 710, 714, 718, 723, 724, 726, 736, 737, 738, 739, 753, 779, 781, 784, 785, 786, 791, 794, 795, 796, 799, 800, 810, 824, 825, 828, 830, 831, 834, 835, 836, 837, 838, 841, 844, 849, 855, 856, 880, 892, 893, 894, 895, 896, 899, 901, 904, 907, 909, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1003, 1008, 1009, 1010, 1023, 1025, 1030, 1032, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044], "probable_clust": 56, "probas_pr": [779, 1048], "probb_": [901, 904, 1041], "probe": 995, "probinette4": 1042, "probl": [605, 606], "problem": [3, 4, 5, 6, 11, 13, 14, 15, 26, 37, 54, 55, 57, 66, 95, 111, 114, 117, 119, 124, 125, 151, 166, 171, 175, 178, 183, 185, 188, 192, 193, 199, 201, 203, 216, 217, 222, 228, 229, 236, 238, 241, 258, 260, 265, 269, 270, 274, 278, 281, 283, 288, 295, 309, 318, 322, 335, 338, 342, 346, 347, 351, 352, 360, 362, 366, 375, 376, 377, 378, 379, 381, 382, 385, 386, 389, 392, 394, 405, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 442, 445, 447, 448, 450, 455, 460, 463, 476, 501, 506, 507, 513, 514, 515, 516, 521, 522, 526, 529, 531, 535, 537, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 559, 562, 565, 569, 571, 587, 608, 629, 641, 646, 648, 650, 652, 653, 654, 655, 656, 657, 662, 663, 664, 666, 667, 670, 671, 672, 673, 674, 675, 677, 678, 683, 684, 685, 686, 687, 689, 691, 693, 706, 714, 726, 727, 732, 735, 736, 780, 781, 784, 785, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 811, 812, 813, 814, 815, 816, 819, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 865, 866, 872, 880, 883, 889, 890, 899, 900, 907, 909, 925, 936, 977, 978, 982, 983, 984, 986, 987, 988, 989, 990, 991, 995, 997, 1001, 1004, 1008, 1010, 1012, 1015, 1016, 1017, 1023, 1024, 1025, 1030, 1031, 1033, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "problemat": [4, 169, 256, 408, 977, 1038], "proc": [27, 79, 405, 415, 448, 687, 691, 834, 976, 984, 989, 993], "proce": [50, 145, 180, 378, 384, 410, 411, 414, 438, 983], "procedur": [46, 56, 117, 124, 148, 179, 187, 250, 262, 308, 312, 338, 351, 362, 380, 382, 392, 393, 394, 395, 405, 406, 409, 411, 412, 414, 416, 529, 535, 536, 538, 543, 544, 545, 551, 552, 553, 554, 557, 558, 591, 593, 600, 607, 642, 670, 672, 685, 725, 782, 856, 857, 876, 888, 958, 976, 983, 989, 997, 1000, 1001, 1002, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "proceed": [80, 148, 375, 377, 407, 418, 437, 442, 509, 694, 706, 723, 753, 846, 896, 987, 999, 1000, 1001], "process": [0, 4, 5, 8, 19, 26, 30, 31, 34, 45, 46, 47, 48, 50, 56, 57, 66, 70, 72, 74, 79, 81, 91, 96, 97, 99, 109, 111, 120, 122, 124, 129, 130, 138, 139, 140, 161, 168, 178, 181, 201, 203, 209, 211, 212, 234, 235, 236, 238, 245, 246, 249, 251, 260, 262, 263, 272, 278, 299, 305, 307, 308, 312, 317, 321, 326, 330, 342, 343, 344, 352, 353, 356, 366, 367, 368, 369, 375, 379, 380, 382, 384, 386, 389, 392, 393, 394, 401, 407, 408, 409, 411, 412, 413, 414, 415, 416, 420, 446, 447, 473, 494, 502, 521, 532, 533, 534, 535, 536, 559, 560, 561, 586, 587, 589, 608, 609, 611, 612, 613, 615, 616, 617, 620, 621, 623, 625, 630, 631, 637, 641, 662, 670, 683, 684, 701, 720, 738, 778, 794, 796, 799, 800, 810, 820, 821, 822, 831, 832, 848, 862, 866, 868, 869, 870, 879, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 953, 955, 976, 979, 983, 987, 990, 997, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1022, 1023, 1025, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047], "process_rout": [235, 1047], "processor": [71, 132, 169, 369, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 470, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 841, 842, 845, 847, 849, 850, 852, 853, 858, 861, 894, 895], "procter": 12, "prod": [352, 619], "prod_": 989, "prod_i": 979, "proding": 1046, "produc": [13, 14, 25, 26, 44, 57, 70, 98, 124, 125, 126, 128, 183, 266, 302, 328, 362, 367, 375, 376, 380, 382, 385, 394, 395, 407, 408, 411, 412, 414, 438, 441, 444, 450, 517, 534, 557, 561, 579, 586, 591, 592, 630, 631, 798, 799, 800, 808, 813, 816, 820, 864, 874, 901, 904, 978, 979, 983, 985, 986, 987, 990, 993, 994, 998, 1000, 1001, 1002, 1014, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "product": [20, 71, 95, 133, 151, 156, 170, 342, 362, 366, 382, 383, 386, 389, 401, 404, 412, 414, 449, 536, 538, 545, 580, 587, 588, 589, 611, 612, 631, 638, 662, 663, 683, 684, 758, 760, 772, 774, 871, 874, 891, 892, 937, 976, 979, 983, 985, 997, 999, 1001, 1002, 1007, 1012, 1038], "production": 1012, "prof": 386, "profession": 169, "professor": 1012, "profil": [199, 366, 380, 383, 519, 522, 983, 1012], "profile_default": 386, "profit": [0, 1047], "prog": [148, 377], "prognosi": [148, 377], "program": [0, 50, 148, 352, 362, 367, 368, 377, 378, 380, 382, 386, 392, 506, 633, 668, 889, 890, 983, 1002, 1003, 1007, 1008, 1011, 1030, 1032], "programmat": [382, 497, 1039], "progress": [4, 7, 8, 95, 135, 148, 164, 192, 288, 319, 377, 380, 384, 385, 395, 398, 403, 407, 557, 558, 690, 828, 830, 833, 848, 856, 857, 1012, 1021, 1023, 1030, 1032, 1039, 1044], "prohibit": [168, 238, 411, 414, 625, 992, 1000, 1037], "proj": [14, 647], "proj_gradi": 386, "proj_oper": 14, "project": [6, 8, 11, 14, 17, 33, 45, 55, 58, 67, 90, 94, 95, 97, 99, 101, 105, 106, 113, 155, 157, 159, 160, 166, 170, 191, 196, 208, 220, 221, 222, 224, 227, 233, 236, 243, 246, 255, 287, 292, 296, 302, 335, 343, 352, 357, 366, 369, 372, 374, 378, 379, 380, 385, 386, 389, 394, 395, 397, 404, 410, 412, 413, 419, 438, 444, 449, 450, 460, 472, 480, 481, 482, 483, 487, 500, 502, 529, 531, 532, 533, 535, 537, 539, 540, 541, 542, 546, 547, 571, 580, 587, 639, 640, 647, 670, 672, 686, 689, 693, 694, 829, 848, 876, 891, 892, 893, 935, 936, 981, 983, 984, 985, 988, 990, 991, 993, 1000, 1003, 1005, 1009, 1012, 1014, 1019, 1022, 1025, 1030, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "projected_data": 232, "projected_dist": 232, "projectedgradientnmf": 1035, "prokopi": [1035, 1038], "prolifer": 382, "prolin": [19, 310, 377], "promin": [98, 394], "promis": [394, 1008], "promot": [169, 440, 706, 1007, 1041, 1043, 1047], "prompt": [378, 380, 397, 400, 415, 1014], "prone": [27, 199, 247, 309, 392, 405], "pronounc": [39, 40, 52, 156], "proof": [392, 414, 893, 999], "prop": [73, 81, 205, 247, 289, 337, 360, 944, 947, 1019], "propag": [20, 32, 36, 37, 49, 55, 63, 64, 68, 89, 146, 166, 237, 324, 331, 375, 406, 438, 452, 500, 510, 512, 695, 702, 703, 711, 712, 715, 716, 734, 790, 792, 859, 873, 894, 895, 896, 953, 954, 991, 1009, 1010, 1024, 1025, 1030, 1042, 1045], "proper": [27, 55, 188, 217, 368, 386, 405, 414, 447, 539, 551, 674, 936, 962, 982, 983, 984, 987, 1002, 1030, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "properli": [4, 13, 25, 55, 129, 156, 255, 315, 368, 378, 380, 384, 388, 413, 899, 900, 901, 902, 903, 904, 905, 976, 1033, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "properti": [12, 25, 158, 159, 201, 216, 246, 285, 310, 360, 366, 369, 373, 380, 382, 397, 404, 405, 407, 409, 412, 414, 416, 417, 422, 440, 443, 449, 450, 451, 462, 463, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 591, 592, 595, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 630, 644, 650, 653, 658, 660, 672, 673, 697, 702, 703, 706, 796, 799, 800, 810, 827, 828, 858, 859, 872, 873, 874, 880, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 979, 982, 983, 984, 987, 988, 990, 993, 997, 1000, 1002, 1003, 1004, 1008, 1014, 1035, 1039, 1040, 1043, 1044, 1047, 1048], "propon": 70, "proport": [15, 26, 40, 127, 147, 185, 199, 206, 212, 228, 238, 263, 286, 290, 293, 346, 348, 366, 375, 405, 407, 409, 411, 412, 414, 415, 436, 437, 444, 467, 472, 513, 547, 548, 553, 555, 557, 558, 559, 560, 561, 562, 581, 582, 586, 589, 625, 630, 656, 657, 664, 665, 666, 672, 673, 674, 676, 694, 699, 710, 797, 798, 799, 800, 813, 816, 825, 845, 856, 857, 873, 899, 900, 901, 904, 905, 907, 909, 911, 913, 925, 976, 986, 987, 990, 993, 1001, 1002, 1003, 1035, 1047], "propos": [57, 78, 79, 283, 375, 380, 382, 392, 394, 407, 409, 414, 419, 420, 448, 473, 533, 605, 606, 674, 675, 676, 856, 857, 983, 986, 990, 1001, 1005, 1037], "proprietari": 1003, "propto": [413, 989], "prorokovi\u0107": 1048, "protect": [381, 384, 953], "protein": 374, "protocol": [987, 1033, 1046, 1047], "protocol_typ": 238, "prototyp": 1012, "prove": [96, 1012], "proven": [260, 981, 985, 1012], "provenc": 311, "provid": [0, 5, 8, 11, 13, 24, 27, 30, 34, 37, 42, 55, 60, 81, 95, 113, 118, 119, 127, 130, 132, 151, 157, 169, 170, 178, 185, 187, 188, 191, 200, 203, 208, 221, 225, 229, 230, 235, 250, 260, 261, 262, 266, 293, 296, 301, 305, 309, 315, 316, 318, 320, 336, 342, 343, 346, 351, 352, 356, 357, 360, 362, 366, 368, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 388, 389, 392, 393, 394, 396, 397, 398, 401, 403, 404, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 428, 435, 438, 440, 441, 442, 444, 445, 447, 448, 450, 457, 458, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 491, 492, 494, 496, 499, 530, 531, 532, 533, 536, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 591, 592, 599, 603, 608, 609, 625, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 688, 692, 697, 709, 732, 738, 739, 761, 771, 775, 785, 789, 791, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 856, 857, 859, 862, 864, 865, 866, 869, 870, 871, 874, 876, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 925, 930, 944, 946, 963, 964, 965, 976, 977, 979, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1012, 1014, 1018, 1021, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "provinc": 311, "provost": [785, 987], "proxi": [168, 169, 412, 855, 1018, 1035], "prun": 386, "prune": [166, 355, 360, 361, 416, 498, 555, 556, 557, 558, 562, 563, 591, 642, 825, 907, 908, 909, 910, 990, 1009, 1010, 1025, 1030, 1033, 1040, 1041], "przybocki": 987, "ps_lsvm_score": 175, "ps_lsvm_time": 175, "pseudo": [200, 302, 382, 411, 419, 438, 450, 452, 460, 467, 468, 469, 471, 472, 473, 474, 531, 559, 560, 561, 625, 632, 637, 639, 640, 644, 645, 650, 651, 658, 659, 660, 661, 675, 689, 693, 799, 800, 808, 810, 848, 855, 891, 892, 896, 899, 900, 901, 904, 935, 936, 983, 999, 1035, 1044], "pseudo_likelihood": 855, "pseudocount": [534, 1038], "psf": [0, 380], "psi": 412, "psi_1": 412, "psi_2": 412, "psi_n": 412, "pspachtholz": [1040, 1041, 1042], "psycholog": [407, 703, 714], "psychometrica": 633, "psychometrika": [688, 692, 984], "pt": [11, 375, 416, 875, 997], "pt_i": 293, "pt_j": 293, "ptocca": 1040, "ptp": 12, "pts_": 11, "pts_test": 11, "pts_train": 11, "pub": [225, 837, 894], "public": [0, 79, 374, 380, 382, 384, 385, 392, 393, 394, 395, 411, 414, 466, 662, 669, 683, 684, 690, 897, 983, 991, 1030, 1035, 1036, 1041, 1042, 1043, 1046], "publica": 1005, "publicli": [380, 1040], "publish": [374, 375, 382, 384, 388, 394, 999, 1008, 1042], "pubu": [213, 232, 289, 337], "pubu_r": 80, "puerta": 1045, "puggioni": 1034, "puhuk": [1044, 1045], "pujalt": 1044, "pulapakura": 1047, "pulchritud": 351, "pulido": 1043, "pulkit": [1038, 1039, 1041], "pull": [70, 318, 367, 378, 383, 394, 395, 1011, 1040], "puls": 377, "punctuat": [415, 586, 587, 589], "puneet": 1037, "puneeth": 1047, "puor": 98, "puor_r": [155, 344], "pure": [80, 81, 86, 183, 199, 394, 407, 471, 477, 494, 555, 556, 557, 558, 562, 563, 564, 703, 713, 783, 792, 907, 908, 909, 910, 997], "pure_emp_cov": 81, "pure_loc": 81, "pure_x": 81, "purepremium": 217, "puriti": [113, 911, 913], "purna": 1044, "purpl": [78, 92, 224], "purport": 1037, "purpos": [9, 12, 37, 86, 122, 127, 163, 213, 214, 215, 220, 222, 236, 248, 250, 256, 257, 338, 339, 346, 351, 352, 362, 375, 380, 382, 393, 394, 395, 397, 400, 404, 407, 408, 412, 414, 415, 416, 417, 636, 821, 822, 859, 984, 987, 988, 990, 993, 1005, 1007, 1014, 1042, 1044], "pursu": 169, "pursuit": [54, 96, 98, 104, 166, 177, 218, 273, 412, 472, 524, 529, 535, 540, 546, 662, 663, 683, 684, 1009, 1010, 1025, 1030], "push": [27, 380, 384, 405, 1011], "pushd": 388, "put": [40, 58, 140, 151, 153, 233, 240, 245, 299, 307, 319, 330, 343, 348, 368, 382, 384, 385, 388, 417, 441, 445, 457, 513, 612, 645, 659, 794, 876, 880, 888, 901, 902, 903, 904, 905, 926, 977, 984, 986, 987, 988, 994, 997, 1015, 1017, 1023], "putnam": 1036, "putschblo": 1043, "pvalu": [590, 593, 594, 596, 597, 598, 824], "pvalue_iri": 266, "pvalue_rand": 266, "pvalues_": [144, 590, 593, 594, 596, 597, 598, 1030], "pvnguyen": 1034, "pwalchessen": 1042, "pwd": 388, "px": [117, 261], "pxd": 380, "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 367, 378, 380, 381, 384, 386, 388, 394, 397, 415, 418, 438, 442, 452, 459, 496, 528, 642, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 874, 878, 931, 987, 1007, 1009, 1021, 1023, 1030, 1032, 1036, 1040, 1044], "py3": 397, "py39": 397, "pyamg": [46, 397, 400, 407, 450, 460, 689, 693], "pyarrow": [397, 400], "pybrain": 1030, "pycon": 1006, "pydata": [4, 388, 1006, 1012], "pydata_2013": 1012, "pydebug": 386, "pyflak": 382, "pyfunc": [697, 990], "pyfuncdist": 697, "pymc": 1007, "pynndesc": 283, "pynndescenttransform": 283, "pyodid": [380, 955], "pyoxid": 1043, "pypi": [367, 378, 380, 382, 384, 386, 397, 1003, 1038, 1042, 1044, 1045, 1047], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 380, 387, 436, 500, 629, 630, 695, 696, 698, 699, 700, 802, 818, 1018, 1019, 1020, 1021, 1022, 1027, 1044], "pyplpt": 374, "pyproject": 384, "pypy3": 1038, "pysniak": 1033, "pystruct": [392, 1007], "pytabl": 374, "pytb": 388, "pytest": [315, 367, 378, 380, 382, 383, 397, 400, 403, 930, 931, 1040, 1043], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 368, 374, 378, 380, 381, 382, 383, 384, 385, 388, 389, 392, 394, 397, 400, 403, 408, 415, 494, 506, 507, 579, 697, 807, 873, 955, 987, 997, 1002, 1003, 1005, 1008, 1011, 1012, 1014, 1015, 1017, 1023, 1025, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047], "python2": 1038, "python3": [378, 397], "python37": 397, "pythonsoftwarefound": 397, "pythonx": 378, "pytorch": [6, 392, 1007, 1008, 1019, 1046, 1047], "pytorch_enable_mps_fallback": 403, "pyx": [380, 381, 386, 388], "p\u00e9rez": 1038, "p\u00f6lsterl": [1037, 1040, 1043], "q": [12, 71, 85, 124, 199, 318, 404, 407, 412, 935, 983, 1002], "q1": 507, "q327": 377, "q_": 1002, "q_m": 1003, "q_max": [877, 889], "q_min": [877, 889], "qaiser": 1047, "qda": [31, 377, 547, 548, 1010, 1025, 1035], "qdeffens": [1040, 1043], "qemu": 388, "qi": [507, 1042], "qian": [1036, 1041], "qiang": 1034, "qianm": 1042, "qid": [485, 506, 507, 1031, 1036], "qimu": 1036, "qin": [0, 1, 306, 377, 415, 1037, 1038, 1039, 1040, 1041], "qingi": 1038, "qinhanmin2005": 306, "qizhi": 1041, "qmarcou": 1047, "qn": 507, "qp": 1002, "qr": [46, 201, 403, 532, 539, 542, 935, 936, 984, 1036, 1047], "qt": [309, 876], "qtconsol": 386, "quad": [417, 990, 1001], "quadcontourset": 629, "quadmesh": 629, "quadrant": 305, "quadrat": [4, 9, 29, 33, 35, 80, 81, 82, 156, 160, 166, 213, 238, 250, 262, 318, 406, 438, 456, 459, 547, 548, 621, 629, 646, 656, 657, 667, 674, 678, 714, 904, 905, 983, 984, 987, 990, 993, 997, 1001, 1002, 1009, 1010, 1025, 1031], "quadraticdiscriminantanalysi": [31, 34, 547, 981, 988, 990, 1030, 1035, 1037, 1045], "quadro": 1043, "quadv": 1044, "qualifi": 385, "qualit": [5, 6, 53, 55, 61, 117, 124, 199, 320, 375, 407, 437, 699, 1019, 1045], "qualiti": [0, 6, 20, 24, 37, 46, 48, 49, 58, 98, 120, 127, 169, 205, 254, 258, 267, 268, 269, 342, 380, 388, 392, 394, 401, 402, 406, 407, 409, 412, 450, 460, 467, 472, 555, 556, 557, 558, 562, 563, 740, 810, 891, 892, 907, 908, 909, 910, 936, 982, 984, 992, 999, 1003, 1007, 1008, 1012, 1018, 1019, 1025], "quang": 1041, "quansight": 0, "quantifi": [4, 37, 49, 78, 156, 217, 267, 382, 394, 402, 406, 571, 862, 982, 995, 997, 1025], "quantil": [44, 53, 63, 91, 111, 113, 166, 177, 218, 256, 305, 308, 309, 392, 414, 436, 437, 456, 517, 550, 558, 560, 655, 668, 720, 742, 745, 747, 822, 864, 876, 877, 878, 888, 889, 987, 997, 1009, 1010, 1025, 1030, 1034, 1037, 1039, 1043, 1044, 1046, 1048], "quantile_list": 13, "quantile_rang": [305, 877, 889, 1036], "quantile_regress": 201, "quantile_transform": [75, 876, 887, 997, 1037, 1038, 1039, 1048], "quantileregressor": [318, 983, 987, 1043, 1044, 1045], "quantiles_": [876, 997, 1040], "quantiletransform": [75, 170, 309, 408, 463, 875, 888, 977, 997, 1037, 1038, 1039, 1040, 1041, 1046, 1048], "quantiletransformerquantiletransform": 170, "quantit": [4, 5, 6, 13, 25, 61, 124, 127, 135, 148, 256, 274, 377, 1019], "quantiti": [12, 121, 260, 267, 317, 366, 394, 407, 414, 719, 720, 721, 782, 855, 976, 978, 981, 983, 1035], "quantiz": [6, 36, 46, 58, 68, 98, 166, 374, 375, 407, 441, 445, 447, 504, 776, 864, 961, 997, 1009], "quantum": 985, "quartil": 877, "quartimax": [530, 1042], "quasi": [382, 856, 857, 983], "quazi": [1037, 1038], "queensland": 377, "quentin": [1037, 1038, 1039, 1046, 1047], "queqichao": 1034, "queri": [178, 286, 296, 366, 384, 413, 418, 442, 444, 448, 455, 550, 608, 609, 626, 642, 643, 723, 753, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 987, 990, 1003, 1007, 1011, 1032, 1034, 1035, 1038], "query_id": [485, 506, 507], "query_radiu": [839, 840], "question": [0, 138, 168, 260, 346, 369, 379, 380, 385, 388, 411, 414, 828, 901, 904, 983, 986, 987, 993, 1005, 1012], "queue": [8, 990, 1033], "quick": [4, 100, 241, 380, 382, 386, 397, 604, 825, 987, 988, 997, 1012, 1021, 1027], "quicker": 986, "quickest": 378, "quickli": [39, 239, 300, 315, 377, 380, 381, 411, 414, 690, 775, 983, 990, 991, 1012, 1023, 1041], "quinlan": 1003, "quinonez": 1038, "quintana": 987, "quiroz": [37, 57, 117, 127, 178, 183, 238, 261, 263, 310, 351, 352, 353], "quit": [4, 13, 27, 53, 57, 86, 114, 138, 148, 169, 170, 197, 217, 268, 278, 318, 351, 366, 385, 393, 407, 415, 982, 984, 989, 1012, 1038], "quiver": 97, "quot": [12, 13, 15, 70, 261, 351, 352, 367, 374, 375, 378, 384, 403, 406, 486, 487, 494, 987, 999, 1002, 1023, 1045], "quota": [1043, 1044], "quotat": 375, "quotient": 987, "r": [0, 8, 10, 11, 12, 13, 14, 24, 25, 26, 27, 39, 43, 65, 75, 78, 79, 80, 81, 86, 95, 102, 105, 111, 114, 115, 120, 124, 125, 126, 135, 144, 152, 153, 154, 158, 159, 160, 163, 164, 169, 181, 183, 184, 188, 199, 206, 209, 217, 225, 231, 234, 245, 248, 251, 259, 260, 263, 265, 266, 267, 270, 273, 275, 281, 285, 286, 290, 294, 296, 311, 319, 340, 342, 353, 362, 375, 377, 381, 384, 392, 394, 404, 405, 407, 409, 410, 411, 412, 414, 415, 424, 430, 435, 444, 449, 451, 463, 467, 472, 476, 480, 481, 482, 496, 502, 511, 518, 532, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 586, 587, 588, 589, 604, 607, 608, 609, 625, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 683, 684, 690, 694, 714, 719, 720, 721, 725, 727, 778, 782, 785, 796, 810, 813, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 848, 849, 850, 856, 857, 870, 875, 887, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 912, 953, 977, 979, 981, 983, 984, 987, 988, 989, 990, 991, 994, 995, 997, 1001, 1002, 1003, 1007, 1023, 1030, 1034, 1037, 1040, 1041, 1042, 1043, 1045, 1047], "r0": [799, 800], "r1": 568, "r11": [199, 217], "r2": [75, 112, 117, 132, 168, 170, 194, 234, 382, 408, 414, 552, 568, 671, 822, 857, 987, 995, 1039], "r2007": 414, "r22": 199, "r25": 217, "r26": 199, "r2_score": [75, 168, 183, 194, 195, 403, 414, 430, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 721, 725, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 976, 987, 1031, 1033, 1039, 1043, 1044, 1048], "r2_score_ard": 183, "r2_score_enet": 183, "r2_score_lasso": 183, "r2_score_nnl": 194, "r2_score_ol": 194, "r2_with_abl": 168, "r2_without_": 168, "r3": 568, "r72": 199, "r73": 217, "r82": 199, "r93": 199, "r_": [11, 104, 212, 213, 246, 267, 289, 290, 337, 343, 348, 407, 705, 987, 1003], "r_0": 976, "r_k": 267, "r_multi": 995, "r_n": [267, 705, 987], "r_regress": [416, 604, 1043, 1044, 1047], "r_squar": 393, "ra": 238, "raamana": [1038, 1039], "rabbit": [319, 321, 997], "raccoon": [53, 98, 412], "raccoon_fac": [53, 98], "race": [169, 322, 375, 494, 1033], "race_hispan": 169, "race_oth": 169, "race_whit": 169, "rachel": [1042, 1045], "rachelcjordan": 1041, "rachez": [1035, 1036], "rachit": [1036, 1042, 1045], "rachum": 1042, "radar": 1012, "radford": 983, "radhakrishnan": 1038, "radial": [5, 100, 151, 156, 158, 338, 342, 372, 450, 620, 689, 985, 1002, 1025], "radian": [296, 697, 761], "radii": [839, 840], "radiu": [148, 275, 290, 338, 377, 407, 440, 448, 686, 761, 778, 839, 840, 841, 842, 843, 847, 849, 850, 851, 853, 990, 1032, 1034, 1044, 1047], "radius1": 66, "radius2": 66, "radius3": 66, "radius4": 66, "radius_neighbor": [319, 847, 849, 850, 851, 1034, 1039, 1040, 1042, 1043, 1044, 1045], "radius_neighbors_graph": [407, 418, 442, 841, 842, 843, 845, 847, 849, 850, 851, 852, 990, 1034, 1039, 1042], "radiusneighborsclassifi": [319, 841, 842, 847, 850, 988, 990, 1030, 1032, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "radiusneighborsregressor": [319, 841, 842, 847, 849, 988, 990, 1030, 1032, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "radiusneighborstransform": [315, 843, 990, 1040, 1042, 1044, 1045], "radostin": [1038, 1039], "raduspaimoc": 1041, "raf": 1039, "rafael": [1012, 1031, 1032, 1034, 1037], "rafal": [1045, 1046], "rafei": 1042, "raff": 1033, "raffaello": 1039, "rafiqu": [1038, 1039], "raghav": [0, 2, 264, 305, 1034, 1035, 1036, 1037, 1038, 1042], "raghavan": [412, 588, 834, 838, 985, 987, 989], "raghu": [407, 440], "raghunathan": [1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "raghuv": [1045, 1046], "raghuwanshi": 1044, "rah": 639, "rahiel": 1034, "rahil": [1044, 1045, 1046, 1047], "rahimi": [639, 979], "rahmaan": 1040, "rahman": [1037, 1038, 1042], "rahn": [1037, 1040], "rahul": [1042, 1047], "rai": [0, 2, 955, 987, 1030, 1040, 1042, 1043], "raimundo": 1038, "rain": [4, 13, 170, 983], "rainbow": [24, 222], "rainfal": 983, "rais": [109, 200, 235, 236, 263, 309, 318, 380, 382, 384, 385, 386, 389, 392, 394, 398, 401, 408, 411, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 507, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 575, 579, 580, 586, 587, 588, 589, 591, 592, 600, 601, 608, 609, 615, 627, 630, 633, 634, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 694, 696, 700, 707, 709, 710, 711, 712, 724, 726, 727, 735, 775, 779, 780, 781, 784, 785, 786, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 810, 814, 818, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 848, 849, 850, 854, 856, 857, 858, 859, 862, 863, 864, 865, 866, 871, 872, 873, 877, 878, 879, 886, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 917, 919, 920, 922, 923, 940, 944, 948, 971, 972, 973, 974, 987, 997, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "raise_except": 973, "raise_warn": [263, 710, 973], "raj": 1047, "rajagopalan": [0, 2, 1038, 1042], "rajaona": [1036, 1037], "rajat": [1033, 1040], "rajborirug": 238, "rajdeep": 1039, "rajendra": 1038, "raji": [1045, 1046], "rakotoarison": [1037, 1038, 1040], "ralf": [1033, 1036, 1037, 1045, 1046], "ralph": 1048, "ram": [17, 53, 368, 414, 891, 892, 989, 1002, 1023, 1036, 1042, 1045, 1046], "ramakrishnan": [407, 440], "ramana": [1036, 1037], "ramanath": 1035, "ramesh": [375, 1012, 1033, 1036, 1040], "rameshwar": [1037, 1038], "ramil": [1038, 1039], "rammig": [1012, 1036], "ramo": 1045, "rampin": 1037, "ramyanp": [1042, 1043], "ramzi": 1042, "ram\u00edrez": 987, "rand": [14, 24, 37, 38, 39, 40, 44, 49, 58, 62, 102, 114, 129, 131, 143, 178, 183, 222, 223, 228, 234, 235, 274, 295, 316, 317, 322, 329, 330, 345, 352, 358, 359, 389, 398, 542, 702, 703, 713, 754, 778, 783, 891, 892, 894, 895, 896, 999, 1014, 1030, 1041, 1042], "rand_index": 703, "rand_scor": [37, 407, 713, 987, 1042], "randal": [879, 1034, 1044], "randi": 1036, "randint": [11, 37, 81, 92, 123, 164, 171, 223, 231, 235, 237, 272, 317, 322, 382, 385, 393, 398, 800, 817, 834, 835, 836, 838, 976, 977], "randn": [14, 33, 34, 39, 54, 65, 66, 80, 81, 98, 102, 128, 143, 151, 155, 168, 171, 188, 193, 194, 198, 212, 213, 216, 246, 249, 250, 255, 267, 269, 270, 274, 289, 290, 312, 316, 317, 322, 337, 343, 344, 348, 382, 385, 641, 668, 670, 676, 685, 817, 902, 905], "random": [4, 5, 6, 7, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 71, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 101, 102, 110, 111, 112, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 136, 140, 143, 144, 147, 151, 152, 155, 157, 158, 160, 163, 164, 166, 167, 168, 173, 178, 179, 180, 181, 183, 188, 189, 193, 194, 197, 198, 199, 200, 201, 202, 205, 206, 208, 212, 213, 216, 217, 220, 221, 223, 224, 225, 227, 228, 233, 234, 235, 236, 237, 238, 243, 245, 246, 248, 249, 250, 251, 253, 255, 257, 258, 259, 260, 261, 263, 265, 267, 269, 270, 271, 272, 274, 276, 281, 283, 288, 289, 290, 295, 299, 306, 308, 309, 312, 316, 317, 319, 321, 325, 326, 329, 330, 337, 338, 340, 341, 343, 344, 345, 348, 351, 352, 358, 359, 366, 367, 369, 372, 376, 383, 385, 392, 393, 394, 398, 402, 403, 405, 407, 415, 416, 420, 432, 438, 441, 445, 447, 449, 450, 451, 452, 456, 457, 458, 460, 462, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 486, 487, 488, 489, 490, 493, 494, 495, 500, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 538, 539, 542, 545, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 580, 581, 582, 587, 605, 606, 608, 609, 625, 628, 630, 632, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 656, 658, 659, 660, 661, 668, 669, 670, 674, 675, 676, 677, 685, 687, 688, 689, 690, 691, 692, 693, 699, 702, 703, 706, 728, 740, 778, 785, 790, 794, 795, 796, 798, 799, 800, 801, 808, 810, 811, 812, 813, 814, 815, 816, 817, 824, 825, 830, 832, 833, 834, 835, 836, 838, 839, 840, 844, 848, 855, 856, 857, 859, 862, 864, 873, 876, 880, 888, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 922, 933, 935, 936, 958, 961, 977, 979, 982, 984, 986, 987, 991, 992, 993, 995, 997, 1002, 1003, 1007, 1008, 1009, 1010, 1014, 1018, 1019, 1021, 1022, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "random_": 188, "random_02": 188, "random_05": 188, "random_08": 188, "random_11": 188, "random_cat": [171, 995], "random_choice_csc": 1040, "random_forest": 116, "random_from_data": [248, 794, 795, 986], "random_label": 37, "random_num": [171, 995], "random_offset_": [639, 640], "random_project": [221, 232, 369, 999, 1004, 1031, 1036, 1046, 1047], "random_sampl": [183, 839, 840, 844], "random_se": [10, 92, 120], "random_search": [261, 268], "random_st": [4, 5, 6, 7, 10, 12, 13, 15, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 75, 82, 86, 92, 95, 97, 100, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 138, 144, 145, 147, 151, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 180, 181, 185, 191, 198, 199, 202, 203, 205, 206, 207, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 233, 236, 237, 238, 239, 241, 242, 245, 247, 248, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 278, 281, 283, 286, 287, 291, 292, 293, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 328, 336, 338, 339, 340, 346, 347, 351, 352, 356, 360, 362, 382, 385, 389, 393, 394, 403, 407, 408, 411, 412, 414, 415, 419, 432, 435, 436, 438, 441, 445, 447, 449, 450, 451, 452, 456, 457, 458, 460, 467, 472, 476, 485, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 591, 592, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 630, 631, 632, 633, 636, 637, 638, 639, 640, 644, 645, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 674, 675, 676, 677, 679, 680, 681, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 708, 732, 785, 789, 790, 794, 795, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 818, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 844, 848, 855, 856, 857, 859, 864, 876, 880, 888, 891, 892, 899, 900, 901, 904, 906, 907, 908, 909, 910, 912, 913, 933, 935, 936, 956, 958, 961, 976, 977, 979, 982, 987, 988, 989, 990, 991, 994, 995, 997, 1002, 1003, 1014, 1018, 1019, 1023, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "random_state_": [382, 534, 625, 848, 1044], "random_tre": 564, "random_tree_embed": 116, "random_unlabeled_point": [317, 894, 895, 896], "random_weights_": [639, 640], "randomforest": [10, 120, 366, 414, 907, 908, 1035], "randomforestclassifi": [26, 27, 31, 56, 115, 116, 117, 118, 119, 120, 134, 171, 172, 240, 241, 257, 272, 315, 317, 322, 351, 362, 393, 394, 405, 414, 416, 555, 556, 557, 559, 564, 565, 567, 799, 800, 829, 909, 976, 977, 988, 995, 1012, 1027, 1034, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "randomforestclassifierifittedrandomforestclassifi": [26, 118, 119, 322], "randomforestclassifierinot": 322, "randomforestclassifierrandomforestclassifi": [26, 171, 240, 272], "randomforestregressor": [10, 117, 131, 132, 135, 163, 164, 317, 322, 393, 414, 555, 556, 558, 560, 564, 566, 568, 630, 631, 909, 977, 988, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "randomforestregressorrandomforestregressor": [132, 135], "randomgeek78": 1044, "randomized_range_find": [389, 1031, 1036], "randomized_svd": [17, 389, 449, 451, 530, 539, 542, 544, 1030, 1031, 1036, 1043, 1044, 1045], "randomized_svd_low_rank": 1037, "randomizedlasso": 1037, "randomizedlogisticregress": 1037, "randomizedpca": [1012, 1030, 1032, 1033, 1035, 1036, 1037], "randomizedsearchcv": [6, 71, 151, 261, 268, 317, 362, 393, 398, 573, 976, 987, 1001, 1007, 1019, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1047, 1048], "randomizedsearchcvinot": 71, "randomli": [13, 37, 48, 50, 61, 71, 85, 88, 93, 113, 114, 127, 128, 154, 163, 166, 170, 211, 216, 232, 236, 250, 255, 266, 278, 281, 325, 328, 362, 367, 389, 392, 393, 407, 411, 414, 417, 447, 456, 510, 513, 517, 521, 529, 535, 543, 544, 549, 557, 558, 559, 560, 561, 562, 563, 608, 609, 669, 677, 688, 692, 714, 794, 795, 855, 893, 907, 908, 909, 910, 986, 988, 990, 993, 995, 999, 1003, 1009, 1021, 1023, 1041, 1045, 1047], "randomst": [5, 14, 20, 21, 24, 31, 34, 37, 44, 50, 61, 62, 81, 82, 86, 95, 97, 102, 112, 123, 124, 127, 128, 129, 131, 144, 151, 152, 155, 157, 158, 160, 163, 164, 168, 171, 178, 179, 180, 181, 183, 188, 193, 200, 201, 206, 213, 223, 228, 234, 235, 245, 248, 255, 263, 266, 267, 269, 270, 271, 272, 299, 306, 308, 309, 312, 316, 317, 319, 321, 322, 325, 326, 330, 341, 358, 359, 382, 385, 389, 394, 398, 412, 419, 420, 438, 441, 445, 447, 449, 450, 451, 452, 456, 457, 458, 460, 467, 468, 472, 473, 474, 476, 477, 478, 479, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 581, 582, 605, 606, 608, 609, 625, 630, 632, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 670, 672, 674, 675, 676, 677, 685, 687, 688, 689, 690, 691, 692, 693, 699, 778, 790, 794, 795, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 823, 824, 825, 829, 830, 833, 834, 835, 836, 838, 839, 840, 844, 848, 855, 856, 857, 864, 876, 880, 888, 891, 892, 894, 895, 896, 899, 900, 901, 904, 905, 907, 908, 909, 910, 922, 935, 936, 956, 958, 961, 997, 1014, 1025], "randomtreesembed": [116, 130, 221, 414, 909, 1031, 1038, 1039, 1043, 1044, 1045], "randomtreesembedding_": 564, "randomtreesembeddingrandomtreesembed": 116, "rang": [4, 5, 6, 7, 8, 10, 12, 17, 19, 20, 25, 26, 27, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 55, 60, 61, 63, 64, 78, 79, 81, 82, 111, 113, 114, 115, 118, 124, 127, 131, 143, 147, 152, 169, 170, 175, 183, 188, 189, 193, 197, 199, 200, 203, 206, 207, 215, 217, 221, 223, 231, 232, 237, 238, 245, 247, 250, 251, 255, 259, 260, 261, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 281, 287, 293, 296, 302, 305, 310, 311, 315, 319, 320, 326, 338, 346, 351, 352, 357, 360, 367, 374, 375, 377, 380, 382, 386, 389, 394, 401, 407, 411, 414, 417, 438, 459, 467, 469, 470, 471, 472, 473, 474, 476, 479, 489, 492, 493, 512, 525, 539, 551, 552, 557, 558, 561, 586, 587, 589, 627, 630, 636, 638, 646, 647, 667, 669, 674, 675, 676, 678, 690, 710, 728, 743, 785, 825, 831, 845, 847, 849, 850, 855, 869, 876, 877, 878, 884, 885, 888, 889, 892, 893, 935, 936, 955, 976, 983, 987, 991, 1001, 1008, 1012, 1017, 1018, 1019, 1021, 1035, 1036, 1037, 1038, 1040, 1043, 1046], "range_n_clust": 60, "range_n_outli": 81, "rangeindex": [169, 494], "rangespan": 1005, "rangl": [979, 987, 1001, 1002], "ranjanikrishnan": 1043, "rank": [4, 17, 25, 80, 99, 102, 118, 146, 171, 172, 217, 258, 260, 268, 376, 402, 404, 405, 409, 410, 412, 414, 415, 506, 507, 519, 522, 547, 548, 591, 592, 604, 646, 655, 667, 678, 694, 718, 723, 724, 736, 737, 753, 785, 791, 799, 800, 936, 976, 978, 979, 984, 995, 997, 1012, 1025, 1031, 1036, 1039, 1040, 1044, 1045, 1048], "rank_": 655, "rank_t": 796, "rank_test_": 264, "rank_test_precis": [258, 264], "rank_test_recal": 258, "rank_test_scor": [260, 268, 796, 810, 1036], "rankdata": 1037, "ranked_exposur": [199, 217], "ranked_frequ": 199, "ranked_pure_premium": 217, "ranking_": [146, 591, 592], "rankylau": 1038, "ransac": [80, 166, 177, 205, 216, 218, 522, 647, 655, 669, 676, 677, 1009], "ransacregressor": [202, 205, 216, 398, 647, 676, 677, 983, 988, 1033, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1048], "rao": [411, 1042, 1045], "raphael": 1047, "rapha\u00ebl": 1040, "raphson": [646, 667, 678], "rapid": 1012, "rapidli": [203, 262, 1002, 1012, 1017], "rare": [27, 170, 311, 362, 384, 392, 394, 396, 405, 407, 411, 587, 646, 656, 657, 667, 678, 899, 924, 955, 983, 997, 1012, 1037, 1038, 1039, 1043, 1045], "rarer": [351, 353, 415], "raschka": [310, 1035, 1036, 1037, 1038, 1039, 1042], "rashchedrin": 1037, "rasmu": [175, 1037], "rasmussen": [417, 608, 609, 612, 617, 620], "raspberri": 397, "raster": 70, "rastgoo": 1047, "rastogi": 1038, "rastrojo": 703, "rasul": [1035, 1037, 1038], "rat": [11, 296, 375, 496], "rate": [4, 111, 115, 121, 127, 143, 170, 199, 206, 217, 232, 238, 257, 260, 267, 269, 270, 300, 301, 302, 368, 380, 407, 408, 412, 416, 444, 464, 534, 551, 552, 557, 558, 559, 560, 590, 593, 594, 596, 597, 598, 604, 642, 643, 666, 674, 675, 676, 690, 696, 700, 724, 779, 786, 855, 856, 857, 893, 976, 983, 984, 987, 990, 991, 1001, 1003, 1012, 1034, 1038, 1039], "rather": [12, 27, 53, 82, 111, 114, 127, 163, 169, 199, 200, 213, 238, 309, 310, 351, 352, 362, 367, 376, 378, 380, 382, 385, 386, 388, 392, 393, 394, 395, 407, 411, 412, 414, 415, 417, 446, 459, 461, 563, 579, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 627, 644, 645, 650, 651, 658, 659, 660, 661, 778, 810, 830, 832, 833, 862, 899, 900, 911, 936, 981, 983, 984, 987, 989, 990, 994, 1008, 1018, 1021, 1030, 1031, 1032, 1033, 1037, 1038, 1039, 1040, 1045, 1046], "ratio": [7, 53, 66, 73, 103, 166, 232, 234, 248, 253, 276, 366, 380, 407, 409, 411, 414, 448, 454, 491, 492, 513, 539, 547, 548, 549, 629, 656, 708, 710, 714, 722, 727, 733, 736, 779, 780, 781, 784, 792, 822, 825, 845, 892, 956, 981, 993, 1003, 1009, 1019, 1045, 1047], "ration": [156, 621, 985], "rationalquadrat": [156, 160, 417, 614], "raton": 983, "raul": [1032, 1033], "rausch": [328, 330, 1038, 1039, 1042], "rauscho": [328, 330], "rauwuckl": 1042, "ravel": [5, 14, 17, 19, 26, 42, 53, 54, 58, 80, 104, 112, 114, 120, 124, 130, 131, 132, 140, 151, 153, 155, 156, 157, 158, 169, 178, 189, 190, 192, 199, 212, 213, 221, 225, 228, 232, 234, 238, 242, 247, 249, 263, 267, 269, 283, 288, 289, 295, 296, 299, 300, 301, 302, 307, 308, 319, 330, 338, 343, 344, 345, 347, 348, 351, 358, 359, 463, 491, 492, 493, 629, 716, 974, 987, 1046], "ravi": [1042, 1045], "raw": [4, 12, 15, 37, 81, 97, 132, 156, 169, 175, 302, 312, 327, 353, 366, 375, 382, 388, 394, 405, 406, 407, 409, 412, 415, 467, 472, 499, 500, 501, 557, 558, 559, 561, 580, 586, 587, 588, 589, 632, 675, 688, 692, 703, 783, 845, 903, 984, 987, 991, 993, 994, 997, 1000, 1020, 1022, 1031, 1035, 1038, 1041, 1047], "raw_coef_": [899, 900], "raw_covariance_": [409, 467, 472], "raw_data": 353, "raw_docu": [586, 589], "raw_location_": [409, 467, 472], "raw_model": 312, "raw_pixel_classifi": 302, "raw_support_": [467, 472], "raw_target_regr": 408, "raw_valu": [719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 987, 1038, 1041], "raw_x": [415, 580], "raytheon": 12, "raz": 1044, "razor": 1021, "ra\u00fal": 1039, "rb": 8, "rbf": [5, 6, 7, 10, 11, 30, 31, 100, 133, 140, 151, 152, 153, 155, 156, 157, 158, 160, 166, 175, 213, 227, 228, 234, 243, 258, 260, 262, 265, 274, 275, 278, 289, 290, 328, 330, 333, 335, 344, 345, 349, 372, 408, 412, 414, 450, 460, 500, 502, 533, 539, 608, 609, 610, 611, 614, 616, 617, 618, 619, 621, 622, 629, 637, 638, 639, 640, 641, 674, 689, 762, 771, 773, 796, 807, 810, 816, 859, 879, 894, 895, 899, 901, 902, 903, 904, 905, 976, 979, 980, 982, 984, 987, 993, 997, 1000, 1009, 1014, 1019, 1025, 1036, 1041], "rbf_featur": [639, 979], "rbf_kernel": [762, 985, 1034], "rbf_svc": [330, 1002], "rbfsampler": [233, 637, 638, 640, 979, 1014, 1034, 1044, 1045], "rbm": [302, 855, 856, 857, 992], "rbm_features_classifi": 302, "rc": [213, 384], "rc1": 384, "rceil": [404, 993], "rcond": 104, "rcparam": [8, 228, 233, 312], "rcv1": [373, 495, 1025, 1035], "rcwoolston": 1041, "rd": 415, "rda": 377, "rdbu": [31, 34, 95, 215, 299, 338, 343], "rdbu_r": [54, 82, 105, 338], "rdownload": 8, "rdylbu": [120, 357], "re": [4, 8, 14, 26, 27, 56, 70, 71, 111, 121, 154, 168, 169, 217, 235, 246, 250, 263, 265, 269, 316, 351, 353, 367, 380, 381, 384, 388, 393, 395, 398, 405, 411, 415, 467, 468, 469, 470, 471, 472, 473, 474, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 644, 650, 658, 660, 798, 813, 816, 907, 908, 909, 910, 983, 988, 990, 997, 1002, 1008, 1012, 1023, 1030, 1034, 1035, 1037, 1039], "reach": [61, 117, 122, 148, 199, 201, 215, 217, 262, 319, 338, 360, 385, 395, 397, 407, 412, 416, 448, 455, 506, 507, 591, 592, 625, 642, 643, 644, 645, 650, 651, 652, 653, 654, 658, 659, 660, 661, 664, 665, 666, 674, 675, 676, 677, 679, 680, 681, 682, 726, 727, 780, 794, 795, 856, 857, 896, 976, 987, 991, 1001, 1003, 1012, 1041, 1045, 1046, 1047], "reachability_": [65, 407, 448, 453, 454, 455], "reachabl": [55, 65, 444, 448, 453, 454, 455, 845, 941], "reactiv": 386, "read": [8, 13, 17, 95, 220, 267, 315, 316, 317, 319, 321, 366, 374, 381, 382, 383, 384, 385, 387, 388, 392, 393, 394, 407, 418, 419, 420, 421, 424, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 614, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 932, 976, 983, 987, 988, 1007, 1012, 1023, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1047, 1048], "read_byt": 8, "read_csv": [12, 385, 494, 1045], "read_csv_kwarg": [494, 1046], "readabl": [82, 261, 318, 385, 386, 388, 401, 532, 1039, 1042, 1043, 1044, 1045], "reader": [6, 42, 318, 368, 380, 1019], "readi": [4, 7, 156, 200, 375, 384, 388], "readili": [319, 412, 1003, 1012], "readm": [388, 415, 491], "readonli": [899, 900, 1043, 1045, 1046], "readonly_memmap": 1047, "readthedoc": 394, "real": [13, 16, 31, 34, 55, 57, 70, 74, 78, 80, 81, 82, 111, 127, 154, 169, 203, 224, 228, 238, 254, 266, 274, 287, 290, 306, 307, 337, 342, 353, 366, 369, 373, 374, 377, 384, 386, 389, 392, 393, 394, 404, 405, 407, 409, 411, 412, 414, 415, 467, 487, 488, 491, 492, 493, 494, 495, 498, 499, 502, 508, 549, 550, 551, 553, 554, 555, 556, 557, 558, 562, 563, 590, 592, 593, 594, 595, 596, 597, 598, 629, 697, 702, 721, 725, 749, 752, 754, 782, 792, 824, 856, 857, 901, 902, 903, 904, 905, 908, 910, 977, 978, 979, 984, 987, 989, 991, 992, 993, 1003, 1006, 1009, 1025, 1030, 1043, 1047], "real_cov": [78, 79, 420, 468, 471, 472, 473, 474, 477, 478, 479], "real_data": 287, "realist": [4, 8, 262, 269, 270, 335, 375, 987], "realiti": 376, "realiz": [199, 1012], "realli": [78, 171, 188, 384, 385, 386, 987, 993, 1012, 1044], "reappli": 414, "rearrang": [20, 21, 404], "reason": [4, 8, 12, 27, 42, 53, 70, 124, 127, 148, 169, 170, 175, 199, 200, 207, 217, 228, 232, 233, 235, 238, 257, 260, 261, 266, 278, 283, 306, 310, 352, 353, 362, 366, 367, 368, 375, 379, 380, 382, 384, 388, 392, 393, 394, 395, 407, 408, 409, 412, 414, 415, 506, 530, 572, 636, 644, 650, 652, 670, 685, 690, 760, 796, 810, 843, 848, 855, 874, 896, 976, 977, 982, 983, 984, 987, 989, 990, 991, 993, 997, 1001, 1002, 1012, 1023, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "reassign": [50, 380, 445, 447, 1031, 1035], "reassignment_ratio": 447, "rebalanc": 394, "rebas": 384, "rebecca": 1037, "rebekah": [1038, 1039, 1040], "reboul": 1040, "rebuild": [366, 378, 401, 415, 440], "rebuilt": [32, 378, 839, 840], "rec": [19, 353, 375, 639], "rec_l1": 14, "rec_l2": 14, "rec_macro": 411, "recal": [6, 25, 32, 70, 82, 100, 145, 166, 229, 238, 253, 258, 276, 278, 302, 325, 326, 380, 394, 407, 502, 602, 698, 704, 705, 706, 710, 711, 724, 726, 727, 728, 779, 780, 781, 784, 785, 825, 828, 860, 879, 883, 899, 983, 1003, 1009, 1019, 1023, 1033, 1034, 1037, 1039, 1040, 1042, 1043, 1044, 1046, 1047], "recalcul": [239, 241, 407, 1027, 1030], "recall_macro": [411, 987], "recall_scor": [25, 267, 411, 706, 781, 987, 1030, 1032, 1033, 1034, 1035, 1040, 1046], "recant": 395, "receiv": [0, 19, 138, 166, 229, 235, 241, 253, 255, 257, 262, 267, 276, 328, 353, 362, 380, 382, 388, 394, 411, 414, 502, 656, 700, 704, 706, 724, 779, 785, 786, 815, 825, 827, 828, 866, 904, 988, 991, 992, 1001, 1009, 1040, 1041], "recent": [13, 201, 235, 369, 378, 381, 385, 388, 394, 407, 466, 536, 563, 1001, 1012, 1033, 1042], "recherch": 0, "recht": [639, 979], "recip": [384, 984, 1012], "reciproc": [376, 987], "reckon": 375, "recogn": [4, 5, 29, 35, 51, 53, 86, 89, 98, 119, 146, 166, 200, 254, 287, 318, 325, 326, 386, 398, 407, 415, 500, 695, 711, 825, 904, 987, 1009, 1014, 1047], "recognit": [3, 9, 15, 16, 48, 95, 166, 234, 237, 302, 310, 351, 373, 385, 412, 414, 416, 492, 500, 530, 532, 539, 695, 706, 711, 738, 766, 785, 786, 794, 810, 825, 879, 904, 979, 983, 987, 988, 992, 1002, 1004, 1009, 1014, 1017, 1025, 1030], "recommend": [86, 119, 163, 216, 229, 235, 256, 269, 309, 317, 342, 366, 367, 369, 374, 378, 380, 382, 386, 388, 392, 397, 410, 411, 412, 414, 416, 436, 445, 447, 449, 458, 494, 506, 533, 536, 542, 547, 559, 560, 567, 580, 581, 587, 604, 609, 629, 630, 636, 668, 674, 690, 695, 696, 698, 700, 802, 808, 810, 818, 855, 862, 864, 871, 878, 879, 884, 885, 887, 888, 889, 890, 892, 901, 904, 936, 955, 976, 984, 987, 989, 991, 994, 997, 999, 1001, 1002, 1003, 1006, 1012, 1025, 1032, 1033, 1039, 1040, 1041, 1042, 1044, 1046], "recompil": [381, 386, 397], "recomput": [55, 56, 239, 241, 285, 315, 467, 472, 983, 999, 1035, 1046], "reconstruct": [3, 16, 17, 20, 66, 95, 96, 100, 166, 198, 223, 224, 319, 412, 415, 480, 481, 482, 529, 531, 533, 535, 536, 537, 538, 540, 541, 543, 544, 546, 581, 585, 650, 670, 686, 687, 691, 891, 892, 983, 984, 1009, 1044], "reconstruct_from_patches_2d": [98, 415, 581], "reconstruction_err_": [536, 538], "reconstruction_error": 686, "reconstruction_error_": 687, "record": [11, 96, 115, 127, 171, 235, 311, 353, 366, 380, 407, 409, 448, 455, 496, 618, 641, 690, 768, 771, 775, 776, 777, 778, 822, 845, 1043, 1044], "recov": [40, 65, 82, 96, 97, 102, 121, 151, 168, 183, 198, 199, 203, 220, 353, 409, 413, 416, 419, 458, 531, 557, 983, 984, 986, 1008, 1022, 1036], "recoveri": [12, 82, 183, 198, 409, 416], "recreat": [48, 239], "recreate_imag": 48, "rect": [8, 52, 178], "rect_colorbar": 305, "rect_histi": 305, "rect_histx": 305, "rect_scatt": 305, "rectangl": 8, "rectangular": [375, 394, 936, 1008], "rectifi": [856, 857], "recurs": [13, 32, 51, 89, 91, 128, 138, 142, 145, 148, 149, 166, 255, 258, 259, 263, 265, 287, 325, 326, 328, 356, 382, 406, 407, 411, 438, 439, 440, 443, 461, 500, 513, 561, 591, 592, 595, 600, 630, 631, 656, 815, 904, 987, 990, 993, 994, 1003, 1009, 1010, 1022, 1025, 1030, 1040, 1041], "red": [9, 10, 11, 26, 33, 34, 60, 80, 92, 95, 96, 97, 114, 132, 135, 160, 175, 178, 179, 189, 197, 225, 239, 255, 266, 296, 300, 306, 310, 311, 327, 338, 359, 378, 394, 407, 412, 988], "reda": 1036, "redden": 1041, "reddi": [1037, 1038, 1039, 1044, 1047], "redefin": [20, 124, 169], "redesign": [392, 1030], "redirects_en": 17, "redirects_filenam": 17, "redirects_url": 17, "redistribut": 440, "redo": 352, "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 72, 78, 114, 124, 126, 127, 130, 145, 169, 178, 179, 183, 197, 203, 204, 207, 230, 232, 235, 238, 261, 267, 278, 292, 307, 310, 311, 320, 352, 353, 362, 372, 374, 377, 380, 386, 392, 394, 405, 406, 407, 409, 411, 412, 414, 415, 416, 418, 442, 443, 448, 455, 458, 491, 532, 542, 547, 553, 554, 555, 556, 561, 562, 563, 564, 571, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 625, 641, 650, 670, 671, 672, 673, 685, 690, 693, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 826, 868, 869, 876, 888, 891, 892, 899, 900, 907, 908, 909, 910, 976, 979, 981, 982, 983, 984, 987, 990, 999, 1000, 1002, 1004, 1014, 1022, 1030, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1046, 1048], "reduce_dim": [72, 240, 259, 408], "reduce_dim__k": 72, "reduce_dim__n_compon": [72, 259, 408], "reduce_func": [778, 1041], "reduced_data": 58, "reducer_label": 72, "reduct": [6, 19, 33, 54, 57, 69, 73, 76, 86, 95, 99, 103, 114, 130, 166, 219, 221, 222, 225, 226, 232, 236, 259, 284, 291, 293, 297, 319, 335, 362, 366, 372, 406, 407, 408, 410, 412, 414, 416, 466, 480, 481, 482, 483, 500, 528, 530, 532, 533, 536, 537, 538, 539, 542, 545, 547, 551, 552, 555, 556, 557, 558, 562, 563, 564, 597, 605, 656, 657, 686, 687, 688, 689, 690, 691, 778, 796, 825, 841, 848, 855, 859, 860, 869, 879, 897, 899, 907, 908, 909, 910, 979, 984, 999, 1003, 1008, 1009, 1010, 1012, 1019, 1025, 1031, 1032, 1033, 1036, 1044, 1045, 1046], "redund": [25, 27, 105, 147, 246, 251, 322, 362, 376, 379, 380, 385, 394, 405, 513, 632, 1008, 1023, 1042], "redundantli": 394, "ref": [380, 388, 977, 1036], "ref_lin": 436, "refactor": [319, 1030, 1032, 1033, 1034, 1040, 1043, 1044, 1045], "refer": [4, 37, 38, 60, 63, 71, 90, 125, 127, 132, 148, 160, 217, 235, 238, 267, 286, 293, 305, 315, 316, 317, 318, 319, 320, 321, 322, 352, 367, 369, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 397, 398, 401, 408, 410, 411, 418, 419, 420, 435, 436, 437, 438, 440, 442, 444, 445, 446, 448, 449, 450, 451, 452, 455, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 496, 501, 509, 511, 513, 514, 515, 516, 517, 518, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 542, 545, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 588, 591, 592, 593, 600, 605, 606, 608, 609, 612, 617, 620, 621, 625, 626, 629, 630, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 645, 647, 649, 651, 653, 654, 656, 659, 661, 663, 664, 665, 666, 669, 671, 673, 674, 676, 677, 680, 681, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 702, 703, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 731, 732, 733, 734, 735, 737, 738, 740, 753, 755, 756, 766, 780, 782, 783, 785, 786, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 829, 830, 834, 835, 836, 838, 841, 844, 845, 846, 848, 855, 856, 857, 859, 864, 865, 866, 868, 869, 871, 872, 873, 875, 876, 877, 879, 880, 887, 892, 893, 894, 895, 896, 897, 899, 901, 902, 904, 905, 907, 908, 909, 910, 924, 936, 953, 989, 991, 998, 1003, 1008, 1011, 1014, 1018, 1022, 1023, 1030, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "referenc": [377, 380, 382, 388, 394, 891, 892, 990, 1037, 1043], "references_": 876, "refin": [25, 82, 470, 707, 987, 1023], "refit": [118, 138, 145, 147, 166, 229, 253, 259, 261, 264, 267, 268, 272, 276, 394, 411, 417, 500, 565, 625, 657, 663, 711, 796, 799, 800, 810, 825, 904, 976, 983, 987, 1009, 1037, 1038, 1039, 1048], "refit_strategi": 258, "refit_time_": [796, 799, 800, 810, 1038], "reflect": [12, 40, 46, 47, 80, 92, 96, 121, 170, 171, 199, 217, 269, 287, 352, 376, 379, 384, 394, 396, 404, 448, 454, 984, 987, 993, 995, 1022, 1031, 1039, 1048], "reformul": 379, "refrain": [200, 380], "refug": 65, "refurbish": 406, "refus": [392, 889, 890], "reg": [125, 169, 179, 235, 306, 316, 343, 414, 556, 558, 566, 648, 649, 651, 652, 653, 654, 655, 661, 662, 663, 668, 669, 676, 677, 687, 691, 910, 983, 1035], "reg1": [135, 414], "reg2": [135, 414], "reg3": [135, 414], "reg_covar": [245, 794, 795], "reg_nnl": 194, "reg_ol": 194, "reg_param": 548, "regard": [0, 5, 7, 11, 13, 53, 55, 71, 90, 100, 139, 151, 156, 170, 171, 188, 196, 201, 222, 234, 238, 262, 269, 270, 286, 352, 375, 376, 380, 381, 385, 392, 394, 401, 406, 407, 412, 414, 415, 417, 441, 445, 450, 457, 460, 499, 612, 617, 654, 656, 699, 740, 795, 802, 818, 823, 841, 842, 980, 983, 987, 989, 990, 992, 994, 1001, 1002, 1003, 1016, 1023, 1037, 1040], "regardless": [217, 261, 262, 263, 367, 380, 407, 533, 630, 631, 656, 702, 713, 987, 999, 1038, 1045, 1046], "regedit": 397, "regener": 864, "regex": [260, 353, 462, 464], "regexp": [586, 587, 589], "regim": [4, 394, 899, 900, 986], "region": [12, 17, 21, 25, 36, 47, 48, 49, 53, 56, 66, 68, 98, 133, 158, 166, 169, 199, 217, 228, 232, 233, 251, 308, 338, 346, 377, 387, 394, 407, 414, 417, 446, 448, 454, 460, 585, 984, 987, 990, 993, 997, 1001, 1003, 1009, 1022], "region_1": 311, "region_2": 311, "regist": [183, 351, 386, 955, 957], "register_parallel_backend": [955, 1038, 1048], "register_rai": 955, "registri": [378, 397, 1007], "regr": [195, 408, 552, 554, 563, 644, 645, 665, 832, 857, 900, 902, 905, 1002, 1021], "regr_1": [112, 358, 359], "regr_2": [112, 358, 359], "regr_3": 359, "regr_multirf": 131, "regr_rf": 131, "regress": [7, 10, 14, 24, 25, 27, 30, 45, 54, 69, 71, 76, 80, 81, 84, 87, 90, 96, 97, 98, 103, 105, 110, 111, 114, 116, 117, 118, 119, 122, 123, 126, 127, 131, 132, 136, 139, 143, 148, 150, 152, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 177, 181, 183, 184, 185, 186, 189, 193, 194, 196, 200, 202, 203, 204, 205, 208, 210, 215, 218, 223, 227, 229, 237, 238, 239, 242, 243, 256, 268, 271, 273, 274, 281, 284, 286, 291, 294, 297, 300, 301, 302, 305, 306, 309, 310, 312, 317, 318, 319, 320, 322, 333, 334, 335, 346, 349, 351, 355, 356, 360, 361, 367, 368, 369, 372, 373, 375, 377, 380, 382, 385, 388, 389, 392, 393, 394, 402, 405, 409, 410, 411, 412, 414, 416, 430, 435, 462, 463, 472, 482, 487, 488, 490, 494, 499, 500, 502, 503, 510, 514, 515, 516, 522, 526, 529, 533, 535, 537, 539, 540, 541, 543, 544, 546, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 568, 569, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 607, 608, 609, 612, 613, 620, 621, 623, 629, 630, 631, 632, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 699, 704, 719, 720, 721, 725, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 782, 787, 788, 796, 799, 800, 802, 810, 818, 822, 823, 825, 826, 830, 832, 833, 841, 842, 847, 849, 850, 856, 857, 859, 860, 863, 864, 866, 872, 873, 874, 876, 879, 880, 883, 888, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 913, 919, 922, 924, 940, 976, 977, 979, 982, 984, 994, 995, 997, 998, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1020, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "regression_data": 7, "regression_model": 1037, "regression_test": 388, "regressioncriterion": 1038, "regressor": [4, 75, 86, 125, 131, 132, 135, 151, 156, 164, 166, 169, 177, 179, 181, 183, 199, 200, 202, 205, 216, 217, 218, 235, 263, 274, 288, 310, 316, 317, 366, 380, 382, 392, 394, 405, 408, 417, 430, 433, 434, 463, 480, 481, 482, 483, 522, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 563, 564, 565, 566, 567, 568, 603, 604, 607, 609, 630, 631, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 676, 677, 699, 827, 828, 831, 832, 833, 842, 850, 855, 856, 857, 860, 866, 874, 879, 880, 900, 902, 905, 907, 908, 909, 910, 913, 928, 930, 976, 977, 983, 987, 988, 990, 995, 1001, 1007, 1009, 1010, 1018, 1025, 1030, 1031, 1035, 1036, 1037, 1039, 1040, 1043, 1044, 1045, 1047], "regressor_": [169, 463, 591, 592, 595], "regressor__sample_weight": 199, "regressor_with_": 168, "regressor_without_": 168, "regressorchain": [398, 830, 832, 1038, 1041, 1045], "regressormixin": [235, 382, 394, 463, 1041], "regul": 0, "regular": [25, 27, 31, 36, 40, 57, 59, 60, 61, 68, 71, 73, 79, 100, 110, 120, 122, 123, 125, 130, 136, 138, 140, 151, 152, 153, 155, 158, 160, 163, 166, 168, 177, 178, 179, 181, 183, 184, 186, 187, 188, 190, 194, 195, 197, 199, 206, 213, 215, 217, 218, 234, 246, 254, 256, 261, 262, 264, 273, 288, 289, 298, 300, 301, 302, 303, 307, 308, 310, 311, 312, 330, 333, 335, 337, 338, 339, 342, 343, 344, 348, 349, 351, 353, 356, 366, 380, 392, 393, 405, 407, 409, 410, 412, 413, 414, 417, 435, 441, 445, 469, 470, 474, 476, 477, 478, 479, 502, 510, 512, 513, 518, 520, 522, 526, 536, 537, 538, 541, 545, 546, 548, 557, 559, 560, 586, 587, 589, 636, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 687, 691, 732, 738, 747, 794, 795, 813, 825, 826, 856, 857, 860, 879, 899, 900, 901, 902, 904, 905, 906, 976, 977, 979, 980, 981, 984, 986, 992, 993, 997, 1000, 1001, 1002, 1009, 1010, 1012, 1018, 1019, 1021, 1025, 1030, 1031, 1032, 1034, 1035, 1039, 1040, 1042, 1043], "regularis": [203, 420, 471, 473], "regularli": [120, 278, 392, 989], "regulatori": 127, "rehan": 1045, "rehman": 1038, "reiichiro": [1037, 1038], "reilli": 1047, "reimplement": [386, 392, 394, 1036, 1040], "reinforc": 1008, "reinit": 388, "reiniti": 392, "reinstal": 397, "reintroduc": 1046, "reitsam": 1042, "reject": [236, 394, 395, 521, 669, 724, 919, 920, 983, 987, 1038], "rel": [4, 6, 8, 17, 20, 27, 55, 61, 100, 118, 156, 172, 175, 179, 199, 217, 248, 289, 290, 306, 316, 319, 338, 342, 351, 352, 375, 379, 382, 388, 394, 405, 407, 411, 414, 415, 417, 438, 441, 445, 447, 457, 519, 522, 529, 532, 535, 539, 543, 544, 555, 556, 557, 558, 562, 563, 564, 602, 647, 656, 657, 669, 670, 672, 688, 692, 726, 744, 796, 799, 800, 802, 810, 818, 823, 826, 839, 840, 844, 856, 857, 868, 869, 879, 895, 899, 900, 901, 904, 906, 907, 908, 909, 910, 983, 984, 987, 989, 990, 991, 993, 1019], "relabel": [379, 814, 815, 896], "relat": [3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 369, 375, 376, 379, 380, 384, 385, 387, 388, 389, 392, 394, 395, 396, 398, 401, 406, 407, 408, 409, 410, 411, 412, 414, 417, 448, 462, 467, 494, 547, 548, 560, 561, 637, 671, 675, 690, 699, 720, 740, 817, 822, 857, 858, 860, 863, 864, 869, 872, 874, 875, 878, 887, 903, 976, 979, 981, 987, 988, 990, 991, 994, 997, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1025, 1030, 1034, 1035, 1036, 1038, 1039, 1042, 1043, 1046], "relate_point": 293, "relationship": [4, 13, 20, 111, 112, 127, 157, 168, 169, 178, 183, 199, 201, 202, 267, 281, 306, 312, 322, 394, 407, 409, 411, 460, 494, 634, 712, 984, 987, 989, 990, 994, 995, 1021, 1035], "relative_tim": 248, "relax": [7, 407, 415, 451, 1000, 1037], "releas": [0, 13, 15, 55, 71, 115, 116, 118, 121, 127, 129, 145, 148, 163, 164, 170, 171, 175, 180, 199, 200, 201, 230, 235, 240, 241, 242, 255, 269, 272, 278, 281, 285, 311, 323, 367, 369, 378, 380, 381, 383, 388, 392, 394, 415, 441, 444, 445, 462, 465, 488, 489, 494, 499, 500, 502, 510, 513, 519, 522, 536, 539, 559, 560, 562, 563, 565, 597, 600, 626, 628, 630, 632, 638, 644, 646, 650, 656, 667, 678, 686, 699, 700, 715, 729, 745, 785, 792, 796, 797, 799, 800, 802, 810, 818, 821, 822, 825, 841, 843, 860, 864, 869, 872, 873, 874, 878, 879, 880, 896, 897, 899, 904, 907, 908, 931, 955, 1003, 1005, 1009, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "release_highlight": [323, 1009], "relev": [7, 9, 19, 77, 81, 83, 146, 148, 166, 178, 193, 202, 260, 261, 267, 362, 366, 368, 375, 377, 379, 380, 382, 384, 385, 386, 394, 395, 398, 409, 410, 416, 417, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 723, 737, 753, 797, 798, 799, 800, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 877, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 987, 988, 993, 1004, 1008, 1009, 1033, 1038, 1044], "reli": [100, 117, 121, 148, 172, 187, 188, 278, 283, 316, 320, 351, 366, 367, 382, 385, 388, 389, 392, 394, 403, 404, 407, 412, 414, 415, 547, 591, 595, 605, 606, 775, 823, 826, 864, 953, 976, 979, 981, 983, 987, 990, 995, 997, 1002, 1012, 1038, 1039, 1040, 1044, 1046, 1047], "reliabl": [25, 27, 405, 411, 436, 437, 644, 1003, 1012], "relianc": [100, 203], "religion": [19, 261, 351, 352, 353, 375, 988, 1023], "reloc": 1039, "relova": 1043, "relu": [856, 857], "remain": [8, 25, 27, 71, 111, 118, 123, 125, 147, 169, 199, 203, 215, 245, 258, 262, 266, 269, 404, 407, 408, 409, 411, 415, 444, 462, 465, 513, 514, 519, 526, 532, 568, 608, 609, 760, 766, 798, 799, 800, 801, 804, 806, 834, 835, 836, 838, 940, 976, 977, 979, 986, 987, 991, 997, 1003, 1008, 1032, 1038, 1044, 1047], "remaind": [4, 121, 169, 188, 199, 201, 217, 238, 320, 356, 408, 462, 465, 1030, 1037, 1038, 1039, 1042, 1043, 1046], "remaining_column": 462, "remark": [55, 86, 148, 368, 380, 997], "remedi": 216, "rememb": [55, 382, 385, 397, 415, 990, 994, 1003], "remi": 1037, "reminisc": 98, "remot": [175, 326, 380, 383], "remov": [5, 15, 17, 54, 55, 70, 75, 148, 163, 164, 169, 172, 261, 305, 312, 315, 316, 317, 322, 351, 352, 356, 362, 372, 375, 379, 380, 381, 382, 384, 385, 389, 394, 407, 408, 411, 414, 415, 417, 418, 439, 440, 442, 443, 448, 455, 480, 481, 482, 483, 486, 487, 525, 532, 533, 535, 537, 539, 544, 551, 565, 566, 567, 568, 577, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 609, 628, 636, 642, 652, 653, 654, 674, 675, 690, 707, 738, 739, 747, 748, 775, 776, 777, 779, 802, 818, 820, 821, 822, 823, 846, 858, 859, 863, 864, 876, 877, 879, 888, 914, 930, 931, 977, 984, 990, 1003, 1010, 1015, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "remove_zero_eig": [533, 1032, 1039], "rempfler": 1041, "renam": [250, 261, 380, 384, 407, 444, 445, 457, 469, 470, 476, 525, 534, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 872, 1030, 1031, 1032, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "rename_axi": 260, "render": [12, 26, 53, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 194, 203, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 380, 382, 384, 385, 386, 394, 549, 587, 629, 698, 700, 876, 888, 911, 913, 986, 1003, 1043, 1047], "rene": 1043, "renni": [834, 836, 989, 1038], "renorm": 26, "rent": 4, "rental": [4, 13, 170, 994], "reorder": [20, 101, 394, 695, 716, 1008, 1038], "reordered_data": 20, "reordered_row": 20, "reorgan": 1036, "rep": 377, "reparameter": 1002, "reparametr": 346, "repartit": 4, "repeat": [10, 33, 66, 79, 81, 123, 148, 151, 157, 158, 170, 175, 201, 255, 260, 261, 272, 278, 326, 352, 353, 382, 389, 394, 395, 404, 405, 406, 407, 412, 415, 416, 586, 591, 605, 606, 613, 625, 632, 657, 801, 811, 812, 815, 925, 977, 986, 1025, 1038, 1040], "repeatedkfold": [169, 411, 801, 812, 1037], "repeatedli": [111, 319, 362, 394, 407, 414, 417, 506, 544, 664, 665, 674, 675, 676, 778, 977, 991, 1018], "repeatedstratifiedkfold": [260, 278, 411, 811, 815, 1037], "repercuss": 310, "repetit": [260, 278, 385, 411, 811, 812, 995, 1044], "replac": [4, 13, 25, 80, 99, 111, 127, 151, 158, 163, 170, 185, 200, 263, 283, 307, 312, 317, 340, 378, 380, 382, 384, 386, 389, 394, 401, 408, 411, 414, 415, 439, 443, 462, 501, 513, 553, 554, 561, 580, 586, 587, 588, 589, 605, 606, 625, 628, 632, 637, 639, 725, 782, 802, 808, 810, 818, 858, 859, 862, 882, 895, 902, 956, 958, 961, 976, 977, 979, 983, 987, 997, 1002, 1003, 1007, 1008, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "replai": [799, 800], "repli": [15, 351, 379, 380, 383], "replic": [260, 379, 382], "repo": [380, 384, 1008, 1011], "report": [0, 4, 8, 13, 32, 70, 75, 145, 159, 187, 258, 268, 278, 315, 325, 362, 375, 379, 381, 382, 383, 386, 388, 392, 394, 397, 401, 407, 411, 609, 647, 656, 662, 683, 684, 698, 711, 726, 727, 735, 780, 781, 784, 828, 837, 856, 857, 894, 912, 930, 983, 990, 995, 1007, 1008, 1011, 1031, 1034, 1037, 1038, 1040, 1041, 1043, 1045, 1046], "reporthook": 8, "repositori": [4, 8, 13, 175, 321, 373, 375, 377, 378, 380, 382, 384, 388, 392, 395, 397, 502, 1007, 1011, 1025], "repr": [575, 1041, 1042, 1044], "repreat": 260, "repres": [4, 8, 10, 12, 13, 15, 20, 26, 32, 34, 44, 48, 49, 50, 53, 91, 95, 97, 103, 104, 118, 119, 128, 169, 178, 186, 191, 201, 203, 204, 208, 222, 224, 233, 238, 248, 254, 257, 260, 263, 267, 288, 307, 342, 351, 353, 360, 368, 372, 375, 377, 382, 392, 393, 394, 395, 401, 405, 407, 411, 412, 413, 414, 415, 416, 436, 440, 444, 450, 461, 468, 469, 470, 471, 472, 473, 474, 486, 488, 489, 490, 492, 494, 496, 498, 499, 500, 502, 503, 508, 525, 532, 534, 536, 538, 539, 545, 553, 561, 579, 586, 589, 592, 627, 630, 632, 638, 674, 676, 695, 697, 699, 709, 727, 740, 786, 796, 798, 809, 810, 813, 816, 822, 824, 825, 828, 829, 835, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856, 857, 866, 872, 873, 896, 899, 900, 919, 920, 940, 945, 977, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 995, 997, 998, 1000, 1001, 1003, 1014, 1019, 1020, 1022, 1036, 1038, 1041, 1042, 1045, 1048], "represent": [4, 12, 17, 20, 26, 53, 71, 72, 95, 98, 116, 118, 119, 128, 129, 130, 132, 135, 145, 156, 169, 171, 175, 180, 183, 220, 221, 222, 229, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 278, 293, 302, 311, 317, 319, 320, 322, 327, 352, 353, 360, 362, 372, 374, 383, 394, 401, 407, 408, 412, 413, 414, 421, 461, 529, 533, 535, 538, 540, 546, 564, 586, 588, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 628, 641, 644, 650, 656, 657, 658, 660, 664, 665, 666, 674, 675, 676, 766, 794, 795, 802, 818, 855, 868, 872, 873, 877, 879, 892, 899, 911, 913, 916, 932, 953, 979, 984, 986, 988, 990, 991, 992, 994, 997, 1002, 1008, 1014, 1015, 1017, 1021, 1023, 1030, 1031, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "reproduc": [5, 12, 60, 111, 169, 175, 187, 269, 278, 302, 367, 369, 379, 380, 382, 383, 388, 392, 394, 401, 407, 411, 412, 415, 419, 438, 452, 458, 467, 472, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 605, 606, 608, 609, 632, 637, 638, 639, 640, 644, 645, 648, 650, 651, 652, 658, 659, 660, 661, 664, 665, 666, 669, 674, 676, 677, 687, 688, 690, 691, 692, 790, 794, 795, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 823, 824, 825, 829, 830, 833, 844, 848, 855, 856, 857, 864, 876, 880, 888, 891, 892, 899, 900, 901, 904, 935, 936, 958, 961, 979, 1007, 1011, 1030, 1038, 1043, 1044], "reproduct": [392, 983], "request": [8, 17, 46, 199, 217, 235, 318, 367, 374, 378, 379, 383, 394, 395, 398, 401, 412, 415, 416, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 579, 580, 586, 588, 589, 592, 597, 598, 608, 609, 630, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 697, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 944, 946, 987, 990, 1011, 1023, 1036, 1037, 1038, 1047, 1048], "request_rout": 235, "requir": [4, 7, 14, 25, 45, 46, 48, 53, 55, 57, 58, 67, 70, 90, 99, 101, 116, 117, 121, 122, 125, 127, 128, 132, 148, 170, 183, 188, 196, 199, 220, 222, 229, 232, 235, 238, 242, 261, 269, 271, 283, 285, 305, 310, 317, 318, 351, 352, 353, 374, 377, 378, 380, 382, 384, 386, 388, 392, 394, 395, 397, 398, 403, 406, 407, 408, 409, 411, 412, 414, 415, 416, 418, 424, 430, 435, 436, 437, 442, 444, 448, 450, 455, 460, 462, 465, 467, 480, 481, 482, 494, 506, 519, 522, 533, 539, 547, 548, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 577, 578, 579, 608, 609, 617, 625, 630, 631, 632, 641, 644, 645, 650, 651, 656, 657, 664, 665, 666, 669, 672, 673, 674, 675, 676, 684, 687, 689, 690, 691, 693, 697, 721, 726, 727, 739, 744, 746, 749, 760, 781, 784, 796, 799, 800, 803, 805, 810, 822, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856, 859, 860, 861, 863, 873, 874, 875, 879, 887, 891, 892, 894, 895, 899, 900, 901, 904, 907, 908, 909, 910, 944, 947, 953, 973, 976, 981, 982, 983, 984, 987, 988, 989, 990, 991, 993, 994, 997, 1001, 1002, 1003, 1008, 1014, 1021, 1023, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "requires_fit": 382, "requires_i": [382, 424, 430, 1041], "requires_positive_i": 382, "requires_positive_x": [382, 1040, 1045], "requires_vector_input": [610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "requisit": 382, "rerais": 1047, "rerun": [12, 26, 42, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 388], "resampl": [52, 124, 156, 169, 217, 287, 389, 392, 394, 553, 554, 961, 1008, 1039, 1043], "resampled_arrai": 958, "rescal": [4, 46, 47, 55, 100, 180, 187, 223, 238, 305, 348, 409, 414, 419, 467, 468, 469, 470, 471, 472, 473, 474, 531, 536, 644, 647, 650, 871, 877, 901, 902, 903, 904, 905, 987, 997, 1022, 1034, 1035], "rescaled_coin": [46, 47, 1022], "rescu": 415, "research": [0, 148, 168, 260, 266, 278, 375, 377, 392, 407, 499, 511, 633, 643, 690, 732, 824, 829, 976, 984, 988, 990, 1002, 1007, 1008, 1012], "resembl": [39, 203], "reserv": [311, 559, 560, 1012, 1014], "reserva": 311, "reservoir": 956, "reservoir_sampl": 956, "reset": [242, 362, 388, 532, 674, 675, 676, 839, 840, 868, 869, 879, 1032], "reset_n_cal": [839, 840], "reshama": [0, 364, 370, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "reshap": [4, 5, 6, 14, 24, 32, 46, 47, 48, 50, 51, 53, 54, 58, 72, 80, 85, 95, 98, 104, 114, 119, 120, 130, 140, 146, 151, 153, 154, 155, 156, 157, 158, 160, 178, 190, 196, 212, 213, 215, 216, 221, 223, 225, 228, 233, 237, 249, 258, 287, 289, 296, 299, 301, 302, 306, 307, 308, 312, 315, 318, 319, 321, 322, 330, 337, 338, 343, 344, 347, 348, 392, 404, 412, 414, 415, 443, 463, 582, 629, 729, 825, 874, 878, 983, 997, 1003, 1019, 1022, 1035], "resid": 375, "residenti": 132, "residu": [75, 195, 201, 256, 430, 463, 480, 481, 482, 550, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 669, 670, 671, 672, 676, 677, 683, 684, 699, 741, 782, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 983, 987, 1021, 1042, 1043, 1045], "residual_metr": 1036, "residual_threshold": [216, 669, 983, 1043], "residual_vs_predict": [4, 13, 75, 256, 320, 699], "residues_": 1035, "resign": 395, "resili": 415, "resist": [80, 81, 380], "resiz": [6, 46, 47, 239, 375, 491, 492, 1019], "resolut": [4, 11, 17, 104, 170, 295, 296, 338, 395, 405, 1014, 1040], "resolv": [17, 379, 380, 384, 388, 395, 415, 444, 450, 460, 689, 693, 936, 977, 987, 1037, 1039, 1040, 1043, 1048], "resort": [262, 375, 553, 1040], "resourc": [17, 42, 124, 127, 163, 199, 301, 317, 365, 369, 383, 393, 394, 414, 799, 800, 988, 1005, 1008, 1012, 1015, 1025, 1038, 1043, 1044], "resourcewarn": 1033, "resp": [375, 414, 595, 794, 795, 1001, 1038], "respect": [27, 55, 67, 90, 100, 111, 115, 117, 120, 129, 159, 175, 178, 183, 188, 201, 213, 216, 220, 222, 229, 232, 234, 238, 250, 269, 289, 290, 302, 310, 319, 335, 342, 366, 367, 375, 376, 380, 405, 407, 410, 412, 414, 415, 417, 444, 462, 465, 468, 469, 470, 471, 472, 473, 474, 532, 538, 539, 545, 551, 559, 560, 595, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 634, 641, 669, 688, 692, 710, 725, 779, 782, 794, 795, 835, 845, 856, 857, 911, 913, 976, 980, 981, 983, 984, 987, 990, 991, 992, 993, 997, 1002, 1007, 1011, 1012, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "respond": [169, 380, 407], "respons": [0, 148, 170, 195, 199, 202, 235, 270, 351, 377, 386, 394, 406, 407, 408, 414, 444, 462, 480, 481, 482, 629, 630, 631, 672, 673, 696, 698, 700, 739, 794, 795, 988, 994, 1005, 1014, 1047], "response_method": [9, 30, 34, 56, 113, 128, 133, 182, 191, 208, 213, 263, 286, 291, 294, 310, 334, 335, 337, 342, 357, 629, 630, 631, 696, 698, 700, 739, 987, 1047], "rest": [25, 30, 121, 125, 166, 177, 183, 208, 214, 218, 235, 238, 248, 278, 315, 329, 335, 386, 394, 406, 417, 510, 608, 629, 642, 656, 657, 674, 751, 785, 827, 828, 829, 848, 899, 901, 904, 983, 987, 988, 991, 994, 1002, 1009, 1012, 1034, 1035, 1044, 1045, 1046, 1048], "restart": [57, 383, 388, 445, 529, 535, 536, 541, 543, 544, 608, 609, 984, 1043], "restor": [1033, 1038, 1039, 1040, 1041, 1045], "restrict": [27, 66, 67, 73, 85, 139, 163, 166, 189, 214, 216, 298, 303, 382, 386, 392, 405, 407, 414, 415, 463, 491, 500, 530, 579, 608, 651, 652, 653, 654, 656, 680, 681, 711, 779, 785, 786, 825, 847, 849, 850, 851, 853, 855, 856, 857, 859, 885, 987, 1003, 1009, 1024, 1025, 1030, 1032, 1040, 1042, 1047], "restructuredtext": 380, "result": [4, 5, 6, 9, 13, 14, 19, 24, 25, 26, 30, 32, 34, 37, 40, 42, 43, 44, 46, 48, 53, 54, 55, 60, 62, 66, 71, 73, 75, 81, 86, 95, 98, 100, 101, 105, 114, 115, 116, 118, 121, 122, 124, 125, 128, 130, 131, 140, 147, 148, 151, 153, 155, 159, 163, 169, 170, 171, 172, 179, 184, 185, 188, 189, 194, 200, 201, 203, 207, 213, 214, 217, 220, 221, 224, 228, 231, 233, 239, 245, 250, 251, 254, 255, 258, 260, 261, 263, 266, 267, 268, 269, 271, 272, 275, 278, 283, 285, 289, 299, 300, 301, 305, 306, 307, 310, 315, 317, 319, 320, 321, 322, 325, 328, 330, 338, 342, 343, 346, 351, 353, 358, 359, 360, 366, 367, 368, 374, 375, 377, 380, 382, 384, 385, 386, 388, 392, 393, 394, 395, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 432, 438, 439, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 455, 457, 460, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 487, 506, 507, 509, 511, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 577, 578, 579, 580, 582, 586, 587, 589, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 628, 629, 630, 632, 634, 638, 641, 650, 651, 656, 662, 663, 664, 665, 674, 675, 676, 684, 687, 688, 689, 690, 691, 692, 693, 706, 708, 710, 715, 722, 723, 725, 726, 727, 728, 729, 733, 734, 735, 751, 753, 754, 761, 768, 771, 775, 776, 777, 778, 780, 781, 782, 784, 790, 791, 794, 795, 796, 798, 799, 800, 801, 806, 810, 811, 812, 815, 816, 820, 826, 827, 828, 830, 831, 832, 833, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 863, 864, 872, 873, 876, 877, 880, 888, 892, 896, 899, 901, 904, 907, 908, 909, 910, 911, 912, 919, 920, 935, 936, 938, 942, 952, 958, 961, 977, 979, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1007, 1008, 1011, 1014, 1018, 1019, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "results_df": [207, 260, 311], "results_for_preval": 263, "results_sc": 346, "retail": 1012, "retain": [178, 394, 407, 410, 411, 415, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 492, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 693, 694, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 872, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 1000, 1030], "retbin": 997, "retent": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "retract": 380, "retrain": [401, 1008, 1046], "retri": [171, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 1038, 1044, 1048], "retriev": [86, 169, 203, 267, 352, 360, 384, 394, 412, 415, 416, 466, 494, 588, 591, 592, 624, 651, 661, 682, 697, 723, 727, 729, 730, 753, 778, 834, 838, 871, 897, 983, 985, 987, 989, 1007, 1008, 1022, 1035, 1040, 1042, 1044, 1047], "return": [4, 6, 7, 8, 10, 11, 13, 14, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 56, 61, 70, 75, 92, 102, 104, 109, 111, 114, 116, 123, 124, 127, 128, 132, 148, 154, 157, 159, 164, 172, 178, 179, 187, 188, 191, 199, 200, 207, 208, 209, 217, 235, 238, 241, 242, 248, 250, 255, 256, 257, 258, 259, 260, 261, 263, 264, 267, 274, 283, 288, 293, 296, 302, 305, 307, 310, 315, 334, 338, 351, 353, 356, 360, 366, 373, 374, 375, 380, 381, 382, 386, 387, 389, 392, 394, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 956, 957, 958, 959, 960, 961, 962, 968, 971, 972, 973, 974, 975, 977, 987, 990, 994, 995, 1002, 1003, 1008, 1014, 1019, 1021, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "return_a": [583, 584, 953, 1033], "return_cent": [510, 1041], "return_cod": 544, "return_cost": [469, 470, 476], "return_count": [328, 352, 851], "return_cov": [394, 565, 566, 609, 859], "return_dist": [54, 461, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 990, 1034], "return_distribut": [92, 521], "return_estim": [4, 169, 322, 411, 822, 1038], "return_ind": 521, "return_indic": [411, 822, 1046], "return_inner_stat": 1044, "return_intercept": [685, 1039], "return_invers": [126, 382], "return_log": [839, 840], "return_model": [1032, 1034], "return_n_it": [419, 452, 457, 476, 543, 544, 644, 645, 650, 651, 658, 659, 660, 661, 679, 680, 681, 682, 683, 684, 685, 692, 1044], "return_norm": [886, 1037], "return_path": [680, 681, 683, 684], "return_std": [151, 156, 157, 158, 160, 178, 179, 394, 550, 565, 566, 609, 611, 612, 613, 614, 623, 625, 642, 643, 859, 1037, 1038, 1042, 1047], "return_sum_weight": 968, "return_tim": [262, 823, 1040], "return_train_scor": [117, 264, 311, 411, 796, 799, 800, 810, 822, 1036, 1037, 1039], "return_x_i": [5, 7, 15, 58, 70, 71, 72, 73, 95, 117, 121, 135, 138, 139, 144, 163, 164, 171, 172, 175, 184, 186, 187, 188, 190, 195, 196, 206, 214, 215, 229, 237, 238, 241, 242, 256, 259, 262, 267, 268, 275, 278, 281, 285, 292, 300, 301, 302, 310, 315, 317, 319, 320, 321, 322, 328, 341, 353, 356, 373, 385, 386, 393, 401, 407, 408, 411, 414, 416, 419, 427, 444, 486, 487, 488, 489, 490, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 530, 531, 532, 533, 556, 559, 560, 565, 566, 590, 593, 594, 596, 597, 598, 599, 600, 608, 617, 618, 620, 621, 636, 637, 656, 657, 666, 671, 672, 673, 686, 687, 688, 689, 691, 693, 699, 709, 785, 799, 800, 802, 827, 832, 843, 848, 851, 908, 909, 910, 977, 982, 987, 988, 989, 990, 997, 1014, 1018, 1019, 1021, 1022, 1027, 1036, 1038, 1040, 1043], "return_x_mean": 419, "reuben": 1030, "reus": [13, 151, 192, 261, 315, 353, 382, 394, 407, 408, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 632, 644, 646, 647, 650, 656, 658, 660, 664, 665, 666, 667, 674, 675, 676, 678, 856, 857, 995, 999, 1012, 1037, 1047], "reuter": [366, 375], "reuters21578": 8, "reuterspars": 8, "rev": [380, 605, 606], "revamp": 1040, "reveal": [4, 13, 169, 171, 351, 386, 404, 984, 1046], "revers": [19, 75, 148, 204, 260, 532, 539, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 786, 859, 987, 1030, 1031, 1040, 1042, 1046], "revert": [96, 628, 630, 631, 1037, 1042, 1047], "review": [278, 311, 366, 375, 382, 383, 384, 385, 386, 392, 395, 411, 412, 533, 539, 987, 997, 1015], "revillet": 1030, "revis": [395, 668], "revisit": [407, 418, 442], "revolv": 984, "reward": 380, "reweight": [111, 352, 394, 409, 414, 588, 589, 646, 667, 678], "reweight_covari": [467, 472], "rewrit": [386, 392, 1003, 1022, 1030], "rewritten": [380, 647, 1032, 1034], "rey": 1045, "reza": 1040, "rezazadeh": 1043, "rf": [116, 117, 131, 134, 135, 171, 315, 362, 414, 565, 567, 568], "rf_123": 362, "rf__n_estim": 414, "rf_appli": 116, "rf_cst": 322, "rf_inst": 362, "rf_leaves_yield": 116, "rf_model": 116, "rf_no_cst": 322, "rf_pipelin": 132, "rfc": [27, 241, 315, 1027], "rfc_disp": [241, 315, 1027], "rfe": [146, 147, 398, 416, 592, 595, 600, 1030, 1034, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "rfecv": [147, 398, 416, 591, 595, 600, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1046, 1047, 1048], "rgb": [48, 375, 415, 491, 492, 581, 582, 585], "rgr_lasso": 14, "rgr_ridg": 14, "rhinehart": 1037, "rho": [210, 412, 675, 983, 1001, 1031], "rho_k": 413, "ri": [407, 703, 783], "ribeiro": [588, 727, 1043], "ricardo": [1033, 1043, 1044, 1047], "ricardojnf": 1043, "riccadonna": 740, "riccardo": [1041, 1047], "rice": [11, 296, 375, 496, 1043], "rich": [52, 127, 388, 392, 407, 437, 1012, 1041, 1044], "richard": [375, 416, 656, 1031, 1040, 1042, 1044, 1045], "richardscottoz": 1043, "richer": [52, 104, 407], "richi": 1038, "rick": 1041, "ricker": 104, "ricker_funct": 104, "ricker_matrix": 104, "rickiepark": 1037, "rid": [9, 1001], "riddel": [1033, 1035, 1037], "ridg": [5, 10, 14, 54, 75, 96, 97, 114, 132, 138, 148, 150, 156, 158, 160, 161, 163, 166, 168, 169, 170, 177, 178, 183, 186, 189, 192, 194, 195, 199, 200, 205, 218, 227, 237, 243, 273, 306, 309, 345, 346, 351, 366, 369, 392, 412, 414, 417, 522, 533, 537, 541, 609, 613, 620, 623, 641, 642, 643, 645, 647, 655, 659, 671, 672, 673, 676, 685, 699, 747, 796, 802, 810, 832, 905, 987, 988, 995, 997, 1001, 1002, 1009, 1010, 1021, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1048], "ridge_alpha": [537, 541, 1037], "ridge_cv": 75, "ridge_cv_with_trans_target": 75, "ridge_glm": 199, "ridge_regress": [1038, 1039, 1045], "ridgeclassifi": [351, 366, 670, 671, 673, 983, 988, 1035, 1039, 1043, 1044, 1045, 1048], "ridgeclassifiercv": [398, 671, 672, 785, 983, 987, 988, 1038, 1040, 1041, 1043, 1044, 1048], "ridgecv": [4, 75, 132, 148, 169, 237, 394, 398, 414, 566, 641, 670, 673, 983, 988, 1030, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048], "ridgecvridgecv": [132, 169], "ridgeregress": 382, "ridgeridg": 169, "ridgewai": [123, 414], "riedmann": 1042, "ries": 1044, "rifkin": 983, "right": [6, 7, 11, 12, 14, 15, 31, 34, 39, 42, 43, 44, 45, 51, 53, 60, 62, 64, 79, 80, 82, 90, 91, 92, 97, 98, 100, 102, 104, 111, 113, 114, 115, 124, 125, 126, 127, 134, 144, 151, 154, 164, 172, 189, 200, 201, 202, 203, 205, 206, 209, 210, 228, 231, 232, 235, 245, 247, 248, 250, 251, 255, 256, 260, 263, 267, 270, 271, 273, 288, 296, 299, 302, 305, 307, 310, 321, 322, 326, 338, 340, 342, 346, 348, 351, 357, 360, 362, 369, 380, 392, 395, 404, 407, 410, 412, 413, 414, 417, 462, 480, 481, 482, 483, 532, 539, 542, 555, 556, 557, 558, 559, 560, 562, 563, 564, 585, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 633, 674, 676, 864, 907, 908, 909, 910, 911, 923, 936, 976, 979, 981, 983, 985, 987, 989, 990, 994, 999, 1001, 1002, 1003, 1007, 1008, 1012, 1015, 1019, 1021, 1022, 1032, 1038, 1044, 1046, 1047], "right_impur": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "rightarrow": [417, 617, 991], "rijn": [374, 1038], "rileran": 1044, "rio": [1040, 1042, 1043, 1044], "ripe": 311, "rise": 156, "rishabh": 1044, "rishi": 1042, "rishikesh": 1037, "risk": [9, 55, 127, 199, 203, 217, 306, 346, 362, 379, 380, 394, 406, 411, 414, 565, 566, 884, 885, 887, 888, 889, 890, 983, 987, 1012, 1037], "riski": 217, "riskiest": [199, 217], "ritchi": 1041, "rithvik": 1042, "ritter": [1044, 1045], "ritual": 351, "rival": [4, 896, 1000], "rk": 65, "rkf": [411, 811], "rl2007": 983, "rlm": 1040, "rm": [80, 154, 384, 388, 409], "rmse": [4, 13, 81, 127, 311, 747, 987, 1041], "rmse_": 311, "rmse_test_mean": 311, "rmse_test_scor": 311, "rmse_test_std": 311, "rmse_train_mean": 311, "rmse_train_scor": 311, "rmse_train_std": 311, "rmsle": [748, 987], "rmtree": [54, 72, 408], "rna": 392, "rnd": 306, "rng": [5, 20, 21, 31, 34, 37, 44, 50, 62, 81, 86, 95, 97, 102, 112, 124, 127, 128, 129, 131, 151, 152, 155, 157, 158, 160, 163, 164, 168, 171, 178, 179, 180, 181, 183, 188, 193, 200, 201, 206, 213, 228, 234, 235, 237, 245, 255, 263, 266, 271, 272, 299, 309, 312, 316, 317, 319, 321, 322, 325, 326, 330, 341, 358, 359, 362, 367, 382, 385, 398, 420, 468, 472, 473, 474, 476, 477, 478, 479, 641, 647, 668, 670, 676, 685, 808, 834, 835, 836, 838, 839, 840, 844, 847, 849, 850, 851, 876, 888, 891, 892, 894, 895, 896, 905, 1014], "ro": 26, "road": 392, "roadmap": [369, 1005], "rob": [206, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1042, 1045], "robert": [0, 2, 48, 72, 148, 187, 278, 377, 412, 526, 533, 626, 654, 719, 720, 721, 732, 865, 977, 983, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1045], "robertlayton": 48, "roberto": [407, 440], "robertson": 1043, "robin": [163, 164, 625, 977, 1036, 1039, 1044, 1045], "robinson": 1043, "robl": 1037, "robson": 1040, "robust": [9, 34, 61, 63, 77, 79, 83, 122, 124, 148, 164, 166, 169, 170, 177, 189, 201, 203, 216, 218, 228, 238, 274, 305, 321, 368, 377, 382, 388, 407, 414, 415, 444, 446, 467, 468, 471, 472, 473, 474, 522, 532, 557, 558, 647, 655, 668, 669, 676, 677, 747, 829, 860, 874, 876, 877, 888, 894, 934, 987, 991, 993, 997, 1000, 1001, 1007, 1009, 1010, 1012, 1024, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1046], "robust_contour": 80, "robust_cov": 80, "robust_mah": 80, "robust_scal": [877, 888, 1038], "robustli": [202, 406], "robustscal": [238, 876, 889, 977, 997, 1035, 1036, 1038, 1040, 1041, 1042, 1046], "roc": [11, 25, 116, 148, 166, 227, 229, 238, 239, 243, 253, 255, 262, 267, 276, 322, 328, 387, 405, 411, 502, 508, 562, 656, 700, 704, 705, 706, 724, 739, 779, 785, 786, 815, 825, 828, 866, 904, 993, 1009, 1027, 1032, 1033, 1035, 1036, 1040, 1042, 1046], "roc_auc": [11, 148, 260, 264, 269, 270, 387, 632, 700, 730, 987, 1027], "roc_auc_ovo": [987, 1040], "roc_auc_ovo_weight": [987, 1040], "roc_auc_ovr": [987, 1040], "roc_auc_ovr_weight": [987, 1040], "roc_auc_scor": [25, 148, 260, 269, 315, 322, 700, 704, 705, 706, 786, 987, 1032, 1033, 1038, 1040, 1044, 1045], "roc_curv": [11, 229, 257, 269, 700, 704, 724, 779, 785, 987, 1030, 1031, 1032, 1035, 1036, 1038, 1043, 1046, 1048], "roc_displai": 229, "rocchio": [351, 846], "rocco": [1043, 1044, 1045], "roccurvedisplai": [116, 238, 241, 257, 269, 270, 315, 387, 785, 786, 993, 1027, 1040, 1046, 1047, 1048], "rock": 81, "rocklin": [379, 385], "rocktalu": 65, "roddi": [1039, 1040], "rodent": [11, 296, 375, 496], "roderick": 977, "rodion": 1043, "rodrigo": 1038, "rodrigu": [1037, 1038, 1043], "rodr\u00edguez": 311, "roeder": 1040, "roehr": [1046, 1047], "roei": 1042, "roeschk": 1039, "roger": [720, 1037, 1038, 1042], "rogerstanimoto": [448, 455, 697, 775, 776, 777, 990], "rogerstanimotodist": 697, "rohan": [1035, 1036, 1038, 1039, 1043], "rohit": [1033, 1034, 1038, 1039], "roi": [1030, 1044], "roi_siz": 54, "roic": 1045, "rok": 1040, "rokem": [1030, 1036], "rokhlin": [533, 539, 936], "roland": [1032, 1033], "rolando": [1031, 1032], "role": [269, 366, 379, 412, 1005], "roll": [67, 166, 219, 220, 221, 222, 225, 226, 383, 407, 528, 690, 691, 930, 1009, 1012, 1040, 1045], "rolling_max": 13, "rolling_mean": 13, "rolling_min": 13, "romain": [1037, 1042], "roman": [0, 1, 199, 217, 625, 913, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "roman4oo": 1045, "romaniuk": 1034, "romijnd": 1042, "romuald": 1039, "ron": [0, 2, 247, 1030], "ronald": [375, 991, 1033, 1043], "ronan": [1030, 1033, 1038], "ronchetti": [647, 983], "rong": 1002, "ronrubin": [662, 683, 684, 983], "ronsin": [1038, 1039, 1047], "ronweiss": 247, "room": [305, 375, 385, 407, 1011], "roopam": [1038, 1039], "root": [4, 80, 127, 148, 180, 360, 377, 380, 388, 407, 440, 499, 539, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 637, 747, 748, 787, 788, 907, 908, 909, 910, 911, 913, 987, 993, 1003, 1032, 1038, 1039, 1040, 1041, 1044, 1045], "root_": 440, "root_mean_squared_error": [13, 127, 747, 987, 1047], "root_mean_squared_log_error": [748, 987, 1047], "rope": 260, "rope_interv": 260, "rope_prob": 260, "rori": 1041, "rosa": 1045, "rosal": 411, "rose": 375, "rosenberg": [407, 715, 734, 792], "rosenfeld": 1038, "ross": [532, 605, 606, 1003, 1044, 1045], "rosset": [111, 414, 517, 551], "rossi": 1033, "rosslimlinyang_ijcv": 532, "rostamizadeh": 976, "rostomyan": 1038, "rotat": [8, 40, 85, 94, 95, 97, 100, 102, 106, 123, 134, 166, 172, 223, 271, 272, 281, 338, 345, 410, 412, 417, 419, 502, 530, 539, 548, 612, 695, 879, 911, 983, 1009, 1041, 1042], "rotation_mod": 271, "rotations_": 548, "roth": [57, 1035, 1038, 1045], "rough": [406, 993, 1016], "roughli": [111, 124, 188, 251, 270, 283, 310, 366, 394, 412, 415, 517, 984, 1030], "rouli": 1033, "round": [7, 9, 25, 85, 117, 127, 163, 164, 206, 217, 260, 266, 307, 309, 351, 394, 448, 454, 455, 562, 563, 591, 592, 595, 625, 690, 711, 798, 808, 864, 896, 911, 913, 977, 991, 1003, 1032, 1034, 1036, 1038, 1039, 1041, 1043, 1044, 1046, 1047], "rounded_list": 808, "rouseeuw1984": 472, "rousseeuw": [80, 81, 407, 409, 467, 472, 789, 790, 993], "rousseuw": [80, 81], "rout": [8, 56, 109, 159, 166, 180, 227, 243, 369, 421, 424, 427, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 944, 945, 946, 947, 971, 1009, 1025, 1044, 1046], "route_param": [235, 944], "routed_param": [235, 947], "routemappingpair": 944, "router": [394, 398, 944, 945, 946, 947], "routerconsumerclassifi": 235, "routerconsumerclassifierifittedrouterconsumerclassifi": 235, "routin": [322, 368, 374, 377, 380, 381, 382, 383, 388, 392, 394, 416, 670, 672, 685, 842, 901, 902, 903, 904, 905, 984, 990, 997, 998, 1001, 1007, 1012, 1030, 1044, 1045, 1046], "routing_info": 944, "routlei": 1036, "rouvinen": 1035, "roux": [656, 983, 1000], "row": [4, 19, 20, 21, 25, 27, 34, 44, 60, 75, 90, 92, 117, 120, 130, 133, 163, 199, 200, 201, 229, 232, 238, 239, 307, 360, 366, 375, 382, 389, 393, 394, 404, 407, 410, 415, 422, 440, 441, 445, 447, 448, 449, 451, 454, 455, 457, 462, 466, 486, 488, 489, 490, 491, 492, 493, 498, 499, 500, 502, 503, 508, 509, 511, 524, 532, 540, 546, 549, 588, 589, 618, 630, 641, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 690, 694, 695, 708, 716, 717, 722, 755, 756, 760, 763, 765, 766, 767, 768, 770, 771, 773, 775, 776, 777, 778, 794, 795, 828, 834, 835, 836, 837, 838, 844, 847, 848, 849, 850, 851, 854, 865, 869, 871, 872, 874, 884, 885, 886, 889, 890, 893, 897, 915, 919, 920, 936, 958, 961, 965, 967, 969, 970, 973, 974, 976, 977, 979, 981, 983, 985, 987, 988, 990, 997, 998, 1001, 1002, 1008, 1037, 1038, 1039, 1040, 1045], "row_compl": 19, "row_id_attribut": 374, "row_idx": [21, 199], "row_idx_shuffl": 20, "row_ind": [422, 449, 451], "row_indic": 127, "row_labels_": [19, 20, 21, 404, 449, 451], "row_norm": 248, "rowan": 1045, "rowei": [687, 691, 848, 984, 990], "rows_": [19, 404, 422, 449, 451], "royal": [539, 625, 875, 887, 1001], "rp": 232, "rpath": 378, "rr2007": 979, "rragundez": 1038, "rrr": 384, "rrrcn": 384, "rsalakhu": 642, "rsh": [272, 317], "rskf": 812, "rsme": 987, "rsnegrin": 1044, "rsplit": [6, 17, 261, 1019], "rst": [367, 380, 384, 388, 1023, 1030, 1035], "rstride": 170, "rt": 116, "rt_model": 116, "rth": [199, 217], "rtn": 12, "rtol": [382, 839, 840, 844], "ru": 201, "ruben": 1045, "rubi": 1042, "rubia": 1033, "rubial": 1043, "rubin": 977, "rubinstein": [662, 683, 684], "rubric": 984, "ruchitagard": 1040, "rudi": 1036, "rudresh": 1045, "ruff": [380, 397, 400], "ruifeng": [1036, 1037, 1042], "ruin": 380, "ruiter": 1045, "rule": [4, 27, 117, 175, 357, 360, 362, 366, 377, 380, 381, 382, 392, 394, 395, 402, 405, 406, 407, 411, 412, 414, 416, 534, 547, 548, 549, 550, 551, 559, 560, 567, 568, 600, 632, 643, 656, 657, 664, 665, 666, 674, 675, 676, 704, 705, 709, 796, 799, 800, 802, 810, 818, 822, 824, 848, 899, 912, 976, 981, 989, 990, 1001, 1003, 1008, 1014, 1021, 1025, 1032, 1035, 1042, 1047], "ruleset": 1003, "rumelhart": 991, "rumsfeld": [6, 375], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 378, 380, 381, 382, 384, 385, 386, 387, 388, 392, 394, 395, 397, 403, 407, 409, 411, 414, 417, 418, 419, 435, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 460, 462, 465, 466, 469, 470, 529, 530, 531, 532, 533, 535, 537, 539, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 580, 590, 592, 593, 594, 596, 597, 598, 600, 608, 609, 628, 632, 638, 644, 645, 647, 649, 650, 651, 653, 654, 658, 659, 660, 661, 680, 681, 686, 687, 688, 689, 690, 691, 692, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 831, 832, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 856, 857, 858, 861, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 930, 931, 955, 958, 961, 976, 986, 988, 991, 1000, 1002, 1003, 1007, 1008, 1012, 1014, 1021, 1023, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1046], "run_histori": 8, "run_id": 61, "run_tim": [214, 215], "rung": 997, "runnabl": [15, 384, 385], "runtim": [8, 10, 58, 111, 185, 214, 216, 233, 302, 307, 367, 382, 383, 392, 394, 406, 407, 414, 448, 561, 677, 810, 899, 900, 901, 902, 903, 904, 905, 1001, 1002, 1033, 1037, 1038, 1044, 1045, 1047, 1048], "runtime_histori": 8, "runxfail": 388, "rupesh": 1033, "rush": [4, 13, 380], "rushabh": 1041, "rushil": [1045, 1046], "russ": [626, 977], "russel": [1036, 1037], "russellrao": [448, 455, 697, 775, 776, 777, 990], "russellraodist": 697, "russian": 415, "rust": 1007, "ruth": 1040, "rutter": 1043, "ruusmann": 1036, "rv": [0, 264, 305, 800, 808, 810, 976, 1030, 1031, 1034, 1035, 1036, 1037, 1038], "rv_discrete_frozen": 272, "rvd": [467, 472], "rvdriessen": [467, 472], "rvraghav93": [264, 305], "rw2006": [156, 417, 608, 609], "ryad": 1036, "ryan": [1033, 1036, 1038, 1039], "ryb": 357, "ryder": 12, "ryotaro": 1042, "r\u00e9my": 1036, "r\u00fcdiger": [1038, 1039, 1041], "s1": [96, 148, 159, 187, 188, 377, 1022], "s2": [96, 148, 159, 187, 188, 377, 548, 1022], "s22": 496, "s3": [19, 96, 148, 187, 188, 377, 1022], "s4": [148, 187, 188, 377], "s5": [148, 187, 188, 377, 995], "s6": [148, 187, 188, 377], "s_": [96, 264, 983, 984, 995, 997, 1022], "s__p": 859, "s_color": 220, "s_hessian": 220, "s_i": [407, 983, 997], "s_ica_": 97, "s_isomap": 220, "s_j": 407, "s_ltsa": 220, "s_mod": 220, "s_pca_": 97, "s_point": 220, "s_scale": 220, "s_spectral": 220, "s_standard": 220, "s_t_sne": 220, "sa": [375, 490], "saaba": 1035, "sabharw": 1040, "sabri": 1045, "sach": 12, "sachdev": 1045, "sachdeva": 1037, "sachin": [1037, 1038, 1044], "sackei": 1040, "saclai": 0, "sacr": 1007, "sad": [814, 815], "sadak": 1042, "sadhana": 1038, "sadli": 124, "sadra": 1046, "sad\u0142ocha": 1043, "saeed": 987, "saeger": [1035, 1036, 1037], "safari": 997, "safe": [37, 169, 188, 235, 352, 380, 382, 407, 408, 432, 506, 507, 586, 589, 595, 771, 775, 858, 893, 953, 959, 990, 1036, 1037, 1038, 1043, 1044], "safe_copi": 1037, "safe_index": [389, 1040], "safe_mask": 389, "safe_realloc": 1033, "safe_sparse_dot": [389, 1040], "safe_sqr": 389, "safer": [352, 362, 378, 407, 411, 1030], "safest": [199, 217, 362, 374], "safeti": [70, 392, 408, 953, 1008, 1040], "safikh": 1045, "safiuddin": 1045, "sag": [191, 206, 656, 657, 670, 672, 685, 983, 1001, 1007, 1035, 1036, 1037, 1039, 1040], "sag_solv": 1039, "saga": [30, 190, 214, 215, 656, 657, 670, 672, 685, 810, 983, 1037, 1039], "sagar": 1040, "sagnik": 1038, "saha": 1044, "sahil": 1046, "sahin": 1040, "sahu": 1042, "sai": [185, 228, 346, 351, 352, 380, 405, 407, 408, 412, 414, 415, 444, 445, 498, 502, 508, 675, 976, 993, 1000, 1012, 1020, 1021, 1023, 1047, 1048], "said": [127, 169, 228, 261, 375, 380, 789, 985, 993, 1014, 1021], "saihttam": 1036, "sailesh": [1037, 1038], "saint": 1036, "saito": [412, 536, 538, 545, 1037], "saiw": 1036, "sake": [4, 27, 124, 127, 164, 169, 199, 310, 342, 351, 353, 388, 392, 668], "saket": [1034, 1035, 1042], "sakinaouisrani": 1044, "salahuddin": 1045, "salakhutdinov": [642, 848, 990], "salamin": 1034, "sale": [121, 238, 260, 987, 1012], "saleem": 1040, "salerno": 377, "salim": 1047, "sallisaw": [408, 464], "salman": [0, 1, 1045, 1046, 1047, 1048], "salmon": 1014, "salt": [31, 233, 307, 1044], "salvator": [1030, 1044, 1045, 1047], "salz": 1037, "salzmann": [199, 217], "sam": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "sambhav": 1041, "same": [4, 7, 8, 13, 20, 26, 34, 37, 40, 44, 53, 55, 57, 58, 64, 70, 71, 72, 92, 95, 97, 100, 102, 104, 112, 114, 118, 121, 124, 125, 127, 130, 148, 151, 169, 170, 172, 185, 187, 188, 193, 199, 200, 201, 207, 217, 235, 239, 250, 255, 256, 257, 258, 260, 261, 263, 265, 266, 268, 273, 283, 286, 288, 301, 305, 306, 308, 310, 311, 315, 317, 328, 338, 351, 352, 353, 360, 362, 366, 367, 368, 374, 375, 377, 379, 380, 382, 384, 386, 389, 392, 393, 394, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 432, 436, 437, 444, 448, 454, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 491, 493, 494, 496, 502, 506, 507, 529, 530, 533, 534, 535, 536, 537, 538, 541, 545, 547, 549, 550, 551, 552, 555, 557, 558, 559, 560, 562, 563, 565, 566, 587, 588, 600, 601, 604, 608, 609, 611, 620, 625, 626, 627, 630, 631, 644, 647, 650, 651, 653, 656, 657, 661, 664, 665, 666, 670, 671, 672, 673, 674, 675, 676, 682, 685, 697, 702, 703, 710, 711, 713, 715, 723, 728, 729, 733, 739, 752, 753, 754, 775, 776, 777, 783, 785, 789, 791, 792, 794, 795, 796, 797, 799, 800, 802, 804, 805, 810, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 841, 842, 843, 847, 849, 850, 851, 862, 863, 864, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 881, 888, 899, 900, 907, 909, 921, 925, 936, 953, 958, 961, 962, 972, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 1001, 1002, 1003, 1007, 1008, 1018, 1023, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "same_kind": 1047, "samesh": [1040, 1041], "samm": [31, 111, 113, 120, 414, 551, 1046, 1047], "samoocha": 1038, "sampl": [4, 5, 8, 11, 14, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 56, 57, 58, 59, 60, 65, 80, 81, 82, 86, 90, 92, 95, 99, 100, 103, 104, 111, 112, 113, 114, 115, 116, 117, 120, 121, 123, 124, 125, 127, 128, 133, 134, 135, 140, 145, 147, 148, 151, 155, 156, 157, 158, 160, 163, 166, 169, 170, 175, 177, 183, 185, 187, 188, 199, 201, 203, 206, 207, 209, 210, 211, 213, 215, 216, 217, 218, 220, 228, 232, 233, 235, 236, 238, 245, 246, 248, 249, 250, 251, 253, 255, 259, 260, 262, 263, 264, 266, 268, 272, 274, 276, 281, 283, 287, 288, 289, 290, 292, 293, 294, 301, 302, 305, 307, 308, 309, 310, 312, 315, 317, 318, 320, 322, 325, 327, 328, 329, 330, 333, 334, 336, 338, 340, 342, 343, 344, 346, 347, 349, 351, 352, 357, 360, 366, 369, 373, 375, 376, 379, 380, 382, 383, 392, 393, 398, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 424, 425, 426, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 454, 455, 456, 459, 460, 461, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 609, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 685, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 760, 761, 765, 766, 767, 768, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 919, 920, 924, 925, 936, 940, 956, 958, 961, 962, 965, 968, 976, 977, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1011, 1014, 1020, 1021, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sample_i": [160, 417, 609, 1044], "sample_id": [360, 375, 495], "sample_interv": 636, "sample_interval_": [636, 1046], "sample_posterior": [164, 625, 977], "sample_s": [58, 233, 352, 790], "sample_score_mean": 264, "sample_score_std": 264, "sample_silhouette_valu": 60, "sample_step": 636, "sample_weight": [24, 180, 199, 212, 217, 235, 316, 321, 322, 348, 380, 394, 398, 407, 414, 418, 424, 430, 435, 441, 442, 445, 447, 457, 458, 463, 467, 480, 481, 482, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 608, 609, 630, 631, 632, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 695, 696, 698, 700, 701, 705, 706, 707, 710, 711, 714, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 731, 732, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 793, 796, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 864, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 947, 975, 987, 1001, 1002, 1003, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "sample_weight1": 235, "sample_weight2": 235, "sample_weight_const": 348, "sample_weight_last_ten": 348, "sample_weight_vect": 925, "sample_without_replac": [389, 1036], "samples_weight": 212, "samplewis": [751, 987], "samson": 1037, "samuel": [694, 1012, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "samuela": 1033, "samu\u00ebl": 1037, "san": [148, 377, 415, 999], "sanchez": [175, 1038, 1039], "sandeep": 1042, "sander": [407, 418, 442, 444, 448, 455, 845, 993, 1039, 1040], "sandi": 1043, "sandip": 1047, "sandra": [1039, 1045], "sandro": [1038, 1045], "sandrocasagrand": [1038, 1039], "sandrovskii": 1037, "sangam": 1045, "sangamswadik": 1045, "sangeeth": 1039, "saniti": [383, 863, 987, 1030, 1031], "sanjabi": 1040, "sanjai": 1044, "sanjai_3": [1045, 1046], "sanjoi": [893, 999], "sano": 1044, "sanofi": 12, "santa": [159, 1045], "santana": [1041, 1044], "santhanam": 1038, "santhosh": 1041, "santhoshbala18": 1041, "santi": [1035, 1037, 1038], "santiago": 1041, "sap": 12, "sapiro": [412, 529, 535], "saqib": 1038, "sara": 1043, "sarah": [1037, 1039, 1042], "sarahremu": 1045, "sarajpoor": 1045, "sarat": 1041, "sarawagi": 780, "sarra": 1040, "sartaj": 1036, "sasank": 1036, "sashka": [1045, 1046], "sassenhagen": [105, 1042, 1047], "sat": [4, 127, 170, 415], "satellit": 990, "satisfi": [407, 648, 652, 697, 715, 733, 734, 839, 840], "satish": 1038, "sato": 1033, "satrajit": [0, 2, 1030, 1031], "satur": [37, 169, 305], "sauerbrei": 997, "sauerkraut": 415, "saul": [687, 691, 984, 1037, 1038, 1040], "saurabh": [1034, 1035, 1036, 1037, 1038, 1042], "sauvignon": 311, "saval": 1039, "savard": 1030, "save": [53, 70, 72, 238, 302, 379, 380, 384, 386, 387, 388, 394, 401, 411, 419, 466, 532, 533, 625, 839, 840, 897, 983, 987, 997, 1003, 1012, 1023, 1030, 1033, 1037, 1040, 1048], "saver": 1007, "savkomax": 1045, "saw": [96, 200, 203, 1022], "sawtooth": [96, 1022], "say_hello": 948, "sc": [374, 407], "scaja": 1047, "scala": 1008, "scalabl": [42, 44, 62, 166, 174, 176, 233, 253, 276, 320, 352, 380, 407, 414, 415, 446, 489, 500, 587, 638, 802, 813, 823, 825, 837, 860, 869, 871, 899, 901, 904, 905, 979, 982, 984, 987, 1000, 1002, 1009, 1012, 1030, 1033, 1034, 1040, 1041, 1044, 1045], "scalar": [95, 318, 386, 394, 403, 408, 417, 419, 462, 465, 522, 531, 613, 614, 615, 620, 621, 625, 626, 628, 735, 739, 915, 923, 979, 991, 993, 997, 1001, 1007, 1040, 1041, 1044, 1046], "scalarmapp": 30, "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 56, 58, 61, 71, 72, 79, 82, 86, 97, 100, 122, 129, 148, 151, 152, 153, 156, 157, 158, 160, 166, 170, 175, 179, 180, 187, 190, 199, 201, 203, 213, 214, 215, 217, 219, 222, 226, 228, 234, 238, 250, 257, 260, 261, 262, 263, 267, 286, 288, 300, 301, 302, 304, 305, 313, 316, 319, 321, 322, 330, 333, 335, 338, 342, 349, 362, 365, 366, 372, 373, 374, 377, 380, 385, 389, 392, 393, 394, 406, 407, 408, 412, 414, 415, 416, 417, 444, 445, 448, 449, 455, 462, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 499, 508, 512, 513, 522, 532, 536, 538, 539, 545, 547, 548, 559, 560, 580, 588, 589, 595, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 629, 630, 639, 642, 643, 644, 645, 647, 650, 656, 657, 658, 659, 660, 670, 672, 674, 675, 676, 679, 685, 686, 687, 688, 690, 692, 697, 701, 714, 738, 744, 754, 756, 766, 772, 774, 810, 813, 825, 826, 827, 839, 840, 841, 856, 857, 860, 863, 868, 869, 871, 874, 876, 877, 879, 884, 885, 886, 888, 889, 891, 892, 899, 900, 901, 902, 903, 904, 905, 962, 963, 964, 965, 968, 976, 979, 980, 983, 987, 988, 989, 990, 991, 995, 1001, 1002, 1008, 1009, 1012, 1014, 1021, 1022, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "scale_": [647, 868, 869, 877, 879, 889, 997, 1035], "scaled_clf": 310, "scaled_pca": 310, "scaled_x_train": 310, "scaler": [6, 71, 73, 128, 166, 215, 216, 233, 238, 240, 242, 286, 291, 304, 309, 310, 313, 320, 338, 341, 362, 385, 408, 411, 488, 656, 657, 670, 672, 685, 859, 868, 869, 871, 875, 876, 877, 879, 884, 885, 886, 887, 888, 889, 890, 991, 997, 1001, 1009, 1019, 1030, 1035, 1038, 1043], "scaler2": 242, "scalewai": 388, "scaling_": 548, "scalings_": [547, 548], "scanpi": 1047, "scatter": [4, 9, 11, 12, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 56, 57, 58, 59, 60, 62, 67, 80, 86, 91, 92, 97, 99, 100, 101, 103, 112, 113, 117, 120, 128, 130, 131, 133, 140, 143, 151, 152, 153, 155, 157, 158, 159, 160, 168, 169, 175, 179, 182, 189, 191, 195, 196, 197, 200, 201, 202, 208, 211, 212, 213, 216, 220, 221, 222, 223, 224, 225, 228, 233, 234, 236, 245, 246, 247, 248, 249, 250, 251, 255, 261, 263, 274, 283, 286, 289, 290, 291, 292, 293, 294, 295, 299, 305, 307, 308, 310, 319, 327, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 351, 357, 358, 359, 409, 629, 699, 955, 981, 983, 1021, 1022], "scatter_": 699, "scatter_fig": 117, "scatter_kwarg": [4, 13, 75, 132, 169, 699], "scatter_trac": 117, "scatterplot": [85, 178, 260], "scatterpoint": [99, 103, 223, 247, 327], "scenario": [57, 70, 127, 151, 175, 203, 263, 362, 387, 397, 411, 414, 535, 541, 543, 544, 981, 987, 997, 1040], "scene": [377, 388, 990, 992, 1043], "schapir": [11, 278, 296, 375, 414, 496, 551, 552], "schedul": [127, 300, 367, 674, 675, 676, 856, 857, 1001, 1012, 1037], "scheidegg": 1030, "scheme": [269, 288, 311, 312, 375, 394, 407, 411, 413, 415, 564, 588, 656, 657, 703, 809, 866, 867, 870, 872, 876, 880, 883, 888, 899, 904, 976, 983, 997, 1001, 1030, 1038, 1041, 1042, 1047], "scherer": 1036, "scheubrein": 1042, "schloss": 987, "schl\u00fcter": [1030, 1038], "schmerler": 1045, "schmid": [755, 756, 985], "schmidt": [656, 983, 1033], "schmitt": [1040, 1041], "schmitz": 1047, "schneider": [351, 1043], "schoelkopf": 895, "schoentgen": [1038, 1039], "schofield": 1030, "schole": 1042, "scholkopf1997": 412, "scholkopf1998": 997, "school": [70, 169, 377, 407, 785, 987], "schreiber": [0, 2, 1035, 1036, 1037], "schroeder": [6, 375], "schubert": [407, 418, 442, 448, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1044], "schucker": 1036, "schuder": [1038, 1039, 1040], "schuetz": [834, 838], "schuldt": 1034, "schult": 17, "schulz": 1030, "schumach": [1033, 1034, 1035], "schut": 1030, "schwardt": 1030, "schwartz": [1030, 1032, 1044], "schwetlick": [1041, 1042], "sch\u00f6lkopf": [5, 412, 533, 865, 993, 997, 1002], "sch\u00f6nberger": [1032, 1033], "sch\u00fctze": [412, 588, 985, 987, 989], "sci": [19, 70, 351, 352, 353, 375, 392, 486, 687, 691, 870, 984, 997, 1023], "scibol": 1041, "scienc": [0, 38, 80, 148, 159, 169, 278, 374, 377, 392, 407, 438, 452, 536, 538, 545, 686, 687, 691, 846, 977, 979, 983, 984, 987, 990, 999, 1008, 1012, 1017, 1038], "scientif": [0, 32, 138, 139, 140, 233, 369, 374, 378, 392, 397, 407, 450, 460, 499, 1012, 1015], "scientifiqu": 0, "scientist": [977, 1012], "scikera": 1007, "scikit": [6, 8, 10, 12, 13, 15, 17, 31, 32, 50, 55, 70, 71, 109, 115, 116, 117, 118, 121, 127, 129, 132, 145, 147, 148, 160, 163, 164, 166, 169, 170, 171, 172, 175, 180, 187, 188, 199, 200, 201, 217, 227, 230, 238, 240, 241, 242, 253, 257, 265, 269, 272, 276, 278, 281, 283, 285, 288, 290, 311, 314, 323, 342, 351, 352, 356, 357, 362, 367, 368, 369, 372, 374, 375, 376, 377, 379, 380, 383, 386, 387, 388, 389, 393, 394, 398, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 429, 430, 431, 436, 441, 444, 445, 448, 455, 462, 463, 465, 466, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 510, 513, 519, 522, 536, 539, 559, 560, 562, 563, 565, 574, 579, 580, 581, 587, 597, 600, 609, 624, 626, 628, 630, 632, 636, 638, 644, 646, 650, 656, 667, 678, 686, 698, 699, 700, 715, 729, 739, 745, 775, 776, 777, 785, 792, 796, 797, 798, 799, 800, 801, 802, 810, 813, 814, 815, 816, 817, 818, 821, 822, 825, 827, 828, 841, 843, 859, 860, 862, 864, 866, 869, 871, 872, 873, 874, 878, 879, 880, 883, 896, 897, 899, 904, 907, 908, 930, 931, 953, 954, 955, 976, 977, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 997, 1000, 1001, 1002, 1003, 1006, 1009, 1011, 1017, 1018, 1019, 1021, 1022, 1025, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "scikit_learn": 1007, "scikit_learn_data": [375, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "scipi": [0, 6, 14, 17, 19, 41, 46, 47, 53, 54, 78, 79, 82, 96, 98, 102, 123, 151, 169, 172, 185, 189, 201, 246, 250, 251, 257, 260, 268, 272, 283, 288, 293, 302, 316, 317, 322, 325, 326, 366, 374, 375, 378, 380, 382, 386, 388, 389, 392, 393, 394, 397, 400, 406, 407, 412, 415, 448, 449, 450, 451, 455, 460, 461, 494, 501, 506, 530, 532, 533, 539, 542, 579, 580, 583, 584, 586, 587, 608, 609, 646, 647, 651, 655, 656, 657, 661, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 678, 682, 685, 689, 690, 693, 757, 760, 775, 776, 777, 778, 789, 790, 800, 808, 810, 825, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 862, 871, 872, 877, 878, 879, 882, 886, 889, 890, 899, 901, 902, 904, 905, 933, 937, 938, 942, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 976, 977, 983, 985, 988, 990, 991, 997, 1001, 1002, 1006, 1008, 1017, 1019, 1022, 1023, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "sckit": 1046, "scls19fr": 1035, "scognamiglio": 414, "scope": [6, 19, 366, 368, 380, 392, 415, 1007, 1008, 1019], "score": [4, 6, 8, 11, 13, 20, 21, 24, 25, 26, 27, 31, 32, 33, 37, 58, 60, 70, 71, 72, 73, 74, 75, 78, 82, 86, 102, 109, 111, 113, 120, 121, 122, 123, 124, 127, 128, 131, 132, 139, 143, 144, 145, 148, 163, 166, 168, 169, 170, 171, 172, 175, 183, 190, 191, 194, 199, 201, 205, 207, 215, 217, 228, 233, 234, 235, 238, 242, 249, 253, 258, 260, 261, 262, 263, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 278, 281, 290, 291, 292, 299, 300, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 322, 325, 326, 328, 329, 338, 346, 351, 352, 356, 362, 375, 380, 382, 385, 393, 394, 401, 402, 403, 404, 405, 406, 408, 410, 412, 414, 416, 424, 426, 430, 435, 441, 445, 447, 450, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 500, 502, 530, 534, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 602, 604, 607, 608, 609, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 739, 752, 753, 754, 779, 780, 781, 782, 783, 784, 785, 786, 791, 792, 793, 794, 795, 796, 799, 800, 802, 810, 815, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 848, 849, 850, 855, 856, 857, 859, 879, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 938, 945, 976, 979, 983, 985, 990, 993, 995, 997, 1001, 1008, 1009, 1017, 1019, 1021, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "score_df": 25, "score_differ": 265, "score_estim": [199, 217], "score_full_data": 163, "score_func": [37, 71, 72, 416, 590, 593, 594, 596, 597, 598, 739, 1030, 1032, 1047], "score_iri": 266, "score_iterative_imput": 163, "score_label": [217, 266], "score_mean": 341, "score_nam": [25, 37, 234, 262, 275, 321, 352, 802, 818], "score_param": [657, 1047], "score_rand": 266, "score_sampl": [249, 288, 289, 290, 296, 394, 413, 467, 530, 539, 561, 675, 794, 795, 796, 799, 800, 810, 844, 845, 855, 859, 903, 993, 1033, 1038, 1040, 1042], "score_simple_imput": 163, "score_std": 341, "score_tim": [262, 411, 822, 823], "score_times_nb": 262, "score_times_svm": 262, "score_typ": [234, 262, 275, 321, 802, 818, 1046], "score_valu": 352, "scorer": [127, 132, 217, 264, 322, 382, 394, 398, 411, 414, 416, 559, 560, 592, 600, 632, 657, 671, 673, 709, 729, 730, 739, 796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 945, 976, 983, 987, 995, 1008, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "scorer1_nam": 411, "scorer2_nam": 411, "scorer_": [796, 799, 800, 810], "scorer_nam": [264, 796, 810], "scores_": [178, 179, 590, 593, 594, 596, 597, 598, 642, 643, 657, 1030, 1040], "scores_df": 13, "scores_glm_pure_premium": 217, "scores_matrix": 271, "scores_max": 17, "scores_product_model": 217, "scores_std": [138, 1018], "scoring_inner_cv": 322, "scoring_on_bootstrap": 263, "scoring_weight": 398, "scott": [413, 844, 1030, 1031, 1036, 1038, 1039, 1040, 1045, 1046], "scratch": [381, 440, 987, 1032], "screen": [9, 1043], "screenporch": 121, "screenshot": 378, "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 367, 380, 381, 382, 383, 384, 386, 392, 394, 397, 415, 1008, 1011, 1023], "scrollbar": 385, "scrutin": 269, "scsi": 19, "scullei": 407, "sd345": 1023, "sdca": 1007, "sdenton4": 1033, "sdg_param": 329, "se": [148, 222, 377, 397], "seabold": [1033, 1035, 1036], "seaborn": [37, 112, 127, 168, 169, 178, 183, 250, 260, 380, 397, 400, 1007], "seagreen": 193, "seal": 1036, "seamu": 1032, "sean": [1042, 1043, 1045], "seanpwilliam": 1037, "sear": 1036, "search": [6, 27, 46, 54, 71, 72, 73, 74, 124, 143, 145, 147, 148, 151, 166, 217, 229, 234, 235, 250, 253, 259, 261, 264, 265, 267, 272, 276, 281, 283, 285, 287, 302, 307, 320, 338, 345, 351, 362, 369, 377, 378, 380, 382, 392, 394, 402, 407, 408, 411, 414, 415, 416, 418, 441, 446, 448, 450, 455, 456, 459, 462, 469, 470, 476, 500, 513, 520, 555, 556, 557, 558, 562, 563, 564, 577, 597, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 626, 651, 674, 686, 687, 690, 691, 711, 725, 782, 785, 796, 799, 800, 807, 808, 810, 812, 825, 826, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 859, 904, 907, 908, 909, 910, 941, 975, 980, 982, 984, 987, 990, 991, 1001, 1003, 1007, 1008, 1009, 1014, 1015, 1017, 1019, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1044, 1045, 1047], "search_05p": 124, "search_95p": 124, "search_cv": 71, "searchcv": [393, 1045], "searcher": 1023, "searchforpass": 1046, "searchgrid": 1008, "searchsort": 11, "season": [4, 13, 156, 170, 200, 379], "seasonal_kernel": 156, "seasoncountstru32": 13, "sebastian": [310, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "sebastianraschka": 310, "sebastien": 1038, "sebastin": [1037, 1038], "sebasti\u00e1n": 1036, "seberg": 1031, "sec": [10, 207, 222, 225, 283], "sec65": 1045, "secant": 640, "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 375, 382, 384, 386, 394, 404, 407, 411, 412, 414, 415, 417, 462, 465, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 502, 508, 551, 581, 586, 587, 588, 589, 619, 622, 629, 630, 697, 710, 714, 755, 756, 760, 761, 763, 764, 771, 772, 773, 774, 775, 778, 796, 799, 800, 810, 823, 829, 830, 833, 836, 847, 849, 850, 851, 856, 857, 976, 977, 981, 982, 983, 984, 987, 988, 989, 990, 991, 994, 997, 998, 1003, 1014, 1020, 1022, 1045], "secondari": [633, 1034], "secondli": [378, 392, 407, 414, 655, 983, 1023], "sect": 5, "section": [4, 37, 95, 100, 114, 122, 127, 132, 138, 139, 140, 156, 160, 168, 169, 170, 172, 178, 183, 187, 188, 201, 224, 229, 235, 238, 240, 258, 260, 263, 269, 310, 311, 312, 317, 351, 352, 353, 362, 373, 375, 378, 380, 381, 382, 384, 385, 386, 387, 388, 395, 398, 401, 405, 406, 408, 410, 411, 412, 414, 415, 416, 417, 437, 441, 457, 532, 612, 617, 620, 635, 643, 785, 795, 901, 904, 976, 981, 983, 987, 988, 990, 991, 993, 994, 1001, 1002, 1004, 1006, 1021, 1023, 1030, 1032, 1033, 1034, 1037], "sector": 169, "sector_construct": 169, "sector_manufactur": 169, "sector_oth": 169, "secur": [384, 394, 1007, 1008, 1012, 1025], "sed": [384, 1030], "sedamaki": 1044, "sedykh": 1045, "see": [0, 4, 5, 7, 13, 20, 24, 25, 27, 37, 44, 49, 50, 53, 55, 57, 58, 62, 64, 65, 67, 69, 80, 86, 89, 90, 95, 100, 101, 105, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 124, 125, 127, 129, 132, 138, 144, 145, 146, 148, 151, 156, 157, 158, 163, 166, 169, 170, 172, 175, 178, 179, 180, 183, 190, 200, 201, 202, 203, 205, 216, 217, 220, 222, 230, 232, 235, 238, 239, 240, 242, 246, 247, 248, 254, 255, 257, 259, 260, 261, 262, 263, 267, 269, 270, 271, 274, 275, 278, 283, 289, 290, 292, 296, 305, 311, 312, 315, 316, 317, 318, 319, 320, 321, 327, 338, 342, 346, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 372, 373, 374, 375, 377, 378, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 397, 403, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 431, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 607, 608, 609, 612, 617, 620, 621, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 699, 704, 706, 709, 711, 740, 760, 771, 775, 776, 777, 778, 785, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 935, 936, 956, 958, 961, 971, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1012, 1014, 1016, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "seed": [7, 11, 26, 27, 34, 39, 40, 44, 45, 52, 54, 57, 59, 60, 64, 65, 71, 78, 79, 80, 92, 96, 101, 114, 120, 140, 143, 171, 189, 194, 197, 202, 205, 208, 212, 216, 223, 246, 248, 249, 250, 251, 263, 266, 274, 288, 289, 290, 295, 343, 344, 348, 352, 362, 367, 382, 389, 392, 394, 407, 411, 412, 441, 445, 446, 448, 450, 455, 457, 458, 459, 460, 469, 470, 471, 534, 542, 551, 552, 553, 554, 557, 558, 625, 644, 645, 650, 651, 658, 659, 660, 661, 675, 687, 689, 691, 693, 794, 795, 800, 830, 833, 848, 902, 922, 935, 936, 952, 956, 976, 977, 982, 984, 1021, 1022, 1034, 1035, 1039, 1040, 1046], "seeger": [637, 979], "seek": [220, 222, 224, 379, 380, 392, 395, 506, 507, 984, 1015, 1017], "seel": 1044, "seem": [4, 9, 13, 46, 55, 124, 127, 170, 199, 224, 228, 261, 278, 300, 309, 346, 351, 352, 379, 380, 385, 411, 499, 983, 987], "seemingli": [217, 362, 392], "seen": [17, 25, 40, 55, 66, 82, 98, 104, 118, 124, 127, 169, 170, 195, 224, 231, 235, 300, 305, 338, 351, 375, 382, 384, 393, 394, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 423, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 519, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 621, 625, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 962, 968, 976, 982, 987, 990, 991, 997, 1003, 1012, 1018, 1019, 1021, 1022, 1042, 1043, 1044, 1045, 1046, 1047], "segfault": [367, 381, 1030, 1038, 1043], "seglearn": 1007, "segment": [12, 14, 17, 21, 36, 47, 48, 53, 68, 98, 166, 223, 231, 375, 388, 407, 415, 450, 460, 506, 507, 689, 855, 987, 1007, 1009, 1012, 1038, 1040, 1042], "seguin": 1035, "sei": 415, "seismic_r": [178, 183], "sejourn": 1039, "sel": [398, 416], "seladu": 1046, "seldom": 899, "sele": [1044, 1045], "selecci\u00f3n": 311, "select": [4, 7, 9, 10, 13, 20, 34, 36, 37, 44, 47, 55, 57, 62, 65, 68, 69, 71, 74, 76, 78, 82, 92, 94, 95, 99, 104, 105, 106, 111, 113, 119, 121, 124, 127, 132, 143, 145, 149, 156, 158, 169, 170, 172, 175, 177, 179, 181, 183, 185, 186, 198, 203, 207, 214, 217, 218, 221, 228, 232, 234, 238, 244, 245, 246, 247, 251, 252, 258, 259, 260, 261, 265, 273, 287, 305, 310, 311, 317, 321, 325, 326, 329, 333, 338, 346, 349, 351, 352, 353, 362, 366, 367, 369, 375, 377, 378, 380, 382, 388, 393, 394, 404, 407, 408, 409, 412, 414, 415, 417, 441, 443, 444, 445, 447, 449, 451, 456, 457, 458, 462, 464, 465, 470, 471, 474, 486, 487, 490, 491, 494, 495, 498, 499, 500, 502, 510, 513, 530, 532, 533, 538, 539, 542, 547, 549, 556, 557, 558, 561, 563, 579, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 625, 629, 630, 643, 644, 645, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 669, 671, 674, 676, 680, 681, 689, 690, 695, 710, 714, 716, 751, 785, 789, 790, 794, 795, 796, 799, 800, 801, 802, 810, 821, 822, 823, 825, 827, 841, 842, 843, 845, 847, 849, 850, 851, 859, 860, 864, 869, 875, 879, 896, 899, 900, 904, 907, 908, 909, 910, 915, 956, 957, 981, 982, 984, 986, 987, 988, 990, 991, 993, 997, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1017, 1021, 1022, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "select__k": 976, "select_dtyp": [75, 121, 320, 464], "selected_featur": 172, "selected_features_nam": 172, "selectfdr": [416, 590, 594, 596, 597, 598, 604, 1034, 1036, 1037, 1046], "selectfpr": [380, 416, 590, 593, 596, 597, 598, 604, 1046], "selectfrommodel": [148, 394, 398, 591, 600, 601, 1010, 1025, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1047], "selectfw": [416, 590, 593, 594, 597, 598, 604, 1046], "selectkbest": [72, 74, 144, 145, 319, 362, 380, 398, 408, 416, 579, 590, 593, 594, 596, 598, 604, 976, 1031, 1036, 1046, 1047], "selectkbestselectkbest": [145, 319], "selector": [13, 71, 144, 145, 238, 346, 388, 415, 416, 464, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 1032, 1040, 1042, 1046], "selectormixin": 1041, "selectpercentil": [54, 71, 242, 341, 416, 590, 593, 594, 596, 597, 601, 604, 1031, 1036, 1046, 1047], "selectpercentileselectpercentil": [71, 242], "self": [8, 19, 25, 27, 56, 65, 92, 109, 159, 166, 172, 235, 270, 272, 283, 324, 330, 331, 338, 351, 374, 380, 381, 382, 385, 386, 387, 388, 407, 415, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 498, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 701, 794, 795, 796, 797, 798, 799, 800, 803, 805, 810, 814, 815, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 944, 945, 947, 948, 953, 961, 990, 1008, 1009, 1010, 1012, 1025, 1032, 1037, 1044], "self_request": 235, "self_training_clf": 328, "self_training_model": [317, 896], "selftrain": 329, "selftrainingclassifi": [317, 328, 329, 330, 398, 1000, 1042, 1047], "selftrainingclassifierifittedselftrainingclassifi": 317, "seljak": 1045, "sell": 75, "selvan": 1042, "semant": [15, 351, 352, 394, 542, 1023, 1024, 1025, 1032], "semi": [8, 19, 31, 56, 70, 109, 130, 140, 153, 159, 233, 236, 307, 317, 331, 335, 338, 341, 342, 353, 369, 375, 394, 486, 502, 533, 586, 588, 674, 726, 825, 859, 863, 894, 895, 896, 904, 985, 990, 993, 1009, 1010, 1025, 1030, 1042, 1045], "semi_supervis": [166, 317, 319, 324, 325, 326, 327, 328, 329, 330, 331, 369, 398, 988, 1000, 1009, 1031, 1036, 1037, 1044, 1045], "semiconductor": 1012, "semidefinit": [997, 1002], "semilogi": 232, "semilogx": [138, 188, 273, 1018], "semin": 414, "seminar": 987, "semisupervis": [325, 394], "sen": [166, 177, 202, 205, 218, 305, 647, 655, 669, 676, 677, 1009], "send": [380, 407, 419, 531], "sender": [351, 375], "sendyk": 1039, "seng": 1042, "senger": [0, 1046, 1047, 1048], "senior": [997, 1012], "sens": [3, 4, 13, 16, 17, 25, 55, 66, 157, 166, 169, 175, 232, 235, 305, 311, 326, 338, 351, 362, 366, 380, 381, 394, 407, 409, 411, 416, 460, 467, 468, 469, 470, 471, 472, 473, 474, 650, 653, 654, 670, 797, 807, 896, 981, 983, 990, 991, 993, 997, 1000, 1009], "sensibl": [52, 163, 278, 352, 382, 983, 997], "sensit": [4, 44, 55, 80, 81, 114, 124, 170, 201, 202, 203, 228, 238, 305, 338, 367, 368, 395, 409, 414, 450, 460, 690, 710, 711, 785, 879, 982, 983, 984, 986, 987, 991, 993, 1001, 1002, 1014, 1022, 1034], "sensor": 183, "sent": [127, 407, 828], "sentenc": [70, 351, 353, 375, 395, 415], "sentiment": 1015, "seoeun": 1046, "sep": [92, 269], "sepal": [45, 90, 103, 105, 120, 153, 182, 242, 286, 317, 320, 335, 377, 997, 1020, 1021], "sepal_col": 320, "separ": [13, 14, 24, 25, 30, 31, 40, 55, 60, 62, 66, 73, 80, 91, 94, 95, 97, 100, 106, 111, 113, 116, 119, 123, 130, 148, 154, 164, 166, 170, 171, 175, 177, 198, 200, 218, 221, 236, 247, 260, 263, 269, 270, 305, 307, 310, 317, 328, 333, 334, 336, 337, 338, 342, 343, 349, 351, 362, 366, 376, 377, 382, 385, 388, 392, 394, 405, 407, 408, 409, 412, 414, 415, 417, 462, 510, 517, 531, 536, 538, 539, 545, 547, 579, 586, 587, 589, 608, 629, 636, 644, 645, 671, 674, 675, 688, 692, 722, 729, 742, 743, 745, 750, 789, 815, 831, 832, 858, 859, 901, 903, 904, 909, 910, 976, 977, 979, 981, 983, 984, 986, 993, 994, 997, 1001, 1002, 1009, 1019, 1021, 1022, 1030, 1033, 1035, 1036, 1040, 1042, 1043, 1046, 1047], "septemb": [731, 987, 1030, 1033, 1036, 1038, 1043, 1046], "seq": 631, "seq_dataset": [1030, 1040], "seqlearn": 392, "sequenc": [12, 111, 120, 187, 223, 382, 394, 408, 411, 412, 414, 415, 501, 510, 551, 559, 560, 567, 568, 579, 580, 586, 587, 589, 644, 796, 799, 807, 825, 859, 883, 939, 940, 950, 958, 961, 1007, 1030, 1033, 1035, 1036], "sequencekernel": 159, "sequenti": [13, 120, 142, 145, 149, 166, 193, 261, 317, 378, 412, 414, 415, 498, 499, 532, 591, 595, 600, 601, 603, 604, 644, 645, 650, 651, 656, 658, 659, 660, 661, 671, 785, 859, 860, 879, 977, 995, 1001, 1007, 1009, 1010, 1025, 1030, 1039, 1042], "sequentialfeatureselector": [148, 398, 416, 591, 595, 601, 1042, 1043, 1044, 1045, 1046], "sergei": [407, 1032, 1036, 1037, 1038, 1039, 1040], "sergeyf": 1032, "sergio": [1030, 1032, 1033, 1042, 1045], "sergiodsr": 1041, "sergul": [1037, 1038, 1041], "seri": [3, 4, 12, 16, 20, 82, 118, 124, 127, 166, 168, 171, 172, 181, 199, 201, 203, 217, 220, 242, 264, 265, 312, 319, 325, 372, 375, 385, 394, 407, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 539, 560, 688, 692, 699, 739, 742, 743, 745, 787, 817, 821, 822, 825, 915, 978, 983, 984, 988, 990, 1001, 1007, 1009, 1033, 1036, 1037, 1038, 1042, 1045, 1047, 1048], "serial": [394, 421, 943, 1007, 1008, 1025, 1030, 1038, 1042, 1047], "serious": 989, "serum": [148, 377], "serv": [70, 99, 111, 157, 263, 342, 408, 549, 636, 979, 1044], "server": [0, 148, 366, 377, 378, 494, 1011, 1038], "servic": [0, 4, 229, 238, 380, 384, 1012, 1038], "session": [382, 386, 392, 397, 1006, 1012, 1023], "set": [3, 4, 5, 6, 7, 8, 11, 13, 14, 16, 20, 25, 26, 27, 30, 31, 34, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 71, 73, 80, 81, 82, 86, 90, 94, 95, 99, 100, 103, 106, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 134, 138, 144, 145, 148, 151, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 178, 182, 183, 184, 187, 188, 190, 192, 194, 195, 196, 198, 199, 200, 201, 204, 207, 212, 213, 217, 220, 221, 222, 228, 229, 230, 231, 233, 234, 235, 238, 242, 245, 247, 249, 250, 254, 255, 258, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 274, 278, 281, 285, 289, 290, 291, 292, 293, 296, 300, 301, 302, 305, 307, 309, 310, 311, 312, 315, 317, 318, 322, 325, 326, 329, 330, 335, 337, 340, 342, 346, 351, 352, 353, 358, 359, 360, 362, 366, 367, 368, 369, 372, 373, 375, 377, 378, 380, 382, 384, 385, 387, 388, 393, 394, 395, 397, 398, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 486, 487, 491, 493, 494, 495, 497, 500, 501, 502, 506, 507, 508, 513, 521, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 696, 697, 698, 699, 700, 701, 711, 712, 717, 719, 720, 723, 724, 725, 726, 727, 728, 731, 735, 737, 738, 742, 743, 745, 747, 748, 750, 753, 776, 777, 779, 780, 781, 782, 784, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 919, 920, 930, 931, 936, 940, 943, 944, 955, 956, 957, 958, 961, 962, 968, 971, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1015, 1017, 1018, 1019, 1022, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "set1": [260, 292, 293], "set_": [398, 1048], "set_alpha": [34, 245, 246, 247, 250, 251], "set_arrai": [12, 223, 231], "set_aspect": [4, 154, 210, 247, 347], "set_autoscaley_on": 42, "set_axis_bgcolor": 82, "set_axis_off": 32, "set_axisbelow": 10, "set_box_aspect": 34, "set_clim": 287, "set_clip_box": [34, 245, 246, 247, 250, 251], "set_color": [7, 210], "set_config": [235, 240, 242, 312, 316, 322, 366, 367, 398, 408, 435, 441, 442, 445, 447, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 595, 608, 609, 624, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 1039, 1041, 1044, 1046], "set_constrained_layout_pad": 95, "set_edgecolor": 95, "set_facecolor": [82, 245], "set_fit_request": [235, 322, 398, 435, 441, 442, 445, 447, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 586, 589, 592, 633, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 688, 831, 832, 834, 835, 836, 837, 838, 844, 864, 865, 878, 879, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910], "set_fmt_str_length": 13, "set_i": 57, "set_index": [25, 111, 124, 156, 188, 217, 260, 311, 352], "set_inverse_transform_request": [531, 579, 866, 879], "set_label": [40, 154, 232], "set_label_posit": 7, "set_linewidth": [12, 223, 231], "set_major_formatt": [220, 222, 225, 283, 288], "set_major_loc": [220, 288], "set_output": [71, 166, 170, 227, 240, 243, 310, 311, 383, 431, 440, 441, 443, 445, 447, 462, 466, 480, 481, 482, 483, 494, 502, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 656, 686, 687, 690, 825, 843, 848, 851, 855, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 1009, 1045, 1046, 1047], "set_param": [98, 105, 115, 121, 124, 170, 171, 179, 187, 188, 192, 203, 207, 233, 238, 273, 286, 315, 341, 352, 383, 394, 407, 408, 414, 417, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 977, 993, 1014, 1021, 1022, 1030, 1036, 1037, 1038, 1043, 1044], "set_partial_fit_request": [447, 532, 536, 664, 665, 666, 674, 675, 676, 827, 828, 831, 832, 834, 835, 836, 837, 838, 856, 879], "set_path_effect": 40, "set_posit": [67, 101, 210, 305], "set_predict_proba_request": [907, 909], "set_predict_request": [235, 480, 481, 482, 550, 609, 633, 642, 643, 907, 908, 909, 910], "set_printopt": 254, "set_prop_cycl": 200, "set_score_request": [235, 322, 398, 435, 441, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 849, 850, 856, 857, 859, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 987], "set_siz": 290, "set_size_inch": [60, 138, 239], "set_split_request": [797, 798, 803, 805, 814], "set_start_method": 392, "set_stat": 976, "set_tick_param": 245, "set_ticklabel": [45, 90, 101, 196, 351], "set_titl": [8, 10, 15, 25, 27, 30, 31, 32, 34, 42, 43, 45, 53, 55, 57, 60, 64, 65, 72, 75, 80, 90, 92, 100, 105, 111, 116, 118, 122, 128, 130, 132, 133, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 188, 190, 197, 199, 200, 201, 207, 220, 221, 224, 225, 231, 233, 234, 238, 239, 245, 254, 255, 256, 257, 260, 262, 263, 267, 271, 272, 275, 278, 281, 283, 286, 287, 288, 293, 299, 300, 305, 306, 307, 308, 309, 310, 315, 319, 325, 326, 335, 342, 346, 347, 348, 351, 356], "set_transform_request": [235, 480, 481, 482, 531, 580, 586, 588, 589, 633, 862, 865, 871, 879], "set_vis": [15, 34, 287, 293, 305], "set_xlabel": [7, 10, 45, 53, 60, 72, 73, 75, 90, 92, 100, 122, 160, 163, 164, 168, 170, 171, 172, 175, 188, 194, 196, 197, 199, 201, 214, 215, 233, 260, 262, 266, 271, 272, 275, 278, 288, 305, 306, 310, 328, 352, 353, 356], "set_xlim": [31, 42, 60, 75, 80, 92, 116, 130, 164, 170, 197, 199, 204, 233, 245, 264, 266, 278, 288, 299, 305, 307, 308, 309, 310, 316, 322, 347], "set_xscal": [188, 204], "set_xtick": [4, 8, 10, 31, 43, 60, 64, 105, 130, 134, 170, 172, 190, 215, 233, 245, 271, 272, 281, 299, 301, 307, 308, 335], "set_xticklabel": [8, 10, 80, 105, 134, 154, 170, 172, 271, 272, 281], "set_ylabel": [7, 8, 10, 30, 34, 45, 53, 60, 65, 72, 73, 75, 80, 90, 92, 100, 105, 111, 118, 122, 160, 170, 175, 188, 190, 194, 196, 197, 199, 201, 203, 214, 233, 245, 260, 262, 266, 271, 272, 281, 288, 305, 306, 310, 315, 328, 346, 352, 356, 1019], "set_ylim": [8, 10, 31, 42, 60, 72, 92, 116, 129, 130, 160, 170, 179, 197, 199, 200, 233, 245, 264, 275, 281, 288, 299, 305, 307, 308, 310, 316, 322, 328, 347], "set_yscal": [122, 199], "set_ytick": [4, 31, 43, 60, 64, 105, 130, 163, 164, 172, 190, 215, 245, 271, 299, 301, 307, 308, 335, 353], "set_yticklabel": [105, 154, 163, 164, 172, 271, 353], "set_zlabel": [45, 90, 196], "set_zord": 97, "setattr": 382, "setdefault": [17, 914], "setdiff1d": 345, "seth": 1036, "sethdandridg": 1034, "setminu": 1003, "setosa": [45, 90, 101, 103, 269, 270, 377, 502, 1014, 1021], "setp": [8, 10, 271, 274], "settabl": 987, "settingwithcopywarn": 170, "settl": 1048, "setup": [267, 269, 366, 378, 382, 386, 388, 990, 1015], "setuptool": 378, "seuclidean": [448, 455, 697, 775, 776, 777, 846, 990, 1038, 1041, 1042], "seuclideandist": 697, "seung": 412, "seven": [375, 980], "seventh": [509, 999], "sever": [0, 4, 9, 12, 13, 25, 27, 31, 34, 37, 55, 56, 57, 61, 74, 91, 114, 127, 130, 132, 135, 145, 148, 151, 156, 157, 166, 169, 175, 183, 188, 199, 203, 219, 220, 223, 224, 225, 226, 232, 247, 255, 260, 265, 283, 285, 300, 305, 318, 346, 351, 352, 366, 374, 375, 377, 380, 382, 385, 388, 392, 394, 404, 406, 407, 408, 411, 413, 414, 415, 417, 445, 447, 462, 485, 497, 506, 507, 536, 553, 554, 557, 558, 561, 562, 563, 568, 586, 587, 589, 608, 643, 644, 650, 686, 687, 688, 689, 690, 691, 794, 795, 796, 799, 800, 810, 827, 828, 834, 835, 836, 837, 838, 858, 859, 866, 883, 907, 908, 909, 910, 922, 976, 979, 984, 987, 988, 990, 995, 997, 1001, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1014, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1043, 1046, 1047], "sevin": 1038, "sewook": 1040, "sex": [71, 148, 169, 171, 187, 188, 242, 320, 322, 377, 494, 995, 1021], "sex_mal": 169, "seyedsaman": 1044, "sf": [148, 260, 317, 375, 416, 490, 600], "sfm": 148, "sfs_backward": 148, "sfs_forward": 148, "sfu": [407, 440], "sgd": [7, 8, 11, 79, 91, 104, 113, 123, 124, 133, 140, 154, 155, 166, 177, 180, 184, 190, 191, 206, 213, 218, 228, 249, 268, 300, 301, 318, 334, 339, 340, 343, 344, 348, 351, 357, 362, 368, 502, 510, 629, 647, 664, 665, 666, 669, 674, 675, 676, 677, 856, 857, 976, 991, 1009, 1010, 1025, 1030, 1033, 1034, 1035, 1037, 1041, 1043], "sgdclassifi": [7, 8, 206, 207, 208, 209, 210, 211, 212, 233, 268, 329, 340, 351, 362, 366, 368, 386, 394, 405, 406, 415, 636, 638, 639, 640, 644, 656, 664, 666, 899, 904, 979, 983, 988, 1001, 1002, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "sgdoneclasssvm": [213, 228, 318, 903, 993, 1001, 1043, 1045, 1046, 1047, 1048], "sgdregressor": [10, 210, 366, 368, 392, 406, 644, 647, 665, 669, 674, 677, 857, 900, 905, 983, 1001, 1032, 1034, 1036, 1037, 1038, 1041, 1043, 1044, 1045, 1046, 1048], "sgi": 351, "sgkf": [411, 814], "sgm": 8, "sgml": [8, 366], "sh": [271, 384, 388, 976], "sh_color": 224, "sh_err": 224, "sh_lle": 224, "sh_point": 224, "sh_tsne": 224, "sha256": [8, 1045], "shack": [1040, 1041, 1042], "shade": [20, 53, 182, 286, 291, 334, 412], "shader": 403, "shadi": [1045, 1046], "shadow": [99, 103, 104, 223, 327, 345, 353, 415], "shafer": 70, "shagun": 1036, "shah": [1034, 1035, 1036, 1042], "shahebaz": 1038, "shahriar": 1032, "shaikh": [0, 364, 370, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "shail": 1042, "shakerimoff": 1044, "shalev": [664, 665, 983, 1001], "shalil": 1038, "shall": 156, "shallow": [386, 414, 559, 560, 914], "shamsi": 1038, "shandeng123": 1044, "shane": [65, 1039, 1042, 1045], "shanghai": [687, 691, 984], "shangwu": [1038, 1039], "shankar": 1040, "shanmuga": 1036, "shanno": 983, "shannon": [555, 562, 907, 909, 984, 1003], "shantanu": 780, "shao": [1042, 1043, 1044], "shape": [4, 5, 6, 8, 9, 10, 11, 13, 14, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 41, 46, 47, 48, 51, 52, 53, 54, 55, 58, 60, 61, 66, 70, 74, 75, 80, 95, 96, 98, 112, 117, 118, 119, 120, 121, 124, 125, 126, 127, 130, 131, 140, 144, 146, 152, 153, 155, 157, 158, 163, 164, 166, 170, 171, 187, 188, 199, 201, 206, 208, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 226, 228, 231, 232, 233, 234, 235, 237, 238, 245, 247, 249, 250, 251, 258, 260, 262, 263, 266, 267, 269, 270, 283, 288, 289, 293, 296, 299, 301, 307, 308, 315, 317, 320, 321, 322, 327, 328, 330, 335, 338, 341, 342, 343, 344, 347, 348, 351, 352, 360, 366, 373, 374, 375, 380, 382, 394, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 916, 921, 924, 925, 930, 934, 936, 938, 941, 949, 951, 956, 958, 962, 963, 964, 965, 966, 967, 968, 969, 970, 977, 982, 983, 987, 988, 989, 990, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1009, 1019, 1020, 1022, 1023, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1046, 1047], "shape_fit_": [901, 902, 903, 904, 905], "shape_img": 583, "sharad": 1038, "sharan": [1037, 1038], "share": [34, 85, 130, 169, 250, 351, 360, 362, 366, 367, 382, 388, 407, 412, 415, 547, 666, 702, 706, 794, 795, 799, 800, 981, 994, 1011, 1030, 1032, 1038, 1040, 1042, 1045], "shared_yax": 117, "sharedmem": 1038, "sharei": [4, 13, 34, 75, 92, 100, 105, 133, 160, 170, 199, 201, 207, 262, 271, 288, 306, 311, 345, 346, 352], "sharex": [4, 7, 15, 34, 73, 92, 100, 133, 160, 170, 201, 262, 288, 328, 1019], "sharma": [1034, 1036, 1038, 1039, 1041, 1042, 1044, 1047], "sharmadharmp": 1044, "sharon": [6, 375], "sharova": 1037, "sharp": [4, 170, 994, 997], "sharper": 723, "shashank": [1036, 1042], "shaun": 1031, "shawpan": 1036, "shaymernaturalint": 1044, "she": [380, 889, 890, 1040], "shea": [1038, 1039], "shebanov": [1038, 1039], "sheep": 1012, "sheer": [380, 1012], "sheerman": 1030, "sheet": 1032, "shekhar": 1036, "shell": [381, 388, 392, 1014, 1023], "shellyfung": 1045, "shen": 1043, "sheng": 1040, "shengxiduan": 1036, "shenhanc78": 1038, "sheni": 1042, "shenk": 1038, "shenoi": 1037, "sherlock": [626, 977], "sheth": 1038, "shetti": 1043, "shi": [407, 450, 460, 689], "shibata": 1040, "shiebler": 1036, "shield": 394, "shift": [13, 36, 38, 44, 49, 64, 68, 166, 178, 223, 250, 288, 302, 305, 342, 409, 413, 438, 446, 456, 459, 467, 510, 513, 687, 691, 845, 868, 997, 1009, 1024, 1025, 1030, 1034, 1038], "shifted_gaussian": 249, "shifted_opposite_lof_scor": 845, "shih": [836, 989], "shiki": 1041, "shilt": 1033, "shinehid": 1043, "shinitski": 1047, "shinnar": 1043, "shinsuk": 1045, "ship": [19, 132, 164, 357, 367, 378, 397, 415, 983, 1030, 1039], "shiqiao": [0, 2, 1030, 1031], "shirsat": 1045, "shiva": [1045, 1046], "shivam": [1038, 1039, 1040], "shivamgargsya": [1037, 1041, 1043], "shivan": 1035, "shivram": 1038, "shiyu": 1039, "shleifer": [1036, 1037], "shmelkov": 1035, "shoaib": 1045, "shoemak": 1041, "shogo": [1045, 1046], "shooter23": [1042, 1043], "shop": 1012, "short": [5, 90, 121, 128, 190, 258, 301, 351, 380, 388, 411, 415, 419, 983, 984, 990, 1011, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "short_nam": 17, "shortcom": 983, "shortcut": [388, 417], "shorten": [380, 1002, 1043], "shorten_param": 261, "shorter": [4, 157, 248, 392, 407, 412, 448, 455, 561, 695, 989, 993, 1023, 1041], "shortest": [39, 385, 389, 686, 941, 984, 1043], "shortest_path": 1043, "shorthand": [58, 394, 408, 465, 559, 560, 860, 861, 1033], "shortlog": 384, "shortname_slic": 17, "shota": 1036, "should": [4, 5, 6, 8, 9, 13, 15, 17, 25, 27, 31, 37, 53, 109, 111, 114, 117, 121, 124, 127, 148, 163, 169, 175, 178, 179, 183, 199, 201, 217, 228, 233, 234, 235, 238, 260, 263, 266, 267, 269, 278, 283, 306, 307, 312, 327, 338, 346, 352, 362, 366, 367, 368, 375, 378, 379, 380, 382, 384, 385, 387, 388, 389, 393, 394, 397, 398, 401, 403, 405, 407, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 424, 430, 435, 438, 440, 441, 442, 443, 445, 447, 448, 450, 452, 455, 456, 457, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 494, 501, 506, 507, 514, 519, 521, 522, 525, 530, 531, 532, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 591, 592, 595, 600, 605, 606, 608, 609, 618, 625, 626, 627, 629, 630, 631, 633, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 685, 687, 688, 689, 690, 691, 692, 693, 694, 699, 707, 724, 725, 739, 763, 768, 771, 775, 776, 777, 778, 779, 782, 785, 786, 789, 797, 798, 803, 804, 805, 806, 813, 814, 815, 816, 821, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 878, 879, 880, 882, 886, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 923, 925, 928, 936, 944, 948, 953, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 976, 977, 981, 982, 983, 984, 987, 988, 990, 992, 993, 994, 997, 1000, 1001, 1002, 1003, 1008, 1011, 1012, 1019, 1023, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "shouldn": [246, 251, 380], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 159, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 356, 357, 358, 359, 360, 367, 368, 380, 386, 392, 393, 397, 398, 404, 405, 409, 411, 412, 413, 414, 416, 417, 436, 500, 557, 591, 592, 629, 630, 695, 696, 698, 699, 700, 711, 802, 818, 841, 859, 911, 912, 913, 976, 979, 981, 982, 984, 986, 987, 989, 990, 991, 993, 994, 995, 997, 1001, 1002, 1008, 1018, 1019, 1023, 1032, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048], "show_top10": 375, "show_vers": [366, 378, 380, 388, 397, 1038], "show_weight": 912, "show_with_diff": 98, "showcas": [109, 112, 117, 121, 124, 125, 127, 382], "shown": [25, 48, 57, 89, 109, 113, 117, 124, 160, 168, 170, 183, 189, 197, 217, 225, 228, 233, 238, 247, 260, 263, 266, 269, 278, 288, 300, 301, 305, 306, 307, 325, 346, 351, 352, 380, 385, 395, 405, 407, 408, 411, 412, 413, 415, 417, 436, 458, 630, 696, 698, 699, 700, 711, 796, 810, 911, 913, 982, 983, 984, 987, 990, 997, 1001, 1002, 1003, 1023, 1034, 1039, 1040, 1041, 1044], "shown_imag": 221, "shrankhla": 1045, "shreesha": [1046, 1047], "shreya": 1040, "shrink": [26, 82, 95, 125, 170, 183, 194, 197, 203, 220, 249, 305, 346, 412, 557, 558, 674, 676, 846, 856, 857, 901, 902, 903, 904, 905, 990, 1002, 1021], "shrink_threshold": [294, 846, 990, 1030, 1042], "shrinkag": [33, 77, 79, 82, 83, 102, 126, 166, 294, 420, 467, 468, 471, 472, 473, 474, 475, 477, 478, 479, 537, 541, 547, 559, 560, 796, 983, 997, 1009, 1010, 1025, 1030, 1034, 1035, 1037], "shrinkage_": [78, 79, 471, 473], "shrinkage_coeffici": 478, "shrunk": [78, 102, 305, 312, 321, 420, 471, 473, 474, 477, 478, 479, 547, 880, 981, 1001, 1024, 1025], "shrunk_cov": [420, 477, 479], "shrunk_cov_scor": 102, "shrunk_covari": [409, 1047], "shrunkcovari": [78, 102, 409, 467, 468, 471, 472, 473], "shrunken": [846, 1030], "shu": [1031, 1034, 1038], "shuangchi": [1044, 1045], "shubernetskii": 1032, "shubh": 1041, "shubhal": 1047, "shubham": [1037, 1040], "shubhanshu": 1042, "shubhraneel": 1044, "shuckle16": 1036, "shuffl": [10, 13, 15, 20, 21, 24, 27, 32, 48, 60, 61, 95, 117, 118, 120, 127, 132, 164, 183, 207, 208, 213, 228, 261, 265, 266, 273, 283, 312, 325, 326, 327, 328, 340, 351, 352, 362, 375, 389, 394, 402, 467, 472, 486, 487, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 517, 520, 522, 529, 535, 537, 538, 544, 545, 551, 552, 553, 554, 562, 563, 565, 566, 600, 603, 605, 656, 657, 664, 665, 666, 670, 672, 674, 675, 676, 685, 796, 798, 799, 800, 801, 802, 810, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 856, 857, 880, 899, 900, 901, 904, 935, 936, 956, 958, 982, 983, 988, 995, 1001, 1002, 1018, 1023, 1025, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041], "shuffle_param": 346, "shuffled_arrai": 961, "shufflesplit": [255, 262, 346, 411, 798, 804, 806, 816, 825, 1018, 1030, 1031, 1033, 1035, 1036], "shuhei": 1043, "shuhua": 1042, "shutil": [54, 72, 408], "shuttl": 352, "shuzh": 1040, "shwartz": [664, 665, 983, 1001], "shwed": 1038, "shyam": 1043, "si": 70, "siam": [407, 411, 450, 458, 460, 533, 539], "siang": 1033, "siavash": 1043, "siavrez": 1044, "sibsp": [171, 320], "sid": 1037, "siddharth": [1037, 1041], "side": [4, 27, 59, 124, 192, 203, 217, 222, 231, 305, 342, 351, 362, 375, 392, 405, 408, 411, 412, 415, 424, 430, 513, 983, 984, 987, 989, 1002, 1039], "sidhpura": 1045, "siebert": 1038, "sierra": [529, 535], "sievert": 1040, "siftikha": 1038, "sig": 96, "sigh": 351, "sigkdd": [374, 375, 509, 674, 880, 997, 999], "sigma": [14, 46, 47, 54, 80, 102, 124, 258, 260, 404, 409, 412, 414, 612, 647, 981, 983, 985, 989, 992, 1022], "sigma2": [532, 539], "sigma_": [409, 642, 643, 1043, 1047], "sigma_0": [154, 155, 160, 417, 612], "sigma_0_bound": [160, 612], "sigma_i": [989, 997], "sigma_k": [412, 981], "sigmod": [407, 448, 455, 845, 993], "sigmoid": [24, 25, 26, 27, 372, 414, 435, 450, 533, 559, 618, 637, 641, 762, 771, 774, 856, 857, 901, 902, 903, 904, 905, 992, 1002, 1025, 1043, 1047], "sigmoid_kernel": [762, 985], "sign": [40, 79, 86, 96, 99, 113, 183, 250, 299, 346, 380, 407, 412, 415, 542, 580, 587, 604, 633, 634, 656, 657, 664, 666, 672, 673, 674, 675, 732, 739, 899, 903, 934, 936, 952, 983, 987, 992, 997, 1001, 1002, 1022, 1030, 1034, 1039, 1043, 1045, 1048], "signal": [14, 81, 95, 96, 97, 104, 122, 124, 151, 156, 157, 166, 168, 177, 178, 184, 185, 187, 188, 193, 194, 198, 200, 218, 251, 318, 406, 407, 409, 415, 416, 417, 420, 473, 501, 519, 524, 529, 532, 535, 539, 543, 544, 623, 642, 643, 644, 645, 650, 651, 661, 662, 670, 682, 683, 684, 782, 817, 825, 873, 983, 987, 1004, 1009, 1012, 1017, 1024, 1025], "signatur": [235, 351, 352, 375, 486, 487, 555, 556, 562, 563, 592, 608, 609, 657, 671, 673, 709, 739, 802, 818, 821, 823, 826, 872, 947, 976, 1037, 1043, 1047], "signif": [6, 979, 1019], "signifi": [382, 407, 579, 807, 992], "signific": [4, 55, 117, 124, 143, 144, 166, 203, 217, 253, 260, 276, 281, 283, 309, 351, 362, 374, 375, 392, 407, 410, 411, 414, 502, 530, 532, 547, 548, 625, 656, 657, 664, 665, 666, 674, 675, 676, 815, 824, 899, 901, 902, 903, 904, 905, 986, 987, 990, 1009, 1030, 1032, 1033, 1034, 1038], "significantli": [4, 24, 25, 27, 37, 78, 79, 111, 117, 122, 124, 127, 148, 169, 170, 171, 199, 203, 207, 215, 217, 260, 283, 316, 317, 352, 353, 362, 367, 384, 407, 412, 414, 415, 420, 467, 472, 477, 478, 536, 538, 545, 556, 563, 644, 645, 650, 651, 658, 659, 660, 661, 682, 690, 839, 840, 979, 983, 984, 990, 995, 1002, 1030, 1032, 1033, 1037, 1038, 1043, 1044, 1045], "sijaranamu": 1036, "silenc": 235, "silent": [235, 415, 579, 855, 997, 1035, 1036, 1038, 1039, 1043, 1044], "silhouett": [20, 36, 37, 38, 49, 57, 58, 65, 68, 166, 352, 380, 445, 510, 789, 790, 1009, 1030, 1034], "silhouette_avg": 60, "silhouette_sampl": [60, 790, 1034, 1036, 1038, 1046], "silhouette_scor": [38, 49, 58, 60, 352, 380, 407, 1030, 1034, 1036, 1038, 1040, 1044], "silicon": 378, "silk": 1044, "sillanp\u00e4\u00e4": 1030, "silva": [405, 686, 984, 1041, 1043, 1048], "silverman": [844, 1045], "silvermann": 413, "silverthorn": 1030, "silvestrin": 1047, "sim": [412, 1021], "sim4n6": 1045, "simd": [394, 1045], "similar": [4, 5, 7, 12, 17, 20, 25, 26, 34, 37, 49, 51, 57, 60, 75, 86, 95, 99, 111, 124, 147, 151, 158, 168, 169, 170, 171, 183, 199, 201, 213, 220, 222, 223, 224, 228, 234, 235, 251, 257, 260, 263, 266, 267, 268, 278, 281, 283, 305, 318, 337, 342, 346, 352, 353, 362, 366, 372, 374, 376, 379, 380, 382, 385, 386, 388, 389, 392, 394, 401, 404, 405, 407, 410, 411, 412, 414, 415, 416, 417, 418, 438, 441, 442, 448, 450, 452, 453, 501, 506, 507, 534, 580, 587, 588, 589, 608, 675, 690, 693, 701, 703, 713, 717, 722, 725, 726, 728, 731, 735, 737, 752, 757, 758, 783, 789, 790, 793, 794, 795, 821, 826, 871, 892, 895, 899, 900, 901, 902, 920, 976, 979, 980, 982, 983, 984, 986, 988, 990, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1014, 1022, 1025, 1030, 1034, 1035, 1036, 1038, 1042, 1043], "similarli": [4, 12, 37, 55, 92, 128, 170, 172, 183, 188, 199, 229, 238, 260, 299, 305, 321, 338, 362, 367, 376, 378, 382, 385, 394, 403, 404, 410, 411, 415, 726, 727, 735, 780, 781, 784, 982, 984, 985, 987, 994, 1001, 1002, 1004, 1014, 1018, 1038, 1044, 1046], "simmon": 1012, "simon": [983, 1012, 1033, 1034, 1043, 1044, 1045, 1046], "simona": [1041, 1042, 1043], "simonamaggio": [1041, 1042, 1043], "simoncw": 1040, "simonpl": 1035, "simpl": [4, 27, 55, 71, 75, 78, 85, 86, 95, 117, 122, 158, 166, 170, 183, 200, 216, 241, 261, 278, 284, 287, 296, 297, 310, 319, 334, 351, 353, 357, 362, 378, 380, 382, 383, 384, 385, 387, 392, 393, 394, 395, 398, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 421, 428, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 512, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 783, 785, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 979, 981, 982, 983, 984, 986, 987, 990, 997, 999, 1001, 1003, 1008, 1009, 1012, 1014, 1023, 1027, 1030], "simplefilt": 401, "simpleimput": [71, 132, 163, 164, 171, 230, 240, 242, 316, 319, 362, 394, 625, 626, 627, 977, 997, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "simpleimputersimpleimput": [71, 132, 171, 230, 240, 316, 319], "simplepipelin": 235, "simpler": [217, 338, 366, 379, 407, 412, 983, 988, 1021, 1035], "simplest": [53, 411, 984, 1021, 1022], "simplex": [26, 668, 794, 874], "simpli": [39, 86, 130, 151, 159, 224, 236, 238, 269, 296, 317, 318, 366, 375, 380, 382, 385, 392, 394, 409, 410, 411, 412, 414, 415, 483, 693, 759, 762, 866, 938, 979, 987, 988, 989, 990, 1001, 1015, 1023, 1037, 1038, 1039], "simplic": [4, 14, 31, 183, 342, 351, 353, 394, 413, 990, 991, 992, 1002], "simplif": [376, 379, 385, 1030, 1036], "simplifi": [4, 71, 187, 338, 379, 381, 385, 407, 410, 513, 560, 858, 859, 987, 989, 997], "simplist": [199, 415], "simul": [79, 97, 127, 169, 193, 236, 260, 1012], "simultan": [20, 55, 96, 264, 268, 321, 346, 359, 372, 404, 407, 976, 987, 988, 1003, 1012, 1037], "sin": [4, 14, 19, 39, 96, 112, 123, 124, 129, 131, 143, 151, 157, 158, 160, 178, 179, 183, 193, 200, 205, 222, 234, 251, 295, 306, 316, 322, 345, 358, 359, 417, 514, 613, 697, 761, 1022], "sin_transform": 4, "sina": [306, 1043], "sinayev": 1032, "sinc": [0, 4, 5, 11, 13, 25, 34, 37, 49, 53, 55, 66, 70, 71, 72, 96, 121, 138, 145, 148, 151, 156, 169, 170, 172, 175, 181, 199, 201, 203, 216, 229, 233, 234, 235, 247, 250, 256, 260, 262, 263, 269, 270, 278, 281, 283, 285, 286, 311, 318, 319, 330, 335, 338, 346, 351, 352, 353, 362, 367, 375, 378, 380, 381, 382, 384, 385, 388, 392, 393, 394, 397, 398, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 424, 435, 439, 443, 444, 448, 451, 454, 467, 480, 481, 482, 483, 494, 525, 534, 535, 536, 537, 538, 544, 545, 547, 548, 549, 550, 551, 553, 555, 557, 559, 560, 561, 562, 565, 567, 586, 587, 589, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 630, 631, 636, 649, 653, 656, 657, 664, 666, 672, 673, 674, 675, 677, 690, 705, 707, 732, 738, 739, 747, 748, 779, 786, 799, 800, 820, 821, 822, 827, 828, 829, 830, 834, 835, 836, 837, 838, 841, 846, 849, 856, 857, 864, 889, 890, 894, 895, 899, 901, 904, 907, 909, 936, 944, 976, 979, 980, 981, 983, 984, 988, 989, 990, 991, 993, 995, 997, 1001, 1002, 1003, 1012, 1014, 1023, 1030, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sinclert": 1038, "sind": 415, "sine": [4, 151, 156, 157, 166, 193, 205, 244, 245, 246, 247, 248, 249, 250, 252, 358, 376, 613, 794, 795, 986, 1003, 1009], "singer": [278, 664, 665, 732, 983, 987, 1001, 1002], "singh": [1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "singl": [10, 34, 39, 48, 52, 53, 55, 58, 61, 62, 72, 97, 110, 111, 112, 120, 121, 131, 136, 148, 151, 157, 163, 166, 170, 172, 175, 183, 199, 201, 203, 239, 241, 250, 256, 269, 278, 301, 319, 321, 338, 351, 352, 353, 357, 359, 362, 366, 367, 374, 375, 380, 385, 387, 388, 389, 392, 393, 394, 398, 405, 406, 408, 410, 411, 412, 414, 415, 416, 432, 435, 438, 439, 443, 444, 445, 447, 452, 462, 464, 465, 491, 492, 494, 504, 507, 532, 551, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 580, 590, 597, 598, 600, 604, 625, 630, 632, 641, 664, 665, 671, 674, 675, 676, 688, 690, 692, 708, 709, 719, 720, 721, 722, 733, 734, 735, 738, 771, 782, 794, 795, 796, 799, 800, 810, 817, 821, 822, 824, 825, 828, 836, 839, 840, 844, 856, 857, 858, 868, 869, 872, 873, 874, 879, 880, 894, 895, 907, 908, 909, 910, 915, 945, 951, 955, 974, 976, 982, 983, 984, 987, 988, 990, 992, 994, 995, 997, 1001, 1002, 1003, 1007, 1009, 1012, 1014, 1021, 1023, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "single_prior": 160, "single_source_shortest_path_length": 389, "singleton": [367, 804, 922, 1043, 1046], "singular": [95, 389, 404, 407, 410, 449, 451, 480, 481, 482, 483, 519, 522, 532, 536, 538, 539, 542, 545, 547, 548, 655, 670, 671, 672, 685, 936, 983, 984, 986, 1024, 1025, 1036, 1037, 1048], "singular_": 655, "singular_values_": [532, 539, 542, 1037], "sinha": [1038, 1047], "sinhrk": [1034, 1035], "sink": [639, 979], "sinoisoid": 124, "sinusoid": [96, 112, 124, 183, 234, 980, 1022], "sio": 401, "siola": [1045, 1046], "sip\u0151cz": [1040, 1041, 1042, 1046], "siqi": 1044, "siqueira": 1040, "sir": 377, "sister": 1007, "site": [378, 380, 383, 388, 397, 414, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 1012, 1038], "situat": [25, 44, 57, 72, 168, 169, 205, 228, 263, 380, 388, 409, 411, 412, 414, 466, 526, 532, 580, 872, 875, 887, 897, 981, 983, 989, 990, 1000, 1003, 1038], "situp": 377, "sivamani": 1040, "sivaprasad": [1033, 1034], "six": [148, 200, 221, 309, 377, 1039], "sixteenth": 999, "sixth": 375, "size": [3, 4, 5, 6, 8, 11, 12, 13, 14, 24, 27, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 55, 57, 58, 60, 61, 62, 66, 67, 73, 78, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 102, 104, 114, 123, 124, 127, 128, 129, 144, 151, 153, 154, 157, 158, 166, 168, 170, 171, 178, 179, 180, 181, 185, 189, 194, 197, 200, 201, 202, 205, 212, 213, 220, 225, 228, 231, 232, 233, 234, 235, 237, 238, 247, 254, 256, 258, 260, 262, 263, 265, 266, 267, 278, 289, 290, 291, 299, 302, 306, 307, 308, 309, 312, 316, 319, 321, 322, 326, 330, 334, 336, 337, 338, 346, 348, 351, 352, 353, 356, 366, 367, 368, 375, 376, 380, 385, 389, 392, 393, 394, 397, 398, 404, 405, 406, 407, 409, 411, 412, 415, 417, 418, 420, 442, 443, 444, 446, 447, 448, 455, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 491, 492, 493, 513, 525, 532, 534, 536, 538, 545, 555, 556, 557, 558, 559, 560, 562, 563, 581, 585, 586, 589, 592, 630, 631, 641, 655, 664, 665, 677, 681, 690, 693, 703, 717, 735, 737, 740, 778, 790, 798, 801, 802, 806, 813, 816, 817, 820, 823, 825, 834, 835, 836, 838, 841, 842, 843, 844, 845, 847, 849, 850, 851, 856, 857, 874, 876, 888, 893, 897, 901, 902, 903, 904, 905, 907, 908, 909, 910, 913, 935, 939, 940, 950, 951, 953, 956, 962, 977, 979, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 994, 997, 999, 1001, 1002, 1003, 1011, 1012, 1017, 1019, 1021, 1022, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1045, 1046], "size_cluster_i": 60, "size_mb": 351, "sizeabl": [813, 816], "skaft": 1044, "skeleton": [1023, 1033], "sketch": [175, 368, 372, 389, 406, 637, 638, 639, 952, 1025, 1042], "skew": [9, 124, 202, 232, 238, 305, 321, 372, 411, 637, 638, 639, 640, 875, 887, 983, 997, 1025, 1033, 1037, 1046], "skewed": [640, 1037], "skewedchi2sampl": [636, 637, 638, 639, 979, 1037, 1044, 1045], "skf": [247, 411, 815], "skfold": 328, "skforecast": 1007, "skill": 987, "skimag": [46, 47, 374, 1022], "skip": [367, 380, 382, 389, 403, 415, 466, 566, 644, 645, 650, 658, 659, 660, 669, 679, 897, 1023, 1034, 1037, 1040, 1042, 1044, 1046], "skip_complet": 625, "skip_comput": 1040, "skip_parameter_valid": [466, 897, 1046], "skipper": [1033, 1035, 1036], "skiptestwarn": 382, "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 366, 367, 368, 369, 373, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 394, 396, 397, 398, 401, 403, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "sklearn2pmml": [401, 1007], "sklearn_api": 0, "sklearn_assume_finit": 366, "sklearn_cache_": 315, "sklearn_enable_debug_cython_direct": 381, "sklearn_fail_no_openmp": 378, "sklearn_graph_cache_": 285, "sklearn_is_fit": [108, 109, 1009], "sklearn_panda": 1007, "sklearn_run_float32_test": 380, "sklearn_site_joblib": 1038, "sklearn_tut_workspac": 1023, "sklearn_warning_as_error": 367, "sklearn_xarrai": 1007, "sklearnex": 397, "skop": [1007, 1025], "skorch": 1007, "sktime": [13, 1007], "sl": 199, "slack": 1001, "slai": 351, "slama": [1040, 1042], "slep": [380, 394, 1005], "slep000": 395, "slep009": [1041, 1043, 1044], "slep010": [382, 1041], "slep011": 1008, "slep018": [242, 382, 1045], "slep020": 395, "slice": [4, 13, 17, 120, 127, 208, 222, 225, 233, 291, 294, 318, 319, 334, 375, 381, 382, 389, 408, 462, 465, 491, 492, 506, 544, 637, 771, 775, 778, 915, 939, 940, 958, 1042, 1044, 1048], "slice_": [491, 492, 1045], "sliceabl": 942, "slide": [261, 642, 983, 1006, 1007], "slight": [121, 204, 317, 414, 447, 1040], "slightli": [4, 25, 27, 64, 82, 114, 117, 121, 124, 128, 132, 148, 151, 152, 153, 171, 178, 199, 217, 223, 225, 235, 238, 268, 283, 315, 335, 353, 379, 380, 392, 405, 407, 414, 415, 417, 419, 444, 586, 587, 589, 636, 656, 799, 800, 899, 901, 904, 935, 936, 976, 983, 997, 1001, 1002, 1039, 1043, 1044, 1046, 1048], "slishak": 1044, "sloan": 0, "slogdet": 934, "slope": [170, 197, 201, 216, 407, 489, 720, 745, 985, 987], "sloppili": 415, "sloth": [11, 296, 375, 496], "slow": [285, 305, 351, 366, 374, 378, 380, 412, 415, 445, 697, 873, 874, 878, 901, 904, 936, 984, 990, 1008, 1022, 1037], "slower": [72, 98, 117, 121, 163, 234, 269, 353, 394, 414, 415, 416, 444, 449, 451, 536, 538, 545, 553, 554, 555, 556, 561, 562, 563, 564, 586, 587, 589, 629, 630, 631, 641, 657, 670, 672, 685, 690, 702, 827, 831, 832, 980, 984, 985, 986, 988, 990, 1003, 1023, 1034, 1041], "slowest": [121, 935, 936], "slowli": [392, 394, 542, 936], "slug": 70, "smacof": [688, 1045], "small": [5, 11, 13, 21, 27, 39, 48, 49, 53, 55, 70, 78, 82, 86, 91, 100, 112, 114, 121, 123, 124, 156, 158, 169, 170, 179, 185, 189, 190, 200, 203, 205, 214, 216, 217, 247, 260, 267, 272, 285, 296, 300, 302, 305, 307, 309, 317, 325, 330, 338, 343, 346, 351, 352, 368, 373, 375, 377, 380, 383, 389, 394, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 420, 439, 441, 443, 444, 445, 447, 456, 457, 461, 473, 494, 496, 536, 538, 539, 545, 553, 554, 555, 559, 560, 562, 580, 587, 588, 600, 605, 606, 648, 652, 653, 654, 656, 657, 677, 680, 681, 743, 799, 800, 814, 824, 827, 856, 857, 864, 892, 901, 904, 936, 976, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1000, 1003, 1008, 1012, 1021, 1022, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "smaller": [8, 24, 40, 46, 55, 82, 111, 127, 148, 156, 157, 160, 163, 184, 188, 190, 203, 232, 278, 289, 290, 299, 305, 338, 346, 352, 380, 404, 406, 407, 409, 411, 412, 414, 416, 437, 438, 444, 448, 452, 454, 512, 532, 533, 555, 556, 557, 558, 559, 560, 562, 563, 591, 608, 617, 631, 644, 645, 647, 648, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 670, 672, 680, 681, 690, 707, 794, 799, 800, 845, 848, 872, 873, 891, 892, 899, 907, 908, 909, 910, 936, 981, 983, 984, 986, 987, 988, 990, 991, 993, 997, 999, 1001, 1002, 1003, 1008, 1023, 1038, 1043, 1047], "smallest": [80, 81, 199, 283, 356, 375, 407, 409, 416, 525, 539, 628, 652, 653, 654, 680, 681, 688, 692, 693, 796, 799, 800, 810, 815, 869, 916, 1003, 1043], "smallest_coef": [82, 525], "smari": [1039, 1040, 1041], "smart": [235, 441, 457, 458, 588], "smartphon": 1012, "smedbergm": 1036, "smedemark": 1040, "smile": [75, 375, 1044], "sminchisescu": [640, 979], "smirnov": 1042, "smith": [1036, 1037, 1038, 1039, 1040, 1042], "sml": [855, 992], "smo": [899, 900], "smola": [412, 415, 533, 865, 997, 1002], "smolskii": 1045, "smooth": [4, 46, 47, 54, 148, 156, 192, 200, 215, 311, 338, 377, 395, 407, 413, 414, 417, 446, 447, 535, 536, 537, 544, 555, 556, 557, 558, 562, 563, 564, 588, 589, 617, 620, 674, 834, 835, 836, 838, 876, 880, 888, 907, 908, 909, 910, 983, 989, 997, 1001, 1002, 1003, 1023], "smooth_idf": [415, 588, 589], "smoothened_coin": [46, 47], "smoother": [4, 5, 124, 170, 301, 413], "smoothli": 374, "smt": 1046, "smtp": [375, 490], "smujjiga": 1040, "sn": [37, 112, 127, 168, 169, 178, 183, 250, 260], "snake": [319, 321, 580, 880, 997], "snapshot": [401, 557, 558, 1008], "sne": [12, 166, 219, 220, 221, 222, 224, 226, 283, 512, 523, 690, 1009, 1024, 1025], "snippet": [109, 362, 380, 385, 388, 392, 403, 414, 415, 416, 977, 997, 1011, 1043], "snowhit": 1041, "snr": 54, "snuderl": 1034, "sny": 12, "snyder": [690, 984], "so": [4, 9, 12, 13, 17, 27, 42, 48, 55, 56, 61, 65, 81, 117, 120, 121, 122, 123, 127, 131, 151, 156, 169, 171, 175, 179, 199, 200, 228, 235, 238, 260, 278, 283, 289, 290, 293, 300, 301, 306, 311, 312, 316, 328, 338, 351, 353, 360, 362, 366, 367, 368, 374, 375, 378, 379, 380, 382, 384, 385, 386, 388, 389, 394, 398, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 693, 703, 706, 714, 723, 738, 753, 775, 785, 794, 795, 796, 799, 800, 802, 803, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 889, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 936, 953, 962, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 997, 999, 1000, 1001, 1002, 1007, 1008, 1012, 1021, 1022, 1023, 1030, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047], "soar": 1045, "sobkevich": 1042, "sobolev": 1034, "soc": [19, 375, 1023], "socastro": [1040, 1046], "socg2006": 445, "social": [169, 395, 407, 1005, 1012], "societi": [148, 377, 407, 409, 467, 472, 539, 625, 875, 887, 983, 1001], "sodhani": 1036, "soft": [104, 133, 134, 380, 394, 567, 568, 895, 903, 1001, 1012, 1035], "softmax": [414, 559, 656, 657, 983, 990, 991], "softw": 983, "softwar": [0, 148, 366, 377, 380, 388, 392, 394, 415, 625, 633, 656, 977, 1012], "soil_typ": 238, "sokalmichen": [448, 455, 697, 775, 776, 777, 990], "sokalmichenerdist": 697, "sokalsneath": [448, 455, 697, 775, 776, 777, 990], "sokalsneathdist": 697, "sok\u00f3\u0142": 1047, "sole": [67, 392, 407], "soledad": 1042, "soler": [0, 2], "solid": [11, 31, 33, 123, 154, 211, 212, 228, 238, 296, 307, 1012], "solido": 1005, "solntz": 351, "solosil": 1043, "solut": [46, 178, 183, 188, 190, 204, 213, 228, 234, 318, 338, 378, 382, 394, 404, 407, 409, 411, 412, 415, 416, 447, 449, 451, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 608, 644, 646, 648, 650, 652, 653, 654, 656, 658, 660, 662, 663, 664, 665, 666, 667, 670, 672, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 794, 795, 810, 848, 856, 857, 980, 981, 983, 984, 986, 991, 993, 1001, 1002, 1006, 1012, 1018, 1021, 1023, 1030, 1033, 1043, 1044, 1045], "solutu": 1038, "solutusimmensu": 1038, "solv": [5, 6, 66, 151, 188, 233, 260, 281, 379, 380, 381, 382, 385, 392, 407, 409, 411, 412, 417, 445, 451, 460, 476, 529, 535, 536, 537, 541, 543, 544, 545, 546, 633, 635, 644, 650, 652, 653, 662, 663, 668, 670, 672, 675, 683, 684, 685, 829, 899, 900, 903, 936, 978, 981, 983, 984, 987, 988, 1001, 1002, 1003, 1006, 1007, 1012, 1016, 1019, 1023, 1036, 1040, 1043], "solvabl": 407, "solver": [15, 30, 33, 34, 46, 66, 166, 177, 188, 190, 191, 192, 199, 201, 207, 214, 215, 217, 218, 299, 300, 301, 302, 312, 322, 351, 386, 392, 394, 397, 403, 407, 419, 450, 460, 469, 470, 476, 500, 531, 533, 538, 539, 542, 545, 547, 644, 645, 646, 650, 651, 656, 657, 658, 659, 660, 661, 664, 666, 667, 668, 670, 672, 674, 678, 679, 682, 685, 686, 687, 689, 691, 693, 785, 810, 825, 830, 833, 856, 857, 901, 902, 903, 904, 905, 981, 984, 987, 991, 1001, 1002, 1007, 1009, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "solver_opt": 668, "somani": 1042, "some": [0, 3, 4, 5, 8, 9, 13, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 58, 62, 67, 71, 74, 78, 80, 81, 86, 95, 112, 113, 117, 121, 124, 125, 127, 128, 129, 132, 133, 144, 151, 153, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 171, 172, 175, 178, 180, 182, 183, 187, 188, 189, 193, 194, 199, 200, 203, 207, 208, 213, 216, 217, 220, 222, 228, 232, 235, 238, 246, 247, 248, 254, 255, 260, 261, 262, 263, 266, 268, 278, 281, 286, 289, 294, 300, 301, 305, 310, 316, 317, 318, 319, 320, 321, 322, 334, 335, 337, 338, 346, 348, 351, 352, 353, 360, 362, 366, 367, 368, 373, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 430, 435, 441, 442, 445, 447, 449, 451, 457, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 497, 506, 507, 513, 521, 522, 531, 532, 534, 536, 539, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 579, 580, 586, 588, 589, 592, 604, 607, 608, 609, 630, 631, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 687, 688, 690, 691, 695, 696, 698, 699, 700, 705, 706, 713, 718, 723, 724, 735, 736, 737, 743, 751, 753, 754, 760, 779, 781, 784, 785, 786, 791, 794, 797, 798, 803, 805, 814, 815, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 944, 955, 976, 977, 979, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1014, 1019, 1021, 1022, 1023, 1027, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "some_funct": [380, 926], "some_integ": 411, "some_iter": 380, "some_param": 380, "somebodi": 395, "someestim": 379, "somehow": 170, "someon": [380, 384, 394, 1030], "someth": [169, 221, 235, 278, 351, 380, 382, 383, 384, 388, 415, 987, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sometim": [72, 132, 168, 260, 301, 352, 362, 367, 368, 380, 382, 384, 386, 393, 394, 407, 409, 412, 414, 415, 447, 532, 533, 536, 538, 539, 864, 865, 866, 914, 982, 983, 984, 987, 992, 997, 998, 1002, 1014, 1022, 1027, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1046], "somewhat": [346, 362, 368, 380, 382, 412, 414, 901, 904, 983, 1002, 1003], "somewher": [386, 987, 1023], "somya": 1038, "son": [377, 977], "song": 984, "soni": [12, 1040, 1042], "sonni": 1035, "sonniv": [1045, 1046], "sonoiya": 1040, "sonoma": 311, "soon": [81, 394, 1021], "sooner": 1047, "sophist": [977, 989], "sorbaro": 1035, "sorensen": 412, "soriano": 1039, "sornarajah": 1035, "sorri": 1038, "sorro": 1039, "sorski": [1044, 1045], "sort": [4, 8, 10, 12, 19, 20, 24, 60, 70, 73, 109, 114, 121, 124, 131, 148, 178, 183, 199, 200, 217, 237, 260, 261, 264, 274, 295, 345, 351, 358, 359, 380, 384, 388, 389, 394, 411, 414, 415, 417, 532, 539, 553, 564, 579, 592, 608, 615, 695, 710, 716, 726, 727, 735, 751, 780, 781, 784, 786, 796, 822, 834, 835, 836, 837, 838, 839, 840, 847, 849, 850, 851, 854, 864, 870, 872, 873, 876, 878, 880, 888, 901, 904, 936, 941, 983, 990, 993, 997, 1012, 1023, 1030, 1034, 1040, 1041, 1042, 1044, 1045, 1048], "sort_graph_by_row_valu": [389, 1045], "sort_index": 278, "sort_result": [839, 840, 847, 849, 850, 851, 1042], "sort_valu": [71, 171, 172, 242, 250, 260, 271, 311, 312], "sort_whats_new": 384, "sorted_idx": [125, 315], "sorted_importances_idx": 171, "sortofamudkip": [1045, 1046], "sought": 778, "soumirai": 1040, "sound": [148, 362], "sounder": 1036, "sourav": [1037, 1040], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 374, 377, 379, 380, 381, 383, 384, 386, 388, 389, 392, 393, 397, 401, 404, 408, 412, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 974, 975, 984, 997, 1003, 1007, 1009, 1012, 1022, 1023, 1040, 1044, 1048], "south": [11, 127, 169, 296, 375, 413], "south_y": 169, "sp": [4, 169, 322, 977, 1022], "sp_version": [201, 668], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 58, 60, 61, 63, 65, 70, 71, 74, 86, 95, 97, 103, 105, 116, 120, 124, 130, 145, 148, 151, 157, 175, 183, 200, 220, 221, 222, 224, 232, 233, 234, 238, 239, 246, 251, 268, 271, 272, 283, 292, 293, 307, 317, 342, 351, 352, 353, 360, 362, 366, 372, 375, 376, 377, 380, 387, 392, 393, 394, 404, 406, 407, 410, 412, 413, 414, 415, 417, 441, 445, 446, 447, 450, 460, 462, 463, 464, 465, 480, 481, 482, 486, 496, 530, 532, 533, 536, 537, 538, 539, 541, 542, 547, 571, 580, 586, 587, 589, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 630, 631, 636, 638, 639, 640, 641, 686, 687, 688, 690, 691, 692, 694, 697, 796, 799, 800, 802, 810, 818, 829, 839, 840, 847, 848, 849, 850, 859, 864, 865, 871, 876, 891, 892, 893, 912, 940, 979, 980, 981, 982, 983, 985, 987, 988, 990, 991, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1014, 1021, 1023, 1024, 1025, 1030, 1031, 1033, 1038, 1039, 1040, 1044, 1045, 1046], "spacek": 1035, "spain": 311, "spam": [579, 707, 738, 834, 987, 989, 1012], "span": [13, 55, 78, 124, 233, 257, 375, 407, 415, 547, 634, 796, 799, 987, 1022], "spanish": 1007, "spannbauer": 1042, "sparciti": 352, "spare": [374, 672, 673], "spark": [375, 1008], "sparrai": 1047, "spars": [6, 7, 12, 14, 17, 19, 30, 34, 39, 40, 54, 55, 57, 70, 77, 78, 79, 81, 83, 94, 96, 106, 116, 130, 166, 168, 177, 178, 184, 187, 188, 191, 193, 194, 198, 215, 218, 232, 234, 254, 261, 267, 283, 300, 302, 316, 320, 329, 350, 353, 354, 360, 366, 372, 374, 375, 376, 380, 382, 383, 384, 385, 392, 393, 394, 407, 408, 414, 415, 417, 418, 422, 429, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 455, 457, 458, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 485, 486, 487, 494, 495, 501, 506, 521, 522, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 579, 580, 583, 584, 586, 587, 588, 589, 591, 592, 601, 602, 603, 604, 605, 606, 607, 627, 628, 629, 631, 636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 710, 711, 712, 726, 727, 728, 731, 735, 736, 737, 751, 752, 757, 758, 760, 761, 763, 764, 765, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 789, 790, 793, 796, 799, 800, 810, 817, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 868, 869, 870, 871, 872, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 915, 917, 918, 919, 920, 925, 933, 936, 937, 940, 941, 942, 950, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 977, 980, 983, 984, 985, 987, 988, 990, 1000, 1002, 1003, 1008, 1009, 1010, 1021, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "sparse_cg": [351, 670, 672, 685, 983, 1031, 1037, 1039, 1040, 1044, 1046], "sparse_coef_": [644, 650, 658, 660, 1030], "sparse_encod": [540, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 680, 681, 682, 683, 684, 1030, 1037, 1038, 1040, 1044], "sparse_encode_parallel": 1030, "sparse_format": [525, 1047], "sparse_func": [1036, 1042], "sparse_input_": 866, "sparse_lasso": 185, "sparse_output": [4, 121, 242, 311, 319, 322, 564, 866, 870, 872, 878, 883, 997, 1045, 1046], "sparse_output_": [462, 549], "sparse_symmetric_arrai": 973, "sparse_threshold": [170, 462, 465, 1038], "sparsearrai": 1041, "sparsecod": [104, 412, 529, 535, 538, 546, 1037, 1038, 1040, 1042, 1044], "sparsecodingmixin": 1030, "sparsefunc": [389, 406, 1043], "sparsefuncs_fast": [389, 406], "sparsepca": [95, 529, 531, 532, 533, 535, 537, 538, 539, 540, 543, 544, 1030, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1048], "sparser": [55, 178, 190, 412, 469, 476, 537, 541, 983, 990, 1001], "sparserandomproject": [221, 232, 891, 999, 1031, 1036, 1044, 1046, 1047], "sparsetool": 1037, "sparsifi": [7, 183, 366, 656, 657, 664, 665, 666, 674, 675, 676, 899, 971, 1032], "sparsiti": [14, 30, 45, 82, 101, 166, 177, 183, 184, 192, 210, 214, 215, 218, 234, 346, 352, 366, 394, 409, 412, 414, 416, 499, 500, 525, 529, 535, 536, 537, 538, 541, 543, 544, 545, 644, 650, 655, 656, 674, 676, 719, 720, 721, 868, 874, 879, 884, 980, 983, 990, 997, 1009, 1017, 1022, 1032], "sparsity_en_lr": 190, "sparsity_l1_lr": 190, "sparsity_l2_lr": 190, "sparsity_ratio": 366, "spatial": [47, 49, 55, 172, 183, 216, 301, 375, 394, 407, 418, 442, 444, 448, 450, 455, 677, 690, 757, 760, 775, 776, 777, 778, 789, 790, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 983, 990, 997, 1032, 1036, 1043, 1046], "spawn": [366, 392, 796, 810, 820, 821, 822, 1041], "speak": [352, 366, 380, 1001], "spearman": [172, 633, 634, 978], "spearmanr": 172, "spec": [1045, 1046], "speci": [3, 16, 90, 166, 238, 284, 297, 351, 373, 413, 496, 704, 786, 844, 903, 914, 987, 993, 1009, 1025, 1030], "special": [123, 169, 189, 217, 278, 293, 311, 338, 374, 376, 382, 386, 392, 394, 407, 410, 412, 462, 465, 551, 553, 557, 820, 911, 976, 981, 983, 985, 986, 987, 988, 990, 1003, 1037, 1040, 1042, 1044], "special_charact": [911, 1003], "species_nam": [11, 296], "specif": [4, 11, 12, 20, 27, 34, 44, 55, 62, 65, 70, 72, 117, 127, 132, 156, 159, 169, 170, 175, 203, 217, 255, 260, 278, 305, 315, 316, 320, 342, 351, 352, 353, 362, 366, 367, 375, 380, 383, 385, 386, 388, 392, 394, 397, 403, 406, 407, 408, 411, 412, 414, 415, 416, 417, 431, 494, 501, 532, 549, 555, 562, 565, 566, 567, 568, 572, 586, 589, 591, 610, 611, 612, 613, 615, 616, 617, 618, 620, 621, 623, 638, 641, 644, 645, 650, 656, 670, 685, 695, 697, 710, 711, 743, 796, 797, 798, 803, 804, 805, 810, 822, 835, 928, 930, 931, 950, 963, 964, 965, 981, 983, 984, 986, 987, 989, 990, 992, 994, 995, 997, 1001, 1003, 1004, 1005, 1006, 1011, 1023, 1025, 1030, 1034, 1038, 1039, 1040, 1041, 1044, 1045, 1047], "specifi": [4, 20, 27, 55, 95, 121, 122, 127, 152, 155, 157, 158, 159, 188, 200, 207, 245, 268, 366, 367, 374, 378, 380, 382, 389, 393, 394, 398, 401, 405, 407, 408, 411, 412, 414, 416, 417, 419, 421, 427, 435, 439, 443, 448, 450, 461, 462, 465, 467, 468, 470, 471, 472, 473, 474, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 513, 525, 529, 531, 535, 536, 538, 539, 544, 545, 550, 555, 557, 558, 559, 560, 562, 565, 566, 581, 582, 591, 592, 595, 600, 608, 609, 618, 629, 630, 631, 636, 641, 644, 645, 646, 649, 650, 651, 653, 654, 656, 657, 658, 659, 660, 661, 663, 666, 667, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 685, 689, 696, 698, 700, 707, 709, 726, 727, 735, 739, 751, 768, 776, 777, 780, 781, 784, 796, 798, 799, 800, 802, 803, 805, 809, 810, 813, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 834, 835, 837, 838, 839, 840, 844, 849, 872, 873, 874, 877, 878, 880, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 931, 938, 971, 977, 983, 984, 986, 987, 990, 994, 995, 997, 1000, 1001, 1002, 1018, 1022, 1030, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "spector": 411, "spectral": [14, 18, 22, 36, 44, 46, 49, 55, 68, 70, 166, 221, 222, 327, 329, 351, 352, 353, 380, 415, 447, 449, 450, 451, 460, 467, 468, 469, 470, 471, 472, 473, 474, 486, 509, 511, 589, 686, 687, 688, 689, 690, 693, 717, 792, 990, 1000, 1009, 1024, 1025, 1030, 1031], "spectral_clust": [46, 66, 1038, 1040, 1042, 1043, 1044, 1045, 1047], "spectral_embed": [394, 984, 1031, 1034, 1036, 1038, 1040, 1043, 1044, 1045, 1047], "spectralbiclust": [404, 451, 1032, 1036, 1037, 1041], "spectralclust": [44, 319, 407, 438, 990, 1030, 1031, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "spectralcoclust": [19, 21, 404, 449, 1032, 1037, 1041], "spectralembed": [52, 220, 221, 222, 686, 687, 688, 690, 984, 1031, 1036, 1040, 1044, 1045, 1047], "spectrum": [73, 522, 542, 693, 936, 1012, 1019, 1038], "speech": [415, 987], "speed": [46, 47, 57, 70, 98, 109, 117, 164, 170, 185, 188, 192, 238, 283, 317, 326, 351, 353, 368, 369, 380, 383, 389, 392, 394, 403, 405, 407, 412, 414, 415, 418, 441, 442, 445, 446, 447, 448, 450, 455, 457, 458, 459, 460, 529, 530, 608, 625, 630, 631, 632, 637, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 679, 682, 690, 794, 795, 802, 823, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 874, 936, 976, 979, 984, 986, 988, 1001, 1012, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "speedi": 366, "speedup": [322, 366, 412, 414, 648, 652, 655, 1030, 1031, 1032, 1033, 1045], "speer": 1032, "spell": 415, "spend": 415, "spent": [283, 311, 381, 386, 823, 1045], "sphere": [111, 166, 219, 220, 223, 224, 225, 226, 283, 352, 413, 517, 587, 686, 687, 688, 689, 690, 761, 922, 981, 985, 990, 1009], "sphere_data": 222, "sphereclust": 1007, "spheric": [34, 57, 85, 128, 222, 247, 249, 250, 296, 376, 761, 794, 795, 983, 986, 990, 1007], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 367, 380, 384, 394, 397, 400, 1023, 1030, 1037], "sphinxext": [380, 397, 400], "sphx_glr_auto_examples_applications_svm_gui": 1030, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1030, "spidlen": [690, 984], "spie": [148, 377], "spielman": 1040, "spike": 170, "spikebh": 1044, "spikhalskii": 1035, "spiki": 4, "spin": 388, "spine": [7, 15, 34, 210, 305], "spirit": 412, "spite": 989, "spline": [166, 177, 178, 218, 274, 288, 514, 515, 516, 670, 860, 874, 878, 1007, 1009, 1043], "spline_": 4, "splines_df": 4, "splinetransform": [4, 200, 238, 318, 874, 997, 1043, 1045, 1046], "split": [4, 5, 6, 11, 13, 15, 17, 24, 26, 27, 31, 32, 70, 100, 111, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 138, 144, 148, 168, 169, 172, 183, 194, 195, 199, 202, 207, 217, 229, 235, 238, 246, 247, 254, 255, 258, 260, 265, 267, 270, 278, 286, 292, 299, 301, 306, 307, 312, 319, 321, 328, 338, 351, 353, 360, 375, 380, 387, 393, 394, 397, 398, 405, 407, 412, 414, 415, 416, 435, 440, 441, 470, 471, 477, 478, 495, 529, 535, 537, 540, 544, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 586, 587, 589, 592, 600, 645, 649, 651, 653, 659, 661, 663, 671, 673, 693, 702, 703, 715, 728, 734, 754, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 833, 839, 840, 856, 857, 880, 884, 885, 887, 888, 889, 890, 907, 908, 909, 910, 958, 976, 979, 983, 984, 990, 993, 994, 995, 997, 1001, 1003, 1008, 1014, 1018, 1019, 1021, 1022, 1023, 1025, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "split0_test_precis": [796, 810], "split0_test_scor": [796, 810, 1036], "split0_train_scor": [796, 810, 1036], "split1_test_scor": [796, 810], "split1_train_scor": [796, 810], "split2_test_scor": 796, "split_cod": 412, "split_sign": [529, 535, 540], "splitter": [4, 321, 322, 394, 398, 411, 435, 470, 562, 563, 565, 566, 592, 600, 645, 649, 651, 653, 657, 659, 661, 663, 671, 673, 796, 798, 799, 800, 801, 802, 810, 811, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 907, 908, 909, 910, 1003, 1008, 1036, 1037, 1038, 1039, 1046, 1047, 1048], "splot": [246, 251], "splt": 200, "sply88": 1044, "spmatrix": 1047, "spolski": 415, "sport": [19, 375], "spot": [53, 230, 407], "spotifi": 1005, "spottabl": 386, "spread": [4, 40, 222, 261, 305, 325, 326, 327, 330, 346, 366, 380, 407, 450, 460, 513, 876, 888, 896, 987], "spring": [4, 13, 170], "springer": [114, 115, 126, 259, 405, 407, 411, 412, 414, 518, 533, 557, 558, 688, 692, 694, 703, 718, 723, 737, 738, 753, 794, 907, 908, 984, 987, 988, 994, 1003], "sprint": [379, 380, 1005, 1030], "spuriou": [338, 388, 997, 1043, 1044, 1045], "spy": 193, "sq": 766, "sqeuclidean": [38, 448, 455, 775, 776, 777], "sqft": 238, "sql": 374, "sqr": 40, "sqrt": [12, 80, 81, 82, 98, 104, 115, 138, 172, 178, 180, 223, 225, 240, 245, 246, 247, 250, 251, 260, 343, 346, 407, 414, 415, 417, 461, 467, 468, 469, 470, 471, 472, 473, 474, 536, 538, 545, 555, 556, 557, 558, 562, 563, 617, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 697, 728, 760, 761, 766, 879, 892, 907, 908, 909, 910, 979, 983, 984, 987, 989, 999, 1044], "squar": [4, 5, 13, 61, 71, 79, 80, 81, 84, 85, 87, 96, 97, 105, 114, 125, 127, 128, 148, 151, 156, 166, 168, 169, 177, 178, 180, 181, 183, 188, 189, 195, 196, 199, 201, 204, 209, 216, 217, 218, 231, 232, 234, 248, 274, 309, 317, 318, 320, 335, 351, 372, 377, 380, 386, 389, 394, 407, 409, 410, 412, 413, 414, 418, 419, 430, 438, 440, 441, 442, 444, 445, 447, 448, 452, 455, 457, 458, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 499, 529, 535, 537, 539, 541, 543, 544, 545, 547, 550, 552, 554, 556, 557, 558, 560, 563, 566, 568, 588, 589, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 609, 613, 620, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 683, 684, 685, 686, 688, 690, 692, 694, 707, 719, 720, 721, 747, 748, 755, 756, 760, 766, 767, 782, 787, 788, 825, 832, 833, 841, 842, 845, 847, 849, 850, 857, 860, 879, 899, 900, 902, 904, 905, 906, 908, 910, 934, 960, 973, 978, 980, 981, 990, 991, 995, 1001, 1003, 1009, 1010, 1021, 1022, 1025, 1030, 1033, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "square_dist": 1042, "squared_epsilon_insensit": [665, 674, 676, 900, 983, 1036], "squared_error": [7, 13, 104, 124, 125, 318, 414, 556, 557, 558, 560, 563, 669, 674, 676, 691, 908, 910, 1001, 1003, 1043, 1046, 1047], "squared_hing": [206, 346, 664, 674, 899, 906, 983, 1002], "squared_loss": [392, 1043], "squareform": 172, "squash": [238, 384, 417, 529, 535, 540, 546], "squeez": [75, 157, 158, 238, 283, 305, 1022], "sr": 1012, "sr_color": 224, "sr_err": 224, "sr_lle": 224, "sr_point": 224, "sr_tsne": 224, "srajan": 1038, "sre": 1045, "srebro": 1001, "srep30750": 407, "sri": [669, 983, 1037, 1038], "sridharan": 1035, "sriharsha": [1038, 1039], "srikantan": 983, "srimukh": 1042, "srinath": [1044, 1045], "srinivasan": [1038, 1041], "sripada": 1042, "srivastava": [1033, 1045], "srivatsan": [1036, 1037, 1040], "srvanrel": 1036, "ss": 411, "sse": 441, "sseg": 1035, "ssrn": [199, 217], "sss": 816, "ssvm": 392, "st": [47, 67, 260, 320, 1033, 1036, 1038], "st30": 330, "st50": 330, "st_pipelin": 329, "sta4273": 642, "stabil": [37, 115, 122, 169, 221, 265, 305, 346, 352, 394, 404, 444, 648, 652, 668, 837, 856, 857, 875, 887, 935, 977, 983, 986, 997, 1008, 1014, 1030, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "stabilis": 178, "stabl": [4, 27, 160, 169, 193, 197, 201, 283, 316, 346, 352, 378, 380, 384, 386, 389, 394, 397, 411, 415, 419, 469, 470, 476, 531, 539, 653, 670, 672, 685, 690, 721, 749, 935, 936, 983, 989, 990, 997, 1008, 1026, 1030, 1031, 1036, 1041, 1043, 1047], "stack": [75, 110, 112, 121, 135, 136, 163, 164, 166, 199, 230, 238, 256, 288, 311, 360, 379, 388, 392, 394, 406, 413, 462, 464, 465, 494, 513, 560, 563, 565, 566, 610, 625, 626, 628, 651, 671, 699, 820, 822, 860, 864, 872, 873, 879, 961, 977, 1007, 1008, 1009, 1010, 1011, 1025, 1030, 1033, 1037, 1038, 1039, 1040, 1041], "stack_method": [414, 565], "stack_method_": [414, 565, 566], "stacking_regressor": 132, "stackingclassifi": [315, 362, 394, 398, 414, 566, 977, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "stackingregressor": [132, 315, 394, 398, 414, 565, 977, 1040, 1041, 1042, 1043, 1044, 1047], "stackingregressorinot": 132, "stackoverflow": [385, 388, 392], "stade": 1034, "stage": [0, 7, 26, 72, 111, 116, 122, 125, 378, 384, 394, 403, 407, 414, 446, 551, 552, 557, 558, 559, 560, 586, 587, 589, 600, 984, 997, 1006, 1038, 1042], "staged_decision_funct": [551, 557, 559], "staged_predict": [111, 122, 125, 414, 551, 552, 557, 558, 559, 560, 1030, 1042], "staged_predict_proba": [123, 126, 551, 557, 559, 1030], "staged_scor": [551, 552], "stagewis": 111, "stagg": 1043, "stai": [4, 13, 26, 37, 104, 169, 352, 379, 380, 384, 394, 395, 992, 1011, 1036], "stairstep": 267, "stalei": [1039, 1040], "stall": [379, 383], "stallei": 1042, "stan": [837, 1047], "stand": [263, 353, 384, 392, 412, 529, 535, 543, 544, 594, 607, 676, 703, 715, 733, 734, 754, 783, 785, 792, 986, 987, 993], "standalon": [386, 656, 899], "standard": [11, 12, 13, 20, 26, 32, 34, 55, 61, 70, 71, 73, 80, 81, 86, 96, 111, 114, 116, 117, 118, 119, 120, 128, 132, 148, 151, 156, 158, 160, 169, 178, 184, 188, 197, 199, 208, 220, 221, 222, 233, 238, 250, 255, 258, 259, 260, 261, 263, 305, 310, 336, 351, 366, 367, 372, 373, 374, 376, 377, 378, 380, 382, 383, 385, 386, 389, 392, 394, 397, 401, 403, 407, 409, 410, 411, 415, 417, 444, 466, 470, 486, 494, 499, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 520, 522, 523, 528, 530, 533, 539, 550, 588, 592, 609, 632, 642, 643, 670, 671, 672, 673, 674, 676, 685, 687, 691, 785, 802, 817, 818, 836, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 863, 868, 869, 872, 875, 876, 877, 879, 887, 888, 889, 890, 897, 899, 900, 919, 976, 979, 983, 984, 987, 989, 990, 991, 993, 1001, 1002, 1008, 1012, 1014, 1019, 1021, 1022, 1023, 1025, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "standard_coef_": 1041, "standard_intercept_": 1041, "standard_norm": [362, 685], "standard_scal": 240, "standard_t": 97, "standardscal": [6, 10, 31, 44, 49, 55, 58, 62, 71, 73, 86, 105, 132, 148, 169, 178, 187, 188, 190, 199, 215, 217, 229, 230, 238, 239, 240, 242, 257, 267, 286, 291, 292, 299, 307, 310, 315, 316, 318, 319, 320, 322, 338, 341, 362, 368, 380, 382, 385, 389, 393, 408, 411, 428, 464, 465, 565, 674, 676, 859, 860, 863, 876, 890, 899, 900, 901, 902, 904, 905, 977, 984, 991, 997, 1001, 1002, 1004, 1019, 1032, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "standardscalerifittedstandardscal": 242, "standardscalerstandardscal": [71, 132, 169, 229, 230, 239, 240, 242, 267, 316, 319], "standpoint": 50, "stanford": [148, 377, 647, 680, 681, 834, 837, 838, 892, 985], "stanislav": [1045, 1046], "stanlei": [1044, 1045, 1046], "stap": 1038, "stapl": 1034, "star": [34, 92, 135, 380], "stareh": 1041, "start": [0, 4, 7, 10, 12, 13, 20, 26, 53, 58, 64, 67, 74, 86, 98, 116, 122, 124, 145, 148, 156, 158, 170, 175, 179, 180, 188, 199, 200, 201, 207, 217, 220, 224, 233, 235, 248, 260, 268, 283, 319, 321, 326, 351, 360, 362, 366, 367, 368, 369, 373, 380, 381, 382, 384, 385, 386, 392, 394, 397, 404, 407, 411, 412, 416, 417, 438, 440, 448, 452, 454, 536, 608, 615, 630, 643, 651, 657, 664, 665, 666, 674, 675, 676, 688, 692, 778, 779, 786, 794, 795, 796, 799, 800, 810, 841, 842, 843, 845, 847, 855, 941, 971, 976, 983, 986, 991, 992, 1001, 1008, 1012, 1014, 1022, 1023, 1033, 1035, 1038, 1040, 1042, 1043, 1044, 1045, 1046], "start_": 8, "start_bodi": 8, "start_d": 8, "start_idx": [12, 223], "start_reut": 8, "start_tim": [7, 10, 19, 118, 119, 122, 132, 151, 188, 221], "start_titl": 8, "start_top": 8, "startswith": [13, 70, 221, 296], "startup": 1012, "stat": [6, 8, 10, 70, 80, 148, 151, 172, 257, 260, 268, 272, 288, 317, 325, 326, 377, 389, 393, 409, 472, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 680, 681, 800, 808, 810, 907, 908, 938, 976, 983, 997, 1019, 1037, 1039, 1043], "state": [53, 57, 70, 72, 80, 127, 201, 232, 240, 246, 266, 317, 362, 367, 368, 380, 382, 386, 388, 392, 394, 395, 406, 415, 420, 438, 441, 445, 447, 452, 457, 473, 542, 587, 677, 799, 800, 808, 810, 812, 839, 840, 846, 894, 895, 922, 976, 977, 983, 989, 992, 999, 1007, 1008, 1012, 1032, 1034, 1036, 1038, 1040, 1043, 1046], "state_to_print": 381, "stateless": [70, 352, 368, 382, 394, 415, 580, 581, 587, 636, 862, 863, 871, 997, 1046], "statement": [169, 382, 385, 388, 392, 394, 412, 1005, 1023], "static": [380, 382, 386, 388, 644, 645, 650, 651, 658, 659, 660, 661], "station": 156, "stationari": [155, 417, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "statist": [8, 13, 81, 111, 114, 115, 126, 138, 139, 140, 143, 147, 148, 166, 168, 169, 170, 171, 183, 187, 203, 253, 257, 259, 262, 269, 276, 278, 281, 305, 311, 317, 362, 369, 373, 375, 377, 380, 386, 394, 405, 407, 408, 409, 411, 412, 414, 416, 432, 467, 472, 491, 492, 514, 515, 516, 518, 520, 539, 551, 557, 558, 560, 602, 603, 604, 607, 625, 628, 632, 633, 642, 647, 654, 688, 692, 694, 708, 714, 719, 720, 721, 728, 740, 785, 796, 812, 829, 856, 857, 875, 876, 877, 879, 884, 887, 888, 890, 904, 907, 908, 962, 976, 977, 981, 983, 984, 986, 987, 988, 989, 994, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1015, 1021, 1022, 1035, 1038, 1041, 1042, 1044, 1045, 1048], "statistician": [394, 879], "statistics_": 628, "statisticyearmonthhourweekdaytempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64f64f64": 13, "statlearnspars": [719, 720, 721], "statlib": 375, "statnikov": 987, "statsmodel": [983, 1007], "statu": [109, 160, 322, 374, 384, 397, 494, 839, 840, 1048], "statweb": [647, 680, 681], "staub": 1036, "staubda": 1033, "std": [4, 11, 12, 13, 37, 46, 50, 54, 61, 66, 79, 81, 82, 96, 97, 98, 118, 120, 121, 127, 132, 160, 163, 164, 169, 179, 184, 208, 232, 258, 259, 260, 262, 263, 265, 268, 270, 274, 311, 328, 341, 352, 362, 394, 407, 411, 414, 513, 604, 607, 824, 879, 890, 997, 1018, 1022, 1038, 1042], "std_": [264, 1035], "std_auc": 270, "std_display_styl": [234, 262, 802, 818], "std_error": 138, "std_fit_tim": [117, 285, 796, 810], "std_i": 169, "std_precis": 258, "std_predict": 158, "std_predictions_gpr": 151, "std_recal": 258, "std_score": [352, 1043], "std_score_tim": [117, 261, 796, 810], "std_test_precis": 258, "std_test_recal": 258, "std_test_scor": [71, 73, 117, 138, 147, 259, 260, 261, 268, 285, 470, 592, 796, 810, 1036, 1043], "std_time": 1036, "std_tpr": 270, "std_train_scor": [796, 810, 1036], "std_y_pr": 156, "stderr": [12, 828], "stdin": [388, 1023], "stdout": [8, 95, 207, 828, 848, 856, 857], "stds_california": 164, "stds_diabet": 164, "steadi": [894, 895], "steelblu": [96, 97, 134], "steep": [152, 170, 269, 270, 407, 411, 417, 448, 454], "stef": [625, 977], "stefan": [1033, 1034, 1038, 1040], "stefani": [0, 1043, 1045, 1046, 1047, 1048], "stefanini": 1044, "stefano": 1032, "stehl": [1044, 1045], "stein": 1036, "steinbach": [407, 1045, 1047], "steinfurt": [1040, 1042], "steingold": [1037, 1038], "steinlei": [407, 703], "steinley2004": 703, "stella": [407, 450, 460], "stellalin7": 1045, "stem": [114, 122, 171, 198, 251, 411, 415, 979, 989], "step": [20, 26, 33, 42, 54, 55, 58, 67, 70, 71, 72, 73, 74, 81, 86, 98, 102, 111, 116, 120, 121, 122, 132, 145, 146, 147, 153, 156, 169, 171, 199, 207, 217, 229, 230, 233, 239, 242, 251, 258, 261, 267, 269, 283, 285, 286, 291, 299, 302, 307, 310, 311, 316, 319, 330, 334, 338, 352, 353, 356, 362, 366, 369, 375, 378, 379, 380, 382, 384, 385, 388, 392, 394, 404, 405, 407, 409, 410, 412, 414, 415, 416, 440, 445, 447, 534, 535, 536, 537, 544, 561, 586, 587, 589, 591, 592, 595, 604, 625, 642, 646, 664, 665, 667, 674, 676, 677, 678, 692, 698, 794, 795, 796, 799, 800, 810, 830, 831, 832, 833, 855, 856, 857, 859, 860, 862, 899, 900, 901, 902, 904, 905, 935, 936, 958, 962, 977, 983, 986, 991, 992, 997, 1001, 1003, 1004, 1007, 1011, 1019, 1023, 1030, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1048], "stephan": [706, 1033, 1039, 1040, 1042], "stephani": 1041, "stephen": [1012, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043], "stepwis": [127, 633, 652, 653, 654, 680, 681, 983], "stern": [785, 987], "steve": [1032, 1034, 1038, 1043, 1045], "steven": [1032, 1033, 1035, 1037, 1038, 1043, 1045, 1046], "steward": 1037, "stewart": [1035, 1040, 1043, 1045], "stick": [9, 794, 986], "stijn": 1037, "stikhin": 1040, "still": [4, 13, 27, 32, 44, 53, 55, 57, 62, 82, 90, 99, 119, 124, 127, 132, 151, 157, 168, 169, 171, 172, 178, 183, 199, 201, 217, 233, 263, 269, 305, 317, 318, 321, 351, 352, 362, 368, 374, 379, 380, 382, 384, 385, 386, 388, 392, 394, 407, 411, 414, 415, 418, 438, 442, 452, 472, 494, 625, 630, 633, 635, 715, 753, 775, 778, 789, 790, 799, 800, 813, 816, 877, 879, 899, 917, 976, 977, 981, 983, 986, 987, 990, 993, 995, 1002, 1003, 1006, 1008, 1011, 1012, 1030, 1032, 1035, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046], "stine": [1038, 1039], "stochast": [7, 58, 122, 123, 126, 139, 166, 175, 177, 187, 188, 206, 218, 222, 224, 228, 233, 289, 291, 292, 298, 301, 303, 318, 336, 337, 407, 412, 414, 460, 486, 494, 500, 501, 502, 512, 520, 534, 542, 557, 558, 569, 602, 625, 629, 637, 656, 657, 666, 670, 672, 674, 675, 676, 677, 685, 686, 687, 688, 690, 825, 848, 855, 856, 857, 860, 869, 903, 935, 936, 961, 976, 990, 991, 993, 1009, 1010, 1024, 1025, 1030, 1031, 1034, 1035, 1037, 1039, 1041], "stochastic_gradi": [1032, 1033, 1039], "stock": [3, 16, 46, 52, 66, 166, 220, 221, 224, 407, 409, 452, 470, 687, 1009, 1017], "stogbauer": [605, 606], "stojanov": [1044, 1045], "stolbunov": 1035, "stone": [380, 907, 908, 1003], "stop": [4, 7, 12, 17, 44, 62, 110, 111, 117, 125, 136, 156, 158, 166, 170, 177, 187, 188, 201, 218, 309, 316, 345, 380, 382, 388, 389, 394, 407, 412, 414, 416, 438, 439, 441, 443, 445, 447, 450, 452, 460, 461, 469, 470, 476, 480, 481, 482, 488, 494, 506, 507, 530, 534, 535, 536, 537, 538, 541, 543, 544, 545, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 569, 586, 587, 589, 600, 615, 625, 642, 643, 644, 646, 647, 650, 654, 656, 657, 664, 665, 666, 667, 669, 674, 675, 676, 678, 689, 690, 693, 712, 747, 794, 795, 825, 856, 857, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 941, 961, 976, 983, 991, 992, 1002, 1003, 1008, 1009, 1010, 1012, 1025, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "stop_n_inli": [669, 983], "stop_prob": 669, "stop_scor": [669, 983], "stop_word": [15, 19, 351, 352, 415, 586, 587, 589], "stop_words_": [586, 589], "stopiter": 1042, "stopword": [487, 1023], "storag": [0, 353, 394, 656, 657, 664, 665, 666, 674, 675, 676, 899, 990, 1002, 1033, 1038], "storch": 1039, "store": [32, 53, 54, 70, 72, 81, 90, 145, 159, 175, 185, 188, 203, 221, 229, 239, 250, 265, 269, 325, 353, 360, 366, 374, 375, 380, 382, 387, 388, 389, 392, 394, 403, 408, 410, 412, 414, 415, 417, 418, 436, 438, 442, 444, 448, 455, 467, 468, 471, 472, 473, 474, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 506, 532, 533, 539, 547, 548, 553, 554, 555, 556, 561, 562, 563, 564, 567, 568, 587, 608, 609, 625, 629, 630, 633, 636, 647, 648, 652, 658, 659, 660, 661, 664, 665, 671, 673, 674, 675, 676, 686, 687, 688, 690, 695, 696, 698, 699, 700, 778, 794, 795, 796, 802, 810, 818, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 854, 870, 877, 879, 880, 894, 895, 896, 919, 920, 944, 945, 958, 961, 973, 977, 979, 983, 990, 999, 1002, 1003, 1007, 1014, 1023, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "store_cent": [444, 1047], "store_covari": [34, 547, 548, 1035, 1037], "store_cv_valu": [671, 673, 1038, 1041], "store_precis": [33, 79, 467, 468, 471, 472, 473, 474], "stori": [168, 260, 278, 375, 986, 1048], "stork": 981, "stott": 1038, "stoyanov": [1038, 1039], "str": [8, 10, 13, 58, 60, 103, 105, 120, 217, 238, 260, 272, 283, 293, 336, 351, 374, 375, 389, 415, 418, 419, 423, 428, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 615, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 690, 694, 695, 696, 697, 698, 700, 705, 707, 709, 711, 724, 726, 727, 729, 730, 735, 739, 768, 771, 775, 776, 777, 778, 779, 780, 781, 784, 786, 789, 790, 796, 797, 798, 799, 800, 802, 803, 805, 807, 808, 810, 814, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 918, 919, 920, 923, 926, 928, 932, 943, 944, 945, 947, 950, 971, 972, 975, 1045], "strai": 992, "straight": [100, 189, 195, 197, 257, 342, 366], "straightforward": [306, 379, 412, 1012], "straka": 1042, "strateg": 395, "strategi": [4, 13, 52, 54, 58, 61, 71, 121, 126, 127, 132, 139, 145, 147, 163, 164, 166, 171, 183, 188, 199, 206, 207, 217, 229, 230, 238, 240, 253, 259, 261, 263, 264, 265, 267, 268, 269, 270, 272, 276, 281, 298, 301, 303, 304, 306, 307, 311, 312, 313, 315, 316, 319, 353, 365, 382, 386, 393, 394, 411, 414, 415, 416, 419, 435, 436, 437, 445, 450, 460, 470, 500, 502, 510, 512, 520, 531, 536, 549, 550, 559, 560, 562, 563, 565, 566, 569, 586, 587, 589, 590, 592, 600, 625, 626, 628, 632, 643, 645, 649, 651, 653, 659, 661, 663, 671, 673, 689, 693, 702, 709, 711, 729, 752, 754, 792, 796, 799, 800, 802, 810, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 856, 857, 864, 869, 880, 894, 899, 901, 904, 907, 908, 909, 910, 958, 976, 977, 986, 988, 989, 990, 991, 993, 995, 997, 1001, 1002, 1003, 1007, 1009, 1018, 1023, 1025, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048], "stratif": [797, 798, 804, 805, 814, 815, 816, 958, 1039], "stratifi": [5, 100, 118, 128, 144, 171, 214, 229, 238, 242, 255, 260, 263, 269, 286, 291, 292, 315, 382, 394, 549, 557, 565, 566, 600, 657, 664, 666, 674, 796, 799, 800, 802, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 833, 848, 856, 958, 987, 990, 1018, 1035, 1036, 1037, 1039, 1040, 1043], "stratifiedgroupkfold": [255, 1043], "stratifiedkfold": [147, 247, 255, 266, 270, 328, 411, 435, 565, 566, 592, 600, 657, 671, 796, 797, 799, 800, 801, 802, 804, 806, 810, 814, 816, 818, 819, 820, 821, 822, 823, 824, 826, 880, 1018, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1043], "stratifiedshufflesplit": [255, 338, 411, 1018, 1030, 1031, 1036, 1037, 1043], "stream": [8, 407, 412, 415, 460, 587, 868, 869, 879, 979, 1007, 1038, 1041], "stream_reuters_docu": 8, "streamhandl": 1041, "streamlin": 983, "street": [132, 148, 377], "strehl": 407, "strength": [12, 132, 158, 199, 203, 261, 315, 366, 410, 414, 444, 565, 566, 641, 646, 647, 650, 656, 657, 667, 670, 671, 672, 673, 674, 676, 678, 685, 780, 856, 857, 899, 900, 904, 905, 976, 983, 990, 993, 1001, 1002], "stress": [688, 692, 984, 1045], "stress_": 688, "stretch": [224, 249], "stretched_gaussian": 249, "strickland": 1036, "strict": [362, 378, 394, 403, 412, 501, 533, 586, 587, 589, 983, 1030, 1039, 1042, 1048], "stricter": 163, "strictli": [27, 199, 217, 235, 305, 321, 352, 385, 394, 405, 410, 412, 415, 506, 507, 533, 539, 542, 559, 560, 586, 589, 640, 668, 669, 671, 673, 693, 698, 736, 763, 796, 799, 800, 806, 810, 822, 848, 875, 887, 891, 892, 894, 895, 899, 900, 904, 905, 934, 976, 978, 983, 987, 997, 1001, 1031, 1041, 1046], "striebel": [1036, 1037], "strife": 984, "strike": [122, 170, 203], "string": [8, 71, 120, 159, 217, 230, 264, 318, 353, 366, 374, 375, 380, 381, 382, 386, 394, 401, 408, 411, 414, 415, 416, 418, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 487, 488, 494, 503, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 615, 618, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 697, 707, 709, 717, 729, 759, 762, 768, 771, 775, 776, 777, 778, 789, 790, 794, 795, 796, 799, 800, 802, 810, 818, 822, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 917, 919, 920, 927, 928, 929, 945, 951, 955, 971, 972, 976, 977, 987, 1000, 1002, 1014, 1021, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "strip": [15, 217, 352, 366, 374, 375, 494], "strip_acc": [586, 587, 589], "strip_accents_unicod": 1040, "stripe": 308, "stripplot": 169, "strive": [379, 395, 1012], "strong": [4, 13, 54, 151, 166, 168, 169, 177, 179, 192, 196, 197, 203, 204, 205, 218, 234, 281, 312, 346, 405, 406, 412, 414, 522, 647, 670, 980, 981, 983, 984, 986, 994, 1002, 1009, 1021], "stronger": [261, 641, 650, 656, 657, 670, 671, 672, 673, 674, 676, 685], "strongest": [17, 192], "strongli": [25, 27, 82, 86, 98, 121, 125, 169, 181, 214, 235, 266, 351, 380, 396, 397, 405, 414, 656, 733, 792, 983, 984, 1025, 1039, 1046], "stroudsburg": [896, 1000], "strubel": 1043, "struct": [378, 394, 1033], "structur": [0, 3, 8, 9, 13, 14, 15, 16, 17, 20, 21, 36, 40, 41, 42, 43, 44, 46, 52, 53, 54, 55, 56, 62, 66, 68, 82, 105, 109, 128, 150, 161, 166, 220, 221, 224, 230, 235, 251, 255, 266, 285, 288, 310, 316, 319, 324, 331, 338, 342, 355, 356, 357, 361, 366, 375, 377, 380, 382, 385, 392, 394, 395, 397, 404, 407, 409, 410, 411, 412, 414, 415, 416, 417, 439, 440, 443, 444, 448, 449, 450, 451, 452, 455, 460, 461, 470, 494, 501, 502, 506, 509, 511, 512, 519, 528, 533, 539, 542, 561, 608, 609, 610, 614, 615, 616, 687, 694, 707, 711, 825, 847, 852, 879, 891, 892, 895, 907, 908, 909, 910, 913, 935, 936, 958, 961, 984, 986, 987, 990, 992, 993, 997, 1000, 1003, 1007, 1008, 1009, 1017, 1022, 1023, 1030, 1031, 1033, 1034, 1036, 1040], "struggl": [379, 395, 407], "stuck": [61, 690, 984], "student": [0, 97, 260, 984, 1008, 1012], "studi": [4, 27, 60, 124, 199, 217, 263, 266, 267, 351, 375, 377, 411, 416, 694, 706, 755, 756, 824, 985, 987, 1001, 1014], "studio": [378, 1012], "study_135": 374, "study_14": 374, "study_34": 374, "study_98": 374, "study_99": 374, "stuff": 1012, "stump": [113, 414, 557, 1041], "stupp": [1036, 1037], "stupperich": 1042, "sturla": 1032, "style": [24, 26, 81, 124, 188, 207, 217, 264, 380, 387, 407, 415, 441, 445, 457, 698, 802, 818, 919, 920, 932, 1030, 1033, 1044], "st\u00e9fan": 381, "st\u00e9phan": 1040, "st\u00e9phane": [1039, 1040, 1044, 1045], "su": [719, 720, 721], "sub": [8, 37, 48, 53, 55, 57, 60, 70, 104, 235, 237, 245, 317, 325, 326, 335, 338, 347, 375, 380, 382, 386, 394, 408, 414, 415, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 595, 608, 609, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 858, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 945, 983, 987, 1001, 1023, 1040, 1044, 1046, 1047], "sub_sampl": 534, "subclass": [109, 382, 417, 572, 953, 1035, 1038, 1043, 1047], "subclust": [407, 440], "subcluster_centers_": [42, 440], "subcluster_labels_": 440, "subcompon": [95, 412], "subdirectori": 380, "subdivid": [375, 417], "subestim": 382, "subestimator__c": 382, "subestimator__class_weight": 382, "subestimator__du": 382, "subestimator__fit_intercept": 382, "subestimator__intercept_sc": 382, "subestimator__l1_ratio": 382, "subestimator__max_it": 382, "subestimator__multi_class": 382, "subestimator__n_job": 382, "subestimator__penalti": 382, "subestimator__random_st": 382, "subestimator__solv": 382, "subestimator__tol": 382, "subestimator__verbos": 382, "subestimator__warm_start": 382, "subexpress": 13, "subfold": [378, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 1043], "subgraph": 404, "subhash": 1044, "subhodeep": [1030, 1031, 1032], "subi": [1039, 1040, 1045], "subject": [70, 129, 251, 263, 351, 375, 380, 382, 384, 392, 394, 395, 405, 406, 409, 411, 412, 493, 656, 657, 683, 862, 957, 978, 983, 1002, 1006, 1023, 1039, 1040, 1043, 1045], "subject_body_extractor": 70, "subject_body_transform": 70, "subjectbodi": 70, "subjectbodyextractor": 70, "sublinear": [412, 588, 589], "sublinear_tf": [351, 412, 415, 588, 589], "submatric": 404, "submatrix": [404, 422, 449, 451], "submit": [377, 378, 379, 382, 383, 384, 385, 388, 394, 395], "submitt": 379, "submodel": 411, "submodul": [380, 384, 386, 406, 979, 985, 1030], "subobject": [421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910], "suboptim": [411, 698, 700, 779, 786, 990, 1038, 1046], "subpackag": [380, 384, 1005, 1034, 1039], "subplot": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 57, 60, 62, 65, 66, 73, 75, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 100, 104, 105, 111, 113, 114, 116, 117, 118, 120, 121, 122, 125, 127, 129, 130, 132, 133, 134, 143, 153, 155, 160, 163, 164, 169, 170, 172, 175, 179, 182, 190, 191, 193, 194, 197, 198, 199, 200, 201, 203, 207, 212, 213, 215, 217, 220, 221, 224, 225, 228, 229, 231, 233, 234, 236, 237, 238, 239, 245, 246, 247, 248, 250, 251, 255, 256, 257, 260, 262, 263, 265, 266, 267, 269, 270, 271, 273, 274, 281, 283, 285, 286, 287, 288, 291, 292, 294, 295, 296, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 315, 319, 320, 328, 330, 335, 336, 337, 338, 342, 345, 346, 347, 348, 351, 352, 353, 356, 357, 387, 1019], "subplot_kw": [220, 287], "subplot_spec": 387, "subplot_titl": 117, "subplots_adjust": [6, 7, 14, 15, 39, 42, 44, 45, 50, 51, 54, 62, 64, 80, 82, 91, 92, 97, 98, 104, 113, 114, 132, 169, 198, 199, 214, 217, 228, 236, 245, 247, 248, 251, 255, 271, 273, 288, 296, 299, 302, 307, 317, 326, 335, 338, 1019], "subpopul": [216, 677, 983], "subproblem": 1035, "subrahmanyam": [1030, 1033], "subramaniam": [1045, 1046, 1047], "subramaniyan": 1042, "subramanyam": 1037, "subrat": 1042, "subrat93": 1042, "subsampl": [104, 123, 126, 170, 216, 256, 312, 317, 456, 557, 558, 559, 560, 561, 630, 677, 699, 799, 800, 825, 864, 876, 888, 915, 925, 979, 983, 1008, 1030, 1040, 1044, 1046, 1047, 1048], "subscrib": 1028, "subscript": [367, 1043], "subsect": [367, 380, 406], "subsembl": 1007, "subsequ": [7, 32, 58, 75, 98, 111, 145, 187, 201, 262, 265, 283, 285, 338, 362, 380, 382, 386, 394, 403, 407, 408, 414, 417, 435, 494, 506, 551, 552, 557, 559, 560, 664, 666, 674, 799, 800, 827, 828, 831, 834, 835, 836, 837, 838, 856, 874, 878, 977, 986, 988, 1039, 1040, 1044, 1046, 1048], "subset": [7, 19, 20, 26, 27, 32, 70, 71, 80, 81, 118, 120, 121, 122, 138, 145, 148, 170, 172, 188, 200, 214, 215, 216, 217, 231, 233, 237, 238, 258, 261, 263, 269, 270, 272, 278, 310, 311, 317, 325, 329, 351, 352, 353, 362, 375, 380, 388, 392, 394, 404, 405, 407, 408, 411, 414, 415, 417, 424, 435, 447, 462, 464, 465, 467, 486, 487, 490, 491, 495, 506, 547, 548, 549, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 600, 608, 627, 637, 638, 639, 640, 649, 653, 656, 664, 665, 666, 669, 672, 673, 674, 675, 676, 677, 695, 701, 702, 711, 714, 716, 728, 731, 752, 754, 790, 793, 798, 823, 825, 827, 828, 829, 830, 834, 835, 836, 837, 838, 841, 846, 849, 856, 865, 894, 895, 899, 901, 904, 907, 909, 915, 956, 976, 983, 987, 988, 998, 1000, 1002, 1003, 1023, 1033, 1038, 1039, 1041, 1043, 1048], "subset_featur": 71, "subset_label": 217, "subset_mask": 275, "subsidi": 169, "subspac": [102, 410, 414, 450, 513, 553, 554, 689, 693, 936, 981, 990, 993, 999, 1012, 1022], "substanti": [138, 285, 289, 290, 306, 380, 845, 993, 1034, 1037], "substitut": [398, 971, 1008, 1036], "subtl": [348, 362, 986, 1008], "subtleti": 1025, "subtract": [156, 169, 238, 410, 412, 441, 445, 457, 532, 642, 643, 1037, 1047], "subtre": [555, 556, 557, 558, 562, 563, 907, 908, 909, 910, 1003], "subwindow": 1003, "succe": [102, 127, 183], "succeed": 380, "success": [50, 143, 166, 253, 264, 267, 268, 276, 345, 362, 402, 407, 411, 412, 414, 513, 562, 577, 796, 799, 800, 817, 904, 990, 1009, 1012, 1018, 1022, 1025, 1042], "successfulli": [4, 14, 309, 379, 384, 407, 415, 1001], "successor": [448, 454, 1003, 1007], "suchak": 1043, "sudo": [378, 397], "suen": 991, "suffer": [86, 119, 171, 283, 305, 352, 366, 407, 414, 542, 760, 982, 983, 987, 990, 1022, 1039], "suffic": [57, 58, 382, 1023], "suffici": [27, 55, 132, 207, 274, 338, 366, 394, 407, 416, 530, 655, 680, 681, 815, 816, 988, 990, 1008, 1039, 1045, 1046], "suffix": [384, 397, 822, 987, 1040], "suganthan": 377, "sugar": [148, 377], "suggest": [80, 98, 114, 118, 169, 172, 260, 338, 366, 379, 380, 387, 394, 411, 412, 414, 467, 472, 563, 643, 824, 981, 983, 984, 992, 995, 1002, 1023, 1034, 1041, 1044, 1047], "suh": 1038, "suit": [20, 95, 130, 169, 199, 200, 228, 250, 318, 319, 321, 351, 367, 380, 382, 385, 386, 388, 392, 397, 410, 412, 414, 448, 450, 501, 675, 836, 880, 930, 976, 979, 984, 987, 989, 990, 1001, 1007, 1008, 1012, 1016, 1037, 1044], "suitabl": [115, 124, 183, 185, 203, 300, 353, 374, 375, 386, 389, 407, 412, 415, 450, 460, 466, 485, 503, 506, 625, 633, 834, 835, 838, 873, 874, 897, 952, 956, 981, 983, 986, 997, 999, 1001, 1007, 1023, 1044, 1045], "sullivan": [1033, 1034, 1035], "sultan": 1044, "sum": [8, 17, 19, 26, 61, 81, 92, 98, 104, 123, 124, 144, 148, 159, 169, 180, 186, 195, 199, 203, 214, 217, 221, 223, 238, 269, 283, 290, 293, 319, 329, 342, 343, 346, 351, 352, 353, 360, 377, 386, 394, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 417, 430, 440, 441, 445, 447, 457, 462, 463, 480, 481, 482, 513, 518, 521, 529, 532, 534, 535, 539, 542, 543, 544, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 567, 568, 588, 589, 609, 611, 621, 623, 633, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 674, 675, 676, 677, 679, 682, 688, 692, 694, 697, 707, 708, 717, 723, 738, 753, 755, 756, 760, 785, 827, 828, 832, 833, 842, 846, 850, 857, 858, 878, 879, 899, 900, 902, 905, 907, 908, 909, 910, 938, 962, 968, 973, 983, 987, 988, 989, 990, 1002, 1003, 1021, 1033, 1034, 1036, 1038, 1039, 1041, 1046, 1047], "sum_": [260, 269, 346, 404, 405, 407, 412, 413, 414, 536, 538, 545, 694, 752, 981, 983, 984, 987, 989, 991, 992, 994, 995, 997, 1001, 1002, 1003], "sum_gradi": 414, "sum_h": 992, "sum_hessian": 414, "sum_i": [318, 414, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 978, 979, 983, 985, 987, 992], "sum_j": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 983, 987, 992], "sum_k": [414, 547, 1003], "sum_m": 414, "sum_n": [267, 705, 987], "sum_n_compon": [462, 858], "sum_over_featur": [1030, 1045], "sum_weight": 968, "sumit": 1044, "summar": [199, 251, 267, 269, 353, 380, 382, 396, 414, 519, 656, 692, 704, 705, 983, 984, 987, 993], "summari": [13, 148, 319, 360, 362, 377, 392, 690, 711, 785, 912, 985, 988, 1007, 1023], "summaris": [230, 316], "summat": [989, 991], "summer": [0, 4, 13, 48, 1030], "sun": [4, 127, 170, 1038, 1043, 1044], "sundai": 4, "sundaramahalingam": 1047, "sung": 1041, "sunglok": 983, "sunita": 780, "sunitha": 1042, "sunmi": 1041, "super": [19, 25, 27, 382, 415, 1038], "superflu": 412, "superimpos": 412, "superior": 414, "superposit": 183, "supersed": [379, 1035], "superset": [411, 817, 987], "supervis": [8, 19, 25, 27, 31, 37, 49, 54, 56, 58, 70, 86, 103, 109, 116, 127, 130, 139, 140, 153, 159, 221, 233, 236, 247, 260, 292, 317, 328, 331, 335, 338, 341, 342, 352, 353, 366, 369, 375, 382, 393, 394, 405, 407, 410, 411, 412, 414, 415, 417, 435, 437, 462, 486, 501, 502, 551, 586, 588, 591, 592, 632, 674, 726, 797, 798, 801, 803, 804, 805, 806, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 825, 848, 858, 859, 863, 873, 880, 894, 895, 896, 904, 981, 984, 987, 989, 990, 993, 997, 998, 1002, 1003, 1004, 1007, 1008, 1009, 1011, 1014, 1015, 1017, 1023, 1025, 1030, 1036, 1042], "supp": 388, "suppli": [127, 392, 407, 644, 919, 920, 990, 1012, 1034, 1036, 1038, 1043], "support": [4, 6, 7, 8, 9, 10, 13, 24, 30, 32, 46, 70, 71, 72, 110, 115, 131, 132, 136, 144, 145, 170, 200, 209, 210, 211, 217, 233, 234, 235, 241, 254, 258, 265, 267, 278, 283, 302, 305, 309, 319, 325, 326, 329, 330, 334, 335, 338, 339, 340, 341, 342, 343, 346, 349, 366, 367, 368, 369, 374, 378, 380, 382, 384, 385, 386, 387, 389, 390, 393, 394, 395, 407, 411, 412, 415, 416, 417, 435, 438, 448, 450, 451, 462, 463, 464, 465, 467, 472, 485, 494, 510, 536, 538, 539, 542, 545, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 611, 612, 613, 615, 617, 618, 620, 621, 623, 625, 629, 630, 631, 641, 643, 655, 656, 657, 668, 669, 670, 672, 673, 674, 675, 676, 685, 688, 692, 697, 705, 711, 726, 727, 735, 740, 775, 776, 777, 780, 781, 784, 785, 796, 799, 800, 802, 810, 822, 823, 831, 832, 837, 839, 840, 843, 845, 846, 851, 859, 860, 864, 870, 872, 873, 875, 879, 887, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 925, 930, 931, 975, 976, 977, 979, 980, 981, 983, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 1001, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1017, 1019, 1023, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "support_": [234, 345, 467, 472, 591, 592, 600, 901, 902, 903, 904, 905, 1002], "support_fract": [9, 467, 472], "support_reweight": [467, 472], "support_vector": 336, "support_vector_indic": 336, "support_vectors_": [7, 10, 339, 342, 343, 901, 902, 903, 904, 905, 1002], "suppos": [263, 325, 366, 367, 382, 386, 409, 414, 415, 416, 555, 559, 562, 656, 657, 664, 666, 672, 673, 674, 739, 845, 899, 901, 904, 907, 909, 925, 991, 1039, 1041, 1047], "suppress": [169, 366, 388, 690, 990, 1037], "suptitl": [4, 5, 13, 15, 32, 33, 34, 39, 40, 50, 53, 57, 60, 67, 75, 95, 98, 105, 111, 120, 121, 129, 132, 160, 169, 170, 172, 193, 198, 214, 215, 220, 221, 222, 237, 248, 256, 302, 305, 307, 315, 317, 325, 326, 330, 345, 346, 357], "surac": 1040, "sure": [26, 56, 192, 205, 235, 236, 362, 366, 367, 374, 378, 379, 380, 381, 382, 384, 385, 388, 392, 405, 408, 415, 491, 521, 647, 919, 920, 930, 973, 977, 984, 1001, 1007, 1008, 1037, 1038, 1040, 1045], "suresh": 1044, "surf": 170, "surfac": [31, 90, 99, 110, 111, 112, 113, 115, 133, 136, 166, 182, 191, 208, 266, 286, 334, 335, 355, 356, 358, 359, 360, 361, 414, 502, 551, 555, 562, 629, 761, 907, 913, 981, 986, 1001, 1002, 1003, 1009], "surface_": 629, "surgan12": 1039, "surpass": [111, 342, 856, 857], "surplu": 411, "surpris": [53, 170, 378, 983, 1007, 1032], "surprisingli": [217, 375, 415], "surrend": 19, "surrog": 1012, "surround": [236, 380, 845, 993], "survei": [169, 410], "surviv": [71, 171, 976, 1007], "surya": [1043, 1044], "susik": 1034, "suspect": 4, "suspici": 375, "sustain": 0, "sutherland": [1032, 1034, 1035, 1037, 1038, 1039, 1040], "sutiono": 1041, "suzuki": [1041, 1042], "sv": 1002, "sv_ind": 234, "sv_ratio": 234, "svc": [6, 25, 27, 30, 31, 32, 70, 74, 122, 133, 140, 146, 152, 166, 175, 190, 203, 215, 233, 236, 240, 254, 258, 260, 262, 265, 266, 267, 270, 271, 275, 307, 310, 315, 317, 328, 330, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 347, 348, 349, 351, 366, 382, 386, 394, 401, 405, 408, 411, 414, 433, 434, 435, 466, 513, 553, 695, 696, 698, 700, 796, 813, 826, 828, 859, 896, 897, 899, 901, 902, 905, 975, 976, 982, 985, 987, 988, 997, 1009, 1014, 1018, 1019, 1021, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "svc__c": [307, 859], "svc_disp": [241, 315, 1027], "svc_isoton": 25, "svc_sigmoid": 25, "svcifittedsvc": 241, "svcsvc": [240, 258, 260, 317], "svd": [34, 102, 130, 221, 352, 389, 403, 410, 419, 449, 451, 480, 481, 483, 519, 530, 531, 532, 533, 537, 538, 539, 542, 544, 547, 548, 662, 670, 671, 672, 683, 684, 685, 858, 936, 981, 1023, 1032, 1036, 1037, 1043, 1045], "svd__n_compon": 858, "svd_lapack_driv": 936, "svd_method": [19, 449, 451, 530, 1033], "svd_solver": [6, 70, 95, 102, 322, 403, 412, 533, 539, 1019, 1036, 1048], "sven": [1044, 1045], "svg": 0, "svm": [3, 7, 8, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 48, 56, 70, 72, 74, 95, 109, 120, 130, 133, 137, 139, 141, 142, 146, 147, 148, 149, 153, 155, 159, 166, 177, 180, 182, 191, 192, 208, 209, 210, 211, 212, 218, 228, 234, 236, 237, 240, 241, 249, 254, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 271, 274, 275, 278, 289, 290, 294, 295, 296, 299, 301, 307, 308, 315, 317, 324, 328, 329, 331, 333, 336, 345, 346, 349, 351, 366, 369, 375, 382, 386, 394, 401, 408, 411, 412, 414, 416, 433, 434, 435, 492, 502, 510, 513, 539, 553, 554, 561, 565, 566, 575, 591, 592, 597, 598, 603, 629, 637, 641, 666, 674, 675, 676, 687, 695, 696, 698, 700, 711, 732, 739, 758, 796, 810, 816, 821, 822, 825, 827, 828, 845, 859, 860, 872, 874, 879, 895, 896, 975, 976, 979, 982, 984, 985, 987, 988, 992, 1000, 1002, 1004, 1009, 1010, 1014, 1017, 1018, 1019, 1023, 1025, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "svm1": 408, "svm2": 408, "svm__c": 74, "svm_gui": 1021, "svm_weight": 144, "svm_weights_select": 144, "svmlight": [373, 485, 506, 507, 1025, 1030, 1031, 1037, 1039], "svmlight_file_test": 507, "svmlight_file_train": 507, "svmsgd": 1001, "svr": [7, 10, 166, 227, 243, 315, 333, 349, 366, 433, 434, 554, 565, 566, 591, 592, 641, 676, 796, 802, 900, 902, 904, 980, 1009, 1021, 1030, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "svr_fit": 234, "svr_lin": 345, "svr_poli": 345, "svr_predict": 234, "svr_rbf": 345, "svrg": 1007, "sw": 283, "sw_test": [24, 316], "sw_train": [24, 316], "swap": [407, 412, 714, 733, 966, 967, 1030], "swapnil": 1044, "swart": 17, "sweep": 855, "swier": [1041, 1042], "swiss": [67, 166, 219, 220, 221, 222, 225, 226, 407, 528, 690, 691, 1009, 1044], "switch": [365, 676, 702, 715, 734, 752, 754, 792, 839, 840, 935, 936, 987, 990, 1025, 1030], "swpeas": 1043, "swu": 1034, "sy": [8, 12, 19, 207, 232, 283, 329, 353, 375, 392, 615], "syd": 1045, "sydnei": 0, "syhw": [1031, 1032], "sylvain": [0, 370, 1034, 1039, 1040, 1041, 1042, 1043, 1044], "sylvainlan": [1038, 1039, 1040, 1041, 1042], "symbol": [12, 353, 367, 382, 386, 409, 415, 497, 580, 586, 587, 589, 911, 913, 1007], "symbol_dict": 12, "symlink": 384, "symlognorm": [178, 183], "symmetr": [44, 124, 172, 201, 394, 405, 407, 450, 460, 461, 472, 517, 525, 527, 688, 692, 693, 702, 703, 713, 714, 715, 721, 725, 733, 734, 752, 754, 760, 782, 792, 794, 795, 973, 976, 983, 987, 990, 1046], "symmetri": [148, 377, 697, 872, 875, 887, 985], "symmetric_arrai": 973, "symposium": [148, 377, 407, 458], "sync": 384, "synchron": [380, 415], "syndrom": 374, "synnaev": 302, "synonym": [394, 841, 842, 843, 849, 850, 851], "synonymi": 412, "syntax": [367, 380, 385, 388, 408, 466, 858, 859, 897, 976, 1014, 1041, 1043], "synthet": [4, 14, 25, 27, 31, 34, 37, 42, 49, 118, 124, 130, 151, 156, 158, 170, 189, 201, 216, 299, 307, 346, 362, 366, 373, 383, 395, 407, 409, 416, 656, 657, 899, 900, 906, 981, 1021, 1022, 1036], "synthetic_feature_weight": [656, 657], "syonekura": 1038, "sysconfig": 378, "system": [5, 100, 183, 260, 267, 362, 366, 367, 368, 375, 377, 380, 381, 382, 383, 388, 392, 397, 407, 412, 414, 418, 442, 469, 470, 476, 533, 537, 541, 548, 637, 643, 648, 649, 652, 653, 654, 680, 681, 723, 753, 766, 794, 848, 894, 895, 955, 983, 987, 990, 999, 1007, 1008, 1012, 1023, 1030, 1038, 1039], "systemat": [4, 127, 260, 382, 710, 725, 987, 1045], "sysuresh": 1044, "szabo": [1032, 1033], "szepieniec": 1036, "szlam": [412, 935, 936], "szpak": [1037, 1040], "szyma\u0144ski": [1038, 1039], "s\u00e1nchez": 1042, "s\u00e4ger": [1033, 1036], "s\u00e9bastien": [1012, 1036, 1038], "s\u00f6nke": 1040, "s\u00f8ren": 1047, "s\u0142apek": 1041, "t": [8, 11, 12, 17, 26, 27, 34, 39, 40, 42, 43, 44, 52, 54, 58, 70, 72, 78, 79, 80, 82, 85, 92, 96, 97, 102, 104, 105, 111, 114, 115, 123, 124, 125, 126, 127, 131, 132, 148, 152, 154, 155, 156, 159, 160, 166, 169, 170, 171, 172, 178, 180, 183, 186, 193, 196, 197, 198, 199, 200, 217, 219, 221, 222, 223, 224, 226, 235, 236, 246, 249, 251, 259, 260, 281, 283, 295, 296, 301, 315, 318, 319, 321, 325, 326, 328, 334, 335, 338, 339, 343, 351, 352, 353, 359, 360, 362, 366, 367, 374, 375, 377, 380, 382, 384, 386, 388, 393, 394, 397, 398, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 420, 424, 430, 432, 435, 445, 446, 448, 454, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 493, 494, 511, 512, 513, 517, 518, 523, 528, 530, 532, 539, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 588, 589, 592, 605, 606, 608, 609, 625, 626, 628, 629, 630, 631, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 693, 694, 702, 708, 714, 715, 723, 733, 734, 752, 753, 754, 764, 785, 786, 791, 792, 796, 799, 800, 810, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 845, 846, 849, 850, 855, 856, 857, 865, 868, 869, 870, 872, 873, 879, 880, 892, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 936, 937, 951, 976, 979, 981, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 1001, 1002, 1003, 1009, 1014, 1021, 1022, 1023, 1024, 1025, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "t0": [6, 8, 11, 15, 17, 39, 42, 44, 46, 48, 50, 52, 58, 62, 64, 98, 183, 185, 214, 215, 216, 222, 225, 228, 232, 234, 261, 322, 351, 352, 353, 674, 675, 676, 1019], "t1": [44, 46, 62, 214, 222, 225, 228], "t15h": 1037, "t_": [664, 665, 666, 674, 675, 676, 856, 857, 1001], "t_0": 1001, "t_batch": 64, "t_i": 989, "t_k": [414, 987, 1003], "t_m": 1003, "t_mini_batch": [42, 64], "t_p": 267, "t_post": 260, "t_sne": [220, 1038], "t_stat": 260, "t_stat_uncorrect": 260, "t_t": 1003, "taa": 159, "taac": 159, "tab": [7, 9, 34, 53, 80, 111, 127, 129, 132, 151, 156, 158, 187, 188, 316, 322, 408, 1037], "tab10": [233, 250], "tab20b": 4, "tabea": [1045, 1046], "tabibian": 1036, "tabl": [58, 217, 260, 380, 381, 384, 389, 407, 415, 580, 656, 678, 796, 810, 836, 952, 983, 987, 988, 993, 1007, 1031], "tabular": [4, 13, 170, 382, 414, 995], "tacit": 394, "tacitli": 1032, "tackl": [125, 260, 367, 380, 407, 836, 989, 1012, 1017], "tadej": [1031, 1032], "tae": 1042, "taehoon": [1037, 1038], "taemin": 983, "tag": [8, 49, 71, 228, 327, 374, 379, 383, 384, 388, 392, 394, 403, 415, 424, 430, 494, 827, 1008, 1011, 1035, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "tahar": 1037, "tahiri": 1042, "taifi": 1036, "tail": [13, 124, 164, 169, 199, 201, 260, 305, 519, 522, 983], "tail_strength": [519, 522], "takanori": 1038, "take": [5, 8, 13, 20, 30, 46, 53, 55, 57, 66, 75, 80, 92, 95, 111, 120, 151, 153, 156, 160, 169, 175, 182, 203, 207, 208, 224, 235, 247, 248, 255, 261, 265, 269, 270, 281, 283, 286, 289, 290, 291, 293, 294, 305, 319, 328, 334, 335, 338, 348, 352, 353, 357, 366, 367, 368, 374, 375, 378, 380, 382, 385, 386, 387, 388, 392, 394, 395, 398, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 435, 441, 444, 445, 447, 448, 450, 455, 456, 457, 459, 461, 467, 517, 531, 536, 537, 538, 544, 545, 579, 590, 593, 594, 596, 597, 598, 608, 609, 614, 618, 619, 622, 630, 641, 647, 669, 671, 672, 673, 674, 677, 689, 690, 697, 703, 705, 707, 717, 726, 727, 735, 739, 740, 753, 768, 771, 775, 776, 777, 778, 780, 781, 784, 785, 796, 797, 801, 802, 810, 814, 823, 841, 842, 843, 845, 847, 848, 849, 850, 851, 863, 873, 894, 895, 899, 900, 901, 902, 903, 904, 905, 923, 957, 976, 979, 983, 984, 986, 987, 988, 990, 992, 993, 994, 997, 1002, 1003, 1012, 1014, 1018, 1020, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "takeawai": 281, "taken": [4, 7, 31, 42, 53, 55, 126, 148, 156, 169, 232, 233, 248, 266, 278, 307, 375, 377, 379, 380, 384, 394, 401, 406, 407, 411, 415, 419, 438, 531, 559, 560, 581, 582, 644, 645, 648, 650, 651, 652, 656, 657, 658, 659, 660, 661, 675, 677, 679, 682, 693, 872, 873, 893, 896, 902, 903, 946, 987, 989, 997, 999, 1036, 1039, 1042, 1043], "takeshi": [1038, 1043, 1044, 1045], "takeuchi": 375, "takingitcasu": [1038, 1039], "talbot": 265, "talgatomarov": 1041, "talk": [19, 70, 261, 351, 352, 353, 369, 375, 394, 401, 1012, 1015, 1023], "talli": 413, "tallott": 1038, "talwalkar": 976, "tamara": [375, 1047], "tamer": 1045, "tami": 58, "tamir": [1041, 1044], "tamirlan1": 1041, "tamper": 8, "tampermonkei": 388, "tan": [856, 857, 991, 1037], "tandfonlin": 407, "tang": [377, 1040, 1041, 1042], "tangent": [220, 342, 687, 691, 985, 1024, 1025], "tanh": [342, 774, 856, 857, 985, 1002], "tanjina": 1047, "tann": [1038, 1043], "tao": [1046, 1047], "tar": [8, 384], "taranjeet": 1036, "tarashanski": 1047, "tarbal": [384, 1045], "tarcusx": 1038, "tarfil": 8, "target": [4, 6, 13, 17, 19, 26, 30, 32, 33, 45, 52, 69, 71, 73, 74, 76, 86, 90, 99, 101, 103, 112, 119, 120, 121, 122, 124, 125, 127, 129, 131, 132, 133, 135, 140, 143, 146, 148, 151, 153, 156, 157, 164, 166, 168, 169, 170, 171, 178, 181, 182, 183, 192, 195, 199, 201, 203, 204, 207, 208, 221, 229, 231, 232, 233, 234, 237, 238, 239, 240, 247, 254, 256, 258, 261, 263, 265, 266, 269, 270, 278, 281, 283, 286, 291, 294, 295, 300, 304, 305, 313, 316, 317, 319, 321, 325, 326, 329, 330, 334, 335, 338, 342, 344, 345, 351, 352, 357, 358, 359, 360, 362, 366, 368, 369, 372, 373, 374, 375, 376, 377, 382, 384, 385, 388, 389, 393, 396, 407, 410, 411, 414, 417, 431, 435, 436, 437, 440, 443, 462, 463, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 506, 508, 518, 522, 529, 530, 532, 534, 535, 537, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 571, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 685, 695, 696, 698, 699, 700, 705, 706, 707, 710, 711, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 732, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 848, 849, 850, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 883, 888, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 949, 950, 951, 978, 979, 980, 983, 984, 987, 991, 994, 995, 1001, 1002, 1003, 1008, 1009, 1011, 1012, 1014, 1019, 1021, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "target_class": 310, "target_column": [487, 488, 494], "target_encod": 312, "target_filenam": [499, 503], "target_gener": 157, "target_idx": 630, "target_mean_": [880, 997], "target_nam": [6, 19, 30, 52, 90, 99, 103, 168, 208, 221, 247, 254, 261, 269, 270, 286, 311, 329, 351, 357, 373, 375, 486, 487, 489, 490, 491, 492, 494, 495, 498, 500, 501, 502, 503, 508, 711, 987, 1003, 1014, 1019, 1023, 1040], "target_test": 507, "target_train": 507, "target_typ": [311, 880, 923, 950, 1047], "target_type_": 880, "targetencod": [311, 312, 394, 872, 873, 977, 997, 1007, 1046, 1047], "targetencodertargetencod": 311, "targets_test": 233, "targets_train": 233, "tari": 58, "tashai": [1038, 1039], "task": [4, 7, 98, 118, 119, 125, 127, 146, 147, 159, 166, 177, 183, 185, 186, 187, 188, 198, 199, 215, 218, 220, 238, 257, 281, 342, 353, 366, 368, 375, 377, 379, 380, 384, 385, 386, 389, 392, 393, 394, 412, 414, 415, 416, 417, 446, 459, 491, 503, 513, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 630, 631, 644, 645, 650, 651, 658, 659, 660, 661, 672, 679, 682, 724, 726, 727, 751, 779, 781, 784, 786, 797, 801, 814, 819, 953, 954, 984, 987, 988, 989, 990, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1021, 1022, 1023, 1025, 1030, 1035, 1039, 1045], "tast": 1030, "tata": 1047, "tau": 997, "tau_0": 534, "tavenard": 1042, "tax": 0, "taxonom": 377, "taxonomist": 1022, "taylor": [414, 1038, 1040, 1041, 1044], "tb": [388, 569, 570, 571, 572, 573, 574, 575, 576], "tc": [148, 377, 395], "tcg": 159, "tch": [148, 377], "tcompl": 58, "tcpdump": 375, "tda": 1007, "teach": 380, "teacher": 70, "teal": [200, 209, 267], "team": [375, 383, 392, 394, 1005, 1007, 1012, 1030], "teas": 169, "tech": [12, 377, 837], "technic": [159, 169, 200, 221, 319, 375, 377, 380, 394, 414, 650, 662, 683, 684, 894, 983, 984, 990], "technion": [662, 683, 684, 983], "techniqu": [12, 18, 70, 72, 97, 105, 112, 122, 139, 147, 148, 164, 166, 168, 207, 222, 224, 265, 278, 287, 318, 326, 342, 356, 368, 377, 392, 394, 405, 406, 407, 411, 412, 413, 414, 415, 416, 445, 446, 447, 448, 532, 552, 675, 687, 691, 692, 723, 753, 979, 983, 984, 986, 987, 990, 993, 995, 999, 1001, 1003, 1008, 1012, 1017, 1022, 1023, 1043], "technolog": 377, "technologi": [148, 377, 407, 1007, 1012], "technometr": [377, 409, 467, 472, 993], "tediou": 132, "teen": 997, "teevan": [836, 989], "teh": [855, 992], "tejesh95": 1034, "telecom": [24, 25, 42, 228, 1012], "telenczuk": [7, 125, 132, 148, 164, 1039, 1042, 1043, 1045], "tell": [151, 169, 170, 235, 260, 338, 343, 367, 375, 407, 415, 561, 577, 976, 981, 994, 1023], "temp": [4, 170], "temp_fold": 953, "temperatur": [170, 415, 994], "tempfil": [54, 285, 315, 408, 990], "templat": [380, 384, 385, 394, 395, 555, 556, 561, 562, 563, 564, 1007], "templateclassifi": 382, "tempor": [13, 127, 183, 1007, 1008], "temporari": [54, 70, 72, 366, 466, 685, 778, 897, 990, 1033, 1034, 1037, 1043, 1044], "temporarili": [407, 1035], "temporarydirectori": [285, 315], "tempt": 169, "temptat": [362, 380], "ten": [15, 19, 111, 117, 127, 148, 221, 251, 375, 377, 414, 518, 904, 1039], "tenavi": 1044, "tend": [4, 12, 27, 37, 39, 43, 52, 55, 57, 148, 169, 170, 188, 199, 204, 217, 238, 245, 248, 257, 261, 281, 302, 342, 353, 366, 368, 380, 382, 394, 405, 407, 409, 412, 414, 416, 435, 446, 651, 845, 876, 888, 936, 983, 984, 990, 1003, 1023], "tendenc": [127, 225, 983, 984, 986, 989, 992], "tenenbaum": [686, 984], "tenenhau": 377, "tensor": [175, 372, 403, 412, 536, 538, 545, 637, 638, 639, 1025, 1042], "tensorflow": [6, 392, 1007, 1019], "tensorsketch": 979, "tent": 386, "tenur": 1012, "teon": 1042, "terenc": [1042, 1043], "term": [4, 14, 15, 25, 32, 58, 100, 114, 117, 121, 124, 156, 168, 183, 187, 188, 199, 201, 203, 213, 216, 217, 238, 258, 262, 283, 299, 318, 342, 346, 351, 353, 368, 369, 380, 382, 384, 392, 401, 405, 406, 407, 409, 411, 412, 414, 441, 445, 447, 450, 457, 460, 522, 533, 536, 538, 542, 545, 547, 586, 587, 588, 589, 602, 605, 606, 630, 631, 638, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 673, 674, 676, 678, 685, 693, 727, 735, 780, 781, 784, 856, 857, 874, 878, 881, 899, 900, 901, 902, 903, 904, 905, 976, 978, 979, 981, 982, 983, 984, 987, 988, 989, 991, 992, 997, 1001, 1002, 1014, 1023, 1038, 1044, 1045, 1046], "term1": 415, "term2": 415, "term3": 415, "termin": [367, 385, 386, 388, 397, 407, 421, 446, 459, 551, 552, 556, 557, 558, 561, 563, 664, 665, 666, 674, 676, 856, 857, 908, 910, 993, 1003], "terminalipythonapp": 386, "terminalpdb": 388, "termination_condition_": 896, "terminologi": [394, 1038], "terraza": 1042, "terri": [70, 1034], "terrycojon": 1034, "tesson": 407, "test": [4, 6, 8, 10, 11, 13, 24, 25, 26, 27, 31, 32, 33, 54, 70, 71, 85, 100, 111, 114, 116, 117, 118, 119, 123, 124, 125, 126, 127, 138, 140, 142, 144, 147, 149, 151, 152, 166, 168, 169, 170, 171, 172, 175, 183, 188, 194, 195, 198, 199, 200, 201, 202, 203, 206, 207, 214, 215, 217, 224, 229, 234, 235, 237, 247, 253, 254, 255, 258, 259, 260, 261, 262, 264, 265, 267, 268, 270, 271, 272, 276, 281, 286, 291, 292, 299, 301, 307, 309, 310, 311, 312, 322, 329, 338, 346, 353, 362, 366, 367, 374, 375, 377, 383, 384, 385, 386, 392, 393, 394, 396, 397, 400, 402, 403, 405, 408, 409, 412, 414, 415, 416, 417, 424, 426, 430, 433, 434, 435, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 487, 491, 495, 496, 500, 502, 522, 529, 535, 537, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 590, 592, 593, 594, 596, 597, 598, 600, 602, 603, 604, 606, 607, 608, 609, 625, 626, 628, 633, 634, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 710, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 849, 850, 856, 857, 859, 884, 885, 887, 888, 889, 890, 894, 895, 897, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 918, 928, 930, 931, 982, 983, 986, 987, 990, 991, 995, 997, 1001, 1002, 1003, 1007, 1008, 1009, 1011, 1012, 1015, 1018, 1019, 1025, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046], "test_": [13, 132, 411], "test_0": 4, "test_4": 4, "test_accuraci": [247, 261], "test_auc": 822, "test_ax": 100, "test_best_it": 123, "test_check_estim": 931, "test_color": 123, "test_common": [380, 388], "test_dataset": 374, "test_devi": 126, "test_enable_hist_gradient_boost": 384, "test_error": 273, "test_fn": 987, "test_fold": [411, 809], "test_fract": 1030, "test_idx": [13, 394], "test_import": 171, "test_index": [247, 328, 411, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817], "test_indic": 1018, "test_indx": 411, "test_lin": 123, "test_logist": [380, 388], "test_ms": 322, "test_neg_mean_absolute_error": [4, 201], "test_neg_mean_squared_error": [201, 822], "test_neg_root_mean_squared_error": 4, "test_negative_likelihood_ratio": 263, "test_positive_likelihood_ratio": 263, "test_prec_macro": 411, "test_precision_macro": 411, "test_r2": 822, "test_rec_macro": 411, "test_recall_macro": 411, "test_requiring_mpl_fixtur": 380, "test_result": 171, "test_scor": [121, 123, 125, 127, 207, 259, 262, 278, 311, 346, 356, 393, 411, 802, 818, 822, 823, 826], "test_scores_nb": 262, "test_scores_svm": 262, "test_set": 405, "test_siz": [4, 5, 6, 10, 13, 24, 25, 27, 31, 32, 71, 116, 122, 123, 125, 126, 127, 131, 168, 175, 183, 194, 199, 206, 207, 214, 215, 257, 258, 262, 267, 269, 273, 281, 291, 292, 299, 301, 302, 307, 309, 310, 317, 338, 346, 362, 385, 411, 696, 798, 813, 816, 817, 825, 827, 848, 977, 989, 990, 1018, 1019, 1030, 1031, 1036, 1037, 1042], "test_sklearn_compatible_estim": [315, 931], "test_sparsifi": 388, "test_stat": 8, "test_tim": [234, 351], "test_tp": 987, "test_val": 381, "test_your_test_nam": 367, "testpypi": 384, "tests_for_packag": 380, "teunp": 1044, "texa": [12, 70], "text": [3, 6, 7, 10, 11, 12, 15, 16, 17, 19, 31, 32, 37, 40, 44, 53, 56, 57, 58, 60, 61, 62, 64, 70, 80, 81, 109, 117, 122, 159, 172, 179, 193, 194, 228, 232, 235, 239, 240, 245, 247, 253, 254, 259, 260, 264, 266, 267, 271, 276, 288, 291, 293, 299, 307, 318, 324, 326, 331, 345, 354, 356, 366, 368, 369, 372, 373, 374, 380, 385, 392, 394, 405, 407, 408, 410, 411, 412, 414, 417, 445, 447, 462, 466, 485, 486, 487, 497, 501, 506, 519, 534, 542, 562, 613, 623, 650, 656, 664, 666, 672, 674, 695, 701, 703, 705, 711, 715, 726, 727, 734, 790, 792, 796, 810, 825, 834, 836, 838, 841, 846, 859, 860, 862, 863, 871, 895, 896, 897, 899, 911, 912, 913, 933, 976, 979, 983, 985, 987, 988, 989, 991, 994, 997, 999, 1001, 1002, 1006, 1008, 1009, 1012, 1015, 1025, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "text1": 415, "text2": 415, "text2d": 224, "text3": 415, "text3d": [45, 101], "text_": 695, "text_analyt": 1023, "text_clf": 1023, "text_kw": [695, 1045], "text_preprocess": 462, "text_stat": 70, "text_stats_transform": 70, "textbook": [415, 588], "textcoord": [9, 175], "textrm": [1002, 1021], "texttt": 987, "textual": [412, 421, 1003, 1039], "textur": [148, 377, 755, 756, 985], "tf": [15, 19, 232, 351, 352, 353, 375, 412, 519, 542, 586, 587, 588, 589, 838, 846, 871, 976, 985, 989, 997, 1007, 1023], "tf_feature_nam": 15, "tf_transform": 1023, "tf_vector": 15, "tfid": 588, "tfidf": [15, 70, 329, 415, 589, 1023], "tfidf__use_idf": 1023, "tfidf_feature_nam": 15, "tfidf_transform": 1023, "tfidf_vector": 15, "tfidftransform": [329, 352, 353, 415, 487, 589, 1023, 1037, 1038, 1044, 1046, 1047, 1048], "tfidfvector": [15, 19, 70, 261, 351, 375, 412, 415, 487, 586, 587, 588, 1023, 1030, 1032, 1038, 1039, 1040, 1043, 1044], "tfidfvectorizertfidfvector": 261, "tfifi": 1043, "tfrac": 417, "tgct": 159, "tgz": [6, 1019], "th": [111, 238, 318, 360, 393, 407, 411, 414, 422, 439, 443, 449, 451, 457, 461, 470, 555, 556, 557, 558, 559, 560, 562, 563, 564, 591, 592, 630, 646, 647, 667, 669, 678, 694, 716, 777, 817, 880, 924, 977, 983, 987, 991, 994, 1001, 1002, 1045], "th0rwa": [1040, 1041], "thakur": [1033, 1034], "thaler": 1036, "than": [4, 5, 7, 11, 12, 14, 19, 27, 30, 31, 40, 44, 47, 53, 55, 72, 75, 80, 82, 86, 92, 95, 98, 100, 102, 111, 113, 114, 116, 117, 118, 120, 121, 124, 127, 148, 151, 157, 160, 163, 169, 170, 171, 175, 178, 183, 185, 188, 199, 201, 205, 215, 216, 217, 224, 228, 234, 235, 236, 238, 246, 257, 258, 260, 261, 262, 263, 266, 269, 278, 281, 283, 289, 290, 302, 305, 309, 310, 311, 312, 317, 319, 321, 326, 342, 351, 352, 353, 362, 366, 367, 368, 374, 375, 376, 378, 379, 380, 382, 385, 386, 388, 394, 395, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 452, 455, 458, 461, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 491, 492, 494, 507, 512, 513, 521, 529, 532, 533, 534, 535, 536, 538, 539, 540, 542, 545, 546, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 579, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 625, 626, 628, 632, 638, 640, 641, 642, 644, 645, 650, 651, 653, 656, 657, 658, 659, 660, 661, 664, 665, 666, 669, 670, 672, 674, 675, 676, 677, 680, 685, 690, 692, 694, 702, 703, 710, 718, 719, 720, 721, 732, 733, 736, 761, 776, 777, 778, 780, 782, 792, 794, 795, 796, 799, 800, 806, 810, 815, 817, 820, 821, 822, 823, 824, 827, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 862, 872, 873, 874, 876, 877, 879, 882, 888, 889, 893, 896, 899, 900, 901, 904, 905, 907, 908, 909, 910, 911, 925, 936, 938, 939, 944, 950, 956, 958, 961, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 1001, 1002, 1003, 1007, 1008, 1011, 1014, 1018, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "thanh": 1048, "thank": [0, 4, 17, 25, 55, 86, 171, 175, 199, 269, 351, 352, 379, 388, 1007, 1012, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tharak": 1047, "thebabush": 1047, "thedevpanda": 1045, "thei": [0, 4, 13, 26, 37, 50, 57, 82, 97, 109, 112, 118, 119, 121, 123, 125, 127, 128, 144, 147, 148, 151, 152, 156, 169, 170, 183, 185, 188, 194, 199, 200, 217, 221, 224, 228, 234, 235, 238, 254, 257, 260, 261, 263, 269, 278, 283, 285, 300, 305, 310, 317, 319, 342, 351, 352, 358, 359, 362, 366, 367, 368, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 388, 389, 392, 393, 394, 395, 398, 404, 406, 407, 408, 409, 410, 412, 414, 416, 417, 419, 438, 440, 444, 451, 452, 465, 494, 506, 507, 531, 533, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 586, 589, 595, 608, 617, 627, 641, 644, 645, 650, 656, 657, 658, 659, 660, 668, 670, 674, 676, 679, 685, 759, 760, 762, 765, 771, 786, 796, 810, 828, 834, 835, 836, 837, 838, 856, 859, 861, 867, 878, 879, 901, 904, 907, 908, 909, 910, 914, 976, 977, 979, 981, 983, 986, 987, 988, 989, 990, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1012, 1014, 1018, 1020, 1021, 1023, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046], "theil": [166, 177, 202, 205, 218, 305, 647, 655, 669, 676, 677, 1009], "theilsen": 205, "theilsenregressor": [205, 216, 647, 669, 676, 983, 1034, 1042, 1044], "theirs": 351, "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 56, 60, 65, 66, 70, 71, 86, 95, 97, 100, 112, 128, 143, 148, 151, 163, 164, 169, 170, 171, 175, 178, 183, 194, 200, 201, 203, 217, 232, 235, 238, 239, 258, 260, 261, 263, 269, 278, 285, 305, 310, 312, 318, 329, 338, 353, 360, 366, 368, 375, 378, 380, 381, 382, 383, 384, 388, 392, 394, 395, 396, 398, 401, 405, 406, 407, 408, 411, 412, 414, 415, 417, 442, 445, 447, 448, 455, 462, 465, 491, 492, 506, 565, 566, 567, 568, 605, 606, 614, 618, 619, 622, 630, 637, 662, 690, 765, 768, 771, 775, 776, 777, 778, 786, 796, 810, 817, 824, 859, 863, 868, 869, 873, 877, 879, 880, 889, 890, 896, 907, 908, 944, 953, 976, 977, 983, 986, 987, 988, 990, 991, 992, 997, 1002, 1003, 1006, 1007, 1011, 1012, 1014, 1021, 1022, 1023, 1030, 1031, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "themat": 394, "theme": [375, 1030], "themrmax": [1036, 1037], "themselv": [27, 169, 305, 376, 382, 388, 394, 398, 404, 407, 414, 415, 417, 444, 613, 789, 1003, 1023, 1040], "theodor": 1035, "theofilo": 1037, "theoptip": [1040, 1041], "theorem": [151, 346, 406, 989], "theoret": [37, 57, 151, 406, 407, 414, 551, 552, 637, 702, 723, 753, 899, 976, 983, 984, 986, 987, 989, 999, 1001, 1002, 1012], "theori": [121, 234, 250, 346, 377, 406, 407, 411, 414, 688, 692, 723, 753, 891, 892, 936, 976, 983, 984, 986, 987, 988, 1002, 1003], "theotheo": 1040, "thereaft": [169, 178], "therebi": [4, 169, 411, 414, 979, 1040], "therefor": [4, 9, 14, 20, 24, 27, 34, 37, 52, 53, 71, 72, 75, 80, 86, 100, 104, 111, 114, 116, 124, 127, 130, 132, 147, 168, 171, 199, 203, 215, 216, 245, 250, 251, 261, 263, 278, 281, 286, 301, 305, 310, 325, 338, 346, 347, 351, 352, 360, 366, 374, 378, 385, 392, 398, 403, 407, 408, 409, 411, 412, 414, 415, 435, 533, 539, 547, 549, 551, 552, 557, 558, 562, 563, 602, 604, 656, 657, 663, 666, 669, 674, 676, 677, 699, 710, 732, 754, 794, 859, 860, 872, 876, 880, 888, 977, 981, 983, 984, 987, 989, 990, 991, 992, 995, 997, 1002, 1003, 1008, 1014, 1021, 1022, 1023, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "therein": 666, "thereof": 394, "theriley106": 1038, "thesi": [0, 377, 407, 414], "theta": [152, 153, 155, 157, 159, 160, 236, 412, 417, 521, 534, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 690, 989, 1003], "theta0": 152, "theta1": 152, "theta_": [837, 989], "theta_c": [236, 521], "theta_d": 412, "theta_i": 989, "theta_l": 417, "theta_opt": [608, 609], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 480, 481, 482, 483, 485, 487, 488, 491, 494, 495, 496, 497, 499, 500, 501, 503, 506, 507, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 709, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 733, 734, 735, 736, 737, 738, 739, 740, 745, 751, 752, 753, 754, 755, 756, 758, 759, 760, 762, 765, 766, 771, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 915, 919, 920, 925, 926, 928, 930, 931, 936, 938, 943, 944, 945, 946, 947, 948, 950, 953, 954, 955, 957, 958, 961, 962, 971, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "thibault": 1039, "thibaut": 1044, "thibsej": 1039, "thick": [60, 293, 990], "thierno": 1040, "thierri": [0, 245, 247, 1012, 1036, 1037, 1044], "thij": [1042, 1045, 1046], "thin": [222, 618], "thing": [9, 34, 221, 255, 351, 367, 368, 375, 379, 380, 382, 392, 395, 407, 409, 415, 557, 558, 983, 997, 1012, 1036], "think": [5, 37, 169, 170, 351, 352, 380, 413, 986, 1008, 1012, 1014], "thinner": 67, "third": [34, 120, 125, 143, 148, 159, 217, 228, 251, 278, 288, 307, 321, 367, 375, 379, 392, 395, 415, 532, 586, 587, 588, 589, 798, 799, 800, 805, 841, 842, 843, 845, 847, 877, 889, 955, 976, 998, 1005, 1030, 1041, 1046, 1047], "thirion": [0, 1, 1030, 1036, 1037, 1043], "thirteen": 377, "thirti": 1006, "thiruvenkadam": 1044, "this_centroid": 42, "this_cov": 82, "this_cv": 255, "this_di": 12, "this_dx": 12, "this_i": [24, 205], "this_max_it": 214, "this_p": 26, "this_prec": 82, "this_scor": [341, 1018], "this_sw": 24, "this_x": [24, 197, 205, 1021], "thoma": [0, 1, 102, 228, 305, 367, 370, 395, 895, 983, 997, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "thomas9292": 1042, "thomaz": 1041, "thomo": 58, "thompson": [1033, 1045, 1046], "thorben": 1042, "thorough": 1012, "thoroughli": 992, "thorsten": 1012, "those": [4, 7, 12, 17, 19, 55, 60, 71, 112, 124, 127, 148, 160, 168, 169, 170, 171, 172, 199, 201, 203, 217, 225, 232, 235, 237, 238, 251, 254, 260, 263, 266, 278, 300, 305, 310, 335, 338, 351, 352, 353, 366, 367, 374, 380, 382, 384, 385, 386, 387, 392, 394, 395, 397, 404, 405, 407, 411, 412, 414, 415, 417, 446, 448, 459, 462, 466, 492, 493, 494, 501, 555, 556, 562, 563, 567, 568, 579, 690, 695, 710, 716, 733, 796, 799, 800, 808, 810, 817, 841, 842, 843, 845, 847, 848, 849, 850, 851, 899, 900, 901, 904, 907, 908, 909, 910, 947, 976, 979, 983, 986, 987, 989, 990, 991, 994, 997, 1003, 1006, 1007, 1012, 1014, 1023, 1030, 1033, 1036, 1037, 1038, 1043, 1044, 1045, 1046, 1047], "though": [45, 55, 117, 148, 175, 178, 238, 266, 288, 307, 309, 352, 353, 362, 366, 374, 377, 380, 382, 393, 394, 407, 412, 413, 414, 415, 416, 697, 803, 805, 899, 976, 977, 979, 984, 987, 990, 995, 997, 1001, 1023, 1038], "thought": [220, 288, 394, 407, 444, 984, 988], "thoui": [0, 2, 1030], "thousand": [42, 117, 127, 232, 234, 309, 352, 375, 407, 414, 856, 857, 904, 984, 1023, 1039, 1041], "thread": [283, 316, 319, 378, 392, 394, 407, 414, 831, 832, 953, 954, 955, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047], "threadpool": 955, "threadpoolctl": [367, 378, 397, 400], "threadsaf": 1043, "three": [4, 7, 26, 34, 40, 41, 45, 46, 55, 58, 78, 90, 91, 111, 116, 118, 121, 122, 123, 133, 134, 135, 145, 148, 159, 169, 183, 191, 196, 199, 201, 208, 210, 234, 235, 245, 248, 281, 311, 312, 316, 367, 373, 377, 384, 397, 404, 407, 411, 412, 413, 415, 449, 460, 496, 707, 938, 980, 982, 983, 984, 987, 990, 997, 1001, 1002, 1006, 1014, 1022, 1030], "thresh": 1034, "threshold": [11, 25, 42, 65, 92, 98, 104, 148, 166, 170, 172, 194, 229, 231, 257, 258, 259, 267, 270, 272, 281, 321, 322, 324, 331, 357, 360, 394, 407, 412, 414, 416, 439, 440, 443, 444, 467, 498, 506, 507, 529, 535, 540, 546, 547, 548, 561, 586, 589, 591, 595, 600, 601, 642, 665, 669, 674, 676, 690, 696, 698, 700, 701, 704, 705, 718, 723, 724, 736, 737, 753, 779, 785, 786, 791, 794, 795, 815, 834, 845, 846, 862, 864, 866, 882, 894, 895, 896, 904, 911, 913, 961, 983, 987, 990, 991, 993, 997, 1000, 1002, 1003, 1008, 1009, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048], "threshold_": [595, 1037], "threshold_lambda": 642, "threshold_sign": 360, "thriller": [415, 870], "thrive": [0, 380], "throat": [11, 296, 375, 496], "through": [0, 7, 13, 34, 116, 148, 159, 169, 203, 220, 233, 235, 255, 260, 263, 288, 309, 310, 336, 343, 353, 360, 377, 378, 380, 382, 387, 389, 394, 395, 397, 398, 407, 410, 412, 414, 416, 417, 424, 430, 444, 462, 465, 470, 533, 539, 555, 556, 559, 562, 563, 564, 579, 591, 592, 595, 645, 649, 651, 653, 656, 657, 659, 661, 663, 666, 674, 675, 686, 689, 718, 802, 818, 875, 887, 891, 892, 907, 908, 909, 910, 942, 945, 976, 977, 984, 987, 989, 990, 991, 993, 995, 997, 1001, 1002, 1003, 1012, 1014, 1021, 1023, 1030, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "throughout": [321, 362, 394, 625, 797, 856, 857, 1014, 1033, 1038], "throughput": [365, 1007, 1025, 1033], "throw": [301, 389, 918, 1034, 1037, 1038, 1039, 1040, 1044], "thrown": [709, 1039, 1040], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 55, 60, 78, 82, 98, 100, 114, 116, 117, 119, 121, 127, 144, 151, 156, 157, 170, 183, 187, 188, 199, 201, 217, 228, 234, 239, 247, 258, 260, 265, 266, 267, 286, 312, 315, 318, 356, 362, 366, 367, 375, 382, 386, 392, 394, 398, 405, 407, 411, 412, 414, 415, 417, 418, 435, 437, 461, 513, 525, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 601, 604, 608, 620, 625, 630, 631, 641, 643, 656, 675, 703, 716, 722, 785, 792, 798, 803, 805, 817, 830, 833, 868, 899, 978, 979, 980, 981, 982, 983, 984, 987, 988, 993, 994, 997, 999, 1000, 1001, 1002, 1008, 1012, 1030, 1032, 1036, 1038, 1039, 1040, 1042, 1046], "thuan": 1041, "thukarama": 1045, "thumb": [117, 175, 366, 380, 381, 392, 407, 656, 657, 664, 665, 666, 674, 675, 676, 899, 987], "thumbnail": 1030, "th\u00e9ophil": 1046, "ti": [70, 199, 247, 250, 258, 347, 366, 405, 407, 597, 598, 633, 718, 723, 753, 794, 795, 901, 904, 907, 986, 987, 1002, 1031, 1033, 1034, 1038, 1040, 1044, 1045, 1046], "tiago": [1031, 1035], "tialo": 1047, "tian": [407, 440, 1035, 1036, 1037], "tianqi": 414, "tiao": [1035, 1036], "tib": [680, 681], "tibshirani": [114, 115, 126, 148, 187, 259, 377, 411, 414, 518, 557, 558, 626, 654, 719, 720, 721, 829, 846, 907, 908, 977, 981, 983, 988, 994, 1003], "tic": [148, 170, 238, 271, 989], "tic_bwd": 148, "tic_fwd": 148, "ticconi": 1036, "tick": [8, 43, 60, 154, 239, 271, 630, 823], "tick_bottom": 305, "tick_left": 305, "tick_param": [7, 15, 135, 245, 260, 309, 328], "tick_right": 7, "ticker": [220, 222, 225, 283], "ticket": [320, 380], "tie": [166, 191, 333, 349, 392, 414, 510, 827, 904, 988, 1002, 1003, 1009, 1031, 1046], "tieleman": [855, 992], "tien": 1035, "tiernei": [1038, 1039, 1040], "tight": [40, 104, 113, 120, 140, 144, 184, 186, 191, 192, 193, 204, 208, 211, 216, 222, 225, 249, 283, 289, 290, 294, 295, 334, 338, 341, 343, 357, 580, 690, 1042], "tight_layout": [6, 8, 25, 27, 31, 40, 52, 55, 65, 73, 75, 86, 95, 96, 97, 105, 111, 113, 118, 120, 122, 125, 130, 132, 134, 153, 155, 160, 163, 168, 169, 171, 172, 178, 179, 183, 189, 197, 199, 207, 210, 214, 217, 220, 233, 238, 255, 256, 272, 281, 283, 285, 295, 306, 307, 308, 309, 310, 315, 319, 336, 352, 356, 357, 1019], "tightli": 1017, "tijanajovanov": 1042, "tikhonov": [158, 417, 670], "tild": [865, 995, 997], "tilen": 1040, "till": [407, 440, 785, 987], "tim": [0, 1, 116, 131, 1030, 1035, 1036, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 398, 403, 404, 405, 406, 407, 409, 410, 412, 414, 415, 418, 435, 439, 441, 442, 443, 444, 445, 448, 450, 453, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 470, 494, 497, 499, 517, 521, 532, 534, 536, 538, 539, 545, 560, 565, 566, 567, 568, 588, 608, 617, 625, 626, 627, 628, 632, 637, 638, 641, 644, 648, 650, 652, 658, 660, 662, 664, 665, 671, 674, 675, 676, 683, 684, 688, 690, 692, 699, 739, 742, 743, 745, 787, 791, 794, 795, 796, 798, 799, 800, 801, 803, 805, 810, 811, 812, 815, 817, 820, 821, 822, 823, 824, 825, 827, 829, 834, 835, 836, 837, 838, 839, 840, 847, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 869, 872, 874, 878, 883, 891, 892, 896, 897, 901, 904, 905, 913, 938, 953, 976, 977, 979, 980, 983, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1007, 1012, 1014, 1019, 1021, 1022, 1023, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "time_dens": 322, "time_spars": 322, "time_step": [183, 857], "timeit": [214, 248, 386], "timeout": [494, 953, 1044], "timer": [248, 386], "times_init": 248, "timescal": 233, "timeseri": 4, "timeseriessplit": [4, 13, 127, 183, 255, 411, 1036, 1037, 1042], "timestamp": 156, "timo": 1042, "timofei": 1045, "timotheemathieu": 1043, "timothi": [1035, 1043], "timsaur": 1040, "tinertia": 58, "ting": [561, 993, 1038, 1039], "tingshan": 1043, "tini": [1032, 1045, 1048], "tinoco": 1047, "tinta": 311, "tinyclu": 0, "tip": [362, 365, 369, 380, 383, 386, 402, 415, 532, 539, 643, 690, 983, 1010, 1011, 1024, 1025, 1033], "tiphain": 1041, "tirth": [1040, 1041], "titan": [71, 171, 242, 315, 319, 320, 995], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 20, 21, 24, 25, 26, 27, 30, 32, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 78, 79, 81, 82, 85, 86, 90, 91, 95, 96, 97, 98, 99, 102, 103, 104, 112, 113, 114, 117, 119, 120, 121, 124, 125, 127, 128, 131, 134, 135, 140, 143, 144, 146, 147, 148, 151, 152, 153, 155, 156, 157, 158, 159, 169, 178, 179, 181, 183, 184, 186, 187, 188, 191, 192, 198, 199, 201, 203, 204, 205, 207, 208, 213, 216, 217, 220, 221, 222, 228, 232, 233, 234, 236, 237, 238, 245, 246, 247, 248, 249, 250, 251, 254, 255, 259, 260, 261, 263, 264, 265, 269, 270, 274, 285, 286, 289, 290, 291, 292, 294, 295, 296, 305, 309, 310, 311, 312, 327, 330, 334, 335, 336, 337, 338, 341, 342, 347, 348, 351, 357, 358, 359, 379, 380, 384, 388, 408, 987, 1011, 1019], "title_bow": 408, "titles_opt": 254, "titov": [1038, 1040, 1043, 1044], "titu": 1041, "tiwari": 1042, "tiziano": 1030, "tjoa": 1034, "tkammi": 1036, "tkdd": 561, "tliu68": 1043, "tm": [12, 990], "tmp": 384, "tmpdir": [285, 315], "tn": [710, 716, 987], "tn_c": 269, "tnwei": 1042, "to_british": 415, "to_datetim": 156, "to_fram": 75, "to_list": 172, "to_numpi": [13, 156], "to_replac": [4, 170], "toarrai": [7, 322, 329, 360, 408, 415, 564, 580, 586, 588, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 872, 889, 890, 937, 958, 959, 961, 969, 970, 977, 990, 997, 1047], "toastedcornflak": [1036, 1037], "toastedyeast": [1044, 1045], "tobia": [1038, 1043, 1045], "tobychees": [1037, 1038], "toc": [148, 238], "toc_bwd": 148, "toc_fwd": 148, "toccac": 1040, "tocsc": 185, "tocsr": 17, "tod": [407, 418, 442], "todai": [156, 1023], "todens": [962, 963, 964, 965, 966, 967, 968], "todo": [46, 232, 384, 388, 407, 1048], "toeplitz": 79, "togeth": [4, 12, 51, 60, 71, 120, 132, 151, 157, 169, 180, 221, 224, 238, 256, 311, 319, 341, 357, 362, 382, 384, 392, 393, 394, 401, 407, 414, 415, 416, 422, 449, 451, 565, 566, 592, 687, 713, 796, 810, 859, 860, 873, 983, 984, 987, 988, 994, 997, 1003, 1004, 1012, 1015, 1017, 1036, 1047], "toi": [9, 20, 36, 39, 40, 41, 42, 47, 49, 52, 53, 55, 57, 67, 68, 80, 86, 99, 114, 128, 133, 134, 166, 181, 189, 203, 213, 216, 227, 238, 243, 245, 289, 290, 300, 335, 345, 373, 386, 392, 414, 415, 438, 439, 440, 442, 444, 446, 447, 448, 450, 456, 467, 510, 512, 520, 561, 637, 675, 723, 753, 795, 845, 852, 860, 879, 903, 984, 986, 987, 993, 997, 1009, 1025], "tok": [353, 415], "token": [19, 353, 366, 375, 384, 415, 534, 586, 587, 588, 589, 1030, 1038, 1042], "token_featur": 415, "token_freq": 353, "token_pattern": [353, 415, 586, 587, 589], "tokoroten": 1035, "tokyo": [867, 998], "tol": [7, 10, 17, 73, 95, 122, 127, 148, 163, 179, 190, 192, 206, 207, 213, 215, 228, 239, 246, 248, 302, 318, 346, 351, 382, 386, 414, 419, 441, 445, 447, 450, 457, 460, 469, 470, 476, 480, 481, 482, 529, 530, 531, 533, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 557, 558, 559, 560, 600, 625, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 670, 672, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 689, 691, 693, 794, 795, 810, 848, 856, 857, 894, 895, 899, 900, 901, 902, 903, 904, 905, 973, 983, 1001, 1002, 1019, 1023, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "tola": 1040, "told": 415, "toledano": 1038, "toler": [46, 73, 127, 163, 190, 192, 215, 216, 342, 353, 375, 382, 389, 407, 419, 441, 445, 450, 457, 460, 469, 470, 476, 480, 481, 482, 529, 530, 531, 533, 534, 538, 539, 540, 541, 542, 543, 545, 546, 557, 558, 559, 560, 625, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 674, 676, 677, 679, 680, 681, 682, 686, 687, 688, 689, 691, 692, 693, 839, 840, 844, 848, 856, 857, 894, 895, 899, 900, 901, 902, 903, 904, 905, 973, 983, 987, 1001, 1002, 1019, 1042, 1043, 1044, 1045], "toleranbc": 1039, "tolist": [4, 123, 163, 259, 317, 375], "tom": [0, 1, 191, 207, 283, 285, 307, 308, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "tom1092": 1043, "toma": 1034, "tomasz": 1043, "tomato": 200, "tomatti": 1045, "tomdlt": 1036, "tomiock": [1045, 1046], "toml": 384, "tommaso": 1043, "tommi": [1037, 1038, 1039], "tomographi": [3, 16, 17, 66, 166, 650, 670, 983, 1009], "tomohiro": 1043, "tom\u00e1": [1043, 1044], "tongyu": 1047, "toni": [6, 375, 561, 879, 993, 1043, 1044], "tonk": 1037, "tony_blair": 1019, "too": [4, 7, 12, 13, 17, 27, 44, 50, 55, 57, 62, 70, 74, 82, 99, 124, 127, 163, 169, 171, 183, 200, 203, 221, 232, 238, 246, 254, 258, 267, 275, 301, 311, 338, 351, 358, 359, 366, 377, 380, 386, 388, 392, 394, 405, 407, 409, 411, 414, 415, 416, 419, 435, 447, 536, 586, 589, 677, 690, 705, 834, 835, 836, 837, 838, 864, 877, 879, 982, 984, 986, 987, 989, 990, 994, 1021, 1031, 1034, 1037, 1038, 1039, 1040, 1042], "took": [0, 4, 42, 268], "tool": [9, 11, 122, 169, 235, 258, 263, 362, 369, 373, 374, 375, 378, 380, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 401, 407, 408, 409, 485, 690, 699, 976, 982, 983, 987, 993, 997, 1002, 1004, 1007, 1008, 1012, 1014, 1023, 1037, 1040, 1043, 1044, 1045], "toolbox": [392, 1007, 1012], "toolchain": 378, "toolkit": [366, 1007, 1012], "toolset": 1012, "tooth": [96, 1022], "tootoonian": 1043, "top": [6, 12, 14, 15, 17, 34, 37, 39, 41, 42, 43, 44, 45, 51, 62, 64, 71, 91, 97, 109, 116, 117, 120, 127, 132, 135, 169, 199, 201, 210, 214, 228, 238, 239, 245, 247, 248, 251, 257, 261, 269, 270, 288, 305, 307, 311, 316, 322, 325, 326, 338, 342, 351, 362, 380, 382, 386, 392, 404, 405, 407, 412, 413, 414, 485, 585, 586, 589, 597, 723, 753, 791, 911, 913, 976, 979, 983, 985, 995, 1007, 1012, 1019, 1022, 1023, 1044], "top10": 375, "top5": 351, "top_featur": 15, "top_features_ind": 15, "top_indic": 351, "top_k_accuraci": 987, "top_k_accuracy_scor": [987, 1042, 1044], "tophat": [288, 413, 839, 840, 844], "topic": [3, 6, 7, 8, 16, 70, 166, 225, 319, 351, 352, 353, 375, 376, 411, 412, 415, 486, 495, 534, 536, 538, 545, 586, 589, 983, 988, 1007, 1008, 1009, 1023, 1035, 1037], "topic_d": 8, "topic_idx": 15, "topic_word_prior": [412, 534], "topic_word_prior_": 534, "topisan": 1040, "toplak": 1046, "topolog": [461, 1007], "topologi": [224, 225], "torch": 403, "torgo": 374, "toro": 311, "toronto": [532, 642, 855], "torr": 1039, "torrella": [1039, 1040, 1046], "tortois": 983, "tosequ": 1048, "toshihiro": [1036, 1037, 1043], "toshniw": 1042, "tot": 12, "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 357, 358, 359, 360, 361, 367, 374, 375, 377, 386, 394, 404, 407, 413, 415, 418, 430, 442, 463, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 510, 512, 513, 517, 520, 521, 534, 542, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 581, 582, 588, 592, 594, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 674, 675, 676, 677, 695, 702, 703, 711, 726, 727, 728, 731, 735, 736, 754, 766, 780, 781, 784, 791, 792, 793, 796, 810, 820, 821, 822, 832, 833, 834, 835, 842, 844, 850, 857, 874, 878, 900, 902, 905, 907, 908, 909, 910, 936, 976, 983, 984, 987, 988, 989, 990, 997, 1001, 1002, 1003, 1009, 1019, 1023, 1031, 1036, 1038, 1046], "total_cel": 127, "total_fit_tim": 8, "total_sampl": [328, 534], "total_sz_mb": 8, "total_vect_tim": 8, "totalbsmtsf": 132, "totrmsabvgrd": 121, "tottim": 386, "tour": [0, 1, 191, 207, 283, 285, 307, 308, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "tournament": 976, "toward": [0, 26, 27, 63, 82, 118, 124, 131, 151, 171, 178, 203, 204, 225, 238, 346, 380, 394, 407, 446, 450, 460, 674, 676, 693, 873, 986, 1001, 1003, 1006, 1008], "toyota": 12, "tp": [407, 710, 716, 726, 727, 728, 779, 780, 781, 784, 911, 987], "tp_c": 269, "tpng": 911, "tpot": 1007, "tpr": [11, 229, 238, 257, 269, 270, 387, 700, 704, 786, 987, 1027, 1030, 1046], "tpr_a": 269, "tpr_b": 269, "tprs_lower": 270, "tprs_upper": 270, "tr": [255, 377, 384, 407, 409, 467, 468, 469, 470, 471, 472, 473, 474, 837], "trace": [388, 407, 420, 471, 473, 474, 477, 478, 479, 687, 691, 984, 1041], "traceback": [380, 385, 388, 392, 466, 1011, 1047], "traceord": 117, "tracer0tong": 1036, "trach": 1030, "track": [109, 115, 123, 326, 380, 383, 384, 403, 532, 956, 988, 1007, 1008, 1037, 1040], "tracker": [379, 383, 388, 392, 395, 397, 401, 1005, 1008], "tracking_select": 956, "tractabl": [4, 411, 539, 632, 1007, 1043], "trade": [61, 78, 117, 127, 171, 203, 259, 261, 262, 338, 351, 394, 406, 407, 409, 551, 552, 557, 558, 632, 654, 690, 796, 799, 800, 810, 822, 984, 991, 999, 1001, 1002, 1008], "tradeoff": [55, 114, 166, 233, 239, 241, 253, 267, 268, 269, 270, 276, 351, 366, 380, 388, 413, 513, 562, 696, 700, 724, 786, 825, 860, 879, 899, 984, 1009, 1021, 1039, 1042], "tradit": [17, 55, 199, 214, 352, 368, 405, 414, 415, 630, 692, 983, 986, 997, 1007, 1012], "tradition": 1003, "traffic": 1012, "trail": [382, 971], "train": [4, 5, 6, 7, 8, 10, 11, 13, 24, 26, 27, 30, 31, 32, 33, 54, 56, 58, 64, 65, 70, 71, 75, 85, 86, 90, 92, 95, 98, 99, 100, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 127, 129, 132, 133, 134, 138, 145, 151, 152, 153, 156, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 175, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 198, 199, 200, 201, 202, 206, 207, 208, 211, 213, 214, 217, 228, 231, 233, 237, 247, 249, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 283, 286, 289, 290, 291, 292, 294, 296, 299, 300, 301, 305, 307, 309, 310, 315, 318, 322, 324, 325, 326, 329, 330, 331, 334, 335, 337, 345, 346, 353, 355, 358, 359, 361, 362, 366, 367, 368, 372, 375, 377, 382, 385, 392, 393, 394, 401, 403, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 435, 438, 439, 441, 442, 445, 447, 449, 450, 451, 452, 457, 463, 467, 468, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 491, 494, 495, 496, 498, 502, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 689, 690, 694, 701, 738, 785, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 864, 865, 868, 869, 872, 873, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 961, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 997, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1012, 1015, 1018, 1019, 1025, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "train_0": 4, "train_4": 4, "train_accuraci": 247, "train_auc": 822, "train_ax": 100, "train_cover_std": 11, "train_dataset": [169, 374], "train_error": 273, "train_errors_with": 122, "train_errors_without": 122, "train_fract": 1030, "train_idx": [13, 169, 394], "train_import": 171, "train_index": [247, 328, 411, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817], "train_indic": 1018, "train_indx": 411, "train_pr": 122, "train_prec_macro": 411, "train_r2": 822, "train_rec_macro": 411, "train_result": 171, "train_sampl": [27, 214, 215], "train_scor": [207, 311, 346, 356, 802, 818, 822, 823, 826, 982], "train_score_": [125, 414, 557, 558, 559, 560], "train_set": 405, "train_siz": [5, 7, 10, 111, 131, 152, 175, 215, 234, 238, 262, 273, 317, 320, 346, 798, 802, 813, 816, 823, 825, 982, 1018, 1030, 1031, 1036, 1037], "train_size_ab": 823, "train_size_idx": 346, "train_sizes_ab": 823, "train_test_s": 234, "train_test_scor": 1048, "train_test_split": [5, 6, 7, 10, 13, 24, 25, 27, 31, 32, 71, 75, 86, 100, 111, 116, 118, 122, 123, 124, 125, 126, 127, 128, 131, 144, 145, 168, 169, 171, 172, 175, 183, 194, 199, 206, 207, 214, 215, 217, 229, 238, 241, 242, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 329, 356, 360, 362, 385, 393, 403, 408, 411, 414, 435, 436, 556, 558, 565, 566, 695, 696, 698, 700, 796, 827, 830, 848, 856, 857, 859, 909, 910, 976, 977, 987, 989, 990, 995, 997, 1002, 1019, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1043, 1047], "train_tim": [214, 234, 351, 352], "trainabl": 382, "traine": 1012, "training_data": 151, "training_data_": 1040, "training_idx": 159, "training_indic": 158, "training_noisy_target": 151, "training_sample_indic": 151, "training_tim": [122, 351], "training_time_early_stop": 122, "training_time_ful": 122, "trajectori": 115, "tran": 79, "trans_data": 222, "transact": [63, 377, 407, 409, 418, 420, 442, 446, 473, 532, 536, 538, 545, 561, 642, 662, 683, 684, 722, 723, 753, 766, 983, 987], "transax": [44, 62, 224, 228, 247, 291, 307], "transcript": 380, "transcriptom": 690, "transduc": 326, "transduct": [394, 407, 894, 895, 1008], "transduction_": [325, 326, 327, 894, 895, 896], "transfer": [127, 398, 403, 983, 1008], "transform": [4, 5, 6, 8, 10, 12, 14, 25, 44, 46, 47, 48, 51, 54, 57, 62, 69, 73, 74, 76, 86, 89, 90, 97, 98, 100, 101, 103, 104, 110, 115, 117, 121, 131, 132, 134, 136, 145, 157, 164, 166, 169, 170, 171, 175, 191, 199, 200, 207, 213, 215, 217, 221, 224, 228, 230, 231, 233, 235, 236, 238, 242, 247, 256, 257, 258, 261, 269, 281, 283, 285, 291, 292, 293, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 320, 322, 338, 341, 342, 351, 353, 362, 369, 374, 375, 376, 377, 380, 382, 385, 389, 394, 398, 403, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 423, 428, 431, 435, 439, 440, 441, 443, 445, 447, 450, 462, 463, 464, 465, 466, 480, 481, 482, 483, 486, 487, 494, 501, 506, 507, 512, 513, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 555, 557, 559, 562, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 634, 636, 637, 638, 639, 640, 651, 656, 661, 671, 674, 682, 686, 687, 688, 689, 690, 692, 699, 700, 711, 750, 751, 782, 796, 799, 800, 810, 825, 828, 834, 843, 848, 851, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 899, 901, 904, 905, 928, 930, 945, 976, 977, 979, 981, 983, 984, 987, 988, 991, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1014, 1019, 1020, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "transform_algorithm": [98, 104, 529, 535, 540, 1046], "transform_alpha": [98, 104, 529, 535, 540, 1043], "transform_dur": 283, "transform_func": 261, "transform_list": 858, "transform_max_it": [529, 535, 536, 540, 1040], "transform_method": 412, "transform_n_nonzero_coef": [98, 104, 529, 535, 540], "transform_n_nozero_coef": 104, "transform_output": [242, 312, 466, 897, 1045, 1046], "transformed_grid": 130, "transformedtargetregressor": [75, 169, 199, 392, 398, 408, 591, 592, 595, 988, 1038, 1040, 1043, 1048], "transformedtargetregressortransformedtargetregressor": 169, "transformer_": [235, 463], "transformer_list": [74, 408, 858, 861, 977, 1041, 1042], "transformer_nam": 283, "transformer_weight": [70, 462, 465, 858, 1035, 1042], "transformermixin": [235, 283, 382, 394, 463, 1038, 1045, 1046, 1047], "transformers_": [462, 1047], "transfus": 229, "transit": [17, 346, 384, 1041], "transitive_target": 17, "translat": [75, 382, 417, 525, 612, 868, 869, 885, 984, 987, 1005, 1012], "transluc": 138, "transpar": [31, 307, 972, 1012], "transpil": 1007, "transpos": [25, 260, 419, 536, 538, 545, 658, 659, 660, 661, 785, 936, 973, 979, 987, 999, 1022, 1030, 1044], "transposit": 936, "trapezoid": [267, 704, 705, 987], "travel": 0, "travers": [360, 990, 994, 1048], "travi": [1030, 1038], "treat": [4, 6, 71, 121, 132, 163, 169, 199, 269, 311, 317, 322, 328, 362, 380, 392, 394, 404, 414, 415, 440, 559, 560, 586, 587, 589, 605, 606, 630, 636, 643, 669, 672, 726, 727, 735, 751, 780, 781, 784, 785, 868, 869, 875, 876, 879, 880, 884, 887, 888, 890, 899, 900, 944, 977, 979, 983, 987, 988, 994, 997, 1001, 1003, 1019, 1034, 1042, 1046, 1047], "treatment": [81, 168, 374, 412, 467, 472], "tree": [4, 7, 12, 13, 26, 27, 31, 41, 44, 55, 62, 90, 99, 110, 113, 114, 115, 117, 121, 122, 123, 124, 125, 128, 129, 131, 132, 133, 134, 135, 136, 143, 148, 159, 163, 170, 172, 182, 207, 208, 221, 235, 236, 237, 238, 239, 257, 264, 266, 278, 281, 283, 286, 288, 296, 305, 306, 310, 316, 317, 319, 335, 361, 362, 366, 369, 375, 377, 386, 393, 394, 396, 405, 407, 413, 418, 435, 439, 440, 441, 442, 443, 444, 446, 448, 455, 461, 493, 494, 498, 502, 512, 513, 517, 542, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 629, 630, 631, 632, 656, 686, 690, 700, 701, 709, 739, 745, 785, 787, 802, 817, 822, 823, 825, 834, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 860, 863, 872, 931, 977, 984, 987, 988, 993, 994, 1007, 1008, 1009, 1010, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "tree_": [315, 356, 360, 844, 907, 908, 909, 910], "tree_copi": [839, 840], "tree_disp": 239, "tree_importance_sorted_idx": 172, "tree_indic": 172, "tree_optim": 278, "tree_preprocessor": [132, 199], "tree_stat": [839, 840], "treelit": 1007, "trein": 1033, "tremend": [311, 414], "trend": [129, 156, 170, 231, 300, 1012, 1037], "trent": [1012, 1036], "trevor": [148, 187, 320, 377, 626, 654, 719, 720, 721, 977, 983, 999, 1034, 1035, 1038, 1039, 1040, 1042], "trevorstephen": [1034, 1036], "tri": [66, 103, 220, 292, 342, 367, 382, 385, 392, 395, 405, 447, 449, 451, 629, 630, 631, 668, 690, 696, 698, 700, 810, 955, 992, 1014, 1032, 1038, 1042, 1048], "triag": [0, 369, 380, 383, 395], "trial": [4, 265, 445, 447, 458, 669, 794, 795, 983, 1036], "triangl": [394, 412, 441, 445, 457, 697, 985, 990], "triangular": [407, 461, 609, 984], "tribe": 375, "trick": [151, 234, 293, 342, 353, 365, 368, 369, 383, 392, 408, 580, 587, 641, 670, 979, 980, 991, 1001, 1002, 1021, 1022, 1025, 1031, 1039, 1047], "tricki": [405, 984], "trickiest": 380, "trigg": 564, "trigger": [71, 72, 384, 394, 408, 856, 857, 859, 860, 919, 920, 936, 983, 1023, 1038, 1044, 1045], "triglycerid": [148, 377], "trim": [214, 407, 839, 840], "trimeta": 1041, "trinh": 1045, "tripl": 385, "triplet": 507, "tripramudya": 1046, "trishnendu": 1038, "tristan": 983, "triu": 12, "trivial": [9, 201, 356, 380, 407, 814, 901, 904, 984, 1008, 1030], "troillard": [1046, 1047], "tropp": [533, 539], "troubl": [30, 415], "troubleshoot": [415, 1005], "troyanskaya": [626, 977], "true": [4, 5, 6, 7, 8, 10, 11, 13, 15, 17, 19, 26, 27, 30, 32, 34, 37, 44, 49, 50, 53, 54, 55, 57, 58, 60, 63, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 92, 95, 96, 97, 98, 100, 105, 109, 111, 115, 117, 121, 123, 124, 126, 127, 128, 129, 132, 133, 135, 138, 139, 144, 147, 151, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 183, 184, 186, 187, 188, 190, 192, 194, 195, 196, 199, 201, 202, 203, 206, 207, 213, 214, 215, 217, 220, 223, 224, 228, 229, 232, 234, 235, 236, 237, 238, 241, 242, 245, 248, 250, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 292, 296, 299, 300, 301, 302, 306, 310, 311, 312, 315, 317, 319, 320, 321, 322, 326, 328, 329, 330, 341, 345, 346, 347, 351, 352, 353, 356, 357, 360, 362, 366, 367, 373, 375, 376, 378, 380, 381, 382, 385, 386, 387, 389, 393, 394, 396, 398, 401, 403, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 522, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 709, 710, 711, 712, 713, 716, 717, 718, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 735, 736, 737, 738, 739, 740, 747, 748, 749, 751, 753, 758, 764, 766, 775, 779, 780, 781, 782, 783, 784, 785, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 814, 815, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 917, 918, 919, 920, 930, 936, 937, 948, 949, 952, 953, 957, 958, 959, 960, 968, 973, 975, 976, 977, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1007, 1014, 1018, 1019, 1021, 1022, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "true_coef": [168, 183, 194, 644, 645, 650, 658, 659, 660, 679, 680, 681], "true_cov": [467, 469, 470, 476], "true_den": 288, "true_fac": 237, "true_fun": 274, "true_h": 319, "true_k": 352, "true_label": [321, 325, 326], "true_nam": [6, 1019], "true_relev": [723, 753], "true_w": 319, "true_weight": 178, "trujillo": [1044, 1045], "truli": [263, 267, 368, 710, 987], "truncat": [73, 130, 221, 389, 532, 533, 537, 538, 539, 542, 674, 676, 723, 753, 794, 848, 912, 936, 976, 986, 987, 1001, 1019, 1023, 1024, 1025, 1036, 1038], "truncate_mod": 41, "truncatedsvd": [130, 221, 352, 412, 532, 533, 537, 538, 539, 690, 858, 861, 1032, 1037, 1041, 1042, 1044, 1048], "truong": 1036, "trust": [12, 26, 71, 72, 81, 111, 116, 118, 119, 128, 129, 132, 135, 145, 156, 169, 170, 171, 172, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 384, 395, 401, 405, 1018, 1044], "trustworthi": [319, 1038, 1039, 1044, 1045, 1046, 1047], "truth": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 102, 128, 159, 183, 193, 199, 200, 238, 251, 263, 352, 394, 406, 407, 701, 702, 703, 706, 710, 711, 712, 713, 715, 716, 719, 720, 721, 723, 725, 726, 727, 731, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 780, 781, 782, 783, 784, 787, 788, 792, 793, 987, 1014, 1022, 1038, 1044], "truthi": 948, "try": [4, 6, 11, 12, 13, 15, 25, 26, 39, 53, 71, 72, 98, 111, 116, 117, 118, 119, 120, 127, 128, 129, 132, 135, 145, 151, 156, 164, 168, 169, 170, 171, 175, 178, 180, 188, 229, 230, 231, 235, 239, 240, 241, 242, 246, 247, 250, 258, 260, 261, 267, 272, 278, 283, 296, 302, 311, 316, 317, 319, 320, 322, 327, 340, 346, 351, 352, 360, 375, 378, 379, 380, 382, 385, 386, 388, 392, 394, 398, 401, 407, 410, 411, 414, 415, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 501, 565, 575, 587, 656, 671, 673, 687, 691, 796, 799, 800, 808, 810, 820, 821, 822, 824, 877, 879, 882, 884, 885, 886, 887, 888, 889, 890, 899, 918, 971, 976, 983, 984, 993, 1002, 1003, 1008, 1011, 1012, 1014, 1016, 1019, 1021, 1022, 1023, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "tr\u00e9segni": [0, 1032], "ts_cv": [4, 13, 127], "tscv": [411, 817], "tseng": 407, "tsetogl": 1045, "tsilhouett": 58, "tslearn": 1007, "tsne": [166, 220, 221, 222, 224, 225, 284, 285, 297, 319, 394, 421, 431, 494, 686, 687, 688, 843, 847, 860, 961, 984, 990, 1009, 1033, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tsne_param": 283, "tsoumaka": [718, 731, 737, 987], "tspeng": [1045, 1046], "tsuga": 1043, "tsujii": 1001, "tsukada": 1042, "tsuruoka": 1001, "tsutomu": 1041, "tt": [133, 255, 463], "ttang131": 1040, "ttime": 58, "tttthomasssss": 1034, "tube": [905, 1002], "tue": [4, 127, 170, 1036], "tuft": 447, "tulio": [1038, 1039], "tulken": 1040, "tulloch": [1033, 1034], "tumor": [148, 377], "tune": [4, 27, 44, 55, 71, 100, 111, 117, 127, 147, 151, 163, 170, 188, 203, 204, 216, 224, 238, 254, 265, 285, 306, 338, 342, 346, 351, 362, 366, 367, 368, 393, 394, 402, 405, 406, 407, 411, 414, 416, 417, 450, 460, 557, 558, 592, 611, 612, 613, 615, 617, 618, 620, 621, 623, 641, 657, 688, 692, 855, 904, 981, 982, 983, 984, 986, 987, 990, 991, 993, 1001, 1002, 1015, 1025, 1030, 1044, 1046], "tuned_param": 7, "tuned_paramet": [78, 138, 258], "tupl": [8, 48, 49, 55, 104, 170, 217, 373, 374, 375, 382, 394, 411, 419, 432, 449, 451, 462, 465, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 506, 508, 509, 510, 511, 512, 520, 531, 559, 560, 565, 566, 567, 568, 580, 581, 582, 585, 586, 587, 589, 625, 630, 631, 632, 709, 710, 717, 739, 778, 780, 794, 796, 810, 822, 839, 840, 858, 859, 869, 870, 874, 877, 885, 889, 901, 902, 903, 904, 905, 914, 920, 921, 923, 927, 928, 929, 930, 945, 954, 971, 994, 1036, 1037, 1041, 1042, 1043, 1048], "turn": [4, 32, 78, 163, 164, 169, 183, 214, 215, 233, 260, 287, 353, 366, 367, 368, 375, 392, 394, 395, 406, 407, 408, 410, 412, 415, 416, 417, 579, 580, 587, 605, 606, 828, 832, 901, 904, 922, 977, 981, 989, 992, 997, 1012, 1023, 1035, 1037, 1038, 1043], "turquois": [99, 103, 104, 126, 205, 216, 223, 247, 248, 267], "tutori": [81, 138, 139, 140, 188, 201, 217, 260, 369, 380, 381, 386, 388, 393, 401, 407, 450, 460, 689, 1002, 1021, 1033], "tutorial_hom": 1023, "tuveri": 1045, "tuzova": 1038, "tv": 58, "tw": [175, 374, 485, 506, 507, 656, 1002], "tweak": [82, 235, 411, 953, 986, 1023, 1041], "tweedi": [166, 177, 199, 218, 462, 494, 550, 646, 667, 678, 704, 721, 742, 744, 746, 747, 749, 825, 860, 863, 864, 872, 879, 983, 1009, 1040, 1041, 1043], "tweedie_pow": 217, "tweedieregressor": [4, 316, 319, 646, 667, 983, 1041, 1044, 1045], "tweet": 1012, "twelfth": 694, "twenti": [19, 232, 377, 404, 407, 1023], "twenty_test": 1023, "twenty_train": 1023, "twice": [27, 272, 351, 353, 382, 417, 617, 727, 729, 938, 1039, 1047], "twine": 384, "twinx": 328, "twister": 1041, "twitter": 384, "two": [4, 7, 9, 11, 15, 20, 24, 26, 30, 34, 37, 39, 40, 43, 55, 60, 64, 70, 71, 75, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 103, 110, 111, 112, 119, 120, 121, 122, 124, 127, 128, 129, 130, 133, 136, 145, 148, 151, 152, 153, 154, 157, 158, 163, 164, 166, 169, 170, 171, 178, 182, 183, 187, 188, 189, 190, 195, 199, 200, 201, 207, 208, 211, 216, 217, 222, 224, 225, 228, 233, 235, 236, 238, 245, 246, 247, 249, 250, 251, 255, 257, 261, 267, 278, 286, 288, 291, 292, 294, 296, 305, 307, 310, 315, 316, 318, 319, 327, 334, 335, 338, 339, 340, 342, 347, 351, 352, 353, 357, 362, 373, 374, 375, 376, 377, 378, 380, 382, 384, 386, 387, 388, 392, 394, 395, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 439, 440, 441, 442, 443, 445, 448, 449, 450, 451, 455, 457, 462, 467, 468, 469, 470, 471, 472, 473, 474, 486, 488, 489, 490, 491, 492, 494, 496, 498, 499, 500, 501, 502, 503, 505, 508, 512, 517, 520, 534, 536, 538, 542, 545, 547, 548, 551, 558, 568, 579, 582, 588, 589, 590, 593, 594, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 618, 619, 622, 626, 629, 630, 637, 641, 643, 668, 669, 671, 690, 697, 701, 702, 703, 710, 713, 714, 717, 719, 720, 721, 728, 729, 732, 733, 735, 738, 740, 751, 752, 754, 760, 761, 768, 771, 774, 775, 776, 777, 778, 782, 783, 791, 792, 793, 794, 828, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 856, 857, 863, 864, 871, 872, 873, 874, 893, 894, 895, 899, 900, 907, 909, 910, 950, 966, 967, 973, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1009, 1014, 1018, 1021, 1022, 1023, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "two_mean": 44, "two_point_correl": [839, 840], "twoclass_output": 113, "twosigmajab": 1038, "twx": 12, "tx": 410, "tx_k": [410, 981], "txn": 12, "txt": [351, 374, 491, 501], "txt_sentoken": 1023, "ty": 410, "ty_k": 410, "tyagi": 1044, "tygert": [533, 539, 936], "tyler": [310, 1037, 1043, 1044, 1045], "tylerlanigan": 310, "type": [7, 53, 54, 65, 69, 70, 76, 81, 90, 92, 104, 120, 121, 123, 156, 164, 166, 168, 169, 170, 175, 183, 199, 201, 230, 235, 240, 242, 244, 246, 247, 250, 251, 252, 255, 261, 266, 267, 269, 270, 271, 278, 293, 311, 322, 342, 351, 353, 360, 362, 367, 369, 373, 374, 375, 377, 380, 381, 383, 384, 385, 386, 392, 393, 397, 401, 404, 408, 415, 431, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 494, 506, 507, 513, 565, 570, 579, 580, 586, 587, 589, 598, 602, 615, 625, 627, 628, 636, 654, 656, 670, 672, 677, 685, 687, 690, 691, 697, 699, 705, 712, 714, 726, 727, 730, 735, 738, 780, 781, 784, 785, 794, 795, 796, 802, 810, 818, 823, 825, 826, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 859, 860, 861, 864, 866, 872, 873, 879, 880, 897, 901, 902, 903, 904, 905, 915, 917, 919, 920, 923, 927, 928, 950, 951, 958, 961, 973, 974, 977, 979, 984, 986, 987, 988, 989, 990, 991, 997, 999, 1003, 1009, 1011, 1012, 1016, 1021, 1022, 1023, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "type_check": 384, "type_filt": 928, "type_of_target": [394, 866, 880, 988, 1044, 1045, 1047, 1048], "type_of_target_": 880, "typed_ndarrai": 380, "typeerror": [235, 318, 385, 709, 923, 944, 971, 1037, 1038, 1041, 1043, 1047], "typic": [25, 27, 99, 109, 122, 175, 183, 199, 203, 217, 234, 262, 263, 267, 269, 270, 289, 290, 317, 338, 352, 366, 373, 374, 375, 378, 382, 383, 384, 389, 393, 394, 403, 405, 406, 407, 408, 411, 412, 414, 415, 417, 441, 445, 447, 494, 539, 549, 551, 553, 554, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 627, 636, 638, 641, 652, 653, 654, 669, 680, 681, 710, 866, 873, 877, 880, 935, 936, 944, 947, 972, 976, 980, 983, 984, 986, 987, 988, 989, 993, 995, 1012, 1023, 1039, 1043, 1046, 1047], "typo": [380, 395, 398, 1030], "tzu": 1034, "t\u00e9l\u00e9com": [0, 1005], "u": [4, 10, 11, 12, 13, 17, 34, 50, 52, 56, 90, 95, 102, 121, 122, 127, 151, 160, 168, 169, 170, 196, 200, 203, 207, 217, 221, 224, 232, 235, 241, 242, 246, 247, 251, 255, 260, 263, 267, 309, 311, 342, 351, 360, 367, 369, 375, 380, 384, 386, 388, 392, 397, 398, 404, 407, 410, 412, 414, 415, 430, 461, 463, 480, 481, 482, 529, 535, 543, 544, 548, 550, 552, 554, 556, 558, 560, 563, 566, 568, 586, 587, 589, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 679, 682, 687, 691, 702, 718, 737, 752, 832, 833, 842, 850, 857, 879, 893, 900, 902, 905, 908, 910, 936, 979, 981, 986, 987, 994, 997, 1005, 1012, 1023, 1027, 1040], "u2uwz2": [148, 377], "u_": [404, 480, 481, 482], "u_1": [404, 979], "u_2": [404, 979], "u_i": [407, 480, 481, 482, 752], "u_init": 541, "u_k": [410, 412], "uai": 999, "ubuntu": [366, 378, 386, 388], "ucdenv": 46, "uchida": [179, 1040], "uci": [8, 148, 310, 374, 377, 498, 500, 502, 508], "ucl": 1000, "ucla": [259, 983], "udi": 1030, "udit": 1044, "ufmay": 1042, "ufunc": [169, 1047], "ugli": [208, 291, 294, 334], "ugo": 1044, "ugurcaliskan": 1034, "ugurthemast": [1033, 1034], "uhmann": 1043, "uieda": 1043, "uint": 1041, "uint32": [375, 495], "uint8": [53, 98, 374, 495, 504, 505, 1042], "uk": [1000, 1023], "ulloa": 1036, "ulrik": [407, 450, 460, 689], "ulterior": 13, "ultim": [55, 224, 381], "umar": [1038, 1039], "umass": [6, 19, 375, 1019], "umberto": 1042, "umpi": 415, "un": [12, 380, 405, 415, 419, 531, 587, 792, 862, 871, 882, 886, 1039], "unabl": [12, 26, 71, 72, 116, 118, 119, 128, 129, 132, 135, 145, 156, 168, 169, 170, 171, 180, 183, 199, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 368, 879, 997, 1039], "unadjust": [407, 987, 1042], "unaffect": 990, "unalt": 987, "unambigu": [269, 988, 1036], "unanim": 395, "unavail": [394, 656, 657, 948, 1037, 1043], "unbalanc": [166, 263, 333, 336, 339, 349, 411, 510, 629, 904, 924, 925, 976, 1001, 1009], "unbias": [78, 405, 409, 412, 435, 548, 654, 670, 672, 685, 983, 1018], "unbound": [37, 986, 1044, 1048], "uncalibr": [24, 25, 26, 435], "uncent": 180, "uncertain": [260, 326, 379], "uncertainti": [25, 127, 151, 158, 178, 262, 405, 407, 565, 566, 641, 859, 977, 999], "uncertainty_index": [325, 326], "unchang": [169, 217, 267, 414, 431, 435, 440, 441, 442, 443, 444, 445, 447, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 690, 760, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 846, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 990, 1014, 1038, 1044, 1046], "unclaim": 383, "unclear": [379, 380, 499], "unclust": 444, "uncommon": [409, 656, 899, 1002], "uncompress": [8, 506, 507, 1023], "unconstrain": [127, 129, 170, 316, 322, 375, 1001], "uncorrect": [260, 593, 596], "uncorrel": [266, 376, 526, 532, 539, 987, 1021], "uncorrupt": 5, "uncov": [105, 693], "undefin": [13, 263, 394, 710, 726, 735, 738, 780, 956, 987, 1038, 1042, 1046], "undefinedmetricwarn": [302, 726, 727, 780, 781, 784, 1039], "under": [4, 7, 11, 24, 25, 27, 41, 67, 78, 79, 102, 121, 124, 170, 199, 228, 238, 260, 267, 269, 270, 306, 321, 369, 374, 380, 382, 384, 386, 388, 394, 397, 401, 405, 407, 409, 411, 412, 415, 416, 444, 449, 451, 468, 469, 470, 471, 472, 473, 474, 530, 537, 539, 541, 652, 653, 654, 700, 704, 705, 706, 713, 739, 751, 785, 786, 794, 795, 844, 943, 983, 984, 985, 987, 990, 997, 1001, 1002, 1003, 1007, 1008, 1023, 1030, 1032, 1033, 1035, 1038, 1042], "underdetermin": 183, "underestim": [13, 124, 170, 199, 217, 260, 380], "underfit": [4, 34, 124, 151, 166, 171, 200, 203, 253, 275, 276, 299, 311, 346, 414, 655, 796, 799, 800, 810, 821, 822, 859, 874, 982, 983, 1009], "underflow": [1038, 1043], "undergo": 266, "undergrad": 1012, "underli": [27, 56, 80, 131, 148, 169, 172, 200, 202, 203, 235, 265, 287, 288, 342, 359, 367, 380, 392, 394, 396, 398, 403, 405, 407, 409, 411, 412, 413, 414, 416, 417, 435, 449, 450, 451, 460, 462, 463, 469, 470, 476, 522, 553, 554, 562, 563, 565, 566, 567, 568, 591, 592, 595, 600, 656, 657, 663, 666, 671, 673, 678, 689, 693, 796, 799, 800, 810, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 842, 844, 899, 907, 908, 909, 910, 952, 983, 984, 988, 993, 1000, 1002, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1047, 1048], "underrepres": 380, "underscor": [353, 382, 394, 971, 1020, 1030, 1040, 1043], "underset": [412, 983, 990, 1003], "understand": [4, 9, 13, 41, 111, 156, 166, 170, 235, 255, 258, 317, 318, 335, 342, 351, 355, 356, 361, 362, 379, 380, 381, 386, 392, 396, 407, 414, 415, 502, 825, 856, 857, 907, 908, 909, 910, 913, 976, 977, 984, 986, 1003, 1006, 1007, 1009, 1012, 1030, 1044], "understood": [261, 380, 407, 944, 1020], "undertak": 392, "undesir": [57, 152, 417], "undistinguish": 411, "undistort": 98, "undo": [261, 869, 1034], "undocu": 1037, "unequ": [57, 1038], "uneth": 168, "uneven": [52, 255, 407, 411], "unevenli": [57, 199, 255], "unexpect": [57, 235, 362, 380, 385, 388, 401, 533, 694, 987, 1002, 1032, 1038, 1039, 1042, 1044, 1046], "unexpectedli": [394, 1038], "unfair": 362, "unfinish": [379, 380], "unfit": [56, 408, 432, 462, 567, 568, 600, 609, 1038, 1040, 1047], "unfold": [100, 383, 984], "unfortun": [124, 168, 169, 217, 388, 392, 414, 506, 507], "unhandl": 1039, "unhelp": 380, "uni": [24, 25, 26, 27, 74, 115, 151, 152, 154, 155, 156, 157, 158, 160, 190, 233, 234, 327, 346], "unicod": [353, 415, 485, 501, 580, 586, 587, 589, 952, 1030, 1038, 1042], "unicodedata": [586, 587, 589], "unicodedecodeerror": [415, 586, 587, 589], "unifi": [278, 381, 389, 392, 393, 414, 635, 1007, 1030], "unifom": 286, "uniform": [20, 31, 37, 53, 123, 124, 128, 144, 152, 157, 160, 178, 179, 213, 225, 228, 231, 268, 286, 289, 290, 295, 299, 306, 308, 309, 312, 319, 321, 337, 382, 385, 407, 436, 437, 549, 567, 568, 608, 609, 626, 637, 647, 648, 652, 666, 674, 675, 676, 697, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 800, 808, 810, 834, 835, 838, 841, 842, 849, 850, 864, 876, 878, 888, 924, 938, 976, 977, 986, 987, 990, 1036, 1038, 1040, 1044, 1046], "uniform_averag": [430, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 987, 1039], "uniform_labelings_scor": 37, "uniformli": [37, 117, 124, 143, 228, 245, 315, 382, 514, 515, 516, 549, 640, 800, 808, 810, 878, 976, 977, 987, 990, 997, 1034, 1039], "unigram": [261, 375, 415, 586, 587, 589, 1037], "unilev": 12, "unimod": [228, 472], "unimport": [416, 995], "uninform": [25, 27, 312, 376, 385, 415, 976, 983, 1038], "uniniti": 388, "uninstal": 378, "unintention": 997, "unintuit": 57, "union": [70, 169, 408, 735, 751, 858, 1037], "union_not_memb": 169, "uniqu": [4, 24, 30, 42, 47, 48, 57, 58, 63, 67, 73, 118, 119, 125, 126, 127, 169, 171, 183, 214, 217, 247, 269, 292, 311, 312, 321, 328, 351, 352, 353, 374, 382, 389, 394, 407, 408, 411, 414, 415, 438, 448, 452, 454, 462, 465, 494, 547, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 608, 631, 632, 633, 664, 666, 674, 695, 707, 709, 751, 779, 796, 798, 810, 822, 827, 828, 831, 837, 846, 849, 851, 856, 858, 870, 872, 873, 880, 883, 899, 901, 907, 908, 909, 910, 924, 936, 950, 951, 983, 988, 997, 1012, 1021, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "unique_label": [49, 55, 352, 382, 389], "unit": [26, 70, 80, 169, 175, 199, 217, 288, 301, 305, 352, 375, 380, 381, 382, 386, 388, 389, 412, 415, 419, 462, 487, 488, 517, 522, 530, 531, 532, 539, 540, 587, 588, 589, 605, 606, 609, 656, 657, 674, 683, 697, 767, 846, 855, 856, 857, 863, 869, 871, 875, 877, 879, 885, 886, 887, 889, 890, 899, 900, 983, 985, 986, 987, 992, 997, 1003, 1007, 1021, 1034, 1038, 1044, 1045], "unit_eig_vec": 245, "unit_vari": [877, 889, 1042], "unitari": 936, "uniti": 406, "unittest": 380, "univ": [687, 691, 984], "univ_select": 74, "univari": [9, 10, 36, 47, 68, 72, 74, 142, 143, 145, 149, 166, 181, 198, 214, 273, 333, 349, 372, 406, 407, 408, 415, 443, 502, 523, 528, 590, 593, 594, 596, 597, 598, 600, 603, 604, 605, 606, 607, 625, 626, 627, 628, 643, 796, 801, 821, 825, 859, 860, 869, 874, 878, 879, 899, 904, 983, 1002, 1004, 1009, 1010, 1022, 1025, 1030, 1036], "univers": [0, 159, 169, 351, 375, 377, 383, 407, 412, 415, 588, 785, 834, 838, 894, 983, 985, 987, 989], "unix": 415, "unknown": [13, 56, 169, 235, 260, 325, 327, 368, 375, 394, 401, 404, 415, 866, 872, 873, 950, 986, 997, 1014, 1034, 1038, 1042, 1043], "unknown_typ": 401, "unknown_v": 132, "unknown_valu": [121, 132, 171, 238, 311, 873, 997, 1042, 1044, 1045], "unlabel": [6, 236, 317, 325, 326, 327, 329, 330, 394, 406, 407, 894, 895, 896, 986, 1014, 1017, 1019, 1021, 1042], "unlabeled_indic": 326, "unlabeled_set": 325, "unless": [168, 235, 246, 251, 380, 382, 383, 392, 394, 405, 407, 410, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 470, 487, 494, 506, 507, 529, 533, 534, 535, 537, 540, 541, 543, 544, 545, 546, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 609, 630, 632, 637, 644, 645, 649, 650, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 707, 712, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 845, 847, 849, 850, 852, 853, 856, 857, 858, 861, 880, 884, 885, 887, 888, 889, 890, 894, 895, 907, 908, 909, 910, 915, 919, 920, 936, 955, 983, 986, 988, 1030, 1032, 1036, 1038, 1041, 1042, 1047], "unlik": [55, 56, 117, 169, 170, 220, 222, 250, 305, 336, 380, 382, 386, 392, 394, 398, 409, 411, 412, 415, 444, 448, 533, 648, 649, 652, 653, 654, 680, 681, 782, 817, 839, 840, 879, 890, 902, 983, 986, 987, 994, 1002, 1030, 1036], "unlimit": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "unlucki": 362, "unmaintain": 1030, "unmarri": 169, "unmeaning": 1037, "unmix": [96, 419, 531], "unmixing_matrix": 531, "unmodifi": [382, 394], "unnecessari": [117, 245, 385, 441, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 703, 990, 997, 1008, 1012, 1033, 1035, 1040, 1041, 1043, 1046], "unnecessarili": [224, 1037, 1040], "unnorm": [394, 534, 984, 1036, 1037], "unobserv": [127, 168, 169, 412], "unord": [407, 414, 997], "unpack": 382, "unpen": [405, 646, 667, 678, 983], "unpickl": [394, 401, 574, 839, 840, 1036, 1042, 1046], "unpleas": 1032, "unpract": 986, "unprefix": 1036, "unprocess": [448, 586, 587, 589], "unprotect": 953, "unprun": [555, 556, 562, 563, 907, 908, 909, 910], "unquot": 217, "unrealist": 375, "unreason": [217, 411], "unreg": 343, "unregular": [872, 895, 1021, 1039], "unrel": [311, 367, 385, 388, 415, 513], "unreli": 408, "unrepresent": 914, "unrestrict": 491, "unrol": 224, "unrot": 105, "unsaf": 532, "unsampl": 979, "unscal": [305, 310, 983, 987, 1038, 1044], "unscaled_clf": 310, "unseen": [78, 122, 145, 188, 203, 207, 273, 289, 342, 368, 372, 382, 393, 394, 407, 411, 845, 876, 888, 978, 987, 993, 995, 997, 1003, 1014, 1033, 1038, 1042], "unseen_featur": [415, 579], "unset": [367, 394, 1038], "unsetmetadatapassederror": 398, "unshad": 412, "unshifft": 675, "unshift": 903, "unsign": [53, 99, 375, 580, 952], "unsmooth": 413, "unsort": [990, 1031, 1034, 1038], "unspecifi": [597, 598, 798, 984], "unstabl": [39, 66, 169, 407, 409, 410, 687, 691, 935, 936, 1003, 1034, 1035, 1037, 1042, 1044, 1046], "unstack": [217, 263], "unstructur": [14, 36, 39, 40, 41, 44, 47, 68, 166, 224, 301, 407, 439, 443, 461, 501, 528, 852, 999, 1009, 1012, 1034], "unsuccess": 11, "unsupervis": [6, 12, 37, 49, 72, 73, 86, 95, 116, 130, 228, 236, 289, 290, 337, 351, 352, 362, 369, 372, 375, 382, 393, 394, 406, 407, 410, 412, 413, 414, 415, 416, 431, 440, 443, 530, 532, 534, 535, 537, 540, 541, 547, 561, 564, 565, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 626, 628, 632, 633, 636, 637, 638, 639, 640, 675, 796, 799, 800, 802, 810, 818, 823, 826, 841, 842, 845, 847, 848, 849, 850, 855, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 891, 892, 896, 903, 984, 987, 993, 1000, 1010, 1014, 1015, 1017, 1019, 1025, 1030, 1033, 1043, 1047], "unsupport": [398, 401, 491, 1038, 1043], "unsur": 900, "untangl": 100, "untar": 8, "unterthin": [305, 1033, 1034, 1035], "until": [55, 148, 207, 272, 317, 319, 385, 394, 395, 404, 407, 411, 416, 506, 507, 555, 556, 557, 558, 562, 563, 564, 591, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 669, 674, 675, 676, 692, 794, 795, 799, 800, 856, 857, 896, 899, 907, 908, 909, 910, 962, 976, 983, 984, 992, 1000, 1003, 1023, 1033, 1037, 1038, 1044], "untransform": [342, 462, 465, 998], "untru": 987, "untrust": 401, "untun": 124, "unus": [90, 101, 170, 196, 220, 222, 461, 577, 760, 768, 976, 984, 1030, 1038, 1040, 1041, 1043, 1045], "unusu": [27, 404, 993, 997, 1038], "unveil": 1036, "unvendor": 1038, "unwant": [200, 351], "unweight": [164, 212, 461, 645, 651, 676, 705, 711, 726, 727, 735, 780, 781, 784, 785, 834, 835, 836, 837, 838, 977], "unwieldi": 870, "uoa": 892, "up": [8, 11, 37, 44, 46, 47, 48, 52, 55, 57, 62, 70, 80, 81, 89, 92, 109, 116, 127, 164, 169, 170, 178, 183, 192, 200, 215, 216, 247, 262, 265, 283, 296, 302, 306, 311, 319, 326, 335, 342, 346, 351, 353, 368, 374, 375, 380, 384, 386, 387, 388, 389, 392, 394, 395, 405, 407, 412, 414, 415, 441, 445, 446, 447, 448, 450, 454, 457, 458, 459, 506, 507, 534, 547, 548, 555, 556, 557, 558, 559, 560, 562, 563, 564, 608, 625, 630, 631, 637, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 679, 680, 681, 682, 690, 703, 766, 794, 795, 798, 799, 800, 802, 823, 873, 874, 877, 889, 907, 908, 909, 910, 913, 936, 939, 940, 976, 979, 983, 984, 987, 990, 997, 1001, 1002, 1008, 1011, 1012, 1022, 1023, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "upadhyai": [1036, 1037, 1038, 1039], "upcast": [1040, 1044], "upcom": [156, 378], "updat": [8, 44, 62, 111, 117, 126, 233, 315, 353, 379, 380, 384, 388, 394, 407, 412, 414, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 461, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 803, 805, 810, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 962, 983, 990, 991, 992, 1001, 1011, 1012, 1031, 1037, 1038, 1039, 1041, 1043, 1045, 1046, 1048], "update_from": 290, "update_func": 290, "update_h": 545, "update_layout": [117, 261], "update_legend_marker_s": 290, "update_terminal_region": 1039, "upgrad": [315, 316, 317, 318, 319, 320, 321, 322, 397, 1008, 1030, 1035, 1038], "upload": [374, 378, 384, 392, 669], "upload_d": 374, "upon": [217, 225, 296, 375, 380, 392, 394, 401, 559, 560, 625, 628, 669, 786, 794, 795, 839, 840, 976, 983, 1003, 1014, 1023, 1044], "upper": [4, 7, 9, 24, 72, 75, 79, 80, 81, 113, 114, 115, 123, 124, 125, 126, 132, 134, 144, 155, 157, 160, 169, 193, 199, 205, 206, 209, 213, 216, 217, 232, 236, 237, 259, 260, 261, 288, 289, 300, 310, 328, 337, 340, 342, 345, 407, 413, 461, 586, 587, 589, 593, 611, 612, 613, 615, 617, 618, 620, 621, 623, 630, 631, 633, 635, 648, 652, 675, 732, 785, 872, 873, 901, 902, 903, 923, 986, 987, 990, 997, 1001, 1002, 1003, 1038], "upperbound": 731, "uppercas": [394, 1043], "uppercase_initi": 415, "upperlimit": 702, "upright": 375, "upstream": [366, 380, 384, 388, 392, 997, 1039], "upward": [448, 454], "ur": 1041, "urbanowicz": 987, "urbanowicz2015": 987, "urcrnrlat": [11, 296], "urcrnrlon": [11, 296], "uri": 17, "url": [12, 17, 148, 374, 377, 382, 384], "urllib": [8, 17], "urlopen": 17, "urlretriev": 8, "urlu": 1048, "urvang": [1038, 1040], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 86, 90, 91, 92, 94, 97, 99, 100, 102, 103, 104, 106, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 138, 139, 140, 144, 145, 147, 150, 151, 152, 157, 158, 159, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 211, 214, 216, 217, 218, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 304, 305, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 353, 354, 356, 358, 359, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 389, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 407, 408, 409, 410, 413, 414, 417, 418, 419, 420, 423, 425, 426, 428, 429, 437, 454, 455, 457, 459, 461, 469, 476, 478, 479, 483, 485, 491, 501, 506, 507, 514, 529, 543, 544, 545, 546, 553, 570, 572, 573, 575, 576, 581, 583, 584, 590, 593, 594, 596, 599, 601, 607, 614, 618, 619, 622, 627, 634, 636, 640, 648, 649, 652, 658, 659, 661, 665, 673, 681, 683, 684, 685, 692, 693, 694, 697, 709, 712, 713, 714, 719, 720, 721, 723, 725, 727, 733, 736, 740, 748, 753, 755, 756, 760, 761, 763, 764, 765, 766, 768, 771, 772, 773, 774, 777, 778, 780, 788, 791, 803, 804, 805, 807, 808, 809, 819, 831, 833, 835, 839, 840, 849, 850, 851, 853, 861, 862, 865, 867, 870, 881, 882, 884, 886, 887, 889, 890, 891, 894, 898, 900, 909, 910, 911, 912, 915, 918, 919, 920, 925, 926, 935, 936, 943, 950, 954, 955, 956, 958, 959, 963, 964, 965, 976, 977, 979, 980, 982, 985, 986, 988, 989, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1024, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "usa": [259, 375, 896, 977, 984, 999, 1000], "usabl": [127, 374, 380, 382, 394, 401, 415, 796, 955, 1030, 1037, 1044, 1045], "usag": [42, 53, 71, 74, 85, 99, 109, 145, 169, 170, 229, 233, 235, 254, 292, 294, 301, 334, 353, 366, 375, 379, 380, 382, 383, 387, 388, 390, 394, 395, 397, 406, 407, 411, 412, 417, 418, 442, 444, 448, 462, 487, 494, 510, 513, 517, 521, 532, 533, 539, 547, 559, 560, 589, 607, 638, 646, 656, 657, 658, 664, 665, 666, 667, 674, 675, 676, 677, 678, 688, 775, 778, 789, 790, 855, 856, 858, 899, 907, 908, 909, 910, 936, 976, 977, 979, 986, 987, 988, 990, 1002, 1010, 1011, 1014, 1018, 1025, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "usal": 175, "usd": 238, "use_encoded_valu": [121, 132, 171, 238, 311, 873, 997, 1042], "use_idf": [412, 415, 588, 589, 1023], "usecas": [316, 319, 321, 407, 560], "useless": [15, 120, 263, 386, 416, 513, 526, 656, 710, 983, 997, 1039], "user": [3, 13, 25, 27, 55, 69, 95, 117, 160, 166, 169, 187, 220, 235, 250, 257, 267, 269, 278, 283, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 322, 362, 366, 367, 369, 374, 378, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 397, 398, 401, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 418, 419, 420, 421, 424, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 932, 936, 976, 977, 983, 984, 986, 987, 988, 990, 997, 1001, 1005, 1007, 1008, 1012, 1016, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "user_guid": 4, "user_r": 408, "userguid": 1037, "usernam": 397, "userscript": 388, "userwarn": [44, 62, 113, 160, 191, 208, 255, 343, 357, 385, 710, 997, 1036, 1038, 1043], "ushtanit": [1042, 1043], "usp": 5, "usr": 378, "usual": [4, 13, 40, 78, 79, 81, 123, 124, 126, 132, 168, 170, 185, 199, 200, 254, 257, 260, 269, 270, 306, 318, 338, 362, 366, 367, 378, 380, 382, 388, 392, 393, 394, 398, 404, 407, 408, 411, 412, 414, 415, 416, 448, 454, 536, 538, 540, 545, 557, 558, 605, 606, 628, 638, 656, 657, 664, 665, 666, 674, 675, 676, 690, 723, 755, 802, 823, 827, 899, 936, 976, 977, 979, 982, 983, 984, 986, 987, 988, 991, 992, 993, 994, 997, 1001, 1002, 1003, 1014, 1020, 1021, 1045], "utc": 987, "utf": [351, 353, 415, 485, 501, 580, 586, 587, 589], "util": [8, 10, 11, 48, 55, 56, 61, 89, 109, 111, 132, 199, 201, 207, 215, 222, 231, 235, 237, 248, 266, 268, 283, 307, 315, 328, 338, 342, 351, 367, 369, 374, 375, 380, 381, 382, 383, 392, 393, 394, 403, 407, 408, 411, 412, 415, 435, 441, 442, 445, 447, 451, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 579, 580, 586, 588, 589, 592, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 796, 797, 798, 803, 805, 814, 819, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 982, 985, 987, 988, 997, 998, 1007, 1012, 1015, 1025, 1030, 1031, 1033, 1034, 1036, 1037], "utilis": 1036, "utkarsh": [1036, 1037, 1038, 1039], "utl": 416, "utstat": 642, "uttam": 1043, "uv": [95, 412], "uw": [148, 377, 1042], "uwha": [1043, 1044], "v": [0, 4, 9, 13, 14, 17, 19, 27, 30, 33, 34, 36, 37, 38, 39, 40, 41, 44, 47, 49, 55, 58, 68, 70, 72, 75, 77, 80, 82, 83, 84, 85, 87, 95, 97, 98, 102, 115, 117, 118, 119, 124, 125, 126, 138, 144, 151, 166, 167, 172, 173, 177, 179, 188, 197, 198, 199, 200, 202, 203, 204, 205, 208, 214, 218, 224, 232, 246, 247, 250, 251, 253, 256, 275, 276, 278, 294, 312, 315, 335, 352, 362, 367, 372, 377, 380, 386, 388, 394, 403, 404, 405, 406, 409, 410, 412, 415, 430, 439, 443, 450, 460, 461, 462, 463, 468, 471, 472, 473, 474, 475, 480, 481, 482, 494, 510, 522, 528, 529, 535, 539, 543, 544, 548, 550, 552, 554, 556, 558, 560, 562, 563, 566, 568, 579, 587, 591, 592, 598, 604, 609, 628, 629, 632, 633, 637, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 674, 676, 677, 686, 693, 697, 699, 702, 715, 733, 734, 736, 751, 752, 754, 785, 792, 796, 801, 808, 810, 821, 825, 827, 828, 829, 832, 833, 834, 842, 850, 852, 855, 857, 859, 860, 863, 866, 872, 873, 874, 879, 880, 883, 893, 899, 900, 901, 902, 904, 905, 908, 910, 914, 981, 982, 983, 984, 987, 988, 989, 992, 995, 997, 1001, 1002, 1004, 1009, 1025, 1030, 1033, 1034, 1035, 1038, 1040, 1041, 1044, 1045], "v0": [384, 469, 470, 476, 510, 586, 587, 589, 796, 810, 858, 861, 1031, 1038, 1039, 1040], "v1": [320, 374, 397, 559, 560, 794, 795, 1042, 1045, 1046, 1047, 1048], "v2": [375, 495, 662, 683, 684, 983], "v5": 1038, "v_": [404, 415], "v_1": 404, "v_2": 404, "v_i": 992, "v_ih_j": 992, "v_init": 541, "v_j": [407, 752, 992], "v_k": [410, 412, 529, 535, 543, 544], "v_measur": [733, 792], "v_measure_scor": [19, 37, 38, 49, 58, 321, 352, 407, 715, 733, 734, 754, 987, 1039], "v_new": 855, "va": [8, 122, 271, 291, 293, 345], "vac": 278, "vacaliuc": [1038, 1039], "vacat": 375, "vachan": 1041, "vadim": [1038, 1042, 1043], "vaerenbergh": [1045, 1046], "vaggi": [1032, 1033], "vaillant": 1042, "val": [73, 211, 260, 938], "val_errors_with": 122, "val_errors_without": 122, "val_pr": 122, "val_scor": 123, "vale": 1040, "valencia": [1044, 1046], "valentin": [1033, 1035, 1045, 1046], "valero": 12, "valgrind": 383, "valid": [8, 13, 14, 26, 27, 54, 55, 56, 57, 71, 72, 74, 75, 78, 82, 91, 102, 109, 115, 117, 120, 121, 122, 123, 124, 127, 128, 137, 141, 142, 145, 146, 148, 149, 159, 166, 169, 171, 177, 183, 185, 186, 187, 193, 199, 201, 207, 217, 218, 229, 235, 237, 241, 247, 250, 253, 257, 260, 261, 262, 264, 266, 267, 268, 269, 272, 273, 274, 276, 278, 287, 302, 306, 311, 315, 317, 322, 328, 338, 346, 356, 367, 375, 380, 383, 392, 393, 394, 401, 402, 405, 407, 408, 409, 412, 413, 414, 415, 416, 421, 423, 435, 440, 441, 443, 444, 445, 447, 448, 455, 461, 462, 466, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 491, 499, 500, 502, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 573, 575, 580, 581, 587, 591, 592, 595, 600, 630, 632, 636, 637, 638, 639, 640, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 686, 687, 690, 697, 699, 700, 704, 711, 725, 759, 762, 771, 775, 776, 777, 782, 789, 790, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 865, 871, 879, 891, 892, 894, 895, 897, 899, 901, 904, 906, 907, 908, 909, 910, 919, 920, 921, 922, 923, 930, 942, 944, 947, 977, 986, 987, 988, 990, 991, 995, 997, 999, 1001, 1002, 1003, 1007, 1008, 1009, 1012, 1014, 1017, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "valid_metr": [839, 840, 990, 1046], "valid_scor": 982, "validate_metadata": [235, 944], "validation_curv": [321, 346, 398, 818, 982, 1037, 1038, 1039, 1042, 1046], "validation_fract": [122, 127, 207, 318, 414, 557, 558, 559, 560, 664, 665, 666, 674, 676, 856, 857, 1001, 1038, 1044], "validation_score_": [127, 559, 560], "validation_scores_": [856, 857, 1045], "validationcurvedisplai": [275, 982, 1046], "validationerror": 1044, "vallei": 311, "vall\u00e9": 1037, "valu": [4, 5, 7, 11, 12, 13, 14, 17, 19, 20, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 55, 60, 61, 62, 66, 71, 73, 75, 78, 80, 82, 95, 98, 105, 109, 111, 113, 115, 116, 117, 118, 119, 121, 124, 125, 128, 129, 131, 132, 143, 144, 147, 151, 154, 155, 157, 159, 165, 168, 169, 170, 171, 172, 175, 178, 179, 181, 183, 185, 187, 188, 189, 190, 192, 197, 199, 200, 201, 203, 205, 214, 217, 219, 220, 222, 223, 226, 228, 229, 230, 231, 232, 233, 234, 238, 241, 242, 245, 251, 254, 256, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 273, 275, 283, 286, 296, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 317, 328, 338, 342, 343, 346, 351, 352, 353, 356, 362, 366, 367, 368, 369, 372, 373, 374, 375, 377, 381, 382, 383, 385, 386, 387, 389, 392, 393, 394, 396, 397, 398, 404, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 420, 421, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 488, 489, 491, 494, 495, 496, 499, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 766, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 807, 808, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 920, 923, 924, 925, 926, 928, 936, 938, 944, 947, 948, 949, 950, 951, 955, 963, 964, 965, 976, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 998, 1000, 1001, 1002, 1009, 1010, 1012, 1014, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "valuabl": [122, 380, 977, 1012], "valuat": 414, "value_count": [4, 13, 170, 278], "value_kei": [392, 914], "value_typ": [417, 615], "valueerror": [156, 235, 236, 382, 386, 398, 466, 575, 601, 615, 633, 669, 712, 831, 849, 858, 864, 878, 918, 922, 923, 972, 973, 974, 997, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047], "values_format": [695, 1040], "vamsi": 1045, "van": [0, 1, 374, 409, 467, 472, 532, 625, 690, 694, 977, 984, 987, 993, 1012, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046], "vandana": 1041, "vander": 179, "vandermond": [200, 997], "vanderpla": [0, 2, 11, 158, 200, 220, 248, 288, 296, 1006, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "vang": 1043, "vanilla": [199, 403, 407, 445, 447, 458, 627], "vanrel": 1036, "vanschoren": [374, 1042], "vapnik": [591, 592], "var": [85, 86, 114, 148, 179, 260, 377, 381, 416, 639, 643, 901, 902, 903, 904, 905, 987, 1038], "var_": [532, 837, 879, 1043], "var_smooth": [837, 1038], "varanasi": [1030, 1033], "vardhan": 1034, "varepsilon": [407, 1001, 1002], "vari": [7, 13, 27, 31, 34, 44, 46, 55, 62, 65, 75, 92, 117, 118, 120, 130, 140, 147, 153, 155, 166, 169, 170, 172, 188, 190, 193, 197, 206, 225, 233, 238, 250, 256, 260, 263, 270, 272, 298, 303, 305, 307, 308, 310, 321, 324, 330, 331, 338, 341, 343, 344, 348, 362, 366, 368, 375, 394, 439, 443, 444, 498, 506, 512, 513, 520, 557, 558, 562, 563, 644, 645, 648, 649, 650, 651, 652, 653, 658, 659, 660, 661, 679, 682, 701, 760, 815, 818, 823, 825, 826, 856, 860, 864, 879, 896, 904, 907, 908, 961, 979, 982, 983, 987, 990, 991, 1000, 1003, 1009, 1012, 1037, 1038, 1046], "variabl": [4, 9, 11, 12, 13, 37, 70, 114, 118, 121, 124, 125, 127, 139, 140, 143, 148, 158, 159, 163, 164, 170, 171, 175, 183, 188, 199, 203, 204, 217, 222, 238, 251, 260, 263, 270, 278, 281, 310, 311, 312, 362, 366, 368, 375, 377, 378, 380, 382, 384, 385, 388, 394, 398, 403, 407, 408, 409, 410, 412, 414, 415, 416, 448, 480, 481, 482, 485, 497, 499, 506, 513, 530, 532, 534, 539, 542, 551, 557, 558, 602, 604, 605, 606, 638, 648, 649, 652, 653, 659, 680, 681, 693, 707, 744, 797, 798, 801, 803, 804, 805, 806, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 827, 831, 832, 862, 873, 876, 880, 888, 900, 976, 977, 979, 983, 986, 987, 988, 989, 990, 992, 994, 995, 997, 1001, 1003, 1007, 1008, 1014, 1015, 1017, 1019, 1030, 1035, 1038, 1040, 1043, 1045], "varianc": [4, 5, 10, 13, 27, 44, 55, 57, 62, 73, 78, 80, 85, 86, 90, 95, 96, 97, 100, 102, 103, 105, 110, 126, 127, 136, 158, 160, 166, 169, 177, 179, 181, 183, 188, 189, 195, 199, 201, 204, 217, 218, 250, 257, 260, 263, 269, 270, 273, 292, 299, 305, 310, 352, 362, 372, 376, 389, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 419, 439, 443, 447, 461, 519, 522, 530, 531, 532, 539, 542, 547, 548, 553, 554, 556, 557, 558, 563, 601, 605, 606, 609, 623, 641, 642, 643, 650, 654, 655, 658, 660, 670, 671, 672, 673, 674, 685, 708, 725, 782, 794, 795, 837, 848, 863, 869, 875, 877, 879, 885, 887, 889, 890, 908, 910, 962, 963, 964, 968, 981, 982, 983, 985, 990, 991, 992, 995, 999, 1001, 1002, 1003, 1004, 1009, 1010, 1019, 1021, 1022, 1025, 1030, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "variance_weight": [725, 782, 987], "variances_": 601, "variancethreshold": [416, 864, 977, 1033, 1040, 1043, 1046], "variant": [27, 43, 95, 162, 164, 165, 166, 230, 260, 318, 319, 352, 353, 386, 407, 410, 412, 415, 417, 447, 458, 488, 491, 492, 510, 513, 541, 557, 558, 563, 613, 617, 620, 621, 625, 628, 636, 637, 639, 643, 670, 702, 797, 801, 803, 804, 805, 814, 821, 842, 860, 896, 977, 983, 984, 985, 986, 987, 989, 990, 1001, 1008, 1009, 1023, 1030, 1038], "variat": [4, 7, 12, 37, 65, 92, 129, 148, 156, 157, 164, 166, 169, 204, 244, 246, 251, 252, 257, 271, 281, 293, 316, 338, 377, 411, 412, 441, 445, 457, 534, 641, 670, 672, 673, 794, 795, 814, 815, 817, 976, 987, 997, 1000, 1003, 1007, 1009, 1019, 1021, 1024, 1025, 1033, 1035, 1036], "variegatu": [11, 296, 375, 496], "variet": 311, "varieti": [25, 163, 247, 311, 338, 388, 406, 407, 409, 415, 641, 990, 1003, 1007, 1012, 1032, 1045, 1046], "varimax": [105, 412, 530, 1042], "variou": [4, 12, 36, 37, 39, 41, 55, 58, 60, 61, 62, 68, 81, 85, 89, 98, 146, 166, 169, 177, 207, 209, 218, 219, 220, 221, 222, 226, 232, 278, 283, 300, 309, 316, 325, 326, 351, 353, 360, 362, 366, 374, 375, 376, 377, 380, 382, 385, 393, 395, 405, 406, 407, 409, 435, 439, 470, 500, 512, 513, 523, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 592, 600, 645, 649, 651, 653, 656, 659, 661, 663, 664, 666, 671, 673, 674, 689, 690, 697, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 859, 899, 900, 976, 977, 984, 987, 990, 994, 997, 1001, 1003, 1007, 1009, 1011, 1012, 1022, 1023, 1030, 1033, 1034, 1047], "varma": 1039, "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 66, 67, 73, 82, 89, 90, 97, 101, 182, 188, 189, 196, 197, 221, 223, 231, 233, 247, 307, 342, 343, 395, 1006, 1012, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "varun": [1036, 1037, 1038, 1044, 1045], "vasani": 1041, "vasilei": [1012, 1037], "vasileva": 1044, "vasiloudi": 1035, "vassard": 1044, "vassilvitskii": [407, 445, 458], "vast": 380, "vastli": 310, "vathsala": [1037, 1038, 1039, 1040], "vatsan": 1036, "vavrova": 1037, "vazelh": [1038, 1039, 1040], "vazirgianni": 407, "vb": 534, "vbgmm": [1030, 1034, 1036], "vc": 378, "vcvarsal": 378, "vd": 1048, "ve": [352, 380, 415, 1012, 1023, 1037], "veal": 19, "veb2009": 407, "veb2010": 407, "vec": [95, 415, 536, 538, 545], "veclib": [366, 392], "vect": [8, 70, 261, 329, 415, 1023], "vect__": 261, "vect__max_df": 261, "vect__min_df": 261, "vect__ngram_rang": [261, 1023], "vect__norm": 261, "vector": [7, 8, 9, 10, 12, 15, 19, 20, 26, 30, 32, 36, 40, 48, 68, 72, 89, 95, 97, 98, 144, 151, 159, 180, 186, 203, 204, 211, 215, 233, 234, 241, 258, 260, 261, 265, 289, 302, 305, 330, 334, 335, 338, 339, 340, 341, 342, 343, 346, 348, 349, 352, 366, 368, 369, 375, 385, 386, 389, 392, 394, 404, 405, 407, 409, 410, 411, 412, 414, 417, 418, 419, 435, 441, 442, 443, 445, 447, 448, 449, 451, 462, 463, 465, 466, 480, 481, 482, 483, 485, 487, 495, 507, 510, 519, 522, 529, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 620, 621, 623, 629, 636, 638, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 689, 690, 691, 693, 697, 717, 732, 760, 765, 766, 767, 768, 770, 771, 772, 774, 775, 796, 799, 800, 810, 823, 826, 827, 828, 834, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856, 857, 864, 866, 871, 879, 883, 886, 897, 899, 900, 901, 902, 903, 904, 905, 906, 919, 933, 935, 936, 950, 956, 976, 979, 980, 981, 983, 984, 985, 987, 988, 989, 991, 992, 993, 997, 1001, 1003, 1009, 1010, 1014, 1017, 1020, 1023, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1041, 1043, 1048], "vectori": [394, 1040], "vectorizer2": 586, "vectorizer_param": 329, "vectorizermixin": 1040, "vectorizing_tim": 8, "vectors_test": 375, "ved": 1047, "vedaldi": [636, 979], "veenhui": [1045, 1046, 1047], "veerkhar": 1045, "veerlosar": 1040, "veghit": 1046, "vehag": [199, 217], "vehbrand": [199, 217], "vehga": [199, 217], "vehicl": [199, 217], "vehpow": [199, 217], "vel": 377, "velkov": 1032, "veloc": 380, "vembu": 405, "vempati": 979, "vendor": [235, 1035, 1038, 1039], "venezuela": [11, 296, 375, 496], "venkat": [0, 2], "venkatachalam": [1040, 1041, 1042, 1043, 1044, 1047, 1048], "venkatesh": 1040, "venna": 694, "venthur": 1038, "venu": 394, "venv": [378, 397], "vera": [1044, 1045], "verbos": [10, 42, 50, 54, 64, 70, 72, 74, 132, 186, 261, 301, 302, 305, 318, 329, 351, 378, 384, 394, 401, 438, 441, 445, 447, 450, 452, 457, 460, 462, 465, 469, 470, 476, 529, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 591, 592, 625, 630, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 690, 692, 762, 775, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 828, 830, 833, 848, 855, 856, 857, 858, 859, 860, 861, 896, 899, 900, 901, 902, 903, 904, 905, 953, 1008, 1032, 1033, 1035, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1048], "verbose_feature_names_out": [121, 169, 170, 171, 242, 311, 318, 319, 320, 322, 408, 462, 465, 858, 1043, 1047, 1048], "verbose_interv": [794, 795], "veri": [4, 13, 25, 27, 39, 40, 42, 44, 50, 52, 60, 62, 80, 81, 82, 85, 92, 98, 124, 130, 138, 156, 163, 169, 170, 171, 188, 199, 200, 201, 204, 207, 217, 224, 228, 234, 235, 238, 245, 262, 263, 266, 267, 269, 270, 275, 283, 301, 305, 318, 325, 328, 338, 342, 348, 351, 353, 362, 366, 375, 379, 380, 382, 385, 386, 388, 392, 393, 394, 401, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 440, 445, 450, 460, 469, 470, 476, 498, 502, 508, 539, 555, 556, 559, 560, 562, 563, 565, 566, 587, 588, 620, 648, 649, 652, 653, 654, 662, 680, 681, 683, 689, 690, 693, 703, 740, 743, 789, 794, 796, 804, 806, 810, 813, 816, 839, 840, 864, 868, 869, 870, 879, 891, 892, 901, 904, 907, 908, 909, 910, 936, 976, 979, 980, 982, 983, 984, 985, 986, 987, 990, 991, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1021, 1022, 1030, 1035, 1036, 1038, 1041, 1043, 1045, 1046, 1047], "verif": [375, 987, 1012], "verifi": [53, 60, 109, 127, 169, 199, 380, 385, 403, 971, 990], "verlag": 694, "vermeil": 1038, "veronda": 1031, "verrier": 1045, "versa": [169, 257, 351, 407, 417, 440, 605, 606, 828, 1034], "versatil": [417, 1002, 1012], "versicolor": [90, 269, 270, 502], "versicolour": [45, 90, 101, 103, 377, 1021], "version": [4, 13, 46, 53, 55, 71, 95, 100, 111, 127, 153, 164, 170, 171, 175, 183, 197, 200, 201, 207, 213, 215, 235, 238, 242, 281, 301, 310, 315, 316, 317, 318, 320, 321, 322, 338, 351, 366, 369, 375, 379, 380, 381, 382, 383, 386, 388, 389, 392, 394, 395, 397, 398, 400, 401, 406, 407, 408, 410, 412, 414, 415, 417, 418, 419, 425, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 506, 507, 508, 510, 512, 520, 521, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 702, 705, 706, 707, 711, 712, 716, 719, 720, 721, 722, 724, 725, 726, 727, 728, 731, 736, 737, 738, 739, 740, 743, 747, 748, 750, 751, 754, 755, 756, 758, 763, 764, 766, 775, 779, 780, 781, 782, 784, 786, 787, 788, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 809, 810, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 885, 887, 888, 889, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 917, 919, 920, 930, 931, 935, 936, 943, 944, 945, 946, 947, 950, 953, 954, 955, 957, 962, 968, 973, 974, 976, 979, 981, 984, 987, 989, 991, 993, 995, 1000, 1001, 1003, 1005, 1007, 1008, 1011, 1022, 1026, 1028], "versionad": [796, 799, 800, 810], "versionchang": 380, "versionwarn": 384, "versu": [8, 10, 31, 56, 97, 109, 110, 130, 132, 136, 138, 140, 153, 159, 166, 169, 177, 208, 214, 218, 228, 233, 234, 248, 253, 255, 276, 278, 289, 291, 324, 329, 331, 335, 336, 337, 338, 341, 342, 407, 411, 414, 417, 502, 532, 554, 608, 629, 637, 656, 657, 664, 666, 672, 673, 674, 675, 780, 796, 801, 821, 831, 860, 895, 896, 903, 904, 908, 976, 983, 987, 988, 993, 1000, 1001, 1002, 1009, 1021, 1038], "vert": [125, 171, 172, 315, 1001], "vertex": [17, 26, 407, 451, 1043], "vertic": [6, 17, 60, 123, 172, 188, 232, 233, 264, 281, 305, 308, 343, 345, 394, 404, 407, 412, 513, 695, 778, 1019], "verticalalign": [12, 26, 39, 40], "vese": 1042, "vesteghem": 1040, "veto": 395, "vettigli": 1039, "vga": 19, "vh": 936, "vi": [6, 8, 375, 697, 1019, 1038, 1041], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 372, 377, 378, 381, 382, 384, 388, 392, 393, 394, 395, 397, 398, 401, 404, 405, 407, 408, 410, 411, 412, 416, 417, 435, 499, 533, 537, 539, 541, 544, 557, 558, 595, 609, 614, 619, 622, 625, 636, 637, 638, 639, 654, 664, 666, 669, 671, 674, 685, 687, 690, 691, 707, 796, 819, 820, 821, 822, 827, 828, 829, 831, 837, 845, 856, 858, 859, 860, 879, 880, 976, 981, 983, 984, 986, 987, 988, 994, 995, 1001, 1002, 1008, 1009, 1012, 1014, 1025, 1030, 1034, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "viacheslav": 1036, "viard": 1041, "vibrantabhi19": 1037, "vicdemand": 127, "vice": [169, 257, 351, 407, 417, 440, 605, 606, 828, 1034], "vicent": [1043, 1044, 1045], "vicpric": 127, "victoireloui": 1044, "victor": [407, 450, 460, 1037, 1040], "victoria": 127, "video": [320, 369, 374, 383, 501, 988, 1012, 1015], "vie": 1036, "viega": 987, "view": [4, 42, 46, 78, 97, 127, 170, 196, 240, 366, 368, 380, 407, 415, 534, 643, 655, 839, 840, 914, 983, 984], "view_init": [170, 220, 222, 224], "viewabl": 380, "vighnesh": [1035, 1036, 1038], "vignesh": 1046, "vigni": 1047, "vijai": [1012, 1033], "vijalapuram": 1038, "vijeth": [1046, 1047], "vijitbenjaronk": [1037, 1038], "vika": [1042, 1044], "vikram": [1036, 1045, 1046], "vikrant": 1044, "vila": [1040, 1042], "vilhelm": [1037, 1038], "villalba": [1035, 1038, 1042], "villanova": [1042, 1043], "villaz\u00f3n": 1042, "villu": 1036, "vil\u00e9m": 1043, "vinayak": [1034, 1035, 1036, 1038, 1039, 1045, 1046], "vincent": [0, 2, 47, 67, 154, 158, 1012, 1030, 1032, 1034, 1035, 1037, 1040, 1045, 1046, 1047], "vineet": 1048, "vineyard": 311, "vinh": [407, 702], "vinh10a": 407, "viniciu": [1042, 1043], "vinit": 1038, "vink": [1041, 1043], "vinod": 1038, "vin\u00edciu": 1038, "viola": [375, 1038], "violat": [25, 338, 388, 392, 394, 633, 923, 994, 1001, 1003], "violet": [102, 1046], "violeta": 1042, "vipin": 407, "viraj": 1038, "virgil": [0, 2, 9, 1030, 1031, 1033], "virgilefritsch": 1030, "virginica": [45, 90, 101, 103, 269, 270, 377, 502, 987, 1021], "viridi": [30, 38, 283, 695], "viridis_r": 261, "virshup": 1047, "virtanen": 1035, "virtual": [381, 397, 411, 1012], "virtualenv": [378, 380, 397], "visag": 1012, "visconti": 1034, "vishaal": [1038, 1039], "vishal": 1045, "vishwakarma": 1044, "visibl": [13, 169, 170, 201, 348, 374, 380, 407, 855, 992, 1035, 1045], "vision": [532, 755, 756, 979, 983, 985, 1003, 1007, 1012, 1031], "visit": [360, 380, 994, 1011], "visual": [3, 4, 9, 13, 16, 20, 25, 30, 32, 43, 46, 49, 52, 57, 60, 61, 66, 80, 85, 91, 94, 95, 97, 99, 102, 104, 106, 116, 117, 125, 127, 128, 130, 134, 135, 147, 159, 164, 166, 170, 172, 183, 190, 199, 201, 217, 220, 221, 224, 225, 227, 230, 233, 239, 240, 243, 250, 253, 254, 256, 257, 261, 262, 265, 267, 269, 270, 276, 288, 292, 293, 298, 300, 303, 305, 309, 310, 315, 317, 326, 342, 369, 372, 376, 378, 386, 387, 404, 409, 411, 412, 413, 414, 436, 439, 443, 444, 452, 470, 494, 500, 502, 505, 508, 512, 520, 530, 532, 539, 562, 564, 569, 629, 631, 656, 687, 690, 695, 696, 698, 699, 700, 716, 724, 779, 786, 797, 798, 801, 802, 813, 814, 815, 816, 817, 818, 825, 856, 860, 864, 868, 869, 871, 875, 876, 877, 879, 899, 901, 902, 904, 905, 913, 932, 982, 984, 985, 990, 991, 993, 994, 997, 1003, 1007, 1009, 1014, 1025, 1033, 1040, 1041, 1042, 1044], "visualis": [95, 98, 105, 236, 542, 797, 798, 801, 813, 814, 815, 816, 817, 990, 1008], "visualize_group": 255, "vitor": 1045, "vivek": [1037, 1038, 1039, 1047], "viz": [270, 387], "vjacheslav": 1034, "vlad": [0, 1, 95, 236, 302, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039], "vladimir": [533, 936, 983, 1040, 1044, 1047], "vlahava": [718, 737, 987], "vlajic": [1041, 1042], "vlasio": [1012, 1037], "vlasovet": 1043, "vlb": 19, "vliet": 1042, "vline": [78, 97, 186, 187, 188, 200, 260, 273, 306], "vlines_": 630, "vlo": 12, "vmax": [30, 51, 82, 95, 98, 105, 154, 157, 178, 183, 190, 215, 233, 249, 255, 301, 338], "vmin": [30, 40, 82, 95, 98, 105, 154, 157, 178, 183, 190, 215, 233, 249, 255, 301, 338], "vnherdeiro": 1040, "vo": [1036, 1044], "voc": 987, "vocabulari": [92, 214, 351, 352, 392, 415, 586, 587, 588, 589, 989, 1014, 1023, 1030, 1032, 1035, 1038, 1041, 1043], "vocabulary_": [353, 415, 579, 586, 589, 1023, 1030], "void": 381, "vol": [27, 159, 183, 266, 377, 407, 472, 557, 558, 626, 633, 643, 662, 683, 684, 794, 824, 836, 977, 989, 990], "voltag": 19, "volum": [0, 66, 79, 148, 156, 375, 377, 407, 409, 471, 532, 766, 983, 1002, 1012], "volume11": 407, "volume2": 674, "volume7": [664, 665], "volunt": 388, "voluntari": 351, "von": [407, 450, 460, 689, 1007, 1037, 1038], "voronoi": [46, 66, 407], "voss": 1038, "vote": [110, 112, 117, 131, 132, 133, 134, 136, 166, 195, 281, 342, 394, 395, 406, 499, 553, 554, 555, 558, 562, 563, 567, 568, 655, 827, 841, 842, 847, 849, 988, 990, 1009, 1010, 1021, 1025, 1030, 1033, 1035, 1040], "votingclassifi": [24, 26, 110, 136, 166, 208, 357, 398, 414, 502, 562, 568, 629, 656, 837, 841, 904, 907, 976, 977, 1009, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1048], "votingregressor": [135, 398, 414, 567, 977, 1039, 1040, 1041, 1044, 1047, 1048], "votingregressorifittedvotingregressor": 135, "voxel": [46, 66, 583], "vp": 1012, "vq": [48, 58], "vqean3": [1038, 1039], "vredevoogd": [1032, 1033], "vrigazov": 1045, "vrishank": [1037, 1038], "vs_buildtool": 378, "vstack": [12, 26, 57, 65, 154, 155, 181, 245, 249, 283, 296, 343, 629, 988, 1038], "vstolbunov": 1035, "vt": 548, "vufg": 1038, "vukolov": [1038, 1039], "vuw": 528, "vvz2010": 979, "vx": 37, "vya": [1038, 1039, 1040], "vyom": [1045, 1046], "vz2010": 979, "v\u00e1zquez": 1033, "v\u0103n": 1045, "w": [6, 12, 14, 30, 34, 40, 42, 45, 48, 58, 64, 101, 104, 148, 163, 198, 203, 216, 235, 236, 245, 246, 247, 250, 251, 271, 302, 318, 319, 342, 343, 346, 353, 362, 367, 375, 377, 386, 401, 407, 408, 412, 414, 415, 419, 424, 430, 435, 463, 467, 470, 472, 480, 481, 482, 521, 536, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 586, 587, 589, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 691, 697, 722, 723, 753, 796, 810, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 841, 842, 845, 846, 849, 850, 856, 857, 892, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 933, 938, 983, 987, 991, 992, 997, 999, 1001, 1002, 1019, 1023, 1040, 1044, 1045, 1046, 1047], "w0": 92, "w1": [92, 414, 655], "w1992": 414, "w2": 414, "w3": 414, "w_": [412, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 983, 987, 989, 992], "w_0": 983, "w_1": [414, 983, 991], "w_1x_1": 991, "w_2": [414, 983, 991], "w_2x_2": 991, "w_3": 983, "w_4": 983, "w_5": 983, "w_i": [414, 978, 987], "w_ij": 658, "w_init": [419, 531], "w_intercept": [899, 900], "w_j": [644, 650, 987, 1001], "w_k": [407, 414, 983], "w_l": 983, "w_mx_m": 991, "w_n": 414, "w_new": 412, "w_p": 983, "w_pad": [95, 120, 357], "w_x_1": [899, 900], "w_x_n": [899, 900], "wa": [0, 4, 8, 14, 27, 40, 70, 71, 80, 86, 92, 129, 132, 148, 160, 169, 175, 203, 224, 238, 251, 254, 256, 258, 260, 266, 267, 278, 301, 310, 315, 316, 320, 327, 328, 351, 353, 360, 362, 366, 375, 377, 378, 380, 384, 385, 394, 397, 398, 401, 403, 404, 407, 410, 411, 415, 419, 431, 438, 439, 440, 441, 443, 444, 445, 447, 448, 452, 455, 458, 462, 466, 467, 472, 480, 481, 482, 483, 513, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 662, 674, 675, 683, 684, 686, 687, 690, 711, 726, 727, 780, 781, 784, 794, 795, 796, 799, 800, 810, 822, 824, 836, 843, 846, 848, 851, 855, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 896, 897, 930, 931, 954, 975, 976, 977, 986, 987, 990, 993, 997, 1000, 1003, 1007, 1014, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wadawson": 1034, "wadsworth": [907, 908, 1003], "waelbenamara": 1041, "wagner": 1044, "wai": [0, 4, 17, 27, 50, 60, 71, 74, 116, 123, 128, 130, 148, 158, 169, 171, 172, 200, 203, 204, 214, 217, 230, 231, 234, 235, 238, 239, 255, 260, 267, 269, 305, 306, 318, 320, 321, 362, 366, 367, 368, 374, 376, 378, 379, 382, 383, 388, 389, 394, 395, 397, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 422, 441, 442, 449, 450, 451, 457, 458, 460, 461, 467, 494, 553, 554, 561, 570, 587, 597, 598, 609, 630, 664, 665, 674, 675, 676, 697, 702, 704, 715, 733, 734, 751, 752, 754, 760, 771, 775, 785, 792, 820, 828, 845, 866, 872, 877, 883, 909, 910, 958, 961, 976, 977, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1007, 1008, 1011, 1012, 1014, 1022, 1023, 1030, 1032, 1038, 1043, 1044], "waijean": 1043, "wainwright": [719, 720, 721], "waist": 377, "wait": [17, 378, 380, 384, 394, 664, 665, 666, 674, 676, 1042], "waithera": 1040, "wal": 12, "waldo": 320, "wale": 127, "walk": [407, 413, 1033], "walker": 1034, "wall": 407, "wallach": [1034, 1035], "walli": 1038, "wallygauz": 1038, "walsh": [248, 1042, 1044], "walt": [1033, 1034, 1038], "walter": 1036, "walton": 320, "wan": 1038, "wang": [412, 534, 677, 687, 691, 723, 753, 983, 984, 987, 1033, 1035, 1036, 1037, 1038, 1042, 1045, 1046, 1048], "wangz10": 1035, "want": [0, 4, 12, 20, 24, 25, 26, 55, 64, 71, 148, 164, 169, 199, 200, 201, 235, 238, 251, 260, 274, 278, 286, 301, 330, 335, 351, 362, 366, 367, 368, 378, 379, 381, 382, 384, 385, 386, 392, 393, 394, 395, 397, 398, 401, 405, 406, 407, 408, 409, 414, 415, 416, 498, 501, 502, 508, 533, 547, 652, 653, 654, 656, 657, 664, 666, 672, 673, 674, 761, 845, 848, 864, 871, 892, 899, 976, 983, 986, 987, 988, 991, 993, 997, 998, 1002, 1007, 1008, 1014, 1022, 1030, 1044], "ward": [0, 2, 14, 21, 36, 39, 40, 41, 42, 44, 46, 52, 53, 54, 56, 62, 68, 166, 172, 224, 415, 439, 443, 461, 528, 852, 1009, 1030, 1033, 1035], "ward__n_clust": 54, "ward_tre": [54, 439, 443, 1030, 1034], "wardagglom": 1035, "wardagglomer": 1033, "wardclust": 1033, "wareh": 731, "warm": [383, 394, 529, 535, 541, 543, 544, 608, 651, 657, 664, 665, 666, 674, 675, 676, 983, 1008, 1040, 1042, 1044], "warm_start": [115, 155, 192, 318, 382, 386, 394, 414, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 608, 644, 646, 647, 650, 656, 658, 660, 664, 665, 666, 667, 674, 675, 676, 678, 794, 795, 848, 856, 857, 993, 1010, 1025, 1030, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1044, 1046], "warn": [44, 62, 72, 199, 214, 235, 263, 283, 300, 301, 309, 366, 367, 369, 380, 383, 384, 385, 394, 401, 408, 415, 494, 536, 538, 545, 548, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 569, 570, 571, 572, 573, 574, 576, 600, 634, 691, 710, 711, 726, 727, 735, 780, 781, 784, 849, 863, 864, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 926, 936, 944, 953, 957, 973, 974, 976, 987, 997, 1021, 1030, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "warn_for": 780, "warn_on_dtyp": 1039, "warn_when_not_sort": 854, "warner": [12, 1045, 1046], "warshal": [686, 984], "warshaw": 1036, "warut": [1037, 1038], "wase": 1047, "washington": [11, 158, 220, 248, 288, 296], "wasn": [70, 235, 1039], "waspa": 536, "wast": [117, 386, 411, 412, 976], "watanab": 1047, "watch": [13, 367], "watchtheblur": 1042, "water": 11, "waterburi": [1038, 1039], "waterland": 1033, "waterponei": [1036, 1037], "watson": [311, 408], "wattai": 1045, "wav": 374, "wave": [193, 380, 986], "waveform": 40, "wavelet": [14, 104, 412], "wavfil": 374, "waweru": 1047, "wb": 17, "wchathura": 1045, "wclf": 340, "wconnel": 1041, "wdbc": [148, 377], "wderos": 1041, "wdevazelh": 1038, "wdisp": 340, "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 24, 25, 26, 27, 30, 32, 34, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 58, 62, 64, 65, 66, 70, 71, 72, 73, 75, 78, 80, 81, 82, 86, 89, 90, 92, 95, 96, 97, 98, 100, 102, 103, 105, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 134, 135, 138, 143, 144, 145, 147, 148, 151, 153, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 182, 183, 185, 187, 188, 190, 192, 194, 196, 199, 200, 201, 202, 203, 205, 207, 208, 211, 212, 213, 214, 215, 217, 220, 221, 224, 225, 228, 229, 231, 232, 233, 235, 236, 238, 239, 241, 242, 245, 246, 247, 248, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 274, 278, 281, 283, 285, 286, 288, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 346, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 398, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 448, 467, 468, 469, 470, 471, 472, 473, 474, 499, 521, 529, 530, 532, 535, 543, 544, 547, 559, 560, 561, 567, 568, 580, 581, 587, 609, 615, 625, 630, 631, 636, 638, 649, 653, 656, 657, 664, 666, 671, 672, 673, 674, 675, 690, 709, 716, 718, 723, 743, 753, 761, 778, 802, 818, 820, 841, 842, 843, 845, 847, 848, 849, 850, 851, 862, 871, 872, 873, 879, 884, 885, 887, 888, 889, 890, 892, 895, 899, 903, 951, 953, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "wea": 405, "weak": [85, 122, 125, 203, 217, 266, 411, 555, 556, 557, 562, 563, 564, 628, 990, 1012, 1046], "weak_learn": 111, "weak_learners_info": 111, "weak_learners_misclassification_error": 111, "weaker": [75, 559, 560], "weakest": [356, 1003], "weaklearn": 551, "weakli": 66, "weather": [4, 13, 156, 170, 983, 987], "web": [148, 374, 375, 377, 380, 383, 388, 407, 415, 519, 892, 987, 997, 1026, 1030], "weber": 1037, "weblog": 407, "webpag": [17, 175, 380], "websit": [374, 375, 377, 380, 395, 991, 1001, 1011, 1012, 1023, 1031, 1032, 1033], "wed": [4, 127, 170], "weed": 602, "week": [4, 13, 127, 322, 379, 380, 395, 494, 1012, 1044], "weekdai": [4, 170], "weekday_co": 4, "weekday_sin": 4, "weekend": [4, 127], "weezel": [1045, 1046], "wegelin": 410, "wehenkel": [414, 555, 556, 563, 564, 909, 910], "wei": [0, 2, 1001, 1030, 1031, 1034, 1035, 1036, 1037, 1039, 1043, 1046], "weibul": 309, "weidemann": 1044, "weigh": [411, 1037], "weight": [6, 11, 14, 15, 19, 24, 32, 54, 70, 105, 124, 133, 134, 140, 144, 145, 155, 156, 164, 166, 169, 177, 183, 188, 190, 199, 203, 204, 206, 209, 210, 211, 213, 214, 215, 217, 218, 235, 240, 245, 249, 258, 263, 267, 269, 286, 295, 298, 299, 300, 302, 303, 310, 312, 315, 318, 322, 325, 326, 333, 338, 340, 342, 343, 344, 346, 347, 349, 351, 352, 353, 360, 362, 376, 377, 389, 392, 394, 407, 409, 410, 412, 413, 416, 418, 424, 430, 435, 438, 441, 442, 444, 445, 447, 451, 457, 458, 461, 462, 463, 465, 467, 472, 480, 481, 482, 494, 513, 522, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 587, 588, 589, 591, 595, 600, 601, 608, 609, 626, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 687, 691, 695, 696, 698, 700, 701, 705, 706, 707, 710, 711, 714, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 731, 732, 733, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 755, 756, 766, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 861, 864, 878, 879, 880, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 924, 925, 938, 962, 968, 977, 978, 983, 984, 986, 987, 989, 990, 991, 992, 994, 997, 1000, 1001, 1002, 1003, 1008, 1009, 1014, 1021, 1023, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "weight_concentration_": 794, "weight_concentration_prior": [245, 251, 794, 986], "weight_concentration_prior_": 794, "weight_concentration_prior_typ": [245, 251, 794, 986, 1036], "weight_vector": [1030, 1040], "weighted_acc": 398, "weighted_mod": 389, "weighted_n_node_sampl": 360, "weightedmetaregressor": 235, "weights_": [245, 794, 795, 1044], "weights_handl": 212, "weights_init": 795, "weijiadu": 1044, "weinberg": 415, "weinsberg": 1030, "weinstein": 1031, "weisberg": 983, "weiss": [0, 2, 247, 407, 689, 1030], "weitzenfeld": 1012, "weka": 836, "welch": 1036, "welcom": [369, 379, 380, 388, 395, 1008], "welind": 1030, "well": [0, 4, 9, 12, 20, 24, 25, 27, 34, 39, 48, 53, 57, 58, 62, 70, 78, 86, 111, 112, 114, 117, 122, 124, 130, 132, 148, 156, 158, 168, 169, 170, 171, 175, 183, 187, 197, 199, 200, 201, 203, 207, 220, 221, 222, 225, 228, 232, 235, 238, 247, 260, 267, 269, 271, 275, 278, 283, 286, 288, 289, 290, 312, 316, 317, 318, 319, 320, 321, 322, 342, 346, 351, 352, 353, 362, 375, 377, 379, 380, 384, 386, 388, 389, 392, 393, 394, 395, 405, 407, 409, 411, 412, 414, 416, 418, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 457, 458, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 698, 719, 720, 721, 782, 785, 789, 792, 794, 795, 796, 799, 800, 810, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 934, 935, 955, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 997, 1000, 1001, 1003, 1004, 1007, 1008, 1012, 1022, 1023, 1030, 1031, 1034, 1036, 1037, 1038, 1041, 1048], "wen": 1045, "wenbo": [1040, 1042], "wendi": 1040, "wendling": 1037, "weng": 1002, "wenhao": [259, 1038, 1039], "wenhaoz": 259, "wenhua": 1036, "wenjian": 1036, "wenliwyan": 1041, "went": [384, 987], "were": [0, 4, 32, 70, 71, 74, 80, 81, 117, 121, 124, 127, 145, 148, 156, 164, 199, 200, 203, 229, 238, 269, 271, 301, 302, 310, 316, 317, 319, 320, 321, 322, 328, 342, 351, 353, 360, 362, 374, 375, 377, 380, 381, 384, 392, 394, 398, 404, 408, 414, 415, 462, 465, 466, 494, 559, 560, 586, 589, 600, 799, 800, 815, 823, 896, 897, 976, 979, 987, 988, 1003, 1022, 1023, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "weren": [351, 873, 1039], "werman": 1042, "werneck": 1038, "werner": [1037, 1042], "werror": 388, "wersd\u00f6rfer": 1032, "weslei": [588, 727], "westermann": [0, 370, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "western": 415, "weston": [5, 412, 533, 591, 592, 895], "westov": 1038, "wetter": 170, "wfc": 12, "wget": 388, "wh": [412, 536, 538, 545], "wh_i": 412, "what": [0, 4, 9, 12, 13, 40, 45, 52, 53, 86, 96, 100, 120, 168, 169, 188, 205, 207, 215, 230, 235, 242, 301, 351, 353, 356, 362, 367, 375, 378, 380, 381, 382, 384, 386, 388, 393, 394, 395, 396, 407, 413, 414, 415, 501, 534, 586, 587, 589, 644, 650, 694, 884, 885, 887, 888, 889, 890, 907, 908, 909, 910, 986, 987, 988, 990, 1003, 1008, 1014, 1030, 1037], "whatnot": 351, "whats_miss": 384, "whats_new": [384, 388], "wheel": [378, 380, 384, 397, 1040, 1042, 1044], "wheeler": [1041, 1042], "wheelhouse_upload": 384, "when": [0, 4, 9, 10, 11, 13, 20, 24, 25, 26, 27, 34, 39, 40, 43, 56, 60, 67, 70, 71, 72, 78, 80, 81, 86, 95, 98, 99, 100, 102, 114, 117, 120, 121, 122, 124, 127, 128, 132, 133, 134, 145, 151, 163, 168, 169, 170, 171, 172, 178, 179, 183, 188, 190, 192, 196, 199, 201, 203, 204, 215, 228, 229, 230, 234, 235, 242, 246, 248, 256, 259, 260, 261, 262, 263, 267, 269, 270, 278, 283, 285, 286, 289, 290, 291, 305, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 322, 327, 328, 330, 338, 341, 342, 346, 351, 352, 353, 356, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 397, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 423, 430, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 513, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 699, 700, 702, 703, 705, 706, 710, 711, 714, 724, 725, 726, 727, 729, 731, 732, 735, 743, 745, 748, 751, 752, 754, 758, 760, 764, 765, 766, 768, 771, 775, 778, 779, 780, 781, 782, 784, 785, 786, 788, 789, 790, 792, 794, 795, 796, 799, 800, 801, 802, 810, 814, 815, 818, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 885, 886, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 918, 919, 920, 926, 930, 934, 935, 936, 937, 939, 940, 945, 948, 955, 956, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1008, 1011, 1012, 1014, 1020, 1021, 1022, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "whenev": [158, 168, 362, 374, 388, 394, 397, 405, 480, 481, 482, 494, 626, 628, 978, 986, 1008, 1040], "where": [8, 11, 12, 14, 17, 19, 20, 24, 25, 26, 32, 53, 55, 57, 80, 86, 92, 95, 98, 104, 105, 111, 113, 115, 117, 121, 122, 124, 127, 129, 145, 148, 151, 157, 160, 164, 169, 178, 183, 191, 200, 203, 208, 209, 210, 212, 216, 217, 220, 222, 223, 228, 229, 232, 235, 236, 238, 240, 251, 256, 257, 260, 262, 266, 267, 269, 271, 272, 278, 281, 302, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 326, 327, 336, 342, 346, 347, 348, 351, 356, 357, 362, 366, 367, 368, 374, 376, 377, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 395, 397, 398, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 430, 435, 442, 445, 446, 450, 459, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 485, 494, 524, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 607, 608, 609, 611, 613, 617, 620, 621, 623, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 686, 689, 690, 691, 694, 705, 709, 710, 714, 722, 726, 727, 728, 736, 752, 760, 765, 766, 767, 770, 778, 779, 780, 781, 784, 785, 789, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 862, 869, 872, 874, 875, 878, 879, 885, 887, 893, 894, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 927, 928, 929, 930, 936, 944, 947, 972, 976, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1008, 1014, 1015, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wherea": [13, 34, 48, 53, 67, 80, 128, 213, 238, 261, 262, 263, 269, 286, 310, 342, 346, 347, 368, 395, 411, 414, 442, 444, 563, 656, 657, 798, 814, 827, 979, 986, 988, 990, 997, 1003, 1043, 1048], "wherein": 394, "whether": [8, 10, 13, 71, 109, 128, 154, 157, 159, 169, 170, 199, 203, 217, 221, 229, 235, 258, 305, 360, 362, 367, 375, 378, 379, 380, 382, 384, 385, 386, 394, 398, 407, 408, 409, 411, 412, 414, 416, 419, 438, 440, 449, 451, 452, 457, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 489, 490, 494, 495, 501, 506, 507, 512, 520, 525, 529, 530, 535, 536, 537, 538, 540, 543, 544, 546, 550, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 579, 586, 587, 588, 589, 595, 600, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 627, 629, 630, 631, 633, 634, 635, 636, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 688, 692, 693, 695, 696, 698, 700, 702, 710, 739, 758, 764, 771, 775, 779, 786, 796, 799, 800, 801, 802, 810, 814, 815, 818, 819, 822, 823, 825, 828, 830, 833, 834, 835, 836, 838, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 856, 857, 863, 880, 886, 899, 900, 901, 902, 903, 904, 905, 911, 913, 917, 919, 920, 921, 923, 935, 936, 943, 944, 960, 971, 975, 976, 977, 982, 983, 987, 992, 993, 999, 1001, 1002, 1012, 1037, 1038, 1039, 1047], "whi": [169, 171], "which": [0, 4, 7, 10, 12, 13, 14, 15, 17, 19, 20, 21, 25, 26, 27, 34, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 58, 65, 67, 70, 71, 72, 75, 78, 80, 81, 86, 90, 92, 97, 99, 100, 105, 111, 114, 115, 116, 117, 121, 123, 124, 127, 128, 130, 131, 132, 133, 134, 135, 138, 143, 145, 147, 148, 151, 152, 156, 157, 158, 163, 164, 168, 169, 170, 172, 175, 178, 179, 183, 188, 192, 199, 200, 201, 203, 205, 207, 213, 215, 216, 217, 220, 221, 222, 224, 228, 229, 232, 233, 234, 235, 236, 238, 239, 245, 246, 250, 251, 254, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 275, 278, 281, 283, 288, 289, 290, 300, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 338, 342, 346, 348, 351, 352, 353, 356, 360, 362, 366, 367, 368, 372, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 485, 521, 529, 530, 531, 532, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 577, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 613, 615, 617, 620, 625, 626, 627, 628, 630, 631, 632, 638, 640, 641, 642, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 659, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 705, 707, 714, 715, 717, 718, 720, 722, 723, 731, 732, 733, 734, 739, 740, 743, 753, 755, 775, 776, 777, 778, 779, 780, 786, 794, 795, 796, 799, 800, 801, 802, 804, 806, 810, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 856, 859, 863, 866, 870, 872, 873, 874, 877, 878, 879, 880, 881, 883, 891, 892, 894, 895, 896, 899, 901, 904, 905, 907, 908, 909, 910, 911, 915, 928, 931, 935, 936, 938, 943, 944, 945, 947, 955, 956, 959, 962, 968, 971, 976, 977, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1012, 1014, 1016, 1018, 1021, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "whichev": [407, 414, 444, 542, 559, 560, 631, 648, 652, 654, 662, 680, 681, 695], "whidou": 1043, "while": [0, 4, 7, 8, 10, 12, 17, 20, 24, 27, 34, 37, 39, 43, 44, 48, 55, 62, 66, 70, 73, 75, 92, 99, 100, 111, 114, 117, 118, 122, 127, 129, 132, 148, 152, 157, 159, 160, 163, 168, 169, 170, 171, 175, 178, 180, 183, 188, 193, 199, 201, 203, 215, 228, 231, 232, 235, 236, 246, 247, 251, 254, 255, 259, 260, 261, 263, 267, 268, 269, 270, 271, 273, 285, 305, 306, 307, 310, 311, 312, 315, 318, 321, 322, 335, 338, 351, 353, 360, 362, 367, 372, 373, 374, 375, 376, 379, 380, 382, 384, 385, 386, 388, 389, 392, 394, 395, 401, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 442, 462, 465, 466, 481, 483, 494, 519, 530, 550, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 573, 580, 586, 587, 588, 589, 592, 595, 600, 604, 632, 641, 644, 645, 647, 654, 655, 656, 657, 674, 675, 676, 677, 706, 727, 751, 771, 775, 785, 791, 794, 796, 797, 798, 801, 802, 803, 804, 805, 806, 810, 811, 812, 814, 818, 820, 821, 822, 823, 824, 826, 834, 845, 847, 849, 850, 851, 858, 859, 860, 861, 862, 875, 887, 892, 897, 899, 900, 907, 908, 909, 910, 915, 940, 976, 977, 979, 980, 981, 983, 984, 986, 987, 988, 989, 990, 993, 994, 997, 999, 1002, 1003, 1007, 1008, 1014, 1020, 1021, 1022, 1023, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "whilst": [115, 222], "whisker": 10, "white": [58, 60, 95, 156, 169, 213, 220, 289, 302, 307, 330, 337, 412, 415, 623, 1003, 1030, 1033, 1036, 1040, 1044], "whitekernel": [151, 156, 157, 417, 609, 610, 612, 1041], "whiten": [6, 95, 96, 97, 287, 412, 419, 531, 532, 539, 877, 879, 997, 1019, 1034, 1036, 1044, 1045, 1048], "whiten_solv": [419, 531, 1045], "whitening_": 531, "whitespac": 415, "whl": 384, "who": [0, 70, 169, 367, 369, 375, 380, 387, 395, 397, 841, 842, 843, 845, 847, 849, 850, 851, 1005, 1007, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "whole": [10, 50, 74, 127, 135, 164, 200, 238, 257, 264, 338, 342, 356, 366, 380, 392, 393, 408, 410, 414, 417, 447, 481, 536, 553, 554, 555, 556, 561, 562, 563, 564, 568, 683, 684, 796, 799, 800, 810, 823, 834, 835, 836, 837, 838, 976, 987, 997, 1023, 1038, 1040], "whose": [55, 79, 80, 81, 148, 156, 199, 336, 375, 388, 389, 394, 405, 407, 409, 414, 416, 417, 420, 435, 436, 437, 446, 459, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 513, 532, 536, 538, 539, 542, 545, 547, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 638, 669, 693, 716, 796, 803, 810, 824, 845, 864, 891, 892, 935, 966, 967, 981, 988, 992, 993, 994, 1002, 1033, 1038, 1039, 1041, 1044], "why": [27, 37, 52, 95, 111, 117, 127, 169, 171, 175, 188, 257, 260, 278, 351, 352, 380, 388, 394, 407, 409, 412, 418, 442, 445, 449, 987, 989, 1002, 1018, 1021, 1033], "wick": 1042, "wide": [27, 60, 61, 90, 114, 232, 306, 392, 407, 412, 415, 976, 983, 1007, 1012, 1023, 1030, 1032, 1046], "widehat": 154, "wider": [13, 201, 415, 912, 983], "widetild": 1003, "width": [8, 10, 13, 45, 53, 80, 90, 97, 98, 103, 104, 105, 114, 120, 121, 124, 134, 144, 153, 159, 182, 242, 245, 259, 286, 305, 307, 308, 311, 317, 320, 335, 377, 408, 436, 437, 450, 462, 491, 492, 504, 519, 584, 864, 912, 997, 1001, 1003, 1020, 1021, 1038], "wiesel": [409, 420, 473], "wignal": [1033, 1034, 1040, 1041], "wijewardena": [0, 1033, 1034, 1035], "wiki": [17, 24, 386, 388, 593, 634, 666, 669, 693, 703, 841, 842, 847, 848, 849, 850, 877, 893, 907, 908, 983, 1003], "wikic": 979, "wikipedia": [3, 16, 24, 166, 388, 406, 407, 593, 605, 606, 634, 654, 666, 669, 680, 681, 693, 702, 703, 705, 707, 710, 714, 716, 723, 726, 727, 728, 731, 732, 735, 740, 753, 780, 782, 783, 785, 786, 789, 790, 841, 842, 847, 848, 849, 850, 877, 893, 907, 908, 979, 983, 987, 990, 999, 1003, 1009, 1023, 1030, 1037], "wikipedia_principal_eigenvector": [16, 17, 1009], "wikipediadet2017": 987, "wil": 1042, "wild": [6, 373, 491, 492, 506, 507, 1019, 1025, 1030], "wilderness_area": 238, "wildli": [288, 986], "wilei": [377, 977], "wilhelm": [216, 1034, 1036, 1040], "wilk": 405, "wilksch": 1045, "willamett": 311, "willard": 1042, "willdarnel": 1040, "willduan": 1037, "william": [148, 375, 377, 417, 608, 609, 612, 617, 620, 637, 979, 987, 991, 1037, 1038, 1039, 1040, 1045, 1046], "williamson": 1040, "willing": [168, 257], "willocx": 1040, "willpeppo": 1042, "wilson": [80, 377, 1030, 1033], "wiman": 1030, "wimld": 1044, "winata": [1040, 1042], "wind": [170, 988], "windber": 1041, "windiana42": 1046, "window": [19, 329, 375, 380, 382, 383, 415, 1007, 1030, 1033, 1037, 1041, 1043, 1044, 1048], "windowsapp": 397, "windowserror": 1046, "windspe": [4, 170], "wine": [9, 241, 310, 311, 373, 508, 1025], "wine_review": 311, "wineri": 311, "winn": 987, "winter": [4, 13], "winterman": 1031, "wip": [380, 388, 397], "wipf": [643, 983], "wire": [386, 532, 539], "wiryadi": 1042, "wisc": [148, 377, 894], "wisconsin": [148, 172, 373, 498, 995, 1025, 1035], "wise": [7, 26, 48, 159, 200, 228, 270, 305, 352, 366, 394, 405, 407, 411, 412, 416, 456, 529, 532, 535, 539, 543, 544, 547, 548, 551, 553, 554, 557, 558, 590, 593, 594, 596, 597, 598, 604, 638, 650, 698, 751, 827, 876, 889, 890, 893, 960, 962, 963, 964, 965, 968, 979, 981, 983, 987, 988, 1001, 1008, 1030, 1035, 1038, 1039, 1040], "wish": [374, 380, 387, 389, 397, 407, 936, 1015, 1023, 1037], "wishart": 794, "wissen": 448, "with_cent": [877, 889], "with_error": 699, "with_mean": [385, 879, 890, 997, 1038, 1043], "with_scal": [877, 889], "with_std": [879, 890, 997, 1038], "with_traceback": [569, 570, 571, 572, 573, 574, 575, 576], "withheld": 411, "within": [4, 20, 60, 116, 118, 119, 122, 127, 131, 145, 147, 148, 195, 200, 201, 211, 217, 235, 239, 258, 259, 263, 273, 305, 306, 317, 336, 339, 342, 346, 353, 362, 366, 375, 380, 384, 389, 392, 394, 395, 398, 404, 405, 406, 407, 408, 411, 413, 414, 418, 442, 446, 459, 461, 462, 464, 467, 472, 513, 547, 565, 566, 567, 568, 591, 592, 630, 690, 694, 697, 708, 722, 778, 794, 795, 801, 802, 814, 815, 823, 824, 839, 840, 841, 842, 847, 849, 850, 851, 858, 859, 860, 872, 880, 884, 885, 887, 888, 889, 890, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 981, 983, 984, 990, 993, 997, 1000, 1002, 1003, 1008, 1012, 1014, 1018, 1021, 1023, 1032, 1033, 1037, 1038, 1043, 1044, 1046, 1047, 1048], "without": [4, 5, 13, 14, 24, 36, 42, 44, 47, 52, 55, 56, 62, 66, 67, 68, 75, 100, 117, 122, 123, 126, 127, 129, 132, 139, 144, 148, 158, 166, 168, 169, 170, 183, 188, 207, 228, 232, 235, 236, 238, 239, 241, 254, 261, 265, 267, 278, 284, 285, 286, 292, 293, 294, 295, 297, 305, 306, 310, 312, 315, 342, 346, 352, 368, 375, 376, 378, 380, 381, 382, 384, 385, 386, 389, 392, 393, 394, 398, 401, 407, 408, 412, 414, 415, 416, 417, 432, 437, 439, 444, 456, 467, 472, 494, 502, 513, 530, 532, 553, 554, 561, 577, 578, 609, 625, 629, 632, 637, 657, 690, 698, 778, 799, 800, 801, 808, 810, 824, 825, 841, 848, 852, 858, 859, 862, 865, 868, 869, 871, 875, 876, 877, 879, 884, 899, 915, 956, 976, 977, 979, 981, 983, 984, 987, 990, 993, 997, 1001, 1002, 1003, 1007, 1008, 1009, 1014, 1015, 1023, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "withstrok": 40, "witten": 411, "wittenau": 1035, "wk": 703, "wl": 378, "wminkowski": [846, 1042, 1044], "wmt": 12, "wnl": 415, "wo": 415, "wojdyla": [1045, 1046], "wolberg": [148, 377], "wolf": [10, 15, 29, 34, 35, 77, 78, 81, 82, 83, 166, 292, 471, 473, 477, 478, 510, 547, 981, 1009, 1037], "wolframalpha": 1040, "wolodzko": 1043, "wolosonovich": 1038, "wolpert": [414, 565, 566], "wompner": 1038, "won": [132, 301, 352, 384, 407, 466, 494, 625, 626, 628, 685, 702, 715, 733, 734, 752, 754, 792, 986, 997, 1035, 1036, 1041], "wonder": [351, 378], "wonpil": 983, "wood": 1039, "woolam": [325, 326, 327, 330, 1030], "word": [8, 15, 19, 70, 151, 232, 236, 338, 352, 353, 366, 375, 376, 380, 382, 385, 394, 404, 407, 409, 410, 411, 412, 451, 509, 521, 532, 534, 539, 586, 587, 589, 694, 828, 838, 896, 981, 985, 989, 992, 997, 1000, 1001, 1012, 1021, 1022, 1030, 1038], "word_col": 19, "word_scor": 19, "word_token": 415, "wordnetlemmat": 415, "work": [0, 4, 9, 13, 17, 32, 44, 45, 48, 52, 67, 78, 114, 121, 135, 148, 157, 158, 168, 169, 170, 188, 203, 216, 235, 245, 247, 258, 278, 289, 290, 311, 316, 318, 319, 321, 340, 352, 353, 362, 367, 368, 369, 374, 375, 378, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 395, 403, 404, 405, 407, 408, 409, 412, 414, 415, 416, 419, 420, 421, 422, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 458, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 502, 506, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 693, 706, 739, 771, 775, 776, 777, 778, 785, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 936, 940, 955, 976, 977, 979, 981, 982, 983, 984, 986, 987, 989, 990, 993, 994, 997, 1000, 1001, 1007, 1008, 1012, 1014, 1015, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "work_directori": 1023, "workabl": 385, "workaround": [311, 380, 796, 810], "workclass": [322, 494], "worker": [367, 394, 415, 953, 954, 955, 1045], "workflow": [380, 383, 384, 393, 411, 1011], "working_memori": [366, 367, 466, 778, 897, 1038], "workingdai": [4, 170], "workload": [955, 1007], "workshop": [0, 407, 415, 834, 989, 1006], "workspac": 1023, "workstat": 388, "world": [55, 70, 74, 169, 203, 224, 238, 351, 366, 369, 373, 377, 407, 412, 415, 952, 977, 987, 989, 1006, 1008, 1012, 1017, 1025, 1030], "worldwid": 1012, "wornbb": 1041, "worri": [54, 984, 1015], "wors": [4, 86, 111, 152, 170, 205, 260, 268, 281, 310, 362, 405, 407, 417, 430, 463, 480, 481, 482, 550, 552, 554, 556, 558, 560, 563, 566, 568, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 676, 677, 678, 703, 719, 720, 721, 725, 782, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 987, 997, 1039], "worse_prob": 260, "worsen": 122, "worst": [148, 199, 311, 377, 407, 442, 445, 706, 726, 727, 780, 781, 784, 789, 790, 824, 987, 1012, 1030, 1043], "worth": [55, 120, 170, 199, 380, 388, 1012], "worthwhil": [72, 394], "would": [0, 4, 6, 9, 13, 26, 27, 32, 45, 53, 55, 58, 70, 78, 80, 81, 86, 92, 100, 111, 124, 148, 151, 156, 157, 169, 170, 171, 172, 175, 183, 189, 199, 200, 201, 214, 217, 228, 235, 238, 247, 256, 260, 261, 266, 268, 270, 278, 283, 289, 301, 305, 306, 310, 311, 318, 321, 328, 338, 342, 346, 347, 351, 353, 360, 362, 366, 375, 376, 380, 381, 382, 386, 388, 389, 392, 393, 394, 395, 398, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 430, 444, 463, 466, 480, 481, 482, 487, 525, 530, 532, 534, 539, 542, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 581, 582, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 676, 677, 698, 700, 706, 710, 711, 718, 753, 775, 779, 782, 786, 796, 798, 810, 824, 832, 833, 842, 850, 857, 884, 885, 887, 888, 889, 890, 891, 892, 897, 899, 900, 902, 905, 907, 908, 909, 910, 944, 947, 976, 977, 980, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 995, 997, 1002, 1007, 1008, 1012, 1014, 1019, 1021, 1023, 1027, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "wp": [415, 655, 669], "wpd": 351, "wprd": 415, "wrap": [95, 116, 124, 283, 374, 382, 394, 431, 506, 655, 674, 825, 883, 977, 987, 990, 1002, 1007, 1030, 1035, 1038, 1040, 1041, 1043, 1045], "wraparound": 381, "wrapper": [27, 283, 386, 389, 411, 417, 542, 618, 666, 669, 739, 899, 983, 1003, 1007, 1034, 1042], "wrath": 408, "write": [8, 17, 164, 235, 351, 366, 367, 374, 378, 379, 380, 384, 385, 386, 388, 389, 392, 394, 403, 408, 412, 415, 998, 1008, 1023, 1031, 1043, 1047], "writer": 351, "written": [5, 7, 29, 35, 51, 53, 89, 98, 146, 166, 206, 254, 287, 318, 325, 326, 367, 377, 380, 381, 382, 386, 388, 392, 394, 406, 408, 413, 485, 500, 506, 695, 711, 825, 904, 911, 981, 983, 987, 991, 992, 1001, 1006, 1009, 1014, 1015, 1020, 1023, 1039], "wrong": [60, 199, 289, 351, 362, 377, 380, 382, 415, 502, 723, 753, 790, 987, 993, 1002, 1033, 1035, 1037, 1038, 1039, 1040, 1043, 1047], "wrongli": [199, 338, 1048], "wrote": [132, 375], "ws2001": 979, "wspace": [14, 15, 39, 44, 45, 62, 80, 95, 113, 199, 217, 228, 245, 247, 248, 251, 288, 296, 326, 335], "wstate": 1043, "wtv": 386, "wtw": 386, "wu": [1002, 1034, 1042], "wurp": [1044, 1045], "wuthrich": [199, 217], "ww": 412, "www": [6, 71, 175, 199, 215, 217, 229, 281, 301, 374, 375, 380, 388, 397, 407, 411, 440, 447, 485, 506, 507, 529, 532, 535, 539, 642, 656, 662, 669, 683, 684, 848, 855, 907, 908, 983, 1000, 1019], "www4": [148, 377], "wyseguy7": 1036, "w\u00fcthrich": 405, "x": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 75, 79, 80, 81, 82, 85, 86, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 220, 221, 222, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 373, 374, 375, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 398, 401, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 491, 492, 493, 496, 498, 499, 500, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 708, 709, 722, 729, 732, 739, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 785, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 923, 933, 935, 936, 937, 938, 947, 948, 955, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 976, 977, 978, 979, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1008, 1014, 1018, 1019, 1021, 1022, 1023, 1027, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "x0": [12, 191, 208, 223, 305, 335, 394, 428, 462, 565, 566, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880], "x00": 415, "x006": 1031, "x00a": 415, "x00b": 415, "x00c": 415, "x00d": 415, "x00e": 415, "x00f": 415, "x00g": 415, "x00h": 415, "x00i": 415, "x00l": 415, "x00n": 415, "x00o": 415, "x00r": 415, "x00t": 415, "x00u": 415, "x00z": 415, "x0_cat": [319, 997], "x0_infrequent_sklearn": [319, 997], "x0_label": 305, "x0_rabbit": [319, 997], "x0_str_femal": 872, "x0_str_male": 872, "x0l": 1034, "x1": [12, 85, 91, 113, 123, 154, 211, 223, 305, 335, 382, 394, 428, 462, 507, 565, 566, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 697, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 1022], "x110": 1045, "x1_int_1": 872, "x1_int_2": 872, "x1_int_3": 872, "x1_label": 305, "x2": [85, 91, 113, 123, 154, 211, 382, 408, 586, 627, 697, 1022], "x27": [26, 71, 72, 116, 132, 135, 145, 169, 170, 171, 229, 230, 239, 240, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 327], "x2_tr": 627, "x3": [123, 408, 1022], "x64": 378, "x8": 53, "x86": 378, "x86_64": [383, 397], "x9ft": 415, "x_": [143, 152, 251, 260, 315, 382, 407, 410, 412, 625, 633, 761, 854, 894, 895, 983, 989, 994, 1036], "x_0": [200, 655], "x_1": [95, 143, 154, 196, 200, 410, 412, 414, 417, 611, 623, 655, 872, 899, 900, 983, 989, 991, 997, 1001], "x_1d": 319, "x_1x_2": 997, "x_1x_2x_3": 997, "x_1x_3": 997, "x_2": [143, 154, 196, 412, 414, 415, 417, 611, 623, 983, 991, 997], "x_20": 329, "x_2d": 338, "x_2x_3": 997, "x_3": [143, 997], "x_6": 872, "x_7": 872, "x_a": 309, "x_adult": 322, "x_aniso": [44, 57, 62], "x_approx": 1022, "x_axi": [97, 207, 264], "x_b": 309, "x_bimod": 309, "x_bin": 306, "x_bound": [417, 615], "x_c": [480, 481, 483, 994], "x_calib": 435, "x_california": 164, "x_cardiotocographi": 238, "x_center": 180, "x_check": 920, "x_chisq": 309, "x_cluster": 851, "x_convert": 919, "x_copi": 1041, "x_cu": 403, "x_d": [417, 612], "x_dens": [322, 542], "x_df": 129, "x_diabet": [164, 1018], "x_different_covari": 34, "x_digit": [73, 139, 300, 408, 1018, 1019, 1021], "x_dist_graph": 843, "x_embed": [292, 293, 690, 694, 848, 990], "x_error": 205, "x_errors_larg": 205, "x_featur": [74, 638, 639, 640, 979], "x_filter": 57, "x_fit": 686, "x_fit_": [533, 641], "x_fold": 1018, "x_forestcov": 238, "x_full": [163, 164, 305], "x_full_train": 116, "x_gaussian": 309, "x_hashed_lsa": 352, "x_hat": [529, 535, 543, 544], "x_hetero": 102, "x_homo": 102, "x_i": [13, 80, 115, 143, 169, 200, 318, 346, 407, 412, 413, 414, 417, 612, 613, 617, 620, 621, 623, 834, 835, 838, 978, 979, 983, 989, 990, 991, 997, 1001, 1002, 1003], "x_idx_sort": 1042, "x_imput": 628, "x_indic": 144, "x_inform": 312, "x_inlier": 290, "x_inv": [586, 589], "x_ipca": 99, "x_iri": [265, 1022], "x_isotropic_covari": 34, "x_j": [407, 417, 612, 613, 617, 620, 621, 623, 978, 979, 983, 990, 1002, 1003], "x_k": [410, 412, 981, 990], "x_label": 164, "x_leav": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "x_left_lower_corn": [11, 296, 375, 496], "x_legend": 8, "x_list": 308, "x_loadings_": [480, 481, 482], "x_lognorm": [309, 997], "x_lsa": 352, "x_m": 991, "x_max": [31, 52, 58, 113, 120, 130, 140, 153, 233, 299, 307, 330, 342, 343], "x_max_": 633, "x_mean": 419, "x_mean_": 1042, "x_min": [31, 52, 58, 113, 120, 124, 130, 140, 153, 188, 233, 299, 307, 330, 342, 343], "x_min_": 633, "x_miss": [127, 163, 164], "x_miss_california": 164, "x_miss_diabet": 164, "x_n": [95, 412, 899, 900, 989, 991, 1001], "x_near_unique_categori": 312, "x_new": [56, 408, 412, 416, 431, 440, 441, 443, 445, 447, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 547, 565, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 626, 628, 633, 636, 637, 638, 639, 640, 686, 687, 688, 689, 690, 848, 855, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 891, 892, 999, 1014], "x_new_again": 999, "x_new_count": 1023, "x_new_invers": 999, "x_new_tfidf": 1023, "x_norm_squar": [760, 1035, 1047], "x_normal": 997, "x_np": 403, "x_offset": 180, "x_offset_": [642, 643, 1042], "x_origin": [532, 537, 539, 541, 542, 628, 891, 892], "x_out": [320, 863, 872, 873], "x_outlier": [181, 213, 289, 290, 337], "x_p": [407, 983], "x_pca": 99, "x_plot": [178, 200, 205, 234, 263, 288, 310], "x_plot_ext": 200, "x_plot_scal": 310, "x_po": 281, "x_q": 407, "x_r": [103, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "x_r2": 103, "x_rand": 266, "x_random": 188, "x_reconstruct": [319, 480, 481, 482, 581], "x_reconstructed_kernel_pca": [5, 100], "x_reconstructed_pca": [5, 100], "x_red": 52, "x_reduc": [51, 90, 130, 443, 1022], "x_restor": 51, "x_right": 34, "x_rope": 260, "x_rotations_": [410, 480, 481, 482], "x_scale": [180, 869, 885, 997], "x_scale_": [642, 643, 1042], "x_scaler": 10, "x_score": [290, 480, 481, 482, 483], "x_scores_": [482, 1042], "x_select": 362, "x_shared_covari": 34, "x_shuffl": 312, "x_size": 81, "x_sp": 185, "x_spars": [322, 532, 958, 961], "x_sparse_embed": 564, "x_squared_norm": [248, 458], "x_src": 288, "x_std": [869, 885, 997], "x_std_": 1042, "x_t": [462, 625, 858], "x_test": [5, 6, 7, 8, 10, 13, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 111, 114, 116, 118, 123, 124, 125, 126, 127, 128, 131, 139, 140, 144, 145, 156, 159, 168, 169, 170, 171, 172, 175, 179, 183, 189, 194, 196, 197, 205, 206, 207, 213, 214, 215, 217, 229, 231, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 274, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 328, 329, 337, 351, 356, 358, 359, 360, 362, 366, 374, 382, 385, 393, 408, 411, 414, 436, 468, 469, 470, 471, 472, 473, 474, 507, 556, 557, 558, 565, 566, 695, 696, 698, 700, 825, 827, 830, 848, 856, 857, 859, 873, 909, 910, 977, 987, 989, 990, 991, 993, 997, 1001, 1002, 1003, 1018, 1019, 1021, 1027, 1030], "x_test_df": 242, "x_test_kernel_pca": 100, "x_test_maxab": 997, "x_test_minmax": 997, "x_test_miss": 127, "x_test_no_cf_encod": 312, "x_test_noisi": 5, "x_test_np": 242, "x_test_pca": [6, 100, 1019], "x_test_r": 85, "x_test_scal": 242, "x_test_sel": 172, "x_test_select": 362, "x_test_text": 8, "x_test_tran": 997, "x_test_transform": [362, 411], "x_text": 8, "x_tfidf": 352, "x_thresholds_": [231, 633, 1042], "x_torch": 403, "x_tr": [862, 868, 871, 872, 873, 877, 879, 882, 884, 885, 889, 890], "x_train": [5, 6, 7, 8, 10, 13, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 111, 114, 118, 122, 123, 124, 125, 126, 127, 128, 131, 139, 140, 144, 145, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 179, 183, 194, 196, 197, 200, 206, 207, 213, 214, 215, 217, 229, 237, 241, 242, 247, 249, 254, 257, 258, 263, 267, 269, 273, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 328, 329, 337, 351, 356, 360, 362, 366, 374, 382, 385, 393, 408, 411, 414, 435, 436, 507, 556, 557, 558, 565, 566, 695, 696, 698, 700, 825, 827, 830, 848, 856, 857, 859, 873, 909, 910, 977, 987, 989, 990, 991, 993, 995, 997, 1001, 1002, 1018, 1019, 1027], "x_train_": 609, "x_train_count": 1023, "x_train_ensembl": 116, "x_train_linear": 116, "x_train_maxab": 997, "x_train_minmax": 997, "x_train_miss": 127, "x_train_no_cf_encod": 312, "x_train_noisi": 5, "x_train_pca": [6, 1019], "x_train_preprocess": 169, "x_train_r": 85, "x_train_sel": 172, "x_train_select": 362, "x_train_std_transform": 310, "x_train_text": 8, "x_train_tf": 1023, "x_train_tfidf": 1023, "x_train_tran": 997, "x_train_transform": [310, 362, 411], "x_train_valid": 26, "x_tran": [309, 321, 382, 403, 440, 462, 875, 880, 887, 997], "x_trans_bc": 309, "x_trans_qt": 309, "x_trans_yj": 309, "x_transform": [99, 130, 235, 483, 529, 530, 531, 532, 533, 535, 537, 541, 564, 636, 637, 686, 687, 688, 689], "x_transformed_fit_": 533, "x_true": 223, "x_type": 382, "x_uniform": 309, "x_val": [122, 995], "x_valid": 26, "x_valu": 328, "x_vari": 57, "x_weibul": 309, "x_weights_": [410, 480, 481, 482, 483], "x_wrong": 34, "xa": 579, "xanchor": 261, "xarg": 1030, "xarrai": 1007, "xavier": [856, 857, 1038, 1039, 1040, 1042, 1043], "xaxi": [45, 90, 101, 117, 196, 220, 222, 225, 283, 288, 351], "xaxis2": 117, "xb": [85, 878], "xbar_": 547, "xbc": 415, "xc3": 415, "xcjason": 1040, "xcode": 378, "xd": 524, "xdang": 677, "xerox": 12, "xerr": [163, 164, 352], "xethan": 1042, "xfail": [382, 388], "xfc": 415, "xfcche": 415, "xfea": 415, "xff": 415, "xgamma": 683, "xgboost": [127, 129, 414, 1007], "xgrid": [11, 296], "xhan": 1039, "xhy": 1037, "xi": [44, 65, 377, 407, 410, 415, 448, 454, 507, 1001, 1041], "xi_i": 1001, "xi_k": 410, "xiangyin": 1043, "xiao": [0, 1, 391, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "xiaojin": 894, "xiaoyu": 1042, "xiaoyuchai": 1043, "xin": [677, 983, 1038], "xinfan": [1030, 1031, 1034], "xing": [1038, 1039], "xinv": 864, "xinyu": 407, "xinyuliu12": 1039, "xiong": [1038, 1039, 1044], "xj": 405, "xk": [65, 548], "xlabel": [4, 8, 9, 13, 24, 25, 26, 27, 33, 37, 41, 61, 78, 79, 81, 82, 85, 86, 90, 97, 102, 112, 113, 115, 121, 123, 124, 125, 126, 127, 131, 135, 138, 143, 144, 147, 151, 152, 153, 154, 156, 157, 158, 169, 178, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 199, 201, 202, 204, 206, 208, 209, 213, 217, 232, 234, 236, 238, 255, 259, 260, 264, 265, 269, 270, 273, 274, 285, 286, 289, 290, 311, 312, 335, 337, 338, 341, 351, 357, 358, 359, 629, 1018, 1022], "xlim": [12, 26, 44, 58, 62, 73, 78, 79, 80, 97, 113, 114, 115, 131, 138, 152, 153, 169, 178, 189, 191, 198, 205, 208, 213, 228, 236, 246, 251, 255, 269, 274, 289, 290, 337, 342, 343, 347, 359], "xm": [12, 223], "xmax": [11, 78, 189, 191, 208, 209, 296], "xmin": [11, 78, 189, 191, 208, 209, 296], "xml": 401, "xn": 507, "xom": 12, "xor": [150, 152, 153, 154, 156, 157, 158, 161, 166, 209, 212, 249, 308, 343, 344, 608, 612, 620, 983, 1003, 1009, 1037], "xp": [410, 874], "xpreprocessor": 378, "xrang": 1036, "xred": [443, 1046], "xrot": 14, "xrx": 12, "xs_sp": 185, "xsat": 1040, "xscale": [152, 157, 234], "xt": [135, 283, 394, 443, 536, 538, 625, 627, 796, 799, 800, 810, 843, 851, 859, 864, 869, 876, 888, 917, 1046], "xtick": [4, 6, 8, 11, 30, 34, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 98, 121, 123, 127, 153, 154, 155, 159, 182, 189, 195, 212, 228, 236, 246, 247, 248, 251, 259, 260, 274, 287, 296, 302, 311, 325, 338, 341, 343, 344, 695, 1019], "xtick_period": 170, "xtick_start": 170, "xticklabel": [4, 10, 121, 127, 170, 311], "xticks_label": 123, "xticks_po": 123, "xticks_rot": [6, 695, 1019], "xtrain": 296, "xu": [407, 410, 418, 442, 1001, 1043, 1044, 1047, 1048], "xue": [0, 1034, 1035, 1036, 1038, 1039, 1042], "xuefeng": [1047, 1048], "xueqin": [677, 983], "xun": [1040, 1042], "xuniu": 1045, "xval": 164, "xw": [198, 318, 644, 645, 647, 650, 651, 652, 653, 654, 658, 659, 660, 661, 670, 679, 680, 681, 682, 983], "xx": [42, 58, 80, 120, 124, 130, 140, 153, 154, 155, 170, 186, 206, 209, 210, 211, 212, 213, 225, 228, 236, 249, 289, 299, 307, 308, 330, 337, 338, 343, 344, 347, 348, 384], "xx0": [113, 629], "xx1": [113, 629], "xx_coarser": 120, "xxx": 394, "xy": [9, 26, 49, 267, 296, 343, 397, 644, 645, 648, 649, 650, 651, 652, 653, 658, 659, 660, 661, 662, 679, 680, 681, 682, 684], "xycoord": [9, 26], "xyguo": [1036, 1038], "xytext": [9, 26, 175], "xyz": 379, "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 56, 57, 60, 61, 62, 65, 66, 71, 72, 74, 75, 81, 85, 86, 91, 92, 97, 99, 100, 101, 103, 104, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 220, 221, 222, 225, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 245, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 356, 357, 358, 359, 360, 362, 372, 373, 374, 375, 378, 380, 382, 385, 387, 389, 393, 394, 398, 401, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 496, 498, 500, 503, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 704, 709, 723, 729, 732, 738, 739, 753, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 785, 786, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 919, 924, 925, 947, 949, 950, 951, 955, 958, 961, 974, 976, 977, 978, 979, 981, 982, 983, 985, 987, 988, 989, 990, 991, 992, 994, 997, 1001, 1002, 1003, 1008, 1014, 1018, 1019, 1021, 1022, 1025, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "y0": [12, 223], "y1": [12, 91, 113, 223, 507, 714, 988, 989], "y1_label": 7, "y2": [91, 113, 714, 988], "y2_label": 7, "y3": 988, "y_": [231, 246, 250, 251, 295, 382, 410, 412, 635, 646, 667, 678, 726, 727, 735, 761, 780, 781, 784, 983, 987, 1036], "y_1": [112, 358, 359, 410, 987, 991, 1001], "y_2": [112, 358, 359, 991], "y_20": 329, "y_2d": 338, "y_3": 359, "y_30": 330, "y_50": 330, "y_adult": 322, "y_all": [664, 666, 674, 827, 828, 856], "y_ard": 178, "y_ard_std": 178, "y_axi": [97, 207], "y_bia": 114, "y_brr": 178, "y_brr_std": 178, "y_c": [480, 481, 483], "y_calib": 435, "y_california": 164, "y_coclust": 19, "y_convert": 919, "y_cov": 609, "y_cu": 403, "y_decis": [322, 830], "y_dens": 988, "y_diabet": [164, 1018], "y_different_covari": 34, "y_digit": [73, 139, 300, 408, 1018, 1019, 1021], "y_error": [114, 205], "y_errors_larg": 205, "y_filter": 57, "y_fold": 1018, "y_full": [163, 164, 305], "y_full_train": 116, "y_grid_pr": 130, "y_hat": 463, "y_high": 124, "y_i": [115, 318, 346, 405, 414, 978, 979, 983, 987, 991, 1001, 1002, 1003], "y_indic": 870, "y_iri": [265, 1022], "y_isotropic_covari": 34, "y_j": [979, 987, 989, 997, 1002], "y_k": [410, 997], "y_kmean": 19, "y_kr": 234, "y_l": 987, "y_label": 217, "y_left_lower_corn": [11, 296, 375, 496], "y_limit": 121, "y_loadings_": [480, 481, 482], "y_loc": 351, "y_log_prob": 830, "y_log_proba": 859, "y_low": 124, "y_lower": [60, 124], "y_mask": 329, "y_max": [31, 58, 113, 120, 130, 140, 153, 217, 233, 299, 307, 330, 342, 343, 633, 635], "y_mean": [156, 157, 160, 609, 642, 643], "y_mean_": 1042, "y_med": 124, "y_min": [31, 58, 113, 120, 130, 140, 153, 233, 299, 307, 330, 342, 343, 633, 635], "y_miss": [163, 164], "y_miss_california": 164, "y_miss_diabet": 164, "y_multirf": 131, "y_n": [987, 991, 1001], "y_new": 56, "y_nois": 114, "y_noisi": 198, "y_norm_squar": 760, "y_normal": 201, "y_np": 403, "y_numer": 919, "y_onehot_test": 269, "y_org": 924, "y_outlier": 181, "y_pareto": 201, "y_plot": [178, 200, 205, 263], "y_plot_ext": 200, "y_po": 353, "y_pred": [4, 6, 7, 13, 25, 30, 32, 34, 44, 57, 62, 70, 75, 111, 124, 125, 127, 132, 145, 169, 199, 201, 206, 209, 214, 216, 217, 228, 229, 238, 256, 258, 263, 290, 294, 302, 310, 328, 329, 362, 380, 387, 394, 414, 430, 437, 463, 480, 481, 482, 547, 550, 552, 554, 555, 556, 558, 560, 562, 563, 565, 566, 568, 609, 629, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 695, 696, 698, 699, 700, 701, 706, 710, 711, 716, 719, 720, 721, 725, 726, 727, 731, 733, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 780, 781, 782, 784, 785, 787, 788, 793, 796, 799, 800, 810, 820, 830, 832, 833, 842, 850, 857, 859, 899, 900, 901, 902, 903, 904, 905, 908, 910, 987, 989, 1019, 1036, 1037, 1039, 1041, 1045, 1046, 1047], "y_pred_ard": 183, "y_pred_bin": 199, "y_pred_chain": 281, "y_pred_empti": [726, 727], "y_pred_enet": 183, "y_pred_ensembl": 281, "y_pred_lasso": 183, "y_pred_lr": 201, "y_pred_nnl": 194, "y_pred_ol": 194, "y_pred_outli": [213, 289, 337], "y_pred_outliers_sgd": 213, "y_pred_ovr": 281, "y_pred_product": 217, "y_pred_qr": 201, "y_pred_ridg": 75, "y_pred_ridge_with_trans_target": 75, "y_pred_scal": 310, "y_pred_seg": 199, "y_pred_test": [213, 289, 337], "y_pred_test_sgd": 213, "y_pred_tot": 217, "y_pred_train": [213, 337], "y_pred_train_sgd": 213, "y_pred_with_": 168, "y_pred_without_": 168, "y_predict": [114, 382, 1030], "y_prob": [25, 27, 154, 436, 437, 707, 830, 856, 987, 1044, 1048], "y_proba": [123, 126, 310, 394, 707, 859, 1048], "y_proba_sc": 310, "y_rand": 330, "y_reconstruct": [480, 481, 482], "y_rf": 131, "y_right": 34, "y_rotations_": [410, 480, 481, 482], "y_sampl": [160, 609], "y_scaler": 10, "y_score": [229, 267, 269, 394, 480, 481, 482, 705, 718, 723, 724, 736, 737, 753, 779, 785, 786, 791, 796, 799, 800, 810, 859, 987, 1036, 1044, 1046, 1048], "y_scores_": [482, 1042], "y_shared_covari": 34, "y_spars": 988, "y_std": [157, 160, 550, 609, 642, 643, 1043], "y_std_": 1042, "y_svr": 234, "y_test": [5, 6, 7, 8, 10, 13, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 111, 114, 116, 118, 123, 124, 125, 126, 127, 128, 131, 139, 140, 144, 145, 159, 168, 169, 170, 171, 172, 175, 183, 194, 196, 199, 205, 206, 207, 214, 215, 217, 229, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 322, 328, 329, 351, 356, 360, 362, 374, 385, 393, 408, 411, 414, 436, 507, 556, 557, 558, 565, 566, 695, 696, 698, 700, 825, 827, 830, 848, 856, 857, 859, 909, 910, 987, 989, 990, 997, 1002, 1018, 1019, 1027, 1030], "y_test_pr": 247, "y_test_predict": 237, "y_test_r": 85, "y_test_tru": 328, "y_thresholds_": [231, 633, 1042], "y_torch": 403, "y_train": [5, 6, 7, 8, 10, 13, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 111, 114, 118, 122, 123, 124, 125, 126, 127, 128, 131, 139, 140, 144, 145, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 179, 183, 194, 196, 197, 200, 206, 207, 214, 215, 229, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 322, 325, 326, 328, 329, 330, 351, 356, 360, 362, 366, 374, 382, 385, 393, 408, 411, 414, 435, 436, 507, 556, 557, 558, 565, 566, 695, 696, 698, 700, 825, 827, 830, 848, 856, 857, 859, 909, 910, 977, 987, 989, 990, 995, 997, 1002, 1018, 1019, 1027], "y_train_": 609, "y_train_ensembl": 116, "y_train_linear": 116, "y_train_noisi": 158, "y_train_pr": 247, "y_train_r": 85, "y_train_valid": 26, "y_tran": 75, "y_transform": 483, "y_true": [4, 13, 19, 32, 59, 75, 111, 132, 154, 199, 209, 217, 238, 248, 328, 380, 430, 436, 437, 463, 480, 481, 482, 550, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 695, 696, 698, 699, 700, 701, 705, 706, 707, 710, 711, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 793, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 987, 1031, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1047], "y_true_bin": 199, "y_true_categor": [707, 987], "y_true_empti": 726, "y_true_mean": 201, "y_true_seg": 199, "y_type_": 866, "y_uniqu": 24, "y_upper": [60, 124], "y_val": [122, 995], "y_valid": 26, "y_var": 114, "y_vari": 57, "y_weights_": [410, 480, 481, 482, 483], "y_wrong": 34, "yacin": 1038, "yadav": 1044, "yagi": 1042, "yahoo": 12, "yair": [407, 689], "yakov": 1042, "yalburgi": [1037, 1038], "yaman": 1045, "yamanishi": 375, "yamin": 1030, "yaml": 384, "yan": [1034, 1042], "yanchor": 261, "yang": [375, 407, 412, 532, 637, 1036, 1037, 1040, 1042, 1043, 1044, 1046, 1047], "yangarbit": 1037, "yanhong": 1045, "yanlend": 1036, "yann": [302, 1030, 1032], "yanni": 407, "yannick": [1030, 1032], "yao": [0, 1, 377, 391, 1036, 1037, 1038, 1039, 1046, 1047, 1048], "yap": 1037, "yar": 1044, "yaroslav": [0, 1, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1046, 1047], "yarowski": [317, 896, 1000], "yashika": 1042, "yasmeen": 1043, "yat2016": 407, "yate": [588, 727], "yates2011": 588, "yau": [15, 1033, 1034, 1035, 1036, 1037], "yaxi": [7, 10, 45, 60, 90, 101, 117, 196, 220, 222, 225, 245, 283, 288, 351], "ye": [351, 388, 394, 866, 883, 983], "year": [0, 4, 135, 148, 156, 168, 169, 170, 199, 200, 217, 377, 379, 384, 392, 411, 415, 798, 803, 805, 878, 983, 987, 1008, 1012, 1021], "yearli": 4, "yearremodadd": 132, "yeast": [281, 830], "yee": [1037, 1038], "yegelwel": 1042, "yeh": 1043, "yelit": 1036, "yellow": [34, 92, 338, 988], "yellowbrick": 1007, "yellowgreen": [200, 202, 209, 358], "yen": [1036, 1037], "yenchen": [0, 1036], "yenchenlin": 1036, "yenugula": 1048, "yeo": [305, 309, 875, 887, 997, 1038, 1044, 1046], "yep": 383, "yerr": [73, 79, 81, 118, 121, 147, 285, 311, 328], "yet": [9, 57, 183, 217, 250, 261, 353, 368, 375, 379, 384, 392, 396, 397, 398, 411, 412, 414, 415, 417, 446, 450, 459, 460, 463, 551, 552, 565, 566, 575, 591, 592, 600, 775, 896, 971, 976, 983, 987, 993, 1001, 1008, 1039, 1047], "yeung": 1036, "ygrid": [11, 296], "yhat": 1005, "yhoo": 12, "yi": [507, 989, 1034, 1038, 1039, 1042], "yichuan": [1036, 1037], "yield": [8, 9, 25, 45, 55, 78, 79, 80, 81, 124, 183, 194, 199, 214, 217, 265, 281, 299, 305, 335, 340, 351, 352, 362, 366, 368, 374, 385, 394, 404, 407, 409, 411, 412, 414, 415, 416, 435, 447, 466, 470, 506, 507, 535, 536, 537, 539, 544, 551, 552, 557, 558, 559, 560, 565, 566, 592, 600, 645, 649, 650, 651, 653, 659, 661, 663, 671, 673, 684, 723, 778, 785, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 830, 833, 891, 892, 930, 937, 939, 940, 945, 979, 981, 983, 984, 987, 1002, 1003, 1018, 1035, 1036, 1038, 1041, 1043], "yifan": 991, "yime": 1038, "ying": [407, 450, 460, 1044], "yinglr": 1040, "yisheng": 1047, "yiyangq": 1044, "yj": [85, 309], "ylabel": [4, 8, 9, 13, 24, 25, 26, 27, 33, 37, 61, 78, 79, 81, 82, 85, 86, 90, 97, 102, 112, 113, 115, 123, 124, 125, 126, 127, 131, 135, 138, 143, 144, 147, 151, 152, 153, 154, 156, 157, 158, 169, 178, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 199, 201, 202, 204, 206, 208, 209, 217, 232, 234, 236, 255, 259, 260, 263, 264, 265, 269, 270, 273, 274, 286, 312, 335, 338, 341, 351, 357, 358, 359, 629, 1018, 1022], "ylim": [12, 24, 26, 33, 37, 44, 58, 62, 78, 79, 80, 97, 113, 114, 121, 124, 131, 134, 152, 153, 169, 186, 188, 189, 191, 192, 193, 205, 208, 209, 213, 228, 236, 246, 251, 255, 259, 263, 269, 273, 274, 289, 290, 337, 342, 343, 347, 351, 359, 1018], "ylorbr_r": 80, "ym": [12, 223], "ymax": [8, 10, 11, 78, 186, 188, 191, 192, 200, 208, 260, 296], "ymazari": 1038, "ymean": 179, "ymin": [11, 78, 186, 188, 191, 192, 200, 208, 260, 296], "yn": [507, 988, 989], "yoav": 1036, "yoch": 1043, "yogendrasingh": 1045, "yojana": 1045, "yokasr": 1040, "yoni": 1033, "yoon": 1041, "yoram": [278, 732], "york": [259, 785, 794, 977, 987, 999], "yoshihiro": [179, 1040], "yoshiki": [1033, 1036], "yoshizawa": 1038, "yoshua": [856, 857, 1000], "yosshi999": 1044, "yosuk": [1042, 1043], "yotam": 1046, "you": [0, 15, 20, 24, 71, 90, 119, 120, 123, 125, 145, 148, 164, 170, 187, 200, 201, 203, 230, 235, 242, 248, 255, 260, 261, 267, 275, 289, 315, 316, 319, 321, 322, 326, 329, 351, 362, 366, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 393, 394, 397, 398, 401, 403, 405, 406, 407, 408, 409, 411, 414, 415, 416, 418, 419, 424, 435, 441, 442, 444, 445, 447, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 498, 501, 502, 507, 508, 530, 531, 532, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 579, 580, 586, 587, 588, 589, 592, 605, 606, 608, 609, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 697, 698, 782, 795, 797, 798, 799, 800, 801, 803, 805, 811, 812, 814, 815, 816, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 856, 857, 858, 859, 862, 863, 864, 865, 866, 871, 872, 873, 878, 879, 884, 885, 887, 888, 889, 890, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 936, 953, 955, 976, 977, 982, 983, 987, 988, 991, 993, 994, 997, 998, 1001, 1002, 1003, 1006, 1007, 1011, 1012, 1014, 1015, 1018, 1021, 1023, 1030, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "youden": 987, "younger": 217, "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 374, 378, 379, 380, 381, 383, 384, 386, 388, 389, 392, 393, 394, 397, 401, 403, 406, 407, 408, 409, 414, 415, 418, 419, 442, 444, 501, 531, 559, 560, 600, 632, 644, 685, 709, 796, 799, 800, 802, 810, 818, 822, 824, 930, 984, 991, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1011, 1012, 1016, 1023, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "your_regex_goes_her": 380, "yourlogin": 380, "yourself": [71, 379, 380, 381, 385, 388, 991], "ypred": 1037, "yrsold": 132, "yscale": [152, 157, 199, 234, 351], "ystd": 179, "yt": 870, "ython": 0, "ytick": [6, 11, 30, 34, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 98, 125, 144, 153, 154, 155, 159, 182, 189, 195, 212, 228, 236, 246, 247, 248, 251, 255, 274, 287, 296, 302, 325, 338, 343, 344, 351, 1018, 1019], "yticklabel": [255, 351], "ytrain": 296, "ytrue": 1037, "yu": [183, 407, 450, 460, 656, 983, 991, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "yuan": [1044, 1045, 1046, 1047], "yuchen": [1046, 1047], "yucheng": 1035, "yue": 1042, "yufeng": 1038, "yuichi": 1037, "yuki": 1044, "yule": [448, 455, 775, 776, 777], "yulia": 1040, "yum": 378, "yun": [1045, 1046], "yung": [1033, 1036], "yunqian": 983, "yurchak": [0, 1, 199, 217, 415, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "yuri": [1033, 1035], "yusuf": [1045, 1046], "yusuk": 1043, "yusukenagasaka": 1043, "yutaro": 1042, "yuusuk": 1047, "yuval": [404, 449], "yv": 410, "yve": 1043, "yy": [42, 58, 80, 120, 130, 140, 153, 155, 170, 206, 210, 211, 212, 213, 225, 228, 236, 289, 299, 307, 308, 330, 337, 338, 343, 344, 347, 348], "yy_": 206, "yy_coars": 120, "yy_down": 343, "yy_up": 343, "yzhenman": 1043, "z": [11, 58, 120, 140, 153, 155, 170, 209, 211, 212, 220, 222, 228, 233, 249, 289, 296, 299, 307, 310, 330, 338, 343, 344, 348, 377, 404, 412, 414, 551, 552, 583, 637, 662, 669, 683, 684, 687, 691, 697, 721, 782, 879, 983, 984, 991, 992, 1022, 1045], "z_": 412, "z_1": 983, "z_2": 983, "z_3": 983, "z_4": 983, "z_5": 983, "z_i": [115, 991], "z_l": 991, "z_points_coars": 120, "zablit": 1045, "zac": 1035, "zacchari": 1042, "zach": [1038, 1039, 1044], "zachariah": 1038, "zadrozni": [27, 405, 435, 674], "zaffalon": 260, "zahlii": 1043, "zain": [0, 1, 1044, 1045, 1046, 1047], "zalkow": 1035, "zambelli": 1033, "zamrii": 1040, "zanouda": 1037, "zaxi": [45, 90, 101, 196, 220], "zayd": 1039, "zaytsev": 1033, "zdzieblo": 1047, "zebra": 710, "zedan": 1046, "zeel": 1044, "zeeshan": [1045, 1046], "zempleni": 1044, "zen": 924, "zenin": 1036, "zentrum": 987, "zero": [10, 11, 14, 27, 34, 37, 40, 41, 52, 54, 79, 81, 82, 95, 98, 100, 113, 114, 123, 125, 126, 131, 145, 148, 164, 178, 183, 185, 190, 192, 193, 198, 199, 200, 203, 204, 205, 209, 214, 217, 232, 235, 236, 238, 245, 249, 251, 257, 260, 265, 269, 270, 288, 305, 316, 317, 342, 346, 352, 353, 356, 360, 366, 367, 375, 382, 386, 394, 405, 406, 407, 409, 412, 414, 415, 416, 417, 420, 444, 450, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 485, 495, 506, 507, 521, 524, 525, 529, 530, 533, 535, 536, 537, 538, 540, 541, 545, 546, 550, 555, 556, 557, 558, 559, 560, 562, 563, 564, 579, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 609, 634, 637, 641, 642, 643, 648, 656, 657, 662, 663, 664, 665, 666, 669, 674, 675, 676, 683, 684, 701, 707, 710, 711, 713, 714, 722, 726, 727, 731, 735, 737, 743, 780, 781, 782, 784, 793, 794, 811, 812, 815, 816, 828, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 862, 869, 871, 872, 874, 875, 876, 878, 879, 885, 886, 887, 888, 892, 899, 907, 908, 909, 910, 934, 962, 973, 977, 983, 985, 986, 989, 990, 991, 997, 998, 999, 1001, 1002, 1003, 1014, 1021, 1023, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "zero_bas": [485, 506, 507], "zero_class": 236, "zero_divis": [302, 711, 726, 727, 735, 780, 781, 784, 987, 1040, 1042, 1046], "zero_impute_scor": 164, "zero_on": [380, 1031], "zero_one_loss": [380, 403, 701, 731, 987, 1031, 1032, 1033, 1047], "zero_one_scor": 1031, "zerodivisionerror": [1037, 1040, 1046], "zeros_lik": [49, 201, 269], "zeta": 1002, "zeta_i": 1002, "zev": [1036, 1037, 1038, 1039], "zeyusun": 1043, "zha": [687, 691, 984], "zhai_pro": 1035, "zhan": 1045, "zhang": [259, 407, 440, 662, 677, 683, 684, 687, 691, 755, 756, 983, 984, 985, 989, 1001, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1046, 1047, 1048], "zhang02c": 674, "zhang96": [407, 440], "zhao": [1040, 1042, 1043, 1044, 1045], "zhaowei": 1042, "zhaoweiwang": 1043, "zhauniarovich": 1035, "zhdanovich": 1038, "zhechev": 1045, "zhehao": [1043, 1044, 1045, 1046, 1048], "zhenfish": 1044, "zheng": [1036, 1037, 1042], "zhenq": 1038, "zhi": [561, 993], "zhiqe": 1038, "zhou": [561, 637, 895, 993, 1038, 1046, 1047], "zht2007": 187, "zhu": [111, 414, 517, 551, 656, 894], "zhuyi": [1038, 1039], "zhuzhunashvili": [407, 460], "zibulevski": [662, 683, 684], "zichen": 1035, "zielinska": 1041, "zihna": 1043, "ziji": [1038, 1039], "zijlstra": 1033, "zike": 1036, "zimek": 444, "zimmer": [1034, 1044], "zinkov": [206, 1030, 1031, 1032, 1034, 1035], "zip": [4, 5, 8, 9, 12, 13, 24, 26, 31, 32, 34, 37, 38, 40, 42, 45, 49, 55, 63, 64, 75, 86, 92, 95, 96, 99, 103, 104, 105, 113, 115, 122, 132, 133, 157, 163, 166, 169, 170, 171, 184, 190, 191, 199, 207, 208, 220, 232, 238, 246, 250, 251, 258, 262, 263, 264, 267, 269, 283, 286, 288, 291, 299, 300, 301, 307, 309, 310, 311, 329, 335, 346, 347, 357, 378, 414, 823, 997, 1023, 1026], "zisserman": [636, 979, 987], "zito": [1030, 1043], "ziv": 1036, "zivori": 1036, "zj": [1038, 1039], "zlabel": 1022, "zoj613": 1042, "zolisa": 1042, "zoom": [4, 116, 305], "zoom_in_percentile_rang": 305, "zopa": 1005, "zorder": [12, 58, 97, 129, 140, 152, 160, 189, 197, 221, 223, 231, 234, 245, 316, 322, 343], "zou": [111, 187, 414, 517, 551, 654, 983, 1001], "zou_et_al_criterion_resc": 187, "zoubin": 894, "zoubir": 81, "zouhar": 1043, "zsh": 367, "zuckerberg": 0, "zwinck": 1032, "zxcvbniu": 1037, "zz": 80, "zzrh2009": 414, "z\u00e9": 1038, "\u00e4yr\u00e4m\u00f6": 983, "\u00f3scar": [1034, 1035, 1036, 1037], "\u00f6zer": 1043, "\u0142ukasz": 1045, "\u015fahin": 1044, "\u675c\u4e16\u6a4b": [0, 2], "\u8d75\u4e30": 1044}, "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "Computation times", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multiclass methods", "Overview of multiclass training meta-estimators", "Computation times", "Multioutput methods", "Multilabel classification using a classifier chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5"], "titleterms": {"": [171, 310, 312, 383, 392, 414, 987], "0": [164, 315, 316, 317, 318, 1003, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "1": [170, 196, 318, 319, 320, 321, 322, 392, 1023, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "10": [67, 1030], "11": 1030, "12": 1030, "13": 1031, "14": 1032, "15": 1033, "16": 1034, "17": 1035, "18": 1036, "19": 1037, "1d": 288, "2": [196, 320, 1023, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "20": [70, 351, 375, 1023, 1038], "2018": 1008, "20newgroup": 214, "21": 1039, "22": [315, 1040], "23": [316, 1041], "24": [317, 1042], "2d": [12, 52, 97, 103, 170], "3": [26, 182, 321, 1023, 1038, 1039, 1044, 1046], "3d": 170, "4": [322, 1030, 1038, 1047], "5": [1003, 1030, 1048], "6": 1030, "7": 1030, "8": 1030, "9": 1030, "99": 375, "A": [13, 20, 21, 47, 58, 63, 199, 318, 379, 386, 401, 411, 1017, 1020], "And": [224, 395], "In": 267, "NOT": 385, "Of": 369, "One": [191, 213, 269, 318, 337, 411, 993, 1001], "The": [86, 89, 90, 168, 169, 199, 225, 232, 258, 267, 278, 375, 384, 388, 411, 415, 986, 987, 999, 1021, 1022], "Will": 392, "With": [239, 1023], "__sklearn_is_fitted__": 109, "_safe_index": 915, "abil": 157, "ablat": 238, "about": [0, 169, 392], "absolut": 987, "access": 408, "accuraci": [171, 233, 351, 356, 987], "accuracy_scor": 701, "across": 362, "action": 380, "activ": 326, "ad": 407, "adaboost": [111, 112, 113, 414], "adaboostclassifi": [111, 551], "adaboostregressor": 552, "add": [322, 392], "add_dummy_featur": 881, "addit": [414, 979], "additive_chi2_kernel": 755, "additivechi2sampl": 636, "adjac": 17, "adjust": 37, "adjusted_mutual_info_scor": 702, "adjusted_rand_scor": 703, "advanc": 239, "advantag": 407, "affin": [12, 38, 407, 985], "affinity_propag": 452, "affinitypropag": 438, "agglom": [39, 40, 52, 1022], "agglomer": [51, 54, 1004, 1022], "agglomerativeclust": 439, "aggress": [976, 983], "aic": [188, 983], "algebra": [366, 389], "algorithm": [19, 20, 21, 38, 44, 49, 55, 63, 64, 65, 220, 228, 386, 392, 981, 983, 988, 990, 991, 995, 1003, 1021], "alias": 388, "align": 984, "all": [260, 269, 319, 397, 1019, 1045, 1046, 1047], "all_displai": 927, "all_estim": 928, "all_funct": 929, "alloc": [15, 412], "alpha": [138, 356], "alpin": 397, "alreadi": 17, "also": [265, 384, 408], "altern": [378, 976], "am": [121, 238], "amount": [272, 976], "an": [47, 59, 109, 164, 180, 188, 293, 315, 319, 392, 415, 976, 993, 1014, 1020, 1021], "anaconda": 397, "analysi": [4, 27, 33, 34, 60, 95, 102, 105, 111, 124, 170, 183, 245, 262, 263, 270, 291, 292, 293, 351, 406, 410, 412, 981, 990, 1004, 1022, 1023], "analyz": [13, 976], "angl": [188, 983], "ani": 392, "anomali": 228, "anova": [145, 341], "api": [109, 241, 242, 315, 318, 320, 367, 382, 387, 394, 398, 403, 406, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1047, 1048], "appli": 138, "applic": [415, 1022], "approach": [78, 188, 260], "approxim": [166, 174, 175, 233, 283, 317, 406, 409, 979], "ar": [67, 318, 392], "arch": 397, "architectur": 1008, "ard": [183, 983], "ardregress": 642, "arff": 374, "argument": [318, 382, 1041, 1043], "arm64": 388, "arrai": [320, 360, 389, 403, 406, 1014, 1047, 1048], "arrayfunc": 916, "artwork": 0, "as_float_arrai": 917, "ask": 392, "assert": 382, "assert_all_finit": 918, "assign": 407, "assumpt": 57, "atom": [10, 366], "attent": 392, "attribut": [382, 394, 403, 976], "auc": [315, 704], "author": [0, 1030], "automat": [183, 393, 983], "avail": [319, 976, 1026, 1027], "available_if": 948, "averag": [267, 269, 407, 414, 987], "average_precision_scor": 705, "avoid": [362, 408], "aweb": 1012, "ax": 387, "b": 85, "backend": 388, "backward": 380, "bag": [114, 123, 351, 414, 415, 976, 1023], "baggingclassifi": 553, "baggingregressor": 554, "balanc": [259, 987], "balanced_accuracy_scor": 706, "ball": 990, "balltre": [839, 990], "base": [3, 4, 85, 118, 119, 148, 166, 183, 234, 315, 316, 318, 320, 321, 322, 380, 406, 407, 411, 414, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 983, 995, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "baseestim": [382, 421], "baselin": [175, 199], "basi": [5, 160, 417, 979, 983, 1021], "basic": [158, 217, 393, 409, 417], "batch": [407, 412], "bay": [24, 25, 406, 989], "bayesian": [178, 179, 245, 260, 406, 983, 986], "bayesiangaussianmixtur": 794, "bayesianridg": 643, "befor": [164, 384], "behavior": 255, "being": 169, "benchmark": [7, 10, 58, 351], "bernoulli": [989, 992], "bernoullinb": 834, "bernoullirbm": 855, "best": [250, 381, 392], "bestofmedia": 1012, "beta": 412, "betawork": 1012, "between": [64, 271, 983], "bia": 114, "bic": [188, 250, 983], "biclust": [18, 19, 20, 166, 376, 404, 406], "biclustermixin": 422, "bigger": 368, "bike": [4, 13, 170], "bin": 997, "binar": [862, 882, 997, 998], "binari": [267, 281, 983, 987], "birch": [42, 407, 440], "birchbox": 1012, "bisect": [43, 407], "bisectingkmean": [319, 441], "blind": 96, "bnp": 1012, "boil": 385, "boltzmann": [302, 992], "bonu": 138, "book": 1012, "boost": [4, 117, 121, 122, 123, 124, 125, 126, 127, 170, 199, 315, 316, 318, 320, 321, 414], "bouldin": 407, "bound": 232, "boundari": [128, 133, 286, 330, 342], "branch": 388, "break": 347, "breast": [172, 377], "brier": 987, "brier_score_loss": 707, "brute": [976, 990], "bug": [379, 380, 384, 1011, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "build": [156, 164, 378, 380, 388, 408, 1023, 1048], "bulk": [10, 366], "bunch": [392, 914], "c": 386, "c4": 1003, "c5": 1003, "cach": [72, 285, 408], "calcul": [122, 134], "calibr": [23, 24, 25, 26, 27, 124, 166, 199, 405, 406, 435, 436, 437, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "calibratedclassifiercv": 435, "calibration_curv": 437, "calibrationdisplai": 436, "california": 375, "calinski": 407, "calinski_harabasz_scor": 708, "call": [362, 379], "callgrind": 386, "can": [138, 392], "cancer": [172, 377], "candid": [272, 976], "canon": [85, 410], "cardif": 1012, "cardiotocographi": 238, "cart": 1003, "case": [346, 983, 987], "cast": 1014, "categor": [121, 311, 317, 322, 392, 414, 989, 997], "categori": [4, 319, 321, 997], "categoricalnb": 835, "caus": 397, "causal": [168, 169], "cautiou": 169, "cca": [85, 480], "center": [95, 997], "central": 17, "centroid": [294, 990], "chain": [73, 240, 281, 393, 408], "chanc": 37, "chang": [235, 380, 395, 1012, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "changelog": [1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "characterist": [269, 270, 987], "check": [169, 262, 315, 388, 403, 1038, 1039, 1040], "check_arrai": 920, "check_consistent_length": 921, "check_cv": 819, "check_estim": 930, "check_increas": 634, "check_is_fit": [382, 971], "check_memori": 972, "check_random_st": 922, "check_scalar": 923, "check_scor": 709, "check_symmetr": 973, "check_x_i": 919, "checker": 406, "checklist": [380, 384], "chi": [979, 985], "chi2": 602, "chi2_kernel": 756, "choic": 412, "choos": [7, 976, 1014, 1016, 1018], "ci": 380, "circl": 66, "cite": 0, "claim": [199, 217], "class": [26, 37, 111, 113, 134, 182, 208, 213, 263, 267, 269, 318, 337, 340, 394, 406, 411, 414, 415, 987, 990, 993, 1001, 1002, 1030, 1031], "class_likelihood_ratio": 710, "class_weight": [924, 925], "classic": 406, "classif": [8, 26, 29, 30, 32, 33, 70, 91, 139, 152, 153, 154, 155, 159, 166, 215, 236, 263, 266, 267, 270, 281, 286, 294, 302, 315, 324, 329, 342, 351, 376, 406, 417, 983, 987, 988, 990, 991, 1001, 1002, 1003, 1021, 1023], "classifi": [24, 25, 27, 31, 109, 135, 182, 240, 257, 281, 286, 315, 330, 335, 338, 351, 360, 405, 406, 414, 981, 990, 1021, 1023], "classification_report": 711, "classifierchain": [830, 988], "classifiermixin": 424, "classnameprefixfeaturesoutmixin": 423, "clear": 1040, "clear_data_hom": 484, "cli": 1023, "clone": [382, 432], "close": 379, "cloud": 97, "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 95, 166, 319, 321, 352, 376, 404, 406, 407, 412, 418, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 712, 713, 987, 1022, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "cluster_optics_dbscan": 453, "cluster_optics_xi": 454, "clustermixin": 425, "co": [19, 21, 404], "co2": 156, "code": [7, 95, 104, 380, 382, 385, 386, 388, 412, 1034, 1035, 1036, 1037, 1038], "coeffici": [148, 169, 178, 203, 204, 407, 987], "cohen": 987, "cohen_kappa_scor": 714, "coin": [46, 47], "color": 48, "column": [70, 71, 240], "column_or_1d": 974, "columntransform": [408, 462], "com": 1012, "combin": [132, 229], "comment": 385, "committe": 395, "common": [169, 362, 394, 403, 415, 987], "commun": [0, 380, 395], "compact": 230, "compar": [26, 42, 44, 62, 78, 85, 117, 131, 144, 175, 178, 185, 201, 206, 228, 234, 260, 268, 291, 300, 305, 311, 392], "comparison": [27, 31, 34, 43, 64, 80, 103, 121, 122, 143, 151, 220, 221, 234, 260, 271, 278, 353, 983], "compat": [315, 380, 382, 403, 406], "compil": [378, 386], "complement": 989, "complementnb": 836, "complet": [237, 407], "completeness_scor": 715, "complex": [7, 230, 240, 259, 262, 327, 356, 366, 983, 990, 991, 1001, 1002, 1003], "compon": [86, 95, 291, 292, 293, 412, 990, 1004, 1022], "compos": [406, 462, 463, 464, 465, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "composit": [69, 166, 406, 408, 976], "compoundkernel": 610, "compress": [14, 53, 366], "comput": [16, 17, 22, 28, 35, 38, 47, 49, 63, 64, 67, 68, 76, 78, 83, 87, 93, 106, 108, 117, 136, 141, 149, 161, 165, 173, 176, 192, 204, 218, 226, 243, 252, 273, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 354, 361, 365, 366, 406, 408, 411, 994, 1009], "computation": 368, "compute_class_weight": 924, "compute_optics_graph": 455, "compute_sample_weight": 925, "con": 986, "concaten": 74, "concentr": 245, "concept": [394, 983], "conclud": [4, 224], "conclus": [7, 13, 151, 183, 188, 278, 286, 312, 342], "conda": 378, "condit": [170, 317, 994], "confid": 124, "config_context": 466, "configur": [366, 367], "confus": [254, 407, 987], "confusion_matrix": 716, "confusionmatrixdisplai": [229, 695], "connect": [407, 415, 1022], "consensu": 983, "consensus_scor": 717, "consider": 375, "constant": [199, 977], "constantkernel": 611, "constrain": 1022, "constraint": [127, 129, 320, 322, 407, 414], "construct": 234, "consum": 235, "content": [369, 392, 1014], "conting": 407, "contingency_matrix": 712, "continu": [306, 380], "contribut": [380, 392], "contributor": [0, 379, 380, 395, 1034, 1035, 1036, 1037, 1038], "control": [362, 414, 991], "convent": [381, 1014], "converg": 111, "convergencewarn": 569, "convex": 209, "cookbook": 160, "coordin": 188, "core": [0, 8, 368, 379, 384, 386, 392, 395, 989], "corpu": 415, "correl": [169, 172, 410, 987, 995], "cosin": 985, "cosine_dist": 757, "cosine_similar": 758, "cost": [356, 1003], "countvector": 586, "covari": [34, 77, 78, 80, 81, 82, 166, 247, 406, 409, 420, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 981, 1038, 1042, 1043, 1044, 1046, 1047], "coverag": [380, 388, 987], "coverage_error": 718, "covertyp": [238, 375], "craft": 385, "crash": 392, "creat": [70, 102, 111, 203, 229, 267, 312, 341, 342, 392], "criteria": [187, 392, 983, 1003], "criterion": [188, 317, 976, 1001], "cross": [4, 84, 85, 138, 147, 166, 188, 255, 256, 258, 259, 263, 265, 270, 312, 341, 362, 406, 410, 411, 976, 983, 1018], "cross_decomposit": [406, 480, 481, 482, 483, 1040, 1042, 1044, 1046, 1048], "cross_val_predict": 820, "cross_val_scor": [264, 821], "cross_valid": [411, 822], "cubic": 179, "cumul": 987, "curat": 379, "curs": 1021, "curv": [25, 27, 179, 234, 241, 251, 257, 262, 267, 269, 275, 405, 982], "custom": [109, 258, 334, 415, 997, 1002], "cv": [255, 362], "cv_results_": 976, "cython": [381, 386, 388], "d": [411, 990], "d2_absolute_error_scor": 719, "d2_pinball_scor": 720, "d2_tweedie_scor": 721, "data": [4, 7, 9, 12, 17, 20, 24, 26, 34, 38, 47, 49, 50, 55, 57, 58, 63, 64, 66, 67, 70, 75, 78, 80, 82, 85, 86, 96, 97, 100, 101, 102, 112, 118, 119, 122, 125, 127, 128, 132, 144, 147, 148, 157, 159, 164, 168, 171, 172, 175, 179, 185, 192, 193, 203, 229, 234, 241, 250, 255, 257, 261, 266, 267, 269, 270, 273, 286, 290, 295, 302, 305, 309, 310, 311, 322, 325, 338, 341, 345, 346, 352, 353, 362, 366, 368, 375, 385, 392, 394, 407, 408, 411, 416, 997, 1001, 1012, 1014, 1017, 1020, 1022, 1023], "dataconversionwarn": 570, "datadimensionalitywarn": 571, "datafram": [315, 322, 392, 1047], "dataiku": 1012, "datarobot": 1012, "dataset": [3, 4, 5, 8, 13, 24, 25, 27, 32, 44, 58, 62, 70, 85, 88, 89, 90, 91, 92, 95, 103, 111, 117, 120, 121, 132, 138, 151, 153, 155, 156, 158, 160, 166, 168, 169, 170, 178, 181, 183, 188, 199, 201, 208, 217, 220, 221, 228, 233, 238, 239, 258, 266, 267, 278, 281, 312, 329, 330, 335, 342, 351, 357, 372, 373, 374, 375, 376, 377, 385, 392, 406, 417, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 1014, 1020, 1021, 1023, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "davi": 407, "davies_bouldin_scor": 722, "dbscan": [49, 407, 418, 442], "dbscan_clust": 55, "dcg_score": 723, "deal": [392, 406], "debian": 397, "debug": 388, "debugg": 386, "decis": [111, 112, 120, 128, 133, 166, 233, 286, 321, 330, 342, 355, 356, 357, 358, 359, 360, 392, 395, 406, 1003], "decisionboundarydisplai": 629, "decisiontre": 112, "decisiontreeclassifi": 907, "decisiontreeregressor": [317, 908], "decod": 415, "decompos": 412, "decomposit": [84, 85, 94, 95, 114, 166, 376, 406, 410, 412, 419, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 1022, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "decreas": [118, 119, 171], "deep": 392, "default": [235, 290, 380], "defin": [37, 47, 58, 67, 220, 255, 257, 258, 353, 987], "definit": [217, 302, 994, 1040], "deflat": 85, "delai": 954, "demand": [4, 13], "demo": [20, 21, 38, 47, 49, 55, 58, 63, 65], "demonstr": [57, 264, 308, 325], "dendrogram": 41, "denois": [5, 98], "dens": 185, "densiti": [249, 287, 288, 296, 321, 413, 933, 1002], "densitymixin": 426, "depend": [170, 235, 239, 378, 994, 1030, 1043, 1044], "deploi": 392, "deploy": 397, "deprec": [235, 380, 406, 926, 1040], "descent": [188, 207, 213, 983, 1001], "descript": 168, "design": 156, "det": [257, 987], "det_curv": 724, "detail": [979, 1001, 1002], "detcurvedisplai": 696, "detect": [9, 228, 238, 257, 289, 290, 987, 993, 1002], "determin": [81, 183, 409, 983, 987], "develop": [0, 107, 109, 166, 235, 378, 381, 382, 383, 384, 387, 388, 389, 976, 1025, 1046], "devianc": [125, 987], "devic": 403, "diabet": [138, 239, 377, 1021], "diagnost": 377, "dict": 415, "dict_learn": 543, "dict_learning_onlin": 544, "dictionari": [50, 95, 98, 104, 412], "dictionarylearn": 529, "dictvector": [353, 579], "did": 392, "diff": 388, "differ": [40, 44, 62, 78, 160, 170, 305, 308, 311, 335, 342, 382, 392, 398, 407, 983, 1021], "digit": [32, 52, 58, 89, 139, 221, 302, 325, 326, 377, 1020], "dimension": [72, 220, 223, 240, 292, 310, 352, 981, 984, 990, 1004, 1021], "direct": 216, "directli": 392, "dirichlet": [15, 412, 986], "discount": 987, "discoveri": [406, 927, 928, 929], "discret": [128, 159, 306, 307, 997], "discrimin": [33, 34, 406, 981], "discriminant_analysi": [406, 547, 548, 1038, 1039, 1042, 1044, 1045, 1046], "discuss": 379, "disk": 17, "dispatch": 390, "displai": [98, 204, 229, 230, 240, 320, 321, 322, 388, 1027, 1046], "distanc": [80, 406], "distance_metr": 759, "distancemetr": 697, "distort": 98, "distribut": [11, 217, 220, 296, 309, 375, 397, 984, 997], "diverg": 412, "divid": 319, "do": [385, 392], "document": [0, 8, 19, 166, 317, 318, 350, 351, 352, 380, 395, 1007, 1008, 1011, 1026, 1030, 1033, 1034, 1037, 1038], "doe": 392, "domain": 1007, "donat": 0, "dot": [160, 417], "dotproduct": 612, "down": 385, "download": [17, 132, 164, 374], "drawback": 407, "drop": 121, "dtype": 322, "dummi": [406, 549, 550, 987, 1038, 1039, 1040, 1043, 1044, 1048], "dummyclassifi": 549, "dummyregressor": 550, "dump_svmlight_fil": 485, "dure": 362, "d\u00b2": 987, "each": [267, 272, 351, 976], "earli": [122, 127, 207], "earlier": 1030, "eas": 381, "easi": 380, "effect": [75, 127, 168, 225, 305, 310, 328, 356], "effici": [320, 322, 389], "efficiencywarn": 572, "eigenfac": [6, 95, 1019], "eigenmap": 984, "eigenvector": 17, "elast": [180, 184, 983], "elasticnet": [183, 316, 644], "elasticnetcv": 645, "element": 394, "elimin": [146, 147, 416, 976], "ellipsoid": [34, 246], "ellipt": 993, "ellipticenvelop": 467, "embed": [12, 52, 220, 221, 232, 293, 414, 984], "emeritu": 0, "empir": [61, 81, 232, 409], "empirical_covari": 475, "empiricalcovari": 468, "enable_halving_search_cv": 577, "enable_iterative_imput": 578, "encod": [53, 121, 311, 312, 321, 997, 998], "enet_path": 679, "enforc": [1041, 1043], "engin": [4, 13, 171, 1007, 1012], "enhanc": [320, 395, 1007, 1033, 1034, 1035, 1036, 1037], "enrich": 322, "ensembl": [110, 116, 120, 166, 319, 406, 414, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "enthought": 397, "entir": 392, "entri": 1000, "envelop": 993, "environ": 367, "equival": 260, "error": [111, 115, 122, 124, 138, 178, 203, 257, 273, 388, 397, 983, 987], "establish": [64, 175], "estim": [69, 77, 78, 79, 80, 81, 82, 107, 109, 114, 121, 123, 131, 157, 164, 166, 178, 202, 205, 230, 235, 237, 238, 249, 268, 278, 287, 288, 296, 315, 316, 317, 320, 322, 362, 382, 392, 393, 394, 403, 406, 408, 409, 411, 413, 414, 976, 977, 981, 983, 987, 1002, 1007, 1016, 1018, 1020, 1031, 1038, 1039, 1040], "estimate_bandwidth": 456, "estimator_check": [930, 931], "estimator_html_repr": 932, "euclidean_dist": 760, "evalu": [13, 37, 58, 61, 81, 199, 238, 261, 264, 302, 311, 352, 393, 402, 404, 407, 411, 414, 976, 982, 987, 1023], "evernot": 1012, "exact": 412, "exampl": [3, 6, 9, 53, 59, 75, 88, 101, 109, 128, 158, 166, 195, 196, 203, 343, 347, 368, 374, 375, 385, 392, 396, 398, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 424, 427, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 502, 504, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 579, 580, 582, 585, 586, 587, 588, 589, 591, 592, 595, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 615, 616, 617, 620, 621, 623, 625, 626, 628, 629, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 650, 651, 653, 654, 655, 656, 657, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 686, 687, 688, 689, 690, 691, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 707, 710, 711, 715, 716, 717, 724, 726, 729, 731, 732, 734, 735, 738, 739, 742, 743, 745, 746, 747, 749, 750, 752, 754, 758, 775, 776, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 852, 855, 856, 857, 858, 859, 860, 863, 864, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 885, 888, 892, 893, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 913, 914, 922, 931, 933, 940, 944, 945, 946, 947, 948, 961, 971, 976, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1014, 1020, 1021, 1022, 1027, 1030], "except": [389, 406, 569, 570, 571, 572, 573, 574, 575, 576, 1042, 1046], "execut": [362, 392], "exercis": [137, 138, 139, 140, 166, 1018, 1021, 1023], "exhaust": 976, "exist": 380, "exp": [160, 417], "expans": 178, "expect": [170, 317, 994], "experi": [0, 37, 379, 395], "experiment": [320, 384, 403, 406, 577, 578, 1046], "explain": 987, "explained_variance_scor": 725, "explicit": 233, "explor": 4, "exponenti": 614, "export": 392, "export_graphviz": 911, "export_text": 912, "expsinesquar": 613, "extend": 983, "extens": [386, 397], "extern": [374, 1006, 1014, 1030, 1039], "extmath": [933, 934, 935, 936, 937, 938], "extract": [15, 74, 98, 217, 261, 352, 366, 368, 406, 415, 1023], "extract_patches_2d": 582, "extrapol": 156, "extratreeclassifi": 909, "extratreeregressor": 910, "extratreesclassifi": 555, "extratreesregressor": 556, "extrem": [385, 414], "f": [143, 987], "f1": 267, "f1_score": 726, "f_classif": 603, "f_regress": 604, "fa": [95, 102], "face": [6, 50, 95, 237, 375, 1012, 1019], "factor": [15, 95, 102, 105, 289, 290, 412, 993], "factoranalysi": 530, "fail": 385, "failur": [168, 976], "fast_logdet": 934, "faster": [320, 414], "fastica": [95, 96, 97, 419, 531], "fbeta_scor": 727, "featur": [4, 13, 51, 54, 74, 100, 116, 118, 119, 121, 125, 127, 129, 130, 142, 144, 146, 147, 148, 166, 171, 172, 175, 178, 193, 196, 217, 233, 239, 261, 302, 306, 307, 310, 311, 315, 317, 318, 341, 351, 352, 366, 368, 380, 384, 398, 406, 408, 414, 415, 416, 977, 995, 997, 1004, 1022, 1023, 1033, 1034, 1035, 1036, 1037], "feature_extract": [406, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "feature_select": [406, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "featureagglomer": [407, 443], "featurehash": [353, 580], "featureunion": [408, 858], "fedora": 397, "fetch_20newsgroup": 486, "fetch_20newsgroups_vector": 487, "fetch_california_h": 488, "fetch_covtyp": 489, "fetch_kddcup99": 490, "fetch_lfw_pair": 491, "fetch_lfw_peopl": 492, "fetch_olivetti_fac": 493, "fetch_openml": [320, 494], "fetch_rcv1": 495, "fetch_species_distribut": 496, "file": [17, 397, 415, 1023], "final": [57, 151], "find": 990, "first": [9, 37, 380], "fit": [20, 26, 57, 96, 102, 118, 119, 124, 125, 156, 178, 179, 180, 193, 196, 201, 205, 267, 281, 290, 295, 312, 345, 362, 382, 393, 398, 403, 414, 989, 993, 1014], "fitfailedwarn": 573, "fix": [37, 384, 1030, 1033, 1034, 1035, 1036, 1037, 1043], "flag": 388, "flexibl": [318, 977], "fold": [388, 411], "footprint": 53, "forc": [976, 990], "forecast": [13, 156], "forest": [115, 117, 118, 119, 131, 171, 172, 238, 241, 322, 375, 414, 993], "forg": 378, "format": [374, 385, 392, 401, 988], "formul": [404, 414, 981, 990, 1001, 1002, 1003], "four": 66, "fowlk": 407, "fowlkes_mallows_scor": 728, "framework": 1007, "free": 158, "freebsd": 378, "freez": 392, "french": 199, "frequenc": [217, 1023], "frequent": 392, "frequentist": 260, "frobeniu": 412, "from": [12, 98, 148, 171, 311, 315, 367, 374, 378, 392, 406, 415, 987, 1014, 1021, 1022, 1023, 1040], "from_estim": [436, 629, 630, 695, 696, 698, 699, 700, 802, 818], "from_predict": [695, 698, 699, 700], "fruit": 379, "fulli": 168, "function": [10, 34, 160, 189, 203, 204, 209, 221, 255, 273, 317, 341, 353, 389, 406, 411, 414, 417, 979, 983, 987, 1002, 1021, 1047], "functiontransform": 863, "fund": 0, "futur": 392, "futurewarn": 1040, "gain": 987, "gamma": [217, 321, 987], "gammaregressor": 646, "gaussian": [24, 25, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 244, 245, 246, 249, 250, 251, 305, 406, 417, 986, 989, 997, 999], "gaussian_process": [406, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "gaussianmixtur": 795, "gaussiannb": 837, "gaussianprocessclassifi": 608, "gaussianprocessregressor": 609, "gaussianrandomproject": 891, "gdb": 386, "gen_batch": 939, "gen_even_slic": 940, "gener": [13, 20, 24, 34, 38, 47, 49, 55, 57, 63, 64, 66, 67, 78, 80, 82, 91, 92, 96, 97, 98, 118, 128, 144, 147, 151, 157, 158, 160, 166, 177, 178, 179, 183, 193, 199, 201, 234, 250, 257, 273, 290, 295, 302, 316, 325, 345, 346, 362, 376, 380, 394, 406, 412, 414, 983, 997, 1008, 1018], "genericunivariateselect": 590, "get": [362, 392, 393], "get_config": 624, "get_data_hom": 497, "get_feature_names_out": 319, "get_param": 382, "get_routing_for_object": 946, "get_scor": 729, "get_scorer_nam": 730, "git": 380, "github": 380, "gitter": 1011, "glm": 406, "glossari": 394, "gmm": [247, 248], "goal": 1008, "good": [380, 385], "govern": [0, 395], "gpc": [152, 153, 154, 155, 417], "gperftool": 386, "gpr": [156, 157, 417], "gprof": 386, "gpu": 392, "gradient": [4, 117, 121, 122, 123, 124, 125, 126, 127, 170, 199, 207, 213, 315, 316, 318, 320, 321, 414, 983, 1001], "gradientboostingclassifi": [414, 557], "gradientboostingregressor": [414, 558], "gram": 180, "graph": [12, 315, 389, 392, 406, 407, 415, 941], "graphic": [392, 992], "graphical_lasso": 476, "graphicallasso": 469, "graphicallassocv": 470, "greek": 46, "grid": [240, 258, 260, 268, 271, 976, 1018, 1023], "grid_to_graph": 583, "gridsearchcv": [72, 138, 264, 796], "ground": [37, 178], "group": [319, 321, 411, 1012, 1022], "groupkfold": 797, "groupshufflesplit": 798, "grow": 37, "guid": [383, 1025], "guidelin": [380, 382], "halv": [271, 272, 317, 976], "halvinggridsearchcv": 799, "halvingrandomsearchcv": 800, "ham": 987, "hamming_loss": 731, "hand": 32, "handl": [172, 406, 977], "handwritten": [58, 221, 377], "harabasz": 407, "hard": 414, "has_fit_paramet": 975, "hash": [130, 389, 415], "hashingvector": [352, 587], "haversine_dist": 761, "hdbscan": [55, 321, 407, 444], "help": [379, 380, 392], "helper": [10, 160, 221, 389], "here": [360, 1023], "hessian": 984, "heterogen": [70, 408], "hierarch": [41, 47, 62, 67, 321, 407, 1022], "hierarchi": 407, "high": 1021, "higher": 367, "highlight": [166, 314, 315, 316, 317, 318, 319, 320, 321, 322, 1030, 1033, 1034, 1037, 1038], "hing": 987, "hinge_loss": 732, "histgradientboost": [317, 322], "histgradientboostingclassifi": [414, 559], "histgradientboostingregressor": [319, 560], "histogram": [117, 127, 316, 318, 320, 413, 414], "histori": [0, 1028], "hmm": 392, "hole": 224, "home": 260, "homebrew": 378, "homogen": 407, "homogeneity_completeness_v_measur": 733, "homogeneity_scor": 734, "hot": 121, "hour": 13, "hourli": 168, "hous": [121, 238, 375], "how": [138, 362, 380, 386, 392], "howaboutw": 1012, "html": [230, 382], "huber": 983, "huberregressor": [181, 647], "hug": 1012, "hyper": [124, 258, 317, 406, 976], "hyperparamet": [55, 156, 157, 261, 268, 278, 615], "hyperplan": [211, 339, 340], "i": [360, 385, 392, 411, 1012], "ic": [170, 994], "ica": [96, 412, 1022], "id3": 1003, "identif": 1023, "idf": 415, "illustr": [72, 155, 160, 293, 417], "imag": [5, 47, 50, 53, 66, 98, 374, 392, 406, 415, 581, 582, 583, 584, 585], "img_to_graph": 584, "impact": [4, 61, 1045, 1046, 1047], "implement": [109, 185, 392, 987, 990, 1001, 1002], "import": [118, 119, 125, 148, 171, 172, 233, 278, 310, 315, 414, 995], "improv": [316, 317, 318, 319, 320, 322, 379, 380, 1033, 1034], "impur": [118, 119, 171, 356, 995], "imput": [162, 163, 164, 166, 315, 406, 625, 626, 627, 628, 977, 997, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "includ": 392, "inclus": 392, "incom": 168, "inconsist": 362, "inconsistentversionwarn": 574, "incr_mean_variance_axi": 962, "increment": [99, 368, 412], "incrementalpca": 532, "independ": [95, 412, 1022], "index": [407, 942], "indic": 255, "individu": [135, 170, 317, 994], "induct": 56, "infer": 168, "influenc": [7, 10, 366], "infonea": 1012, "inform": [143, 164, 187, 188, 384, 406, 407, 976, 983], "infrastructur": 0, "infrequ": [319, 321, 997], "init": 382, "initi": [59, 61, 248], "inplace_column_scal": 963, "inplace_csr_column_scal": 964, "inplace_csr_row_normalize_l1": 969, "inplace_csr_row_normalize_l2": 970, "inplace_row_scal": 965, "inplace_swap_column": 966, "inplace_swap_row": 967, "input": [366, 382, 403, 406, 407, 997], "inria": 1012, "inspect": [166, 167, 396, 406, 629, 630, 631, 632, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "instal": [378, 397], "instanc": [362, 368], "instanti": 382, "instruct": 378, "insur": 217, "integr": 380, "intel": 397, "interact": [4, 170, 320, 414, 1021], "interfac": [398, 406], "intern": 312, "internet": 12, "interoper": [401, 1007], "interpol": 200, "interpret": [156, 169, 203, 238, 281, 412, 414], "interv": 124, "introduc": 242, "introduct": [984, 1014], "introductori": 158, "invari": [55, 263], "invers": [82, 409, 999], "inverse_transform": 1022, "iri": [90, 101, 103, 120, 153, 208, 330, 335, 357, 377, 417, 1020], "iris": 1021, "is_classifi": 433, "is_multilabel": 949, "is_regressor": 434, "iso": [154, 267], "isol": 993, "isolationforest": [128, 561], "isomap": [220, 221, 686, 984], "isoton": [231, 405, 406, 633, 634, 635, 978, 1038, 1039, 1040, 1042, 1044, 1045], "isotonic_regress": 635, "isotonicregress": 633, "issu": [379, 380], "iter": [164, 272, 411, 976], "iterativeimput": [163, 625, 977], "j": 1012, "jaccard": 987, "jaccard_scor": 735, "job": 392, "joblib": [367, 386], "johnson": [232, 999], "johnson_lindenstrauss_min_dim": 893, "joint": 193, "k": [43, 45, 48, 57, 58, 59, 61, 64, 67, 85, 286, 310, 352, 407, 411, 987, 990, 997, 1021, 1022], "k_mean": 457, "kappa": 987, "kbinsdiscret": [306, 308, 864], "kcachegrind": 386, "kddcup": 375, "kddcup99": 238, "kdtree": [840, 990], "keep": 977, "kernel": [4, 5, 100, 151, 156, 157, 159, 160, 166, 174, 175, 233, 234, 287, 288, 296, 317, 334, 337, 342, 345, 406, 412, 413, 417, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 979, 980, 985, 997, 1002, 1021], "kernel_approxim": [406, 636, 637, 638, 639, 640, 1040, 1042, 1043, 1044, 1045, 1046], "kernel_metr": 762, "kernel_ridg": [406, 641, 1047], "kernelcenter": 865, "kerneldens": 844, "kernelpca": [100, 533], "kernelridg": 641, "keyword": [318, 1041, 1043], "kfold": 801, "kmean": [60, 64, 316, 445], "kmeans_plusplu": 458, "kneighbors_graph": 852, "kneighborsclassifi": 841, "kneighborsregressor": 842, "kneighborstransform": 843, "knn": [164, 315], "knnimput": 626, "knowledg": 381, "known": [384, 1038, 1039], "kpca": 412, "l": 179, "l1": [14, 183, 190, 192, 215, 346, 416], "l1_min_c": 906, "l2": [203, 346], "label": [37, 267, 325, 326, 327, 375, 376, 406, 407, 411, 414, 987, 998, 1000], "label_binar": 883, "label_ranking_average_precision_scor": 736, "label_ranking_loss": 737, "labelbinar": [866, 998], "labelencod": 867, "labelpropag": 894, "labelspread": 895, "lag": 13, "languag": 1023, "laplacian": 985, "laplacian_kernel": 763, "lar": [186, 648, 983], "larg": 415, "lars_path": 680, "lars_path_gram": 681, "larscv": 649, "lasso": [14, 183, 184, 185, 186, 187, 188, 193, 316, 650, 983], "lasso_path": 682, "lassocv": 651, "lassolar": 652, "lassolars": 654, "lassolarscv": 653, "latenc": [10, 366], "latent": [15, 85, 412], "latentdirichletalloc": 534, "latest": 397, "layer": [170, 299, 991], "lda": [34, 103, 412, 981], "leakag": 362, "learn": [0, 5, 12, 50, 95, 98, 150, 166, 168, 169, 170, 175, 219, 220, 221, 222, 234, 235, 255, 262, 293, 300, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 365, 366, 368, 376, 378, 380, 381, 382, 384, 385, 392, 395, 397, 406, 412, 414, 982, 984, 992, 1000, 1005, 1007, 1008, 1010, 1012, 1014, 1015, 1017, 1020, 1021, 1022, 1023, 1024, 1026], "learner": [111, 414], "learning_curv": 823, "learningcurvedisplai": 802, "least": [86, 124, 188, 194, 197, 983], "leav": [356, 411, 983], "leaveonegroupout": 803, "leaveoneout": 804, "leavepgroupsout": 805, "leavepout": 806, "ledoit": [33, 79, 409], "ledoit_wolf": 477, "ledoit_wolf_shrinkag": 478, "ledoitwolf": [78, 471], "lemma": 999, "length": [128, 397], "lesson": [168, 169], "level": [156, 157, 367, 407, 414], "liabil": 199, "librari": [366, 367], "libsvm": 374, "likelihood": [78, 178, 179, 263, 987, 992], "limit": [121, 151, 366, 397, 401, 415], "lindenstrauss": [232, 999], "line": [138, 154], "linear": [4, 25, 33, 34, 124, 151, 166, 169, 177, 178, 195, 199, 202, 205, 220, 221, 233, 316, 337, 342, 344, 345, 366, 389, 392, 406, 981, 983, 984, 985, 997, 1021], "linear_kernel": 764, "linear_model": [406, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lineardiscriminantanalysi": [320, 547], "linearregress": [201, 655], "linearsvc": [336, 899], "linearsvr": 900, "link": [366, 374, 987], "linkag": [62, 407], "linnerrud": 377, "linux": [378, 392, 397], "list": [37, 1011], "loa": 156, "load": [5, 7, 17, 50, 58, 90, 117, 119, 121, 125, 138, 148, 171, 192, 217, 221, 229, 233, 241, 261, 269, 270, 281, 286, 310, 311, 338, 341, 351, 352, 353, 373, 374, 385, 392, 415, 1014, 1022, 1023], "load_breast_canc": 498, "load_diabet": 499, "load_digit": 500, "load_fil": 501, "load_iri": 502, "load_linnerud": 503, "load_sample_imag": [504, 505], "load_svmlight_fil": [506, 507], "load_win": 508, "loader": 406, "local": [220, 221, 289, 290, 984, 993], "locally_linear_embed": 691, "locallylinearembed": 687, "localoutlierfactor": 845, "lof": [289, 290], "log": [178, 179, 987], "log_loss": 738, "logarithm": 987, "logist": [73, 182, 189, 190, 191, 192, 214, 215, 983, 1021], "logisticregress": [281, 656], "logisticregressioncv": 657, "loo": 411, "look": [13, 234, 345], "loss": [127, 199, 209, 316, 319, 321, 414, 987, 1047], "lot": 392, "love": 1012, "low": [407, 414, 416], "lower": 367, "lpo": 411, "lsa": 352, "mac": 397, "machin": [150, 166, 168, 169, 170, 302, 333, 388, 406, 992, 1002, 1014, 1021], "machinali": 1012, "maco": 378, "macport": 397, "macro": 269, "mahalanobi": 80, "mail": 1011, "main": [8, 199], "maintain": [380, 384, 395, 401], "major": [384, 414, 1038, 1039], "make": [132, 135, 164, 380, 384, 395], "make_biclust": 509, "make_blob": [385, 510], "make_checkerboard": 511, "make_circl": 512, "make_classif": [385, 513], "make_column_selector": 464, "make_column_transform": 465, "make_friedman1": 514, "make_friedman2": 515, "make_friedman3": 516, "make_gaussian_quantil": 517, "make_hastie_10_2": 518, "make_low_rank_matrix": 519, "make_moon": 520, "make_multilabel_classif": 521, "make_pipelin": 860, "make_regress": [385, 522], "make_s_curv": 523, "make_scor": 739, "make_sparse_coded_sign": 524, "make_sparse_spd_matrix": 525, "make_sparse_uncorrel": 526, "make_spd_matrix": 527, "make_swiss_rol": 528, "make_union": 861, "mallow": 407, "manag": [367, 397], "manhattan_dist": 765, "mani": [255, 320, 367, 392, 1047], "manifold": [166, 219, 220, 221, 222, 376, 406, 686, 687, 688, 689, 690, 691, 692, 693, 694, 984, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "map": [233, 309, 997], "mar": 1012, "margin": [178, 179, 211, 339, 343], "mark": 977, "markdown": 385, "market": [12, 1019], "match": [198, 983], "matern": 617, "mathemat": [404, 406, 414, 979, 981, 990, 994, 1001, 1002, 1003], "matric": [389, 406, 997], "matrix": [15, 17, 159, 180, 254, 406, 407, 412, 987], "matter": 169, "matthew": 987, "matthews_corrcoef": 740, "mat\u00e9rn": [160, 417], "max": [78, 987], "max_error": 741, "maxabs_scal": 884, "maxabsscal": [305, 868], "maximum": [211, 339, 992], "md": [688, 984], "mdi": [119, 171], "mean": [43, 45, 48, 57, 58, 59, 61, 63, 64, 118, 119, 164, 171, 203, 352, 407, 987, 997, 1022], "mean_absolute_error": 742, "mean_absolute_percentage_error": 743, "mean_gamma_devi": 744, "mean_pinball_loss": 745, "mean_poisson_devi": 746, "mean_shift": 459, "mean_squared_error": 747, "mean_squared_log_error": 748, "mean_tweedie_devi": 749, "mean_variance_axi": 968, "meanshift": [63, 446], "measur": [132, 263, 407, 987], "media": 1011, "median": [983, 987], "median_absolute_error": 750, "member": 379, "memori": [53, 322, 366, 386, 388], "merg": 384, "meson": [388, 1048], "messag": 260, "meta": [131, 278, 317, 406, 414], "metadata": [235, 321, 322, 351, 394, 398, 406, 1047, 1048], "metadata_rout": [943, 944, 945, 946, 947], "metadatarequest": 943, "metadatarout": 944, "metaestim": 948, "metaestimatormixin": 427, "method": [62, 74, 85, 110, 151, 166, 220, 222, 248, 277, 280, 394, 406, 407, 979, 993, 994, 1022], "methodmap": 945, "metric": [37, 40, 124, 264, 403, 406, 407, 411, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 976, 985, 987, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "micro": [267, 269], "min_cluster_s": 55, "min_po": 916, "min_resourc": 976, "min_sampl": 55, "mincovdet": 472, "mini": [407, 412], "minibatchdictionarylearn": 535, "minibatchkmean": [42, 64, 95, 447], "minibatchnmf": [319, 536], "minibatchsparsepca": [95, 412, 537], "minim": [385, 1003, 1043, 1044], "minimum": [81, 409], "minmax_scal": 885, "minmaxscal": [305, 869], "minor": 384, "misc": 1030, "miscellan": [166, 227, 406, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "mislead": 995, "miss": [127, 162, 163, 164, 166, 315, 321, 322, 414, 977, 997, 1003], "missingind": 627, "mix": 71, "mixin": 382, "mixtur": [166, 244, 245, 246, 249, 250, 251, 406, 794, 795, 986, 1038, 1039, 1043, 1044, 1046, 1048], "mlp": 301, "mlpclassifi": [300, 856], "mlpregressor": 857, "mnist": [215, 301], "mode": [85, 366], "model": [4, 7, 11, 13, 57, 75, 85, 96, 102, 117, 118, 119, 121, 122, 125, 128, 147, 148, 151, 156, 166, 169, 170, 171, 175, 177, 178, 183, 187, 188, 193, 199, 202, 217, 229, 234, 238, 239, 244, 246, 250, 251, 253, 259, 260, 262, 267, 281, 290, 295, 302, 310, 316, 318, 322, 342, 345, 351, 366, 382, 392, 393, 395, 401, 402, 406, 411, 976, 982, 983, 986, 987, 989, 991, 992, 1014, 1018, 1021, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "model_select": [321, 406, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "modifi": 984, "modul": [1030, 1038, 1039, 1045, 1046, 1047], "mona": 156, "monitor": 380, "monoton": [127, 129, 322, 414], "more": [318, 392, 401, 991], "morgan": 1012, "most": 325, "motor": 199, "movi": 1023, "mp": 403, "much": 138, "multi": [55, 111, 131, 170, 193, 208, 223, 237, 264, 267, 299, 359, 386, 406, 983, 984, 987, 991, 1002, 1003], "multiclass": [166, 214, 269, 277, 278, 315, 389, 405, 406, 827, 828, 829, 949, 950, 951, 987, 988, 1014, 1021, 1039, 1042, 1043, 1044], "multicollinear": 172, "multidimension": 220, "multilabel": [92, 236, 281, 376, 389, 406, 987, 988, 1014], "multilabel_confusion_matrix": 751, "multilabelbinar": [870, 998], "multinomi": [191, 215, 983, 989], "multinomialnb": 838, "multioutput": [166, 280, 406, 830, 831, 832, 833, 988, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048], "multioutputclassifi": [831, 988], "multioutputregressor": [832, 988], "multipl": [74, 240, 264, 362, 387, 411, 976, 977, 987, 1038, 1039], "multitaskelasticnet": 658, "multitaskelasticnetcv": 659, "multitasklasso": 660, "multitasklassocv": 661, "multivari": [85, 977], "murmurhash3_32": 952, "mutual": [143, 407], "mutual_info_classif": 605, "mutual_info_regress": 606, "mutual_info_scor": 752, "my": 392, "n_featur": 10, "n_job": 392, "naiv": [4, 13, 24, 25, 406, 989], "naive_bay": [406, 834, 835, 836, 837, 838, 1038, 1040, 1041, 1042, 1043, 1045, 1046], "name": [129, 318, 392, 408], "nan": 977, "nan_euclidean_dist": 766, "nativ": [121, 311, 315, 317, 322], "ndcg_score": 753, "nearest": [67, 166, 283, 284, 285, 286, 291, 294, 295, 315, 406, 977, 990, 1021], "nearestcentroid": 846, "nearestneighbor": 847, "necessari": 385, "need": 392, "neg": [15, 95, 148, 194, 412, 983], "neighbor": [67, 166, 220, 283, 284, 285, 286, 291, 295, 310, 315, 406, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 977, 984, 990, 1021, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "neighborhood": [291, 292, 293, 990], "neighborhoodcomponentsanalysi": 848, "nest": [265, 408, 1018], "net": [180, 184, 983], "netbsd": 397, "network": [166, 170, 298, 406, 991, 992], "neural": [166, 170, 298, 406, 991, 992], "neural_network": [406, 855, 856, 857, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "new": [315, 317, 318, 320, 321, 380, 392, 1006, 1030, 1031, 1033, 1034, 1035, 1036, 1037], "newsgroup": [70, 351, 375, 1023], "next": [13, 393], "nightli": 378, "nmf": [95, 319, 412, 538], "nnmf": 412, "nois": [157, 158, 179], "noisi": [98, 158, 203], "non": [4, 15, 95, 124, 194, 199, 203, 220, 265, 337, 344, 345, 412, 983, 997], "non_negative_factor": 545, "none": 362, "norm": 412, "normal": [33, 175, 199, 305, 309, 406, 871, 886, 987, 997], "normalized_mutual_info_scor": 754, "note": [368, 403, 411], "notfittederror": 575, "novelti": [289, 993, 1002], "now": [315, 318, 1040], "number": [37, 60, 121, 127, 147, 272, 366, 382, 976, 977], "numer": [169, 367, 382], "numpi": [367, 385], "nusvc": 901, "nusvr": 902, "nystroem": [637, 979], "oa": [33, 78, 79, 420, 473], "object": [229, 255, 382, 392, 406, 976, 987, 1020, 1027], "observ": [168, 1021, 1022], "obtain": [392, 411], "occurr": 1023, "off": 983, "okcupid": 1012, "older": 1030, "olivetti": 375, "omp": 983, "one": [86, 121, 239, 983, 987], "oneclasssvm": 903, "onehotencod": [319, 872], "onetoonefeaturemixin": 428, "onevsoneclassifi": [827, 988], "onevsrestclassifi": [281, 828, 988], "onli": [196, 216, 1041, 1043], "onlin": [50, 206, 318, 319, 1001], "oob": 115, "open": 1019, "openml": [5, 311, 315, 374], "openmp": [367, 381], "oper": [269, 270, 379, 389, 406, 417, 987], "optic": [65, 377, 407, 448], "optim": [386, 406, 976], "optimis": 157, "option": 382, "oracl": 409, "ordin": 121, "ordinalencod": [321, 873], "ordinari": [197, 983], "org": [374, 384, 1012], "origin": [53, 100, 266, 293, 305], "orthogon": [198, 983], "orthogonal_mp": 683, "orthogonal_mp_gram": 684, "orthogonalmatchingpursuit": 662, "orthogonalmatchingpursuitcv": 663, "osx": [392, 397], "other": [311, 374, 392, 414, 1007, 1030], "otto": 1012, "our": [58, 255, 258, 380], "out": [8, 123, 368, 388, 411, 976, 983, 989], "outdat": 388, "outlier": [9, 181, 216, 228, 238, 289, 290, 305, 406, 983, 993, 997], "outliermixin": 429, "outlin": 995, "output": [131, 237, 305, 320, 322, 359, 1003, 1021], "outputcodeclassifi": [829, 988], "over": 240, "overfit": 274, "overhead": 366, "oversubscript": 367, "overview": [278, 387, 407, 993], "ovo": 269, "ovr": 269, "own": [382, 392, 987], "p": [411, 1012], "packag": [233, 1007, 1042], "pair": 407, "pair_confusion_matrix": 713, "paired_cosine_dist": 767, "paired_dist": 768, "paired_euclidean_dist": 769, "paired_manhattan_dist": 770, "pairwis": [4, 260, 406, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 985], "pairwise_dist": 775, "pairwise_distances_argmin": 776, "pairwise_distances_argmin_min": 777, "pairwise_distances_chunk": 778, "pairwise_kernel": 771, "pairwisekernel": 618, "panda": [320, 385, 392], "parallel": [119, 367, 386, 406, 407, 414, 953, 954, 976], "parallel_backend": 955, "paramet": [7, 78, 124, 258, 317, 338, 346, 380, 382, 393, 394, 406, 408, 414, 976, 983, 987, 1002, 1014, 1018, 1023], "parametergrid": 807, "parametersampl": 808, "parametr": 992, "parametrize_with_check": 931, "pariba": 1012, "paristech": 1012, "pariti": 64, "parser": [320, 374], "part": [50, 416], "parti": [199, 235, 397], "partial": [86, 168, 170, 239, 994], "partial_depend": 631, "partialdependencedisplai": 630, "partit": 175, "passiv": 983, "passiveaggressiveclassifi": 664, "passiveaggressiveregressor": 665, "past": 0, "patch": [98, 415], "patchextractor": 581, "path": [128, 186, 192, 204, 360, 397], "pattern": 105, "pca": [5, 58, 73, 90, 95, 96, 99, 100, 101, 102, 103, 310, 322, 412, 539, 1004, 1022], "pdp": 170, "peerindex": 1012, "penalti": [190, 210, 346], "peopl": [392, 1030, 1031, 1032, 1033], "per": 352, "percentag": 987, "percentil": 341, "perceptron": [170, 299, 666, 983, 991], "perform": [37, 43, 263, 310, 317, 319, 325, 352, 366, 380, 381, 407, 411, 1023], "period": [4, 200], "permiss": 392, "permut": [118, 171, 172, 266, 315, 411, 995], "permutation_import": 632, "permutation_test_scor": 824, "perplex": 225, "persist": 401, "phimeca": 1012, "pictur": 46, "pinbal": 987, "pipelin": [69, 70, 72, 73, 132, 145, 166, 169, 230, 235, 240, 261, 311, 341, 382, 392, 393, 406, 408, 416, 858, 859, 860, 861, 1004, 1019, 1023, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "pitfal": [169, 362], "pixel": 119, "pl": 85, "plai": 341, "plan": 392, "plant": 377, "platform": [378, 388, 397], "plot": [7, 8, 10, 20, 24, 30, 34, 38, 41, 47, 49, 50, 57, 63, 64, 66, 67, 78, 82, 85, 90, 91, 92, 96, 97, 112, 117, 120, 125, 128, 132, 133, 134, 135, 138, 147, 164, 170, 178, 179, 183, 191, 192, 193, 203, 204, 208, 221, 229, 233, 238, 239, 241, 250, 256, 257, 262, 264, 267, 269, 273, 275, 281, 290, 302, 311, 315, 317, 318, 325, 335, 336, 341, 342, 351, 357, 387, 406, 982, 994, 1027], "plot_tre": 913, "pls1": 85, "pls2": 85, "plscanon": [410, 481], "plsregress": [410, 482], "plssvd": [410, 483], "point": [97, 293], "poisson": [199, 217, 316, 317, 987], "poissonregressor": 667, "polar": [13, 322], "polynomi": [4, 175, 178, 179, 200, 342, 979, 983, 985, 997, 1021], "polynomial_kernel": 772, "polynomialcountsketch": [317, 638], "polynomialfeatur": 874, "posit": [95, 318], "possibl": [57, 385], "post": [263, 356], "post1": 1040, "posterior": 160, "power": [86, 199], "power_transform": 887, "powertransform": [305, 875], "pr": [379, 384], "practic": [260, 362, 381, 385, 984, 991, 1001, 1002, 1003], "pre": [263, 362, 393], "precis": [267, 987], "precision_recall_curv": 779, "precision_recall_fscore_support": 780, "precision_scor": 781, "precisionrecalldisplai": [229, 698], "precomput": [104, 180, 315, 412], "predefin": [411, 987], "predefinedsplit": 809, "predict": [4, 10, 13, 24, 86, 112, 124, 135, 152, 168, 179, 199, 234, 256, 267, 325, 366, 392, 393, 411, 417, 987, 998, 1014, 1021], "predictionerrordisplai": 699, "predictor": 132, "premium": 217, "prepar": [95, 112, 122, 127, 175, 220, 269, 270, 310, 338, 384], "preprocess": [125, 132, 166, 169, 170, 238, 240, 304, 321, 353, 362, 392, 406, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 997, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "preprocessor": 170, "preserv": 388, "preval": 263, "princip": [17, 86, 412, 1004, 1022], "prior": [14, 160, 245], "privat": 1047, "pro": 986, "probabilist": [102, 152, 412, 417], "probabl": [24, 25, 26, 30, 134, 154, 405, 406, 414, 1002], "problem": [169, 412, 1002, 1003, 1014, 1019, 1021, 1022], "process": [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 169, 362, 395, 406, 417, 986, 1017], "process_rout": 947, "processor": 393, "product": [160, 217, 388, 392, 417, 619], "profil": 386, "project": [0, 86, 100, 103, 232, 382, 392, 406, 999, 1004, 1007], "pronounc": 392, "propag": [12, 38, 325, 326, 327, 407, 1000], "proper": [13, 156], "properti": 394, "propos": 395, "provid": 385, "prune": [315, 356, 1003], "public": 1040, "publica": 1012, "pull": [380, 384, 388, 392], "pure": 217, "purpos": [203, 353, 1008], "pursuit": [198, 983], "put": 1019, "pypi": 392, "pytest": 388, "python": [233, 367, 386, 401, 1006, 1007], "pytorch": 403, "qda": [34, 981], "quadradt": 160, "quadrat": [34, 417, 981], "quadraticdiscriminantanalysi": 548, "qualit": [4, 13], "qualiti": [352, 987], "quantifi": [352, 987], "quantil": [13, 124, 127, 201, 318, 319, 983], "quantile_transform": 888, "quantileregressor": [201, 668], "quantiletransform": [305, 876], "quantiz": [48, 53, 1022], "question": [392, 1011], "r2_score": 782, "r_regress": 607, "radial": [160, 417, 979, 1021], "radius_neighbors_graph": 853, "radiusneighborsclassifi": 849, "radiusneighborsregressor": 850, "radiusneighborstransform": 851, "rand": 407, "rand_scor": 783, "random": [17, 95, 115, 117, 130, 131, 171, 172, 232, 241, 266, 268, 322, 362, 382, 389, 406, 411, 412, 414, 956, 976, 983, 999, 1004], "random_project": [406, 891, 892, 893, 1044], "random_st": 392, "randomforestclassifi": 562, "randomforestregressor": 563, "randomized_range_find": 935, "randomized_svd": 936, "randomizedsearchcv": 810, "randomli": [91, 92], "randomst": 362, "randomtreesembed": 564, "rang": 997, "rangespan": 1012, "rank": [199, 406, 987], "ransac": [202, 983], "ransacregressor": 669, "rate": 414, "ratio": [263, 987], "ration": [160, 417], "rationalquadrat": 621, "rbf": [233, 337, 338, 342, 417, 620, 985, 1002, 1021], "rbf_kernel": 773, "rbfsampler": 639, "rcv1": 375, "reachabl": 407, "read": 380, "real": [3, 9, 75, 166, 375], "recal": [267, 987], "recall_scor": 784, "receiv": [269, 270, 987], "recent": 406, "recogn": 32, "recognit": [6, 375, 377, 1019], "recommend": [362, 375, 1007], "reconstruct": [5, 14, 98], "reconstruct_from_patches_2d": 585, "recov": 178, "recurs": [146, 147, 416], "redirect": 17, "reduc": [58, 366], "reduct": [72, 220, 224, 240, 292, 310, 352, 981, 990, 1004], "refer": [5, 11, 25, 27, 80, 81, 98, 111, 114, 171, 175, 183, 187, 260, 265, 266, 278, 296, 374, 375, 404, 405, 406, 407, 409, 412, 414, 415, 416, 417, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 990, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002], "refit": [258, 1014], "region": [46, 260], "register_parallel_backend": 957, "regress": [4, 13, 73, 75, 85, 86, 112, 124, 125, 135, 151, 156, 157, 158, 159, 178, 179, 182, 188, 190, 191, 192, 195, 197, 199, 201, 214, 216, 217, 231, 234, 295, 345, 358, 359, 376, 406, 408, 417, 978, 980, 983, 987, 988, 990, 991, 1001, 1002, 1003, 1021], "regressor": [10, 112, 124, 178, 203, 312, 315, 318, 406, 414], "regressorchain": [833, 988], "regressormixin": 430, "regular": [43, 78, 126, 169, 192, 203, 204, 299, 346, 983, 991], "reinforc": 392, "relat": [4, 8, 374, 995, 1007, 1037], "releas": [166, 314, 315, 316, 317, 318, 319, 320, 321, 322, 384, 397, 1028], "relev": [80, 183, 983], "remark": [4, 57, 224, 232], "remot": 388, "remov": [392, 416, 997, 1030], "repeat": [362, 408, 411], "repeatedkfold": 811, "repeatedstratifiedkfold": 812, "replac": 164, "repli": 388, "report": [380, 385, 987], "repositori": 374, "represent": [90, 170, 230, 316, 366, 382, 415, 1022], "reproduc": [362, 385], "request": [380, 384, 388, 392], "resampl": 958, "rescal": 310, "reshap": [366, 1020], "resourc": [272, 367, 380, 976, 1006, 1011], "respect": 263, "respons": [85, 395], "rest": [191, 269], "restart": 386, "restrict": [302, 992], "result": [7, 8, 20, 27, 38, 47, 49, 50, 57, 58, 63, 64, 67, 78, 80, 82, 96, 97, 112, 117, 132, 135, 164, 175, 183, 204, 234, 238, 264, 273, 281, 290, 311, 345, 352, 362, 976], "retriev": [12, 315], "return": 403, "reuter": 8, "review": [379, 380, 388, 1023], "rfe": 591, "rfecv": 592, "rich": [230, 316], "ridg": [151, 179, 181, 197, 203, 204, 234, 312, 406, 670, 980, 983], "ridge_regress": 685, "ridgeclassifi": 672, "ridgeclassifiercv": 673, "ridgecv": 671, "right": 1016, "roadmap": 1008, "robust": [55, 80, 81, 178, 202, 205, 362, 406, 409, 976, 983], "robust_scal": 889, "robustscal": [305, 877], "roc": [241, 257, 269, 270, 315, 987], "roc_auc_scor": 785, "roc_curv": 786, "roccurvedisplai": [229, 700], "role": 395, "roll": [224, 382], "root_mean_squared_error": 787, "root_mean_squared_log_error": 788, "rotat": 105, "rout": [235, 321, 322, 394, 398, 406, 1047, 1048], "router": 235, "routin": [8, 367, 389], "rule": 987, "run": [7, 58, 264], "runtim": [322, 378], "r\u00b2": 987, "sa": 238, "safe_mask": 959, "safe_sparse_dot": 937, "safe_sqr": 960, "same": 1021, "sampl": [20, 38, 55, 63, 78, 96, 97, 144, 180, 212, 234, 261, 273, 295, 316, 345, 348, 374, 389, 394, 406, 414, 983], "sample_without_replac": 956, "saniti": 388, "save": 392, "scalabl": [175, 262, 316], "scale": [55, 169, 220, 223, 310, 346, 368, 890, 984, 993, 997, 1004], "scaler": 305, "scatter": [85, 90], "scenario": 983, "scientif": [1006, 1017], "scikit": [0, 235, 255, 315, 316, 317, 318, 319, 320, 321, 322, 365, 366, 378, 381, 382, 384, 385, 392, 395, 397, 406, 1005, 1007, 1008, 1012, 1014, 1015, 1020, 1023, 1026], "scipi": [367, 1047], "score": [17, 85, 117, 138, 147, 164, 178, 250, 259, 266, 267, 341, 398, 407, 411, 982, 987, 1002, 1018], "script": 385, "search": [240, 258, 260, 268, 271, 278, 393, 976, 1018, 1023], "second": [9, 37], "section": 1014, "secur": 401, "see": [265, 408], "seek": 1022, "segment": [46, 66], "select": [54, 60, 72, 102, 138, 142, 144, 147, 148, 166, 187, 188, 193, 250, 253, 341, 392, 398, 402, 406, 411, 416, 976, 983, 1018, 1036], "selectfdr": 593, "selectfpr": 594, "selectfrommodel": [416, 595], "selectfw": 596, "selectkbest": 597, "selectormixin": 599, "selectpercentil": 598, "self": [317, 328, 1000], "selftrainingclassifi": 896, "semant": 412, "semi": [166, 324, 325, 329, 330, 406, 1000], "semi_supervis": [406, 894, 895, 896, 1040, 1041, 1042, 1046], "sen": [216, 983], "sens": 14, "sentiment": 1023, "separ": [96, 211, 339, 340], "sequenc": [159, 392], "sequenti": [148, 416], "sequentialfeatureselector": [317, 600], "seri": [13, 193, 411], "serial": 401, "set": [9, 75, 78, 101, 132, 164, 203, 267, 338, 356, 392, 406, 411, 983, 1014, 1020, 1021, 1023], "set_config": 897, "set_output": [242, 320, 322, 382], "set_param": 382, "setup": 1023, "sever": [217, 222], "sgd": [208, 209, 210, 211, 212, 983, 1001], "sgdclassifi": 674, "sgdoneclasssvm": 675, "sgdregressor": 676, "shape": [225, 1014], "share": [4, 13, 170], "shift": [63, 407], "ship": 1020, "should": 392, "show": [138, 269], "show_vers": 898, "shrinkag": [78, 409, 414, 981, 1021], "shrunk": 409, "shrunk_covari": 479, "shrunkcovari": 474, "shrunken": 990, "shuffl": [411, 961], "shufflesplit": 813, "sigmoid": [342, 405, 985, 1021], "sigmoid_kernel": 774, "signal": [183, 412, 1022], "signific": 266, "silhouett": [60, 407], "silhouette_sampl": 789, "silhouette_scor": 790, "similar": [159, 985, 987], "simpl": [109, 151, 235, 288, 386, 1020], "simpleimput": 628, "simul": 168, "sine": [160, 251, 417], "singl": [114, 132, 217, 229, 376, 407, 977], "single_source_shortest_path_length": 941, "singular": [17, 412], "sinusoid": 179, "site": 384, "size": 414, "sketch": 979, "skew": 979, "skewedchi2sampl": 640, "sklearn": [406, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sklearn_assume_finit": 367, "sklearn_build_enable_debug_symbol": 367, "sklearn_enable_debug_cython_direct": 367, "sklearn_pairwise_dist_chunk_s": 367, "sklearn_run_float32_test": 367, "sklearn_se": 367, "sklearn_skip_network_test": 367, "sklearn_tests_global_random_se": 367, "sklearn_warnings_as_error": 367, "sklearn_working_memori": 367, "skop": 401, "slep": 395, "smacof": 692, "small": 385, "sne": [225, 984], "so": 392, "social": 1011, "soft": 414, "solido": 1012, "solut": 57, "solv": [1021, 1022], "solver": [206, 412, 983], "some": 341, "someth": 385, "sometim": 392, "sort_graph_by_row_valu": 854, "sourc": [70, 96, 378], "space": [12, 100, 408, 976, 984], "spars": [82, 95, 104, 169, 183, 185, 214, 315, 322, 351, 352, 389, 406, 409, 412, 416, 997, 999, 1001, 1047], "sparse_encod": 546, "sparsecod": 540, "sparsefunc": [962, 963, 964, 965, 966, 967, 968, 1039], "sparsefuncs_fast": [969, 970], "sparsepca": [412, 541], "sparserandomproject": 892, "sparsiti": [190, 196, 415, 1021], "spawn": 367, "speci": [11, 296, 375], "special": 353, "specif": [269, 378, 382, 401, 976, 1007, 1008], "specifi": [129, 392, 976], "spectral": [19, 20, 21, 66, 220, 404, 407, 984], "spectral_clust": 460, "spectral_embed": 693, "spectralbiclust": [20, 449], "spectralclust": 450, "spectralcoclust": 451, "spectralembed": 689, "speed": [10, 386], "sphere": 222, "spline": [4, 200, 318, 997], "splinetransform": 878, "split": [121, 317, 362, 411], "splitter": [362, 406], "sponsor": 0, "spotifi": 1012, "sprint": 0, "squar": [86, 124, 160, 194, 197, 203, 417, 979, 983, 985, 987], "stabil": 316, "stabl": 318, "stack": [132, 315, 414], "stackingclassifi": 565, "stackingregressor": 566, "stall": 380, "standard": [388, 997], "standardscal": [305, 879], "start": 393, "statement": 1008, "statist": [260, 1007, 1017, 1020], "statu": 398, "std": [138, 178], "step": [4, 240, 393, 408], "stochast": [207, 213, 220, 300, 983, 984, 992, 1001], "stock": [12, 1019], "stop": [122, 127, 207, 415, 1001], "strategi": [53, 258, 278, 300, 308, 321, 368, 406, 407, 987], "stratif": 411, "stratifi": 411, "stratifiedgroupkfold": [411, 814], "stratifiedkfold": 815, "stratifiedshufflesplit": 816, "stream": 368, "string": 392, "strip": 351, "strong": 181, "strongli": 995, "structur": [12, 39, 47, 67, 159, 327, 360, 1019], "studi": 238, "submit": 380, "subpackag": 1008, "subsampl": 414, "subtleti": 362, "success": [271, 272, 317, 976], "sum": 622, "summari": [25, 122, 188, 352, 353, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "supervis": [166, 324, 325, 329, 330, 406, 991, 1000, 1010, 1021], "support": [0, 25, 121, 127, 166, 193, 311, 315, 316, 317, 318, 320, 321, 322, 333, 336, 345, 392, 397, 398, 403, 405, 406, 414, 1002, 1003, 1011, 1021, 1047, 1048], "surfac": [120, 233, 357], "svc": [241, 342, 346, 904, 1002], "svd": [17, 95, 412], "svm": [6, 140, 144, 145, 175, 213, 233, 318, 330, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 406, 899, 900, 901, 902, 903, 904, 905, 906, 983, 993, 1001, 1021, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "svmlight": 374, "svr": [234, 345, 905, 1002], "swiss": 224, "switch": 367, "symmetr": 85, "synthet": [24, 75, 178, 183, 257, 312, 385], "system": 378, "t": [220, 225, 984], "tabl": [369, 392], "tag": [378, 380, 382], "take": 260, "takeawai": 199, "talk": 1006, "tangent": 984, "target": [75, 158, 217, 311, 312, 392, 394, 406, 408, 988, 997, 998], "targetencod": [321, 880], "task": [193, 406, 983, 1007], "team": [0, 379, 395], "technic": 395, "techniqu": 221, "templat": 382, "tensor": 979, "term": [352, 394, 415], "test": [5, 78, 143, 263, 266, 273, 351, 356, 378, 380, 382, 388, 389, 411, 1014, 1021, 1023], "text": [8, 166, 230, 261, 329, 350, 351, 352, 353, 375, 406, 415, 586, 587, 588, 589, 1023], "tf": 415, "tfidftransform": 588, "tfidfvector": [352, 353, 589], "than": 392, "theil": [216, 983], "theilsenregressor": 677, "them": [98, 379], "theoret": 232, "thi": [203, 1008], "third": [199, 235, 397], "thread": 367, "threshold": 328, "throughput": [10, 366], "tie": 347, "time": [4, 13, 16, 22, 28, 35, 68, 76, 83, 87, 93, 106, 108, 117, 136, 141, 149, 161, 165, 173, 176, 193, 218, 226, 233, 234, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 351, 354, 361, 411, 1009], "timeseriessplit": 817, "tip": [366, 381, 388, 976, 984, 991, 1001, 1002, 1003], "togeth": [239, 269, 1019, 1022], "toi": [44, 62, 228, 377], "token": 1023, "toler": 148, "tomographi": 14, "too": 367, "tool": [389, 392, 403, 406], "top": [352, 987], "top_k_accuracy_scor": 791, "topic": 15, "total": [130, 356, 414], "tough": 379, "track": [388, 408], "tracker": [380, 1011], "trade": 983, "tradeoff": [257, 987], "train": [111, 112, 122, 125, 128, 135, 147, 203, 229, 234, 238, 239, 241, 250, 273, 278, 302, 311, 312, 317, 328, 338, 342, 351, 356, 357, 360, 411, 990, 1000, 1014, 1021, 1023], "train_test_split": 825, "transform": [70, 71, 72, 75, 85, 116, 130, 240, 317, 318, 319, 372, 392, 393, 408, 990, 997, 998, 999, 1022], "transformedtargetregressor": 463, "transformermixin": 431, "translat": 1007, "tree": [111, 112, 116, 118, 119, 120, 127, 130, 166, 171, 199, 315, 320, 321, 322, 355, 356, 357, 358, 359, 360, 392, 406, 414, 416, 907, 908, 909, 910, 911, 912, 913, 990, 995, 1003, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "triag": 379, "trick": [366, 386, 388, 415], "trigonometr": 4, "troubleshoot": 397, "true": [178, 179], "truncat": 412, "truncatedsvd": 542, "trust": 138, "trustworthi": 694, "truth": [37, 178], "tsne": [283, 690], "tune": [124, 258, 261, 317, 976, 1023], "tutori": [137, 166, 1006, 1015, 1017, 1023], "tweedi": [217, 987], "tweedieregressor": [217, 678], "two": [66, 113, 185, 239, 260], "type": [71, 245, 382, 394, 403, 407, 1014], "type_of_target": 950, "typic": 379, "t\u00e9l\u00e9com": 1012, "u": 0, "ubuntu": 397, "uci": 278, "unbalanc": [340, 1002], "uncertain": 325, "uncertainti": 13, "unclaim": 380, "undefinedmetricwarn": 576, "under": [159, 392, 1025, 1046], "underfit": 274, "understand": 360, "unfold": 388, "uniform": [305, 997], "unique_label": 951, "univari": [54, 85, 144, 341, 416, 977], "univers": 382, "unlabel": 1000, "unless": 385, "unstructur": 67, "unsupervis": [990, 992, 1004, 1022, 1024], "unweight": 398, "up": 993, "updat": [1014, 1040], "us": [5, 6, 12, 17, 48, 95, 96, 98, 129, 130, 132, 148, 156, 186, 202, 213, 215, 260, 264, 269, 281, 306, 345, 351, 352, 360, 362, 368, 381, 385, 386, 388, 392, 406, 411, 412, 415, 416, 421, 424, 427, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 502, 504, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 579, 580, 582, 585, 586, 587, 588, 589, 591, 592, 595, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 615, 616, 617, 620, 621, 623, 625, 626, 628, 629, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 650, 651, 653, 654, 655, 656, 657, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 686, 687, 688, 689, 690, 691, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 707, 710, 711, 715, 716, 717, 724, 726, 729, 731, 732, 734, 735, 738, 739, 742, 743, 745, 746, 747, 749, 750, 752, 754, 758, 775, 776, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 852, 855, 856, 857, 858, 859, 860, 863, 864, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 885, 888, 892, 893, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 913, 914, 922, 931, 933, 940, 944, 945, 946, 947, 948, 961, 971, 981, 983, 984, 987, 991, 1001, 1002, 1003, 1012, 1021, 1023, 1040], "usabl": 392, "usag": [386, 392, 398, 403, 405, 408, 414, 415, 983], "user": [1011, 1025], "util": [373, 385, 389, 406, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 1023, 1027, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "v": [54, 67, 78, 79, 81, 86, 100, 147, 170, 171, 181, 191, 217, 263, 269, 273, 274, 356, 407, 414, 977, 1014], "v_measure_scor": 792, "valgrind": [386, 388], "valid": [4, 138, 147, 188, 232, 255, 256, 258, 259, 263, 265, 270, 275, 341, 362, 366, 382, 389, 406, 411, 971, 972, 973, 974, 975, 976, 982, 983, 1018], "validation_curv": 826, "validationcurvedisplai": [321, 818], "valu": [127, 148, 162, 163, 164, 166, 225, 235, 315, 321, 322, 360, 380, 403, 412, 414, 977, 987, 995, 997, 1003], "vari": [37, 299, 328, 407], "variabl": [85, 168, 169, 367, 392, 406, 1021], "varianc": [114, 197, 416, 987, 997], "variancethreshold": 601, "variant": 163, "variat": [245, 986], "variou": [10, 52, 206, 225], "vector": [17, 25, 53, 166, 333, 336, 345, 351, 353, 406, 415, 1002, 1021, 1022], "version": [319, 374, 378, 384, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "versu": [114, 213, 265, 330, 366], "via": [5, 13, 53, 187, 188, 217, 414, 979], "video": [380, 1006], "visual": [12, 58, 105, 122, 229, 234, 241, 255, 301, 316, 338, 406, 407, 408, 987, 1027], "vocabulari": 1021, "vote": [135, 414], "votingclassifi": [133, 134, 567], "votingregressor": 568, "wage": [168, 169], "wai": [170, 380, 392], "want": 380, "ward": [47, 67, 407, 1022], "ward_tre": 461, "warm": 386, "warm_start": 991, "warn": [389, 406], "we": 67, "weak": [111, 414], "web": 384, "websit": 1040, "weight": [111, 178, 180, 212, 301, 316, 348, 398, 406, 414, 415], "weighted_mod": 938, "welcom": 1005, "what": [360, 392], "where": 1023, "which": 983, "whitekernel": 623, "who": 1012, "why": [392, 414], "wikipedia": 17, "wild": 375, "window": [378, 397], "wine": 377, "winpython": 397, "wisconsin": 377, "within": 72, "without": [39, 291, 351], "wolf": [33, 79, 409], "word": [351, 415, 1023], "work": [166, 350, 366, 379, 392, 406, 1023], "workflow": 379, "world": [3, 75, 166, 375], "would": 1020, "wrap": 281, "written": 32, "wrong": [169, 392], "x": 216, "x86_64": 388, "xor": [155, 417], "y": [216, 392, 998, 1000], "yeast": 278, "yep": 386, "yhat": 1012, "you": [138, 392], "your": [382, 385, 987], "zero": 987, "zero_one_loss": 793, "zopa": 1012}})