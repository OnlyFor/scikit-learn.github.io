Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.0", "Version 1.4.0"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 420, 421, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 471, 472, 473, 474, 476, 478, 479, 482, 485, 486, 487, 488, 490, 491, 492, 494, 497, 498, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 689, 690, 691, 692, 693, 695, 696, 698, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 720, 724, 725, 726, 727, 728, 729, 730, 731, 736, 742, 743, 744, 745, 746, 747, 749, 750, 751, 753, 756, 757, 762, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 903, 904, 908, 909, 914, 915, 917, 919, 920, 925, 927, 932, 933, 934, 935, 936, 937, 939, 942, 943, 944, 946, 947, 950, 951, 960, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "wa": [0, 4, 8, 13, 16, 34, 40, 70, 71, 80, 86, 92, 127, 130, 159, 168, 174, 177, 223, 250, 253, 255, 257, 259, 265, 266, 297, 306, 311, 312, 316, 321, 322, 344, 346, 353, 355, 359, 368, 370, 371, 373, 377, 378, 386, 389, 390, 393, 395, 396, 399, 402, 403, 407, 411, 429, 430, 434, 435, 439, 443, 446, 449, 458, 463, 504, 512, 524, 525, 527, 529, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 577, 579, 580, 591, 616, 619, 630, 639, 640, 643, 644, 645, 647, 653, 654, 674, 675, 702, 717, 718, 756, 771, 772, 775, 783, 784, 785, 788, 789, 799, 811, 813, 825, 835, 861, 862, 881, 885, 891, 892, 894, 919, 920, 943, 964, 965, 966, 975, 976, 979, 982, 986, 989, 992, 996, 1002, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "start": [0, 4, 7, 10, 12, 20, 26, 53, 58, 64, 67, 74, 86, 98, 109, 115, 121, 123, 144, 147, 155, 157, 169, 174, 178, 179, 187, 198, 199, 200, 206, 216, 219, 223, 232, 234, 247, 259, 267, 279, 315, 320, 344, 353, 355, 359, 360, 361, 362, 366, 373, 374, 375, 377, 378, 379, 384, 386, 389, 396, 399, 403, 404, 408, 409, 429, 431, 439, 443, 445, 527, 599, 606, 621, 634, 642, 648, 655, 657, 665, 666, 667, 679, 683, 769, 770, 777, 783, 784, 785, 788, 789, 799, 830, 831, 832, 834, 836, 844, 930, 960, 965, 972, 975, 980, 981, 990, 997, 1000, 1002, 1010, 1011, 1021, 1023, 1026, 1028, 1030, 1031, 1032, 1033, 1034], "2007": [0, 38, 186, 368, 399, 408, 429, 441, 443, 449, 451, 555, 645, 680, 706, 722, 725, 746, 747, 781, 968, 972, 974, 976], "googl": [0, 17, 384, 399, 431, 995, 1007, 1018], "summer": [0, 4, 48, 1018], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 367, 371, 372, 374, 376, 377, 382, 384, 386, 387, 389, 390, 393, 395, 398, 399, 406, 407, 431, 432, 436, 438, 448, 485, 515, 519, 520, 526, 527, 531, 532, 534, 535, 537, 555, 561, 570, 571, 574, 575, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 653, 654, 671, 672, 674, 675, 816, 817, 818, 855, 862, 944, 973, 977, 986, 988, 990, 991, 996, 997, 999, 1000, 1003, 1011, 1018, 1020, 1021], "david": [0, 2, 37, 57, 81, 116, 177, 182, 200, 260, 262, 306, 344, 345, 346, 368, 399, 406, 409, 451, 521, 525, 556, 557, 611, 612, 617, 713, 783, 885, 966, 972, 980, 989, 1000, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033], "cournapeau": [0, 2, 1018, 1021], "later": [0, 11, 34, 53, 115, 124, 150, 169, 174, 177, 292, 346, 355, 379, 384, 385, 389, 393, 834, 857, 858, 866, 868, 986, 1006, 1011, 1021, 1024, 1026, 1030], "year": [0, 4, 133, 147, 155, 167, 168, 169, 198, 199, 216, 370, 372, 377, 384, 403, 407, 409, 787, 792, 794, 867, 972, 976, 997, 1000, 1009], "matthieu": [0, 2, 1018, 1022, 1033], "brucher": [0, 2, 1018], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 67, 78, 113, 120, 133, 147, 156, 157, 167, 168, 169, 187, 215, 234, 244, 246, 257, 285, 286, 307, 312, 314, 315, 333, 345, 346, 355, 360, 361, 362, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 381, 385, 386, 387, 389, 395, 396, 397, 399, 400, 401, 404, 406, 407, 408, 411, 412, 413, 414, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 449, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 497, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 684, 697, 730, 762, 766, 767, 768, 769, 776, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 876, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 925, 929, 965, 966, 968, 970, 971, 972, 973, 975, 976, 978, 979, 982, 983, 986, 989, 990, 996, 997, 1000, 1002, 1003, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "part": [0, 31, 36, 61, 68, 71, 82, 113, 116, 119, 123, 128, 136, 137, 138, 139, 144, 155, 165, 177, 234, 247, 254, 256, 273, 295, 303, 306, 308, 346, 361, 368, 370, 373, 375, 379, 381, 385, 386, 389, 395, 397, 399, 403, 404, 406, 407, 409, 435, 438, 482, 483, 484, 510, 520, 526, 531, 563, 573, 574, 575, 602, 614, 779, 853, 871, 873, 874, 875, 876, 877, 878, 879, 965, 966, 968, 973, 977, 995, 996, 997, 998, 1000, 1004, 1011, 1013, 1018, 1026, 1027, 1029, 1031, 1033], "hi": [0, 400, 976, 1011], "thesi": [0, 370, 399, 406], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 55, 57, 58, 60, 66, 67, 71, 72, 74, 75, 78, 80, 81, 82, 86, 89, 95, 97, 100, 103, 104, 109, 113, 115, 116, 117, 118, 119, 120, 123, 125, 126, 127, 128, 130, 133, 143, 144, 146, 147, 150, 154, 155, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 182, 186, 187, 189, 193, 198, 199, 200, 201, 202, 203, 206, 215, 216, 227, 228, 229, 230, 232, 233, 234, 235, 238, 239, 240, 241, 247, 249, 253, 255, 256, 257, 259, 260, 261, 262, 264, 265, 268, 269, 271, 273, 274, 277, 279, 285, 286, 288, 298, 301, 302, 303, 304, 306, 307, 308, 311, 312, 313, 315, 316, 321, 323, 331, 339, 344, 345, 346, 349, 353, 355, 359, 360, 361, 366, 367, 368, 369, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 426, 429, 430, 431, 432, 433, 436, 437, 438, 441, 451, 452, 453, 458, 461, 464, 482, 485, 492, 497, 498, 500, 512, 523, 525, 527, 529, 530, 531, 533, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 580, 591, 595, 598, 599, 600, 619, 621, 622, 623, 625, 632, 633, 634, 636, 637, 638, 640, 642, 644, 647, 648, 650, 652, 654, 655, 657, 658, 663, 664, 665, 668, 669, 673, 674, 675, 685, 692, 701, 707, 709, 714, 716, 717, 722, 723, 726, 728, 730, 742, 744, 745, 769, 771, 773, 776, 780, 782, 783, 784, 785, 788, 789, 791, 799, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 830, 831, 832, 834, 835, 836, 838, 839, 840, 845, 853, 855, 861, 862, 866, 867, 869, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 889, 890, 893, 896, 898, 903, 907, 909, 925, 944, 965, 966, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 991, 992, 997, 999, 1000, 1002, 1009, 1010, 1011, 1015, 1018, 1019, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "2010": [0, 47, 67, 79, 169, 264, 265, 396, 399, 401, 403, 404, 412, 464, 525, 693, 697, 708, 709, 728, 813, 845, 846, 968, 972, 976, 980, 990, 995, 1018], "fabian": [0, 2, 185, 203, 220, 291, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1027], "pedregosa": [0, 2, 185, 203, 220, 291, 1018, 1019, 1020, 1021, 1022, 1024], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 66, 67, 82, 97, 101, 187, 188, 220, 232, 246, 995, 997, 1000, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 66, 67, 73, 82, 89, 90, 97, 101, 102, 181, 187, 188, 195, 196, 220, 222, 230, 232, 246, 303, 335, 336, 387, 995, 1000, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 183, 185, 186, 187, 189, 191, 192, 227, 230, 265, 272, 291, 387, 1000, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 183, 185, 186, 187, 189, 191, 192, 227, 230, 265, 272, 291, 387, 1000, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "vincent": [0, 2, 47, 67, 153, 157, 1000, 1018, 1020, 1022, 1023, 1025, 1028, 1033, 1034], "michel": [0, 2, 47, 67, 1018, 1020, 1021, 1023, 1025, 1032, 1033], "inria": [0, 5, 9, 30, 37, 52, 54, 57, 75, 82, 116, 156, 177, 182, 183, 185, 189, 191, 192, 203, 220, 221, 227, 230, 260, 262, 265, 272, 291, 306, 339, 344, 345, 346, 647, 994, 1018], "took": [0, 42, 267], "leadership": 0, "made": [0, 70, 81, 89, 100, 116, 133, 157, 168, 169, 198, 216, 250, 263, 307, 312, 331, 350, 359, 368, 370, 373, 377, 386, 387, 399, 406, 407, 411, 432, 435, 436, 438, 448, 485, 492, 577, 578, 580, 619, 620, 645, 654, 674, 675, 723, 771, 785, 788, 789, 799, 803, 804, 805, 825, 828, 829, 977, 982, 992, 996, 1000, 1008, 1010, 1018, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1031, 1032], "first": [0, 4, 5, 7, 8, 11, 17, 20, 25, 26, 30, 31, 32, 39, 55, 56, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 80, 85, 86, 89, 90, 91, 100, 104, 111, 115, 117, 118, 119, 120, 122, 124, 127, 130, 131, 132, 133, 143, 144, 147, 150, 151, 152, 155, 156, 157, 158, 163, 167, 168, 169, 171, 174, 177, 179, 181, 187, 194, 195, 196, 199, 200, 206, 207, 212, 220, 223, 231, 232, 234, 235, 236, 238, 240, 241, 246, 250, 254, 259, 261, 262, 266, 268, 270, 271, 277, 279, 281, 282, 284, 288, 289, 290, 295, 297, 301, 303, 306, 307, 308, 312, 313, 320, 323, 327, 328, 331, 333, 344, 345, 346, 349, 350, 353, 355, 360, 361, 367, 368, 370, 371, 372, 375, 377, 378, 379, 381, 384, 386, 396, 397, 399, 402, 403, 404, 406, 407, 408, 409, 411, 432, 435, 436, 439, 448, 449, 453, 461, 472, 476, 477, 479, 480, 481, 483, 486, 489, 491, 493, 497, 498, 499, 517, 522, 523, 527, 530, 542, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 571, 573, 577, 578, 579, 580, 582, 599, 600, 606, 610, 613, 620, 621, 622, 623, 635, 641, 648, 655, 657, 663, 665, 677, 684, 687, 689, 691, 701, 705, 724, 751, 752, 770, 780, 783, 784, 788, 789, 790, 791, 792, 797, 799, 806, 807, 816, 817, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 833, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 853, 861, 865, 866, 867, 870, 877, 878, 890, 893, 896, 897, 898, 899, 901, 903, 908, 909, 910, 927, 929, 943, 947, 950, 962, 965, 966, 970, 971, 972, 973, 975, 976, 977, 978, 979, 983, 986, 987, 990, 991, 992, 1000, 1002, 1008, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "public": [0, 79, 367, 373, 375, 377, 378, 384, 385, 386, 387, 403, 406, 457, 653, 660, 674, 675, 681, 886, 972, 980, 1018, 1023, 1024, 1029, 1030, 1031, 1034], "releas": [0, 34, 234, 317, 360, 362, 371, 373, 374, 376, 381, 384, 386, 407, 432, 436, 453, 456, 479, 480, 485, 490, 493, 501, 504, 513, 527, 550, 551, 553, 554, 556, 588, 591, 617, 619, 621, 623, 629, 635, 637, 641, 647, 658, 669, 677, 690, 691, 706, 736, 776, 785, 788, 789, 791, 799, 814, 830, 832, 849, 853, 858, 861, 862, 863, 867, 868, 885, 886, 888, 893, 897, 920, 944, 992, 994, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "februari": [0, 401, 462, 976, 1019, 1023], "1st": [0, 4, 60, 90, 158, 199, 306, 866, 867], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 55, 66, 70, 71, 72, 96, 120, 136, 144, 147, 150, 155, 168, 169, 174, 180, 198, 200, 215, 228, 232, 233, 234, 246, 249, 255, 259, 261, 262, 268, 269, 279, 281, 307, 314, 315, 324, 328, 331, 339, 344, 345, 346, 355, 360, 368, 371, 373, 374, 375, 377, 378, 381, 384, 385, 386, 389, 390, 397, 399, 400, 401, 402, 403, 404, 406, 407, 409, 416, 426, 430, 434, 435, 436, 438, 439, 442, 445, 458, 467, 485, 515, 525, 526, 527, 528, 529, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 553, 556, 558, 577, 578, 580, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 621, 622, 627, 633, 634, 639, 640, 643, 644, 645, 647, 648, 653, 654, 655, 657, 663, 664, 665, 668, 696, 698, 723, 729, 756, 777, 788, 789, 791, 816, 817, 818, 819, 823, 824, 825, 826, 827, 830, 835, 838, 845, 846, 853, 861, 878, 879, 883, 884, 888, 890, 891, 892, 893, 894, 896, 898, 922, 925, 965, 968, 969, 970, 972, 973, 977, 978, 979, 980, 982, 984, 986, 990, 991, 992, 1000, 1002, 1011, 1018, 1019, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 57, 61, 74, 91, 113, 121, 128, 130, 133, 144, 150, 155, 156, 165, 168, 174, 182, 187, 198, 218, 219, 225, 231, 246, 254, 259, 264, 281, 296, 301, 314, 344, 345, 359, 367, 368, 370, 373, 375, 378, 384, 386, 396, 398, 399, 400, 403, 405, 406, 407, 409, 436, 438, 453, 476, 488, 497, 498, 527, 544, 545, 548, 549, 552, 553, 554, 559, 577, 578, 580, 599, 634, 635, 641, 677, 678, 679, 680, 681, 682, 783, 784, 785, 788, 789, 799, 816, 817, 823, 824, 825, 826, 827, 847, 848, 855, 872, 896, 897, 898, 899, 911, 944, 965, 968, 973, 976, 977, 979, 984, 986, 990, 992, 993, 995, 996, 999, 1000, 1002, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1031, 1034], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 55, 57, 60, 62, 64, 65, 70, 71, 78, 80, 86, 89, 91, 92, 100, 102, 110, 117, 119, 120, 121, 123, 143, 144, 147, 150, 151, 155, 156, 157, 163, 167, 168, 169, 170, 171, 174, 177, 182, 198, 199, 200, 216, 223, 227, 229, 234, 235, 237, 238, 245, 246, 247, 249, 253, 259, 260, 262, 265, 266, 273, 279, 281, 285, 286, 301, 306, 307, 308, 311, 313, 314, 320, 321, 322, 328, 334, 336, 344, 345, 353, 355, 359, 360, 361, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 389, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 481, 483, 484, 485, 497, 498, 503, 512, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 676, 677, 678, 679, 680, 681, 693, 694, 701, 704, 709, 714, 719, 724, 730, 744, 745, 746, 747, 770, 773, 774, 778, 781, 783, 784, 785, 788, 789, 790, 791, 796, 799, 803, 807, 809, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 908, 910, 912, 914, 925, 951, 965, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 996, 997, 1000, 1002, 1003, 1006, 1007, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "appear": [0, 8, 46, 48, 113, 168, 254, 256, 257, 285, 286, 295, 297, 302, 320, 344, 345, 346, 368, 371, 373, 378, 386, 401, 404, 477, 478, 544, 556, 557, 568, 599, 616, 617, 619, 686, 689, 691, 701, 705, 707, 770, 777, 786, 803, 823, 824, 825, 826, 827, 890, 893, 927, 972, 978, 982, 1018, 1026, 1030, 1031], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 55, 57, 63, 67, 71, 72, 92, 95, 105, 110, 113, 123, 127, 142, 155, 162, 167, 168, 169, 170, 177, 179, 182, 186, 187, 196, 198, 199, 213, 216, 228, 234, 235, 237, 250, 259, 268, 269, 301, 307, 308, 311, 312, 314, 315, 316, 328, 339, 344, 345, 346, 349, 353, 355, 359, 360, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 389, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 420, 422, 430, 432, 434, 435, 436, 437, 438, 442, 450, 452, 453, 454, 457, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 504, 523, 527, 529, 530, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 570, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 620, 622, 623, 635, 641, 647, 648, 659, 660, 669, 681, 683, 694, 698, 702, 707, 804, 825, 830, 831, 832, 834, 836, 838, 839, 840, 847, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 877, 886, 888, 889, 896, 897, 898, 899, 903, 904, 924, 944, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 995, 996, 997, 1002, 1011, 1015, 1018, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 78, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 142, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 170, 174, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 227, 231, 232, 233, 234, 235, 237, 238, 239, 241, 244, 245, 246, 248, 249, 250, 254, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 319, 320, 322, 323, 324, 327, 328, 330, 331, 334, 335, 336, 337, 338, 339, 340, 344, 345, 346, 350, 351, 353, 355, 360, 361, 367, 368, 370, 371, 373, 374, 375, 378, 379, 384, 385, 386, 389, 391, 392, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 423, 426, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 482, 483, 485, 486, 493, 494, 495, 496, 499, 501, 505, 506, 507, 508, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 570, 571, 572, 573, 576, 577, 579, 580, 582, 583, 591, 592, 596, 597, 599, 600, 601, 606, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 681, 682, 683, 689, 691, 692, 693, 694, 696, 698, 702, 705, 706, 710, 711, 712, 714, 716, 717, 718, 719, 722, 723, 724, 725, 729, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 744, 745, 756, 757, 763, 769, 770, 771, 772, 773, 774, 775, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 876, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 914, 923, 924, 925, 927, 928, 929, 930, 932, 933, 934, 935, 936, 939, 940, 942, 943, 944, 950, 965, 966, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 982, 983, 986, 987, 989, 991, 992, 994, 995, 1002, 1003, 1006, 1007, 1009, 1010, 1014, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1030, 1031, 1033, 1035], "month": [0, 4, 155, 169, 307, 368, 373, 377, 387, 1018], "cycl": [0, 4, 42, 44, 50, 62, 95, 183, 245, 250, 266, 268, 314, 315, 373, 377, 390, 398, 404, 568, 569, 616, 788, 789, 904, 965, 966, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "thrive": [0, 373], "intern": [0, 26, 71, 82, 100, 116, 124, 136, 151, 162, 165, 198, 279, 281, 300, 309, 321, 346, 355, 360, 368, 370, 375, 379, 382, 384, 386, 390, 393, 396, 399, 403, 404, 406, 407, 409, 410, 426, 428, 433, 454, 457, 500, 523, 524, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 582, 583, 599, 600, 627, 629, 632, 635, 641, 657, 661, 665, 667, 685, 697, 719, 722, 746, 747, 771, 814, 828, 829, 844, 845, 846, 848, 849, 853, 867, 869, 883, 884, 886, 888, 889, 890, 893, 896, 897, 898, 899, 944, 972, 973, 974, 976, 979, 982, 986, 988, 991, 992, 1000, 1018, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 57, 60, 74, 80, 81, 86, 95, 115, 119, 121, 123, 127, 132, 146, 150, 155, 156, 157, 163, 168, 169, 170, 174, 191, 195, 198, 199, 200, 204, 215, 216, 219, 227, 231, 233, 234, 238, 241, 244, 245, 247, 249, 250, 254, 257, 258, 259, 262, 263, 265, 270, 271, 277, 285, 286, 287, 289, 297, 301, 302, 304, 306, 311, 312, 313, 314, 315, 319, 322, 331, 336, 338, 344, 353, 355, 359, 360, 361, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 381, 382, 384, 385, 386, 387, 389, 390, 393, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 423, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 450, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 482, 483, 486, 487, 497, 498, 505, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 608, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 676, 677, 678, 679, 680, 681, 684, 700, 702, 709, 729, 751, 762, 766, 767, 768, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 799, 803, 806, 807, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 848, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 903, 907, 908, 909, 927, 945, 961, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 988, 989, 990, 991, 992, 997, 1000, 1002, 1006, 1009, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "been": [0, 4, 9, 16, 26, 44, 53, 60, 81, 100, 147, 150, 155, 157, 168, 223, 227, 229, 234, 235, 257, 259, 265, 311, 312, 313, 314, 315, 321, 344, 355, 360, 367, 368, 370, 371, 372, 373, 375, 377, 379, 381, 382, 384, 385, 386, 387, 390, 393, 396, 397, 399, 401, 403, 404, 406, 409, 423, 426, 458, 460, 461, 463, 467, 476, 512, 523, 525, 538, 539, 556, 557, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 600, 622, 623, 647, 648, 655, 657, 662, 664, 665, 666, 667, 709, 766, 767, 768, 779, 785, 788, 789, 791, 799, 807, 812, 813, 837, 885, 888, 966, 968, 969, 971, 972, 973, 976, 977, 979, 982, 986, 988, 990, 991, 997, 1000, 1002, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "lead": [0, 7, 25, 31, 37, 52, 55, 61, 72, 116, 120, 123, 146, 147, 168, 169, 170, 177, 182, 187, 189, 198, 202, 232, 234, 259, 260, 262, 266, 284, 285, 297, 301, 303, 306, 307, 313, 331, 345, 349, 355, 359, 360, 367, 372, 381, 382, 385, 386, 393, 396, 397, 399, 401, 403, 404, 405, 406, 408, 441, 451, 454, 457, 485, 504, 516, 524, 527, 528, 529, 532, 536, 540, 546, 547, 548, 549, 552, 553, 554, 555, 595, 619, 635, 636, 639, 641, 642, 643, 649, 650, 651, 652, 668, 680, 684, 734, 783, 788, 789, 816, 828, 829, 833, 852, 859, 869, 880, 881, 886, 888, 896, 897, 898, 899, 965, 970, 972, 973, 975, 976, 977, 979, 980, 982, 984, 986, 989, 990, 992, 1000, 1002, 1021, 1023, 1025, 1026, 1027, 1028, 1030, 1031, 1033, 1034], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 92, 93, 95, 98, 100, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 133, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 186, 187, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 204, 206, 207, 215, 216, 218, 222, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 249, 250, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 277, 279, 281, 284, 285, 286, 287, 288, 289, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 321, 322, 328, 329, 331, 335, 336, 337, 339, 340, 341, 344, 345, 346, 349, 351, 352, 353, 355, 359, 360, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 421, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 740, 741, 742, 743, 744, 745, 746, 747, 750, 752, 753, 754, 755, 758, 759, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 919, 920, 921, 922, 923, 924, 925, 927, 928, 932, 933, 936, 939, 941, 942, 943, 944, 945, 946, 947, 950, 960, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1011, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "decis": [0, 4, 16, 25, 27, 31, 34, 56, 58, 60, 108, 109, 112, 113, 115, 128, 134, 154, 168, 180, 181, 190, 207, 208, 211, 212, 227, 228, 230, 238, 262, 282, 287, 290, 295, 301, 302, 303, 306, 318, 325, 327, 328, 329, 330, 331, 332, 333, 337, 340, 341, 344, 354, 359, 362, 369, 370, 373, 386, 397, 399, 406, 426, 458, 489, 493, 508, 525, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 582, 583, 620, 621, 622, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 687, 689, 691, 692, 696, 709, 714, 715, 723, 727, 728, 730, 744, 770, 776, 777, 780, 785, 788, 789, 799, 814, 816, 817, 819, 830, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 970, 976, 977, 978, 979, 980, 982, 983, 984, 989, 990, 991, 994, 996, 997, 998, 1000, 1009, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1034], "make": [0, 4, 7, 8, 11, 14, 17, 20, 21, 25, 26, 27, 39, 40, 43, 44, 56, 61, 62, 67, 73, 100, 116, 120, 123, 128, 144, 147, 150, 155, 158, 167, 168, 169, 170, 177, 182, 184, 187, 190, 191, 192, 194, 198, 199, 200, 204, 216, 220, 229, 231, 233, 234, 235, 244, 246, 249, 250, 254, 259, 261, 262, 268, 269, 270, 288, 297, 301, 302, 307, 315, 331, 341, 344, 345, 346, 355, 359, 360, 361, 362, 367, 368, 371, 372, 374, 375, 376, 378, 379, 381, 384, 386, 389, 393, 396, 397, 399, 400, 401, 403, 404, 406, 407, 408, 409, 411, 429, 430, 431, 432, 434, 436, 438, 440, 441, 442, 447, 448, 449, 451, 477, 492, 503, 504, 511, 512, 516, 521, 523, 530, 540, 541, 544, 545, 572, 573, 596, 597, 620, 638, 644, 645, 660, 680, 684, 718, 725, 730, 756, 757, 769, 783, 784, 785, 787, 790, 796, 800, 801, 802, 804, 805, 810, 811, 818, 819, 822, 855, 864, 867, 868, 872, 876, 878, 879, 880, 881, 894, 902, 908, 909, 919, 925, 931, 937, 962, 965, 966, 968, 970, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 986, 989, 990, 991, 992, 994, 995, 996, 997, 999, 1000, 1002, 1007, 1009, 1011, 1015, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "process": [0, 4, 5, 19, 26, 30, 31, 45, 46, 47, 48, 50, 66, 70, 72, 74, 79, 81, 96, 97, 99, 120, 127, 136, 137, 138, 139, 160, 167, 177, 200, 234, 235, 244, 245, 250, 259, 261, 262, 271, 301, 313, 320, 345, 346, 349, 359, 360, 361, 362, 368, 372, 373, 375, 377, 379, 382, 384, 385, 386, 393, 399, 400, 401, 403, 404, 405, 406, 407, 408, 412, 437, 438, 464, 485, 493, 512, 523, 524, 525, 526, 527, 550, 551, 552, 577, 578, 580, 599, 600, 602, 603, 604, 606, 607, 608, 611, 612, 614, 616, 621, 622, 628, 632, 653, 661, 674, 675, 692, 711, 729, 769, 783, 785, 788, 789, 799, 809, 810, 811, 820, 821, 837, 851, 855, 857, 858, 859, 868, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 942, 944, 965, 968, 972, 976, 979, 986, 988, 990, 992, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1010, 1011, 1013, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 55, 68, 82, 106, 126, 149, 160, 165, 219, 223, 229, 234, 250, 254, 265, 284, 306, 312, 315, 318, 325, 331, 348, 350, 354, 359, 368, 370, 373, 375, 378, 384, 386, 387, 389, 396, 399, 401, 402, 403, 404, 406, 407, 408, 409, 430, 431, 434, 435, 439, 440, 441, 442, 443, 446, 451, 452, 461, 485, 492, 493, 497, 500, 502, 503, 510, 519, 524, 530, 533, 552, 599, 600, 601, 605, 606, 607, 678, 685, 698, 702, 814, 836, 841, 868, 880, 881, 884, 896, 897, 898, 899, 902, 924, 925, 947, 950, 973, 975, 976, 979, 981, 982, 986, 989, 992, 996, 997, 1005, 1010, 1011, 1018, 1019, 1021, 1022, 1024, 1028], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 147, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 329, 330, 331, 336, 337, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 927, 930, 931, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 957, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "laid": [0, 167, 373], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 55, 70, 71, 103, 108, 114, 116, 117, 124, 134, 139, 165, 167, 170, 182, 198, 200, 206, 216, 244, 246, 257, 259, 262, 267, 271, 277, 306, 307, 314, 322, 324, 327, 328, 331, 344, 358, 368, 370, 371, 373, 375, 376, 377, 379, 384, 386, 399, 402, 404, 406, 409, 415, 424, 425, 431, 432, 434, 435, 436, 438, 461, 471, 472, 473, 474, 488, 504, 505, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 577, 578, 580, 593, 596, 597, 623, 628, 629, 630, 631, 640, 644, 655, 657, 662, 664, 665, 677, 678, 681, 690, 715, 729, 730, 785, 787, 788, 789, 790, 792, 793, 794, 795, 799, 814, 823, 824, 825, 826, 827, 832, 837, 840, 844, 845, 846, 854, 858, 865, 877, 880, 881, 903, 938, 940, 945, 966, 970, 971, 975, 976, 977, 979, 984, 986, 997, 998, 999, 1000, 1006, 1009, 1011, 1013, 1018, 1020, 1022, 1024, 1026, 1027, 1030, 1031, 1034], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 57, 71, 73, 89, 90, 92, 95, 127, 179, 181, 195, 196, 213, 231, 234, 235, 260, 297, 323, 336, 346, 347, 359, 360, 361, 362, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 389, 390, 393, 396, 398, 399, 404, 407, 410, 433, 436, 437, 438, 439, 442, 446, 453, 477, 478, 488, 490, 500, 510, 512, 525, 533, 553, 577, 578, 579, 580, 583, 593, 620, 628, 632, 647, 648, 655, 657, 662, 663, 664, 665, 685, 686, 692, 694, 700, 706, 725, 746, 747, 757, 766, 767, 768, 779, 781, 785, 788, 789, 791, 799, 807, 810, 812, 815, 818, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 849, 860, 888, 893, 904, 907, 909, 922, 942, 965, 972, 974, 976, 977, 978, 979, 980, 984, 990, 993, 994, 995, 1000, 1004, 1009, 1011, 1019, 1020, 1024], "peopl": [0, 6, 70, 168, 236, 262, 344, 345, 360, 361, 368, 370, 372, 373, 377, 387, 405, 482, 483, 630, 825, 996, 1007], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 92, 95, 97, 100, 103, 106, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 143, 144, 146, 147, 150, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 202, 207, 209, 216, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 241, 245, 246, 247, 249, 253, 254, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 279, 281, 284, 285, 289, 292, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 315, 316, 319, 321, 322, 323, 324, 329, 331, 333, 335, 339, 340, 344, 345, 346, 349, 353, 355, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 386, 387, 389, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 420, 422, 423, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 477, 478, 482, 484, 485, 487, 489, 490, 491, 492, 493, 497, 498, 499, 501, 504, 505, 506, 507, 508, 509, 512, 513, 515, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 696, 698, 701, 702, 704, 705, 706, 707, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 728, 729, 731, 733, 734, 736, 738, 739, 741, 742, 744, 745, 749, 750, 751, 753, 755, 756, 757, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 797, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 912, 913, 914, 917, 919, 924, 925, 926, 929, 930, 932, 936, 939, 940, 942, 944, 947, 950, 951, 955, 956, 957, 960, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "current": [0, 8, 46, 155, 168, 216, 301, 311, 360, 361, 368, 371, 373, 374, 375, 378, 382, 384, 386, 387, 395, 396, 398, 399, 403, 406, 407, 408, 409, 429, 435, 439, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 521, 524, 530, 542, 543, 546, 547, 548, 549, 551, 553, 554, 555, 565, 580, 582, 599, 606, 615, 616, 635, 647, 656, 660, 664, 665, 666, 667, 776, 783, 784, 833, 837, 845, 846, 864, 876, 886, 896, 897, 898, 899, 902, 943, 951, 965, 970, 972, 976, 979, 980, 986, 997, 1009, 1026, 1030, 1032, 1033, 1034], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 20, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 78, 79, 82, 85, 90, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 109, 110, 112, 116, 117, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 139, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 165, 168, 169, 171, 174, 178, 179, 180, 182, 184, 186, 187, 188, 189, 190, 196, 198, 200, 204, 205, 207, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 228, 231, 233, 234, 235, 237, 244, 246, 247, 249, 254, 259, 260, 261, 262, 263, 266, 270, 272, 273, 279, 282, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 298, 300, 301, 304, 307, 309, 311, 313, 314, 315, 316, 320, 321, 328, 329, 330, 331, 332, 335, 336, 337, 338, 341, 344, 345, 346, 350, 351, 352, 353, 355, 359, 360, 361, 362, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 386, 387, 388, 389, 390, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 409, 411, 413, 420, 423, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 478, 485, 487, 489, 493, 499, 500, 508, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 676, 677, 678, 679, 680, 681, 682, 689, 690, 691, 697, 700, 705, 709, 723, 729, 730, 746, 747, 767, 768, 783, 784, 785, 787, 788, 789, 794, 799, 803, 804, 810, 811, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 903, 906, 908, 909, 912, 925, 927, 934, 936, 960, 964, 965, 967, 968, 970, 972, 973, 974, 977, 978, 979, 980, 981, 983, 984, 986, 988, 989, 990, 991, 992, 996, 997, 1000, 1002, 1006, 1007, 1009, 1010, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "mainten": [0, 373, 381, 384, 389, 392, 972, 997, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "j\u00e9r\u00e9mie": [0, 1, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "du": [0, 1, 2, 1018, 1019, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "boisberrang": [0, 1, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "jori": [0, 1, 1025, 1026, 1027, 1030, 1031], "van": [0, 1, 367, 401, 458, 463, 523, 616, 681, 685, 966, 973, 976, 982, 1000, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1034], "den": [0, 1, 1019, 1020, 1025, 1026, 1027, 1030, 1031], "bossch": [0, 1, 1025, 1026, 1027, 1031], "lo\u00efc": [0, 1, 1026, 1029, 1031, 1032, 1033], "est\u00e8v": [0, 1, 1026, 1029, 1031, 1032, 1033], "thoma": [0, 1, 103, 227, 301, 360, 363, 387, 884, 972, 986, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "j": [0, 1, 11, 17, 37, 38, 40, 43, 61, 70, 79, 80, 81, 109, 113, 114, 125, 151, 163, 169, 210, 222, 236, 244, 258, 259, 264, 270, 283, 289, 292, 305, 316, 353, 360, 367, 368, 370, 377, 379, 384, 396, 397, 399, 401, 403, 404, 406, 407, 409, 410, 426, 429, 433, 435, 442, 443, 458, 463, 487, 502, 505, 506, 507, 509, 517, 520, 523, 525, 526, 527, 529, 530, 536, 548, 549, 582, 583, 621, 622, 626, 633, 634, 637, 638, 655, 656, 658, 669, 677, 678, 679, 681, 682, 683, 685, 694, 697, 699, 703, 705, 707, 710, 711, 712, 714, 743, 744, 746, 747, 762, 766, 776, 777, 778, 779, 817, 818, 825, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 859, 868, 896, 897, 965, 966, 970, 972, 973, 974, 976, 977, 978, 979, 980, 982, 983, 984, 986, 988, 990, 991, 992, 994, 1011, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "fan": [0, 1, 360, 387, 991, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "olivi": [0, 1, 14, 17, 37, 48, 61, 187, 198, 216, 220, 260, 262, 344, 345, 346, 387, 884, 989, 995, 997, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "grisel": [0, 1, 14, 17, 37, 48, 61, 187, 198, 216, 220, 260, 262, 344, 345, 346, 387, 995, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "yaroslav": [0, 1, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027], "halchenko": [0, 1, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027], "tim": [0, 1, 115, 129, 1018, 1023, 1024, 1027, 1028, 1029, 1031, 1033, 1034], "head": [0, 1, 26, 71, 115, 129, 155, 168, 186, 187, 216, 241, 249, 307, 311, 316, 373, 381, 404, 1000, 1023, 1024, 1033, 1034], "nicola": [0, 1, 147, 305, 647, 972, 989, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "hug": [0, 1, 147, 305, 994, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "adrin": [0, 1, 65, 340, 387, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "jalali": [0, 1, 65, 340, 387, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "julien": [0, 1, 647, 972, 1000, 1018, 1021, 1025, 1026, 1030, 1031, 1032, 1033, 1034], "jerphanion": [0, 1, 1030, 1031, 1032, 1033, 1034], "guillaum": [0, 1, 5, 7, 72, 75, 100, 130, 150, 155, 156, 157, 159, 186, 187, 200, 220, 301, 1000, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "lemaitr": [0, 1, 5, 7, 72, 75, 100, 130, 150, 155, 156, 157, 159, 186, 187, 200, 220, 301, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "christian": [0, 1, 19, 198, 199, 200, 216, 344, 345, 368, 1000, 1011, 1018, 1019, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "lorentzen": [0, 1, 198, 199, 200, 216, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "jan": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 199, 233, 867, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1034], "hendrik": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 1018, 1021, 1022, 1023, 1024], "metzen": [0, 1, 24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 1018, 1021, 1022, 1023, 1024], "andrea": [0, 1, 31, 74, 100, 114, 189, 232, 302, 303, 321, 339, 340, 387, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "mueller": [0, 1, 74, 100, 114, 189, 232, 321, 339, 340, 1000, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "vlad": [0, 1, 95, 235, 298, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027], "nicula": [0, 1, 95, 235, 298, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027], "joel": [0, 1, 72, 387, 407, 524, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "nothman": [0, 1, 72, 387, 407, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "hanmin": [0, 1, 302, 1025, 1026, 1027, 1028, 1029], "qin": [0, 1, 302, 370, 407, 1025, 1026, 1027, 1028, 1029], "bertrand": [0, 1, 1018, 1024, 1025, 1030, 1031], "thirion": [0, 1, 1018, 1024, 1025, 1031], "tom": [0, 1, 190, 206, 279, 281, 303, 304, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "dupr\u00e9": [0, 1, 303, 304, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "la": [0, 1, 190, 206, 279, 281, 303, 304, 307, 370, 1000, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "tour": [0, 1, 190, 206, 279, 281, 303, 304, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "nell": [0, 1, 39, 222, 230, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1030], "roman": [0, 1, 198, 216, 616, 902, 1020, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "yurchak": [0, 1, 198, 216, 407, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "meekail": [0, 1, 1032, 1033, 1034], "zain": [0, 1, 1032, 1033, 1034], "pleas": [0, 12, 17, 26, 71, 72, 109, 115, 117, 118, 124, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 202, 228, 229, 230, 232, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 279, 289, 298, 307, 311, 312, 313, 314, 315, 316, 321, 353, 360, 367, 368, 371, 373, 374, 375, 377, 381, 384, 385, 386, 389, 393, 395, 398, 399, 406, 407, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 485, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 618, 619, 620, 621, 622, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 811, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 877, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 976, 980, 986, 990, 991, 996, 997, 999, 1002, 1009, 1011, 1018, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "do": [0, 4, 10, 25, 42, 55, 61, 67, 74, 90, 99, 101, 102, 105, 114, 117, 119, 121, 123, 124, 130, 137, 144, 155, 162, 168, 169, 170, 195, 198, 216, 219, 221, 234, 235, 250, 254, 257, 260, 262, 277, 279, 281, 285, 314, 324, 328, 331, 336, 339, 344, 345, 346, 353, 355, 359, 360, 361, 368, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 386, 387, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 439, 450, 492, 525, 527, 531, 533, 541, 544, 570, 571, 577, 578, 580, 621, 622, 634, 635, 641, 644, 645, 648, 655, 657, 665, 725, 751, 766, 770, 802, 805, 820, 821, 825, 852, 853, 855, 862, 866, 868, 873, 874, 876, 877, 878, 879, 896, 897, 898, 899, 907, 950, 965, 968, 970, 972, 973, 976, 977, 979, 980, 984, 986, 991, 992, 996, 997, 1000, 1002, 1009, 1010, 1011, 1018, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "email": [0, 344, 373, 384, 407, 823, 978, 1000], "directli": [0, 6, 19, 27, 45, 46, 56, 71, 115, 147, 158, 182, 186, 198, 204, 216, 228, 264, 298, 301, 315, 346, 355, 359, 371, 373, 374, 375, 377, 379, 385, 386, 387, 395, 396, 397, 399, 400, 401, 402, 403, 407, 409, 431, 441, 451, 453, 458, 463, 516, 556, 557, 558, 559, 586, 600, 609, 621, 632, 635, 636, 641, 642, 649, 650, 651, 652, 653, 666, 670, 673, 679, 762, 766, 769, 778, 779, 785, 788, 789, 799, 833, 847, 848, 849, 855, 865, 867, 870, 877, 944, 965, 972, 974, 979, 981, 983, 986, 991, 992, 997, 1003, 1006, 1007, 1018, 1026, 1027, 1029, 1030, 1031, 1034], "ask": [0, 162, 163, 259, 362, 372, 373, 377, 378, 381, 386, 387, 408, 830, 831, 832, 834, 836, 838, 839, 840, 994, 999, 1034], "assist": [0, 373, 384, 986, 1000], "report": [0, 4, 8, 32, 70, 75, 144, 158, 186, 257, 267, 311, 319, 355, 368, 372, 374, 375, 376, 379, 381, 384, 386, 389, 393, 399, 403, 600, 638, 647, 653, 674, 675, 689, 702, 717, 718, 726, 771, 772, 775, 817, 826, 845, 846, 883, 901, 919, 972, 979, 996, 997, 999, 1019, 1022, 1025, 1026, 1028, 1029, 1031, 1033, 1034], "issu": [0, 4, 25, 79, 86, 198, 216, 264, 308, 360, 362, 367, 376, 377, 378, 381, 382, 384, 386, 387, 388, 389, 390, 393, 395, 399, 401, 402, 407, 409, 438, 441, 451, 462, 471, 472, 473, 523, 528, 532, 562, 574, 575, 577, 578, 580, 600, 616, 680, 684, 757, 859, 864, 876, 915, 965, 966, 973, 979, 984, 986, 991, 996, 997, 999, 1010, 1011, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1033], "instead": [0, 4, 5, 6, 20, 34, 48, 53, 55, 56, 57, 71, 100, 113, 118, 127, 144, 147, 150, 198, 200, 213, 216, 223, 250, 255, 256, 260, 261, 277, 284, 301, 311, 312, 313, 314, 315, 331, 333, 344, 346, 355, 359, 360, 367, 368, 371, 372, 373, 374, 375, 377, 378, 381, 382, 384, 385, 386, 393, 395, 399, 400, 402, 403, 404, 405, 406, 407, 408, 410, 421, 426, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 445, 448, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 498, 499, 522, 523, 524, 526, 527, 528, 529, 530, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 583, 596, 597, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 616, 619, 621, 624, 627, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 679, 683, 696, 734, 762, 766, 767, 768, 771, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 797, 799, 803, 804, 805, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 849, 850, 851, 853, 854, 855, 860, 861, 866, 867, 868, 878, 879, 882, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 914, 920, 925, 951, 965, 966, 968, 972, 973, 975, 976, 977, 980, 981, 986, 990, 991, 992, 996, 999, 1007, 1009, 1011, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "see": [0, 4, 5, 7, 20, 24, 25, 27, 37, 44, 49, 50, 53, 55, 57, 58, 62, 64, 65, 67, 69, 80, 86, 89, 90, 95, 100, 102, 106, 111, 112, 113, 116, 117, 118, 119, 120, 122, 124, 127, 130, 136, 143, 144, 145, 147, 150, 155, 156, 157, 162, 165, 168, 169, 171, 174, 177, 178, 179, 182, 189, 199, 200, 201, 204, 215, 216, 219, 221, 229, 231, 234, 238, 239, 241, 245, 246, 247, 253, 254, 256, 258, 259, 260, 261, 262, 266, 268, 269, 270, 273, 274, 279, 285, 286, 288, 292, 301, 307, 308, 311, 312, 313, 314, 315, 316, 321, 331, 344, 345, 346, 349, 350, 351, 352, 355, 359, 360, 361, 365, 366, 367, 368, 370, 371, 372, 373, 375, 377, 379, 380, 381, 384, 385, 386, 389, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 422, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 477, 480, 481, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 598, 599, 600, 603, 608, 611, 612, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 695, 697, 700, 702, 731, 751, 762, 766, 767, 768, 769, 776, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 797, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 924, 925, 945, 947, 950, 965, 966, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 1000, 1002, 1004, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "what": [0, 4, 9, 12, 40, 45, 52, 53, 86, 96, 100, 119, 167, 168, 187, 204, 206, 214, 229, 234, 241, 297, 344, 346, 349, 355, 360, 368, 373, 374, 375, 377, 379, 381, 385, 386, 387, 388, 390, 399, 405, 406, 407, 492, 525, 577, 578, 580, 635, 641, 685, 873, 874, 876, 877, 878, 879, 896, 897, 898, 899, 975, 976, 977, 979, 992, 997, 999, 1002, 1018, 1025], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 55, 61, 70, 71, 72, 73, 78, 85, 95, 99, 103, 104, 105, 113, 116, 120, 121, 122, 123, 124, 130, 133, 147, 150, 151, 156, 162, 168, 177, 182, 186, 187, 194, 212, 213, 214, 219, 222, 227, 232, 233, 237, 246, 250, 253, 257, 258, 259, 260, 263, 266, 267, 270, 271, 273, 277, 283, 288, 302, 307, 313, 314, 331, 334, 339, 344, 345, 346, 352, 359, 360, 362, 367, 370, 372, 373, 376, 379, 385, 386, 389, 390, 396, 397, 399, 403, 404, 406, 407, 408, 409, 421, 432, 435, 436, 438, 440, 441, 442, 448, 451, 454, 461, 471, 472, 473, 527, 534, 535, 541, 543, 545, 546, 547, 548, 549, 551, 553, 554, 555, 557, 559, 582, 583, 586, 591, 599, 600, 624, 626, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 664, 665, 667, 668, 669, 677, 678, 679, 682, 683, 692, 697, 708, 709, 710, 711, 712, 716, 717, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 771, 772, 773, 775, 778, 779, 780, 782, 783, 784, 785, 788, 789, 799, 811, 813, 816, 821, 822, 831, 839, 845, 846, 889, 891, 894, 896, 897, 898, 899, 965, 970, 971, 972, 973, 976, 979, 980, 982, 990, 992, 996, 997, 1000, 1002, 1007, 1011, 1018, 1021, 1024, 1026, 1027, 1028, 1031, 1032, 1033, 1034], "wai": [0, 4, 17, 27, 50, 60, 71, 74, 115, 122, 126, 128, 147, 157, 168, 170, 171, 199, 203, 213, 229, 230, 233, 234, 238, 254, 259, 266, 268, 301, 302, 314, 316, 355, 359, 360, 361, 367, 369, 371, 372, 375, 376, 381, 382, 386, 387, 389, 390, 393, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 414, 432, 433, 440, 441, 442, 448, 449, 451, 452, 458, 485, 544, 545, 552, 561, 578, 588, 589, 600, 621, 655, 656, 665, 666, 667, 693, 695, 706, 724, 725, 742, 743, 745, 751, 762, 766, 776, 781, 809, 817, 834, 855, 861, 866, 872, 898, 899, 947, 950, 965, 966, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982, 983, 984, 986, 988, 990, 991, 992, 996, 997, 999, 1000, 1002, 1010, 1011, 1018, 1020, 1026, 1031, 1032], "question": [0, 136, 167, 259, 339, 362, 372, 373, 378, 381, 403, 406, 817, 890, 893, 972, 975, 976, 982, 994, 1000], "faq": [0, 381, 403, 681, 973, 986], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 57, 60, 69, 70, 71, 74, 78, 80, 86, 101, 105, 110, 111, 114, 118, 119, 120, 121, 123, 124, 128, 130, 144, 155, 157, 165, 168, 169, 170, 171, 174, 179, 187, 188, 194, 199, 200, 201, 202, 205, 206, 212, 216, 223, 224, 229, 232, 234, 236, 237, 238, 240, 250, 254, 255, 257, 259, 260, 261, 266, 268, 269, 271, 272, 273, 279, 281, 283, 285, 286, 297, 306, 308, 312, 313, 314, 328, 329, 331, 334, 339, 344, 345, 349, 353, 359, 360, 361, 362, 368, 371, 372, 374, 375, 376, 378, 381, 385, 386, 387, 390, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 413, 422, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 611, 612, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 693, 709, 745, 778, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 811, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 966, 970, 971, 972, 973, 975, 976, 982, 983, 984, 986, 988, 989, 991, 992, 995, 997, 999, 1000, 1002, 1004, 1006, 1011, 1013, 1018, 1020, 1023, 1029, 1032, 1033, 1034], "you": [0, 14, 16, 20, 24, 71, 118, 119, 122, 124, 144, 147, 163, 169, 186, 199, 200, 229, 234, 241, 247, 254, 259, 260, 266, 274, 285, 311, 312, 315, 320, 323, 344, 355, 359, 360, 361, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 385, 386, 389, 390, 393, 395, 397, 398, 399, 400, 401, 403, 406, 407, 408, 410, 411, 416, 426, 432, 433, 435, 436, 438, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 485, 489, 492, 493, 498, 499, 521, 522, 523, 525, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 569, 570, 571, 577, 578, 579, 580, 583, 596, 597, 599, 600, 616, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 679, 689, 773, 784, 785, 786, 787, 788, 789, 790, 792, 794, 799, 800, 801, 802, 803, 804, 805, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 838, 839, 845, 846, 847, 848, 851, 852, 853, 854, 855, 860, 861, 862, 867, 868, 873, 874, 876, 877, 878, 879, 881, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 925, 942, 965, 966, 971, 972, 976, 977, 980, 982, 983, 986, 987, 990, 991, 992, 995, 996, 999, 1000, 1002, 1003, 1006, 1009, 1011, 1018, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 20, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 79, 80, 81, 82, 86, 96, 98, 99, 100, 101, 103, 105, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 142, 143, 144, 146, 147, 150, 155, 156, 157, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 182, 183, 186, 187, 189, 191, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 206, 214, 215, 216, 219, 220, 221, 227, 228, 229, 230, 231, 233, 234, 238, 241, 244, 245, 246, 247, 249, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 266, 268, 270, 271, 273, 274, 277, 279, 281, 283, 284, 285, 286, 288, 296, 297, 298, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 320, 321, 323, 324, 328, 329, 331, 334, 339, 344, 345, 346, 351, 352, 353, 355, 359, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 385, 386, 387, 388, 389, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 421, 423, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 461, 471, 472, 473, 476, 485, 488, 492, 497, 498, 501, 510, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 568, 569, 570, 571, 572, 573, 577, 578, 580, 581, 583, 586, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 621, 623, 624, 627, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 678, 680, 681, 682, 683, 684, 687, 689, 690, 691, 693, 696, 698, 700, 701, 707, 709, 710, 711, 712, 714, 715, 717, 718, 720, 721, 725, 726, 727, 728, 730, 731, 734, 740, 743, 744, 745, 746, 747, 751, 767, 768, 770, 771, 772, 773, 775, 776, 777, 780, 781, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 845, 846, 847, 848, 851, 852, 853, 855, 856, 857, 861, 862, 863, 866, 867, 868, 873, 880, 881, 886, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 900, 901, 904, 906, 908, 912, 914, 919, 924, 925, 931, 936, 939, 942, 944, 946, 947, 950, 957, 960, 961, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "contribut": [0, 13, 20, 124, 155, 182, 268, 306, 362, 370, 371, 375, 376, 377, 381, 386, 387, 389, 404, 405, 406, 409, 436, 438, 542, 543, 548, 549, 714, 717, 744, 970, 976, 979, 984, 991, 994, 996, 997, 1000, 1009, 1018, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "activ": [0, 165, 206, 244, 250, 260, 318, 325, 346, 367, 368, 371, 373, 374, 379, 381, 384, 386, 387, 389, 400, 485, 491, 515, 621, 624, 626, 639, 640, 642, 643, 644, 652, 653, 654, 671, 672, 673, 674, 675, 702, 707, 783, 844, 845, 846, 884, 942, 972, 973, 974, 975, 979, 980, 981, 989], "who": [0, 70, 360, 362, 368, 373, 380, 387, 389, 830, 831, 832, 834, 836, 838, 839, 840, 994, 996, 1020, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "also": [0, 4, 7, 11, 17, 19, 20, 24, 25, 26, 27, 32, 46, 48, 53, 57, 58, 60, 64, 70, 71, 78, 80, 85, 86, 95, 103, 105, 113, 116, 118, 120, 122, 123, 124, 128, 130, 143, 144, 145, 147, 150, 152, 155, 163, 168, 169, 170, 171, 174, 178, 179, 181, 187, 190, 191, 194, 198, 199, 200, 203, 207, 215, 216, 219, 230, 232, 234, 238, 250, 257, 259, 260, 261, 262, 265, 266, 268, 269, 270, 279, 282, 287, 290, 292, 295, 301, 302, 303, 305, 306, 311, 312, 313, 314, 324, 327, 328, 329, 331, 333, 344, 345, 346, 349, 350, 353, 355, 359, 360, 361, 366, 367, 368, 370, 371, 372, 373, 375, 376, 379, 381, 382, 384, 385, 386, 387, 389, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 426, 427, 428, 430, 431, 434, 435, 436, 437, 439, 441, 451, 452, 454, 456, 471, 473, 481, 485, 487, 492, 497, 521, 522, 524, 525, 530, 535, 538, 540, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 598, 599, 600, 611, 621, 622, 624, 632, 633, 634, 635, 636, 639, 641, 642, 643, 645, 649, 650, 651, 652, 661, 665, 667, 670, 673, 676, 680, 683, 684, 699, 702, 711, 717, 718, 726, 731, 751, 767, 768, 771, 772, 775, 783, 784, 785, 788, 789, 799, 802, 805, 810, 811, 812, 813, 814, 815, 817, 827, 830, 831, 832, 834, 835, 836, 838, 839, 840, 844, 845, 846, 848, 850, 851, 856, 857, 861, 865, 868, 873, 877, 890, 893, 896, 897, 898, 899, 908, 927, 940, 944, 965, 966, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 987, 989, 990, 991, 992, 996, 997, 999, 1000, 1002, 1007, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "help": [0, 4, 9, 11, 16, 55, 70, 74, 100, 106, 169, 182, 216, 219, 260, 262, 298, 328, 331, 345, 346, 355, 359, 360, 371, 374, 375, 376, 377, 378, 379, 381, 382, 386, 387, 388, 393, 399, 400, 403, 407, 409, 422, 525, 566, 616, 639, 643, 654, 674, 675, 681, 703, 824, 896, 897, 898, 899, 966, 970, 971, 973, 975, 976, 978, 980, 986, 987, 992, 995, 996, 997, 999, 1000, 1011, 1024, 1025, 1026, 1029, 1032], "triag": [0, 362, 373, 376, 387], "pr": [0, 132, 360, 373, 376, 381, 407, 729, 976, 1028, 1030], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 74, 75, 79, 81, 85, 86, 88, 89, 90, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 144, 145, 147, 151, 152, 153, 154, 155, 158, 162, 163, 167, 168, 169, 170, 171, 174, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 250, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 308, 311, 313, 314, 315, 316, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 359, 360, 362, 365, 366, 368, 370, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 393, 396, 397, 399, 403, 405, 407, 408, 409, 411, 415, 420, 421, 426, 429, 432, 435, 436, 438, 441, 443, 447, 448, 449, 451, 453, 454, 456, 458, 461, 463, 471, 472, 473, 477, 480, 481, 484, 485, 486, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 527, 529, 530, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 571, 572, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 599, 600, 603, 604, 607, 608, 609, 611, 612, 616, 617, 618, 619, 621, 622, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 674, 675, 678, 679, 680, 681, 682, 683, 684, 690, 693, 695, 706, 710, 711, 712, 725, 731, 745, 766, 769, 773, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 818, 819, 820, 821, 822, 828, 829, 831, 833, 834, 836, 837, 838, 839, 840, 844, 845, 846, 848, 851, 852, 853, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 888, 889, 890, 891, 893, 894, 897, 899, 900, 901, 902, 919, 920, 924, 925, 928, 929, 941, 945, 947, 950, 965, 966, 968, 970, 971, 973, 975, 976, 977, 979, 981, 982, 983, 984, 988, 989, 991, 992, 994, 996, 998, 999, 1000, 1002, 1005, 1009, 1010, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034], "arturo": [0, 37, 57, 116, 177, 182, 260, 262, 306, 344, 345, 346, 363, 1032, 1033], "amor": [0, 37, 57, 116, 177, 182, 260, 262, 306, 344, 345, 346, 363, 1032, 1033], "juan": [0, 363, 1018, 1029, 1030, 1031, 1032, 1033], "carlo": [0, 232, 363, 406, 409, 600, 630, 631, 968, 981, 1018, 1029, 1030, 1031, 1032, 1033, 1034], "alfaro": [0, 363, 1029, 1030, 1031, 1032, 1033], "jim\u00e9nez": [0, 363, 1026, 1029, 1030, 1031, 1032, 1033], "luci": [0, 265, 363, 1029, 1030, 1031, 1032, 1033], "liu": [0, 265, 363, 552, 714, 744, 976, 982, 1021, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034], "maxwel": [0, 363, 1028, 1031, 1032, 1033], "martin": [0, 363, 710, 711, 712, 972, 976, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "loyola": [0, 363, 1031, 1032], "sylvain": [0, 363, 1022, 1027, 1028, 1029, 1030, 1031, 1032], "mari\u00e9": [0, 363, 1027, 1028, 1029, 1030, 1031, 1032], "norbert": [0, 363, 1020, 1030, 1031, 1032], "prein": [0, 363, 1030, 1031, 1032], "reshama": [0, 357, 363, 1026, 1027, 1029, 1030, 1031, 1032, 1033], "shaikh": [0, 357, 363, 1026, 1027, 1029, 1030, 1031, 1032, 1033], "albert": [0, 227, 363, 1025, 1026, 1027, 1030, 1031], "around": [0, 4, 26, 37, 52, 85, 113, 123, 156, 169, 174, 234, 262, 298, 319, 321, 322, 331, 334, 344, 345, 346, 355, 368, 370, 373, 379, 384, 390, 399, 403, 404, 407, 409, 460, 461, 504, 533, 609, 629, 638, 693, 783, 791, 807, 834, 836, 838, 839, 840, 868, 972, 973, 975, 976, 982, 986, 990, 996, 997, 1000, 1009, 1011, 1022, 1023], "lauren": [0, 356, 681, 685, 973, 1030, 1033], "burk": [0, 356, 1033], "francoisgoupil": [0, 356, 1032], "longer": [0, 4, 53, 113, 169, 183, 297, 314, 373, 375, 399, 403, 406, 407, 409, 438, 525, 552, 971, 975, 976, 978, 981, 991, 1000, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "mathieu": [0, 2, 24, 48, 100, 189, 199, 220, 235, 260, 344, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1031], "blondel": [0, 2, 24, 48, 100, 189, 199, 220, 235, 260, 344, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1031], "lar": [0, 2, 14, 98, 147, 165, 176, 187, 217, 344, 345, 346, 370, 460, 461, 467, 490, 520, 526, 528, 531, 532, 534, 535, 537, 640, 641, 642, 643, 644, 645, 652, 653, 654, 667, 671, 672, 673, 674, 675, 998, 1009, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1031], "buitinck": [0, 2, 14, 344, 345, 346, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "noel": [0, 2, 109, 110, 111, 112, 1018, 1019, 1020, 1021, 1022, 1030], "daw": [0, 2, 109, 110, 111, 112, 1018, 1019, 1020, 1021, 1022], "dubourg": [0, 2, 153, 157, 1000, 1018, 1022], "edouard": [0, 2, 1018], "duchesnai": [0, 2, 1018], "alexand": [0, 2, 399, 404, 524, 854, 1020, 1021, 1022, 1024, 1025, 1026, 1030, 1031, 1032], "fabisch": [0, 2, 1020, 1021, 1022, 1024], "virgil": [0, 2, 9, 1018, 1019, 1021], "fritsch": [0, 2, 9, 1018, 1019, 1021], "satrajit": [0, 2, 1018, 1019], "ghosh": [0, 2, 399, 1018, 1019], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1018, 1021, 1026, 1027, 1028, 1029, 1032], "gorgolewski": [0, 2, 1018, 1021], "jaqu": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 181, 194, 195, 196, 221, 336, 339, 1018, 1019, 1020, 1021], "grobler": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 181, 194, 195, 196, 221, 336, 339, 1018, 1019, 1020, 1021], "brian": [0, 2, 46, 697, 976, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1031, 1032], "holt": [0, 2, 1018], "arnaud": [0, 2, 1019, 1020, 1021, 1022, 1023, 1024], "joli": [0, 2, 1019, 1020, 1021, 1022, 1023, 1024], "thoui": [0, 2, 1018], "rai": [0, 2, 944, 976, 1018, 1028, 1030, 1031], "jone": [0, 2, 368, 1018], "kyle": [0, 2, 99, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1029, 1030], "kastner": [0, 2, 99, 1020, 1021, 1022, 1029, 1030], "manoj": [0, 2, 42, 147, 180, 1021, 1022, 1023, 1024, 1025], "kumar": [0, 2, 42, 147, 180, 368, 399, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "robert": [0, 2, 48, 72, 147, 186, 370, 404, 517, 524, 617, 645, 710, 711, 712, 723, 854, 966, 972, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1033], "layton": [0, 2, 48, 1018, 1019, 1020, 1021, 1023], "wei": [0, 2, 990, 1018, 1019, 1022, 1023, 1024, 1025, 1027, 1031, 1034], "li": [0, 2, 322, 368, 628, 631, 685, 714, 744, 881, 965, 968, 976, 979, 986, 988, 991, 1018, 1019, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "paolo": [0, 2, 1018, 1022, 1028], "losi": [0, 2, 1018], "gill": [0, 2, 113, 114, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "loupp": [0, 2, 113, 114, 406, 544, 545, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "chiara": [0, 2, 364, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "marmo": [0, 2, 364, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "jarrod": [0, 2, 1027], "millman": [0, 2, 1027], "passo": [0, 2, 1018, 1019], "peter": [0, 2, 11, 16, 63, 109, 122, 124, 125, 260, 344, 345, 399, 437, 439, 446, 638, 778, 779, 972, 976, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1033], "prettenhof": [0, 2, 11, 16, 109, 122, 124, 125, 260, 344, 345, 1018, 1019, 1020, 1021, 1022, 1023], "venkat": [0, 2], "raghav": [0, 2, 121, 263, 301, 1022, 1023, 1024, 1025, 1026, 1030], "rajagopalan": [0, 2, 1026, 1030], "jacob": [0, 2, 1023, 1024, 1025], "schreiber": [0, 2, 1023, 1024, 1025], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1018, 1019], "jake": [0, 2, 11, 157, 199, 219, 247, 284, 292, 995, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1032], "vanderpla": [0, 2, 11, 157, 199, 219, 247, 284, 292, 995, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "ward": [0, 2, 36, 39, 44, 52, 54, 56, 62, 68, 165, 171, 407, 430, 434, 452, 519, 841, 1018, 1021, 1023], "farlei": [0, 2, 1018], "ron": [0, 2, 246, 1018], "weiss": [0, 2, 246, 399, 680, 1018], "respons": [0, 147, 169, 194, 198, 201, 234, 269, 344, 370, 379, 386, 398, 399, 400, 406, 409, 435, 453, 471, 472, 473, 620, 621, 622, 663, 664, 687, 689, 691, 783, 784, 977, 983, 994, 1002], "If": [0, 4, 11, 16, 27, 32, 42, 49, 55, 71, 82, 98, 118, 123, 130, 159, 163, 168, 179, 198, 213, 215, 234, 259, 266, 274, 284, 292, 301, 306, 307, 331, 339, 340, 344, 345, 346, 353, 355, 359, 360, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 389, 390, 393, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 423, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 501, 503, 504, 508, 511, 512, 513, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 700, 701, 702, 703, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 724, 726, 729, 730, 733, 734, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752, 754, 755, 756, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 797, 799, 802, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 917, 923, 925, 927, 929, 935, 939, 942, 944, 945, 947, 950, 951, 957, 960, 961, 962, 963, 965, 966, 968, 970, 971, 972, 973, 974, 976, 979, 980, 982, 983, 986, 988, 990, 991, 992, 993, 996, 997, 999, 1002, 1003, 1009, 1010, 1011, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1030, 1031, 1032, 1034], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 86, 90, 91, 92, 94, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 146, 147, 150, 151, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 191, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 210, 213, 215, 216, 217, 219, 220, 221, 222, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 319, 320, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 339, 342, 343, 346, 347, 349, 351, 352, 353, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 380, 382, 385, 386, 387, 388, 389, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 405, 409, 410, 411, 412, 415, 417, 418, 420, 428, 445, 446, 448, 450, 452, 460, 467, 469, 470, 474, 482, 492, 497, 498, 505, 520, 532, 534, 535, 536, 537, 544, 561, 563, 564, 566, 567, 572, 574, 575, 581, 584, 585, 587, 590, 592, 598, 605, 609, 610, 613, 618, 625, 627, 631, 639, 640, 643, 649, 650, 652, 656, 664, 672, 674, 675, 676, 683, 684, 685, 688, 700, 703, 704, 705, 710, 711, 712, 714, 716, 718, 720, 723, 724, 727, 731, 734, 739, 744, 746, 747, 751, 752, 754, 755, 756, 757, 759, 762, 763, 764, 765, 768, 769, 771, 780, 792, 793, 794, 795, 796, 797, 798, 808, 816, 818, 820, 822, 824, 828, 829, 838, 839, 840, 842, 850, 851, 854, 856, 859, 870, 871, 873, 875, 876, 878, 879, 880, 883, 887, 889, 898, 899, 900, 901, 904, 907, 908, 909, 914, 915, 924, 925, 932, 939, 943, 944, 945, 947, 948, 952, 953, 954, 958, 959, 965, 966, 968, 969, 971, 974, 975, 977, 978, 979, 981, 982, 983, 984, 986, 987, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "scientif": [0, 32, 136, 137, 138, 139, 232, 362, 367, 371, 384, 389, 399, 441, 451, 490, 1000, 1003], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 58, 62, 64, 65, 66, 70, 71, 72, 73, 75, 78, 80, 81, 82, 86, 89, 90, 92, 95, 96, 97, 98, 100, 103, 104, 106, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 130, 132, 133, 136, 142, 143, 144, 146, 147, 150, 152, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 181, 182, 184, 186, 187, 189, 191, 193, 195, 198, 199, 200, 201, 204, 206, 207, 210, 211, 212, 213, 214, 216, 219, 220, 223, 224, 227, 228, 230, 231, 232, 234, 235, 238, 240, 241, 244, 245, 246, 247, 249, 250, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 273, 277, 279, 281, 282, 284, 287, 288, 289, 290, 292, 295, 296, 297, 298, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 324, 327, 328, 329, 331, 332, 333, 334, 336, 339, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 384, 385, 386, 387, 390, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 439, 458, 459, 460, 461, 462, 463, 464, 465, 490, 512, 520, 521, 523, 526, 538, 550, 551, 552, 558, 559, 571, 572, 578, 600, 606, 616, 621, 622, 627, 629, 640, 644, 647, 648, 655, 657, 662, 663, 664, 665, 666, 681, 700, 707, 709, 714, 734, 744, 752, 769, 791, 807, 809, 830, 831, 832, 834, 836, 837, 838, 839, 840, 851, 860, 861, 862, 868, 873, 874, 876, 877, 878, 879, 881, 884, 888, 892, 940, 942, 965, 966, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 988, 989, 990, 991, 992, 993, 995, 996, 997, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034], "would": [0, 4, 6, 9, 26, 32, 45, 53, 55, 58, 70, 78, 80, 81, 86, 92, 100, 101, 123, 147, 150, 155, 156, 168, 169, 170, 171, 174, 182, 188, 198, 199, 200, 213, 216, 227, 234, 246, 255, 259, 260, 265, 267, 269, 279, 285, 297, 301, 302, 306, 307, 314, 322, 331, 340, 344, 346, 355, 359, 368, 369, 373, 374, 375, 379, 381, 382, 384, 385, 386, 387, 390, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 421, 435, 454, 457, 471, 472, 473, 478, 521, 523, 525, 530, 533, 541, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 557, 559, 572, 573, 576, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 661, 662, 663, 664, 665, 667, 668, 689, 691, 697, 701, 702, 709, 744, 770, 773, 777, 785, 787, 799, 813, 821, 822, 831, 839, 846, 873, 874, 876, 877, 878, 879, 880, 881, 886, 888, 889, 891, 894, 896, 897, 898, 899, 936, 965, 966, 969, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 986, 991, 996, 997, 1000, 1002, 1007, 1009, 1011, 1015, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "appreci": [0, 373], "citat": [0, 367, 370, 384], "paper": [0, 147, 174, 259, 370, 379, 384, 399, 401, 431, 438, 467, 493, 523, 530, 552, 630, 647, 655, 656, 660, 665, 668, 681, 776, 825, 834, 837, 880, 881, 972, 976, 979, 982, 991, 1011, 1018, 1025, 1026], "machin": [0, 4, 6, 8, 9, 27, 63, 116, 143, 144, 150, 155, 166, 170, 172, 210, 240, 259, 262, 265, 294, 299, 301, 306, 308, 313, 316, 327, 332, 339, 344, 346, 359, 360, 362, 366, 367, 368, 370, 371, 373, 376, 379, 380, 384, 385, 386, 388, 393, 397, 399, 403, 404, 406, 407, 409, 426, 428, 437, 460, 461, 467, 491, 493, 499, 505, 506, 507, 519, 521, 523, 530, 533, 544, 545, 546, 547, 548, 549, 553, 554, 555, 582, 583, 599, 600, 603, 608, 611, 623, 627, 628, 630, 632, 633, 634, 639, 640, 643, 644, 645, 646, 647, 648, 665, 671, 672, 681, 697, 702, 713, 723, 729, 731, 773, 776, 783, 813, 814, 828, 829, 834, 837, 844, 845, 846, 848, 866, 868, 874, 888, 889, 890, 891, 893, 894, 898, 899, 965, 966, 968, 969, 972, 973, 974, 976, 977, 979, 982, 983, 984, 986, 990, 992, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1007, 1011, 1012, 1013, 1015, 1018, 1020, 1030, 1031, 1032, 1033], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 359, 361, 367, 371, 373, 374, 375, 376, 377, 378, 381, 382, 384, 386, 389, 400, 407, 485, 497, 498, 570, 796, 862, 944, 976, 986, 992, 994, 997, 999, 1000, 1002, 1003, 1005, 1011, 1013, 1018, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033], "et": [0, 11, 78, 79, 109, 110, 125, 186, 292, 370, 396, 399, 401, 404, 406, 407, 408, 440, 487, 508, 509, 517, 524, 530, 533, 552, 671, 672, 708, 709, 823, 825, 845, 846, 881, 924, 925, 972, 973, 976, 982, 986, 988, 991, 992, 1026, 1034], "al": [0, 11, 78, 79, 109, 110, 125, 186, 292, 370, 396, 399, 401, 404, 406, 407, 408, 440, 487, 508, 509, 517, 524, 530, 533, 552, 671, 672, 708, 709, 823, 825, 845, 846, 881, 924, 925, 972, 973, 976, 982, 986, 988, 991, 992, 1026, 1031, 1034], "jmlr": [0, 399, 655, 656, 665, 693, 972, 991], "12": [0, 4, 6, 20, 40, 42, 43, 53, 55, 56, 57, 73, 74, 85, 119, 120, 124, 153, 154, 155, 163, 164, 168, 169, 171, 178, 182, 184, 198, 206, 216, 219, 222, 223, 227, 228, 230, 238, 241, 246, 247, 258, 259, 261, 262, 265, 271, 298, 305, 306, 307, 313, 316, 317, 339, 346, 370, 371, 378, 385, 387, 389, 391, 392, 399, 403, 407, 432, 436, 438, 471, 472, 473, 474, 521, 523, 530, 559, 653, 658, 660, 674, 675, 678, 681, 682, 783, 784, 786, 803, 806, 819, 840, 856, 965, 966, 972, 974, 977, 986, 990, 991, 994, 1002, 1007, 1016, 1019, 1021, 1025, 1026, 1028, 1029], "pp": [0, 63, 258, 370, 399, 401, 407, 410, 411, 433, 437, 441, 451, 500, 522, 523, 530, 579, 624, 632, 653, 674, 675, 709, 714, 718, 728, 744, 757, 771, 823, 825, 827, 844, 864, 876, 969, 976, 978, 979, 989], "2825": 0, "2830": 0, "2011": [0, 47, 169, 220, 379, 404, 407, 524, 527, 529, 530, 536, 579, 616, 627, 647, 718, 966, 980, 990, 995, 1018], "bibtex": 0, "entri": [0, 16, 71, 75, 130, 163, 168, 169, 255, 311, 345, 355, 377, 379, 381, 385, 386, 396, 397, 399, 404, 406, 409, 452, 461, 520, 521, 526, 534, 535, 550, 551, 577, 580, 583, 600, 609, 621, 627, 629, 636, 640, 642, 644, 645, 648, 650, 652, 653, 654, 662, 664, 671, 672, 674, 675, 693, 696, 698, 701, 704, 705, 707, 714, 717, 718, 719, 722, 723, 726, 731, 744, 746, 747, 771, 773, 776, 777, 778, 779, 798, 812, 828, 829, 836, 837, 838, 839, 840, 859, 865, 877, 962, 965, 966, 972, 976, 979, 986, 991, 997, 1002, 1025, 1028, 1029, 1031], "articl": [0, 17, 70, 344, 368, 372, 373, 381, 403, 412, 464, 694, 972, 976, 1011, 1031], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 78, 79, 81, 82, 85, 86, 91, 95, 96, 97, 98, 99, 103, 104, 105, 111, 112, 113, 116, 118, 119, 120, 123, 124, 126, 129, 132, 133, 139, 142, 143, 145, 146, 147, 150, 151, 152, 154, 155, 156, 157, 158, 168, 177, 178, 180, 182, 183, 185, 186, 187, 190, 191, 197, 198, 200, 202, 203, 204, 206, 207, 212, 215, 216, 219, 220, 221, 227, 231, 232, 233, 235, 236, 244, 245, 246, 247, 248, 249, 250, 253, 254, 258, 259, 260, 262, 263, 264, 268, 269, 273, 281, 282, 285, 286, 287, 288, 290, 291, 292, 301, 305, 306, 307, 321, 324, 327, 328, 329, 330, 331, 334, 340, 341, 344, 350, 351, 352, 372, 373, 377, 381, 400, 976, 999, 1007], "p": [0, 11, 13, 24, 26, 27, 41, 61, 80, 81, 85, 92, 103, 122, 143, 153, 174, 210, 215, 216, 219, 221, 231, 247, 259, 265, 266, 292, 367, 368, 370, 371, 378, 381, 396, 397, 399, 401, 402, 404, 406, 408, 409, 410, 412, 431, 433, 435, 436, 439, 446, 458, 460, 463, 464, 467, 487, 517, 523, 527, 529, 530, 536, 538, 539, 540, 542, 544, 545, 546, 547, 548, 550, 553, 554, 555, 579, 581, 582, 583, 584, 585, 587, 588, 589, 593, 594, 595, 596, 597, 598, 604, 605, 616, 629, 632, 677, 679, 681, 683, 694, 704, 712, 729, 740, 774, 776, 787, 793, 794, 795, 798, 813, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 844, 848, 849, 864, 876, 882, 898, 899, 900, 969, 970, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 986, 990, 991, 994, 1006, 1009, 1018, 1019, 1021, 1024, 1026, 1033], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 20, 26, 32, 37, 43, 47, 48, 49, 52, 53, 55, 58, 64, 67, 71, 75, 86, 98, 113, 116, 117, 118, 120, 123, 130, 131, 138, 141, 143, 146, 147, 148, 150, 156, 157, 159, 165, 167, 168, 169, 170, 174, 182, 184, 187, 198, 199, 200, 208, 216, 220, 231, 233, 234, 237, 241, 249, 257, 259, 260, 261, 262, 265, 266, 268, 269, 271, 279, 295, 296, 297, 303, 306, 307, 311, 313, 315, 319, 320, 339, 344, 345, 346, 355, 368, 373, 374, 375, 377, 379, 384, 397, 400, 404, 406, 407, 408, 409, 476, 497, 498, 520, 521, 526, 527, 555, 570, 571, 572, 581, 584, 585, 587, 588, 589, 593, 594, 595, 596, 597, 598, 606, 616, 621, 624, 647, 702, 711, 714, 717, 718, 744, 771, 772, 775, 776, 786, 787, 790, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806, 812, 845, 846, 850, 859, 862, 863, 867, 868, 903, 908, 909, 968, 971, 980, 983, 984, 986, 990, 1020, 1026, 1027, 1028, 1030, 1032], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 55, 65, 70, 73, 82, 86, 103, 113, 114, 122, 123, 130, 137, 150, 151, 152, 153, 155, 157, 158, 159, 163, 167, 180, 183, 198, 199, 200, 216, 220, 224, 233, 234, 244, 259, 263, 264, 270, 277, 285, 301, 306, 322, 338, 346, 355, 359, 365, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 384, 386, 390, 393, 397, 398, 399, 401, 403, 404, 406, 407, 408, 409, 411, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 492, 517, 520, 522, 523, 526, 527, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 578, 579, 580, 582, 583, 586, 593, 599, 600, 606, 611, 612, 619, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 675, 679, 681, 686, 709, 716, 726, 728, 751, 773, 785, 786, 787, 788, 789, 791, 792, 794, 799, 803, 807, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 835, 837, 838, 839, 840, 844, 845, 846, 848, 851, 853, 854, 855, 858, 860, 861, 864, 866, 867, 868, 871, 873, 874, 875, 876, 877, 878, 879, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 924, 925, 936, 944, 965, 966, 970, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 986, 990, 991, 992, 997, 999, 1000, 1011, 1018, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 60, 68, 75, 78, 81, 86, 92, 96, 97, 98, 103, 111, 112, 117, 118, 120, 129, 133, 136, 137, 138, 139, 144, 145, 146, 150, 153, 155, 157, 158, 159, 165, 168, 169, 182, 186, 199, 208, 212, 213, 216, 220, 234, 259, 260, 262, 266, 273, 295, 301, 303, 306, 311, 313, 316, 320, 322, 324, 331, 336, 344, 345, 346, 351, 353, 355, 359, 361, 362, 367, 368, 370, 371, 373, 375, 376, 378, 381, 384, 385, 386, 387, 388, 390, 394, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 479, 480, 481, 483, 486, 489, 490, 491, 492, 493, 497, 499, 500, 501, 502, 503, 509, 511, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 596, 597, 599, 600, 606, 609, 616, 617, 618, 619, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 693, 694, 699, 700, 701, 705, 706, 708, 710, 711, 712, 713, 714, 719, 724, 725, 728, 731, 732, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 752, 754, 755, 762, 763, 764, 765, 766, 769, 776, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 923, 924, 925, 935, 936, 961, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 989, 990, 991, 992, 995, 996, 997, 1002, 1003, 1009, 1010, 1011, 1013, 1018, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 55, 58, 68, 70, 75, 77, 80, 83, 84, 85, 87, 95, 97, 98, 101, 114, 116, 123, 165, 166, 171, 172, 176, 187, 198, 213, 217, 231, 245, 246, 249, 250, 252, 255, 274, 275, 311, 328, 345, 355, 360, 365, 370, 371, 373, 379, 381, 386, 396, 397, 398, 401, 402, 404, 406, 407, 421, 430, 434, 441, 451, 452, 453, 454, 459, 462, 463, 464, 465, 466, 471, 472, 473, 485, 501, 513, 519, 520, 526, 530, 534, 535, 539, 541, 543, 545, 547, 549, 551, 553, 554, 557, 559, 570, 578, 582, 583, 589, 595, 600, 619, 620, 623, 624, 628, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 659, 661, 662, 665, 667, 668, 677, 684, 690, 693, 706, 724, 725, 727, 742, 743, 745, 776, 781, 785, 790, 797, 799, 810, 814, 816, 817, 818, 821, 822, 823, 831, 839, 841, 844, 846, 848, 849, 852, 855, 861, 862, 863, 868, 872, 882, 888, 889, 890, 891, 893, 894, 897, 899, 903, 970, 971, 972, 973, 976, 977, 978, 981, 984, 990, 991, 993, 1013, 1018, 1021, 1022, 1023, 1026, 1028, 1029, 1032, 1033], "b": [0, 8, 9, 10, 24, 26, 59, 65, 80, 101, 103, 110, 112, 113, 119, 123, 124, 133, 136, 137, 151, 152, 153, 158, 163, 180, 182, 183, 198, 199, 204, 216, 235, 237, 258, 262, 264, 269, 273, 277, 314, 322, 355, 368, 370, 373, 377, 378, 379, 396, 397, 399, 402, 403, 404, 407, 426, 471, 489, 530, 535, 555, 577, 578, 579, 580, 596, 597, 599, 600, 617, 635, 636, 637, 638, 647, 658, 661, 663, 665, 669, 676, 677, 694, 708, 718, 719, 778, 779, 796, 797, 835, 861, 862, 863, 864, 867, 868, 876, 903, 925, 926, 939, 966, 968, 972, 973, 974, 976, 979, 981, 986, 990, 991, 1006, 1018, 1026, 1029, 1031, 1032, 1033], "o": [0, 17, 19, 27, 30, 38, 49, 55, 60, 61, 63, 64, 82, 85, 91, 97, 127, 158, 186, 191, 196, 198, 213, 233, 244, 259, 261, 268, 301, 302, 306, 312, 315, 323, 349, 359, 368, 370, 373, 389, 399, 401, 404, 406, 410, 412, 433, 436, 437, 439, 462, 464, 523, 593, 616, 655, 656, 681, 816, 844, 859, 900, 944, 945, 968, 970, 972, 973, 976, 977, 979, 980, 990, 991, 992, 1018, 1021, 1024, 1026, 1027, 1030, 1031, 1033], "m": [0, 8, 9, 11, 19, 26, 27, 44, 58, 59, 63, 64, 65, 80, 81, 95, 133, 155, 180, 198, 216, 259, 263, 292, 323, 327, 338, 344, 359, 360, 367, 368, 370, 371, 377, 379, 386, 389, 396, 397, 399, 401, 404, 406, 408, 410, 433, 434, 435, 439, 446, 462, 463, 489, 502, 517, 521, 523, 525, 530, 628, 634, 638, 653, 660, 674, 675, 678, 682, 697, 705, 714, 729, 744, 746, 747, 783, 784, 834, 859, 925, 955, 956, 966, 968, 970, 972, 973, 974, 976, 977, 978, 979, 980, 984, 986, 990, 992, 1000, 1026, 1027, 1028, 1029, 1032, 1033, 1034], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 65, 75, 78, 79, 80, 81, 86, 95, 103, 106, 110, 113, 114, 119, 123, 124, 125, 133, 143, 151, 152, 153, 157, 158, 159, 162, 163, 168, 180, 182, 183, 187, 198, 205, 208, 216, 224, 230, 233, 244, 247, 250, 258, 259, 262, 264, 265, 266, 269, 272, 274, 277, 281, 286, 290, 292, 307, 315, 333, 346, 355, 368, 370, 374, 377, 384, 386, 396, 397, 399, 401, 402, 403, 404, 406, 407, 416, 421, 426, 435, 440, 442, 454, 458, 463, 467, 471, 472, 473, 487, 493, 502, 509, 523, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 577, 578, 579, 580, 595, 598, 599, 600, 616, 624, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 674, 675, 681, 685, 705, 710, 711, 712, 716, 718, 769, 773, 776, 785, 799, 802, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 838, 839, 845, 846, 859, 864, 876, 883, 884, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 901, 942, 966, 968, 970, 972, 973, 976, 977, 978, 979, 980, 983, 984, 986, 990, 991, 992, 996, 1011, 1018, 1022, 1025, 1028, 1029, 1030, 1031, 1033], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 60, 61, 63, 70, 71, 82, 89, 92, 95, 98, 103, 105, 121, 150, 158, 198, 206, 212, 214, 216, 224, 228, 230, 231, 232, 233, 247, 258, 259, 267, 277, 285, 286, 292, 297, 319, 320, 323, 330, 331, 336, 346, 367, 368, 370, 375, 379, 384, 397, 399, 401, 402, 404, 406, 407, 409, 410, 433, 435, 436, 441, 449, 452, 477, 482, 492, 515, 523, 525, 546, 547, 554, 555, 570, 571, 579, 603, 604, 608, 611, 612, 633, 634, 637, 658, 659, 660, 669, 677, 678, 681, 682, 686, 694, 697, 710, 711, 712, 714, 744, 752, 756, 766, 769, 776, 797, 823, 825, 827, 828, 829, 844, 855, 859, 861, 862, 864, 876, 881, 898, 899, 903, 968, 970, 972, 973, 974, 975, 976, 978, 984, 986, 988, 991, 992, 999, 1007, 1008, 1009, 1021, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032], "perrot": [0, 1018], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 55, 57, 61, 70, 78, 80, 81, 82, 85, 86, 98, 100, 101, 113, 120, 122, 123, 126, 136, 143, 146, 147, 158, 167, 168, 169, 174, 178, 182, 187, 188, 198, 199, 200, 216, 219, 220, 233, 234, 255, 259, 260, 262, 264, 265, 273, 274, 285, 292, 303, 306, 311, 313, 339, 346, 351, 352, 353, 355, 359, 360, 361, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 384, 385, 386, 389, 390, 393, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 426, 428, 430, 432, 433, 434, 436, 438, 439, 443, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 485, 487, 489, 490, 491, 492, 513, 522, 523, 524, 525, 527, 529, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 570, 571, 577, 578, 579, 580, 582, 583, 586, 592, 593, 595, 596, 597, 598, 599, 600, 606, 611, 612, 619, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 677, 679, 681, 683, 686, 690, 693, 694, 697, 698, 716, 717, 718, 719, 726, 729, 730, 743, 751, 755, 773, 776, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 798, 799, 803, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 844, 845, 846, 848, 851, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 883, 884, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 903, 919, 924, 925, 927, 930, 931, 936, 944, 951, 962, 965, 966, 968, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 986, 987, 990, 991, 992, 997, 999, 1000, 1009, 1010, 1011, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "journal": [0, 81, 169, 259, 265, 367, 368, 370, 397, 399, 401, 406, 441, 451, 462, 523, 530, 616, 624, 634, 678, 681, 682, 694, 704, 719, 722, 723, 746, 747, 774, 813, 818, 864, 876, 965, 966, 970, 972, 973, 974, 977, 983, 988, 990, 991], "research": [0, 167, 259, 265, 368, 370, 384, 399, 490, 502, 624, 634, 681, 723, 813, 818, 965, 973, 977, 979, 991, 996, 997, 1000], "volum": [0, 66, 79, 155, 368, 370, 399, 401, 409, 462, 523, 757, 972, 991, 1000], "page": [0, 12, 17, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 219, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 321, 353, 359, 368, 370, 373, 375, 377, 379, 381, 387, 398, 399, 401, 462, 505, 506, 507, 617, 633, 818, 883, 925, 966, 976, 977, 1002, 1011, 1016, 1018, 1022, 1023], "want": [0, 4, 12, 20, 24, 25, 26, 55, 64, 71, 147, 163, 168, 198, 199, 200, 234, 250, 259, 273, 297, 324, 328, 344, 355, 359, 360, 361, 371, 372, 374, 375, 377, 378, 379, 384, 385, 386, 387, 389, 390, 393, 397, 398, 399, 400, 401, 406, 407, 408, 489, 492, 493, 499, 524, 538, 643, 644, 645, 647, 648, 655, 657, 663, 664, 665, 752, 834, 837, 853, 860, 881, 888, 965, 972, 975, 976, 977, 980, 982, 986, 987, 991, 996, 997, 1002, 1010, 1018, 1032], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 55, 65, 66, 78, 80, 82, 86, 91, 92, 100, 116, 119, 123, 136, 147, 150, 155, 157, 168, 169, 171, 174, 177, 187, 211, 215, 216, 221, 227, 234, 236, 239, 241, 244, 249, 250, 258, 262, 264, 266, 268, 279, 281, 285, 286, 303, 314, 322, 328, 341, 344, 345, 349, 353, 355, 360, 361, 366, 367, 368, 369, 373, 374, 375, 377, 378, 381, 384, 385, 386, 387, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 415, 429, 430, 431, 433, 434, 435, 439, 443, 445, 449, 452, 453, 454, 456, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 486, 492, 512, 520, 522, 523, 526, 527, 529, 530, 531, 533, 539, 544, 545, 546, 547, 548, 549, 553, 554, 555, 572, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 616, 633, 634, 660, 661, 663, 674, 675, 676, 677, 681, 685, 697, 713, 717, 718, 724, 725, 729, 766, 769, 771, 783, 784, 785, 809, 816, 817, 830, 831, 832, 834, 835, 836, 838, 839, 840, 847, 848, 852, 857, 860, 861, 863, 880, 881, 884, 888, 889, 896, 898, 908, 909, 914, 920, 944, 946, 965, 971, 972, 973, 975, 976, 977, 978, 979, 982, 983, 984, 989, 990, 991, 992, 996, 1000, 1002, 1004, 1006, 1009, 1010, 1011, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "api": [0, 12, 50, 165, 226, 228, 234, 238, 242, 279, 345, 346, 361, 362, 366, 367, 373, 374, 376, 377, 382, 383, 384, 385, 387, 389, 393, 404, 406, 407, 417, 418, 422, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 485, 493, 497, 499, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 552, 553, 555, 556, 557, 558, 559, 568, 569, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 647, 666, 677, 678, 679, 680, 681, 691, 783, 784, 788, 789, 791, 807, 814, 832, 834, 836, 837, 840, 844, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 892, 893, 942, 944, 965, 974, 975, 976, 979, 986, 990, 996, 997, 1000, 1002, 1006, 1008, 1013, 1015, 1016, 1017, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "design": [0, 13, 20, 80, 130, 153, 167, 168, 179, 249, 301, 307, 353, 361, 367, 373, 378, 384, 385, 386, 387, 388, 399, 406, 408, 409, 504, 517, 621, 622, 637, 654, 658, 665, 669, 674, 785, 803, 804, 823, 825, 966, 972, 973, 976, 977, 986, 996, 997, 1000, 1004, 1020, 1027], "mai": [0, 8, 19, 25, 39, 44, 46, 56, 71, 86, 95, 109, 120, 147, 154, 156, 158, 168, 174, 178, 182, 187, 204, 224, 234, 262, 264, 266, 267, 295, 306, 320, 331, 344, 345, 346, 355, 359, 360, 361, 365, 367, 368, 369, 370, 372, 373, 375, 377, 378, 381, 384, 386, 387, 390, 393, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 421, 428, 429, 430, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 448, 451, 454, 458, 461, 471, 472, 473, 476, 477, 478, 485, 497, 498, 504, 523, 524, 527, 529, 533, 536, 537, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 563, 570, 583, 586, 591, 599, 600, 606, 609, 623, 624, 626, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 661, 662, 663, 665, 666, 667, 668, 670, 673, 675, 677, 678, 680, 681, 682, 684, 686, 694, 701, 704, 705, 707, 708, 710, 711, 712, 714, 726, 744, 751, 773, 774, 785, 787, 788, 789, 790, 799, 800, 801, 802, 804, 805, 809, 813, 816, 821, 822, 823, 824, 825, 827, 830, 831, 832, 834, 836, 838, 839, 840, 846, 847, 848, 851, 853, 863, 865, 866, 867, 868, 869, 871, 877, 880, 881, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 906, 928, 929, 944, 965, 966, 968, 970, 972, 973, 976, 977, 978, 979, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 997, 1002, 1008, 1009, 1018, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "consid": [0, 4, 12, 13, 20, 25, 39, 55, 66, 71, 81, 95, 99, 120, 121, 123, 142, 146, 147, 163, 169, 198, 200, 234, 259, 262, 266, 270, 279, 285, 286, 301, 313, 328, 336, 339, 344, 355, 359, 360, 361, 365, 372, 373, 375, 379, 381, 384, 386, 395, 399, 404, 405, 406, 407, 408, 409, 410, 411, 427, 433, 435, 439, 446, 463, 497, 498, 510, 522, 538, 539, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 574, 575, 577, 578, 580, 582, 596, 597, 609, 621, 622, 635, 641, 647, 648, 649, 651, 660, 668, 677, 678, 679, 681, 682, 683, 685, 689, 691, 694, 696, 698, 704, 714, 718, 722, 744, 774, 776, 780, 830, 831, 832, 834, 836, 838, 839, 840, 843, 845, 846, 851, 861, 862, 869, 883, 884, 893, 894, 896, 897, 898, 899, 960, 965, 971, 972, 973, 974, 976, 977, 979, 982, 983, 984, 986, 990, 991, 992, 997, 1002, 1009, 1021, 1022, 1026, 1030, 1031, 1033, 1034], "softwar": [0, 359, 370, 373, 381, 384, 386, 407, 616, 624, 647, 966, 1000], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 308, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 361, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 421, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 491, 493, 495, 496, 497, 498, 499, 501, 504, 508, 510, 512, 513, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 676, 677, 678, 679, 680, 681, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 704, 706, 707, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 751, 752, 756, 757, 759, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 915, 916, 917, 918, 919, 920, 923, 925, 927, 928, 929, 930, 935, 937, 938, 939, 940, 941, 943, 944, 945, 947, 950, 964, 965, 966, 968, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 995, 996, 997, 1000, 1003, 1005, 1006, 1007, 1008, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "2013": [0, 174, 370, 399, 403, 404, 525, 714, 744, 968, 976, 995, 1019, 1020], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 66, 67, 81, 113, 170, 190, 193, 207, 208, 264, 265, 266, 296, 305, 339, 370, 371, 379, 381, 396, 397, 399, 403, 404, 406, 409, 463, 505, 506, 507, 527, 529, 536, 544, 545, 546, 547, 554, 555, 579, 596, 597, 599, 600, 604, 608, 611, 612, 623, 637, 638, 647, 658, 661, 663, 669, 676, 678, 681, 682, 694, 704, 713, 714, 719, 744, 774, 825, 859, 896, 897, 898, 899, 965, 970, 972, 973, 976, 978, 979, 980, 984, 988, 990, 992, 1010, 1021, 1026, 1030, 1031, 1032, 1033], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 399, 407, 823, 978, 995], "languag": [0, 346, 378, 393, 404, 407, 990, 996, 997, 1000, 1003], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 59, 60, 62, 65, 68, 69, 71, 72, 74, 76, 79, 81, 90, 92, 94, 95, 98, 99, 104, 106, 107, 112, 113, 115, 116, 119, 120, 121, 122, 123, 127, 128, 129, 131, 133, 136, 137, 138, 139, 144, 149, 150, 151, 152, 154, 157, 159, 160, 162, 165, 168, 169, 176, 177, 180, 181, 182, 183, 187, 188, 190, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 227, 230, 231, 232, 234, 236, 238, 241, 244, 245, 246, 247, 248, 250, 253, 257, 259, 261, 262, 263, 264, 267, 273, 277, 279, 282, 283, 285, 287, 288, 289, 290, 292, 296, 297, 300, 302, 303, 304, 308, 309, 311, 313, 315, 316, 320, 321, 323, 324, 327, 328, 330, 335, 336, 339, 344, 350, 351, 352, 353, 358, 360, 362, 365, 366, 367, 369, 370, 373, 375, 376, 379, 380, 381, 382, 385, 389, 390, 393, 395, 396, 397, 398, 401, 404, 405, 406, 407, 410, 411, 412, 414, 416, 417, 418, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 503, 504, 509, 510, 511, 512, 513, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 604, 606, 607, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 699, 700, 702, 706, 707, 709, 713, 715, 716, 717, 718, 719, 722, 724, 725, 726, 728, 729, 730, 742, 743, 745, 749, 751, 752, 757, 771, 772, 773, 775, 776, 777, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 909, 912, 913, 914, 924, 925, 939, 942, 947, 948, 950, 951, 952, 953, 954, 957, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1004, 1006, 1007, 1009, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "mine": [0, 259, 345, 368, 399, 410, 433, 500, 552, 709, 722, 728, 771, 972, 976, 982, 988], "108": [0, 8, 180, 217, 1019], "122": [0, 112, 155, 163, 169, 202, 207, 217, 232, 379, 977], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 55, 57, 62, 65, 70, 74, 80, 81, 97, 98, 113, 115, 116, 117, 118, 123, 124, 126, 128, 138, 139, 147, 150, 156, 163, 167, 169, 170, 171, 182, 193, 199, 200, 212, 219, 220, 221, 227, 231, 244, 250, 257, 261, 265, 266, 274, 285, 286, 295, 297, 303, 305, 306, 307, 308, 322, 328, 330, 331, 344, 345, 351, 352, 359, 368, 370, 373, 378, 381, 382, 384, 385, 396, 397, 398, 399, 403, 405, 406, 407, 408, 409, 433, 436, 438, 439, 441, 458, 471, 472, 473, 542, 543, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 633, 659, 660, 668, 678, 681, 682, 714, 719, 730, 734, 744, 777, 778, 793, 795, 828, 829, 833, 862, 863, 867, 869, 890, 892, 893, 896, 897, 898, 899, 945, 965, 970, 971, 972, 973, 975, 976, 979, 980, 982, 984, 986, 988, 991, 992, 993, 996, 997, 1002, 1003, 1005, 1011, 1018, 1019, 1021, 1022, 1026, 1029, 1030, 1031, 1032, 1033], "qualiti": [0, 6, 20, 24, 37, 46, 48, 49, 58, 98, 119, 168, 204, 253, 257, 266, 267, 268, 373, 381, 384, 386, 393, 394, 398, 399, 401, 404, 441, 451, 458, 463, 546, 547, 548, 549, 553, 554, 731, 799, 880, 881, 896, 897, 898, 899, 925, 971, 973, 981, 988, 992, 996, 997, 1000, 1006, 1007, 1013], "png": [0, 32, 900], "svg": 0, "logo": [0, 403, 792], "avail": [0, 5, 11, 12, 13, 41, 56, 57, 98, 118, 121, 122, 147, 150, 155, 159, 167, 168, 169, 187, 198, 206, 216, 220, 234, 237, 256, 257, 262, 263, 266, 284, 285, 286, 292, 306, 311, 312, 313, 314, 316, 322, 324, 355, 359, 367, 368, 370, 371, 372, 373, 374, 378, 382, 385, 386, 389, 393, 396, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 436, 439, 440, 441, 442, 458, 459, 460, 461, 462, 463, 464, 465, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 497, 524, 538, 544, 545, 546, 547, 548, 549, 553, 554, 577, 580, 582, 583, 599, 600, 621, 622, 646, 654, 659, 661, 662, 663, 665, 678, 685, 688, 720, 721, 785, 788, 789, 799, 810, 811, 816, 817, 819, 820, 821, 822, 834, 845, 846, 855, 864, 867, 872, 876, 881, 932, 937, 944, 966, 970, 973, 975, 976, 977, 978, 979, 982, 986, 989, 990, 991, 995, 996, 997, 1000, 1002, 1006, 1011, 1013, 1018, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1034], "doc": [0, 4, 8, 19, 344, 346, 360, 371, 373, 377, 378, 381, 386, 389, 392, 393, 407, 577, 578, 580, 766, 769, 778, 779, 811, 1011, 1018, 1022, 1032], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 367, 370, 372, 373, 374, 376, 377, 379, 381, 382, 384, 385, 389, 393, 396, 400, 404, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 961, 962, 963, 964, 973, 986, 992, 996, 1000, 1010, 1011, 1028, 1032], "directori": [0, 8, 281, 367, 371, 373, 375, 379, 381, 386, 389, 400, 430, 434, 439, 475, 488, 848, 849, 1032], "driven": [0, 996, 1000], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 55, 60, 72, 75, 78, 82, 85, 100, 103, 113, 115, 116, 120, 123, 124, 130, 144, 147, 150, 155, 156, 169, 170, 179, 187, 198, 220, 223, 224, 227, 233, 234, 259, 266, 273, 277, 279, 284, 296, 301, 313, 339, 344, 345, 355, 359, 360, 361, 367, 368, 370, 371, 372, 373, 375, 379, 381, 384, 386, 390, 393, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 429, 432, 436, 438, 440, 443, 448, 485, 497, 521, 540, 556, 570, 571, 572, 578, 595, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 619, 621, 622, 627, 632, 644, 645, 661, 676, 681, 684, 689, 751, 753, 785, 788, 789, 799, 811, 815, 816, 827, 845, 846, 851, 860, 861, 866, 890, 891, 893, 904, 945, 965, 966, 969, 970, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 986, 990, 991, 992, 1002, 1006, 1009, 1027, 1028, 1030, 1031, 1034], "institut": [0, 370, 979], "privat": [0, 377, 386, 387, 904, 1000, 1018, 1026, 1028, 1029, 1031, 1032], "grant": [0, 373], "assur": [0, 386, 783, 784, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "sustain": 0, "like": [0, 4, 12, 19, 52, 55, 58, 60, 70, 89, 92, 98, 103, 105, 112, 117, 123, 126, 150, 156, 168, 178, 198, 250, 259, 262, 263, 266, 267, 273, 288, 298, 301, 306, 307, 311, 322, 331, 344, 345, 355, 359, 361, 365, 367, 368, 371, 372, 373, 375, 377, 380, 381, 382, 384, 385, 386, 393, 395, 397, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 504, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 570, 571, 572, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 906, 913, 914, 922, 927, 930, 939, 940, 944, 947, 948, 949, 961, 963, 965, 968, 970, 971, 972, 973, 976, 978, 979, 980, 982, 983, 986, 991, 992, 996, 997, 999, 1000, 1002, 1009, 1011, 1015, 1018, 1021, 1022, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034], "thank": [0, 4, 17, 25, 55, 86, 170, 174, 198, 268, 344, 345, 372, 381, 1000, 1018, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "funder": 0, "member": [0, 344, 345, 368, 373, 376, 387, 399, 414, 431, 435, 437, 440, 442, 481, 544, 545, 552, 570, 647, 648, 655, 657, 665, 666, 667, 693, 694, 704, 706, 719, 724, 725, 745, 774, 781, 785, 888, 972, 979, 1002, 1018, 1030, 1033], "consortium": [0, 1000], "foundat": [0, 130, 373, 397, 979], "face": [0, 3, 15, 36, 53, 68, 94, 98, 107, 118, 165, 226, 242, 366, 373, 377, 399, 404, 406, 408, 438, 461, 482, 483, 484, 510, 521, 522, 526, 528, 529, 530, 547, 573, 646, 662, 686, 702, 799, 814, 831, 868, 893, 911, 979, 992, 993, 994, 1005, 1010, 1013, 1018, 1026], "2022": [0, 360, 406, 694, 986, 1032, 1033], "microsoft": [0, 12, 371, 374, 389], "m\u00fcller": [0, 31, 302, 303, 387, 404, 524, 854, 980, 986, 990, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1032], "2020": [0, 368, 1028, 1029, 1030, 1031], "quansight": 0, "lab": [0, 368, 457, 525, 886, 1000, 1029], "2021": [0, 371, 373, 389, 660, 1030, 1031], "columbia": 0, "univers": [0, 158, 344, 368, 370, 376, 399, 404, 407, 579, 776, 823, 827, 883, 972, 974, 976, 978], "2016": [0, 224, 367, 399, 965, 1023, 1024], "sydnei": 0, "2017": [0, 259, 367, 397, 399, 410, 433, 976, 1024, 1025], "receiv": [0, 19, 136, 165, 234, 252, 256, 275, 346, 355, 373, 375, 381, 386, 403, 406, 493, 647, 691, 695, 697, 715, 770, 776, 777, 804, 814, 816, 817, 855, 893, 977, 980, 981, 990, 1028, 1029], "improv": [0, 4, 24, 25, 33, 78, 79, 82, 100, 106, 110, 111, 116, 119, 121, 122, 123, 125, 130, 143, 163, 168, 174, 184, 198, 206, 216, 260, 262, 279, 298, 306, 334, 345, 355, 360, 371, 376, 378, 379, 381, 382, 384, 386, 387, 393, 398, 404, 406, 408, 438, 439, 520, 521, 523, 526, 527, 528, 530, 531, 532, 535, 543, 546, 547, 548, 549, 550, 551, 553, 554, 599, 600, 632, 641, 653, 655, 656, 657, 661, 662, 663, 664, 665, 667, 674, 676, 681, 717, 718, 772, 775, 776, 837, 845, 846, 862, 864, 876, 896, 897, 899, 925, 970, 972, 973, 976, 979, 980, 990, 991, 992, 995, 996, 997, 1000, 1009, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 67, 106, 127, 132, 167, 168, 182, 183, 193, 198, 199, 200, 216, 222, 231, 237, 256, 259, 262, 266, 268, 269, 301, 312, 313, 344, 353, 359, 368, 372, 373, 375, 380, 382, 386, 387, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 411, 427, 428, 431, 435, 436, 438, 453, 456, 483, 487, 489, 493, 497, 498, 499, 514, 516, 518, 519, 520, 522, 524, 525, 526, 531, 534, 535, 537, 538, 539, 550, 551, 552, 581, 582, 583, 584, 585, 587, 588, 589, 595, 599, 600, 609, 621, 632, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 658, 661, 662, 663, 664, 666, 669, 670, 671, 672, 673, 676, 679, 687, 689, 691, 696, 698, 701, 702, 704, 707, 709, 712, 715, 717, 718, 719, 723, 724, 726, 727, 728, 729, 730, 731, 732, 740, 742, 746, 754, 770, 771, 772, 775, 776, 777, 783, 784, 788, 789, 811, 828, 829, 834, 851, 852, 855, 861, 864, 867, 872, 876, 880, 881, 883, 884, 888, 889, 892, 893, 894, 905, 923, 925, 941, 943, 967, 968, 972, 974, 976, 977, 979, 980, 981, 983, 986, 991, 1007, 1009, 1011, 1019, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "It": [0, 4, 7, 8, 9, 16, 20, 25, 37, 40, 53, 55, 58, 72, 78, 80, 82, 95, 98, 99, 105, 113, 115, 116, 119, 123, 130, 147, 155, 156, 157, 162, 163, 168, 169, 170, 178, 182, 186, 187, 195, 198, 212, 215, 216, 219, 220, 227, 232, 234, 254, 255, 257, 259, 260, 262, 265, 266, 279, 282, 285, 286, 287, 289, 290, 292, 301, 305, 306, 308, 311, 327, 331, 339, 344, 345, 346, 353, 355, 359, 360, 361, 366, 368, 370, 371, 373, 375, 377, 378, 379, 381, 382, 384, 385, 386, 389, 390, 393, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 423, 426, 427, 430, 431, 432, 433, 434, 436, 437, 438, 441, 448, 451, 456, 457, 458, 463, 467, 474, 476, 485, 497, 504, 513, 522, 524, 525, 527, 529, 530, 538, 539, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 578, 585, 591, 595, 596, 597, 600, 603, 604, 608, 609, 611, 612, 616, 619, 620, 621, 622, 630, 631, 632, 635, 636, 639, 641, 642, 643, 644, 647, 649, 650, 651, 652, 655, 656, 657, 659, 660, 661, 663, 665, 666, 667, 670, 671, 672, 673, 676, 678, 680, 681, 682, 684, 685, 686, 687, 689, 691, 693, 697, 698, 699, 705, 711, 722, 730, 731, 735, 746, 747, 750, 753, 769, 771, 785, 787, 788, 789, 791, 797, 798, 799, 807, 812, 815, 824, 825, 830, 831, 832, 834, 837, 838, 839, 840, 844, 845, 846, 850, 851, 852, 856, 857, 858, 862, 865, 867, 877, 880, 881, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 912, 925, 934, 944, 947, 950, 952, 953, 954, 955, 956, 957, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 989, 990, 991, 992, 996, 1000, 1002, 1008, 1009, 1010, 1011, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 55, 60, 81, 95, 112, 117, 118, 128, 130, 150, 156, 168, 169, 177, 184, 186, 187, 190, 199, 207, 220, 224, 228, 229, 234, 249, 259, 260, 261, 265, 289, 292, 297, 301, 305, 311, 312, 314, 316, 329, 336, 344, 345, 349, 350, 355, 359, 361, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 379, 381, 382, 384, 385, 386, 388, 389, 390, 393, 395, 396, 398, 399, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 420, 426, 429, 431, 432, 433, 435, 436, 438, 439, 441, 448, 449, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 482, 483, 485, 487, 490, 521, 522, 523, 524, 527, 529, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 582, 583, 590, 594, 599, 600, 616, 621, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 679, 683, 700, 723, 729, 752, 762, 766, 776, 778, 780, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 845, 846, 848, 851, 853, 854, 855, 858, 859, 860, 863, 865, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 903, 914, 919, 935, 952, 953, 954, 965, 966, 968, 971, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 989, 990, 991, 992, 993, 996, 997, 1000, 1002, 1006, 1009, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "2012": [0, 81, 397, 406, 544, 545, 552, 628, 731, 965, 969, 976, 995, 1018], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 359, 360, 361, 366, 368, 371, 373, 378, 381, 384, 386, 387, 389, 395, 398, 399, 401, 403, 404, 407, 430, 434, 436, 438, 448, 477, 478, 481, 485, 486, 489, 490, 491, 492, 493, 494, 496, 499, 524, 526, 530, 548, 549, 556, 557, 621, 637, 639, 643, 658, 669, 710, 711, 716, 733, 734, 736, 738, 739, 741, 773, 783, 784, 796, 825, 914, 965, 972, 975, 978, 979, 983, 986, 989, 997, 1009, 1018, 1022, 1024, 1026, 1028, 1029, 1031, 1032], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 384, 386, 387, 389, 390, 395, 396, 397, 398, 399, 401, 402, 404, 406, 407, 409, 410, 426, 430, 432, 433, 434, 435, 436, 439, 441, 444, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 461, 485, 488, 490, 508, 512, 523, 525, 527, 529, 536, 551, 556, 557, 558, 559, 579, 599, 608, 616, 617, 618, 619, 623, 628, 629, 632, 635, 639, 641, 643, 649, 651, 653, 655, 656, 662, 665, 666, 667, 674, 675, 679, 681, 683, 690, 780, 783, 784, 785, 787, 788, 789, 790, 792, 794, 799, 800, 801, 804, 806, 809, 810, 811, 812, 813, 816, 818, 823, 824, 825, 826, 827, 828, 829, 836, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 852, 853, 855, 858, 861, 862, 863, 867, 872, 880, 881, 885, 886, 890, 893, 894, 902, 927, 942, 965, 966, 968, 969, 972, 973, 975, 976, 977, 978, 979, 980, 981, 983, 984, 986, 988, 989, 990, 991, 992, 996, 1000, 1002, 1007, 1009, 1010, 1011, 1018, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "host": [0, 116, 344, 368, 373, 377, 381, 382, 881, 944, 1011, 1034], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 57, 66, 69, 72, 86, 97, 98, 100, 103, 113, 115, 116, 119, 120, 124, 126, 132, 142, 162, 163, 165, 167, 168, 169, 170, 174, 177, 191, 198, 216, 219, 220, 221, 223, 227, 228, 229, 231, 233, 234, 238, 246, 249, 254, 256, 259, 260, 261, 268, 269, 284, 285, 286, 300, 301, 305, 306, 309, 311, 312, 314, 319, 331, 338, 341, 344, 345, 349, 353, 355, 359, 365, 366, 368, 369, 370, 373, 375, 377, 378, 379, 381, 382, 385, 386, 387, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 426, 432, 433, 435, 436, 437, 438, 439, 441, 446, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 477, 485, 486, 492, 522, 523, 524, 527, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 578, 579, 580, 583, 586, 591, 599, 600, 601, 602, 609, 616, 617, 619, 624, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 679, 681, 685, 693, 707, 751, 762, 766, 773, 778, 785, 786, 787, 788, 789, 790, 791, 792, 794, 799, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 843, 845, 846, 848, 849, 851, 853, 854, 855, 860, 861, 862, 864, 867, 868, 869, 876, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 919, 965, 966, 968, 969, 970, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 989, 990, 991, 992, 994, 997, 999, 1000, 1002, 1006, 1009, 1010, 1013, 1019, 1021, 1022, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1034], "event": [0, 4, 16, 198, 216, 262, 397, 399, 577, 578, 625, 823, 913, 972, 977, 978, 996, 1000, 1024], "pari": [0, 370, 400, 455, 752, 856, 987, 1032], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 56, 59, 60, 61, 63, 64, 81, 91, 100, 102, 105, 121, 122, 123, 124, 147, 163, 169, 179, 190, 192, 198, 199, 209, 210, 222, 223, 227, 228, 244, 247, 248, 254, 260, 270, 284, 287, 289, 296, 301, 303, 304, 315, 321, 329, 331, 332, 333, 338, 345, 346, 368, 369, 370, 378, 398, 399, 401, 402, 404, 405, 406, 412, 429, 431, 432, 435, 436, 437, 438, 441, 443, 448, 449, 450, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 490, 501, 513, 523, 524, 530, 533, 539, 595, 598, 599, 600, 621, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 679, 683, 783, 853, 854, 857, 866, 868, 878, 879, 888, 889, 970, 972, 973, 975, 983, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032], "scienc": [0, 38, 80, 158, 367, 370, 384, 399, 429, 443, 527, 529, 536, 677, 678, 682, 835, 966, 968, 972, 973, 976, 979, 988, 997, 1000, 1005, 1026], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 55, 57, 58, 60, 61, 64, 66, 71, 81, 89, 91, 95, 98, 100, 101, 105, 110, 115, 116, 123, 126, 130, 133, 146, 147, 150, 157, 158, 162, 167, 168, 169, 170, 171, 174, 177, 178, 182, 187, 188, 190, 191, 192, 194, 198, 200, 202, 207, 208, 213, 216, 221, 227, 234, 235, 246, 249, 255, 256, 257, 259, 260, 262, 263, 266, 267, 268, 269, 277, 279, 284, 298, 302, 303, 306, 307, 311, 313, 314, 315, 322, 330, 331, 340, 344, 345, 346, 349, 353, 355, 359, 360, 361, 367, 368, 369, 370, 372, 373, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 393, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 430, 433, 434, 435, 436, 438, 439, 440, 441, 442, 444, 445, 446, 449, 451, 453, 458, 463, 476, 477, 479, 480, 481, 482, 483, 484, 485, 489, 490, 491, 492, 493, 494, 497, 498, 499, 501, 503, 523, 528, 529, 532, 536, 540, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 570, 572, 573, 577, 578, 579, 580, 599, 600, 604, 605, 609, 616, 619, 621, 622, 623, 624, 632, 636, 637, 638, 639, 643, 646, 647, 648, 650, 655, 657, 658, 660, 662, 663, 664, 665, 667, 669, 677, 681, 684, 692, 698, 709, 722, 738, 739, 742, 751, 759, 762, 766, 767, 768, 769, 771, 776, 778, 779, 782, 783, 784, 785, 788, 789, 791, 792, 793, 795, 797, 799, 803, 804, 807, 809, 811, 812, 814, 815, 816, 817, 818, 820, 821, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 844, 848, 851, 852, 853, 855, 856, 858, 859, 860, 861, 862, 867, 868, 869, 872, 874, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 904, 914, 917, 927, 947, 965, 966, 968, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 990, 991, 992, 993, 995, 996, 1000, 1002, 1006, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "2014": [0, 52, 367, 404, 406, 409, 519, 596, 597, 611, 612, 647, 681, 845, 846, 924, 925, 973, 980, 1000, 1021], "2015": [0, 169, 367, 409, 697, 710, 711, 712, 845, 846, 976, 983, 1000, 1022, 1023], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 59, 60, 65, 66, 70, 71, 85, 92, 95, 98, 105, 113, 116, 123, 128, 129, 151, 153, 154, 155, 156, 167, 168, 169, 178, 182, 193, 198, 201, 205, 206, 210, 212, 214, 216, 219, 223, 224, 230, 231, 233, 241, 254, 259, 261, 262, 272, 279, 298, 301, 305, 313, 315, 320, 322, 324, 329, 338, 339, 345, 368, 370, 373, 378, 403, 406, 407, 408, 411, 431, 462, 489, 493, 512, 522, 528, 533, 542, 543, 558, 582, 583, 604, 606, 647, 648, 655, 657, 659, 665, 666, 667, 681, 702, 785, 799, 817, 837, 888, 897, 971, 972, 976, 977, 979, 982, 986, 1018], "2018": [0, 198, 216, 407, 439, 965, 976, 994, 1000, 1025, 1026], "nyu": [0, 121, 180, 837], "moor": [0, 723, 976, 1000], "environ": [0, 12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 321, 353, 359, 368, 370, 371, 373, 379, 381, 384, 389, 393, 395, 400, 488, 996, 997, 1000, 1025, 1026], "student": [0, 97, 259, 973, 997, 1000], "t\u00e9l\u00e9com": [0, 994], "paristech": [0, 24, 25, 42, 227, 994], "rv": [0, 121, 263, 301, 789, 797, 799, 965, 1018, 1019, 1022, 1023, 1024, 1025, 1026], "thierri": [0, 244, 246, 1000, 1024, 1025, 1032], "guillemot": [0, 244, 246, 1024, 1025], "labex": 0, "digicosm": 0, "goix": [0, 1022, 1024, 1025, 1026, 1027], "mathurin": [0, 1029, 1031, 1032], "massia": [0, 1029, 1031, 1032], "2019": [0, 169, 371, 399, 441, 451, 681, 973, 983, 986, 1026, 1027, 1028], "dure": [0, 4, 5, 12, 50, 55, 58, 72, 75, 86, 100, 114, 120, 127, 144, 150, 155, 168, 169, 171, 187, 199, 206, 257, 261, 279, 313, 314, 359, 361, 371, 373, 375, 378, 386, 387, 399, 400, 404, 406, 407, 409, 410, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 448, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 602, 603, 604, 606, 608, 609, 611, 612, 614, 616, 617, 618, 619, 621, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 689, 777, 783, 784, 785, 788, 789, 799, 809, 810, 811, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 876, 879, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 966, 968, 972, 973, 979, 986, 988, 992, 1006, 1011, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "phd": [0, 399, 406, 997, 1000], "chan": [0, 826, 868], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 58, 60, 64, 68, 81, 124, 131, 132, 133, 151, 156, 165, 168, 178, 191, 213, 219, 220, 224, 243, 245, 246, 251, 259, 279, 313, 321, 331, 345, 355, 360, 368, 373, 375, 381, 382, 384, 386, 399, 404, 406, 408, 409, 411, 431, 432, 436, 437, 438, 439, 440, 441, 442, 448, 449, 450, 451, 467, 501, 504, 520, 521, 522, 526, 527, 529, 532, 534, 535, 536, 537, 542, 543, 548, 549, 582, 596, 597, 599, 600, 608, 609, 616, 629, 634, 635, 636, 637, 641, 642, 647, 649, 650, 651, 652, 655, 656, 657, 658, 660, 665, 666, 667, 669, 670, 673, 679, 680, 681, 683, 684, 783, 784, 818, 837, 844, 845, 846, 884, 911, 924, 925, 945, 950, 951, 968, 972, 973, 980, 981, 982, 990, 992, 996, 1008, 1010, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "were": [0, 4, 32, 70, 71, 74, 80, 81, 116, 120, 123, 144, 147, 155, 163, 198, 199, 228, 268, 270, 297, 298, 306, 312, 313, 315, 316, 322, 344, 346, 353, 355, 367, 368, 370, 373, 374, 377, 384, 386, 390, 396, 400, 406, 407, 453, 456, 457, 485, 550, 551, 577, 580, 591, 788, 789, 804, 812, 885, 886, 922, 965, 976, 977, 992, 999, 1010, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "through": [0, 7, 115, 120, 158, 168, 219, 232, 234, 254, 259, 262, 284, 305, 306, 329, 336, 346, 353, 370, 371, 373, 375, 380, 382, 386, 387, 389, 390, 399, 402, 404, 406, 408, 409, 435, 453, 456, 461, 524, 546, 547, 550, 553, 554, 555, 570, 582, 583, 586, 636, 640, 642, 644, 647, 648, 650, 652, 654, 657, 665, 666, 677, 680, 709, 791, 807, 864, 876, 880, 881, 896, 897, 898, 899, 931, 934, 965, 966, 973, 976, 978, 979, 980, 982, 984, 986, 990, 991, 992, 1000, 1002, 1009, 1011, 1018, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1034, 1035], "program": [0, 50, 345, 355, 360, 361, 370, 371, 373, 379, 384, 497, 624, 659, 878, 879, 972, 991, 992, 996, 997, 1018, 1020], "immanuel": [0, 1018, 1019, 1023], "bayer": [0, 1018, 1019, 1023], "kemal": [0, 20, 21, 1020, 1021], "eren": [0, 20, 21, 1020, 1021], "tr\u00e9segni": [0, 1020], "hamzeh": [0, 1021, 1022], "alsalhi": [0, 1021, 1022], "issam": [0, 295, 1024], "laradji": [0, 295, 1024], "maheshakya": [0, 1021, 1022, 1023], "wijewardena": [0, 1021, 1022, 1023], "xue": [0, 1022, 1023, 1024, 1026, 1027, 1030], "nelson": [0, 1024, 1025, 1030], "yenchen": [0, 1024], "lin": [0, 523, 647, 991, 1023, 1024, 1025, 1026], "neurodebian": 0, "debian": [0, 359, 371, 379], "packag": [0, 46, 53, 162, 234, 279, 360, 366, 367, 370, 371, 373, 374, 375, 377, 379, 382, 384, 386, 389, 401, 406, 407, 441, 467, 635, 636, 944, 966, 972, 975, 979, 986, 992, 1000, 1005, 1018, 1024, 1026, 1027, 1028], "dr": [0, 370, 399, 1032], "jame": [0, 370, 403, 818, 977, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1030, 1031], "haxbi": 0, "dartmouth": 0, "colleg": [0, 167], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 58, 62, 67, 71, 74, 78, 80, 81, 86, 90, 95, 111, 112, 123, 126, 127, 130, 131, 143, 150, 152, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 170, 171, 174, 177, 179, 181, 182, 186, 187, 188, 192, 193, 198, 199, 206, 207, 212, 215, 216, 219, 221, 227, 231, 234, 237, 245, 246, 247, 253, 254, 259, 260, 261, 262, 265, 267, 282, 285, 290, 296, 297, 301, 306, 312, 313, 314, 315, 316, 327, 328, 330, 331, 339, 341, 344, 345, 346, 353, 355, 359, 360, 361, 366, 367, 368, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 421, 426, 432, 433, 436, 438, 440, 442, 448, 452, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 485, 488, 497, 498, 504, 512, 513, 522, 523, 525, 527, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 570, 571, 577, 579, 580, 583, 595, 598, 599, 600, 621, 622, 624, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 678, 679, 681, 682, 686, 687, 689, 690, 691, 696, 697, 704, 709, 714, 715, 726, 727, 728, 734, 742, 744, 745, 751, 770, 772, 775, 776, 777, 780, 783, 785, 786, 787, 788, 789, 792, 794, 799, 803, 804, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 908, 909, 944, 965, 966, 968, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 986, 989, 990, 991, 992, 995, 996, 997, 999, 1000, 1002, 1007, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "particip": [0, 372, 373, 387, 1000], "could": [0, 4, 9, 13, 27, 37, 42, 53, 71, 72, 95, 98, 111, 112, 120, 123, 144, 150, 155, 163, 167, 168, 169, 198, 199, 207, 216, 223, 232, 233, 234, 253, 259, 282, 287, 290, 314, 327, 328, 344, 349, 361, 373, 379, 381, 386, 389, 393, 397, 403, 406, 407, 411, 463, 522, 527, 596, 597, 618, 660, 787, 792, 794, 965, 966, 972, 973, 983, 984, 986, 991, 997, 1010, 1015, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "attend": 0, "psf": [0, 373], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 55, 71, 78, 95, 113, 116, 127, 150, 168, 169, 170, 198, 202, 215, 216, 232, 234, 259, 260, 261, 262, 264, 265, 266, 268, 269, 277, 311, 331, 339, 344, 345, 355, 359, 360, 361, 366, 367, 368, 371, 373, 374, 375, 376, 377, 379, 381, 384, 385, 386, 389, 393, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 409, 411, 413, 421, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 451, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 485, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 698, 710, 711, 712, 716, 744, 766, 771, 773, 776, 783, 784, 785, 787, 788, 789, 791, 797, 798, 799, 803, 804, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 906, 908, 909, 912, 917, 944, 947, 950, 965, 968, 971, 972, 973, 975, 976, 977, 978, 979, 984, 986, 991, 992, 997, 1000, 1002, 1009, 1010, 1011, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1033, 1034], "tinyclu": 0, "french": [0, 216, 307], "associ": [0, 11, 24, 25, 80, 150, 167, 168, 247, 307, 319, 321, 344, 381, 399, 401, 403, 404, 406, 407, 435, 438, 458, 459, 460, 461, 462, 463, 464, 465, 482, 483, 484, 513, 546, 550, 553, 594, 595, 619, 634, 647, 648, 655, 657, 663, 664, 665, 678, 684, 719, 727, 811, 831, 839, 853, 865, 877, 885, 894, 896, 898, 914, 975, 976, 979, 986, 989, 1000, 1010, 1018, 1030, 1034], "fond": [0, 1000], "de": [0, 12, 24, 25, 26, 27, 74, 114, 130, 150, 151, 153, 154, 155, 156, 157, 159, 189, 232, 233, 307, 321, 339, 370, 624, 677, 752, 972, 973, 997, 1019, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 55, 62, 66, 72, 118, 123, 130, 144, 147, 155, 162, 169, 170, 187, 198, 199, 200, 216, 220, 232, 253, 256, 259, 260, 262, 268, 331, 339, 345, 353, 359, 368, 370, 373, 378, 379, 381, 384, 387, 399, 401, 404, 407, 409, 482, 483, 489, 493, 499, 635, 636, 888, 966, 972, 973, 976, 981, 982, 983, 997, 1000, 1007, 1009, 1010, 1018], "our": [0, 4, 5, 7, 11, 12, 42, 53, 56, 70, 71, 80, 81, 86, 95, 96, 109, 111, 117, 120, 123, 124, 142, 147, 150, 155, 157, 167, 168, 169, 170, 171, 198, 216, 221, 223, 234, 253, 259, 262, 265, 266, 297, 301, 307, 312, 314, 324, 328, 334, 335, 336, 339, 344, 345, 346, 355, 360, 372, 377, 378, 381, 384, 385, 386, 387, 390, 399, 403, 406, 407, 410, 433, 439, 552, 633, 681, 697, 709, 714, 726, 744, 830, 831, 832, 834, 836, 838, 839, 840, 965, 966, 972, 973, 976, 982, 986, 989, 990, 991, 997, 1000, 1002, 1009, 1010, 1011, 1025, 1026, 1028, 1029, 1032, 1033, 1035], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 365, 370, 371, 374, 375, 377, 381, 384, 385, 386, 387, 389, 390, 393, 396, 397, 399, 400, 402, 403, 404, 408, 409, 426, 490, 524, 528, 530, 532, 535, 548, 549, 600, 605, 610, 613, 627, 628, 629, 630, 645, 655, 657, 662, 665, 676, 678, 681, 682, 698, 785, 808, 816, 817, 818, 820, 826, 834, 845, 849, 868, 965, 970, 972, 973, 975, 976, 977, 983, 984, 990, 991, 997, 1000, 1002, 1013, 1018, 1022, 1023, 1026, 1030, 1031, 1032, 1033, 1034], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 55, 60, 64, 75, 82, 91, 95, 97, 98, 110, 115, 116, 118, 119, 123, 132, 133, 147, 155, 156, 158, 165, 167, 168, 169, 177, 182, 184, 190, 191, 192, 198, 199, 200, 201, 207, 209, 213, 215, 216, 219, 220, 227, 233, 234, 238, 241, 245, 247, 249, 257, 260, 261, 262, 263, 265, 266, 267, 269, 271, 277, 279, 284, 297, 301, 302, 306, 311, 312, 313, 314, 316, 319, 321, 322, 323, 328, 331, 336, 340, 344, 345, 346, 350, 353, 355, 359, 360, 361, 366, 368, 369, 370, 371, 373, 375, 377, 378, 379, 381, 382, 384, 385, 386, 387, 390, 395, 396, 397, 398, 399, 400, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 421, 422, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 497, 498, 504, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 689, 690, 691, 694, 698, 702, 703, 704, 705, 706, 707, 709, 710, 711, 714, 716, 717, 718, 720, 721, 723, 724, 725, 726, 733, 734, 736, 738, 739, 741, 744, 749, 757, 762, 766, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 797, 799, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 914, 916, 917, 918, 919, 930, 939, 944, 951, 960, 965, 966, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 981, 983, 986, 989, 990, 991, 992, 996, 997, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "handl": [0, 4, 71, 116, 120, 126, 130, 174, 182, 233, 234, 261, 266, 268, 279, 286, 307, 311, 344, 346, 359, 365, 367, 371, 373, 374, 375, 382, 384, 386, 390, 406, 407, 485, 533, 566, 570, 571, 574, 575, 577, 578, 580, 599, 624, 635, 636, 641, 647, 648, 649, 650, 651, 657, 664, 665, 667, 670, 709, 776, 852, 861, 862, 888, 893, 900, 926, 933, 936, 973, 976, 977, 978, 979, 982, 984, 991, 992, 996, 997, 1000, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 57, 62, 71, 75, 80, 82, 96, 97, 98, 100, 109, 112, 120, 127, 128, 130, 143, 144, 146, 154, 156, 163, 165, 168, 169, 170, 176, 177, 182, 184, 191, 192, 197, 199, 200, 202, 204, 213, 214, 216, 217, 222, 223, 228, 229, 230, 231, 233, 244, 246, 250, 252, 253, 259, 268, 275, 279, 283, 298, 301, 303, 305, 306, 308, 312, 313, 314, 315, 323, 326, 328, 333, 334, 339, 340, 342, 344, 345, 346, 353, 355, 359, 360, 365, 368, 369, 373, 374, 375, 378, 379, 381, 382, 384, 386, 387, 397, 398, 399, 400, 403, 405, 406, 407, 408, 409, 411, 426, 430, 434, 435, 439, 441, 445, 451, 452, 453, 454, 456, 457, 477, 485, 486, 492, 493, 497, 515, 521, 524, 525, 527, 529, 533, 536, 538, 540, 541, 542, 546, 547, 548, 549, 550, 551, 553, 554, 555, 561, 577, 578, 580, 581, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 624, 627, 632, 639, 641, 646, 647, 648, 649, 653, 654, 655, 657, 658, 661, 665, 666, 667, 674, 675, 676, 677, 678, 679, 680, 681, 683, 687, 691, 695, 696, 701, 704, 706, 708, 709, 714, 715, 716, 723, 725, 727, 728, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 770, 773, 776, 777, 780, 783, 784, 785, 786, 790, 792, 793, 794, 795, 797, 803, 810, 814, 817, 836, 838, 839, 840, 843, 848, 849, 851, 852, 853, 856, 860, 861, 862, 863, 864, 865, 867, 868, 875, 876, 877, 878, 879, 881, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 908, 909, 923, 925, 929, 931, 939, 965, 966, 967, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 987, 988, 989, 990, 991, 992, 997, 1009, 1010, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "profit": 0, "organ": [0, 11, 70, 80, 344, 367, 372, 373, 387, 836, 996], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 58, 65, 67, 70, 71, 72, 75, 78, 80, 81, 86, 92, 97, 99, 100, 101, 106, 113, 114, 115, 116, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 136, 142, 144, 146, 147, 150, 151, 155, 156, 157, 162, 163, 167, 168, 169, 171, 174, 177, 178, 182, 187, 191, 198, 199, 200, 204, 206, 212, 214, 215, 216, 219, 220, 221, 223, 227, 228, 231, 232, 233, 234, 235, 237, 238, 244, 245, 249, 250, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 274, 277, 279, 284, 285, 286, 296, 301, 303, 304, 305, 306, 307, 308, 311, 313, 314, 315, 316, 319, 321, 322, 323, 331, 341, 344, 345, 346, 349, 353, 355, 359, 360, 361, 365, 367, 368, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 451, 452, 453, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 476, 512, 520, 521, 522, 523, 526, 527, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 568, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 599, 600, 601, 602, 603, 604, 606, 608, 611, 616, 617, 618, 619, 621, 622, 623, 629, 631, 632, 633, 636, 637, 638, 641, 643, 644, 645, 647, 648, 650, 655, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 669, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 696, 698, 705, 706, 708, 709, 711, 713, 714, 722, 723, 724, 725, 731, 734, 744, 746, 766, 767, 768, 769, 770, 771, 777, 783, 784, 785, 788, 789, 790, 791, 793, 795, 799, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 845, 848, 852, 855, 859, 861, 862, 863, 866, 867, 868, 869, 870, 872, 880, 881, 883, 884, 885, 888, 890, 893, 894, 896, 897, 898, 899, 900, 904, 917, 920, 924, 925, 927, 932, 933, 936, 944, 945, 948, 951, 957, 960, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 995, 996, 997, 1000, 1002, 1004, 1006, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "manag": [0, 86, 241, 358, 367, 371, 374, 375, 377, 381, 384, 386, 387, 406, 439, 457, 615, 886, 970, 992, 997, 1000, 1011, 1013, 1031, 1034], "board": 0, "scipi": [0, 6, 13, 17, 19, 34, 41, 46, 47, 53, 54, 78, 79, 82, 96, 98, 101, 103, 122, 150, 168, 171, 184, 188, 200, 245, 249, 250, 256, 259, 267, 271, 279, 284, 289, 298, 312, 313, 319, 320, 359, 367, 368, 371, 373, 375, 379, 382, 384, 385, 386, 389, 392, 399, 404, 407, 439, 440, 441, 442, 446, 451, 452, 485, 492, 497, 521, 523, 524, 530, 533, 570, 571, 574, 575, 577, 578, 599, 600, 637, 638, 642, 646, 647, 648, 652, 655, 657, 658, 659, 661, 663, 665, 666, 667, 669, 673, 676, 680, 681, 684, 748, 751, 766, 767, 768, 769, 778, 779, 789, 797, 799, 814, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 851, 860, 866, 867, 868, 871, 875, 878, 879, 888, 890, 891, 893, 894, 927, 947, 950, 965, 966, 972, 974, 977, 979, 980, 986, 990, 991, 995, 997, 1005, 1007, 1010, 1011, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "mission": [0, 345, 1000], "foster": [0, 1026], "comput": [0, 4, 6, 7, 11, 13, 20, 26, 37, 39, 41, 42, 46, 52, 54, 57, 58, 60, 61, 70, 72, 79, 80, 81, 82, 96, 105, 109, 113, 117, 118, 122, 123, 124, 125, 146, 150, 155, 157, 158, 162, 168, 169, 170, 171, 174, 178, 179, 182, 183, 184, 185, 186, 187, 198, 200, 206, 212, 215, 216, 220, 223, 228, 230, 231, 233, 237, 238, 240, 255, 257, 259, 260, 261, 262, 266, 268, 270, 279, 281, 283, 285, 286, 288, 289, 292, 301, 311, 315, 316, 320, 322, 331, 339, 344, 345, 346, 353, 360, 361, 362, 367, 368, 370, 373, 378, 379, 380, 382, 384, 385, 386, 388, 389, 393, 394, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 446, 448, 450, 451, 452, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 505, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 563, 571, 574, 575, 578, 579, 580, 582, 583, 592, 593, 594, 595, 598, 599, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 717, 718, 719, 722, 724, 726, 727, 728, 730, 731, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 853, 854, 857, 858, 863, 864, 865, 866, 867, 868, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 922, 923, 924, 925, 941, 942, 949, 951, 957, 965, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986, 988, 989, 990, 991, 992, 996, 997, 1000, 1006, 1007, 1010, 1011, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "particular": [0, 4, 11, 13, 37, 39, 40, 60, 71, 78, 92, 100, 104, 120, 123, 126, 154, 162, 168, 169, 198, 200, 206, 232, 237, 256, 260, 262, 268, 279, 288, 292, 301, 311, 312, 315, 345, 346, 355, 359, 367, 368, 371, 372, 373, 375, 377, 378, 379, 381, 382, 385, 386, 389, 399, 403, 404, 406, 407, 408, 409, 435, 458, 462, 485, 533, 552, 598, 642, 647, 652, 661, 663, 673, 676, 701, 716, 773, 820, 835, 907, 909, 966, 968, 970, 972, 976, 979, 980, 981, 982, 984, 986, 997, 1000, 1010, 1018, 1021, 1025, 1026, 1027, 1029, 1031, 1032, 1033], "As": [0, 4, 7, 20, 25, 27, 30, 40, 43, 53, 55, 57, 58, 66, 82, 86, 100, 110, 111, 117, 120, 122, 124, 129, 142, 150, 155, 163, 168, 170, 174, 177, 180, 182, 187, 189, 198, 202, 206, 216, 224, 234, 247, 254, 256, 257, 259, 260, 262, 272, 277, 284, 302, 314, 322, 331, 345, 346, 349, 351, 352, 355, 359, 360, 368, 371, 372, 373, 375, 377, 378, 385, 386, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 435, 482, 543, 551, 555, 608, 621, 644, 645, 661, 663, 676, 723, 746, 752, 830, 831, 832, 834, 836, 867, 965, 970, 972, 973, 975, 976, 977, 979, 983, 986, 990, 991, 992, 997, 1000, 1002, 1006, 1009, 1010, 1011, 1018, 1024, 1029, 1034], "fiscal": 0, "home": [0, 12, 27, 34, 53, 112, 130, 154, 156, 158, 159, 177, 190, 207, 245, 304, 308, 311, 316, 323, 336, 350, 368, 371, 381, 389, 398, 475, 488, 668, 1000], "ensur": [0, 20, 41, 57, 82, 92, 116, 117, 171, 198, 220, 254, 262, 297, 353, 355, 359, 360, 373, 375, 377, 378, 379, 387, 389, 390, 397, 399, 400, 403, 411, 458, 522, 523, 530, 600, 616, 685, 694, 770, 777, 809, 881, 908, 909, 925, 931, 942, 972, 973, 976, 986, 992, 1006, 1020, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "monei": [0, 216, 1000], "when": [0, 4, 9, 10, 11, 20, 24, 25, 26, 27, 39, 40, 43, 56, 60, 67, 70, 71, 72, 78, 80, 81, 86, 95, 98, 99, 100, 103, 113, 116, 119, 120, 121, 123, 126, 130, 131, 132, 144, 150, 162, 167, 168, 169, 170, 171, 177, 178, 182, 187, 189, 191, 195, 198, 200, 203, 214, 227, 228, 229, 233, 234, 241, 245, 247, 255, 258, 259, 260, 261, 262, 266, 268, 269, 279, 281, 285, 286, 287, 301, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 321, 322, 324, 331, 334, 335, 339, 344, 345, 346, 349, 355, 359, 360, 361, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 415, 421, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 478, 479, 480, 481, 485, 489, 490, 491, 492, 493, 494, 497, 498, 499, 501, 504, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 567, 570, 571, 572, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 690, 691, 693, 694, 696, 697, 701, 702, 705, 715, 716, 717, 718, 720, 722, 723, 726, 730, 734, 736, 739, 742, 743, 745, 749, 751, 755, 756, 757, 759, 762, 766, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 781, 783, 784, 785, 788, 789, 790, 791, 799, 803, 804, 807, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 874, 875, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 907, 908, 909, 915, 919, 923, 924, 925, 926, 928, 929, 934, 937, 944, 945, 965, 966, 968, 970, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 997, 1000, 1002, 1008, 1009, 1010, 1011, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "need": [0, 4, 9, 12, 32, 46, 48, 53, 55, 57, 82, 97, 116, 120, 122, 123, 124, 130, 147, 150, 155, 162, 163, 168, 186, 200, 215, 216, 220, 227, 230, 232, 234, 238, 244, 245, 249, 250, 257, 259, 261, 262, 264, 279, 281, 306, 311, 322, 331, 339, 344, 345, 355, 359, 360, 361, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 415, 426, 430, 434, 438, 454, 492, 530, 540, 561, 571, 572, 577, 578, 579, 580, 616, 624, 627, 628, 629, 631, 638, 655, 657, 660, 665, 668, 681, 709, 710, 711, 712, 769, 773, 783, 784, 785, 788, 789, 799, 800, 801, 809, 817, 820, 828, 829, 845, 848, 851, 855, 860, 861, 865, 883, 890, 893, 965, 966, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 989, 990, 991, 992, 997, 1000, 1008, 1009, 1010, 1011, 1018, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "keep": [0, 6, 42, 75, 98, 100, 116, 146, 162, 167, 168, 169, 170, 171, 182, 198, 199, 200, 206, 216, 249, 254, 257, 305, 306, 314, 320, 331, 344, 345, 349, 355, 359, 360, 365, 373, 377, 385, 386, 397, 399, 400, 401, 402, 403, 404, 421, 439, 454, 471, 472, 473, 474, 482, 483, 523, 529, 530, 533, 536, 543, 545, 547, 549, 551, 554, 557, 559, 584, 587, 589, 592, 600, 623, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 665, 666, 667, 668, 697, 803, 821, 822, 831, 839, 845, 846, 884, 889, 891, 894, 897, 899, 972, 977, 981, 984, 986, 997, 1000, 1002, 1007, 1009, 1011, 1013, 1018, 1023, 1026, 1027, 1031, 1032, 1034], "while": [0, 4, 7, 8, 10, 12, 17, 20, 24, 27, 34, 37, 39, 43, 44, 48, 55, 62, 66, 70, 73, 75, 92, 99, 100, 110, 113, 116, 117, 127, 130, 147, 151, 156, 158, 159, 162, 167, 168, 169, 170, 174, 177, 179, 182, 187, 192, 198, 200, 214, 227, 230, 231, 234, 235, 245, 246, 250, 253, 254, 258, 259, 260, 262, 266, 267, 268, 269, 270, 272, 281, 301, 302, 303, 306, 307, 308, 311, 314, 328, 331, 344, 346, 353, 355, 360, 365, 366, 367, 368, 369, 372, 373, 375, 377, 378, 379, 381, 382, 384, 386, 387, 393, 397, 398, 399, 402, 403, 404, 406, 407, 408, 409, 410, 411, 433, 453, 456, 457, 472, 474, 485, 510, 521, 541, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 564, 571, 577, 578, 579, 580, 583, 586, 591, 595, 623, 632, 635, 636, 638, 645, 646, 647, 648, 665, 666, 667, 668, 697, 717, 718, 726, 742, 762, 766, 771, 772, 775, 776, 780, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 807, 809, 810, 811, 812, 813, 815, 823, 834, 836, 838, 839, 840, 847, 848, 849, 850, 851, 864, 876, 881, 886, 888, 889, 896, 897, 898, 899, 904, 929, 965, 966, 969, 970, 972, 973, 975, 976, 977, 978, 979, 982, 983, 986, 988, 991, 992, 996, 997, 1002, 1008, 1009, 1011, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 70, 198, 216, 306, 381, 384, 386, 404, 406, 407, 510, 767, 768, 991, 996, 1000, 1026, 1027, 1028, 1034], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 368, 373, 375, 378, 382, 387, 389, 400, 404, 406, 408, 432, 550, 551, 574, 575, 709, 928, 929, 986, 992, 996, 997, 1002, 1011, 1029], "toward": [0, 26, 27, 63, 82, 117, 123, 129, 150, 170, 177, 202, 203, 224, 373, 386, 399, 437, 441, 451, 665, 667, 684, 862, 975, 990, 992, 995, 997], "cover": [0, 52, 174, 198, 216, 355, 365, 368, 373, 385, 624, 709, 780, 976, 977, 995], "travel": 0, "expens": [0, 56, 116, 130, 150, 167, 169, 228, 256, 268, 331, 344, 345, 346, 361, 379, 386, 399, 400, 403, 406, 407, 438, 457, 497, 785, 788, 789, 799, 811, 886, 888, 973, 975, 986, 991, 996, 1000, 1011, 1022], "well": [0, 4, 9, 12, 20, 24, 25, 27, 39, 48, 53, 57, 58, 62, 70, 78, 86, 111, 113, 116, 121, 123, 128, 130, 147, 155, 157, 167, 168, 169, 170, 174, 182, 186, 196, 198, 199, 200, 202, 206, 219, 220, 221, 224, 227, 231, 234, 237, 246, 259, 266, 268, 270, 274, 279, 284, 285, 286, 308, 312, 313, 314, 315, 316, 339, 344, 345, 346, 355, 368, 370, 372, 373, 377, 379, 381, 382, 384, 385, 386, 387, 397, 399, 401, 403, 404, 406, 409, 410, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 448, 449, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 689, 710, 711, 712, 773, 776, 778, 781, 783, 784, 785, 788, 789, 799, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 923, 924, 965, 966, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 986, 989, 990, 992, 993, 996, 997, 1000, 1010, 1011, 1018, 1019, 1022, 1024, 1025, 1026, 1029], "budget": [0, 120, 823, 824, 825, 826, 827, 965], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 385, 386, 387, 389, 390, 391, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 417, 420, 421, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 480, 482, 484, 485, 486, 489, 490, 493, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 751, 752, 754, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 908, 909, 914, 919, 922, 923, 925, 927, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 947, 950, 951, 957, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 994, 996, 997, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1020], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 20, 26, 32, 37, 53, 66, 71, 72, 80, 82, 85, 86, 92, 98, 113, 114, 116, 119, 123, 124, 127, 147, 150, 157, 162, 167, 168, 169, 170, 174, 186, 187, 191, 198, 199, 200, 202, 206, 212, 214, 216, 219, 220, 221, 223, 227, 228, 230, 232, 233, 234, 235, 245, 254, 255, 259, 262, 265, 266, 267, 277, 279, 281, 285, 286, 296, 301, 302, 305, 311, 312, 313, 314, 315, 316, 320, 322, 324, 331, 344, 353, 359, 360, 367, 370, 371, 373, 374, 375, 377, 379, 380, 384, 385, 386, 389, 390, 394, 397, 398, 399, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 421, 423, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 476, 479, 485, 487, 493, 498, 504, 508, 516, 519, 522, 523, 527, 528, 529, 530, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 574, 575, 577, 578, 579, 580, 582, 583, 586, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 621, 622, 624, 625, 627, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 689, 692, 696, 697, 702, 704, 709, 710, 711, 712, 716, 717, 718, 720, 722, 726, 729, 730, 734, 742, 743, 746, 751, 752, 756, 758, 762, 766, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 809, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 904, 914, 915, 924, 925, 939, 944, 951, 965, 966, 968, 969, 970, 971, 973, 974, 975, 976, 977, 979, 980, 982, 983, 984, 986, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1002, 1009, 1010, 1011, 1013, 1016, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "regard": [0, 5, 7, 11, 53, 55, 71, 100, 138, 150, 155, 169, 170, 187, 195, 200, 221, 233, 261, 268, 269, 339, 345, 369, 373, 374, 378, 384, 386, 393, 398, 399, 404, 406, 407, 409, 432, 436, 441, 448, 451, 490, 603, 608, 645, 647, 690, 731, 784, 791, 807, 812, 830, 831, 969, 972, 976, 978, 979, 981, 983, 990, 991, 992, 1004, 1011, 1025, 1028], "might": [0, 4, 5, 31, 42, 44, 60, 62, 70, 110, 119, 128, 144, 156, 163, 168, 169, 170, 174, 198, 216, 227, 259, 261, 296, 313, 341, 355, 359, 360, 367, 371, 373, 374, 375, 377, 378, 379, 381, 384, 386, 387, 389, 393, 397, 400, 403, 404, 405, 406, 407, 409, 423, 432, 477, 485, 490, 492, 497, 504, 512, 525, 544, 545, 546, 553, 568, 569, 571, 599, 600, 616, 639, 643, 644, 645, 647, 648, 665, 667, 681, 745, 780, 788, 789, 812, 837, 853, 868, 881, 900, 902, 904, 908, 909, 925, 945, 965, 966, 968, 970, 972, 973, 975, 976, 978, 979, 983, 984, 986, 991, 992, 1011, 1019, 1021, 1026, 1027, 1029, 1032, 1033, 1034], "pai": [0, 216, 373], "dn": [0, 979], "continu": [0, 17, 19, 42, 120, 121, 150, 165, 169, 199, 206, 216, 220, 223, 240, 245, 249, 250, 297, 300, 306, 307, 309, 313, 314, 353, 368, 371, 375, 376, 377, 378, 381, 384, 386, 387, 389, 399, 404, 406, 457, 481, 581, 584, 585, 588, 589, 596, 597, 598, 621, 635, 636, 641, 642, 646, 649, 650, 651, 652, 714, 730, 744, 797, 799, 851, 853, 855, 857, 858, 867, 868, 869, 885, 886, 897, 939, 965, 972, 973, 976, 977, 979, 980, 986, 992, 997, 999, 1000, 1002, 1009, 1015, 1018, 1020, 1021, 1026, 1031, 1032, 1033], "integr": [0, 42, 71, 144, 158, 187, 297, 313, 371, 375, 376, 377, 379, 381, 386, 389, 404, 409, 435, 704, 743, 774, 951, 975, 983, 1000, 1005, 1019, 1021, 1022, 1030, 1031], "servic": [0, 4, 228, 373, 377, 1000, 1026], "azur": [0, 373], "cirru": [0, 373], "cl": [0, 8, 12, 16, 380, 386, 898], "circlecl": 0, "free": [0, 5, 55, 155, 156, 163, 197, 249, 301, 367, 372, 373, 374, 381, 384, 389, 407, 409, 441, 598, 660, 844, 894, 965, 968, 972, 976, 997, 1026], "cpu": [0, 61, 260, 279, 316, 359, 360, 371, 379, 386, 389, 407, 485, 621, 636, 640, 642, 644, 647, 648, 650, 652, 654, 655, 657, 665, 668, 785, 799, 809, 810, 811, 832, 840, 881, 944, 976, 1002, 1006, 1011, 1023, 1032, 1033], "server": [0, 359, 370, 371, 485, 1026], "anaconda": [0, 360, 371, 377], "inc": [0, 70, 258, 966, 988, 1000], "storag": [0, 346, 386, 647, 648, 655, 657, 665, 666, 667, 888, 979, 991, 1021, 1026], "thei": [0, 4, 26, 27, 37, 50, 57, 82, 97, 111, 117, 118, 120, 122, 124, 126, 143, 146, 150, 151, 155, 168, 169, 182, 184, 187, 193, 198, 199, 216, 220, 223, 227, 233, 234, 253, 256, 259, 260, 262, 268, 279, 281, 296, 301, 306, 313, 315, 344, 345, 351, 352, 355, 359, 360, 361, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 381, 382, 384, 385, 386, 387, 396, 398, 399, 400, 401, 402, 404, 406, 408, 409, 411, 429, 431, 435, 436, 442, 443, 448, 456, 485, 497, 498, 522, 524, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 577, 580, 599, 608, 618, 632, 635, 636, 641, 647, 648, 649, 650, 651, 659, 661, 665, 667, 670, 676, 750, 751, 753, 756, 762, 777, 785, 799, 817, 823, 824, 825, 826, 827, 845, 848, 850, 856, 867, 868, 890, 893, 896, 897, 898, 899, 903, 965, 966, 968, 970, 972, 975, 976, 977, 978, 979, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 1000, 1002, 1006, 1008, 1009, 1011, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "stage": [0, 7, 26, 72, 115, 121, 124, 371, 377, 395, 399, 406, 437, 542, 543, 548, 549, 550, 551, 577, 578, 580, 591, 973, 986, 995, 1026, 1030], "nightli": [0, 360, 376, 377], "build": [0, 4, 7, 17, 32, 43, 55, 67, 74, 99, 119, 121, 127, 133, 144, 146, 161, 162, 164, 165, 168, 206, 264, 267, 279, 297, 298, 302, 307, 308, 346, 355, 359, 360, 361, 369, 375, 376, 377, 378, 379, 386, 389, 392, 398, 399, 400, 403, 406, 407, 431, 479, 490, 492, 513, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 574, 575, 577, 578, 580, 616, 617, 619, 680, 702, 703, 786, 790, 794, 803, 808, 810, 849, 866, 868, 896, 897, 898, 899, 901, 921, 965, 966, 973, 976, 980, 982, 986, 991, 992, 996, 997, 1000, 1003, 1005, 1009, 1010, 1018, 1021, 1023, 1024, 1025, 1027, 1030], "applic": [3, 5, 19, 49, 55, 80, 165, 174, 198, 215, 221, 253, 262, 301, 359, 361, 368, 370, 373, 375, 379, 381, 382, 384, 386, 397, 399, 403, 404, 405, 406, 409, 411, 433, 435, 441, 485, 487, 521, 522, 523, 542, 543, 618, 677, 678, 679, 683, 701, 717, 718, 726, 771, 772, 775, 814, 965, 972, 973, 974, 975, 976, 980, 982, 988, 992, 996, 997, 1000, 1009, 1011, 1018, 1019, 1024, 1026, 1029], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 55, 57, 66, 95, 110, 113, 116, 118, 123, 124, 150, 165, 170, 174, 177, 182, 184, 187, 191, 192, 198, 200, 215, 216, 221, 227, 228, 235, 240, 257, 259, 264, 268, 269, 273, 279, 284, 291, 305, 314, 328, 331, 339, 340, 344, 345, 355, 359, 368, 369, 370, 371, 372, 374, 375, 378, 379, 382, 384, 386, 397, 398, 399, 401, 403, 405, 406, 407, 408, 409, 410, 411, 433, 436, 438, 439, 441, 446, 451, 454, 467, 492, 497, 498, 504, 505, 506, 507, 512, 513, 517, 520, 522, 526, 528, 531, 532, 533, 534, 535, 536, 537, 540, 541, 546, 550, 553, 556, 560, 562, 578, 599, 620, 632, 637, 639, 641, 643, 644, 645, 646, 647, 648, 653, 654, 655, 657, 658, 661, 662, 663, 664, 665, 666, 668, 669, 674, 675, 676, 677, 678, 680, 682, 684, 697, 705, 717, 718, 723, 727, 772, 775, 776, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 808, 816, 817, 818, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 854, 855, 861, 869, 872, 878, 879, 888, 889, 896, 898, 914, 925, 966, 967, 971, 972, 973, 975, 976, 977, 978, 979, 980, 984, 986, 990, 993, 997, 998, 1000, 1003, 1004, 1005, 1011, 1012, 1013, 1018, 1019, 1021, 1023, 1024, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "medium": [3, 165, 233, 274, 308, 331, 399, 404, 409, 632, 862, 969, 972], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 55, 57, 58, 60, 61, 62, 66, 67, 73, 78, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 103, 105, 113, 122, 123, 126, 127, 143, 150, 152, 153, 156, 157, 165, 167, 169, 170, 177, 178, 179, 180, 184, 188, 193, 196, 199, 200, 201, 204, 211, 212, 219, 224, 227, 230, 231, 232, 233, 234, 236, 237, 246, 253, 255, 257, 259, 261, 262, 264, 265, 266, 285, 286, 287, 295, 298, 302, 303, 304, 305, 308, 312, 315, 320, 324, 327, 329, 330, 331, 341, 344, 345, 346, 349, 359, 360, 361, 368, 369, 373, 378, 382, 384, 385, 386, 389, 390, 396, 397, 398, 401, 403, 404, 407, 409, 410, 433, 434, 435, 437, 438, 439, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 482, 483, 484, 504, 516, 523, 525, 527, 529, 536, 546, 547, 548, 549, 550, 551, 553, 554, 572, 576, 577, 580, 583, 621, 622, 632, 646, 655, 656, 668, 672, 681, 684, 694, 708, 726, 728, 731, 769, 779, 787, 790, 791, 795, 802, 805, 806, 809, 812, 814, 823, 824, 825, 827, 830, 831, 832, 833, 834, 836, 838, 839, 840, 845, 846, 863, 865, 877, 882, 886, 890, 891, 892, 893, 894, 896, 897, 898, 899, 902, 924, 928, 929, 939, 940, 942, 945, 951, 966, 968, 969, 971, 972, 973, 975, 976, 977, 978, 979, 980, 983, 986, 988, 990, 991, 992, 1000, 1005, 1007, 1009, 1010, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1033, 1034], "interact": [3, 90, 124, 165, 198, 224, 229, 260, 312, 372, 374, 375, 377, 379, 384, 386, 387, 400, 548, 549, 550, 551, 621, 622, 863, 867, 965, 968, 972, 973, 974, 981, 983, 986, 995, 997, 1020, 1025, 1032, 1033], "user": [3, 25, 55, 69, 95, 116, 159, 165, 168, 186, 219, 234, 249, 256, 266, 268, 279, 285, 286, 289, 307, 311, 312, 313, 314, 315, 316, 355, 359, 360, 362, 367, 371, 372, 373, 375, 377, 379, 380, 381, 384, 385, 386, 389, 390, 393, 397, 398, 399, 400, 401, 403, 404, 406, 407, 408, 410, 411, 412, 413, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 687, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 921, 925, 965, 966, 972, 973, 975, 976, 977, 979, 986, 990, 994, 997, 1000, 1004, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "interfac": [3, 109, 165, 366, 367, 374, 375, 382, 384, 386, 403, 409, 410, 430, 434, 439, 485, 785, 788, 789, 799, 848, 849, 874, 961, 965, 979, 991, 996, 997, 1000, 1018, 1020, 1023, 1024, 1026, 1027, 1032], "compress": [3, 11, 15, 48, 165, 301, 368, 399, 404, 407, 641, 661, 681, 818, 947, 950, 972, 986, 1010, 1018, 1027], "sens": [3, 4, 15, 25, 55, 156, 165, 168, 174, 231, 234, 301, 307, 320, 331, 344, 355, 359, 373, 374, 386, 399, 401, 403, 451, 458, 459, 460, 461, 462, 463, 464, 465, 641, 644, 645, 661, 786, 796, 885, 970, 972, 979, 980, 982, 986, 989], "tomographi": [3, 15, 165, 641, 661, 972], "reconstruct": [3, 15, 20, 95, 96, 100, 165, 197, 222, 223, 315, 404, 407, 471, 472, 473, 520, 522, 524, 526, 527, 528, 529, 531, 532, 537, 572, 576, 641, 661, 677, 678, 682, 880, 881, 972, 973, 1032], "l1": [3, 7, 15, 30, 40, 82, 85, 165, 176, 183, 187, 209, 213, 217, 229, 260, 279, 314, 382, 384, 398, 399, 401, 404, 430, 434, 439, 446, 453, 458, 459, 460, 461, 462, 463, 464, 465, 467, 485, 491, 493, 520, 526, 527, 528, 529, 531, 532, 536, 537, 547, 554, 578, 579, 580, 586, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 659, 661, 665, 666, 667, 668, 670, 677, 723, 750, 756, 761, 766, 767, 768, 773, 799, 806, 814, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 860, 868, 875, 888, 889, 895, 897, 899, 911, 958, 972, 974, 976, 979, 986, 990, 991, 992, 1009, 1023, 1025, 1031, 1034], "prior": [3, 15, 46, 47, 57, 67, 149, 150, 160, 165, 170, 177, 179, 182, 243, 245, 249, 250, 251, 259, 373, 375, 377, 386, 389, 399, 402, 404, 406, 409, 454, 512, 525, 537, 538, 539, 540, 548, 574, 575, 600, 602, 603, 604, 608, 611, 612, 619, 633, 634, 635, 636, 640, 641, 643, 644, 645, 649, 650, 651, 661, 667, 670, 705, 783, 823, 824, 825, 826, 827, 848, 849, 863, 890, 893, 943, 965, 968, 970, 972, 975, 976, 978, 984, 992, 993, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1034], "lasso": [3, 15, 105, 130, 136, 165, 168, 176, 217, 314, 359, 384, 401, 402, 404, 406, 407, 408, 460, 461, 467, 490, 513, 520, 526, 528, 531, 532, 534, 535, 537, 586, 635, 636, 638, 639, 640, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 667, 670, 671, 672, 673, 674, 675, 710, 711, 712, 809, 810, 811, 849, 868, 965, 976, 990, 998, 1006, 1009, 1013, 1018, 1022, 1023, 1024, 1026, 1027, 1029, 1031, 1032], "recognit": [3, 9, 15, 165, 298, 306, 366, 378, 404, 406, 408, 483, 491, 521, 523, 530, 686, 697, 702, 729, 757, 776, 777, 783, 799, 814, 868, 893, 968, 972, 976, 977, 981, 991, 993, 1002, 1005, 1013, 1018], "eigenfac": [3, 15, 165, 368, 404, 483, 530, 686, 702, 799, 814, 868, 893, 993, 1005, 1018], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 70, 72, 74, 131, 135, 137, 140, 141, 145, 148, 165, 176, 191, 217, 227, 233, 235, 239, 240, 253, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 269, 270, 274, 303, 311, 313, 318, 322, 325, 326, 329, 338, 339, 342, 344, 359, 362, 368, 375, 379, 386, 393, 400, 403, 404, 406, 408, 426, 483, 493, 501, 504, 530, 544, 545, 552, 556, 557, 566, 582, 583, 588, 589, 594, 620, 628, 632, 657, 665, 666, 667, 678, 686, 687, 689, 691, 702, 723, 730, 785, 799, 805, 810, 811, 814, 816, 817, 834, 848, 849, 861, 868, 884, 885, 964, 965, 968, 971, 973, 974, 976, 977, 981, 989, 991, 993, 998, 1002, 1005, 1006, 1007, 1011, 1013, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "imag": [3, 6, 13, 15, 20, 32, 36, 46, 48, 51, 54, 58, 68, 70, 89, 94, 95, 107, 118, 145, 154, 165, 189, 220, 229, 232, 236, 257, 288, 297, 298, 312, 319, 320, 344, 345, 365, 366, 368, 370, 373, 378, 381, 384, 386, 389, 392, 399, 404, 430, 434, 441, 451, 482, 483, 484, 485, 491, 492, 495, 496, 523, 524, 526, 530, 596, 597, 680, 686, 726, 814, 858, 972, 976, 977, 979, 981, 988, 992, 996, 1000, 1002, 1007, 1008, 1010, 1011, 1013, 1018, 1021, 1026, 1027, 1031, 1033, 1034], "denois": [3, 15, 94, 107, 165, 404, 485, 524, 526, 530, 573, 576, 814, 858], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 74, 94, 105, 107, 131, 137, 139, 145, 149, 151, 152, 153, 154, 157, 160, 162, 175, 199, 212, 226, 227, 235, 239, 242, 253, 257, 259, 261, 264, 265, 269, 274, 280, 293, 314, 321, 324, 326, 328, 331, 332, 333, 336, 337, 340, 342, 355, 359, 362, 365, 375, 384, 386, 397, 399, 400, 403, 406, 407, 421, 429, 437, 441, 450, 451, 454, 471, 472, 473, 480, 485, 487, 491, 493, 503, 522, 523, 524, 530, 533, 543, 545, 547, 549, 551, 554, 557, 559, 582, 583, 599, 600, 620, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 665, 666, 667, 668, 677, 679, 680, 681, 684, 723, 746, 747, 749, 754, 755, 762, 763, 764, 765, 785, 791, 796, 799, 814, 816, 821, 822, 828, 829, 831, 833, 839, 846, 848, 849, 854, 858, 860, 861, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 897, 899, 965, 971, 972, 973, 976, 977, 979, 982, 989, 990, 996, 998, 1002, 1006, 1007, 1012, 1013, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "pca": [3, 6, 15, 69, 72, 74, 76, 86, 90, 94, 97, 106, 107, 165, 220, 222, 232, 235, 239, 258, 279, 283, 288, 314, 355, 365, 375, 386, 398, 399, 400, 405, 415, 462, 465, 485, 491, 493, 503, 521, 522, 523, 524, 528, 529, 532, 533, 538, 632, 647, 677, 679, 681, 785, 810, 814, 837, 844, 847, 848, 850, 858, 866, 868, 968, 970, 973, 979, 986, 990, 992, 1007, 1012, 1013, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1031, 1032, 1033], "libsvm": [3, 15, 165, 174, 329, 366, 379, 476, 497, 552, 888, 889, 890, 891, 892, 893, 894, 991, 996, 1013, 1018, 1020, 1026, 1029, 1032], "gui": [3, 15, 165, 476, 892, 893, 1009, 1018, 1019, 1029], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 56, 58, 61, 69, 71, 76, 78, 82, 86, 94, 95, 107, 108, 110, 113, 115, 119, 121, 122, 123, 125, 127, 129, 130, 133, 134, 136, 137, 139, 141, 143, 148, 153, 154, 156, 157, 158, 159, 163, 166, 167, 171, 172, 178, 180, 184, 188, 189, 191, 193, 194, 195, 199, 200, 202, 204, 206, 210, 211, 213, 214, 215, 217, 227, 230, 235, 244, 246, 247, 248, 251, 253, 254, 255, 257, 260, 262, 264, 265, 267, 268, 272, 273, 275, 277, 279, 281, 283, 285, 288, 292, 302, 305, 307, 308, 311, 313, 315, 316, 319, 320, 328, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 345, 346, 350, 351, 352, 355, 362, 365, 367, 368, 376, 379, 386, 388, 395, 396, 397, 399, 400, 402, 404, 405, 406, 407, 408, 409, 418, 421, 423, 426, 431, 438, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 478, 479, 485, 487, 490, 491, 492, 498, 511, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 577, 578, 580, 582, 583, 586, 591, 595, 598, 599, 600, 604, 616, 621, 622, 623, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 690, 695, 700, 710, 711, 712, 722, 723, 729, 730, 738, 741, 773, 776, 777, 778, 783, 784, 785, 788, 789, 790, 791, 799, 800, 801, 802, 806, 807, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 833, 834, 835, 837, 839, 844, 845, 846, 848, 849, 851, 853, 855, 860, 861, 863, 864, 865, 867, 868, 869, 873, 874, 876, 877, 878, 879, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 903, 966, 968, 969, 970, 973, 974, 977, 979, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 996, 997, 998, 1000, 1003, 1005, 1007, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023], "complex": [3, 9, 14, 15, 16, 150, 155, 162, 165, 212, 215, 226, 233, 234, 242, 252, 268, 275, 302, 311, 314, 315, 318, 325, 331, 346, 348, 354, 369, 373, 378, 384, 400, 404, 406, 409, 410, 429, 433, 436, 437, 439, 456, 478, 489, 490, 491, 503, 523, 530, 540, 546, 547, 548, 549, 551, 553, 554, 593, 619, 627, 645, 647, 665, 666, 722, 738, 785, 814, 816, 844, 848, 849, 853, 861, 868, 884, 888, 891, 894, 896, 897, 898, 899, 965, 966, 968, 969, 971, 975, 977, 982, 986, 989, 997, 998, 1000, 1013, 1019, 1021, 1027, 1028, 1031], "influenc": [3, 9, 15, 80, 81, 165, 168, 180, 244, 267, 301, 308, 331, 339, 355, 361, 401, 404, 406, 421, 429, 443, 454, 471, 472, 473, 478, 490, 543, 545, 547, 549, 551, 554, 557, 559, 600, 617, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 665, 667, 668, 722, 738, 814, 821, 822, 830, 831, 838, 839, 846, 865, 866, 877, 889, 891, 894, 897, 899, 908, 965, 970, 971, 979, 982, 986, 990, 991, 1000, 1021, 1026, 1027], "core": [3, 15, 49, 55, 65, 71, 116, 118, 119, 165, 168, 169, 316, 358, 360, 362, 371, 373, 376, 381, 386, 389, 399, 404, 406, 410, 433, 435, 438, 439, 444, 446, 488, 527, 578, 583, 647, 648, 655, 657, 665, 823, 824, 825, 826, 827, 832, 840, 972, 979, 982, 991, 994, 997, 998, 1000, 1009, 1011, 1013, 1020, 1022, 1023, 1025, 1028, 1032, 1033, 1034], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 34, 35, 45, 71, 72, 73, 88, 93, 98, 109, 110, 112, 114, 116, 117, 118, 119, 121, 124, 128, 135, 140, 143, 144, 145, 146, 149, 160, 168, 169, 174, 176, 190, 191, 198, 206, 217, 226, 228, 232, 237, 240, 242, 247, 252, 256, 257, 258, 259, 260, 268, 274, 275, 280, 281, 287, 289, 292, 293, 294, 299, 303, 319, 325, 327, 331, 334, 337, 339, 340, 343, 345, 346, 347, 355, 359, 361, 362, 366, 367, 368, 370, 375, 378, 382, 385, 386, 394, 397, 399, 400, 403, 404, 407, 408, 416, 426, 458, 464, 471, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 499, 501, 503, 504, 508, 509, 511, 512, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 595, 598, 599, 600, 602, 603, 611, 620, 621, 622, 632, 647, 648, 655, 657, 663, 664, 665, 686, 692, 694, 697, 701, 702, 704, 705, 707, 714, 715, 717, 718, 722, 726, 729, 730, 731, 742, 744, 746, 747, 770, 771, 772, 774, 775, 776, 777, 780, 782, 785, 786, 788, 789, 790, 791, 799, 803, 804, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 830, 835, 837, 838, 844, 845, 846, 848, 852, 855, 860, 861, 862, 868, 869, 872, 874, 883, 884, 885, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 911, 914, 922, 965, 966, 968, 969, 970, 973, 974, 978, 981, 983, 984, 986, 987, 989, 995, 996, 998, 999, 1000, 1002, 1003, 1007, 1008, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 57, 60, 62, 64, 70, 80, 81, 116, 121, 178, 192, 193, 227, 231, 238, 239, 244, 246, 252, 265, 266, 270, 275, 284, 287, 289, 295, 303, 314, 318, 320, 325, 338, 347, 349, 359, 361, 362, 365, 366, 367, 373, 378, 384, 386, 397, 399, 400, 402, 403, 404, 406, 409, 436, 438, 457, 476, 477, 478, 488, 492, 497, 510, 525, 533, 553, 604, 614, 641, 647, 655, 657, 663, 665, 686, 692, 694, 696, 702, 706, 717, 725, 779, 781, 785, 799, 814, 823, 825, 827, 830, 835, 848, 849, 851, 852, 860, 884, 885, 886, 888, 900, 901, 902, 922, 965, 968, 972, 974, 976, 977, 978, 980, 983, 986, 988, 990, 991, 995, 997, 1000, 1003, 1013, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "outlier": [3, 15, 44, 80, 81, 123, 126, 165, 176, 200, 201, 204, 217, 226, 242, 280, 293, 300, 309, 341, 368, 386, 399, 401, 406, 435, 458, 459, 462, 463, 464, 465, 479, 480, 481, 485, 499, 501, 511, 513, 552, 628, 638, 659, 660, 661, 665, 666, 667, 668, 681, 691, 834, 838, 849, 855, 857, 858, 860, 864, 865, 866, 868, 874, 877, 891, 892, 894, 976, 990, 991, 996, 998, 1012, 1013, 1018, 1023, 1024, 1026], "detect": [3, 8, 10, 15, 20, 63, 65, 80, 82, 117, 126, 165, 179, 226, 242, 252, 259, 262, 275, 280, 293, 307, 330, 368, 371, 373, 377, 384, 386, 397, 398, 399, 401, 403, 407, 435, 438, 458, 459, 462, 463, 464, 465, 477, 478, 480, 481, 485, 499, 501, 504, 511, 526, 527, 528, 535, 552, 553, 577, 580, 585, 628, 666, 687, 691, 715, 777, 814, 834, 838, 849, 855, 868, 888, 892, 968, 972, 997, 998, 1000, 1006, 1011, 1012, 1013, 1018, 1021, 1024, 1025, 1026, 1028, 1030, 1031, 1033, 1034], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 20, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 71, 73, 80, 81, 82, 86, 90, 94, 95, 100, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 132, 136, 143, 144, 147, 150, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 177, 182, 183, 186, 187, 189, 191, 193, 194, 197, 198, 199, 200, 202, 203, 206, 211, 212, 216, 219, 220, 221, 227, 228, 229, 230, 232, 233, 234, 241, 244, 246, 248, 249, 253, 254, 257, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 277, 281, 285, 286, 287, 288, 289, 292, 296, 297, 298, 301, 303, 304, 305, 306, 307, 308, 311, 313, 314, 319, 320, 323, 324, 328, 330, 333, 339, 344, 345, 346, 351, 352, 355, 359, 360, 361, 365, 366, 368, 370, 371, 373, 375, 377, 378, 380, 381, 385, 386, 387, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 416, 422, 423, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 477, 478, 482, 484, 485, 486, 488, 491, 492, 493, 497, 498, 499, 504, 512, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 689, 690, 691, 692, 702, 703, 708, 710, 711, 714, 715, 716, 717, 718, 719, 722, 726, 728, 729, 733, 734, 736, 738, 739, 741, 744, 767, 768, 770, 771, 772, 773, 775, 777, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 908, 909, 919, 920, 925, 929, 944, 945, 946, 947, 950, 951, 957, 960, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 1003, 1005, 1006, 1007, 1010, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 56, 58, 62, 70, 71, 72, 73, 75, 85, 106, 108, 109, 110, 112, 113, 114, 116, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 144, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 168, 169, 170, 174, 177, 180, 181, 182, 190, 193, 194, 195, 196, 199, 200, 201, 204, 205, 206, 207, 212, 213, 215, 216, 227, 228, 230, 232, 234, 236, 245, 246, 247, 248, 249, 250, 252, 253, 257, 259, 261, 262, 265, 268, 269, 273, 275, 277, 282, 285, 286, 287, 290, 291, 298, 301, 302, 306, 307, 311, 312, 313, 314, 315, 320, 322, 323, 324, 327, 328, 330, 331, 337, 338, 339, 340, 344, 345, 350, 351, 352, 353, 355, 358, 360, 362, 365, 368, 370, 373, 375, 380, 382, 386, 388, 390, 393, 394, 395, 397, 398, 399, 400, 404, 406, 407, 408, 416, 421, 426, 427, 428, 429, 431, 432, 433, 436, 437, 438, 454, 458, 471, 472, 473, 476, 490, 497, 513, 523, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 571, 582, 583, 591, 595, 599, 600, 602, 603, 604, 605, 611, 614, 616, 617, 619, 620, 621, 622, 623, 624, 626, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 703, 704, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 726, 729, 730, 731, 734, 736, 738, 740, 744, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 782, 783, 784, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 834, 835, 838, 839, 845, 846, 848, 855, 868, 869, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 950, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 977, 978, 979, 980, 982, 983, 984, 986, 989, 990, 991, 992, 995, 996, 997, 999, 1000, 1003, 1005, 1006, 1007, 1011, 1013, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "latenc": [3, 7, 15, 121, 165, 358, 513, 554, 661, 667, 814, 868, 894, 941, 950, 996, 1013, 1021], "speci": [3, 15, 165, 280, 293, 344, 368, 405, 487, 695, 777, 833, 892, 903, 976, 982, 1018], "distribut": [3, 4, 8, 9, 10, 15, 20, 27, 37, 39, 44, 52, 53, 55, 57, 62, 75, 79, 80, 81, 92, 110, 112, 123, 126, 142, 150, 159, 165, 167, 168, 174, 177, 198, 200, 202, 221, 223, 227, 231, 244, 249, 250, 255, 259, 265, 267, 280, 284, 293, 300, 301, 303, 306, 309, 319, 320, 336, 339, 344, 359, 360, 368, 369, 370, 371, 373, 374, 377, 378, 379, 386, 393, 397, 398, 399, 401, 403, 404, 405, 409, 411, 436, 438, 458, 459, 460, 461, 462, 463, 464, 465, 477, 487, 492, 504, 505, 506, 507, 508, 512, 521, 522, 525, 539, 540, 541, 552, 600, 614, 629, 631, 633, 634, 637, 647, 648, 658, 668, 669, 677, 678, 679, 681, 695, 697, 712, 740, 777, 783, 784, 789, 790, 797, 799, 803, 804, 814, 824, 827, 833, 837, 844, 851, 864, 865, 866, 867, 868, 876, 877, 878, 883, 884, 892, 903, 927, 944, 965, 970, 972, 974, 975, 976, 978, 979, 981, 982, 988, 989, 994, 996, 997, 1002, 1006, 1010, 1012, 1013, 1018, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034], "relat": [3, 7, 12, 15, 17, 44, 62, 96, 98, 100, 165, 166, 168, 193, 234, 237, 252, 266, 316, 344, 353, 362, 368, 369, 372, 376, 377, 378, 380, 381, 382, 384, 386, 387, 388, 390, 393, 398, 399, 400, 401, 402, 403, 404, 406, 409, 439, 453, 458, 485, 538, 539, 551, 552, 628, 662, 666, 681, 690, 711, 731, 806, 811, 846, 847, 849, 852, 853, 858, 861, 862, 863, 864, 867, 876, 892, 965, 970, 976, 977, 979, 980, 983, 986, 991, 992, 993, 994, 997, 1013, 1018, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1034], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 20, 25, 26, 27, 30, 33, 36, 42, 58, 60, 63, 68, 69, 70, 71, 72, 76, 80, 81, 86, 89, 90, 91, 92, 95, 97, 99, 103, 104, 106, 108, 109, 116, 119, 125, 129, 130, 131, 133, 134, 142, 144, 148, 150, 151, 152, 155, 156, 158, 162, 163, 166, 167, 168, 169, 172, 176, 181, 182, 184, 185, 187, 194, 198, 199, 200, 202, 203, 207, 213, 214, 215, 217, 226, 229, 231, 234, 240, 241, 242, 252, 256, 259, 265, 266, 268, 269, 273, 275, 277, 282, 287, 288, 290, 294, 297, 299, 300, 301, 304, 308, 309, 310, 312, 315, 316, 326, 327, 328, 331, 339, 342, 343, 346, 347, 350, 352, 353, 355, 362, 365, 366, 367, 368, 369, 370, 371, 375, 376, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 397, 399, 401, 402, 403, 404, 405, 409, 410, 411, 412, 415, 420, 421, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 568, 569, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 607, 608, 609, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 676, 677, 678, 679, 680, 681, 686, 690, 691, 692, 702, 710, 711, 712, 729, 746, 747, 751, 752, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 769, 773, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 908, 909, 922, 941, 951, 952, 953, 957, 965, 968, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 987, 988, 989, 990, 991, 992, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1007, 1008, 1009, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "engin": [3, 15, 40, 115, 155, 165, 359, 367, 370, 399, 405, 407, 409, 453, 485, 551, 628, 662, 690, 806, 811, 846, 847, 849, 852, 853, 858, 861, 862, 863, 867, 966, 976, 986, 994, 1024], "topic": [3, 7, 8, 15, 70, 165, 344, 345, 346, 368, 369, 403, 404, 407, 477, 486, 525, 527, 529, 536, 577, 580, 972, 977, 996, 997, 1011, 1023, 1025], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 55, 69, 70, 71, 76, 85, 95, 165, 202, 213, 252, 275, 298, 344, 346, 355, 362, 365, 368, 370, 375, 379, 382, 384, 399, 400, 403, 404, 439, 441, 444, 445, 451, 453, 477, 478, 482, 483, 492, 493, 520, 523, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 536, 572, 573, 577, 578, 580, 582, 583, 586, 588, 620, 707, 776, 785, 799, 825, 847, 848, 893, 925, 940, 965, 973, 977, 981, 986, 990, 996, 1000, 1003, 1007, 1008, 1013, 1018, 1019, 1027, 1030], "neg": [3, 4, 15, 16, 24, 60, 75, 78, 86, 116, 122, 123, 127, 165, 168, 176, 198, 216, 217, 248, 249, 256, 259, 262, 266, 268, 269, 279, 301, 305, 315, 344, 379, 386, 387, 399, 403, 406, 407, 408, 410, 411, 421, 429, 433, 441, 454, 458, 471, 472, 473, 477, 520, 522, 524, 525, 526, 527, 529, 531, 533, 536, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 577, 580, 581, 584, 585, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 658, 659, 661, 662, 666, 667, 668, 669, 676, 687, 693, 694, 701, 702, 704, 707, 708, 710, 711, 712, 715, 717, 718, 719, 723, 726, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 770, 771, 772, 773, 775, 779, 783, 784, 791, 807, 809, 814, 821, 822, 831, 834, 839, 846, 855, 864, 866, 867, 872, 876, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 923, 925, 944, 974, 976, 977, 979, 980, 981, 982, 990, 991, 1011, 1012, 1013, 1018, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 62, 70, 79, 80, 81, 82, 85, 95, 96, 97, 106, 157, 165, 171, 176, 184, 199, 203, 217, 228, 231, 232, 249, 252, 266, 275, 297, 315, 319, 320, 344, 345, 346, 353, 359, 362, 368, 369, 370, 373, 375, 379, 382, 384, 385, 386, 396, 400, 401, 402, 407, 408, 409, 410, 411, 421, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 443, 446, 448, 449, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 481, 485, 486, 489, 490, 491, 492, 493, 494, 497, 498, 499, 508, 510, 512, 513, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 574, 575, 577, 578, 579, 580, 582, 583, 592, 593, 594, 595, 596, 597, 598, 600, 609, 618, 619, 620, 622, 624, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 696, 701, 702, 703, 704, 705, 707, 717, 718, 719, 722, 726, 727, 728, 729, 742, 743, 746, 747, 748, 749, 751, 752, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 775, 776, 778, 779, 782, 783, 784, 785, 788, 789, 799, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 853, 854, 855, 857, 859, 860, 861, 863, 865, 866, 867, 868, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 904, 906, 907, 908, 909, 914, 923, 924, 925, 926, 929, 930, 931, 939, 940, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 962, 966, 968, 970, 972, 973, 977, 978, 979, 980, 986, 987, 988, 989, 990, 992, 993, 1010, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "factor": [3, 15, 26, 31, 44, 46, 53, 55, 62, 94, 100, 105, 107, 128, 165, 168, 224, 227, 237, 270, 271, 279, 280, 293, 295, 296, 301, 303, 313, 315, 359, 360, 373, 379, 382, 386, 396, 398, 399, 406, 407, 409, 429, 431, 443, 458, 460, 461, 462, 463, 465, 467, 477, 493, 503, 504, 516, 521, 524, 525, 527, 529, 530, 533, 534, 535, 536, 538, 539, 550, 551, 552, 577, 580, 586, 602, 638, 639, 640, 643, 644, 645, 671, 672, 681, 708, 771, 785, 788, 789, 810, 834, 868, 882, 884, 892, 924, 925, 965, 972, 973, 979, 986, 989, 993, 996, 1012, 1013, 1018, 1019, 1021, 1022, 1024, 1032, 1034], "latent": [3, 15, 17, 106, 165, 298, 345, 402, 407, 409, 477, 521, 525, 527, 528, 529, 532, 533, 577, 580, 844, 975, 996, 1011, 1012, 1013, 1020, 1023], "dirichlet": [3, 15, 165, 244, 245, 250, 254, 407, 477, 525, 527, 529, 577, 580, 783, 996, 1012, 1013, 1018, 1023, 1024], "alloc": [3, 15, 25, 61, 165, 271, 313, 369, 373, 374, 399, 407, 432, 436, 448, 477, 525, 527, 529, 573, 577, 580, 635, 641, 649, 651, 788, 789, 791, 807, 812, 815, 965, 986, 996, 1012, 1013, 1022, 1023, 1028, 1029], "visual": [3, 4, 9, 15, 16, 20, 25, 30, 32, 43, 46, 49, 52, 57, 60, 61, 80, 91, 94, 97, 99, 105, 107, 116, 124, 126, 128, 132, 133, 158, 163, 165, 169, 171, 182, 189, 198, 200, 216, 224, 226, 229, 232, 238, 239, 242, 249, 252, 253, 255, 256, 260, 269, 275, 284, 288, 289, 294, 296, 299, 301, 305, 306, 311, 313, 320, 362, 365, 369, 371, 379, 380, 396, 401, 403, 404, 405, 406, 427, 430, 434, 435, 443, 461, 485, 491, 493, 496, 499, 503, 511, 521, 523, 530, 553, 555, 560, 620, 622, 647, 678, 681, 686, 687, 689, 690, 691, 707, 715, 770, 777, 786, 787, 790, 791, 802, 803, 804, 805, 806, 807, 814, 845, 849, 868, 893, 902, 921, 971, 973, 974, 979, 980, 982, 983, 986, 992, 996, 1002, 1013, 1021, 1028, 1029, 1030, 1032], "stock": [3, 15, 165, 399, 401, 443, 461, 678, 1005], "market": [3, 15, 165, 399, 401, 443, 461, 678, 1000, 1005], "wikipedia": [3, 15, 24, 165, 381, 398, 399, 584, 596, 597, 625, 645, 657, 660, 671, 672, 684, 693, 694, 696, 698, 701, 705, 707, 714, 717, 718, 719, 722, 723, 726, 731, 744, 771, 773, 774, 776, 777, 778, 779, 830, 831, 836, 837, 838, 839, 866, 882, 896, 897, 968, 972, 976, 979, 988, 992, 1011, 1018, 1025], "princip": [3, 15, 84, 87, 94, 97, 99, 100, 102, 104, 107, 128, 165, 219, 232, 235, 288, 306, 313, 365, 399, 402, 411, 473, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 539, 646, 677, 678, 679, 681, 682, 814, 837, 849, 868, 924, 925, 973, 979, 1012, 1013, 1018], "eigenvector": [3, 15, 46, 86, 90, 165, 244, 399, 441, 451, 523, 524, 530, 539, 677, 678, 680, 684, 973, 1018, 1022, 1032], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 371, 373, 375, 377, 384, 386, 387, 389, 396, 399, 400, 402, 406, 439, 445, 457, 477, 478, 497, 498, 526, 535, 546, 547, 548, 549, 553, 554, 555, 634, 635, 636, 639, 640, 641, 642, 643, 644, 649, 650, 651, 652, 670, 671, 672, 673, 785, 788, 789, 799, 806, 809, 846, 848, 886, 896, 897, 898, 899, 929, 930, 960, 965, 972, 973, 975, 976, 986, 988, 990, 996, 1000, 1008, 1011, 1023, 1025, 1028, 1031, 1032], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 366, 368, 370, 371, 377, 378, 381, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 499, 992, 1007, 1009, 1011, 1013, 1022, 1023, 1026, 1030, 1031, 1032], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 359, 360, 362, 370, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 389, 392, 393, 398, 410, 411, 415, 428, 445, 450, 460, 474, 496, 497, 520, 532, 536, 544, 561, 562, 566, 572, 581, 584, 585, 587, 590, 592, 601, 605, 609, 610, 613, 618, 627, 631, 639, 640, 643, 649, 650, 652, 656, 664, 697, 704, 710, 711, 712, 714, 716, 718, 719, 723, 727, 731, 732, 734, 735, 739, 742, 744, 751, 752, 756, 757, 759, 761, 769, 771, 780, 792, 793, 794, 795, 796, 797, 798, 816, 818, 820, 822, 824, 828, 829, 838, 839, 840, 842, 850, 851, 854, 856, 859, 870, 873, 875, 876, 878, 879, 880, 883, 889, 898, 899, 900, 901, 914, 923, 925, 927, 928, 930, 938, 939, 940, 947, 964, 966, 974, 997, 998, 1000, 1003, 1006, 1007, 1011, 1013, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1031, 1033, 1034], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 371, 373, 374, 375, 377, 378, 379, 380, 381, 384, 386, 387, 389, 395, 399, 401, 403, 406, 409, 410, 411, 426, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 451, 453, 456, 457, 460, 461, 520, 521, 522, 523, 524, 526, 528, 530, 531, 532, 534, 535, 537, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 571, 581, 583, 584, 585, 587, 588, 589, 591, 599, 600, 623, 629, 635, 636, 638, 640, 641, 642, 644, 645, 649, 650, 651, 652, 671, 672, 677, 678, 679, 680, 681, 682, 683, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 820, 821, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 845, 846, 847, 850, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 919, 920, 944, 947, 950, 965, 975, 977, 980, 989, 991, 992, 996, 997, 1000, 1002, 1009, 1011, 1018, 1021, 1023, 1025, 1026, 1027, 1028, 1032, 1033, 1034], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 367, 371, 372, 373, 374, 376, 377, 379, 381, 382, 384, 385, 386, 389, 393, 395, 398, 399, 400, 401, 406, 407, 410, 411, 433, 435, 492, 522, 550, 551, 591, 623, 635, 676, 785, 788, 789, 791, 799, 807, 811, 813, 919, 973, 980, 986, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1004, 1011, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 373, 381, 986], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 374, 379, 400, 457, 886, 992, 995, 996, 997, 1029, 1032], "introduc": [4, 78, 80, 81, 100, 146, 165, 170, 177, 182, 226, 231, 234, 242, 266, 316, 346, 366, 369, 371, 373, 375, 377, 378, 381, 384, 386, 389, 390, 397, 399, 401, 403, 404, 406, 407, 422, 430, 431, 432, 434, 436, 438, 448, 453, 457, 471, 472, 473, 474, 485, 493, 504, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 544, 545, 555, 556, 557, 558, 559, 570, 571, 572, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 647, 653, 674, 675, 677, 678, 681, 814, 832, 837, 840, 844, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 882, 886, 970, 972, 975, 978, 979, 982, 986, 988, 990, 991, 1002, 1009, 1018, 1019, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 20, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 57, 58, 64, 65, 66, 67, 68, 70, 71, 72, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 103, 104, 105, 109, 113, 115, 116, 119, 120, 123, 125, 130, 131, 132, 133, 136, 139, 142, 147, 149, 150, 151, 152, 155, 156, 157, 160, 162, 163, 165, 167, 168, 170, 174, 177, 178, 184, 185, 186, 187, 189, 195, 198, 199, 200, 202, 203, 204, 205, 206, 216, 219, 220, 221, 224, 227, 229, 232, 233, 234, 237, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 273, 274, 279, 285, 286, 288, 295, 296, 300, 305, 306, 309, 311, 326, 330, 331, 335, 339, 340, 342, 344, 345, 346, 355, 359, 360, 361, 367, 368, 370, 371, 372, 373, 376, 378, 380, 382, 385, 386, 389, 393, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 423, 426, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 447, 448, 451, 453, 464, 467, 479, 482, 483, 485, 492, 493, 497, 498, 501, 503, 511, 526, 527, 528, 529, 535, 536, 538, 539, 544, 545, 552, 577, 578, 579, 580, 583, 600, 602, 603, 604, 608, 611, 612, 616, 620, 621, 622, 623, 627, 632, 633, 636, 638, 640, 642, 644, 647, 650, 655, 656, 657, 661, 663, 665, 666, 667, 669, 679, 681, 683, 687, 689, 690, 693, 694, 695, 696, 698, 704, 706, 707, 715, 716, 717, 718, 719, 722, 725, 731, 745, 746, 747, 756, 766, 770, 771, 772, 774, 775, 777, 778, 779, 781, 784, 785, 787, 788, 789, 790, 791, 794, 799, 800, 801, 802, 803, 804, 805, 807, 809, 811, 812, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 841, 844, 848, 853, 857, 858, 860, 864, 865, 866, 868, 873, 874, 875, 876, 877, 878, 879, 888, 890, 893, 896, 897, 898, 899, 940, 965, 966, 968, 969, 971, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 989, 990, 991, 992, 993, 996, 997, 1000, 1002, 1004, 1005, 1006, 1010, 1011, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "strategi": [4, 52, 54, 58, 61, 71, 120, 125, 130, 146, 162, 163, 165, 170, 182, 187, 198, 206, 216, 229, 239, 252, 260, 262, 264, 268, 269, 275, 294, 299, 300, 307, 308, 309, 311, 312, 315, 346, 358, 375, 379, 385, 386, 403, 406, 407, 408, 411, 426, 427, 428, 441, 451, 461, 491, 493, 501, 503, 511, 522, 527, 540, 541, 550, 551, 556, 557, 560, 577, 578, 580, 581, 583, 591, 616, 617, 619, 623, 634, 636, 640, 642, 644, 650, 652, 654, 662, 664, 680, 684, 693, 702, 743, 745, 781, 785, 788, 789, 791, 799, 802, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 845, 853, 858, 869, 883, 888, 890, 893, 896, 897, 898, 899, 947, 965, 966, 975, 977, 978, 979, 980, 982, 984, 986, 990, 991, 992, 996, 1006, 1011, 1013, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "leverag": [4, 8, 37, 49, 86, 216, 344, 345, 359, 360, 371, 403, 406, 863, 965, 972, 1002, 1021, 1033], "task": [4, 7, 98, 109, 117, 118, 124, 145, 146, 158, 165, 176, 198, 214, 217, 219, 256, 346, 359, 361, 368, 370, 371, 372, 373, 377, 378, 379, 382, 384, 385, 386, 404, 406, 407, 408, 409, 437, 450, 482, 494, 504, 581, 584, 585, 587, 588, 589, 593, 594, 595, 598, 621, 622, 635, 636, 641, 642, 649, 650, 651, 652, 663, 670, 673, 715, 717, 718, 742, 770, 772, 775, 777, 786, 790, 803, 808, 942, 943, 973, 976, 977, 978, 979, 987, 989, 991, 992, 994, 995, 997, 998, 999, 1000, 1002, 1009, 1010, 1011, 1013, 1018, 1023, 1027, 1033], "highli": [4, 9, 72, 80, 81, 97, 106, 126, 182, 193, 203, 259, 262, 268, 296, 345, 359, 360, 373, 375, 379, 397, 399, 403, 406, 407, 441, 451, 485, 552, 660, 681, 797, 799, 844, 972, 976, 979, 980, 982, 990, 991, 995], "depend": [4, 5, 7, 37, 53, 75, 99, 116, 120, 123, 124, 127, 130, 142, 146, 156, 162, 165, 166, 168, 172, 174, 178, 182, 202, 216, 220, 226, 227, 233, 242, 249, 259, 260, 264, 265, 266, 279, 296, 301, 306, 313, 316, 328, 339, 345, 346, 355, 359, 360, 361, 366, 373, 375, 376, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 395, 398, 399, 401, 403, 404, 406, 407, 408, 409, 410, 427, 428, 429, 433, 435, 436, 438, 439, 441, 443, 446, 448, 449, 451, 453, 458, 473, 478, 479, 480, 482, 485, 489, 490, 491, 493, 494, 499, 523, 524, 530, 533, 540, 548, 549, 551, 577, 578, 579, 580, 591, 593, 596, 597, 600, 616, 621, 622, 627, 629, 637, 647, 648, 658, 660, 662, 665, 666, 667, 669, 676, 679, 680, 683, 684, 717, 729, 766, 769, 778, 779, 783, 784, 804, 813, 830, 831, 832, 834, 836, 837, 838, 839, 840, 846, 847, 849, 861, 862, 865, 868, 882, 889, 890, 893, 897, 906, 965, 966, 968, 969, 970, 972, 973, 975, 976, 978, 979, 980, 981, 984, 988, 990, 991, 992, 1002, 1009, 1011, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1033, 1034], "busi": [4, 198, 259, 381, 384, 776, 972, 976, 1000], "dai": [4, 12, 155, 169, 199, 360, 370, 373, 867, 1000, 1024, 1025, 1032, 1033], "week": [4, 372, 373, 387, 1000, 1032], "yearli": 4, "season": [4, 155, 169, 199, 372, 409], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 57, 58, 62, 64, 66, 67, 68, 70, 71, 74, 78, 86, 98, 105, 109, 110, 116, 118, 120, 122, 124, 125, 129, 130, 136, 146, 147, 151, 162, 163, 165, 168, 169, 170, 171, 174, 182, 187, 198, 200, 204, 205, 206, 215, 216, 220, 221, 223, 227, 232, 235, 237, 246, 249, 252, 254, 255, 256, 257, 259, 260, 261, 264, 265, 267, 268, 270, 272, 274, 275, 277, 279, 292, 298, 301, 303, 305, 307, 308, 311, 318, 325, 331, 334, 337, 344, 346, 355, 358, 360, 361, 368, 370, 375, 376, 377, 379, 381, 382, 384, 385, 386, 388, 390, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 417, 429, 431, 432, 433, 435, 436, 437, 439, 441, 443, 444, 448, 450, 457, 458, 471, 472, 473, 474, 483, 491, 501, 504, 520, 521, 522, 524, 526, 528, 531, 532, 533, 534, 535, 537, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 570, 571, 572, 577, 578, 579, 580, 590, 591, 592, 599, 600, 616, 619, 620, 627, 629, 634, 640, 643, 644, 645, 647, 653, 654, 655, 656, 657, 659, 662, 664, 665, 666, 667, 671, 672, 674, 676, 678, 679, 682, 683, 686, 692, 693, 694, 696, 697, 701, 702, 714, 717, 718, 726, 728, 730, 743, 744, 745, 766, 771, 772, 774, 775, 776, 780, 781, 782, 783, 784, 785, 788, 789, 796, 797, 799, 803, 809, 810, 811, 813, 814, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 835, 837, 843, 844, 845, 846, 848, 849, 851, 854, 855, 857, 858, 860, 861, 862, 864, 865, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 883, 884, 886, 890, 891, 892, 893, 894, 896, 897, 898, 899, 908, 909, 949, 960, 965, 966, 968, 970, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 989, 990, 991, 992, 996, 997, 1000, 1002, 1003, 1006, 1009, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 359, 360, 361, 362, 366, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 386, 388, 389, 390, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 965, 966, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 996, 997, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 55, 58, 62, 70, 71, 72, 73, 75, 86, 95, 106, 115, 120, 143, 155, 159, 170, 174, 177, 179, 186, 187, 189, 198, 199, 204, 214, 216, 220, 228, 229, 238, 241, 256, 266, 268, 273, 287, 288, 295, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 323, 331, 334, 345, 361, 362, 365, 367, 370, 373, 378, 385, 386, 396, 399, 400, 403, 407, 408, 453, 454, 455, 456, 478, 556, 570, 571, 577, 578, 579, 580, 619, 647, 648, 661, 663, 665, 667, 676, 729, 817, 848, 849, 888, 889, 890, 891, 893, 894, 966, 972, 977, 980, 987, 990, 991, 993, 996, 999, 1000, 1002, 1007, 1008, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "splinetransform": [4, 199, 314, 863, 986, 1031, 1033, 1034], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 56, 58, 71, 72, 91, 92, 100, 104, 108, 109, 116, 118, 126, 131, 134, 150, 151, 154, 158, 159, 162, 165, 168, 169, 174, 176, 188, 189, 190, 206, 210, 213, 214, 217, 220, 227, 234, 235, 237, 244, 245, 246, 252, 253, 254, 259, 261, 265, 269, 270, 275, 277, 279, 282, 284, 287, 288, 289, 290, 306, 311, 315, 319, 321, 322, 326, 327, 331, 332, 340, 342, 344, 345, 346, 361, 362, 365, 367, 368, 369, 370, 373, 374, 375, 377, 378, 379, 380, 382, 384, 385, 389, 395, 397, 399, 400, 402, 404, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 450, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 497, 498, 499, 501, 503, 504, 508, 511, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 709, 715, 717, 718, 719, 723, 724, 725, 726, 727, 728, 729, 730, 731, 742, 743, 745, 770, 771, 772, 774, 775, 776, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 913, 914, 915, 916, 917, 919, 920, 932, 933, 934, 937, 942, 944, 946, 947, 960, 965, 966, 967, 968, 970, 971, 972, 973, 977, 978, 980, 983, 984, 986, 987, 989, 992, 997, 998, 1000, 1002, 1006, 1009, 1011, 1013, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "extrapol": [4, 150, 177, 199, 230, 262, 867, 976, 986, 992, 1031, 1033], "option": [4, 30, 46, 52, 103, 116, 124, 156, 163, 179, 182, 199, 262, 268, 312, 344, 349, 355, 361, 367, 368, 369, 371, 373, 374, 376, 378, 379, 381, 382, 384, 386, 387, 389, 393, 399, 400, 402, 403, 404, 406, 407, 410, 422, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 448, 450, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 485, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 617, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 676, 677, 678, 679, 681, 683, 684, 700, 702, 706, 717, 718, 723, 724, 725, 745, 746, 747, 752, 754, 755, 759, 762, 763, 764, 765, 766, 769, 771, 772, 775, 778, 779, 781, 785, 786, 787, 788, 789, 791, 792, 794, 799, 803, 807, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 880, 881, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 915, 962, 965, 966, 972, 975, 976, 979, 986, 989, 991, 992, 997, 999, 1009, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 71, 72, 89, 95, 106, 109, 115, 117, 119, 126, 127, 130, 131, 133, 144, 145, 155, 168, 169, 174, 179, 194, 195, 198, 206, 214, 229, 230, 234, 236, 237, 238, 239, 241, 249, 255, 257, 259, 264, 266, 271, 277, 279, 283, 288, 296, 297, 298, 312, 313, 315, 316, 321, 322, 323, 350, 353, 359, 362, 365, 368, 370, 376, 379, 385, 393, 398, 402, 403, 404, 406, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 521, 523, 532, 828, 829, 925, 986, 997, 1003, 1005, 1007, 1013, 1018, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "openml": [4, 71, 130, 155, 168, 198, 206, 214, 216, 228, 277, 297, 366, 389, 485, 1013, 1026, 1028, 1031], "repositori": [4, 8, 174, 366, 368, 370, 371, 373, 375, 377, 381, 387, 389, 493, 996, 999, 1013], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 172, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 309, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 367, 368, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 477, 484, 485, 489, 491, 492, 493, 495, 496, 497, 499, 501, 504, 510, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 568, 569, 570, 571, 572, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 704, 706, 707, 710, 711, 712, 714, 715, 716, 717, 718, 719, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 751, 752, 756, 757, 759, 761, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 876, 877, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 915, 920, 923, 925, 927, 928, 929, 930, 937, 938, 939, 940, 944, 947, 950, 964, 965, 966, 968, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 986, 987, 988, 989, 990, 991, 992, 997, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "fetch_openml": [4, 5, 71, 75, 120, 130, 155, 168, 169, 170, 198, 206, 214, 216, 228, 237, 241, 277, 279, 297, 307, 311, 315, 367, 377, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "bike_shar": 4, "bike_sharing_demand": [4, 169], "version": [4, 46, 53, 55, 71, 95, 100, 152, 163, 169, 170, 174, 177, 182, 196, 199, 200, 206, 212, 214, 234, 237, 241, 277, 297, 304, 306, 308, 311, 312, 313, 314, 316, 331, 344, 359, 362, 368, 372, 373, 374, 375, 376, 379, 381, 382, 384, 386, 387, 389, 392, 393, 398, 399, 402, 404, 406, 407, 409, 410, 411, 417, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 489, 490, 491, 493, 494, 497, 498, 499, 501, 503, 511, 512, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 693, 696, 697, 702, 703, 707, 710, 711, 712, 713, 715, 716, 717, 718, 719, 722, 727, 728, 729, 731, 734, 741, 742, 744, 745, 746, 747, 749, 754, 755, 756, 757, 766, 770, 771, 772, 773, 775, 777, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 798, 799, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 874, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 906, 908, 909, 919, 920, 922, 924, 925, 932, 933, 934, 935, 936, 939, 942, 943, 944, 946, 951, 957, 962, 963, 965, 968, 970, 973, 976, 978, 980, 982, 984, 989, 990, 992, 994, 997, 999, 1010, 1014, 1016], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 136, 139, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 367, 368, 370, 371, 373, 375, 377, 378, 379, 380, 382, 384, 385, 386, 389, 390, 391, 392, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 448, 449, 451, 452, 453, 454, 457, 458, 460, 461, 462, 463, 464, 467, 471, 472, 473, 474, 482, 485, 489, 490, 493, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 570, 571, 573, 574, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 592, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 692, 693, 694, 695, 696, 697, 702, 704, 705, 706, 707, 710, 711, 712, 713, 714, 716, 717, 718, 719, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 751, 752, 756, 757, 759, 761, 764, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 872, 876, 881, 882, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 903, 908, 909, 914, 922, 923, 924, 925, 927, 928, 929, 930, 937, 938, 939, 940, 941, 942, 944, 947, 949, 950, 963, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 994, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1034], "as_fram": [4, 5, 71, 75, 116, 120, 130, 155, 168, 169, 170, 186, 187, 198, 206, 214, 216, 237, 241, 279, 297, 306, 307, 311, 313, 315, 316, 367, 368, 478, 479, 480, 481, 485, 489, 490, 491, 493, 494, 499, 1028, 1029, 1030, 1031, 1034], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 55, 57, 58, 60, 63, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 92, 95, 96, 97, 98, 100, 106, 109, 114, 116, 120, 121, 122, 123, 125, 126, 127, 130, 131, 133, 136, 137, 138, 143, 146, 150, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 174, 182, 183, 185, 186, 187, 189, 191, 193, 194, 195, 198, 200, 201, 202, 205, 206, 212, 213, 214, 216, 219, 222, 223, 227, 228, 231, 233, 234, 235, 236, 237, 240, 241, 244, 247, 249, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 284, 285, 288, 292, 295, 296, 297, 298, 302, 306, 307, 308, 311, 313, 315, 316, 320, 322, 323, 324, 334, 338, 339, 340, 344, 345, 346, 349, 350, 353, 355, 359, 360, 366, 368, 369, 373, 374, 375, 378, 379, 380, 382, 385, 386, 388, 390, 393, 395, 396, 397, 399, 400, 401, 403, 404, 406, 407, 408, 409, 411, 412, 413, 416, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 448, 450, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 508, 511, 512, 513, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 689, 690, 691, 692, 694, 696, 697, 698, 701, 702, 703, 704, 707, 709, 712, 714, 715, 716, 717, 718, 719, 722, 723, 726, 727, 728, 729, 730, 731, 738, 739, 740, 742, 744, 749, 755, 756, 757, 766, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 797, 799, 803, 804, 808, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 906, 907, 908, 909, 919, 925, 926, 937, 938, 941, 942, 946, 947, 949, 957, 962, 964, 965, 966, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 988, 989, 990, 991, 992, 996, 1002, 1006, 1007, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "parser": [4, 5, 8, 71, 75, 120, 130, 155, 168, 169, 170, 198, 206, 214, 216, 228, 237, 241, 277, 279, 297, 307, 311, 315, 485, 1033, 1034], "panda": [4, 5, 12, 25, 70, 71, 72, 73, 75, 116, 117, 120, 123, 127, 130, 155, 162, 167, 168, 169, 170, 177, 182, 187, 198, 206, 214, 216, 228, 237, 238, 241, 249, 257, 259, 260, 262, 270, 271, 277, 279, 297, 306, 307, 308, 311, 314, 315, 339, 344, 345, 367, 368, 371, 372, 373, 375, 376, 386, 389, 392, 400, 422, 431, 432, 434, 436, 438, 453, 455, 457, 471, 472, 473, 474, 478, 479, 480, 481, 485, 489, 490, 491, 493, 494, 499, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 555, 556, 557, 558, 559, 570, 571, 572, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 621, 622, 624, 627, 628, 629, 630, 631, 677, 678, 681, 785, 788, 789, 799, 814, 832, 837, 840, 844, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 886, 904, 965, 966, 986, 996, 997, 1011, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "df": [4, 25, 27, 130, 167, 169, 177, 182, 198, 216, 249, 259, 305, 307, 345, 378, 407, 579, 580, 965, 966, 1035], "frame": [4, 16, 71, 155, 168, 169, 198, 307, 368, 373, 384, 387, 478, 479, 480, 481, 485, 489, 490, 491, 493, 494, 499, 996, 1007, 1030], "To": [4, 8, 16, 26, 27, 32, 46, 55, 57, 78, 80, 82, 86, 90, 100, 120, 123, 124, 132, 136, 147, 155, 156, 159, 162, 163, 167, 168, 174, 179, 182, 186, 198, 199, 200, 206, 216, 231, 232, 234, 239, 241, 249, 254, 256, 257, 259, 261, 262, 264, 266, 277, 297, 301, 306, 307, 308, 311, 312, 313, 314, 315, 316, 341, 345, 349, 355, 359, 360, 366, 367, 371, 373, 374, 375, 377, 378, 379, 381, 384, 386, 387, 390, 393, 395, 396, 399, 400, 401, 402, 403, 404, 406, 407, 435, 437, 438, 439, 450, 453, 456, 481, 485, 491, 492, 496, 497, 520, 526, 527, 528, 530, 532, 533, 534, 535, 546, 547, 548, 549, 553, 554, 558, 586, 616, 621, 635, 636, 641, 642, 645, 647, 648, 649, 650, 651, 652, 673, 689, 701, 716, 751, 773, 779, 788, 789, 810, 817, 859, 878, 879, 888, 889, 896, 897, 898, 899, 915, 925, 944, 963, 965, 966, 971, 972, 973, 974, 976, 977, 978, 979, 982, 983, 986, 990, 991, 992, 999, 1000, 1002, 1006, 1008, 1009, 1011, 1018, 1021, 1023, 1024, 1025, 1027, 1029], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 56, 96, 100, 123, 132, 144, 147, 150, 155, 156, 162, 168, 169, 170, 171, 191, 200, 213, 216, 219, 235, 257, 260, 261, 263, 267, 270, 277, 279, 284, 292, 302, 311, 320, 323, 328, 331, 333, 336, 341, 344, 346, 349, 360, 362, 366, 367, 368, 371, 373, 374, 375, 378, 379, 380, 381, 386, 389, 393, 395, 397, 399, 400, 401, 403, 404, 406, 407, 408, 409, 413, 414, 415, 420, 421, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 451, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 684, 688, 710, 711, 712, 714, 720, 721, 730, 744, 751, 752, 757, 773, 776, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 903, 916, 917, 918, 924, 925, 935, 965, 971, 972, 973, 975, 976, 986, 989, 990, 991, 992, 997, 999, 1006, 1009, 1010, 1011, 1015, 1018, 1021, 1024, 1026, 1029, 1031, 1032], "quick": [4, 100, 240, 373, 375, 379, 389, 595, 814, 976, 977, 986, 1000, 1009, 1015], "understand": [4, 9, 90, 155, 165, 169, 234, 254, 257, 313, 314, 328, 344, 348, 354, 355, 372, 373, 374, 379, 384, 388, 399, 406, 407, 493, 814, 845, 846, 896, 897, 898, 899, 902, 965, 966, 973, 975, 992, 995, 996, 1000, 1018, 1032], "pattern": [4, 16, 20, 63, 82, 94, 107, 150, 162, 165, 169, 182, 234, 314, 344, 345, 346, 355, 370, 373, 375, 387, 396, 399, 400, 404, 406, 407, 437, 453, 455, 493, 521, 523, 530, 544, 545, 627, 697, 713, 729, 757, 776, 777, 783, 868, 968, 970, 972, 976, 977, 983, 991, 993, 997, 1000, 1030], "let": [4, 5, 53, 55, 64, 71, 75, 95, 100, 109, 117, 120, 123, 124, 127, 150, 156, 157, 163, 168, 169, 170, 179, 187, 198, 200, 216, 219, 223, 234, 241, 254, 259, 262, 266, 344, 346, 353, 355, 368, 373, 375, 379, 384, 396, 399, 403, 406, 407, 489, 493, 499, 523, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 670, 673, 854, 861, 862, 972, 973, 974, 975, 976, 983, 984, 986, 991, 992, 1000, 1009, 1011, 1028], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 56, 95, 103, 120, 121, 150, 159, 167, 168, 169, 195, 199, 206, 216, 220, 223, 231, 234, 240, 241, 245, 246, 250, 254, 259, 262, 266, 305, 307, 344, 353, 360, 362, 368, 373, 377, 379, 381, 384, 389, 396, 399, 402, 404, 406, 407, 421, 452, 454, 471, 472, 473, 520, 526, 534, 535, 539, 541, 543, 545, 547, 549, 551, 554, 557, 559, 577, 578, 580, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 670, 673, 678, 682, 693, 709, 728, 743, 821, 822, 831, 839, 846, 868, 882, 889, 891, 894, 897, 899, 925, 970, 975, 976, 983, 986, 994, 1000, 1011, 1015, 1028], "look": [4, 5, 53, 55, 95, 98, 100, 123, 124, 150, 155, 156, 163, 168, 169, 200, 219, 223, 227, 234, 250, 254, 259, 261, 297, 344, 345, 355, 360, 361, 367, 368, 371, 373, 375, 377, 379, 381, 384, 385, 399, 402, 404, 405, 406, 407, 437, 477, 478, 546, 547, 548, 549, 553, 554, 591, 592, 620, 648, 681, 868, 896, 897, 898, 899, 972, 973, 986, 990, 991, 993, 1011, 1018, 1026, 1028], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 60, 62, 113, 114, 119, 123, 126, 131, 132, 133, 147, 155, 169, 179, 187, 198, 205, 216, 237, 262, 264, 267, 269, 277, 301, 311, 323, 344, 355, 359, 368, 370, 375, 396, 397, 401, 403, 407, 409, 410, 411, 426, 427, 430, 433, 434, 435, 436, 438, 479, 482, 483, 512, 520, 521, 522, 526, 527, 529, 530, 536, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 576, 621, 622, 637, 647, 648, 655, 656, 658, 661, 663, 665, 666, 667, 669, 676, 689, 692, 693, 695, 696, 697, 702, 709, 710, 711, 713, 714, 716, 717, 718, 722, 723, 724, 726, 727, 728, 731, 733, 734, 736, 738, 739, 741, 744, 752, 769, 770, 771, 772, 773, 775, 776, 781, 782, 783, 784, 812, 834, 854, 869, 962, 966, 971, 972, 977, 980, 982, 983, 990, 991, 992, 1009, 1011, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034], "per": [4, 10, 20, 48, 53, 64, 91, 115, 116, 120, 155, 157, 168, 169, 198, 213, 216, 241, 245, 255, 266, 268, 301, 307, 313, 339, 344, 346, 359, 368, 369, 373, 378, 379, 382, 384, 386, 397, 399, 403, 404, 405, 406, 407, 409, 435, 437, 439, 446, 450, 453, 457, 476, 489, 491, 492, 493, 497, 499, 501, 504, 512, 521, 523, 524, 525, 528, 530, 532, 538, 539, 550, 551, 558, 572, 577, 580, 599, 600, 621, 622, 630, 631, 647, 648, 655, 657, 660, 662, 663, 664, 665, 667, 681, 685, 702, 705, 709, 729, 742, 746, 747, 769, 771, 783, 784, 809, 816, 817, 818, 820, 821, 824, 826, 844, 847, 853, 855, 857, 858, 861, 862, 868, 869, 886, 888, 889, 890, 891, 892, 893, 894, 913, 914, 925, 951, 965, 968, 972, 975, 976, 977, 980, 983, 990, 991, 992, 996, 997, 1009, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1034], "hour": [4, 168, 169, 373, 379, 973, 995], "sundai": 4, "weekend": 4, "clearli": [4, 60, 98, 169, 232, 372, 373, 384, 386, 404, 406, 977, 983], "distinguish": [4, 20, 40, 80, 92, 100, 200, 256, 368, 375, 386, 387, 406, 409, 965, 976, 979, 982], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 75, 86, 98, 116, 123, 156, 168, 169, 170, 187, 198, 199, 206, 216, 223, 224, 233, 245, 265, 301, 303, 305, 306, 324, 344, 345, 346, 355, 361, 368, 372, 373, 374, 375, 377, 378, 381, 384, 386, 397, 398, 399, 400, 401, 403, 404, 406, 407, 409, 430, 432, 434, 435, 436, 437, 438, 448, 450, 521, 524, 546, 547, 548, 549, 553, 554, 571, 578, 583, 616, 617, 619, 628, 647, 648, 684, 689, 694, 701, 731, 749, 755, 762, 766, 769, 774, 776, 811, 848, 849, 880, 881, 896, 897, 898, 899, 925, 945, 965, 966, 968, 970, 972, 975, 976, 979, 981, 982, 984, 986, 988, 990, 991, 992, 1000, 1011, 1025, 1026, 1027, 1030, 1032], "leisur": 4, "spread": [4, 40, 221, 260, 301, 319, 320, 321, 324, 359, 373, 399, 441, 451, 504, 865, 877, 885, 976], "peak": [4, 27, 169, 397, 403, 1032], "middl": [4, 24, 60, 100, 110, 182, 340, 370, 983, 986], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 315, 316, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 367, 376, 380, 389, 392, 427, 491, 620, 621, 686, 687, 689, 690, 691, 791, 807, 902, 971, 996, 1005, 1007, 1008, 1009, 1015, 1027, 1030, 1031, 1032, 1033], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 315, 316, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 373, 380, 427, 491, 620, 621, 686, 687, 689, 690, 691, 791, 807, 1007, 1008, 1009, 1015, 1032], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 171, 174, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 315, 316, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 380, 427, 491, 620, 621, 686, 687, 689, 690, 691, 791, 807, 902, 983, 1007, 1008, 1009, 1015], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 55, 57, 60, 64, 66, 73, 78, 80, 86, 90, 95, 100, 101, 102, 106, 109, 115, 116, 117, 120, 123, 124, 127, 128, 130, 132, 153, 159, 162, 169, 171, 174, 178, 186, 189, 192, 193, 195, 196, 198, 199, 206, 211, 213, 216, 219, 220, 221, 222, 223, 224, 228, 230, 237, 238, 249, 254, 255, 256, 259, 260, 261, 262, 265, 268, 269, 270, 277, 279, 281, 283, 284, 292, 296, 297, 301, 302, 303, 305, 306, 307, 311, 315, 316, 328, 338, 339, 340, 341, 344, 345, 346, 349, 380, 1007], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 57, 64, 66, 72, 73, 75, 80, 82, 86, 90, 92, 95, 101, 102, 106, 109, 112, 115, 117, 120, 127, 128, 130, 131, 132, 153, 154, 159, 162, 167, 168, 169, 170, 171, 174, 177, 178, 181, 182, 187, 189, 190, 193, 195, 196, 198, 199, 200, 202, 203, 206, 207, 209, 211, 213, 216, 219, 220, 221, 222, 223, 224, 228, 233, 237, 238, 240, 244, 246, 249, 254, 255, 256, 259, 261, 262, 263, 265, 266, 268, 269, 270, 271, 273, 277, 279, 281, 282, 283, 284, 287, 289, 290, 295, 296, 297, 301, 303, 304, 305, 306, 307, 311, 312, 315, 316, 327, 328, 329, 332, 333, 338, 339, 340, 341, 344, 345, 346, 349, 350, 375, 376, 404, 409, 427, 523, 530, 539, 620, 621, 686, 687, 689, 690, 691, 707, 791, 807, 902, 976, 979, 983, 1015, 1028, 1034], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 57, 60, 62, 65, 66, 73, 75, 79, 80, 81, 82, 85, 86, 91, 92, 95, 96, 97, 98, 100, 105, 106, 110, 112, 113, 115, 116, 117, 119, 120, 124, 127, 128, 130, 131, 132, 142, 152, 154, 159, 162, 163, 168, 169, 171, 174, 178, 181, 189, 190, 192, 193, 196, 197, 198, 199, 200, 202, 206, 211, 214, 216, 219, 220, 223, 224, 227, 228, 230, 232, 233, 235, 236, 237, 238, 244, 245, 246, 247, 249, 250, 254, 255, 256, 259, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 277, 279, 281, 282, 283, 284, 287, 288, 290, 291, 292, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 311, 315, 316, 322, 324, 328, 329, 331, 338, 339, 340, 341, 344, 345, 346, 349, 350, 380, 1007], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 73, 75, 80, 82, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 105, 106, 110, 112, 113, 120, 121, 122, 123, 124, 128, 130, 131, 142, 152, 154, 158, 159, 162, 163, 168, 169, 171, 174, 177, 178, 181, 182, 188, 192, 195, 196, 197, 198, 199, 200, 202, 204, 206, 209, 212, 214, 216, 219, 220, 221, 223, 224, 227, 228, 230, 232, 235, 236, 237, 238, 244, 246, 247, 250, 254, 255, 256, 261, 262, 263, 266, 268, 269, 273, 277, 279, 281, 295, 296, 298, 301, 302, 303, 304, 305, 306, 307, 315, 316, 319, 321, 329, 331, 335, 336, 338, 339, 340, 341, 344, 345, 346, 902, 1007], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 70, 71, 72, 73, 74, 81, 82, 85, 86, 91, 92, 96, 97, 98, 99, 100, 101, 102, 104, 105, 109, 111, 113, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 136, 137, 143, 145, 150, 153, 155, 156, 158, 159, 162, 163, 168, 169, 171, 174, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 204, 205, 206, 208, 211, 212, 216, 219, 221, 227, 231, 232, 233, 234, 235, 236, 237, 239, 241, 244, 245, 246, 247, 249, 250, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 267, 268, 270, 271, 273, 277, 279, 281, 283, 284, 285, 286, 289, 295, 297, 298, 301, 302, 304, 305, 307, 311, 312, 314, 316, 319, 320, 321, 322, 323, 328, 330, 334, 335, 336, 339, 340, 341, 344, 345, 346, 353, 355, 360, 367, 368, 370, 371, 373, 378, 379, 382, 384, 385, 386, 389, 390, 391, 392, 397, 399, 400, 401, 403, 404, 406, 407, 408, 409, 411, 417, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 448, 449, 451, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 485, 493, 501, 502, 505, 506, 507, 517, 521, 522, 523, 524, 526, 527, 528, 529, 533, 535, 536, 538, 539, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 559, 566, 570, 571, 578, 579, 580, 582, 583, 592, 596, 597, 603, 606, 608, 611, 616, 617, 618, 619, 622, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 666, 668, 669, 673, 676, 678, 679, 681, 682, 687, 691, 695, 696, 704, 705, 714, 715, 722, 731, 732, 734, 735, 736, 737, 739, 740, 744, 756, 757, 769, 770, 776, 777, 780, 782, 783, 784, 785, 786, 787, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 812, 814, 817, 818, 819, 822, 823, 824, 825, 827, 836, 845, 846, 847, 853, 854, 855, 860, 861, 862, 863, 864, 866, 869, 872, 876, 882, 888, 889, 891, 892, 894, 896, 897, 898, 914, 922, 924, 925, 927, 929, 930, 940, 944, 947, 965, 966, 969, 970, 971, 972, 974, 976, 977, 978, 979, 986, 987, 990, 991, 994, 999, 1002, 1006, 1007, 1008, 1009, 1011, 1014, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1031, 1032, 1033], "average_week_demand": 4, "groupbi": [4, 73, 169, 206, 216], "weekdai": [4, 169], "count": [4, 14, 25, 27, 41, 49, 53, 70, 71, 92, 131, 132, 168, 169, 198, 200, 231, 241, 268, 279, 312, 313, 345, 346, 368, 370, 377, 382, 386, 387, 397, 398, 399, 404, 406, 407, 435, 438, 478, 525, 533, 570, 577, 578, 579, 580, 583, 593, 606, 629, 686, 694, 704, 707, 717, 718, 726, 742, 771, 772, 774, 775, 823, 827, 828, 829, 837, 840, 851, 900, 902, 927, 941, 965, 968, 972, 976, 978, 979, 986, 992, 1000, 1011, 1018, 1021, 1023, 1026, 1027, 1029, 1030], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 55, 68, 71, 79, 80, 81, 82, 86, 92, 95, 98, 99, 100, 102, 103, 112, 113, 116, 119, 120, 123, 124, 130, 131, 132, 137, 146, 147, 150, 155, 157, 159, 162, 165, 168, 169, 178, 180, 187, 189, 191, 194, 198, 200, 202, 204, 205, 207, 213, 214, 215, 216, 222, 224, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 244, 245, 246, 247, 249, 250, 255, 256, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 274, 277, 279, 290, 301, 304, 306, 307, 308, 311, 314, 322, 331, 334, 339, 341, 343, 344, 346, 347, 355, 359, 365, 367, 368, 370, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 386, 390, 396, 397, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 421, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 447, 448, 449, 450, 451, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 477, 490, 491, 493, 495, 501, 508, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 572, 577, 578, 579, 580, 583, 586, 591, 595, 596, 597, 598, 599, 600, 602, 611, 616, 617, 619, 621, 622, 623, 624, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 673, 677, 678, 679, 680, 681, 682, 683, 684, 693, 694, 696, 698, 701, 702, 705, 706, 712, 714, 717, 718, 719, 724, 725, 726, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 762, 766, 767, 769, 771, 772, 773, 775, 776, 778, 779, 781, 783, 784, 785, 788, 789, 791, 799, 803, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 834, 835, 836, 838, 839, 841, 842, 844, 845, 846, 847, 849, 850, 852, 853, 857, 858, 860, 864, 866, 868, 869, 874, 876, 877, 879, 881, 883, 884, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 904, 908, 909, 911, 950, 951, 957, 961, 965, 966, 967, 970, 972, 973, 975, 978, 979, 980, 981, 983, 984, 989, 990, 991, 992, 996, 1000, 1006, 1009, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 72, 73, 75, 79, 80, 81, 86, 88, 90, 93, 95, 98, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 117, 122, 123, 125, 127, 128, 129, 134, 137, 139, 142, 143, 145, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 165, 166, 167, 168, 170, 171, 172, 174, 176, 180, 181, 183, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 210, 211, 212, 213, 215, 216, 217, 221, 222, 223, 224, 226, 227, 230, 231, 233, 235, 236, 241, 242, 244, 245, 246, 248, 250, 252, 253, 254, 259, 260, 262, 264, 265, 269, 270, 271, 273, 275, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 295, 296, 297, 301, 302, 303, 304, 305, 306, 308, 312, 315, 316, 320, 321, 324, 326, 327, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 348, 349, 351, 352, 353, 354, 362, 373, 376, 382, 384, 388, 389, 394, 397, 399, 401, 403, 405, 406, 427, 430, 435, 439, 445, 453, 460, 485, 490, 491, 493, 501, 504, 508, 512, 513, 542, 546, 549, 551, 553, 554, 558, 559, 599, 611, 620, 621, 622, 646, 647, 661, 665, 686, 687, 689, 690, 691, 692, 707, 715, 738, 770, 772, 775, 776, 777, 791, 802, 807, 809, 810, 811, 812, 815, 826, 830, 846, 849, 861, 862, 865, 868, 888, 893, 896, 897, 902, 969, 970, 972, 973, 975, 976, 979, 980, 982, 990, 991, 992, 996, 997, 1006, 1007, 1009, 1013, 1019, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "_": [4, 5, 7, 8, 11, 12, 14, 20, 25, 26, 27, 32, 33, 40, 43, 50, 53, 55, 58, 63, 67, 70, 82, 92, 95, 100, 101, 103, 105, 113, 114, 115, 142, 150, 155, 156, 157, 167, 168, 169, 174, 177, 181, 182, 183, 185, 186, 187, 190, 195, 196, 198, 200, 211, 215, 220, 223, 228, 233, 241, 254, 259, 261, 262, 263, 265, 266, 268, 282, 287, 290, 298, 303, 306, 307, 308, 312, 315, 316, 320, 321, 339, 344, 346, 350, 375, 379, 386, 404, 406, 407, 435, 521, 522, 523, 524, 525, 527, 528, 529, 532, 536, 555, 586, 641, 642, 652, 673, 677, 678, 679, 680, 685, 687, 689, 752, 785, 791, 799, 807, 832, 840, 861, 862, 966, 972, 973, 976, 978, 979, 980, 983, 984, 986, 991, 992, 1009, 1025], "hourli": [4, 168], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 120, 121, 122, 152, 153, 154, 158, 181, 188, 194, 211, 227, 235, 245, 246, 247, 250, 258, 259, 273, 283, 292, 298, 307, 319, 331, 334, 335, 336, 337, 686, 1007], "24": [4, 5, 8, 66, 130, 134, 165, 169, 172, 182, 206, 217, 279, 310, 311, 317, 319, 320, 377, 389, 399, 406, 407, 426, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 449, 451, 453, 458, 459, 460, 461, 462, 463, 464, 465, 478, 479, 480, 481, 485, 493, 504, 505, 506, 507, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 533, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 602, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 687, 689, 691, 697, 703, 715, 734, 741, 783, 784, 785, 788, 789, 799, 806, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 849, 851, 852, 853, 854, 857, 858, 860, 862, 863, 864, 865, 866, 868, 878, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 919, 920, 951, 957, 965, 983, 986, 994, 1014, 1016, 1018, 1026, 1027, 1028, 1029, 1031], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 20, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 55, 60, 61, 63, 64, 65, 78, 79, 81, 82, 110, 112, 113, 114, 117, 123, 129, 142, 146, 151, 168, 169, 174, 182, 187, 188, 192, 196, 198, 199, 205, 206, 214, 216, 220, 222, 230, 231, 236, 244, 246, 249, 250, 254, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 277, 283, 289, 292, 298, 301, 306, 307, 311, 315, 316, 320, 331, 344, 345, 350, 353, 360, 367, 368, 370, 373, 375, 379, 382, 386, 393, 399, 403, 406, 409, 429, 450, 458, 460, 461, 462, 463, 464, 465, 467, 470, 480, 483, 484, 503, 516, 530, 542, 543, 548, 549, 552, 577, 578, 580, 618, 621, 627, 629, 637, 638, 658, 660, 665, 669, 681, 701, 719, 734, 776, 814, 820, 834, 836, 838, 839, 844, 858, 865, 866, 867, 873, 874, 877, 878, 881, 882, 924, 925, 944, 965, 972, 976, 980, 990, 997, 1000, 1005, 1006, 1007, 1009, 1023, 1024, 1025, 1026, 1028, 1031], "7": [4, 6, 8, 11, 12, 13, 14, 16, 19, 26, 30, 32, 33, 34, 39, 42, 44, 46, 53, 54, 55, 56, 60, 64, 65, 67, 71, 72, 74, 80, 82, 85, 98, 109, 110, 113, 119, 123, 125, 126, 130, 131, 159, 167, 168, 169, 171, 174, 179, 180, 197, 198, 199, 200, 212, 214, 216, 219, 221, 227, 232, 233, 239, 241, 244, 245, 248, 249, 254, 259, 263, 265, 266, 270, 272, 277, 279, 281, 284, 285, 287, 297, 298, 301, 305, 311, 314, 315, 316, 319, 320, 322, 323, 328, 330, 335, 339, 340, 345, 346, 355, 368, 370, 371, 373, 377, 378, 379, 389, 391, 392, 397, 403, 404, 406, 407, 408, 409, 428, 433, 437, 439, 440, 441, 442, 451, 460, 461, 480, 521, 522, 523, 524, 525, 527, 533, 550, 551, 577, 580, 589, 616, 617, 619, 636, 638, 647, 650, 681, 696, 710, 711, 712, 714, 716, 732, 733, 734, 738, 739, 741, 773, 780, 783, 786, 787, 792, 795, 802, 803, 806, 811, 814, 818, 828, 829, 837, 846, 847, 860, 861, 883, 884, 925, 928, 929, 940, 965, 966, 971, 972, 974, 976, 977, 979, 980, 982, 986, 990, 991, 994, 1002, 1006, 1009, 1014, 1016, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1031], "xticklabel": [4, 10, 120, 169, 307], "sun": [4, 169, 1026, 1031, 1032], "mon": [4, 169], "tue": [4, 169, 1024], "wed": [4, 169], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 55, 60, 78, 82, 98, 100, 113, 115, 116, 118, 120, 143, 150, 155, 156, 169, 182, 186, 187, 198, 200, 216, 227, 233, 238, 246, 257, 259, 264, 265, 266, 308, 311, 314, 349, 355, 359, 360, 368, 375, 379, 384, 386, 397, 399, 403, 404, 406, 407, 409, 410, 426, 428, 452, 504, 516, 542, 543, 544, 545, 546, 547, 552, 553, 554, 592, 595, 599, 611, 616, 621, 622, 632, 634, 647, 666, 694, 707, 713, 776, 781, 787, 792, 794, 806, 819, 822, 857, 888, 967, 968, 969, 970, 971, 972, 973, 976, 977, 982, 983, 984, 986, 988, 989, 990, 991, 997, 999, 1000, 1018, 1020, 1024, 1026, 1027, 1028, 1030, 1034], "fri": [4, 169, 368], "sat": [4, 169, 407], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 110, 111, 112, 114, 120, 121, 122, 123, 124, 125, 129, 133, 136, 137, 142, 143, 146, 150, 151, 152, 153, 155, 156, 157, 168, 177, 180, 181, 182, 183, 185, 186, 187, 188, 191, 192, 198, 200, 201, 202, 203, 205, 207, 208, 212, 216, 231, 233, 235, 254, 258, 259, 263, 264, 268, 269, 272, 273, 281, 282, 285, 286, 307, 328, 330, 331, 334, 344, 350, 351, 352, 620], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 110, 111, 112, 114, 121, 122, 123, 124, 125, 129, 133, 136, 137, 142, 143, 146, 150, 151, 152, 153, 155, 156, 157, 168, 177, 180, 181, 182, 183, 185, 186, 187, 188, 191, 192, 198, 200, 201, 202, 203, 205, 207, 208, 216, 231, 233, 235, 254, 258, 259, 262, 263, 264, 268, 269, 272, 273, 282, 328, 331, 334, 344, 350, 351, 352, 620], "number": [4, 5, 7, 8, 10, 12, 13, 19, 20, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 61, 62, 63, 67, 68, 70, 71, 72, 73, 75, 82, 85, 86, 91, 92, 95, 97, 99, 100, 103, 109, 110, 111, 113, 116, 118, 119, 121, 122, 123, 124, 126, 130, 132, 143, 144, 147, 158, 159, 163, 165, 168, 169, 174, 182, 187, 197, 198, 199, 200, 205, 206, 212, 213, 214, 215, 216, 219, 227, 231, 235, 238, 244, 245, 247, 249, 250, 253, 254, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 279, 281, 285, 286, 301, 303, 304, 307, 311, 312, 313, 314, 315, 316, 323, 331, 335, 336, 339, 345, 346, 349, 353, 355, 360, 361, 365, 367, 368, 369, 370, 371, 373, 376, 377, 379, 380, 381, 382, 384, 385, 386, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 421, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 570, 571, 572, 573, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 692, 693, 694, 696, 701, 702, 703, 705, 707, 709, 712, 716, 717, 718, 719, 722, 723, 726, 728, 740, 743, 762, 766, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 877, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 908, 909, 912, 924, 925, 928, 929, 944, 945, 947, 950, 951, 968, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 990, 991, 992, 993, 996, 997, 999, 1002, 1009, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "rental": [4, 169, 983], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 69, 74, 76, 86, 90, 99, 102, 104, 109, 111, 118, 119, 120, 123, 124, 127, 129, 130, 131, 133, 139, 142, 145, 147, 150, 152, 155, 156, 163, 165, 167, 168, 169, 170, 171, 177, 181, 182, 191, 194, 198, 200, 203, 206, 207, 220, 228, 230, 231, 232, 233, 236, 237, 238, 246, 253, 257, 260, 262, 264, 265, 268, 269, 279, 282, 287, 290, 291, 296, 300, 301, 309, 312, 313, 315, 319, 320, 323, 324, 327, 328, 331, 335, 337, 338, 344, 345, 350, 351, 352, 353, 355, 359, 361, 362, 365, 366, 367, 368, 369, 370, 375, 377, 378, 381, 382, 385, 388, 399, 403, 406, 409, 422, 426, 427, 428, 431, 434, 453, 454, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 497, 499, 509, 513, 520, 521, 523, 525, 526, 528, 531, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 562, 571, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 686, 687, 689, 690, 691, 696, 697, 698, 701, 702, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 723, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 770, 771, 772, 773, 775, 776, 777, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 835, 837, 838, 839, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 872, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 908, 938, 939, 940, 967, 968, 969, 972, 973, 976, 980, 983, 984, 990, 991, 992, 997, 999, 1000, 1002, 1007, 1009, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "absolut": [4, 75, 99, 120, 147, 168, 198, 200, 204, 216, 375, 399, 401, 403, 404, 406, 407, 408, 409, 410, 433, 439, 445, 446, 520, 526, 531, 534, 535, 537, 538, 539, 547, 549, 550, 551, 554, 577, 579, 580, 582, 586, 591, 608, 616, 621, 635, 638, 639, 641, 643, 645, 660, 661, 663, 665, 667, 671, 672, 693, 706, 710, 724, 725, 733, 734, 736, 741, 743, 745, 756, 781, 787, 791, 802, 805, 812, 814, 826, 828, 829, 833, 852, 857, 860, 873, 897, 899, 962, 972, 973, 986, 990, 992, 1009, 1010, 1019, 1024, 1029, 1030, 1031, 1032], "basi": [4, 6, 13, 100, 150, 155, 157, 199, 297, 314, 331, 365, 371, 374, 399, 404, 406, 441, 523, 611, 621, 628, 680, 867, 974, 986, 991, 998, 1006, 1007, 1010, 1013, 1026, 1028, 1031], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 58, 62, 67, 72, 77, 82, 83, 90, 95, 98, 106, 110, 112, 119, 128, 136, 138, 139, 142, 143, 152, 154, 155, 163, 165, 168, 180, 185, 186, 187, 191, 193, 200, 201, 204, 212, 214, 216, 222, 231, 235, 257, 258, 259, 270, 272, 277, 279, 281, 285, 286, 292, 295, 297, 301, 303, 304, 306, 314, 322, 324, 330, 337, 340, 359, 399, 401, 404, 458, 459, 460, 461, 462, 463, 464, 465, 466, 501, 525, 544, 545, 546, 547, 548, 549, 552, 553, 554, 595, 616, 620, 621, 637, 638, 658, 661, 663, 669, 680, 681, 685, 693, 694, 729, 745, 778, 779, 785, 845, 846, 857, 858, 860, 867, 874, 875, 896, 897, 898, 899, 944, 972, 974, 979, 986, 990, 991, 1009, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "977": [4, 403], "rescal": [4, 46, 47, 55, 100, 179, 186, 222, 301, 341, 401, 411, 458, 459, 460, 461, 462, 463, 464, 465, 522, 527, 635, 638, 641, 860, 866, 890, 891, 892, 893, 894, 976, 986, 1010, 1022, 1023], "variabl": [4, 9, 11, 12, 16, 37, 70, 113, 117, 120, 123, 124, 138, 139, 142, 147, 157, 158, 162, 163, 169, 170, 174, 182, 187, 198, 202, 203, 216, 221, 250, 259, 262, 269, 306, 307, 308, 355, 359, 361, 368, 370, 371, 373, 375, 377, 378, 381, 386, 399, 400, 401, 402, 404, 406, 407, 408, 439, 471, 472, 473, 476, 488, 490, 497, 504, 521, 523, 525, 530, 533, 542, 548, 549, 593, 595, 596, 597, 629, 639, 640, 643, 644, 650, 671, 672, 684, 698, 735, 786, 787, 790, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 813, 816, 820, 821, 851, 862, 865, 869, 877, 889, 965, 966, 968, 972, 975, 976, 977, 978, 979, 981, 983, 984, 986, 990, 992, 996, 997, 999, 1002, 1003, 1005, 1007, 1018, 1023, 1026, 1028, 1031, 1033], "rel": [4, 6, 8, 17, 20, 27, 55, 61, 100, 117, 155, 174, 178, 198, 216, 247, 285, 286, 302, 308, 312, 315, 331, 344, 345, 368, 372, 375, 381, 386, 397, 399, 403, 406, 407, 409, 429, 432, 436, 438, 448, 510, 513, 520, 523, 526, 530, 546, 547, 548, 549, 553, 554, 555, 593, 638, 647, 648, 660, 661, 663, 679, 683, 717, 735, 785, 788, 789, 791, 799, 807, 812, 815, 828, 829, 833, 845, 846, 857, 858, 868, 884, 888, 889, 890, 893, 895, 896, 897, 898, 899, 972, 973, 976, 978, 979, 980, 982, 999, 1007], "so": [4, 9, 12, 16, 17, 42, 48, 55, 56, 61, 65, 81, 116, 119, 122, 129, 150, 155, 168, 170, 174, 178, 198, 199, 227, 234, 259, 279, 285, 286, 289, 296, 297, 302, 307, 308, 312, 322, 331, 339, 344, 346, 353, 355, 359, 360, 361, 367, 368, 372, 373, 375, 377, 378, 379, 381, 382, 386, 390, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 485, 497, 498, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 684, 694, 697, 705, 714, 729, 744, 776, 783, 784, 785, 788, 789, 791, 792, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 878, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 925, 942, 951, 965, 966, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 986, 988, 989, 990, 991, 997, 1000, 1009, 1010, 1011, 1018, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034], "error": [4, 5, 7, 13, 17, 27, 75, 78, 79, 81, 99, 105, 108, 109, 110, 113, 116, 117, 120, 124, 134, 150, 162, 165, 168, 182, 187, 194, 198, 200, 202, 204, 205, 212, 216, 230, 233, 234, 250, 252, 255, 259, 260, 264, 273, 275, 285, 286, 315, 330, 339, 344, 345, 370, 371, 373, 375, 376, 377, 378, 382, 384, 386, 390, 393, 397, 398, 399, 400, 401, 403, 404, 406, 407, 408, 409, 426, 432, 433, 436, 438, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 485, 492, 504, 513, 520, 522, 523, 526, 527, 531, 532, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 570, 571, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 595, 599, 600, 618, 621, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 677, 678, 679, 681, 682, 685, 687, 690, 691, 698, 701, 709, 710, 711, 715, 728, 731, 732, 733, 734, 735, 736, 738, 739, 741, 744, 752, 766, 770, 776, 777, 785, 786, 787, 788, 789, 791, 792, 794, 799, 803, 807, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 838, 839, 840, 843, 845, 846, 848, 849, 851, 853, 854, 855, 860, 861, 862, 867, 868, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 906, 907, 908, 909, 912, 939, 960, 963, 965, 966, 967, 969, 970, 971, 973, 977, 980, 984, 986, 990, 991, 992, 998, 1009, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "easili": [4, 9, 31, 144, 171, 201, 214, 232, 234, 238, 241, 259, 261, 268, 284, 303, 373, 375, 386, 387, 400, 406, 407, 409, 438, 970, 972, 973, 986, 990, 991, 992, 1003, 1006, 1011, 1024], "interpret": [4, 27, 147, 157, 165, 166, 167, 169, 172, 198, 199, 214, 216, 253, 259, 261, 262, 298, 302, 305, 313, 344, 346, 359, 371, 373, 374, 379, 381, 382, 386, 388, 397, 399, 400, 405, 407, 441, 453, 454, 456, 485, 530, 561, 600, 628, 632, 642, 661, 662, 680, 681, 684, 690, 717, 741, 746, 747, 771, 778, 779, 791, 800, 811, 812, 814, 817, 849, 861, 868, 944, 970, 972, 976, 977, 983, 986, 992, 996, 1002, 1010, 1018, 1019, 1023, 1026, 1031, 1032, 1033], "fraction": [4, 25, 27, 121, 123, 198, 206, 216, 339, 345, 397, 403, 406, 427, 428, 438, 439, 445, 446, 504, 516, 546, 547, 548, 549, 553, 554, 555, 579, 582, 591, 655, 656, 657, 660, 665, 666, 667, 692, 710, 711, 712, 722, 780, 782, 787, 791, 812, 813, 827, 855, 890, 891, 892, 896, 897, 898, 899, 942, 972, 976, 979, 983, 984, 986, 991, 992, 997, 1019, 1020, 1021, 1032], "maximum": [4, 8, 11, 27, 33, 37, 57, 78, 79, 80, 81, 82, 97, 115, 116, 119, 121, 151, 157, 165, 176, 186, 217, 269, 281, 285, 286, 292, 301, 326, 342, 345, 349, 351, 352, 359, 378, 379, 385, 386, 396, 397, 399, 401, 402, 404, 406, 407, 409, 410, 411, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 443, 446, 448, 450, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 487, 498, 500, 501, 502, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 572, 573, 586, 599, 616, 620, 621, 624, 626, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 663, 665, 666, 667, 668, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 705, 732, 769, 783, 785, 788, 789, 791, 799, 806, 812, 837, 844, 845, 846, 852, 853, 857, 858, 860, 863, 864, 865, 867, 876, 877, 882, 883, 884, 885, 888, 889, 893, 896, 897, 898, 899, 900, 902, 905, 912, 965, 971, 972, 973, 975, 976, 978, 979, 980, 982, 986, 990, 991, 992, 1010, 1025, 1026, 1028, 1029, 1032, 1033], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 139, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 174, 176, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 222, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341, 344, 345, 349, 350, 351, 352, 353, 359, 361, 362, 365, 368, 370, 373, 376, 378, 379, 382, 384, 386, 393, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 415, 417, 421, 422, 423, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 490, 498, 499, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 566, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 683, 686, 687, 689, 690, 691, 700, 711, 723, 738, 776, 783, 784, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 917, 936, 960, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 996, 997, 998, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 56, 57, 58, 61, 65, 68, 69, 76, 79, 80, 84, 87, 95, 98, 100, 104, 105, 106, 115, 117, 118, 124, 130, 142, 147, 162, 174, 185, 187, 199, 206, 215, 218, 220, 225, 227, 233, 234, 241, 243, 251, 261, 266, 268, 279, 285, 286, 288, 301, 305, 308, 311, 313, 314, 344, 345, 346, 353, 355, 359, 360, 361, 362, 365, 370, 371, 373, 374, 375, 379, 380, 382, 384, 385, 388, 390, 393, 395, 396, 397, 400, 401, 402, 403, 404, 405, 407, 408, 409, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 448, 451, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 493, 501, 503, 511, 514, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 699, 700, 719, 720, 723, 724, 729, 730, 751, 756, 757, 762, 766, 771, 776, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 876, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 903, 911, 925, 932, 934, 935, 936, 937, 942, 945, 960, 961, 964, 965, 966, 970, 971, 972, 973, 976, 977, 978, 979, 980, 981, 984, 986, 988, 989, 990, 991, 992, 993, 996, 998, 1000, 1002, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "minim": [4, 12, 57, 66, 78, 79, 123, 150, 158, 177, 194, 196, 198, 200, 206, 216, 219, 230, 231, 244, 249, 260, 268, 269, 301, 311, 314, 328, 339, 349, 362, 372, 373, 376, 381, 384, 386, 397, 399, 401, 404, 406, 429, 430, 434, 435, 439, 452, 527, 529, 536, 546, 547, 548, 549, 553, 554, 598, 599, 600, 630, 635, 638, 646, 647, 656, 660, 661, 663, 667, 668, 676, 681, 683, 684, 736, 768, 835, 837, 846, 864, 876, 882, 896, 897, 898, 899, 967, 972, 973, 976, 979, 980, 986, 988, 989, 990, 991, 996, 998, 1009, 1010, 1013, 1022, 1027, 1028], "squar": [4, 5, 61, 71, 79, 80, 81, 84, 87, 96, 106, 113, 124, 126, 147, 150, 155, 165, 168, 176, 177, 179, 182, 187, 194, 198, 200, 202, 203, 208, 215, 216, 217, 230, 231, 233, 247, 268, 269, 273, 305, 313, 314, 316, 328, 344, 365, 370, 373, 379, 382, 386, 399, 401, 402, 404, 405, 406, 410, 411, 421, 429, 431, 432, 433, 435, 436, 438, 439, 446, 448, 449, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 490, 520, 526, 528, 530, 532, 536, 538, 541, 543, 545, 547, 548, 549, 551, 554, 557, 559, 579, 580, 581, 584, 585, 587, 588, 589, 593, 594, 595, 598, 600, 604, 611, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 671, 672, 675, 676, 677, 679, 681, 683, 685, 698, 710, 711, 712, 738, 739, 746, 747, 751, 757, 758, 773, 814, 821, 822, 830, 831, 834, 836, 838, 839, 846, 849, 868, 888, 889, 891, 893, 894, 895, 897, 899, 923, 949, 962, 967, 969, 970, 979, 980, 984, 990, 992, 998, 1009, 1010, 1013, 1018, 1021, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 58, 61, 63, 71, 72, 74, 83, 85, 86, 95, 96, 97, 103, 105, 108, 109, 110, 115, 116, 117, 119, 121, 123, 127, 130, 131, 132, 133, 134, 136, 137, 145, 146, 147, 149, 150, 155, 157, 160, 161, 162, 164, 167, 168, 176, 179, 182, 186, 187, 193, 198, 200, 202, 203, 205, 206, 215, 216, 217, 226, 227, 228, 233, 239, 241, 242, 243, 244, 246, 247, 249, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 275, 279, 280, 286, 293, 301, 303, 314, 315, 334, 339, 345, 346, 350, 359, 360, 361, 362, 365, 371, 373, 376, 377, 380, 381, 382, 383, 389, 390, 393, 394, 397, 399, 402, 404, 407, 408, 410, 411, 412, 413, 414, 417, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 450, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 484, 485, 487, 490, 491, 513, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 565, 566, 568, 569, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 676, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 696, 697, 700, 701, 702, 705, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 770, 771, 772, 773, 775, 776, 777, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 797, 799, 803, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 876, 877, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 907, 908, 909, 911, 913, 914, 917, 919, 920, 921, 932, 934, 936, 960, 964, 971, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 997, 998, 1000, 1002, 1003, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "condit": [4, 12, 25, 27, 82, 118, 123, 165, 166, 168, 172, 187, 200, 203, 216, 234, 262, 314, 353, 379, 384, 388, 396, 397, 399, 401, 404, 406, 408, 440, 453, 460, 461, 462, 467, 485, 502, 512, 513, 525, 528, 529, 530, 532, 534, 536, 538, 539, 551, 616, 621, 622, 632, 639, 640, 641, 643, 644, 645, 659, 661, 662, 663, 664, 671, 672, 676, 686, 701, 706, 707, 724, 725, 781, 823, 824, 825, 826, 827, 846, 849, 852, 861, 862, 865, 869, 925, 970, 972, 973, 974, 976, 978, 979, 981, 986, 992, 996, 1009, 1013, 1019, 1021, 1022, 1023, 1025, 1026, 1028, 1030, 1032, 1033, 1034], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 66, 68, 70, 71, 72, 73, 75, 78, 79, 80, 81, 89, 95, 96, 97, 98, 99, 100, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 133, 137, 138, 139, 143, 147, 150, 151, 152, 155, 156, 157, 159, 161, 162, 164, 165, 167, 168, 169, 170, 174, 176, 177, 178, 181, 182, 186, 193, 198, 199, 200, 203, 205, 206, 212, 214, 215, 216, 217, 219, 220, 221, 222, 224, 227, 228, 230, 231, 232, 233, 234, 235, 241, 244, 245, 249, 250, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 272, 274, 277, 279, 282, 285, 286, 287, 290, 292, 301, 306, 307, 308, 312, 313, 314, 316, 320, 324, 327, 328, 330, 331, 333, 334, 344, 345, 346, 349, 352, 353, 355, 359, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 420, 422, 423, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 564, 565, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 599, 600, 601, 608, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 693, 694, 695, 698, 700, 701, 707, 709, 710, 715, 717, 718, 722, 723, 725, 730, 731, 733, 734, 736, 738, 739, 741, 744, 746, 747, 751, 752, 754, 755, 756, 757, 758, 761, 763, 764, 765, 766, 769, 770, 771, 772, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 797, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 905, 906, 908, 909, 911, 912, 915, 919, 920, 921, 923, 924, 925, 927, 929, 933, 934, 935, 936, 937, 939, 940, 941, 944, 946, 947, 950, 951, 957, 960, 962, 963, 964, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 1000, 1003, 1005, 1006, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "median": [4, 37, 71, 75, 80, 81, 123, 162, 163, 168, 200, 204, 215, 229, 301, 312, 314, 315, 368, 401, 406, 408, 429, 443, 447, 450, 463, 541, 543, 547, 554, 586, 616, 619, 624, 659, 660, 668, 710, 741, 835, 866, 878, 897, 899, 966, 986, 992, 1021, 1022], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 58, 60, 61, 96, 113, 114, 123, 126, 133, 147, 150, 155, 165, 167, 168, 169, 174, 187, 192, 197, 198, 204, 216, 252, 257, 259, 265, 266, 272, 275, 306, 344, 345, 359, 368, 370, 375, 379, 386, 396, 398, 401, 403, 404, 405, 406, 407, 438, 441, 451, 487, 504, 527, 529, 536, 540, 546, 547, 548, 549, 552, 553, 554, 593, 596, 597, 600, 616, 620, 647, 679, 681, 687, 691, 693, 694, 696, 698, 701, 702, 705, 706, 709, 713, 714, 715, 717, 719, 724, 725, 727, 728, 731, 735, 743, 744, 745, 770, 771, 772, 774, 775, 777, 778, 781, 809, 811, 814, 834, 865, 877, 896, 897, 898, 899, 966, 972, 974, 979, 981, 982, 984, 990, 992, 1006, 1009, 1018, 1021, 1023, 1024, 1026, 1028], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 70, 71, 85, 100, 109, 110, 113, 115, 116, 117, 118, 121, 122, 123, 124, 125, 136, 139, 141, 143, 146, 148, 150, 151, 165, 167, 168, 169, 170, 171, 174, 182, 187, 193, 194, 198, 199, 200, 205, 206, 213, 214, 216, 223, 228, 233, 234, 236, 246, 252, 253, 254, 257, 258, 259, 260, 261, 263, 264, 266, 267, 269, 270, 271, 275, 277, 287, 288, 295, 297, 303, 306, 307, 308, 323, 331, 339, 346, 355, 359, 360, 367, 368, 370, 376, 377, 378, 379, 384, 385, 386, 388, 389, 392, 394, 395, 397, 400, 401, 404, 406, 407, 408, 409, 416, 418, 421, 424, 425, 426, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 477, 478, 482, 486, 487, 491, 493, 513, 520, 526, 528, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 581, 583, 584, 585, 587, 588, 589, 591, 593, 594, 595, 597, 598, 599, 600, 616, 617, 619, 624, 625, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 701, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 835, 838, 839, 845, 846, 848, 873, 874, 876, 877, 878, 879, 883, 884, 886, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 917, 919, 920, 971, 972, 975, 976, 979, 980, 984, 986, 990, 991, 992, 996, 997, 999, 1000, 1003, 1006, 1007, 1013, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "discuss": [4, 53, 58, 168, 187, 219, 224, 262, 344, 355, 361, 368, 370, 373, 378, 379, 381, 384, 386, 387, 399, 401, 405, 406, 409, 487, 671, 672, 830, 831, 836, 838, 839, 966, 970, 972, 973, 976, 979, 986, 993, 997, 1021], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 60, 62, 66, 78, 101, 102, 119, 130, 136, 137, 147, 168, 171, 191, 235, 237, 254, 264, 271, 349, 355, 359, 360, 361, 362, 375, 378, 381, 386, 399, 401, 403, 406, 407, 409, 410, 432, 433, 436, 438, 448, 512, 521, 527, 548, 549, 571, 591, 647, 648, 661, 663, 668, 676, 677, 678, 682, 714, 744, 785, 788, 789, 799, 855, 888, 889, 896, 897, 898, 899, 966, 967, 971, 972, 973, 974, 975, 979, 986, 989, 990, 991, 1003, 1005, 1009, 1010, 1020, 1021, 1025, 1027, 1029], "focu": [4, 9, 27, 95, 150, 250, 289, 359, 378, 397, 406, 542, 543, 548, 550, 551, 667, 973, 979, 986, 996, 997], "intuit": [4, 31, 44, 52, 62, 100, 113, 120, 142, 150, 168, 169, 199, 200, 221, 227, 260, 284, 303, 306, 328, 331, 345, 373, 386, 397, 399, 401, 403, 405, 770, 771, 772, 775, 859, 968, 972, 973, 976, 977, 983, 986, 987, 991, 1000, 1009, 1011, 1018], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 55, 72, 75, 80, 82, 86, 92, 95, 98, 100, 103, 109, 110, 112, 113, 115, 116, 117, 119, 120, 123, 147, 150, 156, 159, 162, 168, 169, 170, 174, 177, 182, 184, 187, 198, 200, 204, 214, 215, 216, 223, 227, 233, 234, 235, 245, 256, 257, 259, 260, 261, 262, 265, 268, 277, 279, 285, 286, 298, 301, 305, 306, 307, 313, 315, 320, 344, 345, 346, 355, 359, 360, 361, 367, 368, 369, 372, 373, 375, 378, 379, 381, 386, 387, 393, 396, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 443, 446, 449, 452, 453, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 482, 483, 485, 498, 503, 504, 512, 520, 523, 524, 525, 526, 527, 529, 530, 531, 533, 536, 537, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 570, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 616, 617, 619, 623, 629, 631, 632, 633, 634, 635, 636, 641, 642, 644, 647, 648, 649, 650, 651, 652, 655, 656, 657, 660, 661, 663, 665, 666, 667, 668, 671, 676, 681, 683, 685, 693, 694, 701, 709, 710, 711, 712, 723, 724, 727, 752, 767, 768, 769, 771, 773, 781, 783, 784, 785, 788, 789, 795, 799, 804, 806, 809, 810, 811, 812, 813, 816, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 842, 845, 846, 851, 861, 862, 863, 865, 866, 868, 871, 877, 878, 882, 885, 888, 889, 890, 893, 894, 896, 897, 898, 899, 900, 914, 925, 927, 928, 939, 945, 947, 950, 965, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 990, 991, 992, 996, 997, 1002, 1006, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "root": [4, 16, 80, 147, 179, 353, 370, 373, 381, 399, 431, 490, 530, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 628, 739, 896, 897, 898, 899, 900, 902, 982, 992, 1020, 1026, 1027, 1028, 1029, 1032, 1033], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 58, 60, 64, 68, 70, 75, 82, 109, 110, 115, 122, 124, 125, 130, 144, 151, 162, 165, 167, 168, 170, 182, 187, 193, 194, 198, 200, 202, 204, 216, 222, 228, 231, 232, 237, 240, 252, 253, 255, 256, 257, 259, 260, 262, 266, 268, 269, 275, 277, 279, 281, 289, 292, 298, 301, 306, 311, 312, 314, 315, 316, 319, 320, 322, 323, 344, 345, 355, 359, 362, 365, 368, 373, 375, 384, 385, 386, 388, 390, 394, 397, 404, 405, 406, 409, 410, 416, 426, 430, 433, 434, 435, 439, 446, 458, 509, 524, 538, 539, 540, 542, 544, 546, 547, 548, 550, 551, 553, 554, 556, 558, 567, 591, 599, 609, 617, 623, 627, 628, 629, 630, 631, 632, 647, 648, 652, 655, 657, 663, 664, 665, 677, 679, 681, 683, 685, 785, 788, 789, 791, 799, 807, 809, 810, 811, 813, 816, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 854, 860, 883, 884, 888, 890, 893, 896, 898, 966, 968, 971, 977, 982, 984, 996, 997, 1006, 1007, 1011, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "studi": [4, 60, 123, 198, 216, 262, 265, 266, 344, 368, 370, 403, 408, 685, 697, 746, 747, 813, 974, 976, 990, 1002], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 56, 57, 60, 61, 62, 65, 66, 71, 72, 73, 74, 75, 81, 85, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 216, 219, 220, 221, 224, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 244, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 349, 350, 351, 352, 353, 355, 365, 366, 367, 368, 371, 373, 375, 378, 380, 382, 385, 386, 390, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 412, 416, 417, 418, 421, 422, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 487, 489, 491, 494, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 515, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 686, 687, 689, 690, 691, 695, 700, 714, 723, 729, 730, 744, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 776, 777, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 908, 913, 914, 936, 938, 939, 940, 947, 950, 963, 965, 966, 967, 968, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 983, 986, 990, 991, 992, 997, 1002, 1006, 1007, 1009, 1013, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "hist": [4, 25, 27, 53, 75, 112, 116, 198, 200, 231, 265, 284, 301, 305, 307, 315], "bin": [4, 24, 25, 27, 53, 75, 112, 116, 198, 231, 265, 284, 301, 302, 303, 304, 305, 307, 308, 371, 381, 389, 397, 405, 406, 427, 428, 437, 450, 550, 551, 851, 853, 867, 927, 1010, 1026, 1027, 1028, 1032], "30": [4, 8, 10, 14, 19, 34, 39, 40, 54, 60, 71, 73, 78, 101, 103, 119, 123, 129, 136, 150, 151, 154, 156, 169, 174, 177, 192, 196, 198, 216, 219, 220, 224, 232, 236, 248, 259, 260, 264, 273, 279, 288, 289, 305, 306, 307, 316, 319, 320, 324, 329, 332, 334, 337, 359, 368, 370, 378, 379, 403, 407, 410, 433, 439, 446, 489, 524, 527, 528, 530, 532, 559, 581, 584, 585, 587, 637, 681, 723, 771, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 869, 884, 897, 965, 970, 976, 977, 979, 984, 1007, 1018, 1019, 1025, 1026, 1027], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 73, 95, 99, 109, 119, 123, 124, 156, 157, 158, 168, 174, 177, 198, 201, 202, 206, 213, 216, 230, 231, 233, 234, 241, 254, 283, 284, 297, 302, 303, 304, 305, 311, 314, 316, 331, 337, 340, 346, 367, 370, 373, 376, 378, 382, 383, 384, 385, 386, 396, 397, 400, 403, 404, 405, 406, 407, 408, 409, 411, 417, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 434, 437, 438, 439, 443, 446, 447, 450, 453, 454, 456, 457, 458, 460, 461, 471, 472, 473, 478, 492, 498, 505, 506, 507, 509, 513, 517, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 600, 609, 611, 616, 617, 618, 619, 620, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 689, 690, 691, 710, 711, 712, 716, 733, 734, 736, 738, 739, 741, 742, 749, 755, 756, 759, 760, 762, 766, 767, 768, 769, 773, 783, 784, 785, 788, 789, 791, 799, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 834, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 905, 906, 907, 908, 909, 910, 914, 919, 924, 935, 936, 940, 949, 951, 957, 962, 963, 966, 968, 970, 972, 973, 974, 975, 976, 978, 979, 980, 981, 983, 984, 988, 989, 990, 991, 992, 996, 997, 1000, 1002, 1006, 1007, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "annot": [4, 9, 26, 132, 174, 220, 263, 266, 344, 373, 374, 375, 399, 705, 902, 976, 992, 1027], "log": [4, 20, 25, 26, 27, 78, 95, 123, 130, 143, 147, 151, 152, 154, 155, 156, 159, 183, 186, 187, 191, 198, 202, 203, 208, 216, 231, 233, 248, 289, 306, 344, 368, 370, 371, 373, 377, 381, 382, 386, 396, 397, 399, 400, 401, 404, 406, 407, 409, 437, 440, 449, 454, 459, 460, 461, 462, 463, 464, 465, 521, 525, 530, 538, 539, 540, 542, 544, 546, 548, 551, 553, 579, 580, 582, 583, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 631, 634, 637, 647, 648, 658, 660, 665, 669, 729, 739, 743, 783, 784, 785, 788, 789, 799, 823, 824, 825, 826, 827, 828, 829, 833, 844, 845, 852, 853, 882, 885, 890, 893, 895, 896, 898, 923, 965, 968, 970, 972, 973, 978, 979, 981, 984, 986, 990, 992, 996, 997, 1009, 1020, 1021, 1022, 1027, 1028, 1029, 1032], "describ": [4, 56, 130, 168, 216, 232, 259, 268, 355, 359, 360, 366, 368, 370, 372, 373, 375, 378, 381, 386, 387, 396, 399, 401, 402, 403, 404, 406, 407, 451, 458, 462, 463, 480, 482, 484, 485, 486, 489, 490, 491, 492, 493, 494, 499, 505, 506, 507, 517, 596, 597, 634, 648, 703, 783, 784, 823, 825, 863, 925, 965, 968, 971, 972, 975, 976, 978, 982, 990, 991, 992, 999, 1002, 1008, 1009, 1026, 1028], "weather": [4, 155, 169, 409, 972, 976], "includ": [4, 32, 55, 80, 116, 120, 122, 167, 168, 170, 182, 198, 216, 234, 260, 279, 296, 301, 314, 315, 331, 336, 344, 346, 355, 359, 360, 367, 369, 371, 373, 374, 375, 377, 378, 379, 381, 382, 386, 387, 389, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 433, 435, 439, 445, 455, 458, 459, 460, 461, 462, 463, 464, 465, 478, 479, 480, 485, 489, 490, 491, 493, 494, 499, 523, 530, 546, 553, 563, 621, 627, 635, 636, 641, 649, 650, 651, 654, 670, 677, 678, 686, 702, 717, 718, 723, 725, 726, 759, 771, 772, 775, 781, 785, 787, 788, 789, 798, 799, 802, 805, 811, 814, 836, 838, 839, 840, 861, 862, 863, 867, 885, 896, 898, 900, 902, 908, 909, 912, 914, 917, 936, 965, 972, 975, 976, 977, 979, 980, 986, 990, 991, 992, 996, 997, 999, 1000, 1009, 1011, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "both": [4, 5, 7, 9, 10, 14, 16, 20, 25, 26, 42, 54, 55, 64, 71, 78, 80, 85, 86, 100, 103, 109, 113, 116, 117, 120, 129, 130, 133, 142, 143, 147, 150, 157, 159, 167, 168, 169, 170, 177, 182, 184, 186, 187, 198, 199, 200, 203, 204, 206, 216, 223, 233, 234, 235, 244, 245, 246, 247, 248, 249, 259, 260, 261, 262, 266, 268, 270, 274, 279, 291, 301, 305, 306, 311, 313, 321, 322, 328, 333, 339, 344, 345, 346, 353, 355, 359, 360, 361, 366, 367, 368, 369, 371, 373, 375, 379, 380, 382, 384, 385, 386, 387, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 412, 426, 435, 436, 441, 448, 451, 457, 464, 471, 472, 473, 474, 477, 478, 485, 486, 489, 491, 494, 496, 497, 498, 523, 527, 529, 536, 540, 544, 545, 546, 552, 553, 554, 555, 556, 566, 577, 578, 580, 586, 596, 597, 616, 621, 622, 632, 646, 647, 648, 661, 663, 665, 667, 676, 693, 701, 705, 719, 724, 745, 749, 755, 762, 766, 771, 776, 777, 781, 788, 789, 791, 807, 817, 845, 846, 860, 862, 864, 876, 881, 886, 888, 889, 896, 898, 912, 926, 939, 951, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 989, 990, 991, 992, 996, 997, 999, 1000, 1006, 1009, 1010, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "numer": [4, 19, 66, 71, 75, 116, 118, 120, 130, 147, 155, 158, 169, 170, 187, 198, 216, 239, 241, 289, 307, 314, 346, 367, 368, 370, 376, 378, 379, 384, 385, 386, 399, 401, 406, 407, 408, 409, 411, 412, 429, 432, 436, 448, 460, 461, 464, 467, 478, 479, 480, 485, 489, 490, 491, 493, 494, 499, 520, 522, 524, 529, 536, 556, 570, 579, 600, 606, 609, 616, 619, 621, 622, 635, 641, 643, 661, 676, 679, 683, 703, 776, 780, 785, 788, 789, 791, 799, 807, 810, 811, 812, 815, 823, 824, 825, 826, 827, 845, 846, 851, 856, 861, 862, 869, 900, 901, 902, 908, 909, 924, 925, 965, 966, 972, 973, 977, 984, 986, 987, 992, 999, 1000, 1002, 1011, 1018, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "categor": [4, 71, 108, 115, 130, 134, 165, 168, 169, 170, 198, 216, 239, 241, 308, 314, 316, 361, 365, 367, 368, 375, 378, 386, 400, 407, 455, 456, 478, 479, 485, 494, 550, 551, 570, 571, 596, 597, 621, 622, 637, 647, 648, 658, 669, 698, 811, 823, 824, 825, 826, 827, 849, 851, 855, 856, 859, 861, 862, 869, 883, 884, 966, 972, 983, 984, 992, 996, 997, 998, 999, 1000, 1011, 1013, 1018, 1019, 1022, 1023, 1026, 1028, 1030, 1033, 1034], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 58, 66, 67, 70, 71, 86, 89, 90, 91, 102, 116, 117, 118, 141, 143, 144, 146, 147, 148, 150, 155, 165, 168, 169, 171, 174, 176, 177, 178, 182, 199, 213, 215, 216, 217, 234, 238, 246, 247, 249, 254, 256, 259, 260, 261, 264, 266, 268, 285, 286, 289, 308, 314, 334, 339, 344, 345, 346, 350, 353, 355, 359, 362, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 379, 381, 384, 385, 386, 387, 393, 396, 403, 404, 406, 407, 408, 409, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 451, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 481, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 499, 504, 513, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 596, 597, 598, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 684, 686, 690, 693, 694, 704, 714, 718, 731, 743, 744, 745, 774, 776, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 933, 966, 968, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 986, 987, 990, 992, 997, 1000, 1008, 1009, 1010, 1011, 1018, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "alreadi": [4, 6, 10, 16, 55, 58, 100, 130, 147, 168, 228, 235, 240, 260, 266, 279, 314, 373, 374, 378, 384, 386, 397, 401, 403, 405, 406, 411, 426, 488, 512, 522, 556, 557, 623, 635, 638, 653, 654, 655, 656, 657, 663, 665, 666, 667, 674, 675, 756, 823, 843, 851, 857, 858, 860, 865, 871, 873, 874, 875, 877, 878, 879, 885, 888, 889, 911, 935, 965, 982, 986, 987, 997, 1002, 1007, 1011, 1015, 1019, 1023, 1026, 1030, 1031, 1032, 1033], "expand": [4, 16, 49, 65, 229, 307, 312, 355, 365, 406, 433, 439, 488, 546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899, 976, 1019, 1026, 1027, 1034], "complementari": [4, 407], "column": [4, 20, 21, 60, 69, 72, 75, 76, 90, 117, 119, 120, 123, 127, 130, 147, 155, 162, 165, 167, 168, 169, 170, 187, 198, 199, 206, 216, 236, 238, 249, 259, 260, 270, 271, 297, 306, 308, 313, 314, 315, 316, 344, 345, 346, 359, 367, 368, 370, 373, 375, 379, 382, 384, 385, 386, 396, 399, 400, 402, 404, 406, 407, 408, 411, 414, 440, 442, 453, 455, 456, 460, 461, 467, 476, 477, 478, 479, 480, 481, 483, 485, 489, 490, 491, 493, 494, 497, 498, 499, 500, 502, 504, 515, 520, 523, 526, 531, 533, 537, 544, 546, 547, 553, 554, 555, 556, 570, 571, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 599, 616, 619, 621, 622, 623, 635, 637, 641, 647, 649, 651, 653, 654, 658, 669, 674, 675, 686, 702, 707, 708, 717, 718, 726, 742, 751, 756, 757, 758, 761, 771, 772, 775, 776, 785, 788, 789, 799, 809, 814, 819, 822, 823, 824, 825, 826, 827, 828, 829, 848, 852, 853, 854, 855, 861, 862, 863, 867, 868, 869, 870, 872, 888, 890, 893, 896, 898, 904, 908, 909, 914, 925, 939, 952, 953, 955, 963, 965, 966, 972, 974, 976, 977, 984, 986, 991, 997, 1018, 1020, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 219, 220, 221, 224, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 366, 367, 368, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 390, 393, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 420, 421, 422, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 476, 482, 483, 484, 487, 489, 490, 491, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 695, 699, 700, 713, 723, 730, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 776, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 912, 924, 925, 927, 936, 937, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 965, 966, 967, 968, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 986, 988, 989, 990, 991, 992, 997, 1002, 1006, 1007, 1009, 1010, 1011, 1015, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "drop": [4, 5, 71, 75, 86, 155, 167, 168, 169, 171, 198, 216, 241, 269, 307, 313, 316, 345, 377, 381, 400, 404, 406, 453, 456, 556, 557, 558, 559, 684, 689, 691, 770, 777, 847, 861, 867, 966, 972, 976, 984, 986, 996, 1018, 1019, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 55, 61, 71, 72, 75, 82, 86, 91, 92, 95, 96, 97, 98, 99, 105, 110, 112, 113, 117, 119, 126, 129, 133, 139, 143, 154, 155, 159, 162, 167, 168, 179, 183, 185, 187, 190, 191, 192, 198, 202, 203, 207, 210, 212, 213, 215, 216, 220, 221, 224, 227, 231, 232, 236, 237, 244, 246, 248, 249, 255, 256, 260, 261, 266, 268, 269, 277, 279, 284, 285, 286, 289, 290, 291, 298, 301, 305, 308, 320, 322, 324, 327, 330, 331, 334, 335, 336, 337, 338, 339, 341, 344, 345, 350, 351, 352, 353, 375, 382, 386, 397, 399, 407, 411, 427, 434, 453, 456, 520, 522, 525, 526, 528, 530, 532, 539, 574, 601, 620, 621, 674, 675, 690, 751, 767, 768, 769, 770, 791, 807, 816, 857, 858, 865, 866, 868, 871, 873, 874, 875, 877, 878, 879, 902, 904, 908, 909, 927, 951, 957, 966, 976, 983, 986, 991, 1008, 1010, 1026, 1028, 1030], "holidai": [4, 169], "workingdai": [4, 169], "temp": [4, 169], "feel_temp": [4, 169], "humid": [4, 169, 983], "windspe": [4, 169], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 359, 360, 367, 368, 370, 371, 373, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 421, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 749, 751, 752, 754, 755, 756, 757, 759, 761, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 908, 909, 914, 919, 920, 922, 924, 925, 927, 928, 929, 930, 937, 938, 939, 941, 942, 944, 945, 946, 947, 950, 951, 957, 965, 966, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 994, 997, 998, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016], "spring": [4, 169], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 55, 64, 67, 70, 71, 72, 73, 79, 81, 92, 99, 101, 104, 105, 109, 116, 117, 120, 123, 124, 133, 136, 150, 155, 156, 157, 158, 168, 169, 170, 171, 177, 178, 182, 184, 198, 199, 203, 204, 206, 214, 216, 219, 222, 234, 235, 237, 241, 244, 256, 257, 259, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 279, 283, 289, 292, 296, 297, 301, 302, 307, 308, 311, 313, 314, 315, 316, 321, 331, 333, 339, 340, 344, 345, 367, 373, 374, 375, 378, 386, 390, 397, 399, 400, 401, 403, 404, 406, 407, 408, 409, 411, 412, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 497, 498, 499, 501, 504, 512, 513, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 624, 626, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 683, 684, 686, 687, 689, 690, 691, 692, 697, 698, 700, 701, 702, 703, 704, 707, 714, 715, 716, 717, 718, 719, 726, 730, 731, 738, 739, 742, 744, 749, 751, 755, 756, 757, 762, 766, 770, 771, 772, 773, 775, 777, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 799, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 906, 907, 908, 909, 919, 926, 937, 938, 941, 942, 946, 947, 950, 957, 962, 963, 965, 966, 972, 976, 979, 986, 990, 991, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "6": [4, 6, 8, 9, 10, 11, 12, 16, 19, 26, 31, 32, 40, 44, 46, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 67, 73, 74, 75, 78, 79, 80, 82, 90, 95, 97, 105, 111, 123, 124, 127, 129, 136, 142, 147, 150, 153, 155, 157, 158, 162, 163, 168, 169, 170, 174, 177, 178, 179, 182, 187, 191, 196, 198, 199, 200, 202, 212, 216, 219, 220, 221, 223, 227, 230, 231, 235, 238, 239, 244, 245, 246, 247, 249, 250, 253, 254, 258, 259, 260, 261, 262, 264, 268, 269, 270, 271, 274, 277, 281, 284, 292, 295, 297, 298, 301, 303, 305, 306, 308, 311, 314, 315, 316, 319, 320, 322, 323, 324, 331, 332, 334, 336, 339, 341, 344, 345, 346, 352, 355, 367, 368, 370, 371, 378, 379, 385, 389, 391, 392, 397, 399, 400, 403, 404, 406, 407, 408, 435, 437, 438, 439, 440, 441, 442, 451, 471, 472, 473, 474, 494, 513, 519, 527, 529, 530, 536, 552, 558, 559, 582, 583, 600, 603, 604, 614, 616, 617, 619, 633, 634, 659, 678, 682, 710, 716, 726, 733, 734, 738, 739, 741, 757, 773, 776, 783, 784, 786, 787, 792, 794, 795, 797, 802, 803, 806, 812, 814, 823, 824, 825, 827, 828, 829, 836, 838, 839, 840, 855, 856, 858, 861, 863, 866, 867, 872, 903, 925, 928, 930, 939, 965, 966, 970, 972, 973, 976, 986, 987, 990, 991, 992, 994, 1002, 1006, 1007, 1009, 1014, 1016, 1019, 1020, 1021, 1026, 1031, 1035], "clear": [4, 16, 55, 60, 72, 168, 169, 306, 368, 372, 373, 375, 384, 385, 386, 397, 400, 405, 902, 903, 965, 970, 1029, 1030, 1031], "9": [4, 7, 9, 12, 24, 26, 27, 30, 31, 32, 42, 44, 50, 55, 58, 62, 64, 74, 82, 85, 91, 98, 109, 119, 120, 121, 122, 123, 128, 130, 136, 138, 139, 153, 157, 163, 167, 168, 169, 179, 180, 189, 198, 211, 212, 215, 216, 219, 222, 231, 232, 233, 237, 241, 244, 245, 246, 247, 253, 262, 266, 268, 277, 281, 283, 284, 287, 288, 289, 295, 296, 298, 301, 303, 304, 305, 307, 308, 316, 319, 320, 322, 323, 324, 331, 335, 341, 346, 355, 370, 371, 379, 385, 389, 391, 392, 397, 400, 401, 403, 406, 407, 428, 432, 439, 446, 471, 472, 473, 474, 479, 509, 516, 523, 527, 528, 529, 536, 549, 556, 559, 572, 580, 596, 597, 616, 619, 623, 628, 636, 647, 650, 681, 698, 711, 714, 729, 736, 757, 766, 767, 768, 783, 786, 788, 789, 803, 806, 812, 814, 817, 825, 826, 830, 831, 836, 839, 845, 846, 854, 860, 863, 925, 929, 965, 971, 972, 976, 980, 986, 990, 991, 994, 1002, 1006, 1011, 1014, 1016, 1019, 1020, 1021, 1023, 1032, 1034], "84": [4, 6, 8, 70, 144, 189, 216, 298, 303, 319, 355, 370, 406, 407, 776, 799, 976, 986, 1007], "14": [4, 11, 38, 49, 60, 62, 63, 66, 74, 81, 100, 142, 168, 169, 172, 182, 187, 189, 216, 219, 221, 225, 227, 232, 258, 264, 265, 273, 277, 279, 304, 305, 316, 338, 341, 360, 368, 370, 371, 385, 389, 391, 392, 399, 403, 487, 499, 542, 543, 574, 575, 624, 632, 681, 799, 803, 854, 969, 972, 976, 986, 991, 994, 1002, 1016, 1018, 1019, 1021, 1022, 1026, 1031], "395": 4, "81": [4, 50, 241, 319, 320, 399, 776, 785, 799, 976, 977, 979, 986], "0000": [4, 316], "02": [4, 12, 28, 35, 44, 50, 52, 58, 62, 64, 68, 76, 82, 83, 85, 95, 98, 107, 112, 119, 134, 152, 157, 160, 167, 168, 172, 179, 216, 227, 231, 235, 254, 260, 266, 275, 278, 284, 295, 298, 299, 301, 303, 309, 324, 327, 342, 345, 350, 367, 370, 378, 403, 430, 434, 586, 647, 665, 785, 799, 867, 883, 897, 972], "13": [4, 6, 10, 11, 15, 19, 44, 55, 68, 74, 100, 105, 119, 121, 122, 124, 162, 168, 174, 184, 207, 231, 242, 253, 260, 263, 265, 293, 298, 301, 305, 331, 344, 347, 368, 370, 373, 379, 385, 403, 411, 499, 502, 521, 522, 540, 541, 571, 624, 628, 722, 803, 832, 847, 854, 880, 881, 972, 976, 977, 982, 983, 986, 991, 994, 1002, 1016, 1018, 1020, 1021, 1024, 1025, 1026, 1027, 1030], "635": [4, 605], "80": [4, 6, 11, 16, 27, 67, 81, 101, 130, 139, 144, 169, 177, 235, 298, 303, 307, 319, 334, 335, 336, 344, 351, 355, 368, 370, 373, 397, 403, 408, 433, 499, 530, 702, 785, 799, 869, 882, 901, 965, 971, 972, 976, 983, 989, 992, 1011], "75": [4, 6, 7, 10, 33, 44, 55, 82, 113, 144, 157, 158, 163, 168, 174, 177, 180, 189, 205, 216, 241, 246, 247, 259, 268, 272, 284, 301, 314, 341, 344, 355, 438, 540, 647, 695, 701, 722, 727, 733, 741, 744, 780, 785, 866, 878, 885, 901, 976, 978, 986, 992, 995, 1007, 1020], "17374": 4, "19": [4, 9, 155, 168, 223, 224, 225, 249, 305, 306, 320, 342, 345, 370, 377, 386, 399, 400, 407, 410, 433, 481, 505, 506, 507, 525, 529, 530, 536, 538, 539, 546, 547, 548, 549, 553, 554, 555, 571, 578, 637, 647, 648, 655, 656, 657, 660, 661, 663, 665, 667, 676, 696, 769, 773, 785, 799, 811, 816, 817, 819, 820, 834, 835, 854, 865, 886, 890, 893, 896, 897, 898, 899, 965, 976, 986, 994, 1014, 1016, 1018, 1019, 1020, 1021, 1023, 1026], "misti": [4, 169], "10": [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 30, 31, 32, 34, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 82, 85, 86, 92, 97, 98, 99, 100, 101, 105, 106, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 127, 128, 131, 133, 134, 137, 139, 140, 144, 147, 151, 152, 154, 156, 157, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 182, 188, 189, 191, 192, 196, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 214, 215, 216, 220, 221, 227, 230, 231, 232, 233, 234, 236, 237, 238, 240, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 275, 277, 284, 295, 296, 297, 298, 301, 302, 304, 305, 306, 311, 312, 313, 314, 315, 319, 320, 321, 323, 329, 331, 333, 334, 335, 336, 338, 339, 341, 344, 345, 346, 355, 359, 367, 368, 369, 370, 371, 373, 375, 378, 379, 384, 385, 386, 389, 390, 391, 392, 396, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 427, 432, 436, 438, 440, 441, 442, 448, 449, 451, 464, 481, 482, 489, 490, 491, 493, 499, 500, 501, 502, 505, 509, 510, 513, 517, 520, 524, 525, 526, 527, 528, 530, 531, 533, 535, 537, 541, 544, 545, 546, 547, 550, 551, 553, 554, 555, 556, 557, 559, 571, 572, 582, 583, 588, 589, 600, 606, 608, 616, 619, 621, 623, 624, 629, 631, 632, 633, 638, 648, 653, 654, 655, 656, 658, 659, 661, 662, 664, 665, 666, 667, 674, 675, 680, 681, 694, 704, 714, 730, 744, 757, 783, 784, 785, 786, 787, 788, 789, 796, 799, 800, 801, 802, 803, 805, 806, 807, 812, 814, 816, 817, 823, 824, 825, 827, 828, 829, 835, 844, 845, 846, 854, 858, 861, 862, 865, 877, 885, 891, 894, 896, 897, 901, 925, 929, 940, 944, 946, 962, 965, 966, 971, 972, 973, 974, 976, 977, 979, 980, 982, 983, 986, 990, 991, 994, 1002, 1006, 1007, 1009, 1010, 1011, 1015, 1016, 1019, 1020, 1021, 1026, 1028, 1029, 1030, 1032, 1033], "66": [4, 8, 92, 223, 307, 370, 399, 521, 621, 701, 771, 772, 781, 867, 976, 988], "880": [4, 22], "60": [4, 6, 16, 59, 73, 82, 98, 198, 210, 216, 219, 220, 241, 247, 267, 272, 298, 320, 334, 344, 367, 399, 403, 439, 446, 702, 785, 976, 986, 1007, 1018, 1021], "11": [4, 5, 9, 14, 15, 19, 35, 74, 81, 97, 147, 153, 168, 169, 182, 198, 199, 200, 203, 213, 221, 256, 264, 265, 271, 275, 283, 285, 305, 313, 316, 330, 334, 344, 346, 367, 370, 371, 379, 385, 399, 402, 403, 406, 439, 446, 471, 472, 473, 474, 490, 506, 507, 601, 639, 645, 659, 704, 710, 711, 712, 766, 767, 768, 786, 789, 803, 806, 813, 840, 897, 940, 972, 974, 986, 990, 991, 994, 1002, 1009, 1011, 1016, 1020, 1024, 1026, 1027, 1029, 1032, 1033], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 19, 25, 26, 27, 33, 34, 39, 40, 42, 43, 46, 47, 50, 54, 55, 61, 67, 78, 82, 92, 95, 101, 103, 105, 110, 112, 116, 119, 120, 123, 126, 130, 131, 133, 139, 142, 143, 144, 156, 167, 169, 170, 180, 187, 188, 190, 194, 195, 197, 198, 199, 202, 207, 210, 211, 212, 213, 215, 222, 231, 237, 246, 248, 249, 259, 260, 262, 263, 265, 270, 271, 273, 279, 283, 284, 285, 286, 287, 290, 298, 305, 306, 307, 312, 313, 314, 315, 317, 319, 320, 323, 328, 330, 334, 336, 341, 345, 346, 351, 352, 366, 370, 373, 375, 377, 378, 379, 389, 399, 406, 407, 430, 435, 436, 438, 453, 454, 458, 460, 461, 467, 477, 478, 479, 480, 481, 483, 485, 486, 489, 491, 493, 494, 501, 504, 505, 512, 520, 525, 526, 531, 534, 535, 537, 541, 544, 545, 548, 549, 550, 551, 552, 558, 559, 571, 578, 581, 583, 586, 588, 618, 619, 634, 638, 647, 655, 656, 657, 665, 667, 685, 693, 697, 702, 705, 713, 714, 727, 744, 745, 755, 778, 779, 783, 784, 785, 799, 810, 811, 812, 815, 817, 820, 821, 822, 825, 826, 833, 834, 845, 846, 847, 848, 850, 852, 853, 861, 862, 863, 864, 869, 883, 884, 886, 887, 892, 900, 906, 908, 909, 965, 972, 976, 979, 982, 983, 986, 989, 994, 999, 1000, 1003, 1009, 1013, 1014, 1016, 1018, 1024, 1027, 1030, 1032, 1033], "17376": 4, "21": [4, 50, 160, 168, 187, 198, 199, 216, 217, 249, 279, 298, 303, 305, 323, 370, 371, 375, 377, 389, 396, 406, 407, 430, 434, 463, 521, 550, 551, 552, 558, 559, 577, 578, 580, 616, 658, 676, 742, 785, 787, 799, 811, 854, 861, 863, 869, 886, 902, 972, 977, 986, 994, 1014, 1016, 1018, 1019, 1021, 1025, 1026, 1028], "17377": 4, "22": [4, 42, 165, 168, 169, 215, 249, 298, 301, 305, 310, 317, 320, 346, 373, 377, 378, 389, 396, 426, 437, 461, 477, 478, 484, 485, 493, 504, 513, 520, 526, 531, 534, 535, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 583, 616, 617, 621, 623, 634, 636, 640, 642, 644, 647, 648, 650, 652, 654, 658, 677, 681, 691, 693, 702, 745, 757, 766, 771, 772, 776, 785, 786, 790, 799, 804, 806, 808, 809, 810, 811, 812, 813, 814, 815, 832, 834, 836, 838, 839, 840, 845, 846, 847, 849, 852, 868, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 919, 920, 976, 986, 994, 1014, 1016, 1018, 1021, 1026, 1029, 1031], "56": [4, 207, 216, 231, 379, 702, 723, 976, 986, 1014, 1018], "8": [4, 5, 6, 7, 8, 9, 12, 13, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 55, 60, 62, 64, 65, 70, 72, 74, 75, 81, 85, 90, 91, 92, 95, 96, 99, 100, 104, 106, 113, 115, 116, 120, 122, 123, 125, 128, 131, 132, 136, 146, 147, 151, 153, 155, 156, 158, 159, 163, 167, 168, 169, 171, 174, 177, 178, 183, 184, 189, 192, 198, 199, 205, 206, 208, 214, 216, 219, 220, 221, 223, 224, 228, 232, 233, 235, 237, 239, 240, 241, 244, 245, 246, 248, 249, 250, 254, 255, 257, 258, 259, 260, 262, 263, 264, 266, 269, 270, 277, 281, 283, 287, 291, 295, 297, 298, 301, 303, 304, 305, 306, 307, 311, 316, 319, 320, 321, 323, 324, 328, 331, 335, 336, 338, 340, 344, 345, 346, 352, 355, 360, 367, 368, 370, 371, 373, 378, 379, 389, 397, 399, 403, 404, 406, 407, 408, 409, 428, 432, 433, 436, 438, 439, 441, 451, 458, 459, 460, 461, 462, 463, 464, 465, 472, 473, 474, 476, 479, 491, 492, 503, 520, 523, 527, 529, 532, 534, 536, 538, 539, 544, 545, 554, 559, 571, 577, 578, 579, 580, 617, 618, 637, 647, 659, 665, 678, 681, 682, 683, 684, 691, 695, 696, 698, 704, 710, 715, 716, 717, 729, 733, 734, 738, 739, 741, 770, 771, 773, 776, 777, 781, 783, 786, 787, 792, 795, 802, 803, 806, 807, 814, 817, 826, 828, 829, 835, 845, 846, 847, 853, 860, 867, 869, 890, 893, 923, 925, 929, 965, 966, 972, 973, 974, 976, 979, 984, 986, 990, 994, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1019, 1020, 1021, 1025, 1026, 1031, 1032, 1034], "9981": 4, "17378": 4, "23": [4, 8, 19, 26, 34, 50, 92, 98, 165, 241, 249, 298, 305, 310, 313, 314, 317, 320, 370, 371, 373, 379, 389, 391, 392, 406, 412, 421, 429, 436, 441, 443, 451, 454, 456, 457, 464, 471, 472, 473, 479, 481, 489, 490, 491, 493, 494, 499, 501, 503, 511, 513, 527, 528, 529, 532, 536, 543, 545, 547, 549, 550, 551, 554, 557, 558, 559, 596, 597, 600, 616, 619, 621, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 658, 659, 661, 662, 664, 667, 668, 669, 706, 718, 766, 814, 820, 821, 822, 831, 839, 846, 849, 861, 868, 876, 877, 886, 889, 891, 894, 897, 899, 906, 908, 909, 919, 920, 925, 976, 994, 1014, 1016, 1018, 1019, 1025, 1026, 1027, 1030], "65": [4, 33, 169, 198, 268, 307, 399, 428, 491, 586, 729, 778, 779, 983, 1007, 1018, 1019, 1020], "17379": [4, 1030], "row": [4, 19, 20, 21, 25, 27, 44, 60, 75, 90, 92, 116, 119, 128, 131, 162, 198, 199, 200, 228, 231, 237, 238, 303, 353, 359, 368, 375, 382, 385, 386, 396, 399, 402, 407, 414, 431, 432, 436, 438, 439, 440, 442, 445, 446, 448, 453, 457, 477, 479, 480, 481, 482, 483, 484, 489, 490, 491, 493, 494, 499, 500, 502, 523, 531, 537, 540, 579, 580, 609, 621, 632, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 681, 685, 686, 699, 707, 708, 713, 746, 747, 751, 754, 756, 757, 758, 759, 761, 762, 764, 766, 767, 768, 769, 783, 784, 817, 823, 824, 825, 826, 827, 833, 836, 837, 838, 839, 840, 843, 854, 858, 860, 863, 875, 878, 879, 882, 886, 904, 908, 909, 925, 947, 950, 954, 956, 958, 959, 963, 965, 966, 970, 972, 974, 976, 977, 979, 986, 987, 990, 991, 997, 1025, 1026, 1027, 1028, 1033], "onli": [4, 7, 11, 13, 14, 20, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 55, 58, 66, 70, 71, 72, 74, 75, 81, 90, 98, 99, 106, 110, 112, 117, 118, 119, 120, 122, 129, 130, 142, 143, 144, 147, 150, 152, 155, 157, 159, 163, 165, 167, 168, 169, 174, 176, 181, 182, 187, 194, 198, 199, 201, 204, 206, 207, 216, 217, 219, 220, 227, 229, 231, 233, 234, 238, 241, 244, 245, 246, 249, 250, 255, 257, 259, 261, 262, 265, 266, 267, 268, 270, 271, 279, 282, 285, 287, 290, 292, 297, 301, 302, 306, 307, 313, 314, 319, 320, 322, 327, 328, 331, 336, 339, 340, 344, 345, 346, 349, 350, 353, 355, 359, 360, 361, 366, 367, 368, 370, 371, 373, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 389, 390, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 478, 479, 480, 481, 483, 485, 486, 489, 490, 491, 492, 493, 494, 497, 498, 499, 501, 505, 508, 512, 513, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 696, 698, 702, 714, 717, 718, 722, 724, 725, 726, 729, 730, 731, 744, 746, 748, 762, 766, 767, 768, 769, 771, 772, 775, 776, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 799, 803, 807, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 906, 908, 909, 912, 914, 917, 925, 927, 930, 932, 937, 942, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 996, 997, 1000, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034], "present": [4, 5, 43, 49, 92, 95, 103, 115, 116, 123, 126, 146, 156, 159, 177, 180, 182, 187, 198, 227, 230, 234, 249, 257, 262, 265, 268, 269, 279, 301, 304, 306, 345, 370, 371, 375, 378, 384, 386, 390, 399, 401, 404, 406, 407, 417, 418, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 478, 479, 480, 481, 485, 489, 490, 491, 492, 493, 494, 499, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 538, 539, 552, 555, 558, 559, 570, 571, 572, 577, 578, 580, 606, 616, 617, 618, 619, 639, 643, 666, 677, 678, 679, 680, 701, 717, 718, 726, 730, 757, 771, 772, 775, 783, 784, 785, 788, 789, 797, 799, 812, 830, 831, 832, 834, 836, 838, 839, 840, 847, 852, 860, 861, 862, 863, 864, 866, 880, 881, 892, 900, 902, 903, 925, 960, 975, 976, 977, 978, 983, 986, 995, 997, 1021, 1026, 1028, 1029, 1030, 1032, 1033], "date": [4, 70, 155, 169, 368, 370, 373, 377, 387, 400, 997], "datetim": [4, 17, 155, 169], "http": [4, 6, 7, 8, 12, 17, 24, 71, 124, 130, 147, 159, 163, 174, 198, 206, 214, 216, 224, 228, 237, 277, 279, 297, 367, 368, 370, 371, 373, 377, 378, 379, 381, 384, 386, 387, 389, 399, 403, 408, 431, 438, 441, 451, 476, 481, 485, 489, 491, 497, 498, 499, 519, 520, 523, 525, 526, 530, 584, 625, 630, 633, 638, 647, 653, 655, 656, 657, 660, 665, 668, 671, 672, 674, 675, 680, 681, 684, 694, 710, 711, 712, 746, 747, 757, 823, 825, 826, 827, 830, 831, 836, 837, 838, 839, 844, 866, 881, 882, 883, 896, 897, 972, 974, 976, 979, 989, 992, 999, 1000, 1007, 1023, 1028], "pydata": [4, 995, 1000], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 61, 66, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 159, 168, 169, 170, 174, 179, 189, 190, 198, 206, 214, 216, 220, 228, 229, 230, 232, 234, 238, 239, 240, 241, 249, 257, 259, 260, 262, 266, 271, 277, 297, 298, 307, 312, 313, 315, 316, 319, 320, 321, 324, 344, 345, 346, 353, 360, 366, 371, 373, 376, 379, 381, 387, 389, 403, 584, 625, 657, 660, 665, 684, 694, 757, 830, 831, 836, 837, 838, 839, 866, 882, 896, 897, 972, 976, 992, 994, 1013, 1026, 1030], "stabl": [4, 159, 168, 192, 196, 200, 279, 312, 345, 371, 373, 377, 379, 382, 386, 389, 403, 407, 411, 460, 461, 467, 522, 644, 661, 663, 676, 681, 712, 740, 924, 925, 972, 978, 979, 986, 997, 1014, 1018, 1019, 1024, 1029, 1031], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 147, 155, 159, 168, 169, 170, 174, 179, 228, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 321, 353, 368, 370, 373, 374, 377, 381, 387, 400, 403, 407, 476, 497, 498, 647, 823, 827, 921, 974, 996, 997, 1029, 1030, 1031, 1032, 1033], "compon": [4, 5, 17, 44, 58, 62, 70, 73, 84, 85, 87, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 128, 155, 165, 167, 182, 219, 231, 232, 235, 244, 245, 248, 249, 250, 258, 260, 280, 293, 298, 306, 313, 359, 365, 368, 373, 375, 379, 382, 384, 398, 399, 400, 402, 407, 409, 411, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 491, 493, 504, 510, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 684, 717, 718, 726, 771, 772, 775, 783, 784, 785, 788, 789, 799, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 924, 925, 968, 973, 986, 988, 991, 996, 997, 998, 1000, 1005, 1011, 1012, 1013, 1018, 1020, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "now": [4, 5, 7, 17, 20, 53, 57, 71, 86, 100, 109, 111, 115, 117, 119, 120, 123, 124, 130, 133, 147, 150, 155, 156, 157, 163, 167, 168, 169, 170, 174, 177, 179, 184, 186, 187, 199, 200, 223, 232, 234, 255, 259, 262, 270, 271, 306, 312, 313, 315, 316, 321, 331, 339, 344, 345, 346, 355, 359, 361, 368, 373, 374, 375, 379, 384, 385, 386, 396, 399, 403, 404, 406, 407, 411, 482, 497, 498, 501, 525, 538, 568, 569, 571, 616, 619, 638, 642, 647, 652, 673, 714, 744, 783, 784, 788, 789, 820, 835, 951, 965, 966, 972, 976, 982, 985, 986, 991, 992, 995, 997, 1002, 1009, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "introspect": [4, 6, 71, 379, 548, 549, 577, 578, 580, 986, 1007], "value_count": [4, 169], "11413": 4, "4544": 4, "rain": [4, 169, 972], "1419": 4, "heavy_rain": [4, 169], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 34, 37, 44, 45, 58, 62, 71, 73, 75, 82, 96, 102, 113, 114, 115, 116, 120, 121, 123, 130, 168, 169, 170, 187, 196, 198, 200, 204, 205, 213, 215, 216, 219, 220, 227, 233, 234, 236, 237, 241, 246, 254, 256, 257, 260, 262, 263, 266, 268, 269, 279, 287, 288, 295, 296, 303, 305, 307, 315, 316, 323, 336, 344, 345, 346, 360, 361, 367, 368, 371, 373, 375, 377, 378, 380, 381, 386, 389, 393, 396, 399, 400, 403, 406, 407, 409, 413, 415, 420, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 565, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 686, 687, 688, 689, 691, 697, 698, 702, 720, 721, 767, 768, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 797, 799, 803, 807, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 907, 908, 909, 912, 916, 917, 918, 920, 932, 933, 934, 936, 939, 946, 960, 964, 965, 970, 972, 976, 977, 983, 984, 986, 992, 997, 1006, 1007, 1009, 1011, 1018, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 65, 70, 71, 122, 124, 125, 126, 151, 152, 153, 163, 168, 169, 200, 216, 237, 241, 244, 257, 263, 267, 286, 292, 307, 314, 315, 320, 353, 367, 368, 373, 375, 384, 386, 395, 400, 403, 414, 417, 431, 432, 436, 437, 438, 439, 440, 442, 453, 455, 456, 458, 461, 463, 477, 478, 479, 480, 485, 486, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 503, 511, 531, 546, 547, 548, 549, 552, 553, 554, 555, 570, 571, 574, 575, 577, 578, 580, 582, 583, 591, 595, 616, 617, 618, 619, 621, 622, 629, 630, 633, 634, 635, 641, 645, 646, 649, 650, 651, 652, 653, 654, 660, 662, 664, 686, 688, 694, 703, 704, 719, 726, 729, 743, 774, 791, 809, 811, 812, 824, 828, 829, 831, 839, 853, 859, 861, 862, 868, 869, 882, 890, 891, 892, 893, 894, 896, 897, 898, 899, 905, 906, 908, 909, 941, 951, 952, 953, 954, 957, 963, 966, 986, 989, 991, 1002, 1019, 1021, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "int64": [4, 13, 54, 71, 168, 169, 307, 353, 386, 407, 417, 431, 437, 439, 577, 629, 703, 704, 824, 1026, 1029, 1031, 1033, 1034], "cannot": [4, 40, 56, 75, 82, 95, 100, 118, 168, 169, 182, 198, 216, 234, 301, 331, 361, 372, 374, 379, 386, 387, 399, 400, 401, 403, 404, 406, 407, 409, 454, 510, 527, 528, 529, 532, 536, 599, 602, 603, 604, 606, 608, 609, 611, 612, 614, 640, 644, 671, 681, 700, 706, 766, 788, 789, 835, 836, 838, 839, 840, 848, 849, 858, 859, 870, 906, 908, 909, 965, 966, 970, 972, 973, 977, 982, 986, 991, 992, 997, 1000, 1006, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 56, 58, 64, 70, 71, 75, 85, 86, 90, 95, 98, 100, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 127, 130, 131, 132, 136, 144, 150, 151, 152, 155, 156, 157, 158, 159, 165, 167, 168, 169, 170, 171, 174, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 198, 199, 200, 202, 205, 206, 207, 210, 212, 213, 216, 227, 230, 232, 236, 237, 246, 248, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 279, 282, 285, 286, 287, 288, 290, 292, 295, 296, 297, 301, 303, 305, 306, 311, 314, 318, 319, 320, 323, 324, 325, 327, 330, 338, 339, 346, 348, 351, 352, 354, 355, 359, 360, 361, 365, 370, 375, 378, 384, 385, 386, 393, 395, 397, 399, 400, 401, 402, 404, 406, 407, 408, 409, 411, 426, 429, 430, 432, 433, 436, 438, 440, 441, 442, 443, 448, 454, 458, 459, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 477, 478, 482, 486, 487, 489, 493, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 677, 678, 680, 681, 685, 692, 729, 776, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 848, 853, 854, 857, 858, 861, 862, 866, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 950, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 986, 990, 991, 992, 996, 997, 998, 1000, 1003, 1006, 1007, 1013, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 56, 67, 68, 70, 75, 81, 82, 94, 100, 105, 107, 109, 113, 114, 115, 116, 118, 119, 125, 127, 128, 129, 130, 136, 137, 138, 139, 144, 147, 150, 153, 155, 159, 162, 163, 166, 170, 172, 173, 175, 184, 186, 187, 212, 216, 223, 225, 226, 227, 232, 235, 240, 252, 256, 258, 259, 262, 264, 265, 267, 273, 275, 279, 283, 284, 285, 286, 287, 292, 294, 297, 298, 299, 301, 302, 306, 308, 310, 317, 318, 322, 324, 325, 330, 337, 339, 344, 345, 346, 349, 350, 351, 352, 355, 360, 362, 365, 366, 367, 368, 370, 372, 376, 379, 380, 381, 382, 385, 386, 388, 390, 393, 394, 395, 396, 397, 399, 400, 401, 403, 405, 407, 408, 409, 413, 414, 416, 417, 418, 421, 422, 426, 427, 428, 431, 432, 435, 436, 438, 439, 446, 448, 453, 454, 456, 457, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 497, 498, 499, 501, 503, 504, 505, 506, 507, 509, 511, 513, 514, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 560, 565, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 588, 591, 592, 599, 600, 603, 608, 611, 615, 617, 619, 621, 623, 627, 629, 630, 632, 633, 634, 635, 637, 641, 646, 647, 657, 658, 665, 666, 667, 669, 677, 678, 679, 680, 681, 685, 689, 690, 691, 697, 702, 706, 707, 710, 711, 712, 714, 723, 729, 731, 736, 744, 766, 767, 768, 773, 776, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 830, 832, 837, 844, 845, 846, 847, 849, 851, 853, 855, 858, 860, 861, 862, 863, 866, 867, 868, 872, 880, 881, 883, 884, 885, 886, 888, 889, 890, 893, 896, 897, 898, 899, 911, 919, 920, 942, 943, 965, 966, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 987, 990, 991, 992, 993, 995, 999, 1004, 1006, 1007, 1013, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "simplifi": [4, 71, 186, 331, 372, 374, 378, 399, 402, 504, 551, 847, 848, 976, 978, 986], "represent": [4, 12, 17, 20, 26, 53, 71, 72, 95, 98, 109, 115, 117, 118, 126, 127, 128, 130, 133, 144, 155, 168, 170, 174, 179, 182, 219, 220, 221, 228, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 289, 298, 307, 313, 315, 316, 321, 345, 346, 353, 355, 365, 367, 375, 386, 393, 399, 400, 404, 405, 406, 452, 520, 524, 526, 529, 531, 537, 555, 577, 579, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 619, 632, 635, 641, 647, 648, 649, 651, 655, 657, 665, 666, 667, 757, 783, 784, 791, 807, 844, 857, 861, 862, 866, 868, 881, 888, 900, 902, 905, 921, 942, 968, 973, 975, 977, 979, 980, 981, 983, 986, 991, 997, 1002, 1003, 1005, 1009, 1011, 1018, 1019, 1022, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "collaps": [4, 169, 301, 331, 384], "those": [4, 7, 12, 17, 19, 55, 60, 71, 111, 123, 147, 159, 167, 169, 170, 171, 198, 200, 216, 224, 231, 234, 236, 237, 250, 253, 259, 262, 265, 296, 301, 306, 328, 331, 344, 345, 346, 359, 360, 367, 373, 375, 377, 378, 379, 380, 384, 386, 387, 389, 396, 397, 399, 403, 404, 406, 407, 409, 437, 439, 450, 453, 457, 483, 484, 485, 492, 546, 547, 553, 554, 558, 559, 570, 681, 686, 701, 707, 724, 785, 788, 789, 797, 799, 806, 830, 831, 832, 834, 836, 837, 838, 839, 840, 890, 893, 896, 897, 898, 899, 936, 965, 968, 972, 975, 976, 978, 979, 980, 983, 986, 992, 995, 996, 1000, 1002, 1011, 1018, 1021, 1024, 1025, 1026, 1031, 1032, 1033, 1034], "replac": [4, 25, 80, 99, 150, 157, 162, 169, 184, 199, 237, 262, 279, 303, 308, 313, 333, 371, 373, 375, 377, 379, 382, 386, 393, 400, 403, 406, 407, 430, 434, 492, 504, 544, 545, 552, 571, 577, 578, 579, 580, 596, 597, 616, 619, 623, 628, 630, 716, 773, 791, 797, 799, 807, 847, 848, 851, 871, 884, 891, 945, 947, 950, 965, 966, 972, 976, 986, 991, 992, 996, 997, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034], "to_replac": [4, 169], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 20, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 55, 60, 61, 62, 66, 71, 73, 75, 78, 80, 82, 95, 98, 106, 112, 114, 115, 116, 117, 118, 120, 123, 124, 126, 127, 129, 130, 142, 143, 146, 147, 150, 153, 154, 156, 158, 164, 167, 168, 169, 170, 171, 174, 177, 178, 180, 182, 184, 186, 187, 188, 189, 191, 196, 198, 199, 200, 202, 204, 213, 216, 218, 222, 225, 227, 228, 229, 230, 231, 232, 233, 237, 240, 241, 244, 250, 253, 255, 257, 259, 260, 262, 264, 265, 266, 268, 270, 271, 272, 274, 279, 292, 295, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 313, 322, 323, 331, 336, 339, 344, 345, 346, 349, 353, 355, 359, 360, 361, 362, 365, 366, 367, 368, 370, 374, 375, 376, 378, 379, 380, 382, 384, 385, 386, 388, 389, 390, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 476, 479, 480, 482, 485, 486, 487, 490, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 689, 690, 691, 693, 694, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 757, 759, 762, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 796, 797, 799, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 909, 912, 913, 914, 915, 917, 925, 927, 936, 937, 938, 939, 940, 944, 952, 953, 954, 965, 968, 969, 970, 971, 972, 973, 975, 977, 978, 979, 980, 981, 982, 983, 987, 989, 990, 991, 998, 1000, 1002, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "inplac": [4, 169, 216, 271, 443, 471, 472, 473, 474, 843, 851, 854, 857, 858, 860, 864, 865, 866, 868, 871, 873, 874, 875, 876, 877, 878, 879, 949, 952, 953, 954, 958, 959, 1027], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 86, 92, 100, 113, 115, 117, 120, 123, 144, 150, 156, 165, 166, 170, 172, 184, 189, 198, 199, 200, 206, 216, 231, 234, 238, 245, 246, 249, 250, 266, 279, 306, 344, 345, 355, 359, 360, 373, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 395, 397, 399, 400, 401, 403, 406, 407, 408, 421, 453, 454, 456, 457, 458, 471, 472, 473, 485, 512, 521, 525, 527, 530, 541, 543, 544, 545, 547, 549, 551, 552, 554, 556, 557, 559, 561, 574, 575, 577, 578, 580, 584, 586, 595, 600, 616, 621, 622, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 663, 664, 667, 668, 684, 693, 694, 705, 723, 776, 780, 821, 822, 823, 824, 825, 826, 827, 831, 834, 839, 846, 849, 854, 861, 862, 865, 868, 869, 878, 879, 886, 888, 889, 890, 891, 892, 893, 894, 897, 899, 939, 965, 972, 976, 978, 982, 986, 990, 991, 992, 999, 1007, 1010, 1011, 1013, 1018, 1019, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "balanc": [4, 6, 53, 66, 165, 203, 252, 262, 275, 301, 361, 384, 386, 397, 403, 404, 406, 491, 504, 523, 529, 530, 536, 546, 550, 553, 629, 647, 648, 655, 657, 663, 664, 665, 692, 697, 717, 731, 770, 775, 785, 786, 803, 848, 888, 890, 893, 896, 898, 913, 914, 965, 991, 992, 1007, 1018, 1020, 1023, 1024, 1027, 1028, 1032], "fall": [4, 123, 157, 258, 259, 373, 375, 398, 399, 407, 423, 435, 436, 497, 498, 715, 716, 780, 865, 877, 975, 976, 986, 1002, 1010, 1027], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 20, 24, 47, 55, 64, 65, 72, 78, 89, 105, 118, 119, 120, 124, 139, 155, 167, 168, 171, 174, 187, 191, 194, 198, 199, 204, 212, 216, 221, 231, 234, 241, 246, 254, 257, 259, 266, 277, 298, 301, 306, 307, 308, 313, 314, 339, 344, 346, 355, 359, 360, 368, 373, 375, 378, 379, 382, 386, 389, 390, 393, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 429, 432, 435, 436, 438, 439, 444, 445, 446, 448, 453, 477, 478, 479, 484, 486, 504, 523, 524, 528, 529, 530, 532, 536, 540, 542, 544, 545, 546, 548, 552, 553, 556, 570, 577, 580, 582, 583, 586, 595, 596, 597, 599, 611, 616, 620, 629, 647, 648, 654, 665, 674, 675, 677, 678, 682, 686, 689, 691, 693, 701, 702, 707, 714, 717, 718, 726, 728, 729, 742, 744, 766, 770, 771, 772, 775, 776, 777, 780, 785, 786, 788, 789, 790, 792, 796, 799, 803, 804, 809, 816, 817, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 838, 845, 848, 859, 861, 862, 863, 867, 868, 869, 872, 873, 874, 876, 877, 878, 879, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 908, 909, 914, 925, 940, 945, 966, 972, 973, 976, 977, 979, 980, 986, 989, 990, 991, 992, 997, 1006, 1008, 1009, 1011, 1018, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "sensit": [4, 44, 55, 80, 81, 113, 123, 169, 200, 201, 227, 301, 331, 360, 361, 387, 401, 406, 441, 451, 681, 701, 702, 776, 971, 972, 973, 975, 976, 980, 982, 990, 991, 1002, 1010, 1022], "splitter": [4, 386, 390, 403, 426, 461, 556, 557, 583, 591, 636, 640, 642, 644, 650, 652, 654, 662, 664, 785, 787, 788, 789, 790, 791, 799, 800, 801, 802, 804, 805, 807, 808, 809, 810, 811, 812, 813, 815, 819, 822, 896, 897, 898, 899, 992, 997, 1024, 1025, 1026, 1027, 1034], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 55, 68, 71, 72, 98, 109, 117, 118, 120, 121, 123, 143, 153, 165, 171, 174, 178, 187, 200, 205, 216, 226, 242, 252, 253, 256, 257, 259, 262, 264, 265, 266, 268, 270, 271, 273, 275, 277, 288, 292, 306, 308, 313, 331, 344, 355, 362, 366, 368, 375, 379, 386, 388, 398, 400, 407, 408, 409, 436, 438, 477, 480, 481, 482, 485, 498, 509, 525, 540, 550, 551, 552, 556, 557, 580, 583, 591, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 620, 621, 622, 623, 636, 642, 648, 662, 664, 686, 690, 691, 692, 693, 694, 700, 702, 703, 704, 706, 707, 714, 715, 724, 725, 730, 742, 743, 744, 745, 774, 781, 783, 784, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 819, 825, 828, 829, 834, 846, 848, 855, 873, 874, 876, 877, 878, 879, 890, 893, 896, 911, 919, 950, 968, 972, 974, 978, 979, 982, 983, 984, 987, 990, 992, 996, 1000, 1002, 1003, 1006, 1007, 1009, 1012, 1013, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031], "forecast": [4, 259, 397, 976, 996], "realist": [4, 8, 261, 268, 269, 328, 976], "gap": [4, 344, 368, 403, 460, 461, 467, 577, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 806, 896, 897, 898, 899, 972, 973, 1026, 1030, 1032], "between": [4, 5, 8, 9, 11, 12, 20, 37, 38, 39, 40, 42, 43, 53, 60, 61, 66, 85, 98, 100, 104, 109, 113, 116, 120, 123, 142, 150, 155, 156, 158, 165, 167, 168, 169, 170, 177, 182, 184, 189, 193, 194, 198, 199, 200, 202, 203, 206, 216, 219, 227, 232, 234, 237, 252, 255, 258, 259, 260, 261, 262, 264, 265, 266, 268, 275, 281, 285, 286, 288, 289, 301, 306, 308, 314, 322, 331, 339, 344, 345, 346, 353, 355, 359, 360, 368, 373, 375, 382, 384, 385, 386, 387, 390, 393, 396, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 420, 429, 430, 433, 434, 435, 439, 441, 442, 443, 445, 446, 447, 452, 458, 459, 460, 461, 462, 463, 464, 465, 480, 482, 483, 484, 485, 486, 487, 491, 503, 504, 510, 513, 516, 523, 525, 526, 527, 528, 529, 530, 535, 536, 538, 542, 543, 548, 549, 551, 552, 553, 554, 573, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 609, 616, 621, 622, 623, 628, 631, 634, 635, 636, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 665, 667, 668, 670, 673, 677, 679, 681, 683, 684, 685, 690, 692, 693, 694, 696, 698, 699, 703, 704, 705, 706, 708, 712, 713, 714, 717, 718, 719, 722, 724, 725, 731, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 778, 779, 781, 782, 783, 784, 785, 787, 788, 794, 802, 803, 805, 813, 814, 816, 818, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 845, 846, 852, 855, 856, 858, 859, 861, 862, 865, 866, 867, 869, 874, 877, 878, 882, 893, 896, 897, 898, 899, 901, 922, 934, 945, 965, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 997, 1009, 1010, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "side": [4, 16, 27, 59, 123, 191, 216, 221, 230, 301, 344, 355, 368, 384, 397, 400, 403, 404, 407, 504, 972, 973, 976, 978, 991, 1027], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 70, 100, 109, 115, 116, 117, 119, 122, 123, 124, 125, 126, 136, 143, 167, 168, 182, 193, 194, 198, 201, 206, 216, 228, 234, 245, 246, 253, 254, 257, 259, 264, 266, 269, 288, 295, 297, 302, 303, 308, 315, 322, 331, 344, 346, 353, 368, 373, 380, 385, 386, 389, 390, 397, 399, 404, 406, 407, 426, 431, 432, 461, 462, 468, 469, 486, 520, 526, 528, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 577, 578, 580, 583, 591, 636, 640, 642, 644, 650, 652, 654, 662, 664, 684, 693, 694, 706, 719, 725, 745, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 822, 828, 829, 845, 846, 869, 873, 874, 876, 877, 878, 879, 896, 897, 898, 899, 947, 965, 972, 973, 979, 982, 983, 984, 986, 990, 992, 997, 1002, 1006, 1007, 1009, 1010, 1011, 1013, 1018, 1021, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "limit": [4, 8, 17, 37, 42, 57, 66, 82, 117, 118, 124, 130, 162, 168, 169, 170, 177, 198, 199, 215, 231, 266, 303, 307, 314, 346, 355, 360, 374, 375, 378, 384, 386, 387, 397, 399, 402, 404, 408, 435, 452, 457, 548, 549, 550, 551, 621, 639, 647, 648, 668, 671, 672, 677, 766, 806, 836, 838, 839, 840, 861, 862, 886, 890, 891, 892, 893, 894, 944, 965, 972, 973, 975, 976, 983, 984, 986, 997, 1002, 1013, 1026, 1028, 1031, 1032], "cv": [4, 12, 24, 25, 26, 54, 71, 72, 73, 74, 78, 103, 116, 120, 122, 136, 137, 146, 162, 163, 168, 187, 197, 200, 255, 257, 258, 259, 260, 261, 262, 264, 265, 269, 273, 307, 308, 316, 331, 339, 385, 386, 390, 397, 403, 406, 426, 461, 556, 557, 583, 591, 636, 640, 642, 644, 648, 650, 652, 654, 662, 664, 785, 787, 788, 789, 790, 791, 799, 800, 801, 802, 804, 805, 807, 808, 809, 810, 811, 812, 813, 815, 819, 822, 869, 896, 897, 965, 968, 971, 972, 976, 986, 997, 1006, 1007, 1011, 1020, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1034], "fold": [4, 67, 74, 78, 116, 119, 122, 136, 146, 168, 187, 246, 254, 255, 257, 259, 260, 262, 269, 322, 339, 355, 368, 373, 376, 377, 385, 386, 390, 399, 408, 426, 461, 482, 525, 556, 557, 583, 591, 636, 640, 642, 644, 648, 650, 652, 654, 662, 664, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 819, 822, 869, 890, 893, 965, 972, 976, 986, 991, 1006, 1018, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 72, 75, 85, 105, 113, 115, 117, 122, 123, 127, 132, 138, 142, 156, 174, 184, 190, 201, 221, 230, 231, 233, 244, 248, 257, 259, 265, 268, 270, 284, 286, 302, 305, 312, 313, 315, 332, 333, 340, 344, 345, 378, 379, 385, 397, 407, 426, 462, 468, 469, 520, 521, 526, 531, 532, 534, 535, 537, 542, 553, 621, 635, 636, 640, 641, 642, 644, 649, 650, 651, 652, 655, 656, 657, 661, 665, 666, 667, 676, 681, 687, 690, 752, 865, 877, 883, 888, 889, 965, 969, 991, 1006, 1009, 1025, 1027], "datapoint": [4, 42, 52, 56, 154, 157, 181, 232, 233, 254, 259, 277, 337, 409, 435, 491, 546, 547, 548, 549, 553, 554, 555, 600, 896, 897, 898, 899, 969], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 113, 116, 120, 123, 147, 162, 168, 174, 177, 178, 182, 198, 200, 216, 227, 232, 233, 234, 259, 262, 265, 266, 268, 279, 302, 303, 308, 321, 331, 339, 345, 355, 359, 360, 361, 368, 371, 372, 373, 375, 377, 378, 380, 381, 382, 385, 386, 389, 390, 393, 397, 399, 401, 403, 404, 406, 407, 408, 409, 410, 411, 413, 426, 429, 431, 432, 433, 434, 436, 438, 439, 441, 443, 446, 447, 448, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 485, 492, 497, 498, 505, 510, 512, 513, 516, 521, 522, 523, 525, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 574, 575, 577, 578, 579, 580, 582, 583, 586, 591, 596, 597, 599, 600, 609, 616, 617, 618, 620, 621, 622, 624, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 698, 715, 716, 754, 759, 762, 766, 767, 768, 769, 770, 773, 776, 777, 778, 785, 786, 787, 788, 789, 792, 793, 794, 795, 799, 802, 803, 804, 805, 810, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 867, 868, 869, 871, 875, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 908, 912, 914, 917, 925, 937, 942, 945, 947, 950, 951, 952, 953, 954, 955, 956, 957, 965, 966, 970, 971, 972, 973, 976, 977, 979, 981, 982, 983, 986, 989, 990, 991, 992, 997, 999, 1000, 1007, 1011, 1015, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "enough": [4, 37, 44, 62, 116, 119, 150, 162, 169, 170, 187, 198, 232, 235, 305, 344, 346, 355, 371, 373, 377, 387, 397, 398, 399, 401, 403, 406, 556, 557, 578, 785, 788, 789, 791, 799, 812, 925, 965, 970, 973, 975, 982, 986, 991, 996, 1000, 1024, 1034], "quantifi": [4, 37, 49, 78, 155, 216, 266, 375, 386, 394, 398, 562, 851, 971, 984, 986, 1013], "repres": [4, 8, 10, 12, 14, 20, 26, 32, 44, 48, 49, 50, 53, 91, 95, 97, 104, 105, 117, 118, 126, 168, 177, 185, 190, 200, 202, 203, 207, 221, 223, 232, 237, 247, 253, 256, 259, 262, 266, 284, 303, 344, 346, 353, 361, 365, 368, 370, 375, 384, 385, 386, 387, 393, 397, 399, 403, 404, 405, 406, 407, 408, 427, 431, 435, 441, 452, 459, 460, 461, 462, 463, 464, 465, 477, 479, 480, 481, 483, 485, 487, 489, 490, 491, 493, 494, 499, 523, 525, 527, 529, 530, 536, 544, 552, 570, 577, 580, 618, 621, 623, 629, 665, 667, 686, 690, 718, 731, 777, 785, 787, 798, 799, 802, 805, 811, 813, 814, 817, 818, 824, 830, 831, 832, 834, 835, 836, 838, 839, 840, 845, 846, 855, 861, 862, 885, 908, 909, 929, 966, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 984, 986, 987, 989, 990, 992, 1002, 1007, 1008, 1010, 1024, 1026, 1029, 1030, 1033], "bit": [4, 48, 53, 78, 98, 196, 200, 301, 331, 345, 355, 359, 368, 371, 406, 407, 571, 578, 647, 818, 908, 909, 973, 977, 995, 1004, 1011, 1018, 1021, 1024, 1026, 1027, 1030, 1031, 1032], "less": [4, 5, 8, 52, 53, 60, 92, 95, 98, 106, 117, 123, 124, 150, 157, 168, 180, 182, 198, 200, 202, 233, 245, 247, 259, 260, 268, 270, 273, 302, 305, 306, 307, 313, 315, 344, 345, 355, 359, 361, 368, 373, 375, 384, 386, 399, 403, 404, 406, 407, 411, 428, 430, 432, 434, 437, 439, 441, 446, 449, 451, 452, 471, 472, 473, 485, 504, 520, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 579, 585, 608, 616, 623, 636, 650, 665, 667, 681, 690, 710, 711, 712, 713, 724, 740, 752, 767, 768, 773, 781, 783, 784, 787, 788, 789, 795, 812, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 851, 863, 865, 866, 868, 871, 877, 878, 888, 889, 896, 897, 898, 899, 914, 928, 965, 966, 968, 969, 970, 973, 975, 976, 979, 981, 986, 990, 991, 992, 996, 1009, 1011, 1018, 1019, 1021, 1022, 1024, 1025, 1026, 1028, 1032, 1033], "half": [4, 24, 98, 232, 236, 257, 259, 271, 368, 369, 404, 452, 511, 551, 582, 586, 591, 758, 847, 855, 976, 979, 992], "contigu": [4, 21, 375, 384, 396, 403, 407, 432, 436, 438, 448, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 769, 804, 828, 829, 888, 890, 891, 892, 893, 894, 991, 1021, 1028, 1032], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 71, 72, 73, 74, 75, 78, 86, 100, 103, 109, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 136, 137, 143, 144, 146, 150, 162, 163, 165, 167, 168, 170, 171, 174, 182, 193, 198, 200, 205, 206, 213, 214, 216, 228, 233, 239, 240, 241, 246, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 281, 283, 287, 288, 295, 297, 298, 303, 305, 306, 307, 308, 311, 312, 313, 316, 322, 323, 331, 334, 339, 349, 353, 355, 362, 373, 375, 378, 385, 386, 390, 400, 403, 406, 426, 427, 547, 549, 556, 557, 568, 648, 686, 687, 689, 691, 730, 816, 819, 837, 845, 846, 848, 896, 897, 898, 899, 965, 966, 971, 976, 978, 979, 984, 986, 991, 997, 1006, 1007, 1011, 1015, 1024, 1025], "timeseriessplit": [4, 182, 254, 403, 1024, 1025, 1030], "ts_cv": 4, "n_split": [4, 110, 116, 122, 162, 163, 168, 246, 254, 259, 261, 264, 269, 322, 331, 339, 355, 403, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806, 811, 1006, 1024, 1026], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 110, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136, 139, 142, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 235, 236, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 270, 272, 273, 274, 277, 279, 281, 283, 284, 285, 286, 288, 289, 291, 292, 295, 296, 297, 298, 301, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 319, 320, 322, 323, 324, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 368, 370, 371, 373, 375, 378, 379, 384, 385, 386, 389, 391, 392, 397, 399, 400, 403, 404, 406, 407, 408, 409, 410, 411, 426, 427, 428, 429, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 451, 453, 455, 458, 461, 467, 471, 472, 473, 474, 479, 482, 483, 493, 505, 506, 510, 512, 513, 515, 517, 520, 522, 523, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 541, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 571, 581, 582, 583, 586, 591, 599, 602, 603, 604, 605, 608, 609, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 627, 630, 632, 633, 634, 635, 636, 640, 641, 642, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 661, 665, 666, 667, 669, 670, 673, 677, 678, 680, 681, 684, 685, 692, 694, 696, 698, 701, 702, 710, 711, 712, 714, 715, 716, 718, 723, 726, 727, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 757, 769, 770, 772, 773, 775, 776, 777, 780, 782, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 845, 846, 847, 848, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 876, 877, 882, 888, 889, 890, 891, 892, 893, 894, 896, 898, 914, 923, 924, 925, 927, 929, 930, 939, 940, 944, 947, 965, 966, 968, 971, 972, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 988, 990, 991, 994, 998, 1002, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1019, 1020, 1021, 1023, 1025, 1026, 1028, 1032, 1033, 1034], "48": [4, 45, 102, 155, 241, 307, 370, 379, 399, 499, 586, 734, 812, 823, 965, 978, 986, 1014], "max_train_s": [4, 403, 806, 1025], "10000": [4, 11, 30, 43, 63, 72, 73, 124, 136, 184, 191, 198, 206, 214, 231, 233, 272, 313, 328, 355, 361, 406, 407, 550, 551, 633, 668, 865, 894, 988, 1007, 1011], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 71, 109, 115, 121, 122, 124, 125, 129, 167, 174, 182, 193, 198, 205, 206, 213, 214, 256, 257, 261, 266, 268, 272, 277, 287, 288, 295, 297, 298, 303, 305, 306, 313, 331, 339, 355, 378, 403, 687, 787, 802, 805, 806, 814, 816, 837, 966, 978, 979, 1006, 1007, 1018, 1019, 1024, 1025, 1030], "manual": [4, 46, 55, 168, 169, 171, 199, 209, 261, 279, 322, 329, 344, 346, 359, 360, 368, 373, 377, 378, 385, 389, 399, 403, 404, 405, 426, 438, 556, 838, 861, 867, 965, 970, 971, 972, 975, 976, 979, 986, 997, 1002, 1003, 1011, 1026, 1028, 1034], "inspect": [4, 31, 56, 61, 112, 117, 124, 126, 127, 131, 144, 150, 155, 156, 168, 169, 170, 171, 181, 190, 207, 238, 259, 262, 271, 282, 287, 290, 306, 311, 312, 313, 314, 316, 327, 328, 329, 332, 333, 344, 350, 360, 362, 375, 386, 399, 400, 406, 407, 453, 542, 543, 546, 547, 548, 549, 553, 554, 555, 817, 848, 849, 896, 897, 898, 899, 964, 976, 977, 980, 983, 984, 991, 996, 1011, 1013, 1021], "variou": [4, 12, 36, 37, 55, 58, 60, 61, 68, 81, 85, 98, 165, 168, 176, 208, 217, 218, 219, 220, 225, 231, 305, 312, 344, 346, 353, 355, 359, 367, 368, 369, 370, 373, 375, 378, 385, 387, 397, 398, 399, 401, 426, 430, 461, 491, 503, 504, 514, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 583, 591, 636, 640, 642, 644, 647, 650, 652, 654, 655, 657, 662, 664, 665, 680, 681, 785, 788, 789, 791, 799, 807, 808, 809, 810, 811, 812, 813, 814, 815, 848, 888, 889, 965, 966, 973, 976, 979, 983, 986, 990, 992, 996, 1000, 1010, 1011, 1018, 1021, 1022], "check": [4, 5, 8, 17, 46, 53, 56, 99, 116, 130, 150, 165, 167, 169, 170, 184, 186, 187, 198, 220, 234, 245, 252, 268, 275, 314, 321, 339, 353, 359, 360, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 386, 389, 390, 393, 400, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 491, 497, 498, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 676, 677, 678, 679, 680, 681, 682, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 908, 909, 910, 919, 920, 931, 937, 938, 960, 961, 962, 964, 971, 972, 973, 976, 991, 992, 997, 1000, 1013, 1018, 1019, 1021, 1025, 1029, 1030, 1031, 1032, 1033], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 20, 25, 32, 40, 44, 49, 62, 70, 105, 106, 114, 116, 122, 130, 137, 171, 238, 254, 257, 259, 260, 262, 263, 268, 272, 288, 303, 307, 311, 312, 313, 314, 315, 316, 323, 334, 345, 346, 361, 367, 368, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 389, 397, 398, 399, 400, 403, 405, 406, 407, 421, 423, 426, 439, 445, 446, 453, 454, 455, 460, 461, 467, 471, 472, 473, 477, 478, 479, 480, 481, 485, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 512, 521, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 578, 580, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 621, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 670, 673, 681, 685, 686, 688, 699, 701, 702, 705, 707, 713, 721, 734, 742, 766, 769, 771, 776, 780, 783, 784, 785, 788, 789, 791, 796, 797, 799, 807, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 852, 856, 859, 861, 862, 867, 869, 885, 889, 891, 894, 896, 897, 898, 899, 902, 904, 908, 909, 910, 914, 916, 917, 918, 920, 928, 929, 931, 947, 950, 960, 965, 966, 972, 976, 978, 979, 980, 983, 984, 987, 992, 994, 996, 997, 1000, 1002, 1006, 1008, 1011, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "train_0": 4, "test_0": 4, "iloc": [4, 130, 168, 169, 216, 259], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 55, 80, 85, 91, 101, 103, 105, 110, 114, 123, 143, 144, 151, 162, 168, 178, 188, 224, 227, 246, 259, 292, 295, 298, 301, 303, 307, 309, 316, 319, 320, 344, 347, 352, 355, 359, 379, 403, 406, 407, 433, 466, 490, 493, 559, 586, 667, 722, 782, 802, 814, 840, 858, 863, 865, 866, 869, 877, 878, 880, 881, 972, 976, 977, 979, 986, 1007, 1018, 1020, 1026, 1029], "760": 4, "68": [4, 8, 159, 189, 298, 319, 399, 524, 530, 579, 1018], "27": [4, 6, 19, 31, 47, 54, 98, 174, 175, 224, 261, 275, 319, 320, 340, 370, 399, 407, 409, 513, 702, 776, 777, 869, 889, 976, 986, 1010, 1018, 1020], "9993": [4, 642, 644, 1026], "12380": 4, "32": [4, 5, 51, 167, 170, 224, 236, 260, 275, 311, 315, 320, 367, 371, 378, 386, 396, 406, 407, 434, 553, 554, 571, 578, 623, 665, 867, 869, 908, 909, 941, 984, 986, 1010, 1018, 1021, 1024, 1026, 1027, 1030, 1031, 1032], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 74, 151, 170, 174, 231, 257, 259, 261, 279, 293, 306, 314, 344, 345, 355, 368, 379, 406, 407, 479, 550, 551, 633, 666, 990, 1011, 1029], "77": [4, 6, 44, 174, 268, 320, 367, 370, 523, 696], "0028": 4, "12381": 4, "72": [4, 6, 7, 116, 153, 378, 812], "9995": 4, "12382": 4, "240": [4, 44, 984, 1018], "82": [4, 30, 53, 58, 92, 144, 201, 290, 298, 319, 776, 785, 799, 976, 979, 1007, 1018], "9980": [4, 1026], "12383": 4, "13374": 4, "34": [4, 92, 123, 150, 224, 284, 298, 319, 320, 370, 403, 409, 509, 559, 586, 638, 656, 705, 752, 1007, 1018], "44": [4, 8, 72, 76, 85, 155, 168, 169, 182, 283, 409, 769, 869, 889, 892, 976, 983, 1018], "40": [4, 8, 14, 46, 54, 66, 78, 90, 95, 101, 126, 132, 150, 182, 189, 190, 192, 215, 221, 223, 235, 248, 260, 285, 291, 297, 303, 319, 320, 329, 330, 332, 334, 336, 338, 353, 360, 368, 403, 435, 484, 506, 507, 828, 829, 833, 845, 846, 965, 977, 986, 1018, 1019], "150": [4, 6, 90, 92, 114, 123, 136, 138, 140, 220, 224, 227, 272, 370, 403, 408, 493, 591, 809, 810, 811, 976, 1006, 1007, 1008], "53": [4, 53, 76, 177, 242, 399, 406, 524, 530, 778, 779], "15": [4, 6, 7, 12, 13, 14, 30, 31, 34, 40, 44, 53, 54, 61, 62, 66, 73, 74, 80, 82, 92, 98, 105, 109, 110, 114, 116, 119, 120, 123, 134, 142, 144, 146, 150, 154, 162, 167, 168, 169, 187, 195, 200, 212, 216, 221, 224, 227, 246, 247, 254, 262, 264, 267, 270, 271, 273, 282, 283, 287, 295, 296, 299, 301, 303, 305, 320, 323, 329, 331, 334, 338, 341, 350, 367, 368, 373, 385, 403, 406, 407, 429, 443, 479, 486, 520, 526, 544, 545, 587, 633, 641, 650, 652, 657, 665, 667, 681, 729, 803, 817, 840, 869, 965, 971, 972, 973, 976, 979, 980, 986, 991, 994, 1002, 1007, 1014, 1016, 1020, 1030, 1032, 1033], "0013": 4, "13375": 4, "39": [4, 237, 241, 368, 370, 371, 377, 399, 407, 484, 897], "49": [4, 42, 92, 367, 368, 370, 378, 399, 439, 446, 702, 714, 744, 752, 783, 785, 869, 976, 986, 1021], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 156, 168, 216, 334, 370, 379, 406, 407, 544, 545, 559, 723, 976, 1011, 1018], "08": [4, 15, 44, 50, 98, 107, 134, 164, 168, 169, 182, 217, 298, 309, 325, 370, 520, 532, 534, 552, 630, 647, 785, 845, 846, 867, 982], "910": 4, "42": [4, 5, 6, 8, 20, 24, 25, 26, 27, 31, 46, 56, 78, 92, 97, 103, 107, 117, 118, 120, 123, 124, 126, 130, 143, 144, 163, 168, 170, 171, 174, 177, 187, 190, 192, 193, 200, 204, 205, 206, 212, 213, 215, 220, 227, 233, 234, 237, 240, 258, 260, 263, 279, 285, 286, 287, 295, 302, 303, 304, 306, 308, 311, 313, 315, 322, 329, 331, 344, 345, 355, 360, 375, 378, 379, 386, 390, 399, 403, 406, 407, 410, 426, 433, 477, 481, 513, 520, 526, 533, 546, 547, 554, 555, 556, 557, 559, 666, 783, 787, 812, 814, 828, 829, 833, 837, 840, 880, 881, 883, 884, 885, 898, 899, 979, 986, 1007, 1011, 1014, 1015, 1018], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 55, 71, 92, 112, 132, 168, 169, 177, 186, 227, 306, 319, 320, 533, 637, 638, 645, 691, 695, 696, 715, 729, 744, 770, 777, 821, 965, 972, 976, 982, 983, 986, 1007, 1011, 1018, 1020], "26": [4, 46, 54, 80, 97, 155, 168, 224, 236, 272, 320, 379, 559, 637, 717, 771, 864, 876, 925, 976, 986, 1018, 1021, 1022, 1030], "47": [4, 85, 159, 190, 194, 368, 482, 483, 524, 530], "16": [4, 5, 10, 15, 19, 27, 43, 50, 51, 54, 66, 74, 80, 95, 98, 142, 169, 191, 197, 198, 199, 216, 219, 220, 221, 232, 236, 261, 262, 263, 283, 298, 301, 305, 311, 325, 345, 351, 368, 370, 371, 379, 385, 389, 391, 392, 403, 404, 407, 431, 460, 461, 467, 486, 491, 523, 524, 559, 578, 584, 585, 596, 597, 628, 639, 640, 643, 644, 645, 646, 671, 672, 798, 803, 814, 863, 889, 897, 965, 972, 976, 986, 991, 994, 1002, 1011, 1014, 1016, 1018, 1019, 1023, 1024, 1026, 1027], "9979": 4, "2331": 4, "31": [4, 70, 79, 216, 284, 314, 319, 320, 396, 407, 489, 550, 551, 586, 638, 660, 668, 941, 977, 1018], "060": [4, 739], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 174, 216, 298, 303, 320, 482, 483, 642, 644, 653, 654, 785, 791, 812, 976, 997, 1007], "275": [4, 242, 320, 1021], "2334": 4, "96": [4, 32, 48, 62, 157, 227, 257, 298, 303, 306, 307, 319, 320, 370, 403, 965, 971, 976, 986, 1018], "515": 4, "64": [4, 32, 48, 53, 58, 89, 95, 155, 168, 220, 231, 232, 236, 257, 268, 283, 288, 359, 360, 370, 371, 379, 404, 484, 491, 588, 589, 635, 647, 677, 678, 679, 680, 889, 979, 1008, 1014, 1018, 1020, 1026, 1027, 1030, 1031, 1032], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1027], "12329": 4, "46": [4, 8, 53, 198, 355, 379, 582, 583, 705, 892, 897, 986, 1014], "12330": [4, 1026], "52": [4, 68, 155, 172, 198, 344, 622, 783, 1018], "last": [4, 20, 44, 58, 89, 121, 123, 168, 177, 198, 199, 206, 211, 227, 250, 262, 270, 271, 306, 313, 315, 322, 349, 359, 368, 371, 375, 377, 378, 381, 386, 389, 399, 400, 407, 411, 427, 431, 436, 448, 453, 457, 504, 522, 548, 549, 550, 551, 572, 573, 576, 582, 583, 586, 599, 671, 672, 674, 675, 686, 687, 689, 690, 691, 696, 770, 783, 784, 788, 789, 804, 828, 829, 833, 848, 849, 853, 861, 867, 903, 928, 951, 965, 971, 972, 973, 975, 977, 980, 990, 997, 1002, 1009, 1018, 1025, 1026, 1027, 1032, 1034], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 54, 97, 119, 197, 235, 272, 298, 303, 319, 320, 406, 652, 776, 971, 976, 977, 986, 1011, 1018], "665": 4, "16380": 4, "71": [4, 216, 323, 370, 499, 718, 976, 1009, 1014, 1020], "16381": 4, "76": [4, 174, 198, 298, 320, 344, 355, 370, 379, 769, 1009], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 60, 62, 74, 92, 103, 110, 123, 159, 168, 209, 220, 225, 227, 232, 237, 242, 259, 305, 307, 320, 344, 345, 346, 371, 373, 379, 389, 391, 392, 400, 403, 404, 407, 436, 448, 481, 489, 490, 491, 493, 494, 499, 524, 525, 527, 529, 530, 546, 547, 548, 549, 552, 553, 554, 555, 558, 560, 561, 562, 563, 564, 566, 567, 578, 583, 588, 589, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 635, 638, 647, 648, 660, 703, 707, 719, 722, 723, 729, 731, 783, 784, 806, 821, 844, 845, 846, 852, 858, 866, 867, 878, 888, 889, 896, 897, 898, 899, 900, 924, 925, 965, 974, 976, 986, 994, 1014, 1016, 1018, 1019, 1022, 1023, 1025, 1026, 1028, 1029], "940": [4, 62, 68, 231], "6331": 4, "28": [4, 66, 98, 107, 123, 168, 214, 224, 268, 297, 319, 320, 370, 379, 399, 403, 439, 446, 986, 1007, 1018, 1021, 1024], "790": [4, 70, 288, 293], "89": [4, 32, 155, 189, 298, 319, 320, 971, 976, 986, 1011, 1018, 1021, 1029], "6332": 4, "6333": 4, "88": [4, 6, 8, 32, 189, 258, 298, 319, 320, 349, 368, 370, 373, 401, 462, 848, 1007, 1018], "820": [4, 828, 829], "79": [4, 6, 30, 32, 80, 81, 98, 174, 298, 320, 370, 378, 401, 463, 513, 586, 826, 1018, 1020], "6334": 4, "6335": 4, "70": [4, 6, 11, 66, 71, 73, 169, 244, 259, 320, 368, 370, 403, 482, 483, 702, 714, 744, 785, 799, 965, 986, 1007, 1014], "33": [4, 19, 80, 98, 198, 316, 320, 368, 370, 371, 377, 378, 379, 389, 391, 392, 399, 407, 521, 637, 701, 702, 717, 718, 726, 731, 771, 772, 775, 791, 812, 814, 816, 899, 972, 976, 986, 1007, 1018, 1026], "335": [4, 231], "74": [4, 214, 319, 320, 370, 579, 785, 799, 867], "16326": [4, 1030], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 155, 199, 368, 377, 381], "tree": [4, 7, 26, 27, 31, 41, 44, 55, 62, 108, 109, 112, 113, 114, 116, 120, 121, 122, 123, 124, 126, 130, 131, 134, 158, 162, 169, 171, 220, 234, 236, 238, 263, 279, 284, 292, 301, 302, 306, 313, 354, 355, 359, 362, 368, 370, 379, 385, 386, 388, 397, 399, 405, 410, 426, 430, 431, 432, 433, 434, 435, 437, 439, 446, 452, 484, 489, 493, 503, 504, 508, 533, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 620, 621, 622, 623, 647, 677, 681, 691, 692, 776, 791, 812, 814, 823, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 849, 852, 861, 920, 966, 973, 976, 977, 982, 983, 996, 997, 998, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "often": [4, 19, 24, 25, 33, 70, 74, 116, 128, 154, 162, 168, 169, 199, 216, 220, 246, 261, 264, 301, 306, 331, 341, 344, 345, 346, 359, 360, 367, 368, 370, 373, 375, 378, 381, 384, 385, 386, 388, 393, 397, 399, 400, 401, 403, 404, 406, 407, 409, 411, 457, 510, 513, 522, 525, 621, 635, 636, 641, 642, 649, 650, 651, 652, 661, 663, 676, 716, 858, 866, 874, 886, 965, 966, 968, 971, 972, 973, 974, 975, 976, 978, 979, 981, 982, 983, 986, 989, 990, 992, 1002, 1004, 1009, 1010, 1011, 1019, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "flexibl": [4, 25, 120, 162, 198, 302, 328, 346, 375, 380, 403, 409, 663, 888, 889, 965, 970, 972, 976, 980, 986, 997, 1000, 1027, 1031], "effici": [4, 5, 12, 13, 42, 46, 53, 55, 95, 116, 128, 174, 187, 191, 200, 206, 284, 344, 359, 365, 367, 373, 375, 376, 378, 379, 384, 386, 393, 396, 398, 399, 404, 405, 406, 409, 411, 431, 432, 435, 436, 438, 439, 441, 443, 446, 448, 450, 451, 485, 522, 523, 524, 527, 529, 530, 533, 552, 555, 563, 577, 580, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 621, 622, 623, 627, 629, 644, 647, 648, 653, 655, 657, 662, 664, 665, 666, 667, 668, 674, 675, 677, 714, 744, 751, 767, 768, 783, 784, 785, 799, 817, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 853, 865, 877, 881, 888, 897, 899, 925, 944, 965, 968, 970, 972, 973, 975, 976, 977, 979, 980, 981, 982, 984, 986, 987, 988, 989, 990, 991, 996, 1000, 1002, 1006, 1009, 1010, 1011, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "heteorogen": 4, "tabular": [4, 169, 375, 984], "mix": [4, 62, 69, 76, 96, 97, 165, 198, 301, 367, 375, 384, 386, 400, 404, 411, 453, 455, 456, 485, 522, 527, 529, 536, 589, 593, 619, 635, 636, 641, 647, 648, 649, 650, 651, 652, 657, 665, 667, 670, 785, 799, 814, 848, 861, 862, 868, 869, 940, 947, 950, 972, 981, 1010, 1030, 1032, 1033], "long": [4, 11, 12, 44, 62, 110, 123, 155, 163, 168, 170, 198, 234, 235, 262, 292, 301, 312, 344, 345, 355, 360, 373, 381, 384, 386, 387, 393, 398, 399, 409, 442, 487, 527, 665, 666, 667, 788, 789, 823, 824, 825, 826, 827, 845, 846, 856, 976, 982, 986, 987, 989, 990, 995, 999, 1020, 1024, 1030, 1032], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 56, 57, 58, 59, 60, 65, 80, 81, 82, 86, 90, 92, 95, 99, 100, 104, 105, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 126, 131, 132, 133, 144, 146, 150, 155, 156, 157, 159, 162, 165, 168, 169, 174, 176, 182, 184, 186, 187, 198, 200, 202, 206, 212, 214, 215, 216, 217, 219, 227, 231, 232, 235, 237, 244, 245, 247, 248, 249, 250, 252, 254, 259, 261, 262, 263, 265, 267, 271, 273, 275, 277, 279, 282, 283, 284, 285, 286, 288, 289, 290, 301, 303, 304, 305, 306, 308, 311, 313, 314, 316, 319, 321, 322, 323, 324, 326, 327, 329, 331, 333, 339, 342, 344, 345, 350, 353, 359, 362, 366, 368, 369, 372, 373, 375, 376, 384, 385, 390, 396, 397, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 416, 418, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 445, 446, 447, 450, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 599, 600, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 676, 677, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 751, 752, 756, 757, 758, 759, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 852, 853, 854, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 908, 909, 913, 914, 925, 929, 945, 947, 950, 951, 954, 957, 965, 966, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 996, 997, 999, 1002, 1008, 1009, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 55, 73, 75, 95, 99, 113, 115, 116, 123, 126, 128, 143, 155, 156, 170, 177, 178, 187, 189, 198, 200, 203, 204, 216, 232, 256, 262, 265, 268, 281, 288, 297, 301, 303, 314, 315, 331, 336, 345, 346, 359, 368, 373, 379, 382, 384, 385, 386, 389, 393, 398, 401, 403, 404, 405, 406, 408, 409, 410, 412, 431, 433, 435, 436, 439, 440, 441, 442, 447, 451, 462, 464, 488, 503, 523, 525, 527, 529, 533, 536, 538, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 571, 577, 578, 580, 623, 630, 632, 639, 643, 646, 647, 648, 653, 660, 661, 663, 666, 668, 674, 676, 678, 680, 681, 682, 684, 734, 767, 768, 785, 793, 795, 799, 803, 813, 823, 824, 825, 826, 827, 828, 829, 834, 845, 846, 853, 857, 858, 866, 868, 880, 881, 888, 889, 893, 894, 896, 897, 898, 899, 924, 925, 965, 968, 970, 972, 973, 975, 978, 979, 980, 984, 986, 989, 990, 991, 992, 996, 997, 1000, 1007, 1009, 1010, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "here": [4, 8, 9, 12, 13, 17, 24, 57, 58, 66, 78, 82, 89, 90, 92, 97, 98, 100, 102, 103, 104, 106, 110, 113, 116, 120, 124, 130, 144, 147, 150, 158, 159, 168, 169, 170, 174, 177, 182, 187, 191, 198, 204, 213, 214, 216, 219, 221, 227, 232, 234, 238, 245, 246, 247, 253, 256, 257, 259, 261, 262, 264, 268, 269, 271, 279, 281, 288, 296, 297, 298, 303, 306, 313, 315, 319, 321, 331, 339, 341, 346, 349, 355, 359, 360, 361, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 381, 384, 385, 390, 393, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 410, 412, 426, 429, 430, 431, 432, 433, 434, 436, 438, 441, 453, 461, 464, 525, 527, 528, 532, 533, 556, 557, 558, 559, 570, 571, 573, 577, 580, 583, 591, 617, 619, 636, 640, 642, 644, 650, 652, 654, 662, 664, 678, 680, 684, 701, 714, 734, 744, 780, 785, 788, 789, 791, 799, 807, 808, 809, 810, 811, 812, 813, 815, 824, 828, 829, 852, 860, 863, 866, 880, 881, 891, 942, 965, 968, 972, 973, 974, 975, 976, 979, 982, 986, 988, 989, 990, 991, 996, 997, 999, 1000, 1002, 1003, 1009, 1018, 1026, 1031], "ordin": [4, 53, 71, 130, 304, 307, 308, 313, 316, 367, 386, 406, 485, 556, 698, 853, 856, 861, 862, 869, 972, 973, 986, 997, 1026, 1032], "encod": [4, 8, 11, 48, 55, 71, 95, 115, 130, 165, 168, 169, 170, 197, 198, 268, 300, 302, 303, 304, 309, 313, 315, 316, 331, 344, 346, 365, 367, 369, 375, 378, 384, 386, 400, 403, 404, 406, 407, 409, 453, 476, 485, 492, 515, 520, 526, 528, 529, 531, 533, 534, 535, 537, 540, 551, 555, 556, 558, 570, 577, 578, 580, 619, 637, 647, 648, 658, 661, 669, 723, 787, 792, 794, 811, 814, 848, 849, 851, 853, 855, 856, 859, 861, 862, 869, 872, 886, 965, 966, 972, 973, 976, 978, 979, 981, 990, 996, 997, 1013, 1019, 1020, 1026, 1030, 1032, 1033, 1034], "know": [4, 53, 66, 120, 144, 147, 150, 159, 168, 216, 234, 235, 259, 277, 315, 319, 339, 345, 359, 373, 384, 390, 393, 399, 402, 403, 404, 407, 489, 493, 499, 635, 641, 647, 648, 714, 744, 785, 799, 873, 874, 876, 877, 878, 879, 896, 897, 898, 899, 965, 975, 976, 977, 979, 988, 1024, 1025, 1028, 1030], "treat": [4, 6, 71, 120, 130, 162, 168, 198, 268, 307, 313, 322, 355, 373, 384, 386, 396, 406, 407, 431, 550, 551, 577, 578, 580, 596, 597, 621, 627, 634, 660, 663, 742, 776, 857, 858, 864, 865, 868, 869, 873, 876, 877, 879, 966, 968, 972, 976, 977, 983, 986, 990, 992, 1007, 1022, 1030, 1034], "dedic": [4, 257, 341, 371, 377, 379, 384, 387, 395, 399, 573, 661, 663, 676, 965, 996, 1002, 1026], "rule": [4, 116, 174, 350, 353, 355, 359, 370, 373, 374, 375, 384, 386, 387, 394, 397, 398, 399, 403, 404, 406, 408, 525, 538, 539, 540, 541, 542, 550, 551, 558, 559, 591, 623, 634, 647, 648, 655, 657, 665, 666, 667, 695, 696, 785, 788, 789, 791, 799, 807, 811, 813, 837, 888, 901, 965, 970, 978, 979, 990, 992, 997, 1002, 1009, 1013, 1020, 1023, 1030], "pass": [4, 7, 8, 20, 21, 38, 116, 120, 127, 144, 179, 182, 199, 228, 230, 231, 234, 238, 240, 249, 257, 260, 308, 311, 314, 336, 346, 355, 359, 360, 361, 368, 373, 374, 375, 378, 379, 380, 381, 382, 384, 386, 390, 393, 395, 399, 400, 403, 404, 406, 407, 409, 410, 411, 417, 426, 427, 429, 431, 432, 433, 435, 436, 437, 438, 439, 441, 443, 446, 448, 449, 451, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 477, 480, 481, 484, 485, 486, 492, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 570, 571, 577, 578, 579, 580, 582, 583, 586, 596, 597, 599, 600, 606, 609, 615, 620, 621, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 720, 721, 730, 751, 762, 766, 767, 768, 769, 776, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 797, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 859, 860, 861, 862, 863, 865, 867, 868, 869, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 908, 909, 915, 919, 920, 924, 925, 927, 929, 931, 936, 937, 944, 946, 947, 950, 965, 966, 972, 974, 976, 977, 978, 979, 980, 983, 986, 989, 990, 991, 997, 1000, 1002, 1006, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "explicitli": [4, 46, 53, 117, 150, 157, 162, 163, 199, 230, 234, 304, 308, 311, 346, 355, 360, 367, 369, 373, 374, 375, 377, 384, 386, 390, 395, 403, 407, 409, 524, 538, 539, 568, 569, 586, 616, 637, 647, 648, 658, 669, 698, 715, 770, 776, 777, 788, 789, 819, 822, 828, 829, 854, 878, 879, 936, 944, 965, 966, 968, 970, 972, 973, 976, 978, 979, 986, 1000, 1011, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1032], "logic": [4, 360, 374, 375, 380, 395, 406, 992, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "integ": [4, 17, 48, 53, 71, 168, 198, 216, 312, 313, 355, 359, 367, 368, 370, 375, 378, 382, 385, 386, 399, 400, 403, 404, 406, 407, 423, 426, 451, 453, 456, 461, 476, 485, 487, 490, 491, 492, 494, 497, 498, 501, 503, 504, 508, 511, 539, 548, 549, 550, 551, 552, 556, 557, 561, 571, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 621, 622, 633, 640, 644, 648, 654, 662, 664, 665, 703, 723, 785, 787, 788, 789, 790, 792, 794, 799, 800, 801, 802, 804, 805, 808, 811, 819, 822, 824, 827, 828, 829, 853, 861, 862, 867, 868, 869, 872, 882, 884, 896, 897, 898, 899, 904, 939, 940, 941, 945, 966, 972, 977, 979, 986, 989, 991, 992, 1002, 1009, 1011, 1018, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033], "lexicograph": [4, 386, 556, 776, 780, 830, 838], "ad": [4, 13, 20, 75, 103, 105, 109, 116, 121, 143, 150, 156, 157, 177, 182, 200, 223, 233, 234, 259, 260, 261, 301, 312, 313, 314, 315, 316, 323, 345, 372, 373, 377, 379, 384, 386, 387, 404, 406, 407, 408, 409, 430, 431, 432, 434, 436, 438, 441, 448, 451, 453, 503, 511, 521, 524, 527, 529, 536, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 571, 578, 579, 580, 582, 591, 596, 597, 600, 602, 616, 618, 630, 631, 637, 639, 643, 647, 648, 658, 665, 667, 669, 684, 702, 703, 717, 718, 763, 765, 771, 772, 775, 777, 783, 784, 785, 799, 809, 816, 826, 845, 846, 847, 861, 867, 870, 885, 896, 897, 898, 899, 915, 965, 969, 971, 972, 973, 977, 979, 980, 982, 997, 1000, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "benefit": [4, 56, 74, 75, 168, 212, 223, 230, 232, 281, 315, 359, 373, 382, 386, 397, 399, 437, 450, 457, 497, 556, 557, 647, 648, 655, 657, 665, 666, 667, 886, 888, 965, 971, 979, 984, 986, 997, 1000, 1018, 1021, 1022, 1023, 1030, 1031, 1032, 1033], "prevent": [4, 55, 110, 123, 144, 167, 199, 301, 307, 308, 331, 344, 349, 355, 373, 375, 377, 384, 385, 399, 404, 407, 431, 438, 477, 478, 579, 580, 600, 716, 773, 845, 846, 873, 874, 876, 877, 878, 879, 976, 978, 981, 982, 986, 992, 1009, 1020, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 55, 57, 67, 127, 142, 147, 155, 156, 157, 167, 168, 169, 170, 187, 198, 216, 227, 230, 231, 234, 245, 249, 250, 259, 260, 262, 265, 268, 292, 301, 302, 305, 308, 311, 313, 314, 316, 331, 346, 355, 359, 360, 361, 367, 368, 370, 371, 373, 375, 377, 378, 379, 381, 385, 386, 387, 389, 390, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 423, 429, 435, 437, 438, 439, 441, 443, 445, 446, 450, 453, 456, 477, 478, 497, 498, 512, 523, 526, 528, 535, 540, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 568, 569, 571, 577, 578, 580, 582, 592, 599, 600, 609, 616, 621, 622, 634, 637, 647, 648, 655, 657, 658, 665, 666, 667, 668, 669, 681, 685, 689, 693, 705, 706, 708, 712, 724, 725, 740, 743, 745, 762, 766, 767, 768, 769, 778, 779, 781, 785, 788, 789, 797, 798, 817, 820, 828, 829, 834, 838, 847, 848, 852, 853, 857, 859, 861, 862, 869, 878, 879, 882, 885, 888, 896, 897, 898, 899, 900, 902, 904, 908, 909, 946, 960, 965, 966, 968, 971, 972, 973, 976, 977, 978, 979, 982, 983, 984, 986, 988, 989, 990, 991, 992, 996, 1002, 1004, 1008, 1009, 1011, 1019, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "unknown": [4, 16, 56, 168, 234, 259, 319, 321, 361, 368, 386, 393, 396, 407, 855, 861, 862, 939, 975, 986, 1002, 1022, 1026, 1030, 1031], "sake": [4, 123, 163, 168, 198, 306, 344, 346, 381, 384, 659], "simplic": [4, 13, 31, 182, 344, 346, 386, 405, 979, 980, 981, 991], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 71, 72, 98, 109, 115, 116, 117, 118, 119, 126, 127, 130, 133, 144, 150, 155, 163, 167, 168, 169, 170, 174, 177, 179, 187, 228, 229, 230, 234, 238, 239, 240, 241, 245, 246, 249, 257, 259, 260, 266, 271, 279, 292, 298, 307, 312, 313, 315, 316, 321, 333, 344, 345, 353, 368, 371, 372, 373, 375, 378, 379, 381, 384, 386, 390, 393, 399, 402, 403, 406, 407, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 492, 556, 566, 578, 647, 662, 664, 678, 682, 785, 788, 789, 797, 799, 809, 810, 811, 813, 866, 868, 888, 965, 972, 973, 982, 991, 992, 997, 999, 1000, 1002, 1004, 1007, 1009, 1010, 1011, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 53, 55, 59, 95, 116, 143, 150, 162, 169, 177, 178, 187, 198, 199, 216, 229, 231, 239, 241, 247, 254, 262, 268, 277, 279, 301, 304, 305, 308, 311, 312, 316, 340, 344, 345, 346, 349, 355, 359, 360, 367, 368, 371, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 389, 390, 393, 397, 399, 400, 403, 404, 406, 407, 408, 410, 411, 412, 413, 415, 416, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 912, 914, 915, 917, 919, 924, 925, 926, 927, 928, 929, 930, 939, 941, 944, 945, 946, 947, 949, 950, 951, 957, 960, 962, 963, 965, 966, 968, 970, 972, 975, 976, 977, 979, 980, 982, 983, 986, 988, 990, 991, 992, 1002, 1006, 1009, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "hyper": [4, 71, 116, 253, 259, 264, 298, 331, 355, 375, 384, 385, 386, 394, 403, 406, 408, 457, 633, 634, 789, 797, 799, 844, 886, 971, 972, 976, 979, 990, 991, 1002, 1013, 1018, 1032], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 55, 58, 60, 61, 62, 71, 72, 73, 79, 81, 82, 92, 95, 112, 114, 116, 119, 124, 125, 136, 137, 144, 147, 150, 154, 155, 156, 157, 158, 159, 162, 163, 165, 168, 169, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 198, 200, 202, 203, 206, 207, 215, 216, 223, 224, 227, 229, 232, 233, 234, 237, 244, 245, 246, 247, 249, 250, 253, 258, 259, 260, 263, 264, 267, 270, 271, 272, 274, 279, 281, 285, 286, 292, 295, 296, 298, 301, 302, 303, 311, 312, 314, 315, 316, 323, 326, 328, 333, 336, 340, 341, 342, 344, 345, 346, 349, 350, 351, 352, 355, 359, 360, 361, 362, 365, 366, 368, 376, 378, 379, 380, 381, 382, 384, 390, 394, 397, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 565, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 973, 975, 978, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 992, 996, 997, 1003, 1005, 1007, 1008, 1009, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "compos": [4, 5, 25, 69, 70, 71, 75, 86, 112, 120, 130, 165, 168, 169, 170, 198, 200, 216, 229, 239, 241, 307, 312, 314, 315, 316, 362, 385, 399, 400, 403, 409, 504, 601, 975, 1018], "columntransform": [4, 70, 71, 130, 168, 169, 170, 198, 216, 229, 239, 241, 307, 312, 314, 315, 316, 365, 367, 384, 385, 455, 456, 618, 853, 965, 966, 997, 1013, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "ensembl": [4, 7, 10, 26, 27, 31, 56, 109, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 162, 163, 169, 170, 171, 198, 220, 227, 236, 237, 239, 240, 256, 271, 277, 303, 307, 311, 312, 313, 314, 316, 344, 355, 359, 362, 377, 378, 385, 386, 397, 399, 403, 408, 426, 493, 504, 621, 622, 624, 647, 691, 788, 789, 814, 818, 849, 852, 861, 892, 896, 898, 899, 965, 976, 977, 982, 983, 992, 996, 997, 998, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "histgradientboostingregressor": [4, 7, 116, 120, 123, 124, 127, 130, 162, 169, 198, 307, 311, 312, 313, 314, 316, 377, 406, 549, 554, 621, 622, 624, 966, 983, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "cross_valid": [4, 120, 130, 168, 200, 255, 262, 307, 373, 385, 390, 564, 809, 810, 976, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1033, 1034], "pipelin": [4, 31, 54, 58, 71, 74, 76, 86, 115, 120, 141, 143, 148, 162, 163, 169, 170, 174, 177, 186, 187, 198, 199, 204, 212, 216, 220, 226, 227, 228, 232, 238, 241, 242, 252, 256, 258, 266, 273, 275, 279, 281, 287, 288, 295, 298, 303, 306, 308, 311, 312, 313, 314, 315, 316, 323, 344, 345, 355, 359, 362, 365, 367, 368, 373, 376, 386, 390, 403, 407, 409, 413, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 491, 504, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 596, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 702, 783, 784, 785, 786, 787, 788, 789, 792, 794, 799, 803, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 966, 972, 979, 980, 985, 986, 990, 991, 996, 997, 998, 1000, 1003, 1005, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "make_pipelin": [4, 31, 58, 86, 115, 120, 130, 143, 144, 162, 163, 168, 169, 174, 177, 186, 187, 198, 199, 204, 212, 216, 220, 227, 228, 229, 238, 239, 241, 256, 266, 279, 288, 295, 303, 306, 307, 308, 311, 312, 313, 314, 315, 316, 345, 355, 385, 390, 400, 403, 556, 665, 667, 840, 848, 873, 874, 876, 877, 878, 879, 888, 889, 890, 891, 893, 894, 966, 979, 986, 990, 991, 1021, 1028, 1031], "ordinalencod": [4, 120, 130, 169, 170, 198, 307, 316, 367, 386, 406, 570, 824, 856, 861, 869, 978, 986, 1026, 1027, 1030, 1031, 1032, 1033, 1034], "categorical_column": [4, 120, 168, 170, 456], "ordinal_encod": [4, 120], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 57, 62, 69, 74, 76, 86, 89, 97, 98, 100, 102, 104, 105, 108, 120, 130, 134, 144, 156, 163, 165, 168, 169, 170, 174, 190, 198, 199, 206, 212, 214, 216, 220, 223, 227, 229, 232, 234, 235, 241, 246, 256, 257, 260, 268, 279, 281, 287, 288, 289, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 316, 331, 334, 344, 346, 355, 362, 367, 368, 369, 370, 373, 375, 378, 382, 386, 390, 395, 397, 398, 399, 401, 404, 406, 407, 408, 409, 415, 420, 422, 426, 430, 431, 432, 434, 436, 438, 441, 453, 454, 455, 456, 457, 471, 472, 473, 474, 477, 478, 485, 492, 497, 498, 503, 504, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 546, 548, 550, 553, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 625, 627, 628, 629, 630, 631, 642, 647, 652, 662, 665, 673, 677, 678, 679, 680, 681, 683, 690, 691, 702, 741, 742, 773, 785, 788, 789, 799, 814, 817, 823, 832, 837, 840, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 888, 890, 893, 894, 917, 919, 965, 966, 968, 970, 972, 973, 976, 977, 980, 990, 991, 993, 996, 997, 998, 1002, 1007, 1008, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "remaind": [4, 120, 168, 187, 198, 200, 216, 316, 339, 349, 400, 453, 456, 1018, 1025, 1026, 1027, 1030, 1031, 1034], "passthrough": [4, 72, 120, 168, 169, 198, 216, 307, 316, 400, 453, 456, 556, 557, 847, 848, 986, 1027, 1029, 1032, 1033], "short": [4, 5, 120, 126, 189, 257, 297, 344, 373, 381, 403, 407, 411, 972, 973, 979, 1023, 1028, 1029, 1030, 1031, 1032, 1033], "easier": [4, 44, 62, 66, 82, 120, 177, 183, 229, 256, 257, 301, 331, 344, 355, 368, 373, 375, 378, 381, 384, 389, 401, 403, 457, 504, 886, 919, 971, 976, 983, 992, 997, 1000, 1011, 1027, 1032], "specifi": [4, 20, 55, 95, 120, 121, 151, 154, 156, 157, 158, 187, 199, 206, 244, 267, 359, 360, 367, 371, 373, 375, 382, 385, 386, 390, 393, 399, 400, 403, 404, 406, 408, 409, 411, 413, 426, 430, 434, 439, 441, 452, 453, 456, 458, 459, 461, 462, 463, 464, 465, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 504, 520, 522, 526, 527, 529, 530, 535, 536, 541, 546, 548, 549, 550, 551, 553, 556, 557, 572, 573, 582, 583, 586, 591, 599, 600, 609, 620, 621, 622, 627, 632, 635, 636, 637, 640, 641, 642, 644, 645, 647, 648, 649, 650, 651, 652, 654, 657, 658, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 676, 680, 687, 689, 691, 698, 700, 717, 718, 726, 742, 759, 767, 768, 771, 772, 775, 785, 787, 788, 789, 791, 792, 794, 798, 799, 802, 807, 808, 809, 810, 811, 812, 813, 815, 819, 822, 823, 824, 826, 827, 828, 829, 833, 861, 862, 863, 866, 867, 869, 884, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 920, 927, 960, 966, 972, 973, 975, 976, 979, 983, 984, 986, 989, 990, 991, 1006, 1010, 1018, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1033, 1034], "next": [4, 7, 25, 60, 80, 119, 120, 124, 133, 157, 167, 171, 191, 195, 198, 228, 236, 240, 241, 246, 254, 265, 277, 306, 307, 308, 313, 320, 344, 349, 353, 355, 362, 371, 373, 375, 377, 396, 399, 400, 403, 406, 497, 498, 599, 623, 681, 687, 689, 691, 769, 783, 784, 814, 942, 965, 969, 975, 976, 986, 1000, 1015, 1018, 1031, 1032], "verbose_feature_names_out": [4, 120, 168, 169, 170, 241, 307, 314, 315, 316, 400, 453, 456, 1031], "categorical_featur": [4, 71, 120, 169, 307, 313, 314, 315, 316, 378, 406, 550, 551, 621, 622, 983, 1026, 1030, 1033], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 75, 82, 86, 92, 95, 97, 100, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 136, 143, 144, 146, 150, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 179, 180, 184, 190, 197, 198, 201, 202, 204, 205, 206, 210, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 232, 235, 236, 237, 238, 240, 241, 244, 246, 247, 250, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 277, 279, 283, 287, 288, 289, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 322, 329, 331, 332, 333, 339, 340, 344, 345, 349, 353, 355, 375, 378, 382, 385, 386, 395, 399, 400, 403, 404, 406, 407, 411, 423, 426, 427, 429, 432, 436, 438, 440, 441, 442, 443, 447, 448, 449, 451, 458, 463, 477, 480, 481, 484, 486, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 572, 573, 582, 583, 596, 597, 599, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 621, 622, 623, 624, 627, 628, 629, 630, 631, 635, 636, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 663, 665, 666, 667, 668, 676, 678, 679, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 723, 776, 779, 783, 784, 787, 788, 789, 790, 791, 797, 799, 800, 801, 802, 803, 804, 805, 807, 812, 813, 814, 816, 818, 819, 820, 821, 822, 833, 837, 844, 845, 846, 848, 853, 865, 869, 877, 880, 881, 888, 889, 890, 893, 896, 897, 898, 899, 901, 902, 924, 925, 945, 947, 950, 965, 966, 968, 971, 976, 977, 978, 979, 980, 983, 984, 986, 991, 992, 1002, 1006, 1007, 1011, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "set_output": [4, 120, 165, 169, 226, 242, 306, 307, 376, 422, 431, 432, 434, 436, 438, 453, 457, 471, 472, 473, 474, 485, 493, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 555, 556, 557, 558, 559, 570, 571, 572, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 647, 677, 678, 681, 814, 832, 837, 840, 844, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 886, 1033, 1034], "across": [4, 55, 61, 67, 85, 116, 136, 168, 187, 192, 220, 254, 256, 259, 279, 301, 306, 374, 375, 382, 386, 393, 398, 399, 403, 407, 411, 426, 429, 439, 441, 443, 446, 449, 451, 458, 461, 463, 477, 480, 481, 484, 486, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 556, 557, 577, 580, 583, 591, 596, 597, 599, 600, 621, 622, 623, 628, 629, 630, 631, 635, 636, 639, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 665, 667, 668, 674, 675, 678, 679, 680, 681, 682, 683, 684, 693, 694, 706, 719, 745, 776, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 797, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 833, 837, 844, 845, 846, 853, 857, 858, 865, 866, 868, 869, 877, 880, 881, 883, 884, 888, 889, 890, 893, 896, 897, 924, 925, 947, 950, 965, 972, 974, 976, 986, 990, 992, 997, 1000, 1011, 1018, 1021, 1024, 1025, 1026, 1027, 1028], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 56, 58, 61, 70, 75, 92, 95, 97, 98, 101, 103, 105, 113, 115, 120, 121, 122, 123, 130, 153, 156, 158, 159, 163, 178, 186, 187, 190, 195, 198, 199, 206, 207, 208, 216, 219, 220, 234, 235, 237, 244, 245, 246, 247, 249, 250, 254, 257, 258, 259, 260, 262, 267, 270, 273, 279, 284, 286, 289, 292, 296, 298, 301, 303, 306, 307, 311, 323, 327, 331, 341, 344, 345, 346, 359, 368, 373, 375, 379, 380, 384, 400, 403, 407, 411, 497, 522, 586, 599, 600, 769, 861, 915, 920, 937, 976, 983, 991, 1007], "cv_result": [4, 71, 116, 257, 258, 260, 262, 390, 799, 811, 976], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 58, 60, 70, 71, 72, 73, 74, 75, 78, 82, 86, 103, 109, 112, 119, 120, 122, 123, 126, 129, 130, 137, 138, 143, 144, 147, 162, 165, 167, 168, 169, 170, 171, 174, 182, 189, 190, 193, 198, 200, 204, 206, 214, 216, 227, 232, 233, 234, 237, 241, 248, 252, 257, 259, 260, 261, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 275, 277, 286, 287, 288, 295, 296, 297, 298, 303, 306, 307, 308, 311, 312, 313, 314, 319, 320, 322, 323, 331, 339, 344, 345, 349, 355, 368, 373, 375, 378, 385, 386, 393, 394, 396, 397, 398, 400, 402, 404, 406, 408, 416, 418, 421, 426, 432, 436, 438, 441, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 491, 493, 521, 525, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 595, 598, 599, 600, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 687, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 730, 743, 744, 745, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 788, 789, 791, 799, 804, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 837, 838, 839, 844, 845, 846, 848, 868, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 927, 965, 968, 972, 974, 979, 982, 984, 986, 990, 997, 1005, 1007, 1009, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "neg_mean_absolute_error": [4, 130, 200, 976], "neg_root_mean_squared_error": [4, 307, 976], "mae": [4, 130, 198, 200, 547, 554, 733, 897, 899, 976, 992, 1025, 1026, 1030, 1031], "test_neg_mean_absolute_error": [4, 200], "rmse": [4, 81, 307, 738, 1029], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 63, 67, 70, 71, 73, 74, 75, 80, 85, 86, 92, 95, 98, 103, 104, 106, 113, 116, 117, 118, 119, 120, 122, 124, 136, 138, 143, 144, 146, 147, 150, 151, 153, 155, 159, 167, 169, 170, 171, 174, 182, 183, 184, 185, 189, 190, 193, 194, 198, 200, 201, 205, 206, 213, 214, 216, 220, 221, 224, 229, 231, 233, 234, 237, 241, 247, 253, 257, 258, 259, 260, 262, 264, 267, 268, 272, 279, 283, 290, 292, 296, 297, 298, 303, 306, 308, 311, 312, 313, 315, 319, 320, 323, 331, 344, 345, 346, 349, 353, 355, 359, 367, 368, 371, 374, 375, 381, 386, 390, 393, 400, 403, 406, 407, 409, 453, 456, 457, 461, 467, 491, 501, 530, 533, 538, 539, 548, 549, 550, 551, 553, 554, 558, 559, 566, 572, 573, 577, 578, 580, 601, 606, 619, 635, 636, 638, 639, 641, 642, 643, 645, 649, 650, 651, 652, 655, 656, 665, 666, 673, 702, 706, 725, 781, 783, 784, 786, 787, 790, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 817, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 845, 846, 847, 848, 849, 850, 858, 864, 868, 876, 886, 887, 888, 889, 890, 893, 901, 912, 937, 944, 966, 976, 977, 978, 979, 984, 992, 1002, 1006, 1007, 1009, 1010, 1011, 1018, 1020, 1026, 1027, 1029, 1033], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 58, 71, 73, 75, 86, 117, 118, 143, 147, 150, 151, 152, 154, 159, 167, 169, 170, 178, 182, 184, 190, 198, 200, 204, 213, 214, 216, 220, 231, 233, 257, 259, 260, 262, 265, 267, 270, 279, 295, 323, 344, 345, 346, 984, 1007], "std": [4, 11, 12, 37, 46, 50, 54, 61, 66, 79, 81, 82, 96, 97, 98, 117, 119, 120, 130, 137, 159, 162, 163, 168, 178, 183, 207, 231, 257, 258, 259, 261, 262, 264, 267, 269, 273, 307, 322, 334, 345, 355, 386, 399, 403, 406, 504, 595, 598, 868, 879, 986, 1010, 1026, 1030], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 58, 70, 75, 80, 85, 92, 95, 98, 100, 103, 105, 106, 112, 113, 117, 121, 132, 142, 147, 150, 154, 159, 169, 178, 182, 194, 198, 199, 213, 215, 216, 219, 230, 231, 232, 235, 244, 246, 247, 257, 259, 262, 264, 265, 266, 268, 269, 279, 284, 298, 303, 305, 306, 313, 316, 320, 339, 353, 359, 367, 370, 371, 373, 377, 379, 382, 386, 389, 390, 396, 397, 399, 402, 403, 404, 405, 406, 407, 409, 410, 433, 434, 436, 437, 439, 458, 460, 463, 467, 478, 504, 505, 506, 507, 512, 517, 527, 529, 530, 536, 546, 547, 548, 549, 552, 553, 554, 555, 577, 578, 579, 580, 596, 597, 603, 616, 638, 660, 668, 681, 685, 695, 696, 743, 790, 793, 795, 800, 801, 804, 824, 828, 829, 833, 853, 880, 882, 896, 897, 898, 899, 923, 928, 929, 951, 955, 956, 965, 968, 970, 972, 973, 976, 977, 978, 979, 980, 982, 983, 986, 988, 990, 991, 992, 1002, 1009, 1011, 1018, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "044": [4, 58, 194, 217, 257, 739, 976], "003": 4, "068": [4, 259], "005": [4, 259, 263, 267, 284, 301, 345, 379], "quit": [4, 53, 57, 86, 113, 136, 147, 168, 169, 196, 216, 267, 314, 344, 359, 378, 385, 399, 407, 971, 973, 978, 1000, 1026], "good": [4, 9, 20, 25, 27, 40, 44, 46, 49, 52, 53, 55, 58, 74, 81, 86, 105, 116, 119, 122, 123, 151, 155, 162, 168, 182, 187, 198, 199, 204, 213, 224, 227, 231, 234, 237, 245, 247, 253, 259, 265, 274, 298, 306, 307, 313, 319, 324, 331, 344, 345, 355, 359, 360, 361, 372, 374, 375, 376, 377, 379, 384, 386, 393, 396, 397, 399, 401, 403, 404, 406, 407, 408, 409, 426, 428, 433, 523, 548, 550, 551, 579, 619, 629, 636, 637, 645, 647, 648, 650, 658, 669, 679, 683, 711, 719, 730, 752, 813, 882, 925, 965, 971, 972, 973, 976, 977, 979, 980, 981, 983, 984, 986, 990, 991, 992, 997, 1000, 1002, 1006, 1009, 1011, 1024], "trial": [4, 264, 436, 438, 449, 660, 783, 784, 972, 1024], "without": [4, 5, 13, 24, 36, 42, 55, 56, 67, 68, 75, 100, 116, 122, 125, 127, 130, 143, 147, 157, 165, 167, 168, 169, 182, 187, 206, 227, 231, 234, 235, 238, 240, 253, 260, 264, 266, 280, 293, 301, 302, 306, 308, 311, 339, 345, 361, 368, 369, 371, 373, 374, 375, 377, 378, 379, 382, 384, 385, 386, 390, 393, 399, 400, 404, 406, 407, 408, 409, 423, 428, 430, 435, 447, 458, 463, 485, 493, 504, 521, 523, 544, 545, 552, 568, 569, 600, 616, 620, 623, 628, 648, 681, 689, 769, 788, 789, 790, 797, 799, 813, 814, 830, 837, 841, 847, 848, 851, 854, 857, 858, 860, 864, 865, 866, 868, 873, 888, 904, 944, 945, 965, 966, 970, 972, 973, 976, 979, 982, 986, 990, 991, 992, 996, 997, 1002, 1003, 1011, 1015, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034], "tune": [4, 44, 55, 71, 100, 116, 146, 150, 162, 169, 187, 203, 215, 223, 253, 264, 281, 302, 331, 344, 355, 359, 360, 361, 385, 386, 394, 398, 399, 403, 406, 408, 409, 441, 451, 548, 549, 583, 602, 603, 604, 606, 608, 609, 611, 612, 614, 632, 648, 679, 683, 844, 970, 971, 972, 973, 975, 976, 979, 980, 982, 990, 1003, 1013, 1018, 1032, 1034], "just": [4, 31, 70, 86, 95, 116, 120, 147, 188, 195, 220, 232, 259, 266, 270, 279, 295, 331, 344, 345, 355, 368, 372, 373, 374, 375, 377, 378, 381, 384, 385, 386, 396, 399, 400, 403, 406, 408, 409, 411, 457, 522, 524, 531, 535, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 568, 573, 599, 600, 635, 641, 646, 647, 649, 651, 655, 656, 657, 665, 666, 667, 791, 807, 837, 845, 846, 965, 972, 975, 976, 977, 980, 984, 986, 990, 997, 1009, 1018, 1022, 1024, 1026, 1030], "had": [4, 9, 47, 123, 155, 234, 301, 307, 314, 355, 373, 374, 407, 410, 433, 966, 976, 1000, 1002, 1018, 1019, 1025, 1026, 1027, 1028, 1029, 1033], "explicit": [4, 165, 169, 174, 226, 234, 242, 359, 360, 361, 372, 374, 384, 386, 387, 400, 407, 413, 461, 488, 490, 491, 530, 540, 541, 627, 628, 630, 665, 785, 786, 793, 832, 840, 848, 888, 893, 940, 944, 968, 970, 972, 976, 986, 992, 996, 1018, 1022, 1027, 1028, 1031], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 56, 60, 65, 66, 70, 71, 86, 95, 97, 100, 109, 110, 111, 126, 142, 147, 150, 162, 163, 168, 169, 170, 174, 177, 182, 193, 199, 200, 216, 231, 234, 238, 257, 259, 260, 262, 268, 281, 301, 306, 308, 314, 323, 331, 346, 353, 359, 361, 368, 371, 373, 374, 375, 376, 377, 381, 384, 386, 387, 388, 393, 397, 398, 399, 400, 403, 404, 406, 407, 409, 433, 436, 438, 439, 446, 453, 456, 482, 483, 497, 535, 556, 557, 558, 559, 596, 597, 605, 609, 610, 613, 621, 628, 653, 681, 756, 759, 762, 766, 767, 768, 769, 777, 785, 799, 806, 813, 852, 862, 866, 868, 869, 878, 879, 885, 896, 897, 942, 965, 966, 972, 975, 976, 977, 979, 980, 981, 986, 991, 992, 995, 996, 999, 1000, 1002, 1009, 1010, 1011, 1018, 1019, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "But": [4, 9, 53, 167, 199, 200, 259, 279, 301, 373, 384, 399, 402, 405, 406, 451, 734, 896, 897, 965, 976, 991, 997], "much": [4, 6, 7, 9, 19, 25, 39, 40, 55, 80, 82, 92, 98, 105, 115, 123, 124, 130, 131, 132, 150, 162, 163, 168, 169, 170, 171, 174, 195, 196, 200, 231, 234, 259, 261, 262, 265, 270, 297, 302, 306, 307, 313, 314, 316, 331, 336, 344, 345, 355, 359, 361, 368, 373, 374, 375, 378, 381, 384, 385, 389, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 436, 437, 485, 523, 524, 525, 527, 548, 549, 550, 551, 647, 648, 655, 657, 665, 666, 667, 681, 767, 768, 788, 789, 803, 863, 881, 888, 965, 968, 971, 972, 973, 975, 976, 977, 979, 980, 982, 984, 988, 989, 991, 992, 997, 1000, 1006, 1007, 1009, 1010, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "monoton": [4, 25, 108, 134, 165, 169, 216, 230, 312, 397, 550, 551, 621, 624, 625, 683, 695, 864, 876, 890, 893, 973, 977, 986, 991, 1025, 1029, 1033], "relationship": [4, 20, 111, 156, 167, 168, 177, 182, 198, 200, 201, 266, 302, 308, 386, 399, 401, 403, 409, 451, 625, 703, 973, 976, 978, 979, 983, 984, 1009, 1023], "case": [4, 7, 8, 25, 27, 37, 49, 52, 55, 57, 61, 66, 71, 72, 81, 86, 100, 103, 113, 115, 116, 123, 124, 130, 144, 146, 147, 150, 157, 168, 169, 182, 184, 187, 189, 198, 199, 200, 203, 206, 212, 214, 215, 216, 227, 231, 232, 233, 234, 238, 249, 253, 256, 258, 259, 260, 262, 265, 266, 268, 279, 286, 297, 301, 303, 306, 308, 311, 314, 344, 345, 346, 353, 355, 359, 360, 361, 367, 368, 371, 373, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 387, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 426, 429, 432, 433, 435, 436, 440, 442, 452, 453, 456, 463, 485, 497, 498, 504, 528, 530, 531, 532, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 570, 571, 577, 580, 582, 583, 586, 591, 595, 598, 599, 600, 614, 616, 617, 619, 621, 636, 637, 642, 645, 646, 647, 648, 650, 652, 655, 657, 658, 661, 663, 664, 665, 669, 671, 672, 673, 674, 675, 676, 692, 697, 698, 701, 707, 709, 710, 711, 714, 716, 717, 722, 723, 726, 730, 731, 733, 734, 736, 738, 741, 742, 744, 751, 766, 769, 771, 773, 776, 777, 780, 782, 784, 785, 788, 789, 791, 799, 803, 807, 808, 809, 810, 811, 812, 813, 815, 817, 825, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 848, 855, 857, 858, 861, 862, 863, 866, 867, 868, 869, 872, 878, 879, 880, 881, 888, 890, 893, 896, 897, 903, 904, 914, 925, 926, 944, 965, 966, 968, 970, 971, 973, 974, 975, 977, 978, 979, 980, 982, 983, 986, 990, 991, 992, 996, 997, 999, 1000, 1002, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "usual": [4, 40, 78, 79, 81, 122, 123, 125, 130, 167, 169, 184, 198, 199, 253, 256, 259, 268, 269, 302, 314, 331, 355, 359, 360, 371, 373, 375, 381, 384, 385, 386, 390, 396, 399, 400, 403, 404, 406, 407, 408, 439, 445, 527, 529, 531, 536, 548, 549, 596, 597, 619, 629, 647, 648, 655, 657, 665, 666, 667, 681, 714, 746, 791, 812, 816, 888, 925, 965, 966, 968, 971, 972, 973, 975, 976, 977, 980, 981, 982, 983, 986, 990, 991, 992, 1002, 1008, 1009, 1033], "hot": [4, 71, 115, 118, 130, 168, 198, 268, 302, 303, 307, 313, 331, 386, 406, 407, 540, 555, 570, 637, 647, 648, 658, 669, 851, 853, 855, 856, 859, 861, 862, 869, 972, 986, 1026, 1032, 1033], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 55, 57, 58, 60, 67, 73, 80, 86, 91, 96, 113, 115, 116, 118, 123, 124, 126, 128, 143, 144, 147, 150, 152, 157, 162, 163, 168, 169, 182, 186, 187, 198, 199, 202, 203, 206, 215, 216, 219, 221, 224, 227, 228, 230, 231, 232, 234, 241, 249, 256, 259, 260, 266, 274, 277, 279, 289, 295, 297, 298, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 322, 324, 331, 333, 339, 344, 345, 346, 349, 350, 353, 355, 359, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 390, 393, 395, 396, 397, 398, 399, 400, 403, 404, 406, 407, 408, 409, 410, 415, 421, 426, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 461, 463, 471, 472, 473, 474, 478, 485, 487, 492, 503, 504, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 570, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 586, 591, 596, 597, 598, 599, 600, 603, 608, 611, 612, 616, 617, 618, 619, 620, 621, 622, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 677, 678, 681, 682, 684, 690, 693, 695, 696, 717, 718, 726, 729, 730, 751, 757, 766, 771, 772, 775, 776, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 799, 807, 808, 809, 810, 811, 812, 813, 815, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 848, 854, 857, 858, 860, 861, 863, 864, 865, 866, 867, 868, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 908, 914, 939, 960, 965, 966, 968, 969, 970, 971, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 990, 991, 992, 995, 999, 1000, 1002, 1009, 1010, 1011, 1018, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "consist": [4, 7, 26, 32, 37, 56, 57, 70, 80, 90, 92, 95, 116, 120, 126, 133, 147, 153, 155, 158, 163, 198, 216, 233, 265, 268, 297, 306, 311, 314, 339, 345, 355, 359, 366, 368, 370, 373, 375, 379, 380, 381, 382, 385, 386, 387, 397, 399, 401, 405, 406, 407, 409, 417, 418, 421, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 479, 486, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 580, 600, 616, 617, 618, 619, 624, 627, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 680, 689, 723, 783, 784, 792, 816, 817, 818, 820, 821, 822, 823, 831, 832, 834, 836, 839, 840, 846, 851, 852, 853, 855, 859, 860, 863, 864, 866, 867, 869, 880, 881, 884, 888, 889, 891, 892, 894, 897, 899, 908, 910, 931, 947, 950, 965, 968, 969, 970, 972, 973, 975, 976, 977, 979, 980, 986, 989, 991, 992, 995, 996, 997, 1000, 1002, 1009, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 56, 58, 61, 71, 72, 79, 82, 86, 97, 100, 101, 127, 147, 150, 151, 152, 155, 156, 157, 159, 165, 169, 174, 178, 179, 186, 198, 200, 212, 213, 214, 216, 218, 221, 225, 227, 233, 249, 256, 259, 260, 261, 266, 296, 297, 298, 300, 301, 309, 312, 315, 324, 326, 328, 331, 342, 355, 358, 359, 365, 366, 367, 370, 373, 378, 382, 384, 385, 386, 398, 399, 400, 404, 406, 408, 409, 435, 436, 439, 440, 446, 453, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 490, 499, 503, 504, 513, 523, 527, 529, 530, 536, 538, 539, 550, 551, 571, 579, 580, 586, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 620, 621, 630, 633, 634, 635, 636, 638, 641, 647, 648, 649, 650, 651, 661, 663, 665, 666, 667, 670, 676, 677, 678, 679, 681, 683, 692, 705, 729, 735, 745, 747, 757, 763, 765, 791, 799, 802, 814, 815, 816, 828, 829, 830, 845, 846, 849, 852, 857, 858, 860, 863, 865, 866, 868, 873, 874, 875, 877, 878, 880, 881, 888, 889, 890, 891, 892, 893, 894, 952, 953, 954, 965, 968, 969, 972, 976, 977, 978, 979, 980, 984, 990, 991, 997, 1000, 1002, 1009, 1010, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "same": [4, 7, 8, 16, 20, 26, 34, 37, 40, 44, 53, 55, 57, 58, 64, 70, 71, 72, 92, 95, 97, 100, 103, 105, 111, 113, 117, 120, 121, 123, 124, 128, 147, 150, 168, 169, 171, 184, 186, 187, 192, 198, 199, 200, 206, 216, 234, 237, 238, 249, 254, 255, 256, 257, 259, 260, 262, 264, 265, 267, 272, 279, 284, 297, 301, 302, 304, 306, 307, 311, 313, 322, 331, 339, 344, 345, 346, 353, 355, 359, 360, 361, 367, 368, 370, 372, 373, 375, 377, 379, 382, 384, 385, 386, 387, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 420, 423, 427, 428, 435, 439, 445, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 482, 484, 485, 487, 493, 497, 498, 520, 521, 524, 525, 526, 527, 528, 529, 532, 536, 538, 540, 541, 542, 543, 546, 548, 549, 550, 551, 553, 554, 556, 557, 578, 579, 591, 592, 595, 599, 600, 602, 611, 616, 617, 618, 621, 622, 635, 638, 641, 642, 644, 647, 648, 652, 655, 656, 657, 661, 662, 663, 664, 665, 666, 667, 673, 676, 693, 694, 701, 702, 704, 706, 714, 719, 720, 724, 743, 744, 745, 766, 767, 768, 774, 776, 778, 780, 781, 783, 784, 785, 786, 788, 789, 791, 793, 794, 799, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 830, 831, 832, 836, 838, 839, 840, 851, 852, 853, 857, 858, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 877, 888, 889, 896, 898, 910, 914, 925, 942, 947, 950, 951, 961, 965, 966, 968, 970, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 990, 991, 992, 997, 1006, 1011, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "minmaxscal": [4, 5, 72, 143, 174, 220, 296, 313, 361, 400, 453, 874, 966, 986, 1020, 1023, 1026, 1028, 1029, 1030, 1034], "although": [4, 9, 25, 117, 130, 167, 195, 216, 227, 246, 277, 355, 361, 375, 386, 399, 400, 404, 407, 485, 802, 805, 859, 975, 977, 978, 979, 982, 992, 1002, 1009, 1010, 1011, 1018, 1026, 1033], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 55, 57, 70, 72, 73, 86, 106, 115, 116, 119, 125, 130, 147, 156, 168, 169, 182, 195, 198, 204, 216, 219, 220, 221, 224, 227, 230, 231, 232, 234, 235, 246, 247, 254, 259, 261, 262, 266, 268, 269, 277, 279, 292, 301, 303, 305, 307, 308, 314, 315, 322, 323, 329, 331, 339, 341, 344, 345, 346, 359, 367, 371, 373, 374, 375, 377, 381, 385, 386, 390, 393, 397, 398, 399, 400, 403, 404, 406, 407, 408, 409, 423, 429, 431, 435, 436, 438, 439, 443, 445, 456, 462, 468, 476, 488, 492, 497, 516, 524, 526, 527, 528, 530, 533, 535, 538, 539, 546, 547, 548, 549, 550, 551, 553, 554, 570, 571, 572, 577, 578, 580, 582, 583, 586, 591, 595, 599, 621, 627, 638, 639, 640, 643, 644, 645, 648, 660, 671, 672, 687, 689, 691, 696, 716, 717, 718, 722, 724, 726, 731, 734, 766, 771, 772, 775, 776, 780, 785, 788, 789, 799, 845, 849, 850, 851, 853, 855, 857, 860, 861, 862, 865, 868, 869, 877, 880, 881, 885, 888, 889, 896, 897, 898, 899, 903, 908, 912, 925, 928, 929, 942, 944, 960, 965, 966, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 984, 986, 990, 991, 992, 1011, 1018, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 55, 60, 62, 66, 71, 73, 75, 81, 86, 95, 98, 100, 102, 106, 113, 114, 115, 117, 120, 123, 124, 126, 128, 129, 139, 146, 147, 150, 152, 154, 158, 162, 168, 169, 170, 171, 178, 183, 184, 187, 188, 193, 199, 200, 202, 206, 212, 213, 216, 219, 220, 223, 227, 230, 232, 238, 244, 249, 250, 253, 254, 257, 259, 260, 262, 265, 266, 267, 268, 270, 271, 274, 279, 281, 285, 295, 296, 297, 301, 302, 303, 306, 311, 313, 315, 316, 319, 322, 324, 331, 335, 336, 339, 344, 346, 351, 352, 359, 360, 361, 367, 368, 370, 373, 375, 377, 378, 379, 381, 384, 385, 386, 387, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 423, 429, 430, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 446, 448, 451, 453, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 478, 497, 498, 500, 502, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 568, 569, 570, 571, 573, 577, 578, 580, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 623, 625, 629, 632, 641, 642, 647, 653, 654, 655, 656, 665, 666, 667, 675, 678, 679, 680, 681, 682, 683, 684, 697, 699, 701, 706, 713, 714, 716, 717, 718, 719, 720, 724, 725, 726, 742, 744, 745, 752, 759, 762, 766, 767, 768, 769, 771, 772, 773, 775, 779, 780, 783, 784, 785, 787, 788, 789, 790, 795, 799, 800, 801, 802, 804, 805, 809, 815, 816, 817, 819, 820, 821, 822, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 852, 853, 861, 862, 865, 866, 869, 877, 881, 885, 888, 890, 893, 896, 897, 898, 899, 900, 901, 908, 909, 924, 925, 927, 931, 941, 947, 950, 966, 968, 970, 971, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 988, 990, 991, 992, 996, 997, 999, 1002, 1006, 1007, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 71, 82, 86, 115, 118, 123, 147, 151, 154, 157, 168, 169, 171, 178, 184, 191, 198, 204, 206, 216, 233, 234, 245, 256, 259, 260, 265, 277, 279, 296, 297, 298, 301, 305, 306, 307, 308, 321, 331, 339, 344, 345, 346, 349, 355, 359, 360, 368, 375, 378, 381, 384, 385, 386, 390, 393, 396, 397, 399, 403, 404, 405, 406, 407, 409, 412, 421, 436, 437, 450, 454, 464, 471, 472, 473, 523, 525, 541, 543, 545, 547, 549, 551, 554, 557, 559, 577, 580, 596, 597, 600, 621, 622, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 665, 666, 667, 668, 669, 678, 698, 701, 702, 710, 711, 712, 734, 751, 773, 776, 780, 785, 799, 812, 816, 821, 822, 831, 834, 836, 838, 839, 840, 846, 857, 858, 866, 868, 869, 873, 874, 876, 877, 878, 879, 889, 891, 894, 897, 899, 940, 966, 968, 969, 970, 971, 972, 973, 974, 976, 977, 979, 981, 983, 986, 991, 992, 1000, 1010, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1034], "compar": [4, 5, 19, 20, 24, 25, 27, 36, 37, 43, 49, 54, 55, 57, 58, 64, 68, 72, 81, 84, 86, 87, 98, 103, 105, 108, 110, 111, 113, 119, 120, 123, 128, 130, 134, 147, 154, 162, 163, 165, 168, 170, 171, 176, 180, 182, 186, 187, 193, 195, 198, 201, 204, 206, 208, 215, 216, 217, 219, 220, 223, 226, 229, 232, 238, 240, 242, 246, 247, 252, 254, 256, 264, 266, 268, 270, 275, 280, 284, 288, 289, 293, 294, 299, 300, 302, 306, 309, 313, 344, 345, 346, 353, 355, 361, 368, 370, 373, 375, 396, 397, 399, 401, 402, 403, 404, 406, 408, 409, 429, 430, 431, 433, 434, 435, 437, 438, 439, 441, 447, 452, 453, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 479, 485, 491, 493, 501, 503, 511, 513, 517, 520, 526, 540, 541, 550, 551, 552, 553, 554, 560, 620, 628, 633, 634, 642, 644, 646, 647, 652, 655, 657, 665, 666, 673, 684, 694, 701, 704, 719, 726, 731, 774, 784, 785, 790, 799, 811, 814, 821, 830, 834, 837, 841, 845, 848, 849, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 869, 874, 877, 890, 892, 893, 965, 968, 969, 970, 972, 973, 975, 976, 977, 978, 979, 980, 982, 986, 987, 990, 991, 992, 995, 996, 1009, 1010, 1018, 1020, 1025, 1026, 1031], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 143, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 298, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 350, 351, 352, 353, 355, 359, 366, 367, 368, 371, 373, 374, 375, 376, 377, 379, 381, 382, 384, 385, 386, 389, 390, 392, 393, 395, 396, 399, 400, 403, 404, 405, 406, 407, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 449, 451, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 474, 479, 482, 483, 485, 492, 495, 497, 498, 520, 523, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 558, 559, 570, 571, 577, 578, 580, 616, 617, 618, 619, 620, 621, 622, 632, 635, 636, 638, 641, 642, 646, 647, 648, 649, 650, 651, 652, 655, 657, 659, 661, 665, 666, 667, 673, 677, 680, 681, 682, 684, 691, 692, 695, 696, 698, 701, 703, 714, 715, 717, 718, 722, 723, 726, 727, 742, 744, 761, 767, 769, 770, 771, 772, 775, 776, 777, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 814, 816, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 851, 852, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 890, 891, 893, 894, 896, 911, 923, 925, 929, 930, 931, 938, 939, 945, 947, 950, 963, 965, 966, 971, 972, 974, 976, 977, 979, 982, 986, 988, 991, 992, 995, 997, 999, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1018, 1021, 1022, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 143, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 224, 227, 230, 231, 232, 233, 234, 235, 236, 237, 239, 244, 245, 246, 247, 248, 249, 250, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 298, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 350, 351, 352, 353, 355, 359, 367, 368, 373, 375, 378, 379, 382, 384, 386, 390, 396, 399, 400, 403, 404, 405, 406, 407, 409, 412, 414, 417, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 449, 451, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 485, 486, 497, 498, 509, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 546, 547, 548, 549, 550, 552, 553, 554, 555, 558, 559, 570, 571, 574, 575, 577, 578, 582, 583, 586, 595, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 659, 660, 661, 663, 664, 665, 666, 667, 670, 671, 672, 673, 680, 681, 684, 688, 691, 692, 695, 696, 698, 701, 702, 703, 704, 714, 715, 717, 718, 722, 723, 726, 727, 729, 742, 744, 751, 757, 761, 766, 769, 770, 771, 772, 775, 776, 777, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 814, 815, 816, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 836, 838, 839, 840, 844, 845, 852, 853, 855, 861, 862, 863, 864, 865, 867, 868, 869, 876, 877, 880, 881, 883, 884, 885, 888, 890, 891, 893, 894, 896, 897, 898, 899, 906, 908, 909, 911, 913, 914, 923, 925, 930, 938, 939, 941, 945, 947, 950, 952, 953, 954, 965, 966, 971, 972, 974, 976, 977, 979, 980, 982, 986, 987, 988, 990, 991, 992, 1002, 1006, 1007, 1009, 1010, 1011, 1019, 1021, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 71, 73, 75, 86, 115, 130, 132, 133, 136, 138, 146, 147, 150, 162, 165, 167, 168, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 227, 228, 229, 230, 234, 236, 239, 241, 255, 262, 267, 268, 272, 273, 277, 298, 302, 303, 306, 308, 311, 312, 313, 314, 315, 323, 344, 355, 359, 361, 362, 372, 373, 375, 379, 381, 382, 385, 386, 390, 400, 406, 427, 454, 526, 528, 531, 532, 534, 535, 537, 556, 557, 558, 559, 586, 620, 621, 623, 624, 627, 629, 630, 631, 632, 689, 690, 776, 799, 807, 809, 810, 811, 819, 820, 821, 822, 846, 863, 867, 888, 889, 892, 895, 920, 968, 972, 976, 977, 982, 984, 986, 990, 1006, 1007, 1009, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "ridgecv": [4, 75, 130, 147, 168, 236, 386, 406, 557, 632, 661, 664, 972, 1018, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "onehotencod": [4, 71, 115, 120, 130, 168, 169, 198, 216, 229, 239, 241, 307, 312, 314, 367, 386, 400, 406, 455, 456, 555, 570, 571, 851, 855, 856, 859, 862, 869, 986, 1019, 1022, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "one_hot_encod": [4, 120], "handle_unknown": [4, 71, 115, 120, 130, 169, 170, 229, 239, 241, 307, 312, 315, 861, 862, 986, 1022, 1026, 1030, 1031], "ignor": [4, 6, 8, 17, 44, 49, 55, 62, 71, 112, 115, 120, 127, 130, 169, 186, 190, 198, 207, 213, 229, 234, 239, 241, 250, 296, 297, 306, 307, 312, 315, 336, 345, 350, 373, 375, 377, 379, 386, 389, 399, 400, 406, 407, 417, 418, 423, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 450, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 477, 492, 497, 498, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 570, 571, 572, 577, 578, 579, 580, 583, 591, 592, 599, 600, 616, 617, 618, 619, 621, 622, 624, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 696, 702, 703, 714, 717, 718, 726, 743, 744, 751, 757, 762, 766, 771, 772, 775, 776, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 845, 846, 847, 848, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 880, 881, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 922, 951, 972, 973, 976, 978, 982, 986, 991, 1007, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033], "sparse_output": [4, 120, 241, 307, 315, 555, 855, 859, 861, 867, 872, 986, 1033, 1034], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 56, 60, 65, 75, 82, 86, 95, 97, 98, 100, 101, 102, 104, 105, 110, 112, 113, 119, 123, 126, 127, 129, 130, 131, 147, 150, 153, 155, 156, 157, 158, 159, 162, 163, 168, 177, 178, 179, 180, 182, 183, 184, 186, 187, 192, 193, 195, 196, 198, 199, 200, 202, 203, 207, 210, 211, 216, 219, 220, 223, 232, 233, 240, 244, 259, 260, 261, 262, 263, 266, 267, 269, 271, 272, 277, 279, 282, 284, 287, 289, 295, 297, 301, 302, 303, 304, 306, 308, 312, 314, 315, 321, 323, 328, 329, 332, 333, 336, 340, 341, 344, 359, 368, 375, 379, 384, 401, 402, 404, 406, 408, 409, 411, 435, 460, 461, 467, 516, 520, 522, 524, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 549, 584, 585, 587, 600, 602, 604, 605, 612, 620, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 676, 711, 736, 823, 824, 825, 827, 845, 846, 884, 896, 897, 898, 899, 965, 972, 976, 978, 980, 984, 989, 990, 991, 992, 1006, 1009, 1011, 1015, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1030, 1031, 1032, 1033, 1034], "logspac": [4, 12, 73, 78, 103, 136, 137, 147, 151, 156, 168, 191, 202, 203, 231, 233, 248, 260, 272, 274, 283, 295, 303, 306, 331, 339, 807, 971, 972, 1006, 1007, 1009], "naive_linear_pipelin": 4, "142": [4, 58, 406], "014": [4, 379], "184": [4, 64, 68, 147, 198, 298, 379, 1009], "020": [4, 984], "three": [4, 7, 26, 40, 41, 46, 55, 58, 78, 90, 91, 110, 115, 117, 120, 122, 131, 132, 133, 144, 158, 168, 182, 190, 195, 198, 200, 207, 209, 233, 234, 244, 247, 307, 308, 312, 335, 360, 366, 370, 377, 389, 396, 399, 403, 404, 405, 407, 440, 451, 487, 698, 927, 969, 971, 972, 973, 976, 979, 986, 990, 991, 995, 1002, 1010, 1018], "higher": [4, 57, 80, 98, 103, 113, 115, 116, 123, 126, 150, 152, 157, 158, 168, 169, 170, 174, 198, 199, 216, 223, 224, 250, 253, 257, 259, 262, 273, 284, 306, 331, 344, 345, 346, 355, 359, 368, 371, 375, 396, 399, 401, 406, 408, 409, 410, 433, 437, 438, 460, 467, 498, 521, 528, 532, 537, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 562, 577, 580, 596, 597, 608, 616, 620, 624, 626, 635, 636, 641, 642, 649, 650, 651, 652, 665, 667, 668, 693, 712, 716, 740, 773, 783, 785, 788, 789, 791, 799, 806, 807, 812, 815, 834, 837, 863, 880, 881, 882, 890, 891, 892, 893, 894, 901, 968, 972, 973, 975, 976, 979, 983, 986, 990, 991, 1009, 1011, 1019, 1024, 1026, 1033], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 56, 58, 74, 75, 95, 97, 98, 105, 128, 143, 144, 150, 152, 154, 155, 162, 163, 169, 174, 186, 187, 219, 220, 221, 223, 224, 231, 232, 233, 250, 256, 262, 287, 298, 302, 306, 320, 337, 344, 346, 355, 368, 370, 372, 373, 375, 377, 378, 384, 386, 393, 396, 399, 400, 403, 404, 406, 407, 409, 410, 411, 412, 423, 426, 430, 432, 433, 434, 435, 436, 438, 439, 448, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 482, 483, 484, 490, 508, 520, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 565, 570, 571, 573, 577, 579, 580, 583, 596, 597, 599, 600, 603, 619, 621, 624, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 681, 685, 690, 716, 751, 757, 785, 786, 787, 788, 789, 792, 794, 799, 803, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 838, 839, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 864, 865, 866, 867, 868, 877, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 906, 908, 909, 913, 914, 935, 947, 950, 969, 970, 972, 973, 975, 976, 979, 982, 987, 988, 989, 990, 993, 996, 1000, 1002, 1011, 1021, 1022, 1024, 1026, 1028, 1030, 1032, 1034], "mere": [4, 259, 386, 815, 990], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 58, 75, 90, 95, 98, 112, 119, 122, 123, 128, 139, 152, 154, 155, 156, 163, 168, 180, 186, 187, 193, 200, 201, 204, 212, 220, 231, 232, 235, 277, 285, 286, 292, 295, 297, 301, 303, 304, 306, 324, 330, 337, 340, 382, 399, 402, 404, 471, 472, 473, 474, 501, 523, 524, 527, 529, 530, 538, 539, 552, 616, 620, 621, 643, 644, 645, 646, 671, 672, 693, 729, 745, 768, 788, 789, 837, 845, 846, 858, 867, 874, 925, 941, 972, 976, 979, 986, 1024, 1027, 1029, 1030, 1033], "properli": [4, 25, 55, 127, 155, 254, 311, 361, 371, 373, 377, 381, 389, 405, 888, 889, 890, 891, 892, 893, 894, 965, 1021, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "automat": [4, 8, 12, 46, 63, 65, 71, 103, 136, 146, 177, 201, 244, 245, 257, 260, 301, 308, 312, 316, 323, 333, 360, 362, 368, 371, 373, 375, 377, 381, 386, 389, 395, 399, 400, 401, 404, 406, 407, 408, 422, 439, 441, 445, 451, 453, 454, 456, 485, 488, 504, 527, 529, 530, 536, 538, 540, 546, 550, 553, 572, 577, 580, 583, 591, 632, 634, 635, 636, 641, 642, 647, 648, 649, 650, 651, 652, 655, 656, 657, 661, 663, 664, 665, 667, 670, 673, 676, 677, 680, 684, 787, 802, 805, 814, 824, 845, 846, 849, 850, 852, 861, 862, 869, 880, 881, 888, 889, 890, 893, 896, 898, 902, 914, 947, 950, 965, 967, 970, 975, 980, 986, 990, 992, 996, 997, 1006, 1018, 1021, 1022, 1023, 1029, 1032, 1033, 1034, 1035], "term": [4, 13, 14, 25, 32, 58, 100, 113, 116, 120, 123, 155, 167, 182, 186, 187, 198, 200, 202, 212, 215, 216, 257, 261, 279, 295, 314, 339, 344, 346, 361, 362, 373, 375, 377, 384, 393, 397, 398, 399, 401, 403, 404, 406, 409, 432, 436, 438, 441, 448, 451, 513, 524, 527, 529, 533, 536, 538, 577, 578, 579, 580, 593, 596, 597, 621, 622, 629, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 664, 665, 667, 669, 676, 684, 845, 846, 863, 867, 870, 888, 889, 890, 891, 892, 893, 894, 965, 967, 970, 971, 972, 973, 976, 977, 978, 980, 981, 986, 990, 991, 1002, 1011, 1026, 1032, 1033, 1034], "raw": [4, 12, 14, 37, 81, 97, 130, 155, 168, 174, 298, 308, 321, 346, 359, 368, 381, 386, 397, 398, 399, 401, 404, 407, 458, 463, 490, 491, 492, 548, 549, 550, 552, 571, 577, 578, 579, 580, 623, 666, 679, 683, 694, 774, 834, 892, 973, 976, 980, 982, 983, 986, 989, 1008, 1010, 1019, 1023, 1026, 1029], "recogn": [4, 29, 35, 86, 118, 165, 199, 314, 379, 390, 399, 407, 491, 686, 702, 814, 893, 976, 1002, 1035], "increas": [4, 7, 14, 26, 37, 43, 55, 57, 58, 61, 75, 98, 111, 113, 116, 119, 127, 143, 150, 154, 155, 156, 159, 168, 169, 174, 178, 180, 189, 198, 199, 200, 202, 216, 224, 231, 245, 246, 259, 260, 261, 266, 272, 295, 302, 303, 306, 313, 320, 331, 339, 345, 346, 349, 359, 360, 361, 372, 381, 382, 397, 399, 401, 404, 406, 407, 410, 429, 433, 435, 441, 452, 460, 461, 467, 521, 525, 542, 543, 548, 549, 550, 551, 556, 557, 577, 580, 616, 624, 625, 626, 634, 639, 640, 643, 644, 645, 647, 648, 655, 657, 665, 666, 667, 671, 672, 674, 675, 681, 695, 696, 701, 770, 777, 788, 789, 817, 836, 838, 839, 840, 843, 845, 846, 862, 888, 889, 925, 965, 967, 971, 972, 973, 975, 976, 979, 986, 990, 991, 992, 1000, 1018, 1020, 1023, 1027, 1029, 1030, 1033], "strong": [4, 165, 167, 168, 176, 191, 195, 202, 204, 217, 233, 308, 398, 404, 406, 409, 513, 638, 661, 969, 970, 972, 973, 975, 983, 991, 1009], "similar": [4, 5, 7, 12, 17, 20, 25, 26, 37, 49, 51, 57, 60, 75, 86, 95, 99, 123, 146, 150, 157, 167, 168, 169, 170, 182, 198, 200, 212, 219, 221, 222, 223, 227, 233, 234, 250, 256, 259, 262, 265, 266, 267, 277, 279, 301, 314, 330, 339, 345, 346, 355, 359, 365, 367, 369, 371, 372, 373, 375, 378, 379, 382, 384, 386, 393, 396, 397, 399, 402, 403, 404, 406, 407, 408, 409, 410, 429, 430, 432, 433, 434, 439, 441, 443, 444, 492, 497, 498, 525, 571, 578, 579, 580, 599, 666, 681, 684, 692, 694, 704, 708, 713, 716, 717, 719, 722, 726, 728, 743, 748, 749, 774, 778, 779, 782, 783, 784, 810, 815, 860, 881, 884, 888, 889, 890, 891, 909, 965, 968, 969, 971, 972, 973, 975, 977, 979, 980, 982, 983, 986, 988, 989, 990, 991, 992, 996, 997, 1002, 1010, 1013, 1018, 1022, 1023, 1024, 1026, 1030, 1031], "magnitud": [4, 105, 112, 151, 163, 168, 215, 264, 301, 306, 314, 359, 368, 379, 399, 406, 409, 602, 641, 693, 868, 972, 976, 980, 986, 990, 992, 1020, 1027], "discret": [4, 46, 105, 108, 134, 149, 160, 165, 169, 198, 216, 300, 304, 309, 361, 365, 368, 369, 377, 385, 386, 399, 404, 406, 407, 409, 427, 428, 437, 441, 449, 450, 451, 481, 503, 504, 509, 511, 542, 548, 560, 577, 578, 581, 584, 585, 588, 589, 596, 597, 599, 600, 601, 605, 606, 607, 646, 647, 730, 782, 785, 796, 814, 823, 824, 827, 849, 853, 861, 862, 865, 868, 877, 888, 893, 896, 897, 939, 965, 972, 973, 974, 976, 977, 979, 992, 996, 1002, 1013, 1020, 1023, 1031, 1032, 1033], "manner": [4, 75, 95, 144, 169, 174, 246, 315, 316, 360, 373, 379, 399, 404, 406, 407, 698, 828, 829, 965, 976, 992, 1021, 1028], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 58, 63, 67, 117, 118, 124, 125, 168, 170, 182, 213, 216, 246, 268, 288, 307, 308, 322, 344, 345, 346, 367, 375, 382, 386, 399, 400, 403, 406, 407, 429, 439, 443, 445, 453, 456, 485, 538, 539, 540, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 599, 622, 623, 624, 655, 657, 665, 686, 698, 742, 770, 785, 787, 799, 811, 816, 817, 820, 826, 835, 840, 845, 859, 861, 862, 869, 872, 888, 890, 896, 897, 898, 899, 913, 925, 939, 940, 972, 977, 986, 1000, 1009, 1026, 1029, 1030, 1032, 1033, 1034], "decid": [4, 11, 57, 60, 71, 250, 256, 259, 266, 368, 373, 387, 407, 409, 439, 446, 548, 549, 600, 624, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 660, 670, 673, 783, 830, 831, 832, 834, 836, 838, 839, 840, 851, 975, 982, 1000, 1031, 1034], "therebi": [4, 168, 403, 406, 968, 1028], "assumpt": [4, 9, 25, 27, 36, 68, 78, 79, 98, 155, 165, 167, 198, 227, 301, 379, 384, 385, 388, 397, 398, 399, 401, 403, 404, 407, 409, 436, 440, 442, 477, 492, 501, 521, 523, 530, 639, 643, 784, 785, 788, 789, 799, 825, 880, 881, 970, 972, 976, 977, 978, 979, 981, 982, 983, 986, 989, 992, 1025, 1031], "impli": [4, 150, 344, 345, 346, 404, 406, 409, 463, 562, 571, 599, 600, 611, 723, 912, 972, 973, 1011, 1029], "give": [4, 12, 13, 24, 25, 39, 44, 49, 60, 62, 64, 70, 71, 75, 97, 122, 150, 155, 159, 162, 168, 169, 187, 189, 195, 198, 199, 200, 227, 250, 256, 261, 268, 281, 285, 288, 298, 314, 315, 323, 359, 361, 368, 370, 372, 373, 375, 379, 381, 384, 385, 386, 387, 393, 396, 397, 398, 399, 400, 401, 404, 406, 407, 411, 423, 435, 436, 438, 440, 448, 461, 485, 488, 492, 522, 527, 538, 539, 540, 541, 546, 547, 553, 554, 555, 582, 583, 586, 596, 597, 627, 636, 650, 654, 665, 709, 718, 724, 727, 780, 785, 788, 789, 799, 809, 810, 811, 813, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 865, 866, 868, 869, 877, 972, 976, 979, 980, 981, 983, 984, 986, 990, 991, 992, 996, 1000, 1002, 1004, 1009, 1010, 1011, 1018, 1022, 1025, 1026, 1028, 1029, 1030, 1032, 1034], "lot": [4, 82, 168, 368, 373, 374, 375, 381, 404, 406, 788, 789, 880, 881, 965, 988, 990, 991, 996, 997, 1000, 1010, 1011, 1018, 1023, 1025, 1026, 1027, 1028, 1030], "addit": [4, 5, 7, 12, 13, 14, 66, 71, 82, 95, 98, 110, 114, 116, 117, 120, 121, 146, 155, 156, 157, 163, 168, 169, 177, 182, 187, 199, 200, 223, 238, 261, 268, 273, 277, 301, 312, 313, 321, 346, 351, 355, 359, 360, 365, 366, 367, 368, 369, 371, 372, 373, 375, 378, 379, 381, 384, 385, 387, 389, 393, 398, 399, 401, 403, 404, 407, 408, 409, 410, 422, 430, 431, 433, 434, 435, 439, 446, 458, 463, 485, 492, 521, 523, 525, 526, 528, 530, 531, 532, 538, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 571, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 600, 601, 608, 617, 619, 620, 624, 627, 628, 629, 630, 631, 632, 633, 634, 659, 676, 677, 681, 687, 688, 691, 730, 746, 747, 776, 778, 783, 784, 791, 807, 817, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 870, 880, 881, 888, 889, 919, 925, 944, 965, 970, 972, 976, 977, 979, 980, 983, 986, 988, 989, 990, 991, 992, 996, 1002, 1013, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 115, 119, 139, 147, 149, 154, 155, 157, 160, 165, 168, 169, 209, 210, 211, 212, 213, 216, 227, 231, 232, 248, 259, 262, 268, 269, 285, 292, 329, 330, 332, 333, 335, 337, 345, 353, 359, 368, 370, 371, 373, 379, 386, 388, 389, 390, 397, 404, 407, 413, 443, 457, 482, 483, 492, 510, 520, 525, 526, 536, 550, 551, 556, 557, 600, 611, 614, 655, 656, 657, 665, 666, 667, 676, 679, 681, 683, 689, 691, 705, 711, 716, 773, 809, 810, 811, 813, 816, 817, 844, 845, 846, 886, 901, 965, 972, 976, 977, 979, 984, 990, 992, 996, 997, 1011, 1021, 1029, 1032, 1033, 1034], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 40, 68, 267, 279, 345, 379], "131": [4, 13, 56, 110, 379, 976, 1019], "rate": [4, 109, 114, 120, 142, 169, 198, 205, 216, 231, 237, 256, 259, 266, 268, 269, 296, 297, 298, 361, 373, 399, 400, 404, 408, 435, 455, 525, 542, 543, 548, 549, 550, 551, 581, 584, 585, 587, 588, 589, 595, 633, 634, 657, 665, 666, 667, 681, 687, 691, 715, 770, 777, 844, 845, 846, 882, 965, 972, 973, 976, 979, 980, 990, 992, 1000, 1022, 1026, 1027], "better": [4, 5, 9, 19, 20, 24, 31, 50, 55, 74, 75, 78, 79, 80, 81, 86, 90, 95, 98, 113, 116, 122, 123, 130, 142, 154, 155, 156, 158, 162, 170, 178, 182, 184, 187, 198, 199, 200, 206, 213, 215, 216, 223, 232, 233, 234, 249, 253, 259, 261, 262, 265, 268, 269, 298, 305, 306, 315, 316, 331, 344, 345, 346, 349, 355, 359, 368, 372, 373, 374, 375, 377, 378, 379, 381, 386, 388, 393, 397, 399, 401, 403, 404, 405, 406, 407, 409, 438, 439, 527, 529, 536, 548, 549, 550, 551, 596, 597, 619, 660, 666, 681, 698, 713, 722, 727, 730, 751, 784, 813, 823, 824, 825, 826, 827, 828, 829, 834, 845, 846, 865, 866, 869, 877, 880, 881, 888, 889, 944, 965, 966, 968, 969, 970, 972, 973, 975, 976, 978, 979, 980, 984, 986, 989, 990, 992, 997, 999, 1000, 1004, 1006, 1011, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "confirm": [4, 86, 113, 120, 123, 170, 198, 200, 262, 265, 268, 306, 346, 377, 965, 986, 1026], "progress": [4, 7, 8, 95, 133, 147, 163, 191, 284, 315, 370, 373, 377, 378, 387, 389, 395, 399, 548, 549, 681, 817, 819, 822, 837, 845, 846, 1000, 1009, 1011, 1018, 1020, 1027, 1032], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 60, 62, 80, 81, 82, 85, 92, 98, 101, 123, 128, 136, 155, 162, 168, 169, 170, 187, 198, 199, 200, 203, 206, 216, 223, 227, 233, 234, 244, 261, 262, 265, 266, 268, 269, 274, 279, 297, 301, 314, 319, 322, 331, 341, 344, 346, 355, 359, 368, 372, 373, 375, 378, 379, 381, 384, 385, 386, 393, 397, 399, 401, 403, 404, 405, 406, 407, 408, 409, 431, 436, 441, 451, 460, 461, 467, 489, 493, 499, 546, 547, 550, 551, 553, 554, 556, 557, 578, 579, 611, 639, 640, 643, 644, 645, 653, 671, 672, 674, 680, 681, 684, 694, 731, 734, 778, 783, 785, 793, 795, 799, 802, 805, 828, 829, 853, 857, 858, 859, 868, 880, 881, 890, 893, 896, 897, 898, 899, 925, 965, 968, 969, 971, 972, 973, 974, 975, 976, 979, 980, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1009, 1010, 1018, 1023, 1024, 1026, 1029, 1031, 1033, 1034], "new": [4, 7, 8, 10, 50, 56, 58, 60, 70, 71, 103, 109, 112, 114, 115, 116, 123, 129, 130, 144, 147, 150, 156, 163, 170, 171, 198, 204, 212, 227, 258, 261, 266, 283, 285, 307, 312, 315, 320, 323, 330, 355, 360, 361, 367, 368, 370, 371, 372, 375, 376, 377, 379, 381, 382, 385, 386, 387, 389, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 417, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 489, 490, 491, 493, 494, 497, 498, 499, 501, 512, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 563, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 693, 697, 702, 703, 707, 710, 711, 712, 713, 715, 716, 717, 718, 719, 722, 727, 728, 729, 731, 734, 741, 742, 745, 749, 754, 755, 757, 766, 770, 771, 772, 773, 775, 776, 777, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 798, 799, 803, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 874, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 906, 908, 909, 911, 919, 920, 924, 925, 932, 933, 934, 935, 936, 939, 942, 944, 946, 951, 957, 963, 965, 966, 968, 972, 976, 977, 979, 980, 981, 982, 986, 988, 989, 990, 991, 997, 1000, 1002, 1003, 1006, 1009, 1011, 1016, 1020, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 368, 373, 973, 995], "1440": 4, "caus": [4, 25, 27, 123, 151, 168, 196, 198, 203, 216, 308, 346, 355, 371, 378, 397, 399, 404, 405, 407, 409, 432, 436, 438, 448, 498, 521, 571, 578, 599, 600, 823, 824, 825, 827, 852, 861, 863, 866, 867, 908, 909, 965, 966, 972, 976, 984, 986, 989, 997, 1002, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034], "signific": [4, 55, 116, 123, 143, 165, 216, 252, 259, 275, 277, 279, 344, 355, 367, 368, 384, 399, 402, 403, 406, 493, 521, 523, 538, 539, 616, 647, 648, 655, 657, 665, 666, 667, 804, 813, 888, 890, 891, 892, 893, 894, 975, 976, 979, 1018, 1020, 1021, 1022, 1026], "overfit": [4, 115, 123, 165, 169, 170, 177, 227, 246, 252, 254, 260, 264, 274, 275, 295, 302, 303, 305, 306, 307, 308, 331, 349, 351, 352, 368, 386, 397, 403, 406, 426, 477, 478, 556, 557, 646, 785, 788, 789, 799, 810, 811, 845, 846, 848, 863, 867, 971, 980, 982, 984, 986, 992, 1000, 1009, 1021], "avoid": [4, 7, 12, 44, 57, 62, 72, 115, 116, 168, 169, 200, 207, 216, 222, 234, 254, 260, 264, 282, 287, 289, 290, 305, 306, 327, 328, 345, 360, 371, 373, 374, 375, 377, 378, 379, 386, 387, 389, 393, 397, 399, 401, 403, 406, 407, 410, 429, 431, 433, 441, 451, 457, 482, 483, 484, 488, 497, 498, 523, 528, 532, 535, 574, 575, 623, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 678, 680, 682, 684, 701, 778, 785, 786, 790, 796, 799, 809, 810, 811, 848, 851, 857, 858, 860, 865, 866, 867, 868, 871, 873, 874, 875, 877, 878, 879, 881, 886, 925, 970, 973, 975, 976, 979, 980, 982, 984, 986, 991, 992, 997, 1011, 1013, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "kbinsdiscret": [4, 53, 165, 198, 216, 300, 303, 308, 309, 316, 501, 646, 851, 867, 897, 986, 1026, 1030, 1031, 1032, 1034], "re": [4, 8, 13, 26, 56, 70, 71, 120, 153, 167, 216, 234, 245, 249, 262, 264, 268, 312, 344, 346, 360, 373, 374, 377, 381, 385, 387, 390, 397, 403, 407, 458, 459, 460, 461, 462, 463, 464, 465, 544, 545, 550, 551, 552, 635, 641, 649, 651, 787, 802, 805, 896, 897, 898, 899, 972, 977, 979, 986, 991, 997, 1000, 1011, 1018, 1022, 1023, 1025, 1027], "fine": [4, 37, 119, 214, 250, 257, 351, 352, 370, 377, 386, 407, 435, 925, 979, 982, 997, 1028], "grain": [4, 31, 37, 232, 250, 303, 379, 407, 435, 997], "still": [4, 32, 44, 53, 55, 57, 62, 82, 99, 118, 120, 123, 130, 150, 156, 167, 168, 170, 177, 182, 198, 200, 216, 232, 262, 268, 301, 313, 314, 344, 345, 355, 361, 367, 372, 373, 375, 377, 378, 379, 381, 384, 386, 399, 403, 406, 407, 410, 429, 433, 443, 463, 485, 616, 621, 624, 626, 706, 744, 766, 769, 778, 779, 788, 789, 802, 805, 866, 868, 888, 906, 965, 966, 970, 972, 975, 979, 982, 984, 991, 992, 995, 997, 1000, 1018, 1020, 1023, 1024, 1026, 1027, 1028, 1031, 1032, 1033, 1034], "express": [4, 7, 12, 116, 150, 155, 168, 259, 260, 307, 313, 328, 346, 367, 368, 373, 374, 379, 399, 404, 407, 439, 445, 446, 577, 578, 580, 705, 785, 791, 799, 807, 809, 810, 811, 812, 815, 835, 972, 976, 980, 986, 987, 992, 1026], "advantag": [4, 5, 39, 55, 57, 95, 100, 198, 199, 227, 245, 260, 315, 355, 386, 397, 403, 404, 407, 409, 430, 434, 449, 523, 578, 638, 663, 664, 751, 816, 817, 818, 848, 849, 888, 889, 890, 891, 892, 893, 894, 965, 968, 971, 972, 973, 976, 977, 979, 980, 986, 990, 991, 992, 1021], "final": [4, 26, 40, 42, 55, 70, 71, 80, 82, 86, 91, 100, 109, 111, 113, 115, 120, 121, 124, 130, 133, 144, 155, 163, 167, 169, 174, 177, 182, 186, 187, 195, 198, 200, 215, 216, 220, 227, 241, 248, 257, 265, 279, 307, 308, 311, 312, 331, 359, 361, 371, 373, 374, 377, 385, 386, 396, 397, 399, 400, 403, 406, 407, 426, 431, 436, 437, 441, 448, 451, 453, 525, 544, 545, 556, 557, 559, 616, 636, 642, 648, 668, 679, 683, 708, 785, 816, 817, 848, 849, 885, 888, 965, 966, 972, 973, 976, 979, 982, 983, 986, 989, 1000, 1009, 1023, 1026, 1027, 1028, 1029, 1031], "observ": [4, 5, 7, 9, 11, 13, 16, 20, 24, 27, 37, 40, 43, 53, 62, 71, 78, 80, 81, 82, 96, 97, 100, 103, 109, 113, 114, 116, 117, 123, 126, 129, 138, 139, 147, 150, 153, 155, 156, 157, 159, 168, 169, 170, 177, 178, 193, 194, 196, 198, 199, 200, 202, 212, 216, 223, 224, 230, 231, 255, 259, 261, 262, 266, 279, 285, 292, 306, 322, 330, 331, 336, 339, 344, 345, 346, 351, 352, 368, 370, 386, 389, 397, 399, 400, 401, 402, 403, 404, 405, 408, 409, 430, 432, 434, 435, 436, 438, 448, 449, 458, 459, 460, 461, 462, 463, 464, 465, 513, 521, 540, 541, 552, 599, 600, 635, 641, 646, 690, 705, 707, 746, 806, 826, 834, 867, 869, 972, 975, 976, 980, 981, 982, 983, 986, 989, 990, 991, 992, 999, 1003, 1005, 1006, 1008, 1019, 1031, 1032, 1033, 1034], "complet": [4, 37, 38, 39, 44, 49, 52, 58, 62, 86, 128, 142, 144, 147, 165, 170, 171, 204, 226, 227, 234, 242, 257, 306, 308, 311, 345, 355, 368, 373, 377, 378, 381, 384, 400, 403, 404, 406, 407, 430, 434, 438, 441, 451, 452, 453, 456, 484, 525, 526, 527, 528, 533, 535, 547, 558, 559, 570, 576, 577, 578, 580, 616, 617, 618, 619, 634, 638, 646, 660, 662, 693, 694, 704, 705, 706, 719, 724, 725, 745, 774, 781, 816, 819, 822, 831, 847, 848, 849, 850, 911, 961, 965, 970, 972, 976, 977, 979, 991, 992, 1002, 1011, 1018, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "induct": [4, 36, 68, 123, 165, 386, 399, 406, 413, 430, 501, 553, 616, 620, 883, 884, 937, 960, 972, 989, 1020], "bia": [4, 27, 78, 108, 117, 118, 123, 134, 165, 168, 170, 177, 178, 180, 202, 264, 295, 339, 355, 368, 375, 386, 397, 401, 405, 406, 409, 513, 545, 548, 549, 596, 597, 603, 631, 637, 638, 647, 648, 658, 659, 669, 845, 846, 861, 863, 867, 873, 874, 876, 877, 878, 879, 897, 971, 972, 975, 976, 980, 981, 984, 990, 1009], "preserv": [4, 48, 100, 223, 231, 254, 375, 376, 398, 403, 404, 407, 570, 577, 578, 580, 635, 641, 685, 762, 766, 803, 804, 805, 872, 908, 909, 966, 972, 973, 986, 988, 1006, 1018, 1021, 1022, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "smooth": [4, 46, 47, 54, 155, 191, 199, 214, 307, 331, 370, 387, 399, 405, 409, 437, 438, 526, 527, 528, 535, 546, 547, 548, 549, 553, 554, 555, 579, 580, 608, 611, 665, 823, 824, 825, 827, 865, 869, 877, 896, 897, 898, 899, 972, 978, 986, 990, 991, 992, 1011], "local": [4, 20, 39, 57, 61, 95, 98, 116, 127, 155, 156, 165, 169, 199, 218, 221, 223, 225, 227, 237, 280, 293, 351, 352, 360, 370, 371, 373, 377, 379, 381, 389, 399, 404, 406, 407, 409, 436, 441, 451, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 491, 527, 529, 533, 536, 538, 548, 549, 552, 555, 599, 600, 677, 678, 679, 680, 681, 682, 684, 685, 746, 747, 831, 834, 837, 839, 849, 858, 881, 884, 892, 942, 974, 975, 979, 980, 992, 1010, 1012, 1013, 1022, 1026, 1030, 1033], "attempt": [4, 54, 169, 194, 204, 254, 344, 359, 372, 386, 399, 411, 435, 439, 446, 457, 620, 677, 678, 682, 803, 830, 831, 832, 834, 836, 838, 839, 840, 866, 868, 886, 908, 909, 972, 973, 979, 992, 1002, 1025, 1030], "each": [4, 7, 8, 10, 11, 12, 14, 17, 20, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 55, 58, 60, 61, 70, 71, 73, 74, 75, 85, 86, 89, 91, 92, 95, 96, 100, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 143, 145, 147, 152, 154, 159, 162, 163, 167, 168, 169, 171, 174, 177, 184, 185, 187, 192, 196, 198, 199, 200, 202, 203, 206, 213, 216, 220, 227, 228, 231, 232, 233, 234, 235, 238, 239, 241, 244, 247, 249, 253, 254, 255, 257, 259, 260, 262, 264, 265, 268, 269, 277, 279, 282, 284, 288, 290, 292, 295, 296, 298, 301, 302, 303, 304, 306, 307, 308, 311, 313, 314, 315, 319, 320, 321, 324, 331, 337, 339, 345, 346, 349, 350, 353, 355, 359, 360, 361, 367, 368, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 386, 390, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 416, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 449, 450, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 508, 511, 512, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 696, 697, 699, 702, 708, 713, 716, 717, 718, 726, 727, 733, 734, 736, 738, 739, 741, 742, 746, 747, 750, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 764, 766, 767, 768, 769, 771, 772, 773, 775, 776, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 877, 878, 879, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 914, 919, 920, 925, 927, 928, 932, 944, 952, 953, 954, 957, 966, 968, 970, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 1000, 1002, 1006, 1008, 1009, 1010, 1011, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "sine": [4, 150, 155, 156, 165, 192, 204, 243, 251, 351, 369, 604, 783, 784, 975, 992], "cosin": [4, 40, 273, 279, 284, 365, 368, 386, 399, 404, 405, 430, 434, 439, 446, 524, 579, 580, 609, 685, 748, 749, 750, 753, 758, 759, 762, 766, 767, 768, 828, 829, 833, 860, 979, 992, 1013, 1028], "match": [4, 20, 37, 45, 95, 98, 102, 116, 165, 174, 176, 198, 217, 221, 230, 346, 368, 371, 375, 377, 399, 404, 406, 407, 420, 438, 453, 455, 497, 498, 504, 515, 520, 526, 531, 537, 540, 556, 557, 561, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 647, 653, 654, 674, 675, 692, 693, 694, 702, 704, 708, 722, 766, 767, 768, 774, 828, 829, 833, 837, 851, 852, 853, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 888, 895, 901, 912, 944, 973, 975, 976, 978, 979, 998, 1002, 1011, 1013, 1018, 1024, 1025, 1026, 1028, 1030, 1031, 1034], "togeth": [4, 12, 51, 60, 71, 119, 130, 150, 156, 168, 179, 220, 223, 255, 307, 315, 334, 350, 355, 375, 377, 384, 385, 386, 393, 399, 406, 407, 414, 440, 442, 556, 557, 678, 704, 785, 799, 848, 849, 862, 972, 973, 977, 983, 986, 992, 993, 1000, 1003, 1005, 1024], "equival": [4, 14, 55, 57, 120, 126, 146, 150, 155, 168, 182, 216, 249, 268, 279, 306, 346, 355, 359, 371, 379, 382, 385, 386, 399, 400, 401, 402, 403, 404, 406, 408, 409, 430, 432, 433, 434, 435, 436, 438, 439, 446, 458, 463, 498, 523, 530, 547, 550, 551, 552, 554, 577, 580, 602, 605, 608, 610, 613, 635, 636, 637, 641, 643, 647, 648, 655, 656, 657, 658, 661, 665, 666, 669, 672, 676, 677, 682, 697, 698, 711, 722, 729, 735, 736, 737, 749, 758, 767, 768, 783, 784, 788, 789, 793, 795, 819, 822, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 845, 851, 857, 858, 860, 863, 864, 865, 866, 868, 876, 878, 879, 912, 923, 962, 965, 970, 972, 973, 974, 976, 982, 986, 990, 991, 992, 1026, 1027, 1028, 1029, 1031, 1032], "importantli": [4, 13, 96, 169, 174, 301, 399], "jump": [4, 199, 301, 370, 373, 407, 867], "functiontransform": [4, 70, 115, 198, 216, 323, 454, 986, 1023, 1024, 1026, 1031, 1032, 1033], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 56, 61, 70, 75, 92, 101, 103, 105, 113, 115, 122, 123, 126, 130, 153, 156, 158, 163, 177, 178, 186, 187, 190, 198, 199, 206, 207, 208, 216, 234, 237, 240, 241, 247, 249, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266, 273, 279, 284, 289, 292, 298, 301, 303, 306, 311, 327, 331, 344, 346, 349, 353, 359, 366, 367, 368, 373, 374, 375, 379, 380, 382, 384, 386, 397, 398, 399, 400, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 932, 935, 936, 937, 938, 939, 940, 942, 943, 945, 946, 947, 948, 949, 950, 951, 957, 960, 961, 962, 963, 964, 966, 976, 979, 983, 984, 991, 992, 997, 1002, 1007, 1009, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "lambda": [4, 7, 8, 10, 19, 56, 73, 122, 137, 178, 216, 259, 260, 305, 323, 395, 399, 404, 406, 407, 633, 634, 635, 636, 852, 864, 972, 986, 1006, 1026, 1032], "sin": [4, 13, 19, 39, 96, 111, 122, 123, 127, 129, 142, 150, 156, 157, 159, 177, 178, 182, 192, 199, 204, 221, 233, 250, 291, 302, 312, 338, 351, 352, 409, 505, 604, 752, 1010], "pi": [4, 13, 34, 39, 40, 96, 105, 127, 129, 142, 150, 178, 182, 186, 192, 199, 221, 244, 245, 246, 249, 250, 273, 292, 312, 352, 389, 405, 409, 505, 506, 507, 604, 631, 970, 971, 972, 978, 1010], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 127, 129, 155, 165, 168, 199, 221, 259, 273, 315, 352, 377, 405, 407, 438, 440, 442, 477, 500, 580, 708, 752, 781, 971, 986, 1000, 1012, 1013], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 57, 62, 69, 76, 86, 98, 100, 123, 125, 127, 146, 150, 151, 155, 157, 165, 166, 168, 169, 171, 172, 182, 198, 199, 200, 203, 204, 218, 223, 225, 241, 245, 249, 259, 260, 261, 264, 267, 268, 298, 300, 302, 309, 312, 318, 325, 331, 336, 339, 340, 341, 344, 345, 346, 355, 360, 371, 373, 375, 378, 384, 386, 397, 399, 400, 404, 405, 406, 407, 409, 410, 426, 432, 433, 435, 436, 438, 439, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 479, 485, 489, 503, 513, 514, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 578, 579, 580, 583, 595, 598, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 679, 680, 681, 690, 692, 741, 773, 783, 785, 786, 787, 788, 789, 790, 792, 794, 796, 799, 803, 804, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 838, 839, 845, 846, 848, 851, 852, 853, 854, 855, 857, 858, 860, 864, 865, 866, 867, 868, 869, 874, 877, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 908, 909, 925, 942, 950, 965, 970, 972, 973, 975, 976, 977, 983, 986, 989, 991, 992, 1007, 1009, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "expans": [4, 162, 313, 439, 863, 1027], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 117, 123, 128, 150, 155, 157, 169, 188, 200, 215, 295, 303, 339, 355, 359, 366, 376, 387, 399, 401, 408, 647, 648, 888, 889, 895, 970, 1009, 1024], "beyond": [4, 27, 199, 200, 359, 361, 372, 373, 384, 397, 406, 893, 973, 977, 986, 991, 997, 1026], "pd": [4, 12, 25, 71, 72, 73, 116, 117, 123, 127, 155, 162, 167, 168, 169, 170, 177, 182, 187, 198, 206, 216, 237, 238, 241, 249, 257, 259, 260, 262, 270, 271, 306, 307, 308, 314, 315, 339, 344, 345, 378, 386, 400, 453, 455, 616, 617, 618, 619, 621, 766, 906, 908, 909, 965, 966, 983, 986, 1029, 1031, 1032, 1033], "hour_df": 4, "datafram": [4, 25, 70, 71, 72, 73, 116, 120, 123, 127, 155, 162, 167, 168, 169, 170, 177, 182, 187, 206, 216, 238, 241, 249, 257, 259, 260, 262, 270, 271, 306, 307, 308, 314, 315, 316, 339, 344, 345, 367, 368, 373, 375, 378, 386, 400, 422, 431, 432, 434, 436, 438, 453, 455, 456, 457, 471, 472, 473, 474, 478, 479, 480, 481, 485, 489, 490, 491, 493, 494, 499, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 555, 556, 557, 558, 559, 570, 571, 572, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 677, 678, 681, 785, 788, 789, 799, 814, 832, 837, 840, 844, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 886, 904, 931, 947, 950, 965, 966, 997, 1011, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "arang": [4, 11, 13, 16, 40, 58, 60, 65, 73, 79, 80, 103, 106, 109, 119, 120, 121, 122, 124, 125, 128, 132, 143, 150, 152, 157, 158, 162, 163, 171, 182, 198, 201, 203, 207, 222, 230, 232, 254, 259, 262, 267, 270, 277, 279, 292, 295, 303, 314, 319, 320, 322, 324, 331, 338, 344, 346, 351, 352, 353, 355, 384, 396, 403, 407, 454, 533, 814, 863, 867, 971, 972, 980, 986, 990, 1007], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 58, 72, 80, 85, 95, 98, 105, 113, 118, 119, 128, 139, 145, 150, 152, 153, 154, 155, 156, 157, 159, 177, 189, 195, 211, 212, 214, 215, 220, 222, 224, 227, 232, 236, 248, 257, 283, 285, 292, 295, 297, 298, 302, 303, 304, 308, 311, 314, 315, 324, 330, 331, 335, 336, 337, 340, 341, 384, 396, 404, 406, 407, 434, 454, 573, 620, 814, 863, 867, 972, 986, 992, 1007, 1010, 1023], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 58, 62, 90, 96, 99, 106, 128, 174, 189, 214, 216, 219, 220, 221, 222, 223, 224, 230, 231, 234, 235, 237, 241, 279, 283, 296, 301, 302, 306, 307, 308, 311, 314, 316, 331, 344, 345, 346, 355, 365, 368, 375, 378, 379, 386, 395, 400, 404, 407, 408, 415, 422, 431, 432, 434, 436, 438, 453, 455, 457, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 677, 678, 679, 680, 681, 832, 837, 840, 844, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 886, 966, 968, 972, 977, 979, 986, 987, 988, 1002, 1007, 1010, 1011, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1032, 1034], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 61, 62, 68, 94, 107, 128, 165, 192, 199, 204, 219, 221, 224, 227, 230, 231, 328, 331, 367, 369, 373, 375, 382, 386, 399, 400, 404, 407, 409, 430, 441, 451, 453, 456, 477, 479, 480, 481, 482, 483, 489, 490, 491, 493, 499, 503, 522, 530, 538, 573, 575, 624, 632, 646, 661, 680, 726, 767, 809, 813, 817, 855, 904, 908, 909, 924, 939, 962, 963, 970, 972, 973, 976, 983, 987, 992, 1002, 1008, 1018, 1022, 1025, 1026, 1027, 1030, 1032], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 56, 57, 58, 59, 60, 62, 67, 80, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 111, 112, 116, 119, 126, 128, 129, 131, 139, 142, 150, 151, 152, 154, 156, 157, 158, 159, 167, 168, 174, 178, 181, 188, 190, 194, 195, 196, 199, 200, 201, 207, 210, 211, 212, 215, 219, 220, 221, 222, 223, 224, 227, 232, 233, 235, 244, 245, 246, 247, 248, 249, 250, 254, 260, 262, 273, 279, 285, 286, 287, 288, 289, 290, 291, 295, 301, 303, 304, 306, 315, 321, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 344, 350, 351, 352, 401, 620, 690, 970, 972, 1009], "color": [4, 7, 8, 9, 10, 11, 12, 16, 20, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 79, 80, 81, 82, 86, 91, 92, 95, 96, 97, 99, 102, 103, 104, 105, 109, 111, 116, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 136, 139, 150, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 170, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 190, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 215, 216, 220, 221, 222, 224, 227, 231, 232, 233, 235, 238, 244, 245, 246, 247, 248, 249, 250, 254, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 272, 277, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 301, 302, 303, 305, 306, 307, 312, 321, 322, 324, 329, 330, 331, 332, 333, 335, 337, 338, 340, 350, 351, 367, 368, 370, 381, 399, 406, 407, 436, 482, 483, 495, 572, 573, 767, 950, 990, 992, 1023, 1028, 1030], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 114, 122, 125, 128, 137, 150, 165, 174, 198, 219, 221, 226, 234, 242, 260, 263, 268, 282, 287, 290, 292, 300, 301, 309, 323, 331, 337, 345, 346, 367, 374, 384, 386, 390, 397, 398, 399, 400, 403, 404, 406, 407, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 485, 487, 491, 498, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 750, 753, 783, 784, 785, 788, 789, 796, 797, 799, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 876, 877, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 930, 934, 965, 968, 973, 976, 978, 988, 991, 992, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 58, 60, 61, 63, 65, 70, 71, 74, 86, 95, 97, 104, 106, 115, 119, 123, 128, 144, 150, 156, 174, 182, 199, 219, 220, 221, 223, 231, 232, 233, 237, 238, 245, 250, 267, 270, 271, 279, 288, 289, 303, 313, 344, 345, 346, 353, 355, 359, 365, 368, 369, 370, 373, 380, 384, 385, 386, 396, 398, 399, 402, 404, 405, 406, 407, 409, 432, 436, 437, 438, 441, 451, 453, 454, 455, 456, 471, 472, 473, 487, 521, 523, 524, 527, 528, 529, 530, 532, 533, 538, 562, 571, 577, 578, 580, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 621, 622, 627, 629, 630, 631, 632, 677, 678, 679, 681, 682, 683, 685, 785, 788, 789, 791, 799, 807, 818, 828, 829, 836, 837, 838, 839, 848, 853, 854, 860, 865, 880, 881, 882, 901, 929, 968, 969, 970, 971, 972, 974, 976, 977, 979, 980, 981, 982, 986, 987, 988, 989, 990, 991, 992, 996, 997, 1002, 1009, 1011, 1012, 1013, 1018, 1019, 1021, 1026, 1027, 1028, 1032, 1033, 1034], "akin": [4, 199, 386], "sort": [4, 8, 10, 12, 19, 20, 24, 60, 70, 113, 120, 123, 129, 147, 177, 182, 198, 199, 216, 236, 259, 260, 263, 273, 291, 338, 344, 351, 352, 373, 377, 381, 382, 386, 403, 406, 407, 409, 523, 530, 544, 555, 570, 599, 606, 686, 701, 707, 717, 718, 726, 742, 771, 772, 775, 777, 785, 811, 823, 824, 825, 826, 827, 828, 829, 836, 838, 839, 840, 843, 853, 859, 861, 862, 865, 867, 869, 877, 890, 893, 925, 930, 972, 979, 982, 986, 1000, 1011, 1018, 1022, 1028, 1029, 1030, 1032, 1033], "analog": [4, 19, 125, 379, 406, 976, 977, 991, 1027], "clock": 4, "25th": [4, 866], "back": [4, 100, 239, 360, 373, 375, 387, 393, 400, 407, 423, 432, 435, 436, 448, 471, 472, 473, 497, 498, 522, 523, 524, 527, 529, 530, 533, 570, 619, 647, 648, 655, 657, 665, 666, 667, 716, 853, 855, 856, 857, 861, 862, 863, 865, 866, 868, 880, 881, 888, 972, 976, 980, 997, 1002, 1011, 1021, 1026, 1028, 1029, 1032], "natur": [4, 31, 116, 123, 157, 168, 169, 174, 182, 198, 199, 215, 216, 223, 244, 250, 268, 344, 373, 375, 386, 404, 406, 407, 410, 433, 439, 446, 540, 579, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 681, 693, 729, 743, 745, 830, 831, 832, 834, 836, 838, 839, 840, 867, 923, 972, 973, 975, 976, 979, 981, 986, 990, 996, 999, 1018, 1026], "sp": [4, 168, 966, 1010], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 56, 57, 59, 60, 61, 65, 71, 72, 74, 86, 90, 91, 92, 100, 101, 102, 110, 112, 113, 119, 120, 126, 128, 129, 131, 132, 137, 139, 145, 151, 152, 153, 154, 158, 174, 181, 183, 188, 189, 190, 191, 193, 195, 196, 202, 205, 207, 209, 210, 211, 212, 214, 215, 219, 220, 221, 223, 224, 232, 233, 235, 239, 245, 247, 248, 249, 250, 253, 254, 256, 257, 258, 259, 262, 264, 268, 270, 279, 282, 284, 285, 287, 288, 289, 290, 291, 292, 295, 296, 298, 301, 302, 303, 306, 311, 312, 313, 314, 315, 316, 321, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 344, 350, 351, 352, 359, 360, 367, 368, 370, 371, 373, 374, 375, 376, 378, 381, 382, 384, 389, 390, 396, 397, 399, 400, 401, 402, 403, 404, 406, 408, 412, 426, 431, 432, 435, 436, 438, 448, 457, 464, 512, 517, 523, 527, 529, 530, 536, 538, 539, 579, 596, 597, 599, 620, 628, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 661, 662, 668, 674, 675, 677, 678, 681, 682, 697, 703, 704, 707, 719, 723, 729, 730, 746, 747, 785, 799, 807, 813, 823, 824, 825, 826, 827, 828, 829, 835, 837, 844, 859, 861, 862, 863, 867, 883, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 903, 908, 909, 939, 965, 968, 969, 971, 972, 973, 974, 976, 978, 979, 981, 983, 986, 988, 990, 991, 992, 996, 1000, 1002, 1006, 1007, 1009, 1010, 1018, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031], "colorbar": [4, 11, 30, 40, 95, 106, 118, 126, 145, 151, 153, 154, 156, 169, 219, 231, 248, 270, 301, 331, 686, 1030], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 80, 98, 314, 523, 965, 976, 986], "166": [4, 6, 298, 379, 976, 1018], "simpl": [4, 16, 27, 55, 71, 75, 78, 85, 86, 95, 116, 121, 157, 165, 169, 182, 199, 215, 240, 260, 280, 293, 315, 327, 344, 346, 350, 355, 371, 373, 375, 376, 377, 378, 380, 384, 385, 386, 387, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 413, 420, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 451, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 503, 511, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 774, 776, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 932, 968, 970, 971, 972, 973, 975, 976, 979, 986, 988, 990, 992, 997, 1000, 1002, 1011, 1015, 1018], "wors": [4, 86, 151, 169, 204, 259, 267, 306, 355, 397, 399, 409, 421, 454, 471, 472, 473, 541, 543, 545, 547, 549, 551, 554, 557, 559, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 658, 659, 661, 662, 667, 668, 669, 694, 710, 711, 712, 716, 773, 821, 822, 831, 839, 846, 889, 891, 894, 897, 899, 976, 986, 1027], "further": [4, 25, 42, 71, 78, 86, 95, 113, 119, 121, 146, 150, 155, 168, 170, 177, 182, 219, 224, 234, 256, 259, 260, 266, 316, 331, 345, 353, 359, 373, 384, 386, 398, 399, 401, 404, 406, 407, 409, 441, 451, 504, 521, 524, 571, 603, 611, 617, 647, 648, 655, 657, 665, 666, 667, 680, 684, 725, 762, 766, 769, 778, 779, 824, 830, 831, 838, 839, 866, 868, 888, 890, 893, 925, 975, 976, 978, 979, 980, 982, 986, 990, 991, 1009, 1011, 1027, 1031], "analyz": [4, 7, 17, 182, 261, 268, 316, 344, 346, 378, 379, 399, 407, 492, 577, 578, 580, 776, 973, 976, 983, 984, 992, 1011, 1018, 1027], "reason": [4, 8, 12, 42, 53, 70, 123, 147, 168, 169, 174, 198, 199, 206, 216, 227, 231, 232, 234, 237, 256, 259, 260, 265, 279, 302, 306, 345, 346, 355, 359, 360, 361, 368, 372, 373, 375, 377, 381, 384, 385, 386, 387, 399, 400, 401, 404, 406, 407, 409, 497, 521, 563, 627, 635, 641, 643, 661, 676, 681, 751, 785, 799, 832, 837, 844, 863, 885, 965, 966, 971, 972, 973, 976, 978, 979, 980, 982, 986, 990, 991, 1000, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "disappoint": 4, "outcom": [4, 116, 168, 386, 406, 558, 647, 698, 730, 780, 816, 883, 884, 885, 890, 893, 972, 976, 992, 999, 1011, 1022, 1026, 1028], "altern": [4, 26, 71, 86, 117, 118, 124, 130, 170, 182, 198, 216, 228, 247, 250, 268, 311, 344, 345, 346, 355, 368, 376, 377, 379, 384, 386, 387, 389, 394, 396, 397, 399, 400, 401, 403, 404, 406, 407, 409, 430, 431, 434, 435, 436, 441, 447, 452, 488, 527, 529, 530, 536, 542, 543, 546, 547, 548, 549, 553, 554, 555, 571, 577, 578, 580, 606, 609, 632, 681, 695, 697, 759, 762, 766, 769, 787, 817, 852, 858, 861, 874, 881, 883, 896, 897, 898, 899, 943, 944, 970, 972, 973, 975, 976, 979, 980, 984, 986, 988, 989, 991, 992, 997, 1006, 1011, 1013, 1023, 1025, 1031, 1032], "larger": [4, 7, 27, 37, 39, 42, 47, 55, 80, 82, 92, 105, 113, 124, 151, 156, 157, 163, 168, 169, 174, 178, 182, 213, 214, 215, 224, 231, 233, 244, 250, 260, 262, 268, 269, 279, 281, 295, 296, 298, 301, 331, 345, 346, 366, 368, 373, 379, 384, 386, 396, 397, 399, 400, 401, 403, 404, 406, 407, 409, 429, 432, 438, 439, 441, 443, 445, 504, 516, 530, 533, 550, 551, 552, 556, 557, 571, 578, 632, 641, 661, 662, 663, 664, 668, 676, 681, 693, 708, 724, 783, 833, 834, 865, 867, 868, 869, 877, 882, 924, 925, 947, 950, 968, 969, 972, 973, 975, 976, 979, 980, 984, 986, 990, 991, 1009, 1011, 1022, 1023, 1026, 1027, 1028, 1031, 1032], "periodic_spline_transform": 4, "n_spline": [4, 867], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 53, 54, 55, 56, 62, 97, 100, 105, 114, 119, 120, 122, 125, 139, 151, 157, 158, 171, 177, 198, 199, 206, 209, 216, 219, 233, 234, 235, 253, 259, 260, 271, 284, 286, 290, 304, 305, 308, 313, 314, 320, 323, 329, 331, 332, 335, 336, 338, 344, 345, 368, 370, 373, 375, 380, 382, 386, 390, 399, 403, 406, 409, 410, 411, 415, 416, 417, 418, 420, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 696, 697, 698, 700, 701, 702, 703, 705, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 720, 722, 723, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 905, 907, 908, 909, 911, 912, 913, 914, 917, 919, 924, 925, 928, 929, 930, 931, 935, 936, 939, 942, 944, 945, 947, 950, 951, 957, 960, 961, 963, 965, 972, 976, 986, 989, 992, 1002, 1006, 1011, 1013, 1018, 1019, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "degre": [4, 16, 34, 97, 112, 155, 162, 167, 169, 174, 177, 182, 186, 187, 199, 233, 239, 244, 245, 246, 249, 250, 259, 273, 298, 313, 314, 328, 338, 404, 408, 435, 441, 487, 524, 530, 628, 629, 632, 645, 763, 783, 785, 834, 863, 867, 890, 891, 892, 893, 894, 968, 969, 971, 972, 973, 974, 976, 977, 979, 982, 983, 986, 989, 991, 1009, 1021, 1027, 1031, 1032], "n_knot": [4, 199, 314, 867, 986, 1031], "include_bia": [4, 177, 273, 863, 867, 1032], "knot": [4, 199, 314, 867, 986, 1031], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 55, 80, 81, 96, 105, 111, 121, 123, 150, 151, 153, 154, 155, 156, 157, 159, 169, 177, 178, 180, 182, 188, 192, 198, 199, 200, 204, 208, 209, 210, 211, 212, 216, 224, 227, 230, 231, 233, 235, 248, 259, 261, 262, 266, 267, 268, 269, 273, 284, 285, 291, 292, 302, 304, 315, 316, 330, 331, 334, 336, 337, 339, 340, 341, 620, 621, 791, 812, 828, 829, 1010], "again": [4, 20, 67, 72, 123, 154, 156, 158, 168, 223, 260, 344, 355, 377, 382, 386, 387, 399, 400, 401, 406, 407, 461, 556, 557, 623, 636, 640, 642, 644, 650, 652, 654, 681, 965, 972, 976, 990, 1015, 1018, 1026], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 55, 58, 60, 61, 66, 70, 74, 75, 80, 95, 96, 98, 101, 111, 116, 117, 118, 119, 120, 123, 124, 125, 128, 129, 139, 143, 145, 151, 152, 154, 156, 157, 162, 163, 165, 169, 170, 186, 187, 198, 200, 205, 207, 210, 211, 212, 213, 214, 218, 220, 222, 225, 227, 230, 231, 232, 233, 234, 236, 237, 244, 246, 248, 249, 250, 257, 259, 261, 262, 265, 266, 268, 269, 279, 284, 285, 289, 292, 295, 297, 303, 304, 311, 313, 316, 321, 322, 324, 328, 330, 331, 334, 335, 336, 337, 340, 341, 344, 345, 353, 359, 366, 367, 368, 373, 375, 386, 396, 397, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 417, 418, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 910, 913, 914, 919, 923, 925, 927, 930, 938, 940, 945, 947, 951, 952, 953, 954, 955, 956, 957, 966, 971, 972, 976, 977, 978, 979, 980, 982, 986, 987, 988, 989, 990, 991, 992, 1007, 1008, 1010, 1011, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1034, 1035], "concat": [4, 162, 167, 187, 216, 861], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 58, 80, 82, 89, 90, 95, 98, 102, 106, 112, 118, 119, 139, 145, 153, 154, 169, 177, 181, 182, 189, 190, 207, 210, 211, 212, 214, 220, 221, 222, 231, 232, 236, 253, 254, 279, 282, 283, 285, 287, 288, 290, 292, 295, 297, 298, 301, 303, 319, 320, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 340, 341, 350, 686, 1007, 1008], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 67, 80, 82, 89, 90, 95, 98, 102, 112, 118, 119, 139, 145, 153, 154, 169, 181, 190, 207, 210, 211, 212, 214, 220, 221, 222, 228, 231, 232, 236, 241, 253, 254, 279, 283, 285, 289, 292, 295, 297, 298, 301, 303, 313, 316, 319, 320, 324, 327, 328, 329, 330, 331, 332, 333, 335, 337, 340, 341, 350, 370, 400, 686, 901, 976, 986, 992, 1007, 1008], "tab20b": 4, "stai": [4, 26, 37, 105, 168, 345, 372, 373, 377, 386, 387, 981, 1024], "midnight": 4, "fewer": [4, 13, 26, 55, 110, 119, 121, 198, 359, 374, 399, 408, 409, 437, 450, 542, 583, 685, 818, 929, 972, 977, 979, 1023, 1024, 1025], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 55, 62, 78, 85, 86, 104, 116, 117, 124, 130, 142, 143, 144, 146, 147, 155, 163, 167, 168, 169, 170, 171, 174, 182, 198, 199, 216, 234, 238, 244, 250, 256, 257, 262, 266, 267, 269, 288, 301, 307, 308, 311, 314, 320, 331, 344, 345, 346, 355, 359, 360, 361, 368, 369, 371, 373, 375, 377, 378, 379, 381, 384, 386, 387, 389, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 432, 433, 435, 439, 445, 446, 449, 457, 485, 492, 510, 513, 521, 523, 528, 532, 538, 540, 550, 551, 555, 556, 577, 578, 580, 582, 593, 600, 616, 619, 638, 647, 661, 663, 665, 667, 676, 677, 681, 684, 713, 716, 734, 746, 747, 751, 773, 780, 783, 784, 788, 789, 804, 816, 817, 830, 831, 832, 834, 836, 837, 838, 839, 840, 863, 865, 873, 874, 876, 877, 878, 879, 886, 924, 925, 927, 939, 944, 965, 966, 970, 971, 972, 973, 974, 975, 976, 977, 979, 982, 983, 984, 989, 990, 991, 992, 995, 996, 997, 1000, 1007, 1009, 1011, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1033], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 370], "132": [4, 8, 13, 56, 110, 191, 217, 238, 242, 346, 406], "013": [4, 58, 227, 242], "successfulli": [4, 13, 305, 372, 377, 399, 407, 990], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 72, 78, 113, 121, 123, 125, 128, 144, 168, 177, 178, 182, 196, 203, 206, 229, 231, 234, 237, 260, 266, 288, 303, 306, 307, 316, 345, 346, 355, 365, 367, 370, 373, 379, 384, 386, 397, 398, 399, 401, 403, 404, 406, 407, 408, 410, 433, 434, 439, 446, 449, 482, 523, 533, 538, 544, 545, 546, 547, 552, 553, 554, 562, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 599, 616, 632, 641, 661, 662, 663, 664, 676, 681, 684, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 815, 865, 877, 880, 881, 896, 897, 898, 899, 965, 968, 970, 971, 972, 973, 976, 979, 988, 989, 993, 1002, 1010, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1032, 1034], "choic": [4, 7, 40, 46, 55, 65, 70, 78, 103, 150, 151, 157, 162, 187, 199, 237, 253, 257, 259, 262, 284, 308, 313, 344, 345, 355, 359, 371, 375, 378, 384, 389, 399, 401, 403, 405, 406, 408, 409, 441, 451, 460, 461, 462, 463, 464, 465, 467, 527, 529, 530, 536, 548, 627, 636, 637, 645, 647, 648, 650, 658, 669, 681, 694, 817, 830, 831, 836, 838, 839, 865, 868, 877, 879, 888, 889, 912, 965, 970, 972, 973, 974, 976, 977, 982, 984, 989, 990, 991, 992, 1025, 1028, 1029, 1033, 1034], "arbitrari": [4, 55, 86, 95, 96, 97, 115, 157, 177, 198, 215, 216, 257, 301, 305, 307, 313, 344, 353, 360, 373, 384, 386, 400, 403, 404, 406, 407, 411, 435, 439, 444, 446, 454, 521, 522, 548, 549, 570, 628, 637, 658, 669, 677, 777, 786, 787, 792, 794, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 852, 854, 867, 965, 967, 968, 972, 973, 976, 979, 986, 997, 1011, 1018, 1019, 1022, 1024, 1025, 1026, 1028, 1032, 1034], "held": [4, 8, 71, 103, 124, 170, 206, 246, 262, 267, 277, 406, 548, 549, 550, 551, 690, 785, 788, 789, 799, 845, 846, 858, 965, 966, 975, 984, 1011], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 55, 58, 60, 64, 67, 80, 81, 85, 90, 91, 92, 94, 98, 100, 101, 107, 112, 116, 119, 120, 128, 152, 157, 158, 165, 168, 169, 170, 177, 181, 187, 190, 192, 194, 196, 198, 199, 200, 204, 207, 210, 211, 215, 216, 219, 220, 221, 222, 223, 227, 230, 232, 237, 246, 250, 253, 256, 260, 261, 266, 268, 269, 277, 279, 282, 283, 284, 285, 286, 287, 288, 290, 292, 295, 302, 303, 305, 307, 319, 320, 324, 327, 330, 331, 332, 333, 335, 336, 340, 341, 344, 345, 346, 350, 355, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 381, 384, 386, 387, 398, 399, 404, 405, 406, 407, 410, 411, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 449, 450, 458, 461, 463, 487, 493, 501, 503, 504, 508, 511, 514, 519, 522, 524, 530, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 599, 600, 617, 620, 621, 622, 626, 627, 628, 633, 634, 640, 644, 646, 659, 660, 662, 664, 665, 667, 668, 671, 672, 677, 678, 679, 680, 681, 682, 683, 690, 695, 696, 699, 702, 706, 711, 713, 719, 724, 725, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 752, 767, 768, 783, 784, 785, 799, 809, 818, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 845, 846, 853, 867, 882, 883, 884, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 906, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 986, 988, 989, 991, 992, 996, 997, 1006, 1009, 1010, 1011, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 115, 301], "insight": [4, 7, 168, 169, 199, 200, 216, 297, 301, 344, 353, 397, 785, 788, 789, 799, 811, 983, 992, 1000], "last_hour": 4, "slice": [4, 17, 119, 207, 221, 224, 232, 282, 287, 290, 314, 315, 327, 368, 374, 375, 382, 400, 453, 456, 482, 483, 497, 535, 628, 762, 766, 769, 904, 928, 929, 947, 1030, 1032], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 57, 60, 67, 75, 95, 98, 106, 119, 120, 127, 130, 159, 168, 169, 192, 197, 213, 214, 219, 220, 221, 236, 247, 255, 298, 301, 303, 311, 313, 319, 320, 324, 338, 339, 350], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 85, 86, 91, 92, 97, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 137, 143, 150, 151, 155, 156, 157, 158, 159, 162, 165, 168, 171, 174, 177, 178, 180, 181, 182, 186, 187, 188, 192, 198, 199, 200, 201, 204, 205, 206, 207, 208, 213, 215, 216, 220, 221, 222, 227, 232, 233, 235, 237, 238, 246, 253, 254, 257, 258, 260, 261, 262, 263, 265, 268, 269, 270, 271, 272, 273, 277, 284, 286, 288, 291, 296, 298, 301, 302, 306, 311, 312, 315, 318, 322, 323, 324, 325, 338, 339, 344, 345, 349, 350, 351, 352, 361, 365, 366, 367, 372, 373, 375, 378, 382, 386, 387, 396, 397, 398, 409, 410, 416, 417, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 454, 458, 476, 477, 478, 482, 483, 484, 485, 491, 492, 497, 498, 501, 503, 504, 508, 511, 512, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 556, 558, 559, 581, 582, 583, 584, 585, 587, 588, 589, 593, 594, 595, 598, 599, 620, 647, 648, 655, 656, 657, 662, 663, 664, 665, 666, 667, 686, 687, 689, 691, 692, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 713, 714, 715, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 742, 743, 744, 745, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 834, 835, 837, 838, 845, 846, 848, 852, 855, 856, 859, 861, 862, 872, 883, 884, 885, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 908, 913, 914, 939, 940, 947, 965, 972, 973, 977, 978, 979, 980, 982, 983, 986, 990, 991, 992, 996, 998, 1002, 1007, 1009, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "actual": [4, 27, 46, 60, 75, 86, 110, 116, 174, 187, 198, 206, 246, 255, 262, 346, 355, 359, 361, 370, 371, 373, 375, 378, 379, 384, 385, 386, 397, 399, 404, 407, 408, 423, 498, 504, 505, 516, 524, 527, 529, 536, 551, 552, 633, 634, 637, 647, 648, 655, 656, 657, 658, 659, 661, 663, 665, 666, 667, 669, 676, 680, 684, 690, 693, 698, 704, 710, 711, 712, 773, 783, 788, 789, 804, 805, 834, 865, 888, 894, 916, 917, 918, 951, 968, 975, 976, 979, 983, 984, 1025, 1026, 1032, 1033, 1034], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 56, 80, 81, 92, 95, 110, 119, 142, 150, 151, 155, 156, 159, 163, 168, 169, 177, 186, 187, 188, 190, 194, 198, 199, 200, 204, 207, 210, 211, 216, 227, 244, 247, 282, 284, 295, 296, 298, 324, 341, 350, 351, 352, 373, 389, 392, 399, 406, 409, 544, 545, 620, 982, 983, 992, 996, 1002], "One": [4, 9, 12, 24, 30, 49, 55, 91, 100, 103, 118, 120, 123, 126, 165, 168, 171, 176, 213, 217, 227, 238, 249, 259, 266, 269, 288, 302, 326, 328, 342, 345, 359, 370, 373, 385, 386, 399, 402, 404, 405, 406, 407, 410, 433, 438, 461, 463, 467, 501, 555, 620, 628, 647, 655, 657, 662, 664, 665, 666, 776, 792, 793, 816, 817, 818, 849, 850, 861, 892, 939, 966, 968, 972, 973, 974, 975, 976, 977, 979, 980, 983, 984, 986, 991, 998, 1013, 1022, 1024, 1031, 1033], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 61, 72, 73, 75, 78, 79, 80, 81, 85, 86, 97, 99, 103, 104, 105, 109, 110, 111, 112, 113, 114, 116, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 143, 150, 151, 155, 156, 157, 158, 159, 168, 169, 174, 177, 178, 180, 183, 186, 187, 188, 192, 198, 199, 200, 201, 204, 205, 206, 207, 208, 211, 212, 213, 215, 216, 222, 230, 231, 232, 233, 235, 238, 246, 254, 256, 258, 259, 261, 262, 263, 264, 266, 268, 269, 271, 272, 273, 284, 285, 286, 291, 296, 302, 306, 312, 315, 321, 330, 333, 338, 344, 349, 350, 351, 352, 689, 1007], "draw": [4, 7, 16, 60, 159, 168, 194, 238, 261, 266, 331, 380, 402, 404, 405, 406, 544, 545, 546, 547, 552, 553, 554, 555, 600, 623, 690, 791, 807, 900, 902, 975, 996, 1005, 1031, 1032], "conclus": [4, 100, 168, 170, 198, 200, 259, 261, 355, 406, 1005], "abov": [4, 25, 26, 37, 44, 66, 70, 112, 115, 116, 121, 123, 133, 146, 147, 168, 169, 171, 184, 198, 200, 204, 209, 231, 234, 235, 259, 265, 284, 303, 306, 307, 312, 314, 345, 346, 353, 355, 359, 360, 361, 367, 368, 370, 371, 372, 373, 375, 377, 379, 384, 386, 387, 399, 400, 401, 403, 404, 405, 407, 409, 430, 434, 453, 456, 478, 484, 485, 486, 512, 579, 623, 693, 743, 785, 797, 799, 809, 851, 852, 865, 871, 877, 885, 939, 965, 966, 968, 970, 972, 973, 976, 979, 981, 983, 986, 990, 991, 992, 997, 1002, 1003, 1009, 1010, 1011, 1024], "problemat": [4, 255, 400, 966, 1026], "captur": [4, 9, 12, 37, 39, 86, 123, 127, 142, 155, 168, 177, 182, 198, 250, 312, 331, 381, 399, 406, 407, 408, 560, 577, 578, 580, 834, 943, 976, 981, 989, 993, 1009, 1030], "big": [4, 44, 60, 62, 202, 203, 220, 250, 360, 373, 379, 387, 401, 407, 411, 527, 550, 551, 553, 554, 791, 812, 823, 824, 825, 826, 827, 997, 1000, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "goe": [4, 37, 115, 353, 373, 406, 460, 461, 467, 546, 547, 553, 554, 555, 896, 897, 898, 899, 986, 990], "artifact": [4, 13, 46, 47, 301, 361, 377], "discontinu": [4, 384], "fail": [4, 54, 66, 96, 103, 158, 159, 177, 182, 234, 259, 311, 360, 371, 373, 375, 376, 381, 387, 389, 402, 403, 429, 461, 463, 665, 666, 667, 845, 846, 919, 965, 973, 1018, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "intra": [4, 577, 580, 778, 779], "variat": [4, 12, 37, 127, 155, 156, 165, 168, 203, 243, 245, 250, 251, 256, 277, 312, 331, 370, 403, 404, 409, 432, 436, 448, 525, 632, 661, 663, 664, 783, 784, 803, 804, 806, 965, 976, 986, 989, 992, 996, 1007, 1009, 1012, 1013, 1021, 1023, 1024], "harmon": [4, 37, 266, 345, 399, 524, 530, 717, 718, 724, 771, 781, 976], "phase": [4, 182, 192, 359, 616, 968, 973, 979, 1000, 1026, 1028], "potenti": [4, 55, 78, 163, 167, 169, 177, 285, 286, 295, 346, 359, 360, 386, 389, 390, 399, 403, 406, 407, 457, 471, 472, 473, 474, 485, 513, 538, 546, 547, 550, 551, 553, 554, 562, 595, 600, 623, 751, 878, 879, 886, 896, 897, 898, 899, 944, 982, 990, 992, 996, 1011, 1021, 1028, 1029, 1032], "fix": [4, 8, 20, 25, 34, 46, 71, 105, 115, 116, 119, 150, 151, 155, 158, 168, 182, 200, 216, 250, 262, 295, 311, 312, 313, 314, 315, 316, 345, 359, 360, 367, 369, 371, 372, 373, 375, 376, 381, 384, 386, 387, 390, 399, 400, 403, 404, 406, 407, 409, 441, 451, 461, 493, 501, 520, 526, 529, 531, 537, 538, 548, 549, 553, 554, 577, 580, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 619, 642, 652, 659, 673, 676, 680, 684, 696, 773, 783, 799, 806, 830, 831, 833, 836, 838, 839, 855, 872, 896, 897, 925, 943, 965, 972, 975, 976, 979, 986, 997, 999, 1011, 1016, 1017, 1019, 1020, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "two": [4, 7, 9, 11, 14, 20, 24, 26, 30, 34, 37, 39, 40, 43, 55, 60, 64, 70, 71, 75, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 104, 108, 111, 118, 119, 120, 123, 126, 127, 128, 131, 134, 144, 147, 150, 151, 152, 153, 156, 157, 162, 163, 165, 168, 169, 170, 177, 181, 182, 186, 187, 188, 189, 194, 198, 199, 200, 206, 207, 210, 215, 216, 221, 223, 224, 227, 232, 234, 235, 237, 244, 245, 246, 248, 249, 250, 254, 256, 260, 266, 282, 284, 287, 288, 290, 292, 301, 303, 306, 311, 312, 314, 315, 321, 327, 328, 331, 332, 333, 340, 344, 345, 346, 350, 355, 366, 367, 368, 369, 370, 371, 373, 375, 377, 379, 380, 381, 384, 386, 387, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 430, 431, 432, 433, 434, 436, 439, 440, 441, 442, 446, 448, 453, 458, 459, 460, 461, 462, 463, 464, 465, 477, 479, 480, 481, 482, 483, 485, 487, 489, 490, 491, 492, 493, 494, 496, 499, 503, 508, 511, 525, 527, 529, 533, 536, 538, 539, 542, 549, 559, 570, 573, 579, 580, 581, 584, 585, 587, 588, 589, 591, 592, 595, 596, 597, 599, 600, 609, 610, 613, 617, 620, 621, 628, 632, 634, 659, 660, 662, 681, 692, 693, 694, 701, 704, 705, 708, 710, 711, 712, 719, 720, 723, 724, 726, 729, 731, 742, 743, 745, 751, 752, 759, 762, 765, 766, 767, 768, 769, 773, 774, 780, 781, 782, 783, 817, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 845, 846, 852, 853, 860, 861, 862, 863, 882, 883, 884, 888, 896, 898, 899, 939, 955, 956, 962, 965, 966, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 1002, 1006, 1009, 1010, 1011, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "onc": [4, 8, 50, 144, 147, 150, 220, 234, 257, 260, 279, 307, 311, 315, 344, 346, 353, 355, 359, 361, 367, 368, 373, 377, 378, 379, 380, 381, 385, 386, 387, 399, 400, 402, 403, 404, 406, 407, 408, 409, 438, 440, 442, 461, 497, 498, 527, 533, 540, 548, 549, 579, 580, 586, 600, 608, 616, 636, 640, 642, 644, 650, 652, 654, 655, 656, 657, 665, 666, 667, 686, 701, 705, 707, 724, 769, 786, 790, 793, 803, 823, 824, 825, 826, 827, 900, 972, 973, 979, 986, 990, 991, 992, 1002, 1011, 1015, 1018, 1026, 1028, 1029, 1030, 1031], "specif": [4, 11, 12, 20, 27, 44, 55, 62, 65, 70, 72, 116, 130, 155, 158, 168, 169, 174, 216, 254, 259, 301, 311, 312, 316, 344, 345, 346, 355, 359, 360, 368, 373, 376, 378, 379, 381, 384, 386, 389, 395, 398, 399, 400, 403, 404, 406, 407, 408, 409, 485, 492, 523, 540, 546, 553, 556, 557, 558, 559, 563, 577, 580, 582, 586, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 614, 629, 632, 635, 636, 641, 647, 661, 676, 686, 701, 702, 734, 785, 786, 787, 792, 793, 794, 799, 811, 824, 917, 919, 920, 939, 952, 953, 954, 970, 972, 973, 975, 976, 978, 979, 981, 983, 986, 990, 992, 993, 994, 995, 1011, 1013, 1018, 1022, 1026, 1027, 1028, 1029, 1032, 1033], "furthermor": [4, 37, 116, 156, 169, 170, 238, 240, 279, 344, 345, 359, 361, 380, 399, 404, 406, 407, 551, 579, 595, 608, 693, 724, 734, 743, 745, 781, 888, 972, 984, 1021, 1025], "enforc": [4, 12, 53, 95, 155, 192, 288, 359, 373, 401, 404, 406, 409, 497, 516, 520, 526, 528, 531, 532, 534, 535, 537, 550, 551, 867, 908, 909, 966, 973, 1020, 1026, 1028, 1030, 1034], "behav": [4, 12, 48, 52, 57, 254, 301, 313, 331, 355, 373, 379, 384, 385, 399, 403, 868, 972, 986, 991, 993, 997, 1011, 1018, 1025, 1027, 1031, 1032], "similarli": [4, 12, 37, 55, 92, 126, 169, 182, 187, 198, 228, 259, 295, 301, 331, 355, 360, 369, 371, 375, 378, 386, 396, 402, 403, 407, 971, 973, 974, 976, 983, 990, 991, 993, 1002, 1006, 1026, 1032, 1034], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 56, 58, 113, 144, 147, 163, 169, 170, 181, 182, 229, 234, 255, 257, 268, 270, 271, 282, 290, 311, 324, 327, 328, 334, 344, 345, 346, 358, 359, 360, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 381, 382, 384, 386, 389, 390, 396, 397, 399, 400, 403, 404, 406, 407, 408, 409, 410, 411, 413, 422, 423, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 451, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 480, 481, 484, 485, 486, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 599, 600, 609, 616, 617, 618, 619, 621, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 696, 709, 717, 718, 726, 759, 762, 766, 767, 768, 769, 771, 772, 775, 776, 777, 778, 779, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 797, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 877, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 908, 909, 911, 919, 920, 924, 925, 932, 933, 934, 935, 944, 945, 946, 947, 950, 960, 961, 965, 966, 972, 973, 976, 978, 979, 982, 984, 986, 990, 991, 992, 997, 999, 1002, 1009, 1010, 1011, 1013, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "shorter": [4, 156, 247, 384, 399, 404, 409, 439, 446, 552, 686, 978, 982, 1011, 1029], "necessarili": [4, 31, 72, 98, 168, 198, 206, 216, 232, 233, 245, 303, 344, 345, 367, 377, 397, 399, 406, 616, 836, 838, 839, 840, 970, 973, 975, 976], "59": [4, 174, 182, 216, 298, 336, 370, 379, 400, 499, 976, 1014, 1018], "37": [4, 46, 134, 182, 262, 319, 368, 406, 513, 705, 868, 986, 1018], "creat": [4, 5, 8, 11, 16, 20, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 58, 60, 62, 71, 72, 80, 86, 97, 100, 112, 115, 119, 120, 123, 126, 129, 145, 146, 150, 152, 155, 156, 157, 159, 163, 167, 169, 177, 179, 181, 184, 194, 199, 200, 210, 211, 221, 232, 234, 238, 240, 249, 254, 255, 257, 259, 269, 277, 282, 287, 289, 290, 303, 305, 306, 311, 314, 315, 324, 327, 328, 332, 333, 336, 339, 340, 341, 346, 349, 351, 352, 355, 360, 368, 369, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 385, 386, 389, 397, 399, 400, 403, 405, 406, 407, 409, 427, 440, 442, 454, 455, 488, 504, 505, 506, 507, 535, 542, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 577, 578, 580, 586, 617, 619, 620, 621, 622, 686, 687, 689, 690, 691, 770, 777, 785, 787, 791, 795, 799, 803, 807, 809, 810, 818, 849, 861, 890, 893, 896, 897, 898, 899, 903, 906, 928, 929, 935, 949, 961, 966, 972, 975, 976, 977, 979, 983, 986, 987, 988, 990, 991, 992, 996, 997, 1000, 1007, 1009, 1010, 1015, 1018, 1019, 1021, 1024, 1028, 1031, 1032, 1033, 1034], "turn": [4, 32, 78, 162, 163, 168, 182, 213, 214, 232, 259, 283, 346, 359, 361, 368, 384, 386, 387, 398, 399, 400, 402, 404, 407, 408, 409, 570, 571, 578, 596, 597, 817, 821, 890, 893, 911, 966, 970, 978, 981, 986, 1000, 1011, 1023, 1025, 1026, 1031], "downstream": [4, 80, 308, 346, 407, 520, 523, 526, 530, 531, 595, 861, 986, 1028], "freedom": [4, 97, 155, 186, 187, 189, 259, 530, 645, 783, 972, 1021], "underfit": [4, 123, 150, 165, 170, 252, 274, 275, 295, 307, 406, 646, 785, 788, 789, 799, 810, 811, 848, 863, 971, 972], "approxim": [4, 5, 27, 33, 46, 53, 80, 99, 100, 105, 114, 122, 123, 151, 168, 175, 178, 194, 198, 199, 212, 216, 226, 227, 230, 233, 242, 250, 259, 264, 273, 280, 288, 293, 301, 303, 304, 306, 311, 314, 344, 346, 351, 352, 355, 362, 365, 370, 382, 384, 386, 396, 397, 400, 402, 403, 404, 406, 409, 411, 412, 413, 422, 438, 458, 459, 462, 463, 464, 465, 471, 472, 473, 480, 485, 491, 510, 513, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 548, 549, 571, 578, 599, 600, 608, 627, 628, 629, 630, 631, 646, 647, 648, 661, 663, 665, 666, 668, 676, 681, 746, 747, 752, 783, 786, 803, 809, 813, 814, 828, 829, 832, 836, 838, 839, 840, 844, 848, 849, 854, 858, 860, 861, 865, 877, 888, 893, 894, 924, 925, 950, 969, 970, 971, 972, 973, 975, 979, 980, 981, 982, 983, 984, 988, 990, 991, 992, 996, 997, 1011, 1013, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032], "especi": [4, 8, 55, 56, 120, 123, 168, 198, 234, 307, 316, 335, 345, 355, 360, 367, 373, 381, 384, 386, 397, 399, 407, 432, 438, 490, 527, 546, 547, 548, 549, 553, 554, 555, 635, 636, 637, 639, 641, 642, 643, 647, 648, 649, 650, 651, 652, 658, 669, 684, 694, 734, 823, 824, 825, 826, 827, 896, 897, 898, 899, 972, 978, 979, 984, 986, 1000, 1021, 1026, 1030, 1031, 1032], "sharp": [4, 169, 983, 986], "rush": [4, 373], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 80, 95, 125, 150, 157, 168, 169, 213, 216, 259, 266, 270, 315, 344, 345, 355, 372, 397, 399, 401, 404, 406, 407, 408, 426, 432, 436, 440, 442, 448, 520, 527, 529, 531, 532, 534, 535, 536, 596, 597, 623, 788, 789, 828, 829, 924, 925, 968, 973, 976, 992, 1032], "tend": [4, 12, 27, 37, 39, 43, 52, 55, 57, 168, 169, 187, 198, 202, 203, 216, 244, 247, 256, 260, 277, 298, 346, 359, 361, 373, 375, 386, 397, 399, 401, 404, 406, 408, 426, 437, 642, 834, 865, 877, 925, 972, 973, 979, 992, 1011], "under": [4, 7, 11, 24, 25, 27, 41, 67, 78, 79, 103, 120, 123, 169, 198, 227, 237, 259, 266, 268, 269, 302, 339, 362, 367, 373, 375, 377, 379, 381, 386, 389, 393, 397, 399, 401, 403, 404, 407, 408, 435, 440, 442, 459, 460, 461, 462, 463, 464, 465, 521, 528, 530, 532, 643, 644, 645, 691, 695, 696, 697, 704, 730, 742, 776, 777, 783, 784, 833, 932, 972, 973, 974, 976, 979, 986, 990, 991, 992, 996, 997, 1011, 1018, 1020, 1021, 1023, 1026, 1030], "These": [4, 5, 7, 27, 51, 95, 97, 101, 115, 119, 165, 169, 187, 198, 199, 200, 202, 228, 266, 277, 279, 283, 298, 301, 308, 310, 315, 320, 322, 355, 359, 360, 366, 369, 370, 373, 375, 377, 380, 382, 384, 386, 389, 393, 396, 397, 398, 399, 402, 404, 406, 407, 408, 409, 431, 435, 437, 487, 497, 498, 504, 527, 556, 557, 591, 592, 657, 665, 666, 695, 721, 744, 766, 780, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 833, 834, 853, 965, 967, 970, 972, 973, 976, 977, 987, 989, 991, 996, 1002, 1006, 1011, 1018, 1024, 1026, 1027, 1028, 1031], "systemat": [4, 259, 375, 701, 716, 976, 1033], "reveal": [4, 168, 170, 344, 379, 396, 973, 1034], "form": [4, 9, 19, 32, 42, 60, 67, 95, 133, 157, 158, 168, 233, 234, 250, 259, 319, 355, 367, 370, 373, 375, 377, 386, 387, 396, 398, 399, 402, 403, 404, 405, 406, 407, 409, 411, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 448, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 679, 680, 681, 682, 783, 784, 785, 788, 789, 790, 793, 795, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 914, 933, 936, 965, 967, 969, 970, 972, 973, 976, 977, 980, 981, 982, 986, 991, 996, 1002, 1009, 1024, 1028, 1030], "explain": [4, 5, 12, 56, 73, 85, 86, 104, 123, 150, 155, 156, 169, 170, 198, 216, 227, 234, 250, 269, 272, 307, 344, 345, 360, 371, 373, 377, 393, 395, 402, 404, 409, 482, 510, 513, 523, 530, 533, 538, 614, 637, 645, 658, 669, 710, 711, 712, 716, 773, 972, 979, 992, 995, 996, 1007, 1009, 1010, 1029, 1031, 1032], "lack": [4, 373, 375, 384, 403, 813, 903, 991, 1032], "deriv": [4, 19, 105, 106, 122, 155, 158, 170, 186, 187, 191, 199, 360, 368, 375, 401, 403, 405, 406, 407, 409, 411, 430, 434, 435, 454, 522, 595, 606, 611, 637, 658, 665, 669, 845, 846, 861, 867, 888, 889, 970, 972, 973, 976, 980, 982, 991, 1018, 1019, 1020, 1025, 1026, 1027, 1033], "address": [4, 48, 344, 368, 373, 399, 407, 646, 972, 973, 978, 979, 980, 981, 982, 986, 1000, 1009, 1026], "section": [4, 37, 95, 100, 113, 130, 136, 137, 138, 139, 155, 159, 167, 168, 169, 177, 182, 186, 187, 200, 223, 228, 234, 239, 257, 259, 262, 268, 306, 307, 308, 313, 344, 345, 346, 355, 366, 368, 371, 373, 374, 375, 377, 378, 379, 380, 381, 387, 390, 393, 397, 398, 400, 402, 403, 404, 406, 407, 408, 409, 428, 432, 448, 523, 603, 608, 611, 626, 634, 776, 784, 890, 893, 965, 970, 972, 976, 977, 979, 980, 982, 983, 990, 991, 993, 995, 1009, 1011, 1018, 1020, 1021, 1022, 1025], "margin": [4, 12, 25, 27, 151, 152, 154, 155, 156, 165, 168, 169, 176, 217, 259, 301, 307, 326, 329, 331, 333, 342, 370, 397, 398, 404, 406, 409, 501, 599, 600, 620, 634, 665, 723, 817, 865, 877, 890, 893, 972, 976, 978, 982, 983, 986, 990, 991, 1009, 1025, 1027], "construct": [4, 11, 70, 72, 110, 112, 114, 118, 130, 216, 228, 234, 239, 241, 277, 292, 302, 304, 312, 315, 367, 370, 375, 382, 386, 399, 403, 404, 406, 407, 410, 423, 430, 431, 433, 434, 439, 441, 446, 452, 454, 456, 508, 524, 530, 533, 544, 545, 570, 576, 628, 677, 679, 680, 799, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 847, 848, 849, 850, 852, 893, 907, 909, 924, 925, 935, 939, 965, 966, 968, 972, 973, 976, 977, 979, 986, 989, 991, 992, 997, 1002, 1006, 1023, 1025, 1026, 1029, 1032], "polynomialfeatur": [4, 177, 198, 199, 204, 239, 273, 313, 867, 972, 986, 1022, 1026, 1027, 1028, 1031, 1032, 1034], "coars": [4, 119, 379, 437, 450], "too": [4, 7, 12, 17, 44, 50, 55, 57, 62, 70, 74, 82, 99, 123, 162, 170, 182, 199, 220, 231, 245, 253, 257, 266, 274, 297, 307, 331, 344, 351, 352, 359, 370, 373, 379, 381, 384, 386, 399, 401, 403, 406, 407, 408, 411, 426, 438, 527, 577, 580, 668, 681, 696, 823, 824, 825, 826, 827, 853, 866, 868, 971, 973, 975, 976, 978, 979, 983, 1009, 1019, 1022, 1025, 1026, 1027, 1028, 1030], "mani": [4, 7, 10, 19, 55, 56, 74, 78, 82, 116, 117, 118, 119, 121, 124, 143, 147, 170, 198, 219, 231, 245, 253, 259, 266, 267, 271, 279, 301, 306, 307, 311, 312, 313, 314, 315, 344, 355, 359, 361, 368, 370, 372, 373, 385, 386, 387, 389, 390, 396, 397, 399, 400, 401, 404, 406, 407, 408, 409, 411, 492, 542, 543, 546, 547, 548, 549, 553, 554, 555, 577, 580, 595, 598, 616, 628, 639, 643, 647, 648, 655, 657, 665, 666, 667, 681, 684, 762, 766, 785, 789, 799, 845, 846, 861, 866, 868, 888, 896, 897, 898, 899, 965, 966, 968, 972, 973, 975, 976, 977, 978, 979, 982, 983, 984, 986, 989, 991, 993, 995, 996, 997, 1000, 1009, 1011, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1034], "featureunion": [4, 74, 365, 386, 398, 453, 618, 850, 966, 997, 1000, 1013, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "hour_workday_interact": 4, "interaction_onli": [4, 863, 972, 986], "combin": [4, 12, 20, 25, 27, 61, 70, 71, 73, 74, 95, 104, 105, 108, 121, 125, 134, 150, 156, 163, 165, 168, 182, 198, 215, 216, 223, 227, 232, 259, 260, 268, 270, 271, 288, 296, 307, 313, 314, 316, 334, 346, 350, 359, 365, 369, 370, 373, 378, 385, 386, 396, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 434, 453, 455, 456, 462, 464, 465, 468, 469, 470, 478, 485, 497, 498, 504, 510, 513, 515, 520, 526, 527, 529, 531, 536, 538, 549, 551, 554, 556, 557, 599, 603, 605, 610, 613, 619, 623, 632, 635, 636, 641, 642, 647, 648, 649, 650, 651, 652, 655, 657, 661, 662, 663, 664, 665, 667, 668, 670, 673, 690, 718, 776, 785, 788, 789, 796, 797, 809, 811, 815, 847, 849, 853, 861, 862, 863, 868, 888, 950, 965, 968, 969, 972, 976, 977, 979, 982, 986, 989, 990, 993, 1000, 1007, 1009, 1011, 1018, 1023, 1026, 1029, 1030, 1031, 1033, 1034], "ones": [4, 11, 34, 43, 55, 71, 81, 126, 150, 174, 182, 203, 227, 230, 234, 259, 267, 270, 286, 305, 320, 341, 359, 360, 373, 381, 386, 399, 401, 403, 406, 439, 521, 555, 570, 599, 600, 633, 634, 647, 648, 659, 665, 692, 782, 787, 792, 803, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 863, 867, 930, 972, 976, 981, 982, 986, 991, 1009, 1018, 1026, 1027, 1028], "previou": [4, 43, 53, 71, 95, 113, 120, 123, 130, 150, 155, 156, 167, 168, 169, 182, 184, 199, 231, 233, 234, 259, 262, 266, 301, 306, 315, 344, 345, 346, 355, 359, 368, 373, 375, 378, 379, 381, 384, 386, 387, 389, 399, 406, 407, 457, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 619, 635, 637, 641, 642, 647, 649, 651, 655, 656, 657, 658, 665, 666, 667, 669, 696, 804, 819, 822, 837, 845, 846, 885, 902, 972, 976, 980, 986, 997, 1002, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "nice": [4, 67, 199, 234, 301, 359, 404, 1011], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 267, 345, 379], "104": [4, 24, 115, 134], "highlight": [4, 80, 92, 150, 151, 156, 216, 305, 317, 344, 346, 362, 373, 377, 378, 381, 384, 409, 432, 436, 453, 456, 479, 480, 485, 490, 493, 501, 504, 513, 527, 550, 551, 553, 554, 556, 588, 591, 617, 619, 621, 623, 629, 635, 637, 641, 647, 658, 669, 677, 690, 691, 706, 736, 776, 785, 788, 789, 791, 799, 814, 830, 832, 849, 853, 858, 861, 862, 863, 867, 868, 885, 886, 888, 893, 897, 920, 973, 976, 984, 986, 991, 1028, 1029, 1030, 1031, 1032, 1033], "anoth": [4, 37, 95, 100, 125, 147, 150, 158, 163, 168, 187, 206, 224, 227, 234, 238, 245, 259, 261, 262, 265, 269, 289, 344, 346, 349, 355, 359, 361, 367, 368, 371, 373, 375, 379, 384, 386, 390, 393, 396, 399, 403, 404, 406, 407, 408, 410, 431, 433, 441, 444, 451, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 497, 527, 529, 536, 662, 665, 681, 698, 708, 791, 807, 847, 848, 869, 965, 971, 972, 973, 976, 977, 979, 982, 986, 990, 991, 1002, 1009, 1010, 1011, 1027, 1028], "either": [4, 10, 30, 71, 116, 119, 120, 168, 186, 188, 228, 254, 263, 268, 284, 344, 353, 359, 360, 365, 368, 371, 373, 374, 375, 379, 386, 390, 393, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 431, 436, 441, 476, 485, 501, 513, 522, 523, 525, 533, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 571, 572, 573, 577, 578, 579, 580, 582, 583, 586, 591, 596, 597, 599, 600, 611, 616, 619, 621, 622, 639, 643, 645, 653, 665, 667, 671, 672, 679, 686, 687, 691, 695, 696, 700, 701, 709, 712, 714, 715, 716, 723, 727, 728, 730, 740, 744, 757, 762, 766, 770, 773, 776, 777, 780, 785, 788, 789, 791, 799, 807, 808, 809, 810, 811, 812, 813, 815, 818, 878, 879, 885, 888, 889, 896, 897, 898, 899, 903, 933, 937, 965, 972, 976, 977, 978, 979, 980, 981, 984, 986, 990, 991, 1002, 1010, 1011, 1018, 1021, 1027, 1028, 1029, 1032], "after": [4, 17, 20, 21, 26, 46, 53, 55, 70, 71, 75, 81, 97, 110, 121, 128, 130, 133, 143, 147, 155, 157, 159, 162, 168, 174, 191, 198, 237, 238, 241, 247, 259, 268, 279, 287, 289, 301, 302, 305, 306, 344, 345, 361, 368, 370, 371, 372, 373, 375, 377, 379, 380, 381, 384, 386, 393, 395, 396, 397, 399, 400, 403, 404, 407, 408, 409, 411, 431, 436, 439, 440, 441, 442, 445, 451, 504, 521, 525, 542, 543, 548, 549, 550, 551, 586, 616, 619, 647, 648, 655, 656, 657, 662, 664, 665, 666, 667, 681, 701, 714, 744, 780, 783, 784, 788, 789, 837, 844, 848, 861, 867, 888, 893, 894, 965, 966, 970, 972, 976, 980, 981, 986, 988, 990, 991, 992, 997, 1002, 1009, 1011, 1018, 1021, 1025, 1026, 1029, 1030, 1033], "quadrat": [4, 29, 35, 155, 159, 165, 212, 261, 314, 398, 429, 447, 450, 538, 539, 612, 637, 647, 648, 658, 665, 669, 705, 893, 894, 972, 973, 976, 979, 982, 986, 990, 991, 998, 1013, 1019], "tractabl": [4, 403, 623, 996, 1031], "nystr\u00f6m": 4, "latter": [4, 14, 249, 259, 268, 269, 287, 306, 339, 361, 370, 386, 403, 406, 407, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 730, 783, 784, 785, 788, 789, 794, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 943, 979, 1027], "kernel_approxim": [4, 162, 165, 173, 174, 212, 227, 232, 313, 362, 666, 746, 747, 854, 968, 1002, 1019, 1025, 1034], "nystroem": [4, 162, 212, 227, 232, 365, 629, 630, 631, 666, 854, 893, 894, 1013, 1019, 1025, 1028, 1030, 1031, 1032], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 139, 174, 259, 328, 335, 338, 441, 524, 609, 753, 762, 785, 863, 890, 891, 892, 893, 894, 972, 986, 1009], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 59, 70, 72, 73, 74, 85, 86, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 128, 174, 197, 219, 220, 221, 222, 223, 224, 227, 231, 232, 235, 239, 244, 245, 246, 247, 248, 249, 250, 258, 283, 288, 298, 306, 313, 315, 345, 375, 378, 379, 386, 402, 404, 411, 440, 441, 451, 453, 471, 472, 473, 474, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 628, 629, 630, 631, 677, 678, 679, 680, 681, 682, 683, 684, 685, 783, 784, 837, 844, 847, 880, 881, 882, 925, 968, 970, 973, 975, 979, 1007, 1010, 1019, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1035], "300": [4, 20, 21, 34, 38, 50, 58, 98, 110, 111, 112, 116, 163, 188, 224, 227, 231, 248, 262, 289, 304, 313, 319, 337, 339, 375, 432, 436, 437, 448, 450, 628, 633, 634, 668, 679, 681, 683, 845, 972, 1028], "053": [4, 370, 379], "002": [4, 12, 147, 150, 370], "076": [4, 6, 876], "004": [4, 345], "almost": [4, 116, 121, 122, 200, 206, 234, 273, 306, 322, 355, 366, 368, 377, 379, 384, 385, 386, 390, 399, 403, 404, 459, 460, 461, 462, 464, 465, 466, 783, 965, 971, 972, 975, 976, 991, 1010, 1011, 1026, 1031], "rival": [4, 885, 989], "intermedi": [4, 7, 52, 55, 115, 123, 331, 407, 548, 549, 608, 848, 976, 1030], "compound": [4, 216, 407, 599, 601, 669, 712, 740, 972, 1011], "one_hot_poly_pipelin": 4, "082": 4, "006": [4, 43, 68, 379], "111": [4, 7, 8, 16, 67, 90, 101, 102, 109, 195, 213, 223, 231, 259, 279, 840, 1021], "competit": [4, 123, 344, 406, 633, 979], "low": [4, 11, 12, 37, 50, 81, 86, 97, 99, 103, 113, 126, 147, 170, 191, 193, 198, 200, 212, 219, 221, 227, 231, 237, 244, 245, 247, 250, 253, 259, 261, 265, 266, 274, 285, 286, 297, 305, 307, 308, 322, 330, 331, 344, 353, 369, 370, 373, 378, 381, 386, 389, 396, 397, 398, 403, 404, 407, 431, 438, 457, 510, 513, 524, 571, 578, 592, 668, 681, 685, 694, 714, 730, 777, 833, 862, 869, 886, 925, 941, 944, 965, 968, 971, 972, 973, 975, 976, 979, 981, 982, 983, 984, 986, 988, 991, 992, 998, 1013, 1019, 1022, 1023, 1024, 1026, 1027, 1032, 1033], "rank": [4, 17, 25, 80, 99, 103, 117, 145, 170, 171, 216, 257, 259, 267, 369, 394, 396, 397, 401, 402, 404, 406, 407, 497, 498, 510, 513, 538, 539, 582, 583, 595, 637, 646, 658, 669, 685, 709, 714, 715, 727, 728, 744, 780, 788, 789, 925, 965, 967, 968, 973, 984, 986, 1000, 1013, 1019, 1024, 1027, 1028, 1032, 1033], "fact": [4, 11, 19, 25, 81, 86, 123, 170, 231, 241, 344, 367, 380, 384, 386, 402, 404, 405, 406, 407, 638, 657, 659, 693, 970, 972, 979, 986, 990, 991, 997, 1000, 1032], "smoother": [4, 5, 123, 169, 297, 405], "allow": [4, 20, 56, 58, 74, 75, 99, 100, 113, 114, 128, 150, 155, 157, 159, 192, 198, 216, 220, 228, 231, 238, 240, 241, 244, 259, 277, 311, 312, 313, 314, 316, 336, 344, 353, 355, 359, 367, 371, 373, 374, 375, 377, 380, 382, 386, 387, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 426, 430, 432, 433, 434, 435, 436, 438, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 485, 512, 513, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 582, 583, 586, 592, 599, 600, 604, 616, 617, 619, 623, 624, 627, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 679, 681, 750, 753, 762, 766, 769, 778, 779, 783, 784, 785, 786, 787, 788, 789, 792, 794, 796, 799, 803, 806, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 838, 839, 843, 845, 846, 848, 850, 851, 853, 854, 855, 860, 867, 868, 872, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 906, 908, 909, 919, 920, 940, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 986, 988, 989, 990, 991, 992, 996, 997, 1000, 1002, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 55, 57, 65, 73, 80, 81, 95, 97, 99, 100, 106, 121, 130, 150, 154, 156, 158, 169, 182, 186, 187, 200, 206, 219, 221, 223, 224, 230, 249, 258, 259, 260, 270, 287, 288, 289, 306, 311, 333, 334, 339, 344, 345, 349, 360, 370, 371, 373, 374, 375, 378, 379, 382, 384, 385, 386, 387, 396, 399, 401, 402, 404, 406, 407, 408, 410, 430, 433, 434, 435, 439, 440, 441, 442, 451, 520, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 547, 554, 571, 578, 599, 600, 636, 639, 642, 643, 644, 645, 647, 648, 660, 677, 696, 717, 718, 726, 770, 771, 772, 775, 776, 780, 785, 799, 830, 831, 832, 834, 836, 838, 839, 840, 861, 862, 867, 880, 881, 882, 896, 897, 899, 905, 924, 925, 927, 965, 966, 968, 971, 972, 973, 975, 976, 977, 980, 982, 986, 990, 991, 992, 995, 997, 1000, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1018, 1025, 1026, 1027, 1028, 1030, 1032, 1033], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 55, 57, 59, 66, 70, 71, 72, 75, 95, 98, 100, 109, 115, 116, 120, 122, 123, 124, 125, 143, 150, 153, 154, 155, 156, 157, 158, 163, 165, 167, 168, 169, 176, 177, 180, 182, 185, 196, 198, 199, 204, 206, 211, 212, 214, 216, 217, 219, 228, 230, 233, 234, 238, 240, 241, 249, 257, 259, 260, 261, 262, 267, 268, 273, 279, 295, 301, 311, 312, 314, 315, 324, 328, 329, 330, 331, 332, 333, 337, 339, 341, 344, 345, 350, 355, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 389, 393, 397, 399, 400, 401, 402, 404, 405, 407, 408, 410, 411, 426, 429, 432, 433, 434, 436, 437, 439, 441, 443, 446, 447, 448, 449, 450, 453, 454, 457, 458, 460, 461, 463, 467, 477, 478, 480, 481, 484, 486, 492, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 561, 564, 570, 571, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 593, 596, 597, 598, 599, 600, 604, 606, 608, 609, 611, 612, 616, 617, 620, 621, 622, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 687, 689, 691, 692, 693, 695, 700, 701, 705, 708, 710, 711, 712, 716, 720, 722, 723, 726, 728, 729, 730, 738, 743, 745, 749, 750, 751, 753, 756, 759, 762, 766, 767, 768, 769, 770, 771, 773, 777, 778, 779, 780, 782, 783, 784, 785, 787, 788, 789, 790, 791, 796, 797, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 857, 858, 860, 864, 865, 866, 867, 868, 869, 872, 874, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 903, 906, 915, 917, 918, 919, 924, 925, 935, 936, 942, 943, 944, 946, 947, 950, 951, 960, 965, 966, 967, 969, 971, 973, 974, 977, 979, 980, 981, 982, 983, 984, 986, 989, 990, 992, 996, 997, 998, 1002, 1005, 1006, 1007, 1011, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "abl": [4, 5, 9, 24, 47, 55, 61, 82, 86, 99, 100, 127, 156, 168, 182, 187, 198, 214, 216, 223, 265, 270, 331, 355, 359, 360, 361, 367, 371, 373, 375, 377, 378, 384, 399, 401, 403, 407, 474, 492, 523, 813, 860, 965, 966, 972, 975, 976, 977, 982, 986, 989, 992, 993, 997, 1002, 1010, 1011, 1024, 1025, 1029], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 174, 182, 281, 339, 346, 359, 395, 401, 407, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 795, 828, 829, 896, 897, 898, 899, 965, 976, 979, 992, 1000, 1005, 1009, 1021, 1022], "depth": [4, 109, 115, 120, 124, 126, 131, 349, 351, 352, 353, 359, 371, 373, 377, 385, 406, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 828, 829, 833, 896, 897, 898, 899, 900, 902, 930, 981, 982, 992, 1020, 1021, 1029], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 70, 71, 72, 73, 110, 116, 117, 121, 122, 128, 143, 144, 146, 151, 171, 174, 198, 206, 213, 214, 246, 257, 258, 259, 260, 261, 263, 265, 274, 281, 287, 288, 289, 298, 303, 306, 319, 320, 322, 331, 334, 355, 359, 375, 385, 386, 398, 399, 403, 406, 407, 408, 416, 426, 438, 458, 460, 461, 467, 521, 523, 530, 538, 539, 540, 542, 544, 546, 547, 548, 550, 553, 554, 556, 558, 599, 623, 647, 648, 655, 657, 660, 663, 664, 665, 681, 686, 692, 697, 702, 707, 722, 726, 731, 742, 751, 775, 780, 782, 812, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 830, 835, 837, 838, 845, 883, 884, 888, 890, 893, 896, 898, 924, 925, 965, 970, 971, 972, 973, 977, 979, 980, 984, 988, 990, 992, 1006, 1011, 1026, 1027], "On": [4, 12, 17, 26, 67, 71, 72, 85, 86, 100, 109, 113, 115, 117, 118, 123, 126, 127, 130, 133, 142, 144, 154, 155, 168, 169, 170, 179, 186, 187, 200, 228, 229, 230, 231, 233, 234, 238, 239, 240, 241, 244, 246, 249, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 271, 298, 301, 303, 305, 306, 307, 312, 313, 315, 316, 321, 331, 353, 359, 371, 374, 375, 377, 384, 386, 393, 397, 399, 403, 404, 406, 408, 409, 632, 645, 680, 723, 749, 869, 965, 969, 972, 975, 976, 978, 982, 989, 991, 1006, 1009], "contrari": [4, 13, 168, 220, 224, 244, 262, 301, 344, 367, 399, 485, 533, 595, 802, 869, 972, 978, 982], "significantli": [4, 24, 25, 37, 78, 79, 116, 121, 147, 168, 169, 170, 198, 206, 214, 216, 259, 279, 312, 313, 345, 346, 355, 360, 377, 399, 404, 406, 407, 412, 458, 463, 468, 469, 527, 529, 536, 547, 554, 635, 636, 641, 642, 649, 650, 651, 652, 673, 681, 828, 829, 968, 972, 973, 979, 984, 991, 1018, 1020, 1021, 1025, 1026, 1031, 1032, 1033], "over": [4, 7, 8, 9, 16, 20, 24, 26, 27, 31, 37, 50, 55, 56, 72, 74, 95, 113, 116, 126, 142, 146, 150, 158, 162, 167, 169, 180, 192, 198, 206, 216, 227, 259, 260, 262, 264, 266, 267, 268, 271, 284, 292, 295, 296, 303, 314, 315, 319, 344, 345, 359, 360, 361, 368, 369, 372, 373, 374, 375, 379, 385, 386, 395, 397, 398, 399, 400, 403, 404, 405, 406, 407, 409, 411, 435, 438, 453, 461, 498, 522, 523, 525, 526, 527, 528, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 570, 571, 577, 578, 580, 583, 591, 621, 622, 623, 633, 634, 635, 636, 641, 642, 647, 649, 650, 651, 652, 654, 655, 656, 657, 665, 666, 667, 674, 675, 686, 705, 707, 727, 751, 776, 779, 783, 785, 788, 789, 791, 796, 797, 799, 807, 809, 810, 811, 812, 813, 815, 844, 845, 846, 847, 863, 867, 888, 905, 914, 944, 965, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 989, 990, 991, 992, 996, 997, 1000, 1007, 1010, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031], "compet": 4, "access": [4, 49, 78, 245, 250, 344, 353, 359, 360, 373, 374, 375, 381, 384, 386, 387, 399, 401, 402, 406, 407, 409, 439, 446, 453, 525, 556, 557, 558, 559, 606, 846, 847, 848, 903, 972, 975, 976, 982, 983, 984, 990, 991, 997, 1000, 1002, 1010, 1011, 1018, 1020, 1024, 1025, 1026, 1027, 1030, 1032, 1033, 1034], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 55, 57, 58, 67, 70, 90, 99, 101, 102, 115, 116, 120, 124, 126, 130, 147, 169, 182, 187, 195, 198, 216, 219, 221, 228, 231, 234, 241, 260, 268, 270, 279, 281, 301, 306, 313, 314, 344, 345, 346, 367, 370, 371, 373, 375, 377, 379, 381, 384, 386, 387, 389, 390, 395, 398, 399, 400, 401, 403, 404, 406, 407, 408, 409, 410, 416, 426, 427, 428, 433, 435, 439, 441, 446, 451, 453, 456, 458, 471, 472, 473, 485, 497, 510, 513, 524, 530, 538, 539, 540, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 561, 568, 569, 570, 599, 600, 608, 616, 621, 622, 623, 632, 647, 648, 655, 657, 660, 663, 664, 665, 666, 667, 675, 678, 680, 681, 682, 684, 712, 717, 718, 730, 735, 737, 740, 751, 772, 775, 785, 788, 789, 792, 794, 799, 811, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 845, 848, 849, 850, 852, 862, 863, 864, 866, 868, 876, 880, 881, 883, 884, 888, 889, 890, 893, 896, 897, 898, 899, 936, 942, 962, 965, 970, 971, 972, 973, 976, 977, 978, 979, 980, 982, 983, 986, 990, 991, 992, 997, 1002, 1009, 1011, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "geograph": [4, 11, 292, 368, 487], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 75, 130, 168, 255, 316, 976, 1033], "nrow": [4, 5, 32, 57, 66, 73, 95, 159, 169, 198, 200, 206, 216, 219, 220, 223, 261, 262, 279, 303, 305, 306, 316, 320, 338, 339, 1007], "ncol": [4, 5, 32, 53, 57, 66, 95, 100, 106, 169, 198, 199, 200, 206, 216, 219, 220, 230, 255, 261, 262, 270, 279, 296, 302, 303, 305, 306, 316, 338, 339, 345], "sharex": [4, 7, 14, 73, 92, 100, 131, 159, 169, 200, 237, 261, 284, 322, 1007], "sharei": [4, 75, 92, 100, 106, 131, 159, 169, 198, 200, 206, 237, 261, 270, 284, 302, 307, 338, 339, 345], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 75, 130, 168, 255, 316, 690], "residual_vs_predict": [4, 75, 255, 316, 690], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 75, 104, 116, 130, 142, 168, 169, 249, 253, 255, 268, 308, 313, 316, 328, 331, 344, 360, 361, 366, 368, 373, 375, 379, 384, 385, 397, 399, 402, 403, 404, 406, 407, 408, 477, 478, 492, 497, 498, 510, 513, 577, 621, 622, 690, 917, 972, 978, 983, 992, 1021, 1030, 1032, 1033], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 55, 59, 60, 61, 62, 70, 79, 81, 82, 86, 96, 98, 105, 109, 113, 116, 121, 122, 124, 125, 136, 152, 154, 159, 171, 178, 180, 189, 198, 220, 221, 224, 227, 232, 236, 237, 244, 245, 246, 247, 249, 250, 254, 261, 262, 268, 269, 284, 288, 289, 291, 298, 303, 304, 319, 320, 322, 324, 329, 331, 338, 339, 344, 350, 368, 548, 549, 553, 554, 769, 786, 787, 790, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806], "pred": [4, 7, 11, 32, 340, 344, 368, 637, 658, 669, 686, 691, 695, 707, 717, 718, 726, 771, 772, 775, 776, 976], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 55, 63, 64, 65, 75, 86, 92, 95, 96, 99, 104, 105, 106, 110, 112, 114, 130, 131, 156, 162, 165, 168, 169, 170, 183, 189, 190, 198, 206, 207, 219, 231, 245, 249, 250, 257, 261, 262, 263, 266, 268, 279, 284, 287, 295, 296, 297, 303, 305, 306, 307, 323, 328, 339, 340, 350, 371, 406, 812, 986, 1011, 1014], "disp": [4, 32, 112, 126, 127, 253, 262, 274, 306, 312, 328, 333, 427, 620, 686, 689, 690, 837], "from_predict": [4, 32, 75, 130, 168, 237, 255, 266, 268, 314, 319, 344, 380, 427, 620, 687, 707, 715, 770, 772, 775, 776, 777, 976, 1015, 1031, 1032, 1033, 1034], "y_true": [4, 19, 32, 59, 75, 130, 153, 198, 208, 216, 247, 322, 373, 421, 427, 428, 454, 471, 472, 473, 541, 543, 545, 546, 547, 549, 551, 553, 554, 557, 559, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 686, 687, 689, 690, 691, 692, 696, 697, 698, 701, 702, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 770, 771, 772, 773, 775, 776, 777, 780, 782, 821, 822, 831, 839, 846, 889, 891, 894, 897, 899, 976, 1019, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1033], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 57, 62, 70, 75, 109, 123, 124, 130, 144, 168, 198, 200, 205, 208, 213, 215, 216, 227, 228, 237, 255, 257, 262, 286, 290, 298, 306, 322, 323, 355, 373, 380, 386, 406, 421, 428, 454, 471, 472, 473, 538, 541, 543, 545, 546, 547, 549, 551, 553, 554, 556, 557, 559, 600, 620, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 686, 687, 689, 690, 691, 692, 697, 701, 702, 707, 710, 711, 712, 716, 717, 718, 722, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 771, 772, 773, 775, 776, 782, 785, 788, 789, 799, 809, 819, 821, 822, 831, 839, 846, 848, 888, 889, 890, 891, 892, 893, 894, 897, 899, 976, 978, 1007, 1024, 1025, 1027, 1029, 1033, 1034], "scatter_kwarg": [4, 75, 130, 168, 690], "set_xtick": [4, 8, 10, 16, 31, 34, 43, 60, 64, 106, 128, 132, 169, 171, 189, 214, 232, 244, 270, 271, 277, 295, 297, 303, 304, 328], "num": [4, 12, 71, 147, 150, 155, 156, 157, 169, 170, 200, 266, 267, 315, 621], "set_ytick": [4, 16, 31, 34, 43, 60, 64, 106, 128, 162, 163, 171, 189, 214, 244, 270, 295, 297, 303, 304, 328, 346], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 72, 75, 79, 80, 81, 85, 97, 99, 103, 104, 105, 109, 112, 113, 114, 121, 122, 123, 124, 125, 127, 130, 132, 133, 137, 143, 150, 151, 157, 159, 168, 169, 180, 183, 188, 192, 198, 199, 200, 201, 204, 205, 208, 211, 212, 215, 216, 222, 230, 231, 232, 233, 235, 246, 247, 254, 257, 258, 259, 262, 263, 266, 269, 272, 273, 284, 285, 296, 302, 305, 306, 312, 315, 321, 330, 333, 338, 344, 350, 352, 799, 865, 877], "upper": [4, 7, 9, 24, 72, 75, 79, 80, 81, 109, 112, 113, 114, 122, 123, 124, 125, 130, 132, 143, 154, 156, 159, 168, 192, 198, 204, 205, 208, 212, 215, 216, 231, 235, 236, 258, 259, 260, 284, 285, 296, 306, 322, 330, 333, 338, 399, 405, 452, 577, 578, 580, 584, 602, 603, 604, 606, 608, 609, 611, 612, 614, 621, 622, 624, 626, 639, 643, 666, 723, 861, 862, 890, 891, 892, 912, 975, 976, 979, 986, 990, 991, 992, 1026], "bbox_to_anchor": [4, 37, 159, 264, 338], "set_aspect": [4, 153, 209, 246, 340], "equal": [4, 11, 12, 26, 37, 39, 53, 60, 80, 86, 110, 123, 153, 168, 199, 200, 202, 209, 215, 238, 246, 249, 253, 257, 259, 268, 289, 303, 307, 331, 333, 340, 345, 368, 369, 373, 375, 386, 396, 397, 399, 403, 404, 406, 407, 412, 426, 429, 430, 431, 432, 434, 436, 438, 443, 448, 449, 452, 458, 463, 468, 469, 492, 501, 504, 508, 521, 522, 523, 528, 530, 532, 533, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 577, 582, 583, 586, 588, 589, 596, 597, 614, 617, 618, 621, 622, 623, 624, 626, 630, 631, 634, 638, 647, 648, 660, 692, 707, 709, 717, 756, 771, 775, 776, 780, 782, 785, 786, 788, 789, 798, 799, 803, 809, 816, 820, 821, 828, 829, 830, 831, 836, 837, 838, 839, 840, 845, 846, 851, 852, 853, 860, 863, 866, 867, 868, 869, 871, 878, 885, 888, 889, 895, 896, 897, 898, 899, 914, 925, 951, 957, 970, 972, 976, 977, 979, 980, 982, 986, 990, 991, 992, 1010, 1011, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "adjust": [4, 9, 36, 38, 49, 58, 68, 78, 123, 165, 227, 232, 240, 260, 311, 323, 339, 345, 380, 399, 404, 406, 407, 513, 542, 543, 546, 548, 550, 551, 553, 647, 648, 655, 657, 663, 664, 665, 693, 694, 697, 703, 704, 743, 745, 774, 781, 823, 824, 826, 827, 858, 880, 881, 888, 889, 890, 893, 896, 898, 914, 975, 976, 980, 986, 1009, 1015, 1018, 1024, 1034], "box": [4, 10, 30, 55, 169, 170, 220, 301, 305, 380, 404, 406, 501, 544, 545, 864, 876, 900, 902, 976, 977, 983, 986, 992, 996, 1002, 1026, 1034], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 158, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 349, 350, 351, 352, 353, 360, 361, 373, 379, 384, 385, 389, 390, 396, 397, 401, 403, 404, 405, 406, 408, 409, 427, 491, 548, 582, 583, 620, 621, 686, 687, 689, 690, 691, 702, 791, 807, 900, 901, 902, 965, 970, 971, 973, 975, 976, 978, 979, 980, 982, 983, 986, 990, 991, 997, 1006, 1007, 1011, 1020, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1032], "seem": [4, 9, 46, 55, 123, 169, 198, 223, 227, 260, 296, 305, 344, 345, 372, 373, 378, 403, 490, 972, 976], "regim": [4, 386, 888, 889, 975], "overal": [4, 43, 48, 113, 116, 130, 155, 216, 256, 279, 306, 307, 345, 359, 372, 373, 379, 396, 397, 406, 409, 436, 438, 453, 460, 461, 467, 538, 869, 973, 976, 992, 1000, 1028], "closer": [4, 27, 37, 98, 100, 129, 150, 169, 177, 346, 397, 399, 404, 438, 542, 617, 701, 830, 831, 836, 838, 839, 840, 991, 1025], "diagon": [4, 25, 40, 82, 85, 216, 237, 246, 249, 250, 253, 331, 396, 399, 401, 409, 442, 460, 461, 467, 470, 500, 502, 516, 521, 539, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 639, 640, 643, 644, 645, 671, 672, 690, 704, 778, 783, 784, 832, 840, 970, 972, 975, 976, 979, 986, 1024, 1026, 1027, 1028], "obtain": [4, 7, 9, 12, 20, 27, 48, 55, 57, 58, 71, 74, 75, 100, 103, 120, 123, 124, 128, 136, 147, 152, 154, 168, 169, 182, 198, 200, 212, 223, 244, 245, 246, 255, 259, 260, 261, 265, 268, 306, 314, 329, 345, 346, 353, 355, 368, 370, 384, 386, 393, 397, 399, 401, 402, 404, 406, 407, 408, 409, 426, 431, 458, 485, 521, 522, 544, 545, 546, 547, 548, 549, 552, 553, 554, 582, 595, 603, 634, 648, 650, 655, 657, 661, 663, 665, 666, 676, 697, 701, 714, 727, 744, 779, 791, 807, 813, 816, 817, 820, 834, 845, 865, 877, 890, 893, 896, 897, 925, 966, 968, 970, 972, 973, 975, 976, 977, 979, 980, 982, 983, 986, 990, 991, 1024, 1026, 1029, 1031, 1032, 1033, 1034], "slightli": [4, 25, 64, 82, 113, 120, 123, 126, 130, 147, 150, 151, 152, 170, 177, 198, 216, 222, 224, 234, 267, 279, 311, 328, 346, 372, 373, 384, 397, 399, 406, 407, 409, 411, 435, 577, 578, 580, 627, 647, 788, 789, 888, 890, 893, 924, 925, 965, 972, 986, 990, 991, 1027, 1031, 1032], "cost": [4, 39, 98, 116, 150, 165, 174, 219, 232, 261, 268, 311, 331, 345, 346, 348, 354, 373, 379, 381, 384, 399, 406, 467, 489, 526, 527, 528, 535, 546, 547, 548, 549, 553, 554, 591, 599, 608, 616, 635, 636, 641, 642, 649, 650, 651, 652, 657, 661, 663, 665, 667, 676, 677, 681, 814, 888, 889, 890, 893, 896, 897, 898, 899, 925, 968, 972, 973, 976, 979, 989, 990, 991, 998, 1013, 1024, 1027, 1028], "durat": [4, 8, 198, 216, 281, 346, 360, 942, 943, 972], "regressor": [4, 75, 86, 124, 129, 130, 133, 150, 155, 163, 165, 168, 176, 178, 180, 182, 198, 201, 215, 216, 217, 234, 312, 313, 359, 373, 375, 384, 386, 397, 400, 409, 421, 425, 454, 471, 472, 473, 474, 513, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 554, 555, 556, 557, 558, 559, 594, 595, 598, 600, 621, 622, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 656, 658, 659, 661, 662, 667, 668, 690, 816, 817, 820, 821, 822, 831, 839, 844, 845, 846, 849, 855, 863, 868, 869, 889, 891, 894, 896, 897, 898, 899, 902, 917, 919, 965, 966, 972, 976, 977, 979, 984, 990, 996, 998, 1006, 1013, 1018, 1019, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1033], "mlpregressor": [4, 169, 238, 361, 844, 845, 980, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "hidden": [4, 169, 297, 298, 373, 381, 396, 404, 844, 845, 846, 980, 981, 996, 1018, 1029], "layer": [4, 165, 214, 238, 294, 297, 298, 299, 359, 381, 406, 503, 504, 511, 556, 814, 844, 845, 846, 849, 868, 981, 998, 1013, 1024], "cyclic": [4, 635, 636, 641, 642, 649, 650, 651, 652, 1030], "within": [4, 20, 60, 115, 117, 118, 129, 144, 146, 147, 194, 199, 200, 210, 216, 238, 257, 258, 262, 272, 301, 302, 313, 329, 332, 339, 346, 355, 359, 368, 373, 377, 382, 384, 386, 387, 396, 397, 399, 400, 403, 405, 406, 410, 433, 437, 450, 452, 453, 458, 463, 504, 538, 556, 557, 558, 559, 582, 583, 621, 681, 685, 699, 713, 769, 783, 784, 790, 791, 803, 804, 812, 813, 828, 829, 830, 831, 836, 838, 839, 840, 847, 848, 849, 861, 869, 873, 874, 876, 877, 878, 879, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 970, 972, 973, 979, 982, 986, 989, 991, 992, 997, 1000, 1002, 1006, 1009, 1011, 1020, 1021, 1025, 1026, 1031, 1032], "finer": [4, 37, 281, 331, 360, 399, 403, 965, 979, 1028], "resolut": [4, 11, 17, 105, 169, 291, 292, 331, 387, 397, 1002, 1028], "taken": [4, 7, 31, 42, 53, 55, 125, 155, 168, 231, 232, 247, 265, 303, 368, 370, 372, 373, 377, 386, 393, 398, 399, 403, 407, 409, 411, 429, 522, 572, 573, 635, 636, 639, 641, 642, 643, 647, 648, 649, 650, 651, 652, 666, 668, 670, 673, 684, 861, 862, 882, 885, 891, 892, 935, 976, 978, 986, 988, 1024, 1027, 1030, 1031], "everi": [4, 95, 162, 196, 199, 220, 233, 245, 250, 268, 314, 355, 368, 371, 373, 375, 377, 381, 386, 399, 401, 403, 404, 407, 429, 443, 497, 520, 525, 528, 534, 546, 548, 549, 553, 579, 580, 592, 635, 636, 638, 641, 642, 648, 649, 650, 651, 652, 653, 654, 655, 657, 661, 662, 663, 664, 665, 674, 675, 676, 681, 685, 742, 759, 767, 768, 798, 837, 896, 898, 900, 902, 914, 969, 971, 976, 977, 978, 986, 992, 1000, 1006, 1018, 1022, 1024, 1027, 1031], "offer": [4, 116, 375, 381, 384, 385, 389, 403, 404, 406, 407, 965, 966, 977, 980, 992, 996, 997, 1000, 1024], "view": [4, 16, 30, 42, 46, 78, 97, 169, 195, 239, 359, 361, 373, 399, 407, 525, 634, 646, 828, 829, 903, 972, 973], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 55, 57, 61, 78, 79, 80, 81, 82, 91, 96, 97, 98, 105, 111, 112, 123, 126, 160, 163, 177, 182, 188, 227, 231, 246, 247, 251, 284, 292, 305, 328, 362, 365, 369, 375, 378, 386, 399, 401, 404, 405, 411, 441, 458, 459, 460, 461, 462, 463, 464, 465, 485, 493, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 519, 521, 533, 538, 539, 552, 599, 600, 602, 603, 604, 606, 607, 608, 611, 612, 614, 616, 632, 633, 661, 666, 669, 692, 712, 729, 740, 764, 783, 784, 785, 799, 823, 824, 825, 826, 827, 828, 829, 833, 864, 868, 876, 880, 881, 882, 970, 972, 973, 974, 982, 998, 1000, 1010, 1012, 1013, 1018, 1019, 1021, 1022, 1024, 1025, 1026, 1028, 1030, 1032], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 71, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 101, 102, 103, 108, 111, 113, 115, 117, 118, 119, 122, 123, 125, 126, 127, 130, 133, 134, 139, 142, 143, 146, 150, 151, 154, 156, 157, 159, 162, 163, 165, 166, 167, 172, 177, 178, 179, 180, 182, 187, 188, 192, 193, 196, 197, 198, 199, 200, 201, 204, 205, 207, 211, 212, 215, 216, 219, 220, 222, 223, 224, 226, 227, 232, 233, 234, 236, 237, 242, 244, 245, 247, 248, 249, 250, 252, 254, 256, 259, 260, 262, 264, 266, 268, 269, 270, 271, 273, 275, 277, 279, 284, 285, 286, 291, 295, 302, 304, 305, 308, 312, 313, 315, 319, 320, 323, 324, 330, 331, 333, 334, 336, 337, 338, 339, 341, 344, 345, 351, 352, 359, 360, 362, 365, 369, 376, 378, 384, 385, 386, 390, 394, 397, 399, 407, 408, 423, 429, 432, 436, 438, 440, 441, 442, 443, 447, 448, 449, 451, 453, 458, 459, 460, 461, 462, 463, 464, 465, 477, 478, 479, 480, 481, 484, 485, 486, 491, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 524, 525, 527, 528, 529, 530, 533, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 571, 572, 573, 578, 596, 597, 599, 600, 616, 619, 621, 623, 628, 629, 630, 631, 632, 635, 636, 638, 639, 641, 642, 643, 647, 649, 650, 651, 652, 659, 660, 661, 665, 666, 667, 668, 678, 679, 680, 681, 682, 683, 684, 690, 693, 694, 697, 719, 731, 769, 779, 783, 784, 785, 787, 788, 789, 790, 797, 799, 800, 801, 802, 803, 804, 805, 806, 813, 814, 819, 821, 822, 823, 824, 825, 827, 828, 829, 833, 837, 844, 845, 846, 848, 851, 853, 862, 865, 869, 877, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 911, 924, 925, 947, 950, 966, 968, 971, 973, 975, 976, 980, 981, 982, 984, 986, 991, 992, 996, 997, 998, 1002, 1006, 1007, 1009, 1010, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "constant": [4, 105, 113, 153, 157, 163, 168, 186, 199, 200, 202, 216, 229, 234, 239, 262, 291, 296, 298, 302, 304, 312, 339, 341, 355, 365, 375, 382, 386, 396, 406, 409, 421, 435, 454, 471, 472, 473, 500, 502, 523, 527, 529, 536, 538, 539, 540, 541, 543, 545, 547, 549, 551, 554, 557, 559, 579, 595, 598, 600, 602, 616, 619, 621, 622, 624, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 676, 678, 682, 684, 710, 711, 712, 716, 763, 765, 773, 821, 822, 831, 839, 845, 846, 853, 864, 867, 876, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 970, 972, 973, 976, 978, 979, 986, 990, 992, 1013, 1021, 1026, 1028, 1030, 1031, 1032, 1034], "varianc": [4, 5, 27, 44, 55, 57, 62, 73, 78, 80, 85, 86, 95, 96, 97, 100, 103, 104, 106, 108, 125, 134, 157, 159, 165, 168, 176, 178, 182, 187, 198, 200, 203, 216, 217, 249, 256, 259, 262, 268, 269, 272, 288, 295, 301, 306, 345, 355, 365, 369, 382, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 409, 411, 430, 434, 438, 452, 510, 513, 521, 522, 523, 530, 533, 538, 539, 544, 545, 547, 548, 549, 554, 592, 596, 597, 600, 614, 632, 633, 634, 641, 645, 646, 649, 651, 661, 662, 663, 664, 665, 676, 699, 716, 773, 783, 784, 826, 837, 852, 858, 864, 866, 868, 874, 876, 878, 879, 897, 899, 951, 952, 953, 957, 970, 971, 972, 974, 979, 980, 981, 988, 990, 991, 992, 993, 998, 1007, 1009, 1010, 1013, 1018, 1026, 1028, 1029, 1030, 1031, 1032, 1033], "poisson": [4, 165, 176, 217, 235, 369, 406, 453, 454, 485, 512, 541, 547, 551, 554, 637, 658, 661, 669, 695, 712, 733, 737, 738, 740, 814, 848, 849, 852, 853, 861, 862, 863, 868, 897, 899, 929, 972, 992, 1028, 1029, 1030, 1031, 1032, 1034], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 131, 139, 174, 212, 227, 232, 233, 257, 259, 261, 264, 270, 274, 313, 319, 320, 322, 324, 328, 330, 331, 334, 335, 337, 338, 341, 402, 404, 409, 441, 524, 551, 608, 609, 628, 629, 630, 632, 633, 634, 637, 669, 674, 680, 712, 735, 740, 747, 754, 763, 764, 765, 783, 796, 799, 883, 884, 885, 890, 891, 892, 893, 894, 965, 968, 971, 972, 974, 989, 991, 1002, 1006, 1007, 1009, 1018, 1019, 1021, 1022, 1023, 1025, 1026, 1028, 1029, 1032, 1033, 1034], "achiev": [4, 12, 17, 19, 27, 31, 98, 110, 119, 121, 128, 158, 174, 198, 206, 256, 259, 266, 306, 322, 331, 334, 339, 344, 355, 359, 361, 367, 368, 370, 375, 379, 384, 386, 396, 397, 399, 403, 404, 406, 407, 542, 547, 554, 629, 638, 665, 667, 696, 728, 751, 788, 789, 824, 868, 965, 966, 968, 972, 976, 986, 989, 991, 999, 1011, 1031], "gridsearchcv": [4, 54, 69, 71, 73, 74, 76, 78, 103, 116, 165, 233, 239, 249, 252, 257, 258, 259, 260, 264, 267, 270, 275, 281, 283, 298, 303, 313, 331, 355, 360, 375, 384, 386, 390, 400, 403, 491, 509, 529, 530, 564, 588, 596, 642, 692, 730, 796, 799, 848, 858, 888, 896, 965, 972, 976, 980, 990, 991, 996, 997, 1006, 1007, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033], "tweedieregressor": [4, 312, 315, 637, 658, 972, 1029, 1032, 1033], "power": [4, 7, 17, 116, 121, 167, 199, 216, 250, 262, 267, 283, 301, 302, 305, 319, 328, 359, 360, 385, 397, 399, 402, 405, 406, 407, 410, 433, 471, 472, 473, 521, 524, 530, 533, 619, 669, 683, 712, 735, 737, 740, 830, 831, 838, 839, 841, 842, 863, 864, 865, 876, 877, 924, 925, 972, 973, 976, 984, 986, 990, 991, 1000, 1021, 1024, 1026, 1028, 1029, 1031], "param_grid": [4, 6, 71, 72, 73, 74, 116, 123, 233, 239, 249, 257, 258, 259, 263, 264, 267, 270, 281, 303, 331, 386, 390, 400, 406, 730, 785, 788, 796, 797, 965, 976, 1006, 1007], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 360, 367, 368, 370, 379, 386, 396, 399, 405, 407, 410, 421, 433, 454, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 493, 494, 499, 501, 503, 504, 508, 511, 512, 525, 526, 533, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 557, 559, 572, 573, 579, 583, 585, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 665, 666, 667, 668, 686, 693, 694, 702, 717, 718, 719, 722, 726, 727, 745, 757, 771, 772, 775, 780, 781, 782, 785, 799, 809, 810, 811, 821, 822, 823, 824, 831, 833, 839, 846, 863, 867, 889, 891, 894, 896, 897, 898, 899, 925, 965, 972, 973, 976, 977, 978, 979, 986, 990, 991, 992, 1007, 1011, 1019, 1024, 1026, 1034], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 360, 373, 374, 375, 376, 377, 379, 384, 386, 389, 407, 997, 999, 1011], "516": [4, 15, 189, 217], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 355, 359, 368, 375, 377, 379, 386, 396, 399, 403, 404, 406, 407, 409, 453, 456, 477, 479, 480, 481, 483, 485, 489, 491, 493, 499, 542, 572, 577, 578, 579, 580, 610, 613, 620, 621, 701, 705, 746, 747, 751, 752, 754, 755, 762, 763, 764, 765, 766, 769, 785, 788, 789, 799, 812, 818, 819, 822, 825, 836, 838, 839, 840, 845, 846, 965, 966, 970, 971, 972, 973, 976, 977, 978, 979, 980, 983, 986, 987, 992, 1002, 1008, 1010, 1033], "plot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 360, 371, 373, 374, 377, 379, 381, 386, 389, 407, 410, 429, 433, 443, 450, 454, 487, 519, 633, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 857, 858, 860, 863, 864, 865, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 920, 976, 996, 1009, 1011, 1018, 1020, 1024, 1028, 1032], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 374, 400, 457, 886, 992, 996, 997, 1029, 1032], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 368, 373, 375, 386, 389, 392, 1007, 1018, 1022, 1025], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 349, 350, 351, 352, 353, 373, 377, 386, 389, 392, 1011, 1018, 1025], "kernelpca": [5, 400, 404, 522, 523, 530, 533, 677, 679, 681, 854, 986, 1019, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "take": [5, 8, 20, 27, 30, 46, 53, 55, 57, 66, 75, 80, 90, 92, 95, 110, 119, 150, 152, 155, 159, 168, 174, 181, 206, 207, 223, 234, 246, 247, 254, 260, 264, 268, 269, 277, 279, 282, 285, 286, 287, 289, 290, 301, 315, 322, 327, 328, 331, 341, 345, 346, 350, 359, 360, 361, 367, 368, 371, 373, 375, 378, 379, 380, 381, 384, 386, 387, 397, 399, 400, 402, 403, 404, 406, 407, 408, 409, 411, 426, 432, 435, 436, 438, 439, 441, 446, 447, 448, 450, 452, 458, 508, 522, 527, 528, 529, 535, 536, 570, 581, 584, 585, 587, 588, 589, 599, 600, 605, 609, 610, 613, 621, 632, 638, 660, 662, 663, 664, 665, 668, 680, 681, 694, 696, 698, 708, 717, 718, 726, 730, 731, 744, 759, 762, 766, 767, 768, 769, 771, 772, 775, 776, 785, 786, 790, 791, 799, 803, 812, 830, 831, 832, 834, 836, 837, 838, 839, 840, 852, 862, 883, 884, 888, 889, 890, 891, 892, 893, 894, 912, 946, 965, 968, 972, 973, 975, 976, 977, 979, 981, 982, 983, 986, 991, 992, 1000, 1002, 1006, 1008, 1015, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "exact": [5, 7, 82, 100, 116, 155, 202, 232, 279, 355, 359, 360, 367, 373, 375, 382, 384, 385, 386, 399, 406, 408, 409, 423, 471, 472, 473, 477, 485, 523, 524, 530, 550, 551, 627, 631, 635, 681, 785, 799, 809, 810, 811, 890, 893, 965, 968, 972, 973, 982, 986, 990, 991, 1025, 1026, 1028], "usp": 5, "digit": [5, 29, 35, 36, 51, 68, 72, 88, 93, 135, 140, 145, 165, 189, 205, 214, 218, 223, 225, 231, 232, 257, 258, 261, 283, 288, 294, 296, 297, 299, 318, 325, 366, 373, 379, 399, 405, 406, 408, 430, 434, 436, 491, 530, 533, 538, 555, 647, 677, 678, 679, 680, 681, 686, 693, 694, 702, 706, 707, 725, 779, 781, 810, 814, 830, 837, 844, 848, 849, 858, 868, 874, 881, 884, 893, 900, 901, 902, 965, 971, 973, 976, 979, 981, 989, 1002, 1006, 1009, 1010, 1013, 1022], "reproduc": [5, 12, 60, 110, 168, 174, 186, 268, 298, 360, 362, 372, 373, 375, 376, 381, 384, 386, 393, 399, 403, 404, 407, 411, 429, 443, 449, 458, 463, 477, 480, 481, 484, 486, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 548, 549, 550, 551, 552, 596, 597, 599, 600, 623, 628, 629, 630, 631, 635, 636, 639, 641, 642, 643, 649, 650, 651, 652, 655, 656, 657, 660, 665, 667, 668, 678, 679, 681, 682, 683, 779, 783, 784, 787, 788, 789, 790, 791, 797, 799, 800, 801, 802, 803, 804, 805, 812, 813, 814, 818, 819, 822, 833, 837, 844, 845, 846, 853, 865, 869, 877, 880, 881, 888, 889, 890, 893, 924, 925, 947, 950, 968, 996, 999, 1018, 1026, 1031, 1032], "sect": 5, "bak\u0131r": [5, 404, 524], "g\u00f6khan": [5, 404, 524], "h": [5, 6, 48, 58, 95, 96, 109, 110, 111, 128, 152, 168, 246, 284, 287, 295, 303, 315, 324, 327, 346, 370, 379, 397, 399, 401, 404, 405, 406, 407, 410, 433, 508, 521, 524, 527, 529, 536, 542, 556, 557, 571, 579, 596, 597, 678, 682, 693, 697, 745, 823, 827, 828, 829, 834, 844, 859, 868, 968, 970, 972, 973, 974, 976, 978, 980, 981, 990, 992, 1007, 1024, 1029, 1033, 1034, 1035], "jason": [5, 404, 524, 884, 1024, 1026, 1030, 1033], "weston": [5, 404, 524, 582, 583, 884], "bernhard": [5, 404, 524, 819, 854, 884, 977, 982, 991, 1024], "sch\u00f6lkopf": [5, 404, 524, 854, 982, 986, 991], "pre": [5, 71, 120, 168, 187, 301, 346, 362, 371, 373, 386, 389, 401, 403, 404, 406, 407, 408, 410, 411, 432, 433, 436, 448, 522, 524, 679, 701, 751, 851, 893, 976, 981, 986, 991, 992, 996, 997, 1013, 1021, 1026, 1032], "advanc": [5, 165, 226, 228, 242, 259, 361, 399, 404, 478, 490, 524, 621, 628, 771, 783, 837, 846, 849, 868, 897, 968, 976, 979, 986, 1000, 1015, 1020], "neural": [5, 6, 31, 259, 297, 362, 384, 386, 393, 403, 404, 406, 411, 522, 524, 527, 529, 536, 556, 557, 628, 634, 685, 729, 783, 837, 844, 845, 846, 854, 968, 972, 973, 974, 976, 979, 982, 986, 990, 992, 996, 998, 1000, 1007, 1012, 1013, 1018, 1030], "system": [5, 100, 182, 259, 266, 355, 359, 360, 361, 368, 370, 373, 374, 375, 376, 381, 384, 389, 399, 404, 406, 410, 433, 460, 461, 467, 524, 528, 532, 539, 628, 634, 639, 640, 643, 644, 645, 671, 672, 714, 744, 757, 783, 837, 883, 884, 944, 972, 976, 979, 988, 996, 997, 1000, 1011, 1018, 1026, 1027], "2004": [5, 147, 259, 368, 370, 399, 401, 404, 462, 524, 596, 597, 678, 682, 694, 731, 771, 884, 970, 972, 973, 978, 991, 1009], "449": [5, 258, 275, 404, 524], "456": [5, 404, 524], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 56, 57, 61, 65, 66, 67, 70, 71, 72, 74, 75, 82, 95, 97, 99, 100, 101, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 198, 199, 200, 202, 203, 205, 206, 213, 214, 215, 216, 219, 220, 221, 222, 224, 227, 230, 232, 233, 235, 237, 244, 246, 247, 258, 260, 262, 263, 265, 272, 277, 279, 281, 284, 291, 292, 295, 298, 301, 302, 304, 305, 306, 319, 320, 321, 322, 324, 339, 344, 345, 346, 367, 373, 377, 381, 384, 386, 387, 403, 440, 523, 855, 968, 994, 996, 1021], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 57, 75, 82, 116, 156, 177, 182, 183, 185, 189, 191, 192, 203, 220, 221, 227, 230, 260, 262, 265, 272, 291, 306, 339, 344, 345, 346, 520, 526, 647, 653, 674, 675, 746, 747, 974, 976], "licenc": [5, 367], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 222, 224, 227, 230, 232, 233, 235, 237, 244, 246, 260, 263, 265, 272, 277, 279, 281, 287, 288, 289, 291, 292, 295, 298, 301, 302, 303, 304, 305, 306, 319, 320, 321, 322, 324, 335, 336, 339, 340, 344, 345, 346, 379], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 227, 232, 233, 235, 237, 244, 246, 260, 265, 272, 277, 279, 281, 287, 288, 289, 291, 292, 295, 301, 302, 303, 304, 305, 306, 335, 336, 339, 340, 344, 345, 346], "normal": [5, 12, 17, 19, 20, 26, 29, 34, 35, 37, 40, 44, 46, 57, 61, 62, 66, 73, 75, 78, 79, 80, 85, 86, 96, 101, 110, 111, 113, 116, 122, 123, 126, 127, 142, 153, 156, 157, 163, 165, 167, 168, 176, 177, 178, 179, 180, 182, 188, 191, 193, 196, 200, 201, 202, 204, 212, 217, 222, 237, 244, 249, 250, 253, 256, 259, 265, 284, 285, 300, 302, 306, 309, 312, 315, 322, 331, 345, 346, 355, 362, 365, 368, 369, 370, 373, 378, 382, 385, 386, 396, 397, 399, 400, 402, 405, 406, 407, 411, 429, 438, 440, 441, 442, 451, 453, 454, 464, 471, 472, 473, 478, 485, 501, 504, 508, 515, 516, 522, 525, 530, 531, 533, 537, 538, 541, 542, 543, 546, 547, 548, 549, 551, 552, 553, 554, 555, 568, 569, 571, 577, 578, 579, 580, 600, 614, 616, 628, 639, 640, 643, 644, 645, 647, 648, 653, 654, 658, 661, 665, 669, 676, 680, 684, 686, 692, 693, 695, 707, 712, 714, 722, 724, 729, 733, 737, 738, 740, 743, 744, 745, 749, 758, 780, 781, 782, 788, 789, 814, 816, 825, 827, 833, 834, 837, 848, 849, 852, 853, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 873, 874, 876, 877, 878, 879, 883, 884, 896, 897, 898, 899, 924, 925, 929, 952, 953, 958, 959, 965, 970, 972, 973, 974, 975, 978, 982, 987, 989, 991, 992, 1007, 1009, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "pixel": [5, 6, 13, 20, 32, 47, 48, 53, 95, 108, 134, 145, 165, 174, 231, 257, 297, 298, 370, 399, 404, 406, 407, 408, 482, 483, 484, 553, 574, 575, 596, 597, 623, 979, 981, 992, 1007, 1010], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 71, 75, 86, 100, 109, 115, 117, 121, 122, 123, 124, 125, 126, 129, 143, 144, 167, 168, 170, 171, 174, 182, 193, 198, 205, 206, 213, 214, 216, 228, 240, 241, 253, 256, 257, 262, 266, 268, 272, 277, 287, 288, 295, 297, 298, 303, 305, 306, 308, 311, 312, 313, 323, 349, 353, 355, 378, 385, 400, 403, 406, 426, 427, 547, 549, 556, 557, 686, 687, 689, 691, 785, 816, 819, 837, 845, 846, 848, 898, 899, 965, 966, 976, 978, 979, 984, 986, 991, 1007, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1031], "data_id": [5, 120, 155, 168, 198, 216, 228, 307, 367, 485], "41082": 5, "return_x_i": [5, 7, 14, 58, 70, 71, 72, 73, 95, 116, 120, 121, 133, 136, 137, 138, 143, 162, 163, 170, 174, 183, 185, 186, 187, 189, 194, 195, 205, 213, 214, 228, 236, 240, 241, 255, 258, 261, 266, 267, 274, 277, 281, 288, 296, 297, 298, 306, 311, 313, 315, 316, 322, 334, 346, 349, 366, 378, 379, 385, 393, 399, 400, 403, 406, 408, 435, 477, 478, 479, 480, 481, 483, 484, 485, 486, 489, 490, 491, 493, 494, 499, 521, 522, 523, 524, 547, 550, 551, 556, 557, 581, 584, 585, 587, 588, 589, 591, 599, 608, 609, 611, 612, 627, 628, 647, 648, 657, 662, 663, 664, 677, 678, 679, 680, 690, 776, 788, 789, 791, 816, 821, 832, 837, 840, 897, 898, 899, 966, 971, 976, 977, 978, 979, 986, 1002, 1006, 1007, 1009, 1010, 1015, 1024, 1026, 1028, 1031], "idea": [5, 53, 80, 81, 116, 147, 155, 168, 199, 219, 284, 331, 349, 359, 360, 373, 378, 379, 401, 402, 403, 404, 405, 406, 408, 596, 597, 972, 973, 976, 979, 982, 995, 1000, 1011], "noisi": [5, 33, 49, 55, 62, 96, 143, 150, 156, 182, 197, 200, 202, 222, 230, 250, 260, 266, 268, 269, 306, 351, 352, 355, 399, 407, 410, 433, 435, 439, 510, 513, 925, 971, 973, 979, 991, 996], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 57, 61, 66, 71, 72, 75, 79, 80, 95, 97, 98, 105, 111, 116, 126, 129, 132, 151, 155, 158, 159, 168, 169, 171, 174, 177, 178, 180, 182, 184, 188, 189, 190, 192, 197, 198, 199, 200, 207, 208, 209, 211, 213, 214, 216, 221, 222, 224, 230, 231, 232, 233, 234, 238, 244, 246, 250, 254, 255, 257, 259, 262, 264, 269, 270, 273, 284, 285, 286, 298, 302, 303, 305, 307, 308, 314, 323, 324, 329, 330, 332, 333, 334, 338, 339, 341, 344, 345, 349, 352, 353, 359, 361, 368, 370, 373, 375, 378, 379, 390, 396, 399, 400, 403, 404, 405, 406, 407, 426, 430, 434, 438, 460, 461, 467, 479, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 517, 519, 520, 523, 525, 526, 528, 533, 534, 535, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 599, 620, 621, 622, 628, 629, 630, 631, 635, 636, 637, 638, 641, 642, 647, 648, 649, 650, 651, 652, 654, 656, 658, 660, 669, 670, 673, 677, 678, 679, 680, 682, 734, 783, 784, 787, 812, 813, 818, 823, 824, 825, 827, 828, 829, 833, 845, 846, 864, 866, 869, 878, 965, 966, 969, 973, 976, 977, 983, 986, 988, 1002, 1006, 1010, 1011, 1026, 1027, 1028, 1031, 1032], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 55, 61, 62, 67, 75, 86, 95, 96, 98, 100, 103, 111, 113, 123, 127, 128, 149, 150, 155, 160, 165, 177, 179, 180, 182, 187, 188, 193, 196, 197, 200, 201, 203, 215, 222, 224, 227, 229, 230, 233, 259, 267, 272, 273, 291, 295, 296, 303, 308, 312, 338, 351, 352, 355, 369, 375, 378, 397, 399, 404, 406, 408, 410, 433, 435, 441, 500, 502, 503, 504, 505, 506, 507, 511, 513, 514, 519, 521, 523, 530, 596, 597, 600, 602, 603, 604, 605, 606, 610, 611, 613, 614, 633, 634, 638, 639, 640, 642, 643, 644, 645, 652, 653, 654, 660, 668, 681, 865, 877, 883, 969, 971, 972, 973, 976, 979, 989, 1009, 1010, 1019, 1024, 1029, 1031, 1032], "approach": [5, 8, 58, 63, 66, 99, 147, 150, 162, 168, 171, 180, 186, 198, 200, 206, 216, 219, 307, 344, 345, 346, 361, 372, 373, 379, 382, 386, 389, 393, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 426, 432, 435, 437, 441, 451, 509, 521, 571, 578, 624, 647, 648, 663, 664, 817, 833, 925, 965, 966, 972, 973, 976, 977, 979, 980, 986, 990, 991, 995, 996, 1000, 1004, 1009, 1010, 1022, 1034], "copi": [5, 12, 17, 44, 62, 75, 98, 113, 162, 163, 168, 169, 170, 184, 191, 204, 214, 216, 220, 279, 319, 320, 322, 324, 345, 350, 360, 370, 373, 375, 377, 378, 379, 384, 386, 423, 426, 429, 431, 432, 433, 435, 436, 438, 443, 448, 471, 472, 473, 474, 489, 491, 499, 521, 522, 523, 524, 530, 537, 542, 543, 548, 550, 551, 561, 579, 586, 596, 597, 599, 600, 617, 619, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 660, 661, 663, 668, 670, 673, 674, 675, 720, 757, 778, 785, 799, 828, 829, 843, 851, 854, 857, 858, 859, 860, 864, 865, 866, 868, 871, 873, 874, 875, 876, 877, 878, 879, 883, 884, 888, 890, 891, 892, 893, 894, 903, 906, 908, 909, 935, 947, 949, 950, 986, 991, 992, 997, 1003, 1006, 1011, 1018, 1021, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "add": [5, 12, 16, 17, 20, 25, 26, 27, 32, 33, 40, 44, 54, 75, 80, 81, 86, 96, 119, 122, 143, 147, 150, 155, 156, 157, 162, 163, 180, 187, 193, 199, 201, 213, 222, 227, 231, 233, 234, 266, 268, 269, 279, 291, 303, 305, 311, 313, 314, 334, 338, 339, 345, 359, 371, 372, 373, 374, 375, 377, 379, 381, 386, 389, 395, 397, 403, 406, 407, 408, 504, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 591, 616, 617, 619, 621, 647, 648, 683, 686, 806, 828, 829, 885, 915, 944, 965, 966, 975, 982, 986, 989, 990, 997, 1009, 1010, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "corrupt": [5, 103, 182, 204, 215, 384, 844, 972, 984], "uncorrupt": 5, "base": [5, 12, 14, 17, 20, 25, 26, 27, 49, 56, 57, 58, 67, 70, 71, 75, 80, 95, 96, 109, 111, 116, 122, 123, 124, 128, 130, 133, 141, 144, 148, 150, 155, 156, 158, 169, 170, 171, 176, 187, 198, 199, 206, 215, 216, 217, 219, 227, 234, 235, 256, 257, 262, 279, 292, 298, 301, 302, 304, 306, 313, 315, 324, 329, 345, 349, 359, 360, 362, 367, 368, 369, 370, 371, 374, 375, 376, 381, 386, 387, 388, 397, 400, 404, 405, 407, 409, 410, 411, 426, 433, 435, 436, 437, 438, 439, 441, 445, 446, 450, 452, 453, 454, 455, 456, 476, 490, 497, 498, 521, 522, 524, 525, 526, 527, 528, 530, 535, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 567, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 596, 597, 599, 600, 605, 606, 607, 610, 613, 621, 622, 624, 625, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 653, 658, 660, 661, 662, 663, 664, 669, 671, 672, 674, 675, 676, 679, 681, 693, 706, 714, 723, 724, 725, 727, 729, 743, 744, 745, 773, 781, 785, 787, 788, 789, 791, 792, 794, 799, 803, 804, 805, 806, 812, 814, 818, 819, 822, 830, 831, 832, 834, 836, 838, 839, 840, 845, 846, 850, 853, 860, 861, 863, 867, 869, 877, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 911, 919, 944, 945, 965, 967, 968, 970, 971, 973, 976, 977, 978, 979, 980, 981, 982, 983, 986, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1006, 1013, 1014, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029], "solv": [5, 6, 66, 150, 187, 232, 259, 372, 373, 374, 375, 378, 384, 399, 401, 403, 404, 409, 436, 442, 451, 467, 520, 526, 527, 528, 532, 534, 535, 536, 537, 624, 626, 635, 641, 643, 644, 653, 654, 659, 661, 663, 666, 674, 675, 676, 818, 888, 889, 892, 925, 967, 970, 972, 973, 976, 977, 990, 991, 992, 995, 996, 1000, 1004, 1007, 1011, 1024, 1028, 1031], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 109, 110, 113, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 178, 182, 193, 195, 196, 199, 205, 206, 212, 213, 214, 216, 228, 236, 240, 241, 246, 248, 253, 256, 257, 262, 266, 268, 272, 277, 285, 287, 288, 295, 297, 298, 303, 305, 306, 308, 311, 312, 313, 322, 323, 330, 344, 349, 353, 355, 359, 367, 375, 378, 385, 400, 403, 406, 426, 427, 498, 547, 548, 549, 556, 557, 686, 687, 689, 691, 814, 816, 819, 837, 845, 846, 848, 862, 898, 899, 966, 976, 978, 979, 980, 982, 984, 986, 990, 991, 1006, 1007, 1015], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 109, 110, 113, 115, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 155, 158, 167, 168, 169, 170, 171, 174, 178, 182, 188, 193, 195, 196, 204, 205, 206, 212, 213, 214, 216, 228, 230, 236, 240, 241, 246, 253, 256, 257, 262, 266, 268, 272, 273, 277, 285, 287, 288, 295, 297, 298, 303, 305, 306, 308, 311, 312, 313, 322, 323, 330, 344, 349, 351, 352, 353, 355, 359, 367, 375, 378, 385, 400, 403, 406, 427, 459, 460, 461, 462, 463, 464, 465, 498, 547, 548, 549, 556, 557, 686, 687, 689, 691, 814, 816, 819, 837, 845, 846, 848, 862, 898, 899, 966, 976, 978, 979, 980, 982, 986, 990, 991, 992, 1006, 1007, 1009, 1015, 1018], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 109, 110, 113, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 156, 157, 158, 159, 167, 168, 169, 170, 171, 174, 178, 182, 193, 195, 196, 199, 205, 206, 213, 214, 228, 236, 240, 241, 246, 253, 256, 257, 262, 266, 268, 272, 277, 287, 288, 295, 297, 298, 303, 306, 308, 311, 312, 313, 319, 320, 322, 323, 324, 344, 349, 353, 355, 359, 367, 375, 378, 385, 400, 403, 406, 426, 427, 547, 548, 549, 556, 557, 686, 687, 689, 691, 814, 816, 819, 837, 845, 846, 848, 898, 899, 966, 976, 978, 979, 984, 986, 991, 1006, 1007, 1015], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 109, 110, 113, 115, 117, 121, 122, 123, 124, 125, 126, 129, 138, 139, 143, 144, 158, 167, 168, 169, 170, 171, 174, 182, 193, 195, 198, 204, 205, 206, 213, 214, 216, 228, 236, 240, 241, 246, 253, 256, 257, 262, 266, 268, 272, 277, 287, 288, 295, 297, 298, 303, 306, 308, 311, 312, 313, 322, 323, 344, 349, 353, 355, 367, 378, 385, 400, 403, 406, 427, 547, 548, 549, 556, 557, 686, 687, 689, 691, 814, 816, 819, 837, 845, 846, 848, 898, 899, 976, 978, 979, 986, 991, 1006, 1007, 1015, 1018], "stratifi": [5, 100, 117, 126, 143, 170, 213, 228, 241, 254, 259, 262, 268, 287, 288, 311, 375, 386, 540, 548, 556, 557, 591, 648, 655, 657, 665, 785, 788, 789, 791, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 822, 837, 845, 947, 976, 979, 1006, 1023, 1024, 1025, 1027, 1028, 1031], "train_siz": [5, 7, 10, 129, 151, 174, 214, 233, 261, 272, 313, 316, 339, 787, 791, 802, 805, 812, 814, 971, 1006, 1018, 1019, 1024, 1025], "1_000": [5, 48, 72, 100, 150, 155, 157, 169, 231, 256, 690, 807], "rng": [5, 20, 21, 31, 37, 50, 81, 86, 95, 97, 103, 111, 123, 126, 127, 129, 150, 151, 154, 156, 157, 159, 162, 163, 167, 170, 177, 178, 179, 180, 182, 187, 192, 199, 200, 205, 212, 227, 233, 234, 236, 237, 244, 254, 262, 265, 270, 271, 295, 305, 308, 312, 313, 315, 319, 320, 324, 334, 339, 351, 352, 355, 360, 375, 378, 390, 459, 463, 464, 465, 632, 638, 659, 661, 667, 797, 823, 824, 825, 827, 828, 829, 833, 836, 838, 839, 840, 865, 877, 880, 881, 883, 884, 885, 894, 1002], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 61, 81, 82, 86, 95, 97, 103, 111, 122, 123, 126, 127, 129, 143, 150, 151, 154, 156, 157, 159, 162, 163, 167, 170, 177, 178, 179, 180, 182, 187, 192, 199, 200, 205, 212, 222, 227, 233, 234, 237, 244, 247, 254, 262, 265, 266, 268, 269, 270, 271, 295, 302, 304, 305, 308, 312, 313, 315, 319, 320, 324, 334, 339, 351, 352, 375, 378, 382, 386, 390, 404, 411, 429, 432, 436, 438, 440, 441, 442, 443, 447, 448, 449, 451, 458, 459, 463, 464, 465, 477, 480, 481, 484, 486, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 572, 573, 596, 597, 599, 600, 616, 621, 623, 628, 629, 630, 631, 632, 635, 636, 638, 639, 641, 642, 643, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 661, 663, 665, 666, 667, 668, 676, 678, 679, 680, 681, 682, 683, 684, 690, 769, 779, 783, 784, 787, 788, 789, 790, 791, 797, 799, 800, 801, 802, 803, 804, 805, 812, 813, 814, 818, 819, 822, 823, 824, 825, 827, 828, 829, 833, 837, 844, 845, 846, 853, 865, 869, 877, 880, 881, 883, 884, 885, 888, 889, 890, 893, 894, 896, 897, 898, 899, 911, 924, 925, 945, 947, 950, 986, 1002, 1013], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 216, 270, 366, 375, 376, 385, 386, 403, 457, 564, 886, 1006, 1007, 1018, 1025, 1026, 1027, 1031], "qualit": [5, 6, 53, 55, 61, 116, 123, 198, 316, 368, 399, 428, 690, 1007, 1033], "assess": [5, 37, 60, 121, 123, 168, 198, 216, 237, 255, 256, 258, 262, 397, 406, 690, 731, 975, 976, 982, 997, 1033], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 55, 70, 78, 82, 86, 91, 100, 111, 113, 120, 122, 123, 155, 157, 168, 169, 178, 184, 188, 189, 199, 204, 213, 215, 216, 246, 259, 266, 271, 281, 292, 296, 298, 301, 303, 305, 313, 319, 324, 331, 336, 344, 345, 361, 366, 368, 370, 373, 376, 382, 386, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 430, 432, 434, 435, 436, 438, 447, 448, 452, 464, 485, 487, 527, 529, 536, 544, 545, 546, 550, 551, 553, 571, 578, 579, 591, 596, 597, 639, 643, 644, 645, 647, 648, 668, 671, 672, 734, 788, 789, 803, 813, 816, 845, 846, 853, 881, 890, 893, 925, 965, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 983, 984, 986, 988, 989, 992, 997, 1000, 1009, 1010, 1018, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1033, 1034], "img": [5, 50, 66, 495, 575], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 58, 80, 105, 111, 113, 119, 123, 128, 129, 130, 139, 150, 152, 154, 155, 156, 157, 168, 177, 188, 189, 191, 198, 211, 212, 220, 224, 227, 231, 233, 241, 246, 248, 262, 266, 268, 279, 284, 285, 291, 292, 295, 296, 297, 298, 303, 304, 315, 324, 330, 331, 335, 336, 337, 338, 340, 341, 344, 351, 352, 454, 482, 483, 484, 620, 707, 963, 976], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 58, 82, 89, 95, 98, 106, 152, 153, 154, 158, 171, 189, 214, 220, 236, 270, 283, 298, 319, 320, 331, 337, 340, 367, 621, 686, 1007, 1008, 1032], "grei": [5, 34, 269, 301, 368], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 78, 82, 85, 95, 116, 220, 232, 236, 253, 258, 260, 261, 301, 320, 324, 331, 341, 344, 368, 373, 375, 399, 401, 406, 408, 431, 542, 543, 548, 549, 577, 580, 623, 645, 681, 704, 783, 784, 785, 788, 789, 799, 811, 929, 975, 981, 991, 997, 1018, 1022, 1023, 1025], "fontsiz": [5, 8, 10, 14, 34, 50, 60, 91, 98, 119, 142, 153, 154, 156, 159, 169, 178, 188, 197, 209, 220, 221, 247, 254, 263, 264, 265, 270, 271, 298, 305, 338, 902], "mse": [5, 7, 78, 79, 123, 124, 162, 163, 198, 200, 204, 273, 636, 642, 738, 976, 992, 1029, 1031], "quantit": [5, 6, 25, 61, 123, 133, 147, 255, 273, 370, 1007], "nmse": [5, 273], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 62, 64, 67, 85, 92, 98, 105, 123, 129, 130, 142, 168, 169, 171, 174, 178, 187, 189, 194, 198, 213, 214, 215, 216, 227, 231, 258, 262, 263, 265, 267, 268, 269, 287, 288, 295, 303, 306, 315, 331, 344, 345, 355, 400, 403, 406, 812], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 57, 74, 75, 86, 95, 100, 104, 109, 113, 115, 128, 130, 133, 136, 137, 139, 142, 145, 147, 154, 156, 162, 163, 166, 167, 169, 172, 174, 180, 182, 184, 186, 187, 188, 193, 195, 196, 199, 200, 206, 210, 212, 214, 215, 216, 217, 218, 221, 223, 225, 230, 233, 235, 236, 239, 253, 255, 256, 257, 259, 262, 264, 265, 266, 267, 268, 269, 273, 284, 287, 288, 298, 301, 302, 303, 308, 313, 314, 326, 328, 331, 332, 333, 335, 336, 339, 340, 342, 344, 351, 352, 360, 362, 365, 369, 370, 371, 375, 376, 378, 386, 388, 399, 402, 403, 404, 405, 406, 407, 408, 409, 411, 431, 444, 454, 456, 464, 471, 472, 473, 485, 490, 491, 501, 504, 510, 513, 521, 522, 523, 524, 525, 528, 530, 532, 533, 537, 538, 539, 543, 555, 571, 578, 582, 583, 595, 598, 603, 609, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 677, 678, 679, 680, 681, 682, 690, 696, 705, 738, 741, 753, 755, 762, 773, 785, 796, 800, 811, 814, 828, 829, 833, 837, 844, 845, 846, 849, 854, 855, 858, 861, 863, 865, 866, 867, 868, 877, 881, 888, 889, 890, 891, 892, 893, 894, 965, 967, 968, 969, 971, 976, 979, 980, 981, 982, 983, 984, 990, 991, 996, 998, 1000, 1002, 1005, 1006, 1011, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032], "radial": [5, 100, 150, 155, 157, 331, 365, 441, 611, 680, 974, 991, 1013], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 131, 139, 150, 151, 152, 154, 155, 156, 157, 159, 165, 212, 226, 227, 233, 242, 257, 259, 261, 264, 274, 324, 326, 328, 335, 337, 338, 342, 365, 400, 404, 406, 441, 491, 493, 524, 530, 599, 600, 601, 602, 605, 608, 609, 610, 612, 613, 628, 629, 630, 631, 632, 665, 680, 753, 762, 764, 785, 796, 799, 805, 848, 868, 883, 884, 888, 890, 891, 892, 893, 894, 965, 968, 969, 971, 973, 976, 982, 986, 989, 1002, 1007, 1013, 1024, 1029], "decomposit": [5, 6, 14, 17, 58, 70, 72, 73, 74, 86, 87, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 128, 134, 219, 220, 222, 232, 235, 239, 258, 283, 288, 306, 315, 345, 361, 362, 366, 379, 382, 386, 396, 397, 400, 406, 438, 440, 441, 442, 451, 471, 472, 473, 484, 538, 545, 600, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 661, 662, 663, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 783, 784, 837, 844, 847, 850, 866, 897, 924, 925, 972, 973, 976, 993, 996, 998, 1005, 1007, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "kernel_pca": [5, 100, 400], "400": [5, 26, 35, 50, 95, 109, 125, 129, 150, 163, 204, 224, 271, 296, 345, 368, 404, 484, 1011], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 150, 153, 155, 156, 157, 158, 159, 162, 168, 178, 191, 198, 199, 205, 212, 216, 222, 227, 233, 238, 244, 247, 250, 257, 267, 270, 297, 308, 314, 323, 329, 331, 339, 344, 379, 411, 432, 436, 441, 448, 451, 460, 461, 467, 471, 472, 473, 520, 521, 522, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 548, 549, 550, 551, 581, 586, 600, 602, 603, 604, 608, 609, 611, 612, 614, 616, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 678, 679, 680, 681, 682, 683, 684, 716, 729, 773, 783, 784, 799, 823, 824, 825, 826, 827, 828, 829, 837, 845, 846, 853, 883, 884, 888, 889, 890, 891, 892, 893, 894, 962, 965, 976, 980, 984, 986, 990, 1007, 1011, 1026, 1031, 1032, 1033], "fit_inverse_transform": [5, 100, 524, 1027], "5e": [5, 95, 183, 584, 585, 587], "inde": [5, 7, 25, 39, 40, 53, 55, 58, 82, 86, 100, 113, 146, 147, 150, 168, 170, 177, 182, 186, 187, 198, 200, 261, 262, 266, 268, 279, 301, 306, 345, 355, 359, 372, 378, 385, 386, 387, 399, 401, 406, 556, 557, 972, 986, 990, 1032], "least": [5, 14, 80, 81, 84, 87, 98, 121, 124, 147, 158, 165, 176, 177, 182, 191, 198, 200, 203, 206, 215, 216, 217, 231, 259, 277, 306, 313, 314, 331, 345, 346, 359, 366, 368, 370, 372, 373, 377, 379, 381, 384, 386, 387, 390, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 433, 437, 439, 445, 446, 447, 450, 463, 471, 472, 473, 474, 483, 505, 520, 526, 528, 530, 531, 532, 534, 535, 536, 537, 538, 546, 547, 548, 549, 551, 553, 554, 555, 582, 591, 624, 632, 635, 637, 639, 640, 641, 642, 643, 644, 645, 646, 652, 653, 654, 655, 656, 657, 658, 660, 661, 663, 665, 667, 668, 669, 671, 672, 673, 674, 675, 676, 681, 686, 701, 705, 707, 773, 786, 790, 791, 797, 799, 800, 801, 803, 804, 806, 809, 812, 813, 814, 845, 846, 849, 860, 868, 893, 896, 897, 898, 899, 917, 939, 966, 969, 973, 976, 979, 988, 990, 991, 992, 997, 998, 1000, 1009, 1013, 1018, 1020, 1021, 1024, 1025, 1029], "hope": [5, 216, 386, 398, 1027], "remov": [5, 14, 16, 17, 34, 54, 55, 70, 75, 147, 162, 163, 168, 171, 177, 260, 301, 308, 311, 312, 313, 344, 345, 349, 355, 365, 368, 372, 373, 374, 377, 378, 382, 386, 399, 400, 403, 406, 407, 409, 410, 426, 431, 433, 436, 438, 439, 446, 448, 467, 477, 478, 515, 523, 524, 526, 528, 530, 535, 542, 543, 544, 545, 556, 557, 558, 559, 568, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 600, 619, 622, 627, 633, 634, 639, 640, 643, 644, 645, 647, 653, 654, 729, 756, 766, 767, 768, 791, 807, 812, 835, 847, 848, 852, 853, 861, 865, 866, 868, 877, 891, 892, 894, 903, 919, 920, 922, 966, 973, 979, 992, 998, 1003, 1013, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "think": [5, 37, 169, 344, 345, 373, 405, 975, 997, 999, 1000, 1002], "happen": [5, 115, 186, 301, 307, 345, 355, 359, 360, 371, 372, 373, 377, 378, 379, 384, 386, 387, 389, 399, 401, 403, 406, 426, 504, 561, 647, 773, 866, 868, 888, 972, 976, 977, 991, 997, 1011, 1026, 1030, 1031, 1033, 1034], "ridg": [5, 10, 13, 54, 75, 130, 147, 149, 160, 162, 165, 168, 169, 176, 177, 182, 198, 199, 217, 226, 236, 242, 344, 359, 362, 384, 404, 406, 513, 524, 528, 532, 600, 604, 611, 614, 632, 633, 634, 636, 638, 646, 650, 662, 663, 664, 667, 676, 690, 738, 785, 791, 799, 821, 894, 976, 984, 986, 990, 991, 998, 1009, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1028, 1031, 1032, 1033], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 144, 234, 283, 345, 390, 404, 407, 434, 454, 471, 472, 473, 522, 523, 524, 527, 528, 529, 530, 532, 533, 570, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 619, 785, 788, 789, 799, 848, 852, 853, 855, 856, 857, 858, 859, 861, 862, 864, 865, 866, 868, 880, 881, 986, 987, 988, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 33, 58, 79, 86, 95, 97, 103, 109, 110, 113, 116, 119, 123, 126, 150, 152, 154, 156, 158, 169, 170, 182, 183, 184, 188, 198, 199, 200, 201, 211, 219, 223, 230, 231, 236, 246, 250, 258, 259, 261, 262, 266, 267, 269, 272, 283, 285, 286, 303, 306, 315, 322, 331, 337, 344, 345, 346, 350, 368, 373, 397, 398, 399, 402, 403, 404, 405, 406, 407, 410, 433, 437, 453, 456, 487, 498, 521, 523, 530, 533, 542, 548, 549, 550, 551, 552, 577, 578, 580, 592, 600, 602, 603, 604, 606, 608, 609, 611, 612, 614, 621, 622, 624, 626, 666, 668, 701, 705, 713, 716, 722, 727, 783, 784, 834, 836, 838, 839, 840, 842, 869, 890, 891, 892, 895, 912, 971, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 988, 990, 991, 992, 1009, 1020, 1021, 1026, 1033], "analysi": [5, 7, 9, 25, 29, 35, 36, 57, 63, 68, 94, 96, 97, 99, 100, 102, 104, 107, 120, 165, 168, 187, 220, 243, 251, 256, 259, 260, 264, 280, 293, 301, 306, 345, 362, 365, 368, 370, 373, 375, 387, 396, 399, 401, 406, 407, 411, 428, 436, 437, 462, 464, 465, 471, 472, 474, 491, 493, 501, 504, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 544, 545, 620, 627, 677, 679, 680, 681, 682, 699, 708, 713, 714, 744, 776, 777, 778, 779, 783, 785, 810, 814, 830, 837, 848, 849, 854, 864, 868, 876, 924, 925, 966, 972, 973, 975, 976, 986, 995, 996, 998, 1000, 1003, 1012, 1013, 1018, 1019, 1020, 1022, 1027], "favor": [5, 82, 116, 244, 250, 384, 401, 406, 622, 718, 793, 795, 847, 965, 984, 1020, 1022, 1024, 1025, 1027, 1030, 1031, 1032, 1033, 1034], "background": [5, 11, 47, 66, 126, 298, 303, 368, 373, 381, 399, 482, 483, 973, 981, 990, 1028], "749": [5, 15, 107, 224, 225], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 80, 81, 82, 86, 93, 94, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 149, 158, 160, 162, 163, 170, 171, 174, 176, 179, 181, 183, 184, 185, 186, 188, 189, 190, 191, 194, 195, 197, 201, 202, 205, 206, 210, 211, 212, 213, 214, 215, 217, 221, 223, 224, 226, 228, 231, 233, 235, 236, 237, 240, 241, 242, 244, 246, 247, 248, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 274, 277, 279, 281, 282, 283, 287, 288, 289, 290, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 326, 327, 329, 331, 332, 333, 334, 335, 339, 340, 341, 342, 345, 346, 348, 349, 351, 352, 353, 354, 355, 360, 361, 362, 375, 376, 377, 379, 385, 386, 388, 389, 393, 395, 396, 397, 399, 400, 403, 404, 405, 406, 407, 408, 414, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 447, 448, 458, 459, 462, 463, 464, 465, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 572, 573, 577, 578, 579, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 599, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 620, 621, 622, 623, 624, 627, 628, 629, 632, 634, 635, 636, 638, 640, 641, 642, 644, 646, 647, 648, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 668, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 692, 693, 697, 717, 743, 745, 775, 776, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 844, 845, 846, 848, 849, 852, 853, 861, 862, 866, 868, 870, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 908, 909, 913, 914, 965, 966, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 996, 997, 999, 1000, 1003, 1005, 1006, 1007, 1010, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "excerpt": [6, 988, 1007], "wild": [6, 366, 482, 483, 497, 498, 1007, 1013, 1018], "aka": [6, 295, 344, 384, 407, 441, 525, 527, 529, 533, 536, 570, 571, 604, 611, 640, 641, 643, 644, 645, 647, 648, 651, 655, 656, 657, 659, 665, 666, 667, 729, 855, 859, 861, 972, 980, 990, 1002, 1007, 1020, 1032], "lfw": [6, 368, 482, 483, 1007, 1018], "vi": [6, 8, 368, 1007, 1026, 1029], "www": [6, 71, 174, 198, 214, 216, 228, 277, 297, 367, 368, 373, 381, 389, 399, 403, 431, 438, 476, 497, 498, 520, 523, 526, 530, 633, 647, 653, 660, 674, 675, 837, 844, 896, 897, 972, 989, 1007], "umass": [6, 19, 368, 1007], "edu": [6, 8, 11, 17, 46, 121, 147, 157, 174, 180, 219, 247, 258, 284, 292, 305, 344, 367, 368, 370, 399, 438, 476, 489, 491, 497, 498, 499, 523, 630, 633, 638, 647, 655, 656, 665, 668, 671, 672, 823, 825, 826, 827, 837, 844, 881, 883, 896, 897, 972, 974, 1007], "funnel": [6, 482, 483, 1007], "tgz": [6, 1007], "233mb": [6, 1007], "stat": [6, 8, 10, 70, 80, 101, 147, 150, 171, 256, 259, 267, 271, 284, 313, 319, 320, 370, 382, 385, 401, 463, 581, 584, 585, 587, 588, 589, 593, 594, 595, 598, 671, 672, 789, 797, 799, 896, 897, 927, 965, 972, 986, 1007, 1025, 1027, 1031], "loguniform": [6, 150, 267, 965, 1007, 1028], "fetch_lfw_peopl": [6, 368, 1007, 1033], "confusionmatrixdisplai": [6, 32, 253, 314, 319, 344, 620, 707, 976, 1007, 1028, 1029, 1031, 1032, 1033], "classification_report": [6, 32, 70, 144, 257, 298, 319, 320, 976, 1007, 1011, 1020, 1022, 1026, 1027, 1028, 1030, 1034], "randomizedsearchcv": [6, 71, 150, 260, 267, 313, 355, 385, 564, 965, 976, 990, 996, 1007, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033], "standardscal": [6, 10, 31, 44, 49, 55, 58, 62, 71, 73, 86, 106, 130, 168, 177, 186, 187, 189, 198, 214, 216, 228, 229, 238, 239, 241, 256, 266, 287, 288, 295, 303, 306, 311, 312, 314, 315, 316, 331, 334, 355, 361, 373, 375, 378, 382, 385, 400, 403, 420, 455, 456, 556, 639, 640, 643, 644, 645, 653, 654, 665, 667, 848, 849, 852, 865, 879, 888, 889, 890, 891, 893, 894, 966, 973, 980, 986, 990, 991, 993, 1007, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1034], "svc": [6, 16, 25, 27, 30, 31, 32, 70, 74, 131, 137, 139, 145, 165, 174, 232, 235, 239, 253, 257, 259, 261, 264, 265, 266, 269, 270, 274, 303, 311, 313, 322, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 359, 375, 379, 386, 393, 397, 400, 403, 406, 457, 504, 544, 686, 687, 689, 691, 785, 802, 815, 817, 848, 885, 886, 888, 890, 964, 965, 971, 974, 976, 977, 986, 1002, 1006, 1007, 1009, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "disk": [6, 13, 368, 371, 373, 378, 386, 393, 1007], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 61, 62, 64, 70, 72, 81, 85, 92, 96, 97, 110, 122, 124, 126, 129, 132, 137, 144, 147, 151, 152, 153, 158, 168, 177, 179, 182, 191, 192, 195, 198, 199, 205, 215, 220, 221, 227, 231, 234, 238, 241, 244, 245, 246, 248, 249, 254, 255, 257, 259, 260, 263, 264, 268, 277, 292, 304, 311, 314, 315, 320, 327, 334, 344, 352, 353, 355, 359, 360, 366, 367, 368, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 393, 396, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 504, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 570, 571, 572, 573, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 908, 909, 910, 913, 914, 922, 923, 924, 925, 926, 927, 929, 930, 931, 938, 939, 940, 947, 948, 949, 950, 951, 952, 953, 954, 962, 963, 966, 971, 972, 974, 976, 977, 979, 980, 982, 983, 986, 987, 988, 990, 991, 992, 995, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "lfw_peopl": [6, 368, 1007], "min_faces_per_person": [6, 368, 483, 1007], "resiz": [6, 46, 47, 238, 368, 482, 483, 1007], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 70, 75, 78, 79, 80, 81, 82, 86, 92, 95, 96, 100, 103, 109, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 138, 139, 146, 147, 159, 162, 163, 167, 177, 179, 180, 182, 184, 186, 188, 190, 192, 193, 197, 198, 199, 201, 202, 206, 210, 213, 215, 216, 219, 220, 221, 222, 223, 224, 227, 231, 232, 234, 245, 247, 248, 249, 250, 256, 257, 259, 262, 263, 266, 268, 269, 270, 271, 272, 273, 279, 289, 303, 304, 305, 308, 312, 313, 315, 321, 329, 332, 333, 339, 344, 345, 355, 366, 370, 373, 375, 378, 382, 384, 385, 386, 390, 399, 401, 402, 403, 404, 406, 410, 411, 412, 414, 416, 417, 418, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 490, 493, 497, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 610, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 758, 759, 760, 761, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 913, 914, 925, 927, 929, 938, 945, 947, 950, 951, 952, 953, 954, 955, 956, 957, 965, 968, 972, 976, 977, 979, 980, 986, 987, 988, 990, 991, 992, 1002, 1007, 1008, 1009, 1010, 1011, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 58, 64, 102, 105, 162, 197, 202, 215, 234, 235, 244, 245, 246, 249, 250, 270, 298, 314, 315, 336, 339, 346, 355, 368, 370, 379, 393, 399, 400, 404, 406, 407, 411, 416, 421, 426, 454, 458, 461, 463, 471, 472, 473, 512, 527, 529, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 577, 578, 580, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 682, 713, 714, 744, 785, 799, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 830, 831, 834, 835, 838, 839, 845, 846, 881, 883, 884, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 922, 927, 972, 976, 980, 981, 986, 988, 990, 991, 1007, 1011, 1028, 1032, 1033, 1034, 1035], "info": [6, 42, 71, 95, 168, 169, 234, 257, 370, 372, 377, 386, 407, 932, 1007], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 58, 60, 61, 78, 79, 80, 81, 82, 91, 92, 95, 103, 110, 112, 114, 116, 117, 144, 146, 147, 162, 163, 174, 177, 180, 182, 184, 192, 193, 197, 201, 202, 213, 215, 220, 227, 231, 232, 234, 244, 249, 256, 262, 266, 268, 269, 271, 272, 289, 295, 303, 311, 312, 313, 315, 339, 344, 345, 346, 355, 359, 366, 367, 373, 375, 378, 384, 385, 386, 390, 399, 401, 402, 404, 406, 407, 410, 411, 412, 414, 416, 417, 418, 421, 422, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 447, 448, 449, 450, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481, 483, 490, 493, 497, 498, 501, 504, 505, 508, 510, 512, 513, 515, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 689, 690, 691, 699, 713, 746, 747, 748, 749, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 925, 951, 952, 953, 954, 955, 956, 957, 968, 972, 977, 979, 980, 986, 990, 991, 992, 1002, 1007, 1008, 1010, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "id": [6, 19, 216, 292, 353, 367, 368, 373, 381, 401, 403, 407, 483, 484, 485, 900, 902, 920, 1007, 1011, 1026, 1027, 1030], "person": [6, 262, 368, 372, 403, 407, 482, 483, 484, 986, 1007, 1026], "target_nam": [6, 19, 52, 99, 104, 167, 207, 220, 246, 253, 260, 268, 269, 282, 307, 323, 344, 350, 366, 368, 477, 478, 480, 481, 482, 483, 485, 486, 489, 491, 492, 493, 494, 499, 702, 976, 992, 1002, 1007, 1011, 1028], "n_class": [6, 30, 37, 91, 92, 110, 112, 117, 119, 144, 146, 213, 220, 232, 235, 246, 266, 267, 268, 288, 289, 311, 350, 355, 373, 375, 386, 406, 426, 477, 478, 491, 504, 508, 512, 538, 539, 540, 542, 544, 546, 548, 550, 553, 556, 558, 582, 583, 593, 599, 623, 628, 647, 648, 655, 656, 657, 663, 664, 665, 666, 686, 696, 705, 707, 723, 726, 729, 742, 776, 780, 785, 788, 789, 799, 809, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 830, 835, 837, 838, 845, 848, 855, 856, 859, 862, 872, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 898, 900, 901, 913, 914, 972, 976, 977, 980, 987, 990, 991, 999, 1007, 1023, 1024, 1025, 1027, 1028, 1029], "1288": [6, 368], "1850": [6, 368], "scaler": [6, 71, 73, 165, 214, 232, 239, 241, 287, 300, 306, 309, 316, 331, 334, 355, 378, 400, 403, 479, 647, 648, 661, 663, 676, 848, 857, 858, 860, 864, 865, 866, 868, 873, 874, 875, 876, 877, 878, 879, 980, 986, 990, 1007, 1018, 1023, 1026, 1031], "unlabel": [6, 235, 313, 319, 320, 321, 323, 324, 386, 398, 399, 883, 884, 885, 975, 1002, 1005, 1007, 1009, 1030], "unsupervis": [6, 12, 37, 49, 72, 73, 86, 95, 115, 128, 227, 235, 285, 286, 330, 344, 345, 355, 362, 365, 368, 375, 385, 386, 398, 399, 402, 404, 405, 406, 407, 422, 431, 434, 521, 523, 525, 526, 528, 531, 532, 538, 552, 555, 556, 558, 559, 571, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 617, 619, 623, 624, 627, 628, 629, 630, 631, 666, 730, 785, 788, 789, 791, 799, 807, 812, 815, 830, 831, 834, 836, 837, 838, 839, 844, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 880, 881, 885, 892, 973, 976, 982, 989, 998, 1002, 1003, 1005, 1007, 1013, 1018, 1021, 1031], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 55, 57, 58, 62, 69, 71, 73, 74, 76, 85, 86, 92, 95, 103, 110, 115, 128, 138, 139, 150, 152, 153, 157, 165, 182, 194, 199, 215, 218, 220, 221, 223, 225, 227, 231, 232, 235, 245, 246, 280, 283, 293, 303, 328, 344, 355, 359, 365, 368, 369, 370, 373, 382, 386, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 434, 436, 438, 454, 458, 462, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 493, 494, 499, 504, 508, 521, 523, 524, 527, 528, 529, 530, 533, 536, 538, 552, 555, 562, 588, 596, 620, 629, 630, 631, 641, 677, 678, 679, 680, 681, 682, 683, 685, 699, 713, 783, 784, 785, 814, 828, 829, 830, 833, 836, 837, 844, 848, 849, 852, 858, 863, 868, 880, 881, 882, 888, 892, 925, 962, 967, 968, 971, 972, 977, 978, 982, 988, 989, 990, 991, 992, 998, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1030, 1033], "reduct": [6, 19, 54, 57, 69, 73, 76, 86, 95, 113, 128, 165, 218, 220, 221, 225, 231, 235, 280, 293, 315, 328, 355, 359, 365, 398, 399, 400, 402, 404, 406, 408, 457, 471, 472, 473, 474, 491, 519, 521, 523, 524, 527, 528, 529, 530, 533, 536, 538, 542, 543, 546, 547, 548, 549, 553, 554, 555, 588, 596, 647, 648, 677, 678, 679, 680, 681, 682, 769, 785, 814, 830, 837, 844, 848, 849, 858, 868, 886, 888, 896, 897, 898, 899, 968, 973, 988, 992, 997, 998, 1000, 1007, 1013, 1019, 1020, 1021, 1024, 1032, 1033, 1034], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 62, 64, 71, 91, 97, 115, 116, 119, 130, 133, 168, 198, 200, 209, 213, 227, 237, 238, 244, 246, 247, 250, 256, 260, 268, 269, 284, 301, 303, 307, 312, 319, 320, 331, 344, 355, 371, 373, 379, 384, 396, 397, 399, 404, 405, 406, 476, 576, 577, 580, 588, 714, 744, 780, 900, 902, 965, 968, 972, 974, 984, 1000, 1007, 1010, 1011, 1032], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 58, 62, 64, 98, 182, 184, 213, 214, 215, 221, 224, 227, 231, 233, 260, 344, 345, 346, 665, 666, 667, 1007], "svd_solver": [6, 95, 103, 404, 524, 530, 1007, 1024], "whiten": [6, 95, 96, 97, 283, 404, 411, 522, 523, 530, 866, 868, 1007, 1022, 1024, 1032, 1033], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 144, 147, 155, 168, 169, 174, 177, 182, 184, 215, 233, 234, 249, 257, 260, 263, 268, 279, 304, 313, 344, 345, 346, 355, 360, 367, 371, 373, 375, 377, 380, 381, 382, 384, 386, 390, 399, 401, 403, 404, 406, 430, 431, 434, 439, 441, 461, 471, 472, 473, 474, 478, 524, 550, 551, 571, 595, 617, 619, 621, 623, 632, 633, 634, 648, 729, 783, 784, 785, 799, 804, 805, 852, 866, 961, 965, 966, 969, 972, 973, 976, 978, 979, 980, 986, 989, 990, 991, 992, 997, 1002, 1006, 1007, 1009, 1011, 1018, 1020, 1025, 1028, 1030, 1034], "components_": [6, 14, 58, 86, 95, 97, 98, 101, 106, 231, 232, 298, 306, 315, 386, 400, 404, 433, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 628, 837, 844, 880, 881, 988, 1007, 1022, 1024, 1030, 1033], "project": [6, 8, 11, 13, 17, 27, 34, 45, 53, 58, 67, 90, 94, 95, 97, 99, 101, 102, 107, 112, 154, 156, 158, 159, 165, 169, 177, 190, 195, 207, 219, 220, 221, 223, 226, 232, 235, 242, 245, 283, 288, 292, 304, 308, 311, 323, 328, 336, 345, 350, 359, 362, 365, 367, 371, 372, 378, 379, 382, 386, 387, 389, 396, 402, 404, 405, 411, 429, 435, 440, 441, 451, 463, 471, 472, 473, 474, 478, 491, 493, 520, 522, 523, 524, 526, 528, 530, 531, 532, 533, 537, 538, 562, 571, 578, 630, 631, 638, 661, 663, 677, 680, 684, 685, 818, 837, 865, 880, 881, 882, 924, 925, 970, 972, 973, 974, 977, 979, 980, 982, 989, 992, 994, 999, 1000, 1002, 1007, 1010, 1013, 1018, 1019, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "orthonorm": [6, 382, 924, 1007], "x_train_pca": [6, 1007], "x_test_pca": [6, 100, 1007], "966": 6, "007": [6, 244, 267, 279, 345], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 56, 70, 71, 72, 73, 100, 109, 111, 112, 114, 117, 118, 119, 122, 128, 131, 132, 143, 144, 146, 165, 170, 174, 176, 188, 189, 190, 196, 205, 207, 210, 213, 217, 227, 232, 234, 240, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 274, 276, 278, 281, 282, 287, 288, 290, 295, 298, 303, 313, 314, 318, 319, 320, 322, 323, 325, 326, 327, 330, 332, 333, 334, 339, 340, 341, 342, 346, 368, 370, 373, 375, 378, 384, 386, 399, 400, 403, 407, 408, 409, 416, 424, 426, 427, 428, 477, 478, 485, 493, 501, 503, 504, 511, 520, 525, 526, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 582, 583, 591, 595, 599, 611, 618, 620, 621, 622, 638, 647, 648, 655, 657, 660, 661, 662, 663, 664, 665, 686, 687, 689, 691, 692, 696, 697, 698, 701, 702, 707, 709, 714, 715, 717, 718, 722, 723, 726, 727, 728, 729, 730, 731, 742, 744, 770, 771, 772, 775, 776, 777, 780, 782, 785, 788, 789, 791, 799, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 835, 836, 838, 839, 844, 845, 846, 848, 849, 855, 868, 869, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 917, 919, 965, 966, 968, 971, 972, 973, 976, 977, 978, 981, 984, 986, 989, 990, 991, 992, 996, 997, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "1e3": [6, 7, 10, 150, 156, 162, 233, 270, 965, 1007], "1e5": [6, 155, 179, 181, 188, 270, 602, 603, 604, 608, 609, 611, 612, 614, 877, 882, 988, 1007, 1009], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 58, 63, 71, 90, 101, 102, 114, 122, 125, 126, 131, 136, 139, 143, 144, 146, 152, 154, 171, 188, 190, 191, 195, 196, 202, 205, 207, 210, 211, 212, 214, 222, 228, 229, 232, 235, 237, 241, 248, 256, 260, 264, 265, 267, 270, 271, 282, 285, 286, 287, 290, 295, 303, 306, 311, 312, 313, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 349, 350, 353, 359, 368, 385, 386, 393, 400, 403, 406, 408, 427, 538, 539, 542, 544, 546, 548, 550, 552, 553, 556, 582, 583, 586, 621, 623, 627, 628, 629, 630, 631, 633, 634, 637, 641, 647, 648, 649, 650, 651, 655, 657, 658, 661, 662, 663, 664, 665, 666, 669, 686, 687, 689, 691, 776, 785, 788, 789, 799, 816, 817, 818, 820, 823, 824, 825, 826, 827, 834, 835, 845, 888, 890, 892, 893, 896, 900, 902, 966, 968, 972, 976, 977, 979, 980, 982, 983, 990, 991, 992, 1002, 1006, 1007, 1011], "class_weight": [6, 333, 386, 546, 550, 553, 647, 648, 655, 657, 663, 664, 665, 666, 888, 890, 891, 892, 893, 894, 895, 896, 898, 965, 990, 991, 1007, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1032, 1033], "n_iter": [6, 17, 71, 150, 177, 206, 219, 220, 224, 260, 267, 279, 298, 333, 375, 379, 385, 411, 443, 467, 521, 522, 526, 528, 533, 534, 535, 536, 633, 634, 635, 636, 641, 642, 649, 650, 651, 652, 670, 671, 672, 673, 674, 675, 676, 681, 683, 788, 789, 797, 799, 844, 846, 924, 925, 965, 990, 1007, 1019, 1024, 1025, 1026, 1030, 1032, 1033, 1034], "found": [6, 19, 20, 21, 106, 117, 146, 150, 154, 156, 158, 202, 235, 257, 260, 261, 262, 306, 311, 314, 316, 331, 346, 359, 361, 367, 370, 372, 373, 375, 384, 386, 387, 396, 399, 402, 403, 404, 406, 407, 409, 423, 430, 433, 434, 448, 461, 546, 547, 548, 549, 553, 554, 577, 579, 599, 600, 617, 625, 636, 640, 642, 644, 650, 652, 654, 660, 661, 663, 665, 667, 676, 677, 701, 708, 785, 788, 789, 799, 825, 830, 831, 837, 859, 861, 862, 896, 897, 898, 899, 903, 960, 964, 965, 968, 972, 973, 975, 977, 978, 979, 980, 986, 990, 991, 992, 997, 999, 1002, 1007, 1011, 1018, 1021, 1022, 1025, 1026, 1028, 1032], "grid": [6, 8, 10, 11, 20, 25, 26, 27, 42, 54, 61, 71, 72, 74, 78, 82, 119, 121, 128, 154, 165, 167, 168, 169, 187, 216, 224, 232, 233, 234, 238, 244, 249, 252, 256, 258, 260, 263, 264, 275, 277, 281, 283, 284, 292, 298, 303, 304, 306, 328, 331, 337, 344, 375, 380, 384, 386, 394, 400, 403, 405, 406, 407, 409, 437, 450, 453, 461, 487, 491, 504, 511, 620, 621, 622, 636, 639, 642, 643, 645, 648, 650, 652, 665, 702, 716, 730, 773, 776, 785, 788, 789, 796, 799, 801, 814, 815, 893, 969, 971, 976, 979, 983, 997, 1002, 1003, 1005, 1007, 1009, 1013, 1018, 1021, 1022, 1023, 1025, 1026, 1032, 1034], "search": [6, 46, 54, 71, 72, 73, 74, 123, 144, 150, 165, 216, 233, 234, 249, 252, 260, 263, 264, 271, 275, 279, 281, 283, 298, 303, 316, 331, 344, 355, 362, 370, 371, 373, 375, 384, 386, 394, 399, 400, 403, 406, 407, 408, 409, 410, 432, 437, 439, 441, 446, 447, 450, 453, 460, 461, 467, 491, 504, 511, 546, 547, 548, 549, 553, 554, 555, 568, 588, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 617, 642, 665, 677, 678, 681, 682, 702, 716, 773, 776, 785, 788, 789, 796, 797, 799, 801, 814, 815, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 893, 896, 897, 898, 899, 930, 964, 969, 971, 973, 976, 979, 980, 990, 992, 996, 997, 1002, 1003, 1005, 1007, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1032, 1033], "best_estimator_": [6, 54, 73, 74, 78, 103, 233, 249, 260, 263, 283, 785, 788, 789, 799, 965, 1006, 1007, 1025], "76823": 6, "03433306453": 6, "003418945823095797": 6, "from_estim": [6, 25, 27, 31, 56, 112, 115, 126, 127, 131, 169, 181, 190, 207, 233, 238, 240, 253, 256, 261, 262, 266, 269, 274, 282, 287, 290, 306, 311, 312, 313, 314, 316, 327, 328, 329, 332, 333, 350, 380, 397, 622, 707, 715, 770, 772, 775, 776, 777, 971, 976, 983, 1007, 1015, 1031, 1032, 1033, 1034], "display_label": [6, 253, 686, 1007, 1030], "xticks_rot": [6, 686, 1007], "vertic": [6, 17, 60, 122, 171, 187, 231, 232, 263, 277, 301, 304, 336, 338, 386, 396, 399, 404, 504, 686, 769, 1007], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 55, 65, 73, 75, 86, 95, 96, 106, 112, 117, 119, 124, 128, 130, 132, 152, 154, 159, 162, 167, 168, 170, 171, 177, 178, 182, 188, 196, 198, 206, 209, 213, 216, 219, 232, 237, 254, 255, 271, 277, 279, 281, 291, 302, 303, 304, 305, 306, 311, 315, 329, 345, 349, 350, 1007], "047": [6, 345, 379], "precis": [6, 25, 32, 70, 75, 82, 95, 144, 156, 157, 165, 174, 228, 252, 253, 257, 275, 298, 301, 319, 320, 373, 375, 386, 396, 397, 398, 399, 401, 404, 406, 432, 458, 459, 460, 461, 462, 463, 464, 465, 467, 493, 512, 521, 523, 530, 533, 633, 634, 635, 637, 639, 640, 641, 643, 644, 645, 658, 661, 663, 669, 671, 672, 676, 689, 695, 696, 697, 702, 715, 717, 718, 719, 727, 751, 770, 771, 772, 775, 776, 783, 784, 814, 817, 828, 829, 834, 849, 868, 872, 888, 893, 900, 902, 925, 970, 972, 979, 980, 991, 1007, 1011, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "recal": [6, 25, 32, 70, 100, 144, 165, 228, 252, 257, 275, 298, 319, 320, 373, 386, 399, 493, 593, 689, 695, 696, 697, 701, 702, 715, 717, 718, 719, 770, 771, 772, 775, 776, 814, 817, 849, 868, 872, 888, 972, 992, 1007, 1011, 1021, 1022, 1025, 1027, 1028, 1030, 1031, 1032, 1034], "f1": [6, 25, 32, 70, 144, 257, 298, 319, 320, 323, 403, 702, 717, 718, 726, 771, 976, 977, 1007, 1011, 1022, 1034], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 70, 72, 108, 114, 121, 129, 134, 143, 144, 169, 199, 208, 209, 210, 216, 232, 233, 234, 240, 253, 257, 264, 266, 279, 298, 301, 305, 315, 319, 320, 323, 324, 327, 328, 331, 332, 334, 336, 339, 342, 359, 360, 361, 362, 367, 371, 373, 375, 377, 378, 379, 380, 382, 383, 385, 386, 387, 390, 399, 403, 404, 407, 409, 426, 429, 439, 441, 442, 453, 455, 456, 458, 463, 476, 485, 501, 527, 529, 530, 533, 536, 538, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 602, 603, 604, 606, 608, 609, 611, 612, 614, 616, 620, 621, 622, 632, 634, 646, 647, 648, 659, 660, 661, 663, 664, 665, 666, 667, 676, 679, 683, 696, 702, 717, 718, 726, 731, 756, 766, 767, 768, 771, 772, 775, 776, 785, 788, 789, 791, 799, 811, 812, 820, 821, 826, 828, 829, 832, 834, 835, 840, 848, 849, 853, 859, 861, 862, 864, 868, 876, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 914, 919, 920, 964, 965, 966, 968, 969, 970, 972, 975, 976, 977, 978, 979, 980, 982, 983, 986, 987, 990, 994, 996, 997, 998, 1000, 1002, 1005, 1007, 1011, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "ariel": [6, 368, 1018, 1024], "sharon": [6, 368], "69": [6, 189, 306, 320, 399, 460, 461, 596, 597, 744, 976, 986, 1009], "colin": [6, 368, 1024], "powel": [6, 368], "87": [6, 8, 32, 70, 159, 257, 298, 320, 586, 656, 776, 785, 864, 876, 976, 1011], "donald": [6, 368, 399, 713, 966], "rumsfeld": [6, 368], "63": [6, 350, 370, 406, 546, 547, 554, 555, 714, 785, 799, 898, 899, 976], "georg": [6, 368, 399, 1024, 1030, 1031, 1032, 1033], "bush": [6, 368], "95": [6, 11, 14, 30, 32, 44, 52, 57, 67, 91, 101, 102, 119, 123, 157, 168, 177, 198, 200, 205, 216, 246, 247, 250, 259, 260, 284, 292, 298, 303, 307, 315, 320, 331, 355, 406, 516, 621, 622, 625, 636, 650, 736, 885, 972, 976, 977, 989, 1011, 1021], "91": [6, 32, 51, 155, 298, 319, 320, 406, 971, 1007, 1011], "146": [6, 153, 160, 406], "gerhard": [6, 368], "schroeder": [6, 368], "hugo": [6, 368, 1024, 1029, 1030, 1031, 1032], "chavez": [6, 368], "90": [6, 10, 14, 32, 74, 105, 106, 122, 123, 124, 144, 155, 171, 178, 189, 195, 197, 200, 205, 216, 244, 268, 270, 298, 303, 307, 319, 320, 355, 359, 373, 379, 403, 552, 769, 785, 812, 817, 869, 971, 976, 1007, 1011, 1033], "toni": [6, 368, 552, 868, 982, 1031, 1032], "blair": [6, 368], "93": [6, 32, 198, 241, 257, 298, 320, 344, 370, 776, 785, 812, 896, 971, 976, 1007, 1011], "83": [6, 30, 34, 39, 70, 298, 319, 370, 375, 409, 696, 774, 971, 976, 1007, 1011, 1021], "322": [6, 91, 345, 460, 461], "macro": [6, 32, 70, 144, 257, 298, 311, 319, 320, 368, 403, 696, 702, 717, 718, 726, 771, 772, 775, 776, 976, 1011, 1018, 1026, 1034], "avg": [6, 32, 70, 144, 257, 298, 319, 320, 558, 693, 702, 976, 1007, 1011, 1034], "weight": [6, 13, 14, 19, 24, 32, 54, 70, 106, 110, 123, 131, 132, 143, 144, 155, 163, 165, 168, 176, 182, 187, 189, 198, 202, 203, 212, 213, 214, 216, 217, 239, 244, 257, 262, 266, 268, 282, 291, 294, 295, 298, 299, 306, 308, 311, 314, 319, 320, 326, 333, 342, 344, 345, 346, 355, 369, 370, 382, 384, 386, 399, 401, 402, 404, 405, 408, 410, 416, 421, 426, 429, 432, 433, 435, 436, 438, 442, 448, 449, 452, 453, 454, 456, 458, 463, 471, 472, 473, 485, 504, 513, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 578, 579, 580, 582, 586, 591, 592, 599, 600, 617, 621, 622, 623, 624, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 678, 682, 686, 687, 689, 691, 692, 696, 697, 698, 701, 702, 705, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 722, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 746, 747, 757, 770, 771, 772, 773, 775, 776, 777, 780, 781, 782, 783, 784, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 850, 853, 867, 868, 869, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 913, 914, 927, 951, 957, 966, 967, 972, 973, 975, 976, 978, 979, 980, 981, 983, 986, 989, 990, 991, 992, 997, 1002, 1009, 1011, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "85": [6, 16, 17, 32, 50, 55, 70, 98, 144, 213, 216, 270, 298, 320, 355, 406, 428, 489, 544, 545, 586, 641, 647, 733, 741, 776, 785, 812, 976, 977, 1007, 1018], "plot_galleri": [6, 95, 1007], "n_row": [6, 19, 95, 396, 414, 440, 442, 500, 502, 1007], "n_col": [6, 19, 95, 236, 414, 440, 442, 500, 502, 621, 1007], "portrait": [6, 404, 1007], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 78, 82, 85, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 128, 129, 133, 136, 137, 139, 142, 143, 146, 151, 152, 153, 154, 157, 158, 163, 168, 169, 170, 177, 182, 183, 188, 191, 192, 195, 197, 199, 200, 202, 204, 209, 212, 213, 214, 215, 221, 222, 223, 227, 231, 232, 233, 235, 236, 238, 244, 246, 247, 250, 253, 258, 263, 264, 273, 284, 288, 289, 292, 295, 298, 301, 303, 304, 308, 311, 313, 319, 320, 321, 329, 331, 335, 336, 350, 351, 352, 373, 399, 405, 406, 407, 409, 427, 620, 621, 686, 687, 689, 690, 691, 791, 807, 902, 965, 969, 972, 975, 976, 979, 980, 983, 990, 991, 992, 1007, 1009, 1010, 1031], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 62, 64, 80, 82, 91, 92, 97, 98, 105, 110, 112, 113, 130, 168, 197, 198, 213, 216, 227, 235, 244, 246, 247, 250, 254, 270, 272, 284, 292, 295, 298, 303, 313, 320, 328, 331, 1007], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 62, 64, 91, 92, 121, 128, 133, 198, 209, 227, 244, 246, 247, 250, 256, 259, 270, 284, 301, 320, 322, 331, 373, 397, 399, 405, 576, 900, 970, 972, 976, 997, 1007, 1010], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 55, 62, 64, 72, 75, 81, 82, 91, 92, 97, 98, 110, 113, 115, 116, 117, 120, 123, 130, 132, 153, 159, 163, 168, 183, 191, 198, 199, 200, 202, 209, 211, 212, 215, 216, 227, 231, 235, 237, 238, 244, 246, 247, 250, 255, 256, 257, 258, 260, 268, 269, 271, 284, 285, 292, 295, 298, 301, 315, 320, 330, 331, 353, 373, 375, 377, 396, 399, 402, 403, 405, 406, 407, 409, 435, 461, 471, 472, 473, 474, 482, 487, 538, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 576, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 624, 628, 632, 640, 644, 783, 784, 785, 788, 789, 792, 799, 861, 868, 896, 897, 898, 899, 900, 912, 925, 947, 950, 965, 968, 970, 972, 974, 976, 978, 983, 988, 990, 992, 1006, 1007, 1009, 1010, 1025, 1027, 1032], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 62, 68, 76, 85, 95, 97, 98, 113, 121, 122, 124, 127, 128, 134, 147, 155, 159, 160, 168, 169, 179, 182, 189, 205, 210, 211, 216, 217, 219, 220, 225, 227, 231, 232, 233, 238, 242, 246, 250, 251, 253, 258, 259, 260, 264, 266, 267, 275, 284, 293, 296, 299, 301, 309, 312, 317, 333, 342, 345, 351, 352, 354, 368, 370, 378, 399, 408, 438, 460, 504, 521, 528, 532, 584, 585, 587, 631, 635, 643, 647, 667, 685, 704, 785, 799, 882, 945, 972, 976, 980, 986, 988, 990, 1007, 1011], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 60, 62, 64, 79, 80, 82, 91, 92, 97, 98, 100, 103, 105, 109, 110, 112, 113, 114, 123, 124, 125, 132, 143, 150, 153, 163, 188, 199, 200, 201, 202, 204, 205, 208, 209, 227, 230, 231, 234, 244, 246, 247, 249, 250, 254, 255, 259, 262, 266, 269, 270, 272, 284, 292, 295, 298, 301, 303, 306, 320, 331, 333, 339, 341, 344, 350, 353, 355, 362, 373, 384, 387, 396, 399, 402, 404, 405, 406, 409, 453, 471, 472, 473, 474, 523, 530, 533, 546, 547, 548, 549, 550, 551, 553, 554, 555, 576, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 616, 624, 665, 667, 853, 896, 897, 898, 899, 900, 912, 925, 965, 968, 970, 972, 974, 976, 978, 979, 983, 988, 990, 991, 992, 996, 997, 1000, 1003, 1007, 1009, 1010, 1020, 1026, 1032, 1034], "99": [6, 25, 32, 44, 51, 62, 95, 216, 227, 231, 244, 246, 257, 260, 298, 301, 320, 360, 366, 370, 377, 403, 406, 407, 481, 636, 650, 660, 776, 835, 945, 971, 976, 986, 990, 1007, 1013, 1020], "hspace": [6, 13, 14, 44, 45, 62, 95, 216, 227, 244, 246, 247, 250, 284, 313, 320, 328, 1007], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 125, 196, 198, 216, 231, 235, 236, 266, 297, 370, 404, 482, 483, 491, 510, 1007, 1010, 1029], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 121, 124, 137, 143, 152, 153, 154, 158, 181, 188, 194, 211, 227, 235, 245, 246, 247, 250, 254, 273, 283, 292, 298, 319, 331, 335, 336, 337, 344, 1007], "portion": [6, 8, 81, 268, 359, 368, 370, 373, 379, 386, 776, 809, 826, 965, 975, 979, 1007, 1011], "pred_nam": [6, 1007], "rsplit": [6, 17, 260, 1007], "true_nam": [6, 1007], "ntrue": [6, 319, 320, 1007], "prediction_titl": [6, 1007], "signif": [6, 1007], "eigenface_titl": [6, 1007], "convolut": [6, 158, 1007], "network": [6, 297, 359, 360, 361, 362, 367, 368, 384, 386, 387, 393, 399, 404, 406, 411, 485, 522, 524, 556, 557, 685, 729, 845, 846, 944, 972, 974, 976, 990, 992, 996, 998, 1007, 1012, 1013, 1018, 1032], "famili": [6, 359, 361, 386, 399, 402, 404, 406, 407, 408, 581, 584, 585, 587, 588, 589, 595, 845, 846, 864, 876, 972, 986, 990, 1007, 1009, 1022, 1032], "outsid": [6, 9, 19, 119, 199, 200, 230, 241, 384, 407, 435, 624, 867, 982, 1007, 1026], "scope": [6, 19, 359, 361, 373, 384, 407, 996, 997, 1007], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 50, 70, 115, 116, 130, 144, 147, 159, 163, 165, 168, 186, 187, 216, 226, 240, 252, 256, 275, 279, 284, 286, 310, 317, 344, 345, 349, 350, 355, 360, 361, 362, 365, 367, 368, 369, 370, 372, 373, 376, 379, 380, 381, 382, 385, 386, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 413, 414, 416, 417, 418, 421, 422, 427, 432, 436, 439, 446, 448, 453, 454, 456, 457, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 501, 504, 513, 527, 550, 551, 553, 554, 556, 565, 570, 571, 572, 574, 575, 578, 588, 591, 600, 615, 617, 619, 621, 623, 627, 629, 635, 637, 641, 647, 658, 669, 677, 689, 690, 691, 706, 736, 766, 767, 768, 776, 785, 786, 787, 788, 789, 790, 791, 799, 802, 803, 804, 805, 806, 807, 814, 816, 817, 830, 832, 849, 851, 853, 855, 858, 860, 861, 862, 863, 867, 868, 872, 885, 886, 888, 893, 897, 919, 920, 942, 943, 965, 966, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 986, 989, 990, 991, 992, 995, 999, 1005, 1006, 1007, 1009, 1010, 1013, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "librari": [6, 259, 314, 316, 351, 355, 365, 367, 368, 371, 372, 373, 374, 379, 384, 385, 386, 389, 395, 647, 888, 889, 890, 891, 893, 894, 944, 972, 976, 991, 992, 996, 997, 1000, 1007, 1011, 1016, 1021, 1025, 1026, 1027, 1028, 1029, 1031], "reader": [6, 42, 314, 361, 373, 1007], "pytorch": [6, 384, 996, 997, 1007, 1034], "tensorflow": [6, 384, 996, 1007], "implement": [6, 7, 13, 16, 17, 46, 56, 81, 95, 116, 163, 174, 182, 183, 187, 212, 216, 219, 227, 233, 234, 257, 259, 268, 279, 281, 284, 304, 311, 312, 313, 314, 315, 344, 346, 359, 360, 361, 367, 368, 370, 371, 373, 374, 375, 378, 379, 381, 382, 386, 389, 390, 393, 395, 396, 398, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 426, 431, 432, 433, 435, 436, 437, 438, 439, 464, 482, 485, 497, 521, 522, 523, 524, 525, 527, 530, 531, 532, 542, 543, 544, 546, 547, 550, 551, 552, 556, 561, 571, 577, 578, 580, 582, 586, 590, 599, 600, 621, 622, 629, 630, 634, 635, 642, 646, 647, 648, 652, 653, 657, 660, 661, 663, 664, 665, 666, 667, 673, 674, 675, 676, 677, 680, 681, 684, 696, 700, 709, 723, 726, 766, 770, 776, 777, 783, 785, 788, 789, 791, 799, 803, 804, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 823, 824, 825, 826, 827, 830, 831, 833, 836, 838, 839, 844, 845, 846, 848, 870, 878, 879, 885, 888, 889, 890, 891, 892, 893, 894, 924, 925, 936, 941, 944, 945, 947, 965, 966, 968, 970, 972, 973, 974, 975, 977, 978, 980, 981, 982, 986, 988, 989, 992, 993, 994, 996, 997, 998, 1000, 1002, 1007, 1008, 1009, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "334": [6, 15, 153, 241], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 55, 61, 68, 70, 72, 114, 124, 144, 158, 165, 199, 234, 240, 241, 246, 250, 252, 262, 265, 268, 273, 275, 281, 284, 291, 300, 303, 305, 308, 309, 313, 318, 320, 321, 324, 325, 329, 339, 344, 345, 346, 355, 361, 368, 369, 373, 378, 384, 390, 395, 399, 403, 406, 436, 491, 501, 509, 686, 692, 702, 730, 784, 785, 853, 884, 896, 965, 966, 970, 976, 977, 978, 979, 986, 989, 992, 995], "diabet": [7, 124, 133, 135, 140, 147, 163, 165, 185, 186, 187, 194, 195, 255, 366, 406, 490, 641, 642, 785, 790, 809, 810, 811, 984, 1002, 1006, 1013], "regress": [7, 10, 13, 25, 27, 30, 54, 69, 71, 76, 80, 81, 84, 87, 98, 108, 113, 115, 116, 121, 129, 134, 147, 149, 160, 162, 163, 165, 167, 168, 169, 176, 180, 182, 184, 188, 192, 193, 195, 199, 201, 202, 203, 214, 217, 226, 228, 236, 241, 242, 255, 272, 273, 277, 280, 293, 298, 302, 306, 313, 314, 315, 316, 326, 342, 344, 348, 354, 360, 361, 362, 365, 366, 368, 370, 373, 375, 378, 381, 382, 384, 385, 386, 394, 397, 401, 402, 403, 404, 408, 421, 426, 453, 454, 463, 473, 478, 479, 481, 485, 490, 491, 493, 494, 501, 505, 506, 507, 513, 517, 520, 524, 526, 528, 530, 531, 532, 534, 535, 537, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 559, 560, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 595, 598, 599, 600, 603, 604, 611, 612, 614, 620, 621, 622, 623, 624, 626, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 690, 695, 710, 711, 712, 716, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 773, 785, 788, 789, 791, 799, 807, 811, 812, 814, 815, 819, 821, 822, 830, 831, 836, 838, 839, 845, 846, 848, 849, 852, 853, 855, 861, 862, 863, 865, 868, 869, 872, 877, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 902, 908, 911, 913, 929, 965, 966, 968, 971, 973, 983, 984, 986, 987, 996, 997, 998, 999, 1000, 1002, 1005, 1008, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "patient": [7, 133, 147, 163, 370, 381, 403, 972, 1009], "diseas": [7, 133, 147, 163, 262, 370, 701, 976, 1009], "newsgroup": [7, 14, 19, 231, 260, 323, 345, 346, 366, 396, 407, 477, 478, 1003, 1013], "post": [7, 14, 19, 70, 165, 315, 344, 345, 346, 348, 354, 359, 368, 372, 373, 377, 378, 385, 399, 437, 477, 478, 489, 701, 814, 896, 976, 992, 1000, 1011, 1029], "written": [7, 29, 35, 89, 165, 205, 314, 360, 370, 373, 374, 375, 379, 381, 384, 386, 400, 405, 476, 491, 497, 686, 702, 814, 893, 900, 970, 972, 976, 980, 981, 990, 995, 1002, 1003, 1008, 1011, 1027], "about": [7, 11, 29, 44, 53, 57, 62, 70, 86, 89, 119, 144, 159, 165, 167, 168, 171, 215, 227, 234, 256, 257, 259, 261, 266, 284, 306, 311, 313, 314, 315, 316, 320, 344, 346, 353, 355, 359, 360, 362, 366, 368, 372, 373, 377, 378, 379, 385, 386, 387, 393, 403, 404, 407, 409, 427, 481, 483, 484, 485, 486, 489, 490, 491, 493, 494, 499, 504, 550, 551, 582, 583, 596, 597, 603, 622, 629, 665, 667, 731, 785, 791, 799, 807, 817, 909, 966, 972, 973, 975, 977, 979, 982, 983, 986, 987, 989, 991, 992, 994, 996, 1000, 1002, 1003, 1009, 1011, 1023, 1024, 1034], "sgdclassifi": [7, 8, 205, 206, 207, 208, 209, 210, 211, 232, 267, 323, 333, 344, 355, 359, 361, 379, 386, 397, 398, 407, 627, 629, 630, 631, 635, 647, 655, 657, 888, 893, 968, 972, 977, 990, 991, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1033, 1034], "stochast": [7, 58, 122, 125, 165, 174, 176, 217, 221, 223, 227, 232, 287, 288, 294, 299, 314, 399, 404, 406, 451, 477, 485, 491, 492, 493, 503, 511, 525, 533, 548, 549, 560, 593, 616, 628, 647, 648, 657, 661, 663, 665, 666, 667, 668, 676, 677, 678, 679, 681, 814, 837, 844, 845, 846, 849, 858, 892, 924, 925, 950, 965, 979, 980, 982, 998, 1012, 1013, 1018, 1019, 1022, 1023, 1025, 1027, 1029], "gradient": [7, 46, 66, 108, 115, 127, 130, 133, 134, 155, 156, 165, 176, 217, 227, 232, 301, 307, 386, 399, 409, 441, 451, 455, 456, 477, 479, 485, 490, 492, 493, 504, 509, 542, 543, 548, 549, 550, 551, 553, 554, 560, 575, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 623, 624, 628, 637, 638, 647, 648, 657, 658, 661, 663, 665, 666, 667, 669, 676, 681, 683, 684, 729, 730, 736, 738, 785, 788, 789, 790, 811, 814, 844, 845, 846, 849, 861, 862, 892, 950, 973, 976, 979, 980, 981, 982, 996, 998, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1033], "descent": [7, 13, 165, 176, 183, 217, 227, 232, 314, 404, 406, 460, 461, 467, 477, 485, 492, 520, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 560, 628, 635, 636, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 657, 661, 663, 665, 666, 667, 670, 671, 672, 673, 676, 683, 814, 845, 846, 849, 888, 892, 950, 973, 980, 982, 991, 998, 1009, 1013, 1018, 1021, 1022, 1023, 1025, 1027, 1029, 1031, 1032, 1033], "nusvr": [7, 359, 894, 991, 1020, 1026, 1028, 1029, 1030, 1032, 1033], "nu": [7, 9, 11, 159, 212, 227, 330, 359, 406, 409, 608, 666, 890, 891, 892, 982, 990, 991, 1029, 1033], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 68, 72, 89, 95, 97, 143, 150, 158, 179, 185, 202, 203, 210, 214, 232, 233, 237, 240, 257, 259, 260, 264, 285, 298, 301, 324, 327, 328, 330, 331, 332, 334, 335, 336, 339, 341, 342, 345, 359, 361, 362, 378, 379, 382, 384, 386, 396, 397, 399, 401, 402, 403, 404, 406, 409, 410, 411, 426, 432, 433, 434, 436, 438, 439, 440, 442, 453, 454, 456, 457, 471, 472, 473, 474, 476, 478, 486, 498, 501, 510, 513, 520, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 539, 540, 541, 556, 557, 558, 559, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 611, 612, 614, 620, 627, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 661, 662, 663, 664, 665, 666, 667, 675, 676, 677, 678, 680, 681, 682, 684, 708, 723, 751, 756, 757, 758, 759, 761, 762, 763, 765, 766, 785, 788, 789, 799, 812, 815, 816, 817, 823, 824, 825, 826, 827, 830, 831, 832, 834, 835, 836, 838, 839, 840, 845, 846, 853, 855, 860, 868, 872, 875, 886, 888, 889, 890, 891, 892, 893, 894, 895, 908, 922, 924, 925, 939, 945, 965, 968, 969, 970, 972, 973, 974, 976, 977, 978, 980, 981, 982, 986, 990, 992, 998, 1002, 1005, 1008, 1011, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1024, 1026, 1027, 1029, 1031], "gradientboostingregressor": [7, 123, 124, 130, 133, 359, 378, 384, 406, 543, 551, 621, 622, 972, 976, 977, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "forward": [7, 147, 234, 313, 359, 373, 390, 408, 497, 498, 528, 532, 542, 548, 549, 574, 575, 591, 674, 675, 852, 972, 997, 1030], "wise": [7, 26, 48, 158, 199, 227, 269, 301, 345, 359, 386, 397, 399, 403, 404, 408, 447, 520, 523, 526, 530, 534, 535, 538, 539, 542, 544, 545, 548, 549, 581, 584, 585, 587, 588, 589, 595, 629, 641, 689, 742, 816, 865, 878, 879, 882, 949, 951, 952, 953, 954, 957, 968, 970, 976, 977, 990, 997, 1018, 1023, 1026, 1027, 1028], "fashion": [7, 115, 121, 206, 268, 360, 386, 396, 397, 399, 404, 406, 542, 546, 547, 548, 549, 553, 554, 555, 591, 616, 814, 837, 852, 855, 861, 872, 896, 897, 898, 899, 947, 966, 972, 976, 986, 1027], "notic": [7, 25, 26, 53, 57, 80, 113, 115, 116, 123, 146, 177, 182, 227, 240, 256, 257, 259, 260, 262, 268, 269, 279, 306, 344, 345, 346, 355, 378, 387, 403, 485, 530, 552, 965, 975, 976, 982, 1011, 1015, 1031], "faster": [7, 19, 39, 64, 73, 95, 110, 115, 116, 120, 123, 147, 169, 174, 184, 198, 200, 213, 214, 216, 233, 279, 281, 297, 312, 314, 315, 344, 345, 346, 359, 367, 373, 381, 382, 386, 398, 399, 404, 408, 409, 411, 432, 436, 438, 440, 441, 442, 451, 497, 520, 521, 522, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 542, 548, 549, 550, 551, 632, 635, 636, 641, 642, 647, 648, 649, 650, 651, 652, 661, 663, 673, 676, 680, 684, 714, 744, 766, 767, 768, 828, 829, 833, 845, 846, 863, 865, 867, 877, 881, 925, 945, 965, 969, 972, 977, 979, 980, 983, 988, 990, 991, 992, 996, 999, 1007, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "10_000": [7, 25, 75, 115, 123, 167, 174, 231, 262, 279, 548, 549, 553, 554, 865], "vari": [7, 34, 44, 46, 55, 62, 75, 116, 117, 119, 146, 165, 168, 169, 187, 189, 192, 196, 224, 232, 249, 255, 259, 262, 294, 299, 301, 306, 318, 325, 331, 334, 355, 359, 361, 368, 386, 430, 434, 435, 489, 497, 503, 504, 511, 548, 549, 553, 554, 635, 636, 639, 640, 641, 642, 643, 644, 649, 650, 651, 652, 670, 673, 692, 751, 804, 807, 812, 814, 815, 845, 849, 853, 868, 885, 893, 896, 897, 950, 968, 971, 972, 976, 979, 980, 989, 992, 1000, 1025, 1026, 1034], "relev": [7, 9, 19, 77, 83, 145, 165, 177, 192, 259, 260, 266, 355, 359, 361, 368, 370, 372, 373, 375, 377, 378, 379, 386, 387, 390, 401, 402, 408, 409, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 583, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 714, 728, 744, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 866, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 976, 977, 982, 993, 997, 1021, 1026, 1030, 1032], "select": [7, 9, 36, 44, 55, 57, 62, 68, 69, 71, 74, 76, 82, 92, 94, 107, 112, 118, 120, 123, 130, 137, 144, 148, 155, 157, 168, 169, 171, 174, 176, 178, 182, 206, 213, 216, 217, 220, 227, 231, 233, 243, 244, 251, 257, 258, 259, 260, 264, 283, 301, 306, 307, 313, 319, 320, 323, 326, 331, 339, 342, 344, 345, 346, 355, 359, 360, 362, 368, 370, 371, 373, 375, 381, 385, 386, 396, 399, 400, 401, 404, 406, 407, 409, 432, 434, 435, 436, 438, 440, 442, 447, 448, 449, 453, 455, 456, 461, 462, 465, 477, 478, 481, 482, 485, 486, 490, 491, 493, 501, 504, 521, 523, 524, 529, 530, 533, 538, 540, 547, 548, 549, 552, 554, 570, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 616, 620, 621, 634, 635, 636, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 660, 662, 665, 667, 671, 672, 680, 681, 686, 701, 705, 707, 742, 778, 779, 783, 784, 785, 788, 789, 790, 791, 799, 810, 811, 812, 814, 816, 830, 831, 832, 834, 836, 838, 839, 840, 848, 849, 853, 858, 864, 868, 885, 888, 889, 893, 896, 897, 898, 899, 904, 945, 946, 970, 971, 973, 976, 977, 979, 980, 982, 986, 989, 990, 991, 992, 993, 996, 997, 998, 1000, 1002, 1003, 1005, 1009, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "ham": [7, 439, 446, 570, 692, 698, 722, 729, 766, 767, 768, 782, 979], "loss": [7, 24, 25, 26, 27, 116, 121, 122, 123, 124, 125, 150, 151, 165, 176, 180, 188, 191, 200, 203, 205, 206, 210, 216, 217, 233, 267, 296, 297, 306, 314, 323, 328, 329, 333, 339, 344, 384, 386, 397, 398, 404, 409, 453, 454, 485, 497, 498, 521, 527, 528, 529, 532, 536, 541, 542, 543, 547, 548, 549, 550, 551, 554, 632, 635, 638, 647, 648, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 692, 695, 698, 711, 722, 723, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 782, 785, 788, 789, 799, 810, 811, 814, 845, 846, 848, 849, 852, 853, 861, 862, 863, 868, 888, 889, 894, 895, 897, 899, 925, 929, 969, 972, 980, 984, 989, 990, 991, 992, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "eustach": [7, 8, 10, 1000, 1020, 1021], "diemert": [7, 8, 10, 1000, 1020, 1021], "maria": [7, 124, 130, 147, 163, 399, 1029, 1030, 1031, 1032, 1033], "telenczuk": [7, 124, 130, 147, 163, 1027, 1030, 1031, 1033], "github": [7, 8, 12, 26, 71, 72, 109, 115, 117, 118, 124, 126, 127, 130, 133, 144, 155, 163, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 279, 298, 307, 312, 313, 315, 316, 321, 353, 367, 371, 372, 376, 377, 378, 379, 381, 384, 386, 387, 389, 393, 395, 441, 451, 497, 525, 680, 681, 684, 979, 995, 996, 999, 1000, 1011, 1023, 1028], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 57, 65, 70, 71, 109, 110, 111, 112, 113, 114, 115, 121, 122, 124, 125, 129, 130, 150, 153, 155, 157, 159, 163, 178, 198, 200, 205, 215, 216, 220, 222, 224, 230, 244, 246, 247, 260, 263, 279, 301, 302, 305, 306, 344, 345, 367, 368, 371, 373, 377, 378, 379, 381, 384, 389, 399, 431, 441, 451, 497, 523, 525, 530, 660, 680, 684, 694, 979, 994, 999, 1023, 1025, 1028], "maikia": [7, 124, 130, 163, 1026, 1027, 1029, 1030], "lemaitre58": [7, 130, 150, 155, 157, 159, 220, 301], "gmail": [7, 11, 14, 16, 24, 42, 48, 57, 65, 70, 71, 109, 110, 111, 112, 113, 114, 115, 121, 122, 124, 125, 129, 130, 150, 153, 155, 157, 159, 178, 198, 200, 215, 216, 220, 222, 230, 244, 246, 247, 260, 263, 301, 306, 344, 345], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 129, 130, 147, 150, 151, 153, 154, 155, 156, 157, 159, 163, 174, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 205, 206, 214, 215, 216, 220, 221, 222, 224, 227, 230, 232, 233, 235, 237, 244, 246, 260, 263, 265, 272, 277, 279, 281, 287, 288, 289, 291, 292, 295, 298, 301, 302, 303, 304, 305, 306, 319, 320, 321, 322, 324, 335, 336, 339, 340, 344, 345, 346, 367, 386, 393, 992, 1000], "hamming_loss": [7, 692, 782, 976, 1020, 1024, 1027], "mean_squared_error": [7, 123, 124, 194, 198, 200, 202, 204, 216, 355, 406, 730, 740, 976, 1019, 1021, 1028, 1029], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 57, 59, 60, 62, 64, 65, 71, 78, 79, 80, 92, 96, 101, 102, 113, 119, 139, 142, 170, 188, 193, 196, 201, 204, 207, 211, 215, 222, 245, 247, 248, 249, 250, 262, 265, 273, 284, 285, 286, 291, 336, 337, 341, 345, 355, 360, 375, 382, 384, 386, 399, 403, 404, 432, 436, 437, 439, 441, 446, 448, 449, 450, 451, 460, 461, 462, 525, 533, 542, 543, 544, 545, 548, 549, 616, 635, 636, 641, 642, 649, 650, 651, 652, 666, 678, 680, 682, 684, 783, 784, 789, 819, 822, 837, 891, 911, 924, 925, 941, 945, 965, 966, 971, 973, 1009, 1022, 1023, 1027, 1028, 1034], "fetch_20newsgroups_vector": [7, 213, 231, 368, 1018, 1028, 1030], "spars": [7, 12, 13, 17, 39, 40, 54, 55, 57, 77, 83, 94, 107, 115, 128, 165, 176, 193, 197, 214, 217, 231, 233, 260, 279, 312, 316, 339, 343, 346, 347, 353, 359, 365, 367, 368, 369, 373, 375, 376, 377, 378, 384, 385, 386, 398, 399, 400, 406, 407, 409, 410, 414, 427, 429, 431, 432, 433, 435, 436, 438, 439, 440, 441, 442, 446, 448, 449, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 476, 477, 478, 485, 486, 492, 497, 512, 513, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 570, 571, 574, 575, 577, 578, 579, 580, 582, 583, 592, 593, 594, 595, 596, 597, 598, 618, 619, 620, 622, 627, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 701, 702, 703, 717, 718, 719, 722, 726, 727, 728, 742, 743, 748, 749, 751, 752, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 775, 778, 779, 782, 785, 788, 789, 799, 806, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 853, 855, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 904, 906, 907, 908, 909, 914, 922, 925, 926, 929, 930, 931, 939, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 962, 966, 969, 972, 973, 974, 976, 977, 979, 989, 991, 992, 997, 998, 1009, 1010, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "generate_data": [7, 33], "load_diabet": [7, 124, 133, 136, 147, 163, 183, 185, 186, 187, 194, 195, 238, 255, 316, 406, 547, 551, 557, 662, 690, 809, 810, 811, 897, 899, 984, 1006, 1009, 1024, 1029, 1032], "elif": [7, 8, 16, 34, 178, 200, 235, 237, 246, 284, 864], "subset": [7, 19, 20, 26, 27, 32, 70, 71, 80, 81, 117, 119, 120, 136, 144, 169, 187, 199, 213, 214, 215, 216, 230, 232, 236, 237, 257, 260, 262, 268, 269, 271, 306, 307, 313, 319, 323, 344, 345, 346, 355, 368, 373, 381, 384, 386, 396, 397, 399, 400, 403, 406, 407, 409, 416, 426, 438, 453, 455, 456, 458, 477, 478, 481, 482, 486, 497, 538, 539, 540, 542, 544, 545, 546, 548, 550, 551, 552, 553, 556, 558, 591, 599, 618, 628, 629, 630, 631, 640, 644, 647, 655, 657, 660, 663, 664, 665, 666, 667, 668, 686, 692, 693, 702, 705, 707, 719, 722, 743, 745, 779, 782, 787, 812, 814, 816, 817, 818, 819, 823, 824, 825, 826, 827, 830, 835, 838, 845, 854, 883, 884, 888, 890, 893, 896, 898, 904, 945, 965, 972, 976, 977, 987, 989, 991, 992, 1011, 1021, 1026, 1027, 1029, 1031], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 59, 80, 108, 114, 131, 134, 163, 165, 171, 194, 203, 215, 232, 234, 258, 259, 265, 269, 273, 277, 329, 336, 355, 359, 380, 386, 396, 397, 399, 403, 404, 406, 410, 427, 430, 432, 433, 434, 435, 437, 439, 440, 442, 444, 445, 460, 461, 467, 470, 525, 536, 542, 553, 558, 586, 600, 609, 621, 622, 623, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 664, 668, 670, 673, 677, 679, 681, 683, 696, 705, 717, 718, 723, 724, 726, 732, 742, 752, 757, 759, 760, 761, 762, 766, 769, 771, 772, 775, 776, 777, 778, 779, 781, 792, 794, 809, 813, 826, 828, 829, 866, 867, 868, 874, 878, 888, 889, 914, 927, 968, 970, 972, 973, 974, 976, 978, 979, 980, 984, 986, 989, 991, 1006, 1009, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "given": [7, 10, 11, 27, 37, 49, 58, 60, 78, 85, 96, 100, 116, 126, 128, 130, 150, 157, 168, 169, 182, 198, 199, 216, 220, 227, 231, 232, 234, 236, 238, 255, 259, 260, 261, 262, 268, 285, 286, 287, 303, 307, 314, 339, 344, 345, 346, 352, 359, 361, 368, 372, 373, 375, 377, 379, 381, 382, 384, 386, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 416, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 447, 448, 449, 450, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 476, 485, 490, 492, 494, 512, 522, 523, 525, 527, 528, 529, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 578, 579, 580, 582, 583, 590, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 620, 621, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 676, 677, 679, 680, 686, 687, 688, 689, 690, 691, 693, 694, 695, 701, 703, 706, 707, 709, 712, 714, 715, 722, 724, 725, 728, 740, 743, 744, 746, 747, 752, 762, 766, 769, 770, 772, 775, 776, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 797, 799, 803, 807, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 874, 875, 877, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 903, 912, 913, 914, 935, 960, 964, 965, 968, 970, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 986, 989, 990, 991, 992, 1000, 1002, 1006, 1007, 1009, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "round": [7, 9, 25, 85, 116, 162, 163, 205, 216, 259, 265, 303, 305, 344, 439, 445, 446, 553, 554, 582, 583, 586, 616, 681, 702, 787, 797, 853, 885, 900, 902, 966, 980, 992, 1020, 1022, 1024, 1026, 1027, 1029, 1031, 1032, 1034], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 80, 114, 126, 133, 147, 155, 163, 171, 186, 191, 212, 222, 230, 262, 266, 285, 330, 333, 345, 346, 359, 368, 370, 377, 389, 403, 404, 406, 407, 409, 435, 453, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 558, 559, 570, 572, 573, 577, 578, 579, 580, 621, 787, 791, 792, 794, 807, 934, 947, 950, 965, 971, 972, 976, 982, 987, 997, 1000, 1006, 1011, 1020, 1030], "chang": [7, 16, 25, 26, 95, 99, 100, 113, 116, 124, 151, 162, 167, 168, 171, 199, 200, 202, 203, 238, 239, 254, 259, 266, 269, 305, 311, 312, 313, 314, 315, 316, 320, 331, 346, 355, 359, 360, 361, 368, 371, 375, 376, 377, 378, 381, 384, 386, 390, 399, 403, 406, 407, 409, 411, 423, 426, 429, 432, 433, 436, 438, 441, 443, 448, 451, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 482, 483, 485, 493, 497, 498, 501, 502, 503, 511, 515, 520, 522, 523, 524, 525, 526, 527, 528, 529, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 577, 578, 579, 580, 582, 583, 586, 591, 599, 600, 602, 603, 604, 606, 608, 609, 611, 612, 614, 616, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 679, 681, 689, 693, 696, 701, 705, 706, 717, 718, 724, 725, 729, 743, 744, 745, 766, 772, 773, 775, 781, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 799, 803, 804, 806, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 838, 839, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 860, 861, 867, 868, 876, 877, 882, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 906, 908, 909, 920, 925, 935, 942, 943, 944, 946, 965, 966, 967, 975, 976, 977, 979, 986, 989, 990, 991, 992, 994, 997, 1002, 1009, 1011, 1016, 1017], "affect": [7, 25, 80, 157, 167, 168, 202, 223, 238, 262, 269, 306, 355, 359, 360, 361, 369, 386, 388, 397, 399, 402, 403, 405, 407, 410, 412, 433, 439, 446, 462, 464, 468, 538, 539, 558, 701, 776, 785, 788, 789, 790, 799, 803, 804, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 868, 869, 879, 893, 975, 979, 991, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 377, 397, 403, 823, 978, 1032], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 61, 71, 103, 110, 113, 114, 116, 121, 123, 137, 163, 171, 191, 202, 203, 205, 206, 213, 216, 232, 233, 259, 262, 268, 269, 272, 277, 295, 296, 307, 322, 331, 334, 344, 345, 346, 349, 353, 379, 386, 400, 407, 647, 648, 888, 889, 895, 915, 986, 1006], "start_tim": [7, 10, 19, 117, 118, 130, 150, 187, 220], "elapsed_tim": [7, 39, 67, 117, 118, 130, 215], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 60, 61, 65, 66, 67, 71, 98, 102, 139, 158, 168, 184, 188, 222, 258, 259, 263, 267, 339, 346, 359, 367, 368, 373, 382, 386, 399, 400, 407, 408, 410, 411, 412, 416, 418, 421, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 476, 481, 482, 483, 485, 487, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 572, 573, 577, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 599, 600, 602, 603, 604, 605, 606, 608, 609, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 747, 754, 757, 763, 764, 765, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 799, 802, 805, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 846, 848, 851, 854, 855, 861, 862, 864, 866, 868, 869, 870, 871, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 906, 908, 909, 912, 922, 923, 939, 951, 957, 962, 966, 976, 977, 979, 980, 986, 991, 992, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 113, 122, 124, 213, 214, 216, 306], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 68, 94, 107, 127, 165, 197, 234, 345, 346, 366, 367, 368, 375, 384, 386, 399, 407, 438, 453, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 499, 515, 520, 526, 527, 528, 529, 531, 532, 533, 534, 535, 537, 556, 557, 558, 559, 570, 571, 573, 576, 577, 578, 621, 622, 623, 653, 674, 675, 690, 702, 785, 788, 789, 796, 797, 799, 811, 847, 852, 861, 896, 897, 898, 899, 903, 913, 933, 936, 965, 972, 976, 991, 1002, 1011, 1012, 1013, 1018, 1026, 1029, 1030, 1031, 1032, 1033], "necessari": [7, 13, 114, 182, 198, 203, 244, 259, 260, 266, 281, 351, 359, 368, 371, 372, 373, 374, 375, 376, 377, 381, 384, 399, 401, 406, 441, 451, 477, 478, 480, 481, 482, 483, 484, 486, 523, 633, 634, 635, 641, 645, 646, 649, 650, 651, 652, 653, 654, 660, 662, 664, 665, 680, 684, 781, 851, 860, 871, 875, 881, 965, 968, 972, 975, 978, 986, 992, 1011, 1018, 1026], "defin": [7, 9, 12, 27, 53, 55, 57, 66, 70, 71, 73, 86, 95, 100, 109, 110, 111, 130, 147, 150, 157, 158, 159, 169, 170, 177, 199, 202, 206, 215, 216, 227, 231, 234, 238, 240, 244, 249, 259, 260, 262, 266, 268, 269, 270, 271, 279, 301, 312, 331, 339, 344, 345, 359, 369, 372, 373, 374, 375, 379, 380, 382, 384, 385, 386, 393, 394, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 409, 415, 420, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 448, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 478, 508, 509, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 616, 617, 618, 619, 621, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 685, 686, 697, 699, 705, 710, 711, 712, 713, 716, 719, 726, 729, 733, 734, 736, 738, 739, 741, 742, 745, 748, 754, 769, 773, 778, 779, 783, 784, 785, 788, 789, 791, 799, 807, 811, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 875, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 912, 914, 917, 923, 934, 936, 960, 965, 966, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 984, 986, 988, 990, 991, 992, 997, 1007, 1010, 1013, 1015, 1020, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 69, 70, 76, 81, 90, 105, 119, 122, 155, 165, 167, 168, 169, 174, 182, 198, 200, 234, 241, 243, 246, 249, 251, 254, 265, 266, 268, 269, 335, 339, 344, 346, 353, 355, 360, 362, 366, 367, 368, 370, 371, 373, 374, 376, 377, 378, 379, 384, 385, 389, 393, 395, 396, 400, 407, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 485, 497, 498, 504, 556, 561, 570, 571, 574, 575, 577, 578, 580, 589, 593, 606, 616, 618, 619, 627, 645, 647, 661, 663, 668, 676, 678, 681, 682, 690, 696, 703, 705, 717, 718, 726, 729, 771, 772, 775, 776, 783, 784, 785, 791, 799, 807, 812, 814, 815, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 848, 849, 850, 853, 855, 861, 862, 868, 869, 886, 890, 891, 892, 893, 894, 904, 906, 908, 909, 912, 916, 917, 939, 940, 947, 950, 963, 966, 968, 973, 975, 976, 977, 978, 979, 980, 986, 988, 992, 999, 1000, 1004, 1009, 1010, 1011, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 85, 143, 144, 147, 167, 168, 177, 180, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 197, 201, 202, 203, 207, 213, 214, 235, 241, 272, 308, 315, 329, 336, 340, 344, 355, 368, 375, 386, 402, 408, 454, 471, 472, 473, 538, 582, 583, 586, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 888, 889, 890, 891, 892, 893, 894, 960, 970, 972, 990, 991, 1009, 1018, 1020, 1023, 1025, 1030, 1032], "toarrai": [7, 323, 353, 400, 407, 555, 571, 577, 579, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 861, 878, 879, 947, 950, 966, 979, 986], "count_nonzero": [7, 10, 359], "configur": [7, 10, 71, 72, 169, 239, 241, 308, 344, 358, 371, 373, 375, 379, 381, 384, 386, 389, 390, 395, 400, 407, 408, 422, 431, 432, 434, 436, 438, 441, 451, 453, 457, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 555, 556, 557, 558, 559, 570, 571, 572, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 615, 616, 617, 618, 619, 621, 624, 627, 628, 629, 630, 631, 677, 678, 679, 680, 681, 683, 684, 776, 832, 837, 840, 844, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 886, 942, 943, 973, 976, 986, 991, 996, 1011, 1013, 1022, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034], "penalti": [7, 10, 30, 82, 165, 176, 177, 182, 187, 191, 198, 213, 214, 217, 229, 267, 295, 314, 323, 336, 344, 359, 381, 384, 398, 401, 404, 408, 460, 461, 462, 463, 464, 465, 467, 491, 520, 526, 527, 528, 529, 531, 532, 536, 537, 586, 632, 635, 636, 637, 638, 641, 642, 643, 646, 647, 648, 649, 650, 651, 657, 658, 659, 661, 665, 667, 669, 670, 676, 799, 868, 888, 889, 891, 893, 894, 895, 965, 972, 975, 980, 986, 990, 991, 1009, 1011, 1020, 1023, 1025, 1027, 1028, 1030, 1031, 1033, 1034], "elasticnet": [7, 10, 179, 189, 267, 272, 359, 379, 384, 404, 636, 641, 646, 647, 648, 649, 650, 651, 652, 657, 665, 667, 670, 972, 990, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032], "001": [7, 13, 32, 44, 62, 150, 168, 182, 207, 227, 244, 257, 259, 261, 322, 345, 370, 379, 403, 525, 526, 528, 535, 616, 633, 634, 635, 636, 641, 642, 649, 650, 651, 652, 655, 656, 657, 665, 666, 667, 668, 670, 673, 678, 679, 682, 683, 783, 784, 845, 846, 883, 884, 890, 891, 892, 893, 894, 965, 1002, 1011], "modified_hub": [7, 665, 990], "fit_intercept": [7, 177, 178, 184, 203, 212, 227, 267, 308, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 888, 889, 895, 972, 990, 1022, 1026, 1027, 1028, 1030, 1031, 1032], "tol": [7, 10, 17, 73, 95, 121, 162, 178, 189, 191, 205, 206, 212, 214, 227, 238, 245, 247, 298, 314, 339, 344, 375, 379, 406, 411, 432, 436, 438, 441, 448, 451, 460, 461, 467, 471, 472, 473, 520, 521, 522, 524, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 548, 549, 550, 551, 591, 616, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 661, 663, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 677, 678, 680, 682, 684, 783, 784, 799, 837, 845, 846, 883, 884, 888, 889, 890, 891, 892, 893, 894, 962, 972, 990, 991, 1007, 1011, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033], "n_iter_no_chang": [7, 116, 121, 206, 314, 344, 378, 386, 406, 548, 549, 550, 551, 655, 656, 657, 665, 666, 667, 845, 846, 990, 1026, 1029], "l1_ratio": [7, 10, 14, 182, 183, 189, 267, 272, 359, 384, 404, 527, 529, 536, 635, 636, 641, 647, 648, 649, 650, 651, 652, 657, 665, 667, 670, 972, 990, 1019, 1021, 1023, 1030, 1032], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 58, 60, 78, 79, 82, 95, 98, 144, 165, 166, 167, 172, 176, 182, 183, 184, 185, 189, 191, 192, 193, 194, 195, 196, 200, 201, 213, 216, 217, 241, 297, 308, 313, 314, 315, 344, 345, 346, 359, 369, 373, 375, 386, 388, 398, 401, 402, 404, 408, 409, 412, 421, 441, 454, 456, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 485, 513, 515, 516, 520, 524, 526, 528, 531, 532, 537, 541, 543, 545, 547, 549, 551, 554, 557, 559, 571, 578, 582, 586, 598, 600, 603, 616, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 690, 692, 705, 708, 717, 722, 726, 731, 738, 741, 763, 765, 773, 774, 778, 779, 782, 800, 811, 814, 821, 822, 831, 839, 846, 849, 861, 868, 888, 889, 890, 891, 892, 893, 894, 897, 899, 967, 970, 972, 990, 991, 1009, 1018, 1022, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1032], "misclassif": [7, 782, 990, 991, 992, 1019], "ratio": [7, 53, 66, 73, 104, 165, 231, 233, 247, 252, 275, 359, 373, 399, 401, 403, 406, 439, 445, 482, 483, 504, 530, 538, 539, 540, 620, 647, 699, 701, 705, 713, 718, 724, 727, 770, 771, 772, 775, 781, 811, 814, 834, 881, 945, 970, 982, 992, 1007, 1033], "sparsifi": [7, 182, 359, 647, 648, 655, 657, 665, 666, 667, 888, 960, 1020], "05": [7, 8, 14, 15, 24, 26, 28, 30, 37, 44, 52, 60, 62, 64, 65, 67, 68, 75, 83, 85, 91, 100, 113, 116, 121, 123, 128, 136, 140, 143, 155, 158, 159, 160, 168, 178, 179, 197, 200, 212, 217, 223, 224, 227, 244, 246, 247, 250, 259, 260, 266, 268, 269, 270, 284, 287, 292, 301, 303, 311, 315, 320, 322, 336, 342, 347, 370, 408, 439, 445, 581, 584, 585, 587, 602, 603, 604, 608, 609, 611, 612, 614, 621, 622, 638, 679, 683, 744, 785, 837, 888, 889, 972, 980, 986], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 55, 60, 61, 62, 63, 64, 65, 70, 72, 98, 101, 105, 106, 110, 113, 116, 119, 120, 121, 138, 139, 145, 146, 150, 158, 163, 169, 171, 197, 198, 216, 222, 227, 230, 231, 232, 234, 236, 237, 244, 246, 247, 254, 257, 259, 260, 267, 268, 270, 273, 277, 279, 286, 288, 289, 295, 302, 303, 304, 307, 319, 320, 323, 331, 338, 341, 344, 345, 346, 353, 384, 386, 409, 426, 434, 439, 445, 453, 496, 504, 539, 558, 559, 571, 586, 621, 622, 770, 785, 799, 810, 814, 816, 819, 883, 884, 1009, 1010, 1011, 1027, 1030], "support_vectors_": [7, 10, 16, 332, 335, 336, 890, 891, 892, 893, 894, 991], "squared_error": [7, 105, 123, 124, 314, 406, 547, 548, 549, 551, 554, 660, 665, 667, 682, 897, 899, 990, 992, 1031, 1034], "learning_r": [7, 109, 110, 122, 123, 124, 125, 224, 279, 296, 298, 312, 314, 406, 542, 543, 548, 549, 550, 551, 657, 665, 666, 667, 681, 844, 845, 846, 973, 983, 990, 1019, 1027, 1031], "max_depth": [7, 31, 109, 110, 111, 112, 115, 119, 122, 123, 124, 125, 128, 129, 131, 162, 220, 256, 271, 313, 314, 349, 351, 352, 353, 385, 386, 406, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 788, 789, 812, 896, 897, 898, 899, 900, 901, 902, 965, 983, 992, 1027, 1029], "n_estim": [7, 10, 26, 31, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 128, 129, 132, 162, 171, 220, 236, 240, 246, 256, 271, 303, 311, 313, 359, 385, 386, 406, 408, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 621, 788, 789, 965, 982, 983, 1015, 1026, 1034], "n_tree": 7, "loop": [7, 8, 113, 123, 168, 254, 264, 344, 353, 359, 373, 374, 379, 399, 403, 408, 635, 636, 641, 642, 648, 649, 650, 651, 652, 965, 989, 990, 1006, 1021, 1022, 1025, 1030, 1031], "previous": [7, 53, 57, 71, 156, 168, 257, 266, 315, 368, 381, 384, 389, 399, 404, 407, 429, 432, 443, 513, 523, 530, 638, 647, 648, 655, 657, 665, 666, 667, 888, 944, 972, 986, 996, 1015, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "subsequ": [7, 32, 58, 75, 98, 144, 186, 200, 261, 264, 279, 281, 331, 355, 373, 375, 379, 386, 399, 400, 406, 409, 426, 485, 497, 542, 543, 548, 550, 551, 655, 657, 665, 788, 789, 816, 817, 820, 823, 824, 825, 826, 827, 845, 863, 867, 966, 975, 977, 1027, 1028, 1032, 1034], "relax": [7, 399, 407, 442, 989, 1025], "sgd": [7, 8, 165, 176, 205, 212, 217, 227, 267, 296, 297, 314, 344, 355, 361, 493, 501, 620, 638, 655, 656, 657, 660, 665, 666, 667, 668, 845, 846, 965, 980, 998, 1013, 1018, 1021, 1022, 1023, 1025, 1029, 1031], "svr": [7, 10, 165, 226, 242, 311, 326, 342, 359, 545, 556, 557, 582, 583, 632, 667, 785, 791, 889, 891, 893, 969, 1009, 1018, 1020, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1032, 1033], "optim": [7, 13, 27, 53, 54, 57, 60, 72, 78, 79, 95, 109, 122, 124, 146, 150, 151, 154, 155, 156, 157, 158, 182, 186, 187, 191, 206, 214, 233, 257, 264, 267, 272, 277, 283, 298, 301, 306, 315, 322, 333, 339, 344, 345, 346, 355, 359, 362, 367, 370, 373, 375, 376, 384, 386, 389, 394, 396, 399, 401, 403, 404, 406, 408, 409, 410, 433, 437, 438, 439, 441, 446, 450, 451, 461, 462, 468, 520, 523, 524, 526, 528, 532, 546, 547, 548, 549, 563, 599, 600, 608, 609, 624, 627, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 672, 673, 676, 679, 681, 683, 684, 690, 711, 718, 785, 799, 830, 831, 832, 834, 836, 837, 838, 839, 840, 845, 846, 864, 876, 880, 881, 888, 889, 890, 891, 892, 893, 894, 968, 969, 970, 971, 972, 976, 977, 978, 979, 980, 981, 990, 991, 992, 996, 1000, 1006, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034], "few": [7, 14, 19, 39, 46, 52, 99, 120, 153, 156, 157, 187, 196, 198, 200, 216, 233, 234, 244, 261, 262, 266, 297, 301, 305, 311, 312, 313, 314, 315, 316, 319, 339, 346, 359, 368, 369, 370, 373, 375, 385, 387, 390, 393, 396, 397, 399, 403, 404, 406, 408, 409, 426, 438, 550, 551, 577, 580, 644, 681, 684, 881, 925, 944, 972, 973, 975, 976, 979, 980, 989, 991, 992, 1000, 1002, 1009, 1010, 1011, 1024, 1034], "drawn": [7, 52, 80, 113, 146, 150, 159, 167, 238, 266, 283, 344, 369, 399, 405, 406, 409, 411, 458, 459, 460, 461, 462, 463, 464, 465, 504, 512, 522, 544, 545, 552, 600, 616, 621, 630, 824, 880, 881, 898, 899, 972, 986, 988, 1021], "boost": [7, 108, 109, 110, 111, 115, 127, 130, 133, 134, 165, 307, 379, 386, 408, 437, 455, 456, 479, 485, 490, 493, 504, 509, 542, 543, 548, 549, 550, 551, 553, 554, 621, 622, 623, 624, 729, 730, 736, 738, 785, 788, 789, 790, 811, 814, 849, 861, 862, 972, 976, 996, 998, 1013, 1018, 1019, 1021, 1023, 1024, 1025, 1027, 1031], "detriment": [7, 146, 360, 408, 972], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 57, 60, 65, 67, 73, 75, 80, 92, 120, 163, 171, 198, 228, 230, 238, 244, 262, 270, 302, 306, 307, 322, 344, 345, 1007], "add_subplot": [7, 16, 25, 27, 42, 45, 64, 67, 90, 101, 102, 109, 169, 195, 213, 221, 223, 319, 320, 380], "line1": [7, 12, 222], "tab": [7, 53, 127, 130, 150, 155, 157, 186, 187, 312, 400, 1025], "blue": [7, 20, 21, 26, 34, 92, 95, 113, 117, 125, 127, 130, 132, 145, 155, 157, 174, 178, 186, 187, 194, 196, 222, 231, 253, 254, 259, 296, 306, 312, 321, 370, 399, 404], "set_xlabel": [7, 10, 45, 53, 60, 72, 73, 75, 90, 92, 100, 109, 159, 162, 163, 167, 169, 170, 174, 187, 193, 195, 196, 198, 200, 213, 214, 232, 259, 261, 265, 270, 271, 274, 284, 301, 302, 306, 322, 345, 346, 349], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 60, 65, 72, 73, 75, 80, 90, 92, 100, 106, 109, 117, 159, 169, 174, 187, 189, 193, 195, 196, 198, 200, 213, 232, 244, 259, 261, 265, 270, 271, 277, 284, 301, 302, 306, 311, 322, 339, 345, 349, 1007], "spine": [7, 14, 209, 301], "set_color": [7, 209], "get_color": 7, "yaxi": [7, 10, 45, 60, 90, 101, 102, 116, 195, 219, 221, 224, 244, 279, 284, 344], "tick_param": [7, 14, 133, 244, 259, 305, 322], "ax2": [7, 57, 60, 65, 67, 80, 92, 120, 163, 171, 198, 228, 238, 244, 262, 270, 289, 302, 306, 307, 322, 344], "frameon": [7, 204], "line2": [7, 12, 222, 340], "orang": [7, 53, 92, 96, 97, 103, 125, 127, 157, 163, 186, 187, 208, 235, 247, 282, 290, 312, 352, 977], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 61, 162, 198, 200, 234, 241, 254, 261, 303, 323, 344, 345, 346, 380, 384, 861], "prediction_perform": 7, "4948": 7, "2675": 7, "064278": 7, "1847": 7, "3264": 7, "045001": 7, "997": [7, 40], "3383": 7, "036929": 7, "802": [7, 95, 107, 370], "3582": 7, "033338": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000180": 7, "5289": 7, "8022": [7, 386, 462, 1027], "000260": 7, "5193": 7, "8353": 7, "000492": 7, "124": [7, 406, 1020], "5131": [7, 1023], "3279": 7, "000777": 7, "178": [7, 370, 379, 499, 832], "5149": 7, "0779": 7, "000875": 7, "4066": 7, "4812": 7, "000157": 7, "3551": 7, "1723": 7, "000187": 7, "3445": 7, "2171": 7, "000216": 7, "3433": 7, "0358": 7, "000256": 7, "3456": 7, "0602": 7, "000312": 7, "deduc": 7, "guarante": [7, 8, 80, 81, 168, 206, 231, 277, 279, 301, 345, 355, 361, 367, 381, 382, 399, 403, 404, 407, 435, 525, 634, 647, 648, 657, 661, 663, 665, 667, 676, 683, 802, 805, 828, 829, 866, 868, 881, 882, 895, 968, 972, 973, 975, 979, 984, 988, 992, 1010, 1028], "aspect": [7, 58, 86, 95, 154, 169, 219, 227, 288, 337, 359, 360, 361, 373, 386, 387, 399, 647, 648, 992, 1000], "934": [7, 15, 1006], "plot_model_complexity_influ": [7, 15], "doesn": [8, 198, 234, 245, 297, 331, 381, 386, 389, 390, 399, 407, 408, 412, 423, 464, 621, 622, 655, 657, 665, 705, 812, 815, 820, 830, 831, 845, 975, 976, 992, 1022], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 58, 70, 72, 78, 79, 80, 82, 85, 92, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 121, 122, 123, 124, 125, 129, 130, 147, 151, 153, 154, 155, 158, 159, 165, 168, 169, 170, 171, 177, 179, 182, 185, 192, 195, 196, 197, 198, 199, 216, 218, 220, 221, 222, 223, 225, 234, 235, 245, 248, 250, 258, 259, 279, 291, 292, 297, 311, 314, 315, 319, 320, 322, 327, 328, 331, 332, 335, 336, 339, 344, 345, 346, 352, 353, 355, 359, 360, 367, 368, 370, 373, 375, 377, 379, 381, 384, 385, 386, 389, 390, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 412, 416, 421, 423, 426, 436, 437, 439, 445, 452, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 484, 485, 502, 503, 504, 508, 509, 514, 519, 521, 523, 530, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 579, 580, 583, 596, 597, 599, 600, 616, 617, 619, 620, 621, 622, 624, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 685, 693, 699, 705, 706, 714, 724, 725, 743, 744, 745, 755, 776, 777, 780, 781, 785, 788, 789, 799, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 834, 835, 838, 839, 844, 845, 846, 854, 859, 861, 862, 868, 869, 881, 883, 884, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 925, 940, 965, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 990, 991, 992, 999, 1002, 1009, 1010, 1011, 1012, 1013, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "memori": [8, 54, 71, 72, 99, 121, 168, 169, 281, 307, 311, 313, 315, 316, 344, 345, 346, 360, 361, 367, 373, 376, 382, 386, 400, 403, 404, 407, 410, 411, 430, 431, 432, 433, 434, 435, 436, 438, 439, 443, 446, 448, 457, 462, 468, 485, 492, 497, 522, 523, 524, 527, 544, 545, 546, 547, 552, 553, 554, 570, 571, 577, 578, 580, 635, 636, 637, 641, 642, 647, 648, 649, 650, 651, 652, 655, 657, 658, 665, 666, 667, 668, 669, 670, 673, 766, 767, 768, 769, 785, 791, 799, 807, 809, 810, 811, 812, 815, 816, 817, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 848, 849, 866, 868, 878, 879, 881, 886, 888, 889, 896, 897, 898, 899, 909, 945, 961, 972, 978, 979, 986, 988, 989, 991, 992, 996, 997, 1000, 1002, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "onlin": [8, 14, 36, 68, 95, 98, 165, 176, 212, 217, 361, 368, 372, 378, 386, 399, 404, 407, 409, 431, 435, 436, 438, 484, 491, 520, 525, 526, 527, 528, 534, 535, 571, 573, 647, 655, 656, 657, 665, 667, 814, 823, 824, 825, 826, 827, 830, 831, 836, 838, 839, 857, 858, 868, 888, 889, 968, 972, 980, 982, 995, 998, 1000, 1009, 1013, 1018, 1022, 1023, 1025, 1033], "partial_fit": [8, 50, 95, 234, 315, 361, 375, 386, 399, 404, 431, 438, 523, 525, 526, 527, 578, 586, 647, 648, 655, 656, 657, 665, 666, 667, 816, 817, 820, 821, 823, 824, 825, 826, 827, 844, 845, 846, 857, 858, 868, 888, 972, 978, 980, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1031, 1032, 1033, 1034], "fed": [8, 130, 355, 368, 407, 965, 981, 986, 1029], "batch": [8, 11, 64, 95, 99, 292, 315, 361, 382, 386, 407, 429, 431, 436, 438, 440, 442, 520, 522, 523, 525, 526, 527, 528, 529, 531, 532, 534, 535, 653, 674, 675, 790, 803, 804, 823, 824, 825, 826, 827, 845, 846, 857, 858, 868, 881, 928, 942, 980, 981, 990, 1018, 1022, 1023, 1026, 1027, 1028, 1029, 1031, 1033, 1034], "remain": [8, 25, 27, 71, 117, 122, 124, 146, 168, 198, 214, 244, 257, 261, 265, 268, 396, 399, 400, 401, 403, 407, 435, 453, 456, 504, 505, 510, 517, 523, 559, 599, 600, 751, 757, 787, 788, 789, 790, 793, 795, 823, 824, 825, 827, 929, 965, 966, 975, 976, 980, 986, 992, 997, 1020, 1026, 1032], "hashingvector": [8, 346, 361, 478, 577, 579, 1019, 1025, 1026, 1027, 1028, 1031], "where": [8, 11, 12, 13, 16, 17, 19, 20, 24, 25, 26, 32, 53, 55, 57, 80, 86, 92, 95, 98, 101, 105, 106, 109, 112, 114, 116, 120, 121, 123, 127, 144, 147, 150, 156, 159, 163, 168, 177, 182, 190, 199, 207, 208, 209, 211, 215, 216, 219, 221, 222, 227, 228, 231, 234, 235, 239, 250, 255, 256, 259, 261, 265, 266, 268, 270, 271, 298, 301, 303, 304, 305, 306, 307, 308, 311, 313, 314, 320, 321, 329, 339, 340, 341, 344, 349, 350, 355, 359, 360, 361, 367, 369, 370, 372, 373, 375, 377, 379, 380, 381, 384, 385, 386, 387, 389, 393, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 426, 433, 436, 437, 441, 450, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 476, 485, 520, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 571, 572, 573, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 598, 599, 600, 602, 604, 608, 611, 612, 614, 616, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 677, 680, 681, 682, 685, 696, 701, 705, 713, 717, 718, 719, 727, 730, 743, 751, 756, 757, 758, 761, 769, 770, 771, 772, 775, 778, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 858, 861, 863, 864, 867, 868, 874, 876, 882, 883, 884, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 916, 917, 918, 919, 925, 933, 961, 965, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 997, 999, 1002, 1003, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "word": [8, 14, 19, 70, 150, 231, 235, 331, 345, 346, 359, 368, 369, 373, 375, 378, 386, 396, 399, 401, 402, 403, 404, 442, 500, 512, 523, 525, 530, 577, 578, 580, 685, 817, 827, 885, 970, 974, 978, 981, 986, 989, 990, 1000, 1009, 1010, 1018, 1026], "federicov": 8, "itertool": [8, 42, 44, 62, 131, 169, 183, 245, 250, 259, 266, 268, 406], "sy": [8, 12, 16, 19, 206, 231, 279, 323, 346, 368, 384, 606], "tarfil": 8, "hashlib": 8, "sha256": [8, 1033], "htmlparser": 8, "pathlib": [8, 1033], "path": [8, 16, 17, 165, 176, 183, 187, 217, 349, 367, 371, 373, 377, 381, 382, 386, 430, 434, 439, 475, 476, 477, 488, 489, 490, 492, 493, 494, 497, 498, 537, 546, 547, 552, 553, 554, 555, 582, 583, 586, 635, 636, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 670, 671, 672, 673, 674, 675, 677, 848, 849, 895, 896, 897, 898, 899, 930, 965, 972, 973, 982, 996, 997, 1018, 1019, 1022, 1024, 1025, 1027, 1028, 1030, 1031, 1033, 1034], "urllib": [8, 17], "request": [8, 17, 46, 198, 216, 234, 314, 360, 367, 371, 372, 376, 386, 387, 390, 393, 404, 407, 408, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 570, 571, 577, 579, 580, 583, 599, 600, 621, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 688, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 932, 933, 935, 976, 979, 1011, 1024, 1025, 1026], "urlretriev": 8, "rcparam": [8, 227, 232, 308], "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 66, 70, 98, 165, 260, 323, 343, 344, 345, 346, 361, 362, 368, 399, 400, 407, 453, 533, 861, 974, 1010, 1011, 1018, 1019, 1020, 1021, 1024, 1025], "passiveaggressiveclassifi": [8, 205, 359, 361, 972, 977, 1019, 1022, 1023, 1025, 1026, 1029, 1031], "perceptron": [8, 165, 205, 208, 214, 238, 294, 299, 361, 384, 407, 503, 504, 511, 655, 665, 814, 844, 845, 846, 849, 868, 974, 977, 981, 990, 998, 1013, 1022, 1024, 1025, 1026, 1030], "naive_bay": [8, 24, 25, 27, 31, 128, 132, 260, 261, 344, 355, 361, 362, 368, 400, 406, 426, 558, 849, 970, 977, 978, 1011, 1019, 1020, 1022, 1023, 1024, 1025], "multinomialnb": [8, 361, 368, 400, 407, 823, 824, 825, 826, 978, 1011, 1020, 1022, 1025, 1026, 1030, 1031, 1033], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 71, 126, 153, 156, 158, 168, 169, 198, 216, 220, 228, 234, 257, 301, 353, 355, 360, 368, 371, 372, 373, 375, 377, 378, 379, 386, 390, 399, 400, 401, 403, 404, 406, 408, 411, 429, 431, 440, 442, 443, 448, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 480, 481, 485, 486, 492, 497, 498, 503, 511, 516, 520, 521, 526, 527, 528, 529, 531, 534, 535, 537, 541, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 570, 577, 578, 579, 580, 586, 591, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 620, 621, 622, 624, 625, 626, 627, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 679, 683, 684, 686, 687, 689, 691, 693, 701, 730, 749, 755, 762, 766, 770, 777, 785, 788, 789, 790, 791, 799, 803, 804, 807, 808, 811, 812, 814, 817, 819, 822, 823, 824, 825, 827, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 845, 846, 852, 869, 875, 888, 889, 890, 891, 892, 893, 894, 900, 902, 906, 908, 909, 910, 912, 924, 925, 949, 960, 964, 965, 966, 971, 972, 976, 981, 982, 988, 990, 991, 1000, 1025, 1026, 1027], "builder": [8, 10, 377], "__file__": [8, 10, 1031], "global": [8, 10, 42, 57, 95, 198, 219, 220, 241, 268, 297, 312, 355, 359, 360, 379, 384, 386, 399, 409, 431, 441, 451, 457, 579, 615, 621, 677, 680, 681, 684, 696, 717, 718, 726, 771, 772, 775, 776, 803, 869, 884, 886, 944, 946, 965, 973, 976, 982, 986, 992, 1000, 1026, 1033], "21578": [8, 1031], "uci": [8, 306, 367, 370, 489, 491, 493, 499], "ml": [8, 367, 370, 378, 489, 491, 499, 972, 974, 996, 997, 1000], "uncompress": [8, 497, 498, 1011], "reuterspars": 8, "util": [8, 10, 11, 48, 55, 56, 61, 89, 130, 198, 200, 206, 214, 221, 230, 234, 236, 247, 265, 267, 279, 303, 311, 322, 323, 331, 344, 360, 362, 367, 368, 371, 373, 374, 375, 376, 384, 385, 386, 395, 399, 400, 403, 404, 407, 426, 432, 433, 436, 438, 442, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 566, 570, 571, 577, 579, 580, 583, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 785, 786, 787, 788, 789, 792, 794, 799, 803, 808, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 971, 974, 976, 977, 986, 987, 996, 1000, 1003, 1013, 1018, 1019, 1021, 1022, 1024, 1025], "pars": [8, 17, 359, 367, 368, 374, 497], "sgml": [8, 359], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 164, 172, 175, 217, 225, 242, 251, 275, 278, 293, 299, 309, 317, 325, 342, 344, 345, 347, 354, 359, 361, 367, 368, 370, 371, 373, 377, 378, 379, 381, 384, 393, 400, 404, 476, 482, 483, 485, 492, 497, 498, 523, 568, 569, 577, 578, 580, 900, 979, 992, 996, 999, 1003, 1018, 1019, 1021, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034], "yield": [8, 9, 25, 45, 55, 78, 79, 80, 81, 121, 123, 182, 193, 198, 213, 216, 264, 277, 295, 301, 328, 333, 344, 345, 355, 359, 361, 367, 378, 386, 396, 399, 401, 403, 404, 406, 407, 408, 409, 426, 438, 457, 461, 497, 498, 526, 527, 528, 530, 535, 542, 543, 548, 549, 550, 551, 556, 557, 583, 591, 636, 640, 641, 642, 644, 650, 652, 654, 662, 664, 675, 714, 769, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 815, 819, 822, 880, 881, 919, 926, 928, 929, 934, 968, 970, 972, 973, 976, 991, 992, 1006, 1023, 1024, 1026, 1029, 1031], "__init__": [8, 16, 56, 158, 234, 279, 331, 373, 375, 377, 378, 379, 380, 386, 407, 413, 937, 1019, 1024, 1026, 1031, 1032, 1033, 1034], "self": [8, 16, 19, 25, 27, 56, 158, 165, 234, 279, 318, 324, 325, 331, 344, 367, 373, 374, 375, 378, 379, 380, 381, 399, 407, 409, 413, 416, 421, 422, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 489, 497, 498, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 692, 783, 784, 785, 786, 787, 788, 789, 792, 794, 799, 803, 804, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 936, 937, 942, 950, 979, 997, 998, 1000, 1013, 1020, 1025, 1032], "latin": [8, 407], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 71, 227, 321, 367, 372, 376, 377, 381, 384, 386, 395, 407, 485, 816, 997, 999, 1023, 1027, 1028, 1029, 1032, 1033, 1034], "attr": [8, 56], "start_": 8, "getattr": [8, 301, 375, 386, 1034], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 70, 147, 238, 316, 370], "topic_d": 8, "fd": 8, "chunk": [8, 50, 359, 360, 399, 404, 410, 433, 438, 457, 527, 766, 769, 816, 817, 823, 824, 825, 826, 827, 886, 978, 1025, 1026, 1027, 1028, 1029], "feed": [8, 86, 199, 346, 368, 378, 384, 399, 407, 861, 977], "decod": [8, 292, 368, 386, 492, 558, 577, 578, 580, 1018, 1019], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 60, 66, 78, 79, 82, 100, 113, 120, 123, 126, 130, 150, 151, 154, 155, 156, 157, 158, 168, 170, 182, 204, 220, 227, 233, 237, 244, 250, 259, 260, 285, 286, 301, 311, 331, 336, 345, 355, 368, 373, 375, 381, 384, 386, 387, 397, 398, 399, 402, 403, 406, 409, 439, 444, 461, 497, 498, 521, 552, 617, 632, 636, 650, 661, 663, 676, 694, 734, 783, 803, 804, 823, 824, 825, 827, 834, 909, 965, 969, 970, 972, 973, 975, 976, 977, 979, 982, 983, 986, 991, 1000, 1009, 1021, 1025, 1026, 1027], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 71, 104, 117, 118, 121, 143, 147, 198, 206, 234, 237, 249, 257, 258, 263, 271, 288, 292, 314, 346, 353, 361, 362, 366, 367, 368, 370, 373, 376, 380, 384, 395, 396, 397, 399, 400, 401, 402, 404, 406, 407, 408, 409, 414, 415, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 499, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 724, 781, 783, 784, 785, 788, 789, 791, 799, 807, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 903, 937, 960, 970, 972, 977, 979, 980, 982, 986, 989, 990, 991, 992, 1000, 1002, 1008, 1011, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "end_reut": 8, "sub": [8, 37, 48, 53, 55, 57, 60, 70, 105, 234, 236, 244, 313, 319, 320, 328, 331, 340, 368, 373, 375, 379, 400, 406, 407, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 525, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 583, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 934, 972, 976, 990, 1011, 1028, 1032], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 72, 82, 95, 98, 110, 113, 116, 119, 121, 122, 124, 125, 147, 159, 162, 165, 177, 178, 206, 213, 246, 247, 252, 254, 270, 275, 295, 297, 298, 303, 313, 320, 322, 323, 331, 373, 375, 379, 381, 382, 385, 386, 394, 399, 402, 404, 406, 408, 411, 426, 429, 430, 432, 434, 436, 437, 438, 441, 443, 448, 450, 451, 452, 460, 461, 467, 471, 472, 473, 504, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 548, 549, 550, 551, 553, 556, 557, 570, 571, 577, 578, 580, 582, 583, 591, 599, 616, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 819, 822, 837, 844, 845, 846, 847, 848, 852, 859, 861, 863, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 903, 924, 925, 931, 934, 942, 966, 972, 973, 975, 976, 979, 980, 981, 989, 990, 991, 992, 997, 1000, 1006, 1010, 1011, 1013, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "archiv": [8, 367, 368, 370, 371, 393, 399, 431, 489, 491, 499, 746, 747, 974, 991, 1011], "exist": [8, 9, 17, 19, 53, 216, 259, 297, 301, 367, 372, 375, 376, 379, 384, 386, 387, 389, 393, 399, 403, 404, 406, 407, 409, 414, 423, 426, 432, 433, 436, 438, 440, 442, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 488, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 574, 577, 578, 579, 580, 583, 586, 592, 599, 600, 621, 622, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 687, 689, 691, 750, 753, 757, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 861, 862, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 960, 968, 973, 975, 976, 980, 982, 983, 986, 996, 1000, 1010, 1018, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "str": [8, 10, 16, 58, 60, 104, 106, 119, 216, 237, 259, 271, 279, 289, 329, 344, 367, 368, 382, 407, 410, 411, 415, 420, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 446, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 565, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 606, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 681, 685, 686, 687, 688, 689, 691, 696, 698, 700, 702, 715, 717, 718, 720, 721, 726, 759, 762, 766, 767, 768, 769, 770, 771, 772, 775, 777, 778, 779, 785, 786, 787, 788, 789, 791, 792, 794, 796, 797, 799, 803, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 907, 908, 909, 912, 915, 917, 921, 932, 933, 936, 939, 960, 961, 964, 1033], "kei": [8, 9, 10, 17, 19, 42, 116, 120, 130, 162, 167, 216, 234, 240, 260, 262, 263, 312, 313, 314, 315, 316, 361, 366, 375, 378, 379, 380, 384, 386, 387, 389, 390, 399, 400, 403, 409, 453, 461, 550, 551, 556, 557, 558, 559, 577, 580, 583, 606, 615, 621, 622, 623, 648, 785, 788, 789, 797, 799, 811, 847, 848, 903, 913, 941, 997, 1011, 1015, 1024, 1030, 1031, 1033, 1034], "download_url": 8, "ic": [8, 313, 367, 370, 388, 489, 491, 499, 621, 622, 1013, 1030, 1031], "databas": [8, 306, 359, 361, 368, 370, 399, 404, 406, 407, 410, 431, 433, 499, 544, 545, 881, 988], "reuters21578": 8, "mld": 8, "tar": [8, 377], "gz": [8, 377, 389, 497, 498], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 56, 62, 82, 99, 113, 119, 123, 158, 168, 169, 187, 200, 216, 220, 227, 231, 233, 234, 235, 236, 259, 260, 263, 270, 279, 284, 292, 295, 296, 303, 344, 345, 353, 373, 377, 379, 406, 407, 409, 411, 426, 438, 497, 509, 522, 558, 614, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 661, 662, 663, 665, 668, 670, 671, 672, 673, 692, 698, 756, 776, 780, 782, 788, 789, 814, 852, 861, 864, 867, 875, 888, 889, 903, 938, 940, 942, 963, 992], "mkdir": [8, 379, 381], "parent": [8, 167, 234, 373, 377, 386, 399, 431, 452, 1018], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 164, 172, 175, 217, 225, 231, 242, 251, 275, 278, 293, 299, 309, 317, 325, 342, 344, 346, 347, 354, 368, 379, 890, 891, 892, 893, 894, 991, 1014], "1e6": [8, 10, 191, 231, 344, 346, 359, 525, 882, 976, 988], "current_sz_mb": 8, "stdout": [8, 95, 206, 817, 837, 845, 846], "write": [8, 17, 163, 234, 344, 359, 360, 367, 371, 372, 376, 377, 378, 379, 381, 382, 384, 386, 389, 400, 404, 407, 987, 997, 1011, 1019, 1031], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 323, 368, 379, 393, 477, 489, 492, 493, 496, 577, 578, 580, 1011, 1018, 1023, 1026, 1027], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 231, 259, 268, 360, 376, 997], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 221, 367, 368, 372, 373, 377, 379, 384, 385, 387, 389, 393, 400, 407, 476, 485, 497, 498, 966, 1000, 1005, 1021, 1025, 1026, 1028, 1034], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 407, 492, 577, 578, 580, 1020], "alternate_sign": [8, 407, 571, 578, 1025], "data_stream": 8, "binari": [8, 13, 25, 27, 109, 114, 116, 126, 128, 144, 158, 168, 174, 189, 191, 198, 206, 220, 228, 240, 256, 257, 262, 268, 274, 277, 283, 331, 337, 353, 355, 367, 368, 369, 375, 377, 378, 386, 389, 393, 396, 397, 398, 399, 406, 407, 409, 426, 427, 428, 441, 476, 489, 497, 498, 509, 512, 538, 539, 542, 544, 548, 550, 551, 555, 556, 557, 570, 577, 578, 580, 582, 583, 591, 599, 616, 617, 618, 619, 621, 622, 647, 648, 655, 657, 662, 663, 664, 665, 689, 692, 696, 697, 698, 701, 702, 704, 707, 709, 715, 717, 718, 722, 723, 726, 727, 728, 729, 730, 731, 770, 771, 772, 775, 776, 777, 780, 782, 785, 786, 788, 789, 790, 791, 799, 803, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 823, 834, 844, 855, 859, 861, 869, 872, 888, 890, 893, 939, 966, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988, 990, 991, 992, 999, 1002, 1015, 1019, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1032, 1033], "acq": 8, "chosen": [8, 20, 46, 73, 130, 151, 168, 169, 187, 199, 202, 215, 235, 253, 254, 256, 262, 345, 355, 359, 384, 399, 401, 402, 406, 409, 429, 435, 438, 440, 442, 443, 449, 485, 512, 524, 546, 547, 548, 549, 553, 554, 636, 642, 645, 647, 648, 650, 652, 660, 665, 666, 667, 668, 669, 679, 683, 780, 783, 784, 785, 788, 789, 799, 818, 837, 888, 889, 896, 897, 898, 899, 925, 965, 968, 970, 972, 973, 975, 977, 982, 983, 990, 1006, 1007, 1009, 1010, 1026, 1034], "evenli": [8, 39, 52, 123, 254, 407, 929, 1011], "care": [8, 55, 124, 359, 361, 377, 379, 384, 386, 387, 399, 401, 407, 426, 449, 458, 629, 647, 648, 655, 657, 665, 666, 667, 684, 888, 973, 991, 1000, 1034], "all_class": 8, "positive_class": [8, 701], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 72, 73, 95, 98, 115, 116, 132, 136, 138, 159, 162, 163, 168, 169, 177, 184, 190, 191, 205, 206, 207, 210, 211, 213, 219, 220, 221, 222, 238, 239, 244, 245, 246, 247, 250, 272, 289, 295, 296, 297, 307, 313, 314, 315, 319, 320, 328, 344, 345, 379, 386, 406, 411, 429, 432, 436, 437, 438, 443, 448, 450, 460, 461, 467, 471, 472, 473, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 550, 551, 616, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 661, 663, 665, 666, 667, 668, 669, 671, 672, 676, 677, 678, 679, 682, 683, 783, 784, 799, 837, 845, 846, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 966, 968, 972, 979, 980, 989, 990, 1007, 1011, 1019, 1022, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034], "nb": [8, 103, 128, 355, 825, 978], "multinomi": [8, 30, 165, 176, 213, 217, 235, 254, 268, 368, 369, 373, 404, 406, 485, 501, 512, 540, 542, 548, 550, 558, 620, 647, 648, 729, 814, 822, 823, 824, 825, 826, 827, 868, 911, 976, 977, 992, 998, 1011, 1013, 1018, 1022, 1024, 1025, 1026, 1031, 1032], "passiv": [8, 205, 655, 656, 998, 1013, 1019], "aggress": [8, 205, 655, 656, 788, 789, 998, 1013, 1019], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 399, 404, 438, 523, 665, 844, 845, 846, 996, 1018], "tupl": [8, 48, 49, 55, 105, 169, 216, 366, 367, 368, 375, 386, 403, 411, 423, 440, 442, 453, 456, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 494, 497, 499, 500, 501, 502, 503, 511, 522, 535, 550, 551, 556, 557, 558, 559, 571, 572, 573, 576, 577, 578, 580, 616, 621, 622, 623, 701, 708, 769, 771, 783, 785, 799, 811, 828, 829, 847, 848, 858, 859, 863, 866, 874, 878, 890, 891, 892, 893, 894, 903, 909, 910, 912, 916, 917, 918, 919, 934, 943, 960, 983, 1024, 1025, 1029, 1030, 1031], "x_text": 8, "befor": [8, 12, 25, 42, 70, 72, 75, 86, 130, 143, 157, 159, 161, 164, 165, 168, 169, 171, 179, 182, 186, 187, 191, 234, 259, 266, 281, 302, 305, 306, 308, 314, 334, 355, 359, 360, 368, 371, 373, 375, 376, 378, 379, 381, 382, 384, 386, 387, 388, 393, 397, 399, 400, 401, 403, 404, 408, 411, 412, 432, 436, 437, 438, 448, 450, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 479, 490, 523, 526, 527, 528, 529, 530, 533, 535, 536, 550, 551, 554, 556, 558, 559, 566, 577, 578, 580, 600, 616, 617, 619, 634, 639, 640, 643, 644, 645, 653, 654, 655, 656, 657, 660, 665, 667, 676, 681, 683, 783, 784, 790, 791, 803, 804, 806, 810, 812, 814, 828, 829, 836, 837, 838, 839, 840, 843, 848, 849, 852, 855, 862, 866, 867, 868, 869, 873, 874, 876, 877, 878, 879, 885, 896, 897, 925, 960, 966, 972, 973, 976, 982, 986, 990, 991, 992, 997, 1011, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "exclud": [8, 19, 167, 301, 373, 377, 386, 435, 453, 455, 717, 718, 726, 771, 772, 775, 798, 806, 863, 951, 976, 979, 1027, 1034], "invalid": [8, 198, 323, 386, 435, 567, 660, 701, 762, 972, 976, 1024, 1026, 1028, 1029, 1031, 1032, 1034], "assign": [8, 17, 20, 37, 46, 49, 57, 58, 60, 115, 126, 128, 143, 152, 211, 216, 227, 232, 235, 295, 303, 308, 324, 339, 345, 368, 373, 375, 386, 396, 403, 404, 406, 407, 408, 409, 429, 430, 431, 432, 434, 435, 436, 437, 438, 441, 443, 445, 448, 449, 450, 451, 504, 525, 550, 551, 582, 583, 596, 597, 599, 647, 648, 655, 656, 657, 665, 666, 667, 693, 694, 704, 705, 706, 709, 719, 727, 731, 743, 745, 774, 779, 780, 781, 785, 788, 789, 791, 794, 799, 807, 809, 810, 811, 812, 815, 832, 838, 840, 841, 842, 855, 883, 884, 888, 889, 890, 891, 892, 893, 894, 970, 975, 976, 977, 978, 979, 980, 981, 986, 989, 1000, 1002, 1011, 1018, 1023, 1025, 1026], "format": [8, 11, 12, 19, 21, 48, 54, 58, 61, 70, 80, 95, 105, 113, 119, 122, 124, 136, 142, 143, 171, 174, 178, 184, 189, 198, 216, 254, 264, 266, 267, 270, 273, 283, 284, 287, 288, 305, 311, 338, 349, 353, 359, 366, 372, 373, 375, 376, 381, 382, 385, 386, 400, 403, 406, 407, 422, 431, 432, 434, 436, 438, 439, 441, 448, 453, 457, 471, 472, 473, 474, 476, 478, 485, 486, 487, 497, 498, 499, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 540, 546, 547, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 635, 641, 647, 648, 649, 651, 655, 657, 665, 666, 667, 677, 678, 681, 686, 702, 709, 727, 728, 739, 756, 778, 817, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 875, 880, 881, 886, 888, 900, 908, 909, 930, 938, 942, 947, 950, 952, 953, 954, 955, 956, 957, 966, 976, 979, 984, 986, 987, 990, 992, 996, 1002, 1003, 1013, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1033], "islic": [8, 44, 62], "asarrai": [8, 17, 198, 216, 298, 321, 344, 345, 375, 386, 395, 574, 575, 714, 744, 836, 838, 839, 840, 986, 991, 1035], "int": [8, 10, 13, 16, 17, 19, 37, 44, 62, 81, 113, 122, 126, 138, 139, 151, 152, 153, 159, 163, 167, 179, 189, 191, 198, 216, 224, 227, 233, 237, 244, 254, 257, 258, 259, 279, 284, 286, 292, 308, 320, 346, 368, 373, 375, 384, 386, 397, 400, 403, 407, 410, 411, 414, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 477, 480, 481, 483, 484, 485, 486, 491, 492, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 596, 597, 599, 600, 606, 616, 617, 618, 619, 620, 621, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 696, 698, 702, 714, 715, 717, 718, 719, 722, 726, 744, 745, 757, 762, 766, 767, 768, 769, 770, 771, 772, 775, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 908, 909, 911, 912, 924, 925, 927, 928, 929, 930, 941, 945, 947, 950, 955, 956, 972, 983, 1018, 1024, 1028, 1029], "iter_minibatch": 8, "minibatch_s": [8, 361], "statist": [8, 81, 109, 113, 114, 125, 136, 137, 138, 139, 142, 146, 147, 165, 167, 168, 169, 170, 182, 186, 252, 256, 258, 261, 268, 275, 301, 307, 313, 355, 362, 366, 368, 370, 373, 379, 386, 397, 399, 400, 401, 403, 404, 406, 408, 423, 458, 463, 482, 483, 505, 506, 507, 509, 511, 530, 535, 548, 549, 551, 593, 594, 595, 598, 616, 619, 623, 624, 633, 638, 645, 679, 683, 685, 699, 705, 710, 711, 712, 719, 731, 776, 785, 801, 818, 845, 846, 864, 865, 866, 868, 873, 876, 877, 879, 893, 896, 897, 951, 965, 966, 970, 972, 973, 975, 976, 977, 978, 983, 986, 990, 991, 992, 993, 994, 995, 1003, 1009, 1010, 1023, 1026, 1029, 1030, 1032, 1033], "test_stat": 8, "n_test": [8, 10, 33, 113, 259, 1018, 1021], "n_test_po": 8, "hold": [8, 16, 26, 27, 198, 260, 353, 366, 373, 374, 375, 397, 399, 403, 406, 407, 409, 492, 550, 551, 578, 621, 622, 623, 724, 785, 788, 789, 799, 824, 855, 856, 861, 862, 869, 872, 966, 970, 976, 980, 990, 991, 992, 999, 1002, 1011, 1026, 1030], "n_test_docu": 8, "tick": [8, 43, 60, 153, 238, 270, 621, 812], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 61, 81, 92, 98, 105, 122, 123, 143, 147, 158, 168, 179, 185, 194, 198, 213, 216, 220, 222, 268, 279, 286, 289, 315, 323, 336, 339, 344, 345, 346, 353, 370, 379, 386, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 409, 421, 431, 432, 436, 438, 448, 453, 454, 471, 472, 473, 504, 509, 512, 520, 523, 525, 526, 530, 533, 534, 535, 538, 539, 541, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 557, 558, 559, 579, 580, 600, 602, 612, 614, 624, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 661, 662, 665, 666, 667, 668, 670, 673, 679, 683, 685, 698, 699, 708, 714, 729, 744, 746, 747, 751, 776, 816, 817, 821, 822, 831, 835, 839, 846, 847, 867, 868, 888, 889, 891, 894, 896, 897, 898, 899, 927, 951, 957, 962, 972, 976, 977, 978, 979, 991, 992, 1009, 1021, 1022, 1024, 1026, 1027, 1029], "cls_name": [8, 10], "string": [8, 27, 71, 119, 158, 216, 229, 263, 314, 346, 359, 367, 368, 373, 374, 375, 379, 386, 393, 400, 403, 406, 407, 408, 410, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 478, 479, 485, 494, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 606, 609, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 688, 698, 700, 708, 720, 750, 753, 759, 762, 766, 767, 768, 769, 778, 779, 783, 784, 785, 788, 789, 791, 799, 807, 811, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 906, 908, 909, 916, 917, 918, 940, 944, 960, 961, 965, 966, 976, 989, 991, 1002, 1009, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "n_train": [8, 10, 33, 113, 259, 1018, 1021], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 55, 179, 262, 359, 396, 401, 408, 497, 498, 538, 586, 616, 619, 633, 861, 865, 877, 966, 972, 1026, 1030], "mini": [8, 64, 95, 315, 361, 386, 407, 429, 431, 436, 438, 440, 442, 520, 522, 525, 526, 527, 528, 529, 531, 532, 534, 535, 980, 981, 1018, 1029, 1031], "smaller": [8, 24, 40, 46, 55, 82, 155, 156, 159, 162, 183, 187, 189, 202, 231, 285, 286, 295, 301, 331, 339, 345, 373, 396, 398, 399, 401, 403, 404, 406, 408, 409, 428, 429, 435, 439, 443, 445, 503, 523, 524, 546, 547, 548, 549, 553, 554, 582, 599, 608, 622, 635, 636, 638, 639, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 661, 663, 671, 672, 681, 698, 783, 788, 789, 834, 837, 861, 862, 880, 881, 888, 896, 897, 898, 899, 925, 970, 972, 973, 975, 976, 977, 979, 980, 982, 986, 988, 990, 991, 992, 997, 1011, 1026, 1031], "bigger": [8, 40, 60, 211, 259, 298, 341, 345, 358, 360, 407, 427, 428, 497, 527, 834, 1006, 1013], "overhead": [8, 279, 360, 361, 373, 379, 382, 384, 386, 406, 430, 434, 438, 523, 820, 821, 823, 824, 825, 826, 827, 828, 829, 944, 978, 979, 1021, 1026, 1027, 1030], "partial": [8, 12, 50, 84, 87, 127, 165, 166, 172, 216, 226, 242, 313, 316, 370, 386, 388, 401, 402, 404, 406, 409, 453, 471, 472, 473, 474, 485, 490, 523, 525, 530, 551, 578, 621, 622, 646, 776, 814, 816, 817, 844, 845, 846, 849, 861, 862, 865, 868, 897, 973, 980, 990, 1011, 1013, 1015, 1019, 1026, 1027, 1031], "stream": [8, 399, 404, 407, 451, 578, 857, 858, 868, 968, 996, 1026, 1029], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 55, 75, 114, 116, 120, 123, 130, 168, 196, 200, 206, 220, 233, 234, 236, 246, 256, 262, 315, 320, 345, 366, 373, 374, 375, 382, 400, 453, 515, 550, 551, 577, 578, 580, 621, 797, 861, 883, 884, 903, 904, 930, 968, 989, 997, 1002], "updat": [8, 16, 44, 62, 110, 116, 125, 232, 311, 346, 371, 372, 373, 377, 381, 386, 399, 404, 406, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 903, 951, 972, 979, 980, 981, 990, 999, 1000, 1019, 1025, 1026, 1027, 1029, 1031, 1033, 1034, 1035], "accumul": [8, 50, 117, 118, 187, 377, 379, 399, 407, 976, 1019, 1026], "acc_histori": 8, "run_histori": 8, "878": 8, "962": 8, "915": 8, "1151": 8, "855": 8, "1144": 8, "877": [8, 257], "1110": 8, "933": [8, 74, 403], "1106": 8, "3911": 8, "517": [8, 441, 451, 1009], "938": [8, 194, 773, 976, 1006], "1905": [8, 370], "936": [8, 426, 976], "06": [8, 22, 67, 85, 148, 159, 168, 172, 189, 197, 198, 225, 251, 259, 260, 275, 298, 299, 303, 325, 338, 342, 379, 471, 472, 473, 633, 634, 678, 682, 783, 784, 785, 799, 897, 972, 986, 988], "1901": 8, "885": [8, 156, 160, 241, 370], "07": [8, 15, 35, 105, 134, 168, 194, 216, 217, 268, 275, 306, 347, 355, 368, 399, 520, 550, 551, 681, 976, 990], "1892": 8, "941": [8, 295, 299, 315, 317], "1890": 8, "6821": 8, "891": 8, "952": [8, 49], "2114": 8, "2112": 8, "900": [8, 50, 74, 75, 204, 217], "2106": 8, "953": [8, 49], "2104": 8, "9759": 8, "1276": 8, "949": 8, "2215": 8, "41": [8, 15, 198, 368, 370, 409, 458, 481, 520, 610, 613, 624, 647, 653, 674, 675, 769, 823, 978, 982], "2213": 8, "909": 8, "2209": 8, "958": 8, "2207": 8, "11680": 8, "1499": 8, "944": [8, 1006], "2146": 8, "956": [8, 1006], "2145": 8, "45": [8, 40, 64, 73, 143, 155, 170, 187, 198, 216, 266, 270, 271, 320, 331, 355, 403, 406, 407, 553, 554, 616, 623, 776, 783, 892, 966, 976, 984, 995, 1007, 1014, 1018, 1021], "2141": 8, "950": 8, "2140": 8, "14625": 8, "1865": 8, "965": [8, 976], "2194": 8, "903": 8, "67": [8, 66, 168, 216, 298, 370, 505, 506, 507, 616, 656, 702, 799, 966, 976, 990, 1014, 1018], "2193": 8, "924": [8, 73], "2190": 8, "957": [8, 409, 716, 976], "2189": 8, "17360": [8, 1029], "2179": 8, "2206": 8, "932": [8, 15], "2203": 8, "2202": 8, "curv": [8, 11, 23, 28, 37, 75, 78, 113, 115, 116, 122, 165, 176, 177, 188, 198, 216, 217, 219, 221, 224, 226, 228, 237, 238, 242, 243, 251, 252, 259, 269, 275, 296, 311, 351, 380, 394, 398, 403, 405, 426, 427, 428, 491, 499, 504, 510, 514, 553, 621, 634, 647, 687, 689, 691, 695, 696, 697, 698, 715, 717, 729, 730, 770, 772, 775, 776, 777, 783, 784, 791, 802, 807, 812, 814, 815, 826, 849, 868, 888, 893, 972, 973, 975, 976, 982, 992, 998, 1000, 1013, 1015, 1020, 1021, 1024, 1028, 1030, 1031, 1032, 1033, 1034], "evolut": [8, 10, 271, 359, 361, 535], "cours": [8, 9, 174, 359, 373, 375, 404, 407, 408, 966, 971, 972, 1000], "valid": [8, 13, 26, 54, 55, 56, 71, 74, 78, 82, 103, 114, 116, 119, 120, 121, 122, 123, 135, 140, 141, 145, 147, 148, 158, 165, 168, 170, 176, 182, 186, 198, 200, 206, 216, 217, 234, 236, 246, 249, 252, 256, 259, 260, 261, 263, 265, 267, 268, 273, 275, 283, 298, 302, 307, 308, 311, 313, 322, 331, 339, 349, 360, 368, 373, 376, 384, 385, 386, 390, 393, 394, 397, 399, 400, 401, 404, 405, 406, 407, 408, 409, 415, 426, 431, 432, 434, 435, 436, 438, 439, 446, 452, 453, 457, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 482, 490, 491, 493, 504, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 561, 564, 566, 571, 572, 578, 582, 583, 586, 591, 621, 623, 627, 628, 629, 630, 631, 632, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 681, 690, 691, 695, 702, 716, 750, 753, 762, 766, 767, 768, 773, 778, 779, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 822, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 854, 860, 868, 880, 881, 883, 884, 886, 888, 890, 893, 895, 896, 897, 898, 899, 908, 909, 912, 919, 931, 936, 966, 975, 976, 977, 980, 984, 986, 988, 990, 991, 992, 996, 997, 1000, 1002, 1005, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "consumpt": [8, 359, 523, 546, 547, 553, 554, 785, 799, 809, 810, 811, 896, 897, 898, 899, 942, 1002, 1018, 1020, 1024, 1026, 1027, 1032], "queue": [8, 979, 1021], "up": [8, 11, 37, 44, 46, 47, 48, 52, 55, 57, 62, 70, 80, 81, 89, 92, 115, 163, 169, 177, 182, 191, 199, 214, 215, 237, 246, 261, 264, 279, 292, 298, 302, 307, 315, 320, 328, 344, 346, 361, 367, 368, 373, 377, 379, 380, 381, 382, 384, 386, 387, 397, 399, 404, 406, 407, 432, 436, 437, 438, 439, 441, 445, 448, 449, 450, 497, 498, 525, 538, 539, 546, 547, 548, 549, 550, 551, 553, 554, 555, 599, 616, 621, 622, 628, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 653, 670, 671, 672, 673, 681, 694, 757, 783, 784, 787, 788, 789, 791, 812, 862, 863, 866, 878, 896, 897, 898, 899, 902, 925, 928, 929, 965, 972, 973, 976, 979, 986, 990, 991, 997, 999, 1000, 1010, 1011, 1018, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "amount": [8, 12, 45, 53, 66, 78, 81, 95, 99, 111, 113, 156, 168, 182, 216, 232, 313, 319, 322, 324, 331, 339, 346, 359, 360, 361, 384, 398, 399, 401, 404, 406, 407, 408, 432, 443, 458, 527, 528, 530, 532, 552, 585, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 654, 670, 673, 681, 788, 789, 828, 829, 834, 869, 884, 885, 898, 899, 971, 972, 975, 978, 980, 986, 988, 989, 990, 991, 1009, 1010, 1031], "learner": [8, 109, 111, 121, 130, 361, 546, 547, 548, 549, 553, 554, 555, 571, 578, 619, 830, 831, 836, 838, 839, 978, 981, 992, 996, 997, 1011], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 62, 86, 153, 202, 203, 207, 209, 227, 240, 263, 287, 289, 302, 327, 329, 332, 333, 983, 1015], "set_ylim": [8, 10, 16, 31, 42, 60, 72, 92, 109, 115, 127, 128, 159, 169, 171, 178, 196, 198, 199, 232, 244, 263, 266, 274, 277, 284, 295, 301, 303, 304, 306, 312, 322, 340], "runtim": [8, 10, 58, 184, 213, 215, 232, 298, 303, 360, 375, 376, 384, 386, 398, 399, 406, 439, 552, 668, 799, 888, 889, 890, 891, 892, 893, 894, 990, 991, 1021, 1025, 1026, 1032, 1033], "gcf": [8, 983], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 72, 116, 117, 120, 121, 124, 132, 143, 147, 158, 162, 169, 177, 244, 249, 258, 260, 264, 277, 306, 307, 315, 316, 345, 375, 402, 570, 621, 637, 658, 669, 976, 983, 990, 992, 1024, 1025, 1026, 1027], "width": [8, 10, 16, 45, 53, 80, 90, 97, 98, 104, 105, 106, 113, 119, 120, 123, 132, 143, 152, 158, 181, 241, 244, 258, 301, 303, 304, 307, 313, 316, 328, 370, 400, 427, 428, 441, 453, 482, 483, 495, 510, 575, 853, 901, 986, 990, 992, 1008, 1009, 1026], "set_xticklabel": [8, 10, 80, 106, 132, 153, 169, 171, 270, 271, 277], "ymax": [8, 10, 11, 78, 185, 187, 190, 191, 199, 207, 259, 292], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 55, 57, 60, 64, 65, 72, 75, 80, 90, 92, 100, 106, 115, 117, 126, 128, 130, 131, 159, 162, 163, 167, 168, 169, 170, 177, 178, 187, 189, 196, 198, 199, 200, 206, 219, 220, 223, 224, 230, 232, 233, 237, 238, 244, 253, 254, 255, 256, 259, 261, 262, 266, 270, 271, 274, 277, 279, 283, 284, 289, 295, 296, 301, 302, 303, 304, 305, 306, 311, 315, 319, 320, 328, 339, 340, 341, 344, 349], "autolabel": [8, 121], "attach": [8, 121, 344, 423, 833, 1019, 1029], "rect": [8, 52, 121, 177], "height": [8, 14, 53, 98, 120, 147, 171, 301, 307, 344, 405, 435, 482, 483, 495, 575], "get_height": [8, 121], "get_x": [8, 121], "get_width": [8, 121], "va": [8, 121, 270, 287, 289, 338], "setp": [8, 10, 270, 273], "rotat": [8, 40, 94, 97, 100, 107, 122, 132, 165, 171, 222, 270, 271, 277, 331, 338, 402, 404, 409, 411, 493, 521, 530, 539, 603, 686, 868, 900, 972, 1029, 1030], "read": [8, 17, 95, 219, 266, 311, 312, 313, 315, 359, 367, 371, 374, 375, 376, 377, 378, 380, 381, 384, 385, 386, 399, 410, 411, 412, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 603, 604, 605, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 921, 965, 972, 976, 977, 996, 1000, 1011, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031], "feat": [8, 10, 377, 407], "extr": 8, "hash": [8, 108, 134, 165, 345, 346, 359, 361, 365, 373, 376, 384, 406, 503, 533, 546, 555, 570, 571, 578, 629, 823, 941, 968, 1011, 1013, 1019, 1022, 1025], "vect": [8, 70, 260, 323, 407, 1011], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 56, 57, 70, 71, 74, 75, 78, 80, 86, 92, 97, 101, 109, 110, 113, 118, 121, 125, 127, 129, 130, 142, 147, 149, 150, 151, 152, 155, 156, 157, 158, 160, 165, 167, 169, 170, 174, 187, 194, 195, 198, 200, 202, 206, 212, 215, 216, 219, 220, 222, 224, 227, 229, 230, 232, 233, 234, 236, 259, 266, 271, 272, 280, 293, 306, 310, 311, 313, 322, 331, 332, 336, 337, 339, 340, 345, 346, 352, 355, 359, 370, 373, 378, 381, 385, 402, 404, 406, 407, 504, 599, 600, 602, 603, 604, 608, 611, 612, 837, 965, 972, 976, 979, 982, 988, 989, 990, 991, 1000, 1002], "robust": [9, 61, 63, 77, 83, 123, 163, 165, 168, 169, 176, 200, 215, 217, 227, 301, 361, 370, 375, 381, 399, 406, 407, 435, 437, 458, 459, 462, 463, 464, 465, 513, 523, 548, 549, 638, 646, 659, 660, 667, 668, 738, 818, 849, 863, 865, 866, 877, 883, 923, 976, 980, 982, 986, 989, 990, 996, 998, 1000, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1034], "covari": [9, 12, 29, 33, 35, 79, 83, 85, 103, 106, 126, 150, 157, 227, 243, 245, 248, 249, 250, 251, 362, 382, 386, 399, 402, 404, 409, 471, 472, 473, 474, 493, 504, 508, 516, 521, 523, 530, 535, 537, 538, 539, 552, 599, 600, 602, 611, 612, 633, 634, 639, 643, 645, 671, 672, 675, 678, 682, 783, 784, 785, 804, 975, 982, 986, 998, 1012, 1013, 1018, 1020, 1021, 1022, 1023, 1025, 1027], "wine": [9, 240, 306, 307, 366, 499, 1013], "tool": [9, 11, 168, 234, 257, 262, 355, 366, 367, 368, 371, 373, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 393, 398, 399, 400, 401, 476, 681, 690, 965, 971, 972, 976, 982, 986, 991, 993, 996, 997, 1000, 1002, 1011, 1025, 1028, 1031, 1032, 1033], "purpos": [9, 12, 16, 37, 86, 162, 212, 213, 214, 219, 221, 235, 247, 249, 255, 256, 331, 332, 344, 345, 355, 368, 373, 375, 385, 386, 387, 389, 392, 396, 399, 400, 404, 406, 407, 408, 409, 535, 627, 810, 811, 848, 973, 976, 977, 979, 982, 994, 996, 1002, 1030, 1032], "awar": [9, 14, 109, 144, 159, 328, 344, 371, 373, 375, 384, 387, 403, 407, 556, 557, 637, 643, 644, 645, 647, 648, 658, 669, 834, 863, 982, 986, 992, 1015, 1018, 1019, 1032], "thing": [9, 220, 254, 344, 360, 361, 368, 372, 373, 375, 384, 399, 401, 407, 548, 549, 972, 986, 1000, 1024], "trivial": [9, 200, 349, 373, 399, 803, 890, 893, 973, 997, 1018], "dimens": [9, 12, 14, 37, 40, 53, 82, 85, 90, 95, 152, 154, 156, 158, 169, 181, 182, 196, 202, 221, 223, 227, 231, 232, 238, 245, 246, 283, 284, 288, 304, 344, 345, 346, 368, 370, 374, 386, 398, 399, 404, 405, 409, 411, 431, 432, 434, 436, 437, 438, 441, 453, 454, 471, 472, 473, 482, 483, 504, 513, 514, 518, 519, 522, 530, 538, 571, 572, 573, 574, 576, 578, 586, 600, 608, 611, 630, 633, 648, 679, 680, 681, 683, 684, 752, 809, 828, 829, 833, 847, 880, 881, 882, 890, 891, 892, 893, 894, 908, 909, 910, 939, 947, 950, 966, 968, 970, 972, 973, 974, 977, 979, 980, 982, 988, 991, 1002, 1009, 1010, 1025, 1027, 1028, 1030], "below": [9, 25, 26, 27, 32, 55, 60, 70, 75, 80, 89, 90, 95, 114, 117, 118, 123, 142, 167, 169, 181, 194, 195, 198, 200, 214, 215, 220, 224, 229, 239, 241, 254, 257, 262, 264, 265, 266, 301, 305, 311, 312, 313, 314, 315, 316, 335, 336, 344, 353, 355, 360, 366, 367, 371, 373, 375, 377, 378, 382, 386, 387, 389, 399, 401, 402, 403, 404, 406, 407, 408, 409, 435, 437, 460, 461, 467, 480, 481, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 499, 520, 526, 531, 537, 571, 584, 585, 586, 587, 588, 589, 622, 635, 641, 647, 648, 656, 662, 664, 681, 694, 731, 751, 783, 784, 785, 796, 799, 817, 848, 851, 861, 862, 865, 871, 877, 965, 966, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 986, 990, 991, 992, 993, 996, 1004, 1011, 1014, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "main": [9, 16, 32, 62, 86, 99, 120, 165, 227, 268, 310, 339, 344, 359, 360, 361, 366, 371, 373, 375, 377, 379, 381, 384, 385, 386, 388, 389, 397, 398, 399, 404, 406, 407, 409, 492, 514, 519, 538, 539, 614, 702, 818, 965, 973, 975, 976, 983, 988, 997, 999, 1008, 1011, 1018, 1021, 1026, 1028, 1029, 1030, 1031, 1032, 1033], "empir": [9, 24, 25, 36, 68, 77, 80, 82, 83, 165, 216, 265, 301, 397, 403, 406, 409, 436, 438, 449, 458, 459, 460, 463, 466, 467, 521, 523, 528, 530, 532, 538, 540, 554, 579, 592, 628, 638, 656, 660, 667, 668, 705, 710, 711, 712, 813, 823, 824, 825, 827, 846, 869, 911, 950, 968, 970, 976, 978, 980, 986, 988, 990, 1012, 1013], "heterogen": [9, 24, 55, 69, 71, 76, 165, 169, 198, 241, 306, 311, 365, 367, 384, 453, 477, 533, 570, 580, 702, 848, 852, 888, 973, 983, 986, 996, 1013, 1022, 1026, 1028, 1029], "mode": [9, 10, 46, 47, 80, 198, 227, 279, 281, 298, 311, 373, 376, 381, 382, 384, 396, 402, 406, 410, 432, 433, 436, 438, 441, 448, 451, 460, 461, 467, 471, 476, 497, 498, 546, 550, 553, 581, 584, 585, 587, 588, 589, 599, 616, 633, 634, 647, 648, 655, 657, 662, 663, 664, 665, 668, 671, 672, 678, 682, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 844, 888, 890, 893, 896, 898, 914, 924, 925, 927, 979, 982, 996, 1002, 1003, 1010, 1019, 1027, 1032], "stick": [9, 783, 975], "bias": [9, 27, 82, 98, 123, 129, 167, 168, 170, 202, 264, 368, 388, 397, 406, 513, 538, 844, 868, 879, 971, 975, 984, 990, 992], "yet": [9, 57, 182, 216, 249, 260, 346, 361, 368, 372, 377, 384, 388, 389, 390, 403, 404, 406, 407, 409, 437, 441, 450, 451, 566, 766, 960, 965, 972, 976, 982, 990, 997, 1027], "extent": [9, 30, 58, 152, 153, 154, 231, 337, 340, 429, 524, 685, 783, 976], "assum": [9, 55, 57, 157, 163, 167, 168, 187, 198, 216, 227, 230, 237, 250, 259, 268, 301, 346, 360, 372, 373, 375, 377, 379, 384, 385, 386, 388, 393, 396, 397, 399, 401, 403, 404, 406, 407, 409, 410, 415, 420, 426, 428, 433, 435, 439, 446, 452, 458, 459, 460, 461, 462, 463, 464, 465, 492, 497, 498, 521, 531, 537, 538, 550, 551, 556, 557, 576, 577, 578, 580, 609, 621, 632, 633, 635, 636, 641, 647, 648, 649, 650, 651, 655, 656, 657, 660, 661, 665, 666, 667, 670, 674, 676, 677, 681, 698, 714, 723, 729, 744, 752, 757, 762, 766, 769, 785, 788, 789, 799, 824, 830, 831, 834, 835, 836, 838, 839, 844, 855, 868, 936, 952, 953, 954, 966, 970, 972, 974, 975, 976, 978, 979, 981, 982, 983, 986, 990, 991, 992, 1024, 1030], "parametr": [9, 24, 25, 82, 230, 283, 305, 314, 397, 400, 405, 406, 426, 540, 542, 624, 674, 685, 864, 876, 919, 920, 972, 975, 978, 979, 986, 989, 992, 1026, 1028, 1031], "therefor": [9, 13, 20, 24, 37, 52, 53, 71, 72, 75, 80, 86, 100, 105, 110, 113, 115, 123, 128, 130, 146, 167, 170, 198, 214, 215, 244, 249, 250, 260, 262, 297, 301, 306, 319, 331, 340, 344, 345, 353, 359, 367, 371, 378, 384, 390, 399, 400, 401, 403, 404, 406, 407, 426, 485, 524, 538, 540, 542, 543, 548, 549, 553, 554, 593, 595, 647, 648, 654, 657, 660, 665, 667, 668, 690, 701, 723, 745, 783, 848, 849, 861, 865, 869, 877, 888, 889, 966, 970, 972, 973, 976, 978, 979, 980, 981, 984, 986, 991, 992, 997, 1002, 1009, 1010, 1011, 1027, 1028, 1031, 1032, 1033, 1034], "minimum": [9, 55, 57, 80, 123, 124, 146, 187, 208, 231, 269, 285, 286, 375, 382, 389, 392, 396, 399, 406, 407, 430, 434, 435, 439, 443, 445, 458, 459, 462, 463, 464, 465, 500, 502, 530, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 583, 616, 620, 621, 624, 626, 657, 660, 665, 667, 668, 671, 672, 681, 694, 713, 767, 768, 788, 789, 809, 824, 845, 846, 857, 858, 861, 862, 863, 867, 881, 882, 895, 896, 897, 898, 899, 905, 908, 909, 912, 928, 973, 976, 980, 982, 986, 988, 992, 1018, 1021, 1025, 1026, 1030, 1031], "determin": [9, 11, 13, 19, 46, 55, 80, 112, 116, 155, 168, 177, 178, 194, 201, 259, 301, 306, 346, 353, 355, 372, 373, 375, 382, 385, 386, 396, 397, 399, 403, 404, 406, 407, 408, 409, 421, 426, 430, 431, 432, 434, 436, 438, 439, 445, 448, 449, 450, 454, 458, 459, 461, 462, 463, 464, 465, 471, 472, 473, 477, 480, 481, 484, 486, 492, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 526, 528, 531, 532, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 554, 556, 557, 559, 571, 572, 573, 577, 580, 583, 591, 596, 597, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 616, 624, 625, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 676, 678, 679, 681, 682, 683, 696, 700, 711, 717, 718, 726, 771, 772, 773, 775, 776, 779, 785, 787, 788, 789, 791, 799, 807, 808, 809, 810, 811, 812, 813, 815, 819, 821, 822, 824, 831, 833, 834, 839, 844, 845, 846, 852, 853, 861, 862, 863, 865, 869, 877, 888, 889, 891, 894, 897, 899, 902, 923, 939, 945, 947, 950, 965, 968, 970, 975, 979, 981, 982, 986, 989, 990, 992, 1002, 1018, 1023, 1026, 1027, 1029, 1030, 1031], "concentr": [9, 100, 110, 128, 155, 165, 224, 243, 250, 251, 303, 321, 369, 373, 406, 409, 432, 508, 783, 975, 982], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 57, 59, 61, 62, 68, 80, 91, 102, 112, 119, 126, 171, 224, 244, 245, 246, 247, 260, 285, 286, 288, 304, 312, 316, 333, 343, 344, 346, 347, 361, 362, 366, 368, 370, 373, 375, 378, 384, 386, 394, 405, 407, 413, 414, 417, 477, 491, 492, 493, 500, 501, 502, 503, 504, 511, 519, 530, 533, 553, 555, 578, 579, 580, 620, 680, 681, 684, 693, 694, 699, 706, 708, 713, 719, 724, 725, 743, 745, 766, 767, 774, 778, 779, 781, 783, 784, 840, 841, 849, 853, 860, 868, 917, 919, 937, 944, 960, 966, 973, 975, 979, 982, 984, 986, 989, 993, 996, 997, 1000, 1002, 1005, 1008, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "outli": [9, 80, 386, 458, 463, 972, 982], "skew": [9, 123, 201, 231, 301, 365, 403, 628, 629, 630, 631, 864, 876, 972, 986, 1013, 1021, 1025, 1034], "Of": [9, 25, 27, 162, 359, 375, 399, 407, 966], "screen": [9, 1031], "presenc": [9, 60, 62, 80, 81, 167, 182, 301, 371, 374, 386, 401, 404, 701, 714, 744, 757, 817, 851, 859, 861, 960, 966, 972, 976, 977, 990, 1021, 1022, 1024, 1028, 1030, 1032], "mixtur": [9, 44, 55, 57, 246, 247, 251, 362, 368, 369, 386, 399, 404, 405, 409, 612, 785, 996, 997, 1012, 1013, 1018, 1022, 1023, 1024, 1025], "univari": [9, 36, 68, 72, 74, 141, 142, 148, 165, 213, 326, 342, 365, 398, 399, 400, 407, 434, 493, 514, 519, 581, 584, 585, 587, 588, 589, 591, 594, 595, 596, 597, 598, 616, 617, 618, 619, 634, 785, 790, 810, 814, 848, 849, 858, 863, 867, 868, 888, 893, 972, 991, 993, 998, 1010, 1013, 1018, 1024], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 56, 58, 62, 71, 73, 75, 86, 95, 96, 102, 104, 106, 115, 116, 123, 143, 150, 168, 170, 182, 187, 203, 212, 219, 220, 221, 227, 232, 234, 259, 260, 262, 271, 277, 288, 301, 305, 306, 312, 331, 346, 353, 355, 359, 365, 373, 375, 381, 384, 385, 386, 396, 397, 398, 399, 400, 401, 403, 404, 406, 407, 408, 409, 411, 429, 435, 441, 451, 453, 454, 456, 458, 463, 471, 472, 473, 474, 497, 498, 505, 506, 507, 513, 520, 521, 522, 523, 524, 526, 528, 530, 531, 532, 537, 538, 539, 542, 543, 546, 547, 548, 549, 553, 554, 555, 577, 578, 579, 580, 616, 621, 622, 627, 628, 630, 631, 647, 648, 657, 665, 666, 667, 680, 688, 690, 696, 714, 744, 746, 747, 769, 776, 778, 779, 785, 799, 814, 817, 823, 824, 825, 826, 827, 837, 847, 848, 857, 864, 865, 868, 873, 874, 876, 877, 878, 879, 884, 895, 896, 897, 898, 899, 908, 914, 917, 924, 925, 948, 966, 968, 972, 973, 974, 975, 976, 978, 980, 982, 986, 990, 991, 992, 993, 995, 1000, 1019, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1032], "font_manag": [9, 81, 285, 330], "ellipticenvelop": [9, 227, 459, 462, 463, 464, 465, 552, 982, 1018, 1021, 1025, 1026, 1031], "load_win": [9, 240, 306, 832, 840, 1015, 1029], "oneclasssvm": [9, 11, 16, 212, 227, 314, 330, 552, 666, 834, 982, 990, 991, 1020, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033], "support_fract": [9, 458, 463], "contamin": [9, 80, 81, 227, 237, 285, 286, 458, 552, 834, 982, 1026, 1034], "ocsvm": [9, 212], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 85, 91, 112, 122, 153, 210, 222, 237, 301, 328, 375, 386, 420, 453, 498, 556, 557, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 851, 852, 853, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 1010], "frontier": [9, 212, 285, 330, 982, 1009], "xx1": [9, 112, 620], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 58, 80, 119, 128, 151, 152, 153, 154, 156, 169, 209, 210, 211, 212, 224, 227, 248, 285, 292, 295, 303, 304, 324, 330, 331, 336, 337, 340, 341, 620], "500": [9, 10, 44, 50, 57, 60, 61, 63, 66, 68, 85, 86, 103, 105, 114, 116, 124, 146, 150, 174, 211, 212, 220, 238, 239, 244, 245, 249, 259, 262, 272, 279, 285, 291, 305, 312, 330, 337, 341, 359, 406, 458, 459, 463, 464, 465, 471, 472, 473, 600, 602, 603, 605, 610, 613, 614, 639, 640, 643, 644, 645, 669, 671, 672, 846, 965, 991], "clf_name": [9, 10, 344], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 56, 112, 126, 139, 210, 211, 212, 228, 234, 237, 266, 285, 286, 295, 303, 329, 330, 331, 335, 336, 337, 341, 375, 386, 397, 406, 426, 458, 538, 539, 542, 544, 548, 550, 552, 556, 582, 583, 620, 621, 622, 647, 648, 655, 657, 663, 664, 665, 666, 687, 689, 691, 696, 709, 714, 715, 723, 727, 728, 730, 744, 770, 776, 777, 780, 785, 788, 789, 799, 809, 816, 817, 818, 819, 834, 848, 855, 885, 888, 890, 892, 893, 972, 976, 982, 983, 990, 991, 1009, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 58, 80, 96, 101, 119, 122, 127, 128, 137, 139, 152, 196, 211, 212, 214, 227, 237, 285, 304, 306, 324, 330, 331, 335, 337, 340, 341, 399, 648, 703, 704, 707, 976, 1006, 1009, 1010], "contour": [9, 11, 16, 34, 46, 47, 80, 119, 139, 153, 154, 156, 209, 210, 211, 212, 227, 232, 248, 285, 292, 329, 330, 332, 333, 335, 336, 337, 370, 620, 621, 982, 990], "linewidth": [9, 24, 33, 34, 37, 40, 58, 73, 78, 86, 92, 111, 123, 127, 150, 154, 158, 187, 188, 192, 193, 194, 196, 199, 201, 204, 212, 215, 227, 235, 237, 268, 272, 285, 289, 302, 312, 329, 330, 332, 337, 351, 1007], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 85, 94, 101, 107, 165, 381, 404, 522, 530, 681, 976, 995, 996, 1010], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 70, 73, 74, 102, 116, 123, 125, 196, 204, 227, 236, 246, 257, 258, 260, 263, 266, 268, 279, 283, 303, 307, 315, 323, 331, 345, 346, 361, 365, 367, 375, 384, 386, 400, 403, 410, 411, 413, 417, 422, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 485, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 702, 750, 753, 759, 767, 768, 783, 784, 785, 788, 789, 791, 796, 797, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 903, 913, 914, 930, 936, 965, 976, 986, 1006, 1007, 1011, 1013, 1018, 1024, 1025], "boxstyl": [9, 303], "fc": [9, 284, 368], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 266, 292, 336, 389, 635, 636, 639, 640, 641, 642, 643, 644, 649, 650, 651, 652, 653, 670, 671, 672, 673, 675], "xycoord": [9, 26], "textcoord": [9, 174], "xytext": [9, 26, 174], "bbox": [9, 12, 34, 45, 102, 244, 245, 246, 249, 250, 303], "arrowprop": [9, 26], "xlim": [9, 12, 26, 34, 44, 58, 62, 73, 78, 79, 80, 90, 97, 110, 112, 113, 114, 129, 136, 151, 152, 168, 177, 188, 190, 197, 204, 207, 212, 227, 235, 245, 250, 254, 269, 273, 285, 286, 330, 335, 336, 340, 352], "ylim": [9, 12, 24, 26, 33, 34, 37, 44, 58, 62, 78, 79, 80, 90, 97, 110, 112, 113, 120, 121, 123, 129, 132, 137, 151, 152, 168, 185, 187, 188, 190, 191, 192, 204, 207, 208, 212, 227, 235, 245, 250, 254, 258, 262, 269, 272, 273, 285, 286, 330, 335, 336, 340, 344, 352], "prop": [9, 73, 81, 204, 246, 285, 330, 353, 390, 936, 1007], "fontproperti": [9, 81, 285, 330], "ash": [9, 370, 1021, 1024], "malic_acid": 9, "abil": [9, 61, 80, 123, 156, 162, 167, 168, 170, 198, 216, 227, 344, 361, 389, 406, 407, 770, 771, 772, 775, 973, 976, 979, 982, 992, 997, 1018, 1020, 1025, 1027, 1031, 1032], "locat": [9, 25, 53, 54, 72, 80, 81, 192, 292, 313, 331, 366, 371, 373, 377, 378, 381, 382, 389, 399, 401, 405, 437, 449, 450, 458, 459, 460, 461, 462, 463, 464, 465, 477, 489, 490, 493, 494, 501, 504, 961, 966, 972, 977, 982, 986, 992, 1026], "hard": [9, 198, 227, 231, 259, 261, 361, 372, 384, 386, 399, 404, 407, 523, 530, 558, 665, 890, 891, 892, 893, 894, 972, 989, 991, 992, 997, 1009, 1010, 1011, 1027, 1028], "due": [9, 26, 27, 53, 55, 60, 75, 113, 150, 168, 169, 177, 182, 189, 196, 198, 200, 215, 216, 231, 245, 267, 268, 279, 306, 307, 344, 345, 346, 373, 379, 386, 389, 397, 399, 403, 404, 406, 409, 432, 435, 436, 448, 524, 528, 532, 533, 563, 660, 785, 788, 789, 793, 795, 799, 809, 810, 813, 816, 820, 821, 853, 857, 858, 868, 966, 972, 973, 975, 976, 977, 979, 983, 990, 997, 1010, 1018, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "banana": [9, 976], "anywai": [9, 344, 375, 654, 674, 675], "rid": [9, 990], "difficulti": [9, 27, 216, 301, 361, 373, 397, 845, 846, 975, 979], "bandwidth": [9, 44, 63, 233, 283, 284, 292, 384, 386, 399, 405, 437, 447, 450, 828, 829, 833, 969, 982, 996, 1029, 1033], "compromis": [9, 169, 359, 373, 636, 668, 979, 1021], "risk": [9, 55, 198, 216, 302, 339, 355, 372, 373, 386, 398, 403, 406, 556, 557, 873, 874, 876, 877, 878, 879, 972, 976, 1000, 1025], "x2": [9, 16, 85, 91, 112, 122, 153, 210, 237, 375, 400, 577, 618, 1010], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 370], "409": [9, 15, 63, 68, 78, 83], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 20, 52, 57, 86, 162, 169, 174, 198, 213, 216, 236, 237, 256, 257, 344, 360, 361, 368, 375, 378, 379, 386, 387, 388, 404, 406, 408, 531, 537, 579, 582, 727, 976, 979, 981, 982, 990, 991, 992, 994, 1000, 1002, 1005, 1009, 1011, 1026], "boxplot": [10, 80, 124, 168, 171, 311], "gc": 10, "defaultdict": [10, 19, 25, 171, 262, 345, 346], "make_regress": [10, 75, 177, 179, 180, 184, 201, 202, 272, 312, 355, 369, 375, 376, 385, 543, 545, 549, 554, 624, 635, 636, 638, 640, 642, 644, 652, 653, 654, 656, 660, 668, 846, 889, 976, 977, 979], "randomforestregressor": [10, 116, 129, 130, 133, 162, 163, 313, 385, 406, 546, 547, 549, 551, 555, 557, 559, 621, 622, 898, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "sgdregressor": [10, 209, 359, 361, 384, 398, 635, 638, 656, 660, 665, 668, 846, 889, 894, 972, 990, 1020, 1022, 1024, 1025, 1026, 1029, 1031, 1032, 1033, 1034], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 60, 61, 95, 109, 116, 117, 119, 130, 163, 182, 206, 207, 212, 227, 260, 264, 265, 272, 279, 308, 319, 320, 321, 322, 333, 344, 345, 355, 368, 382, 386, 394, 458, 463, 477, 478, 480, 481, 484, 486, 492, 500, 501, 502, 503, 504, 508, 511, 513, 520, 526, 528, 529, 535, 536, 542, 543, 544, 545, 553, 554, 556, 557, 591, 647, 648, 655, 656, 657, 661, 663, 665, 666, 667, 676, 785, 787, 788, 789, 790, 791, 799, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 818, 845, 846, 869, 888, 889, 890, 893, 924, 925, 945, 947, 971, 972, 977, 984, 990, 991, 1006, 1011, 1013, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 64, 70, 72, 74, 130, 185, 260, 297, 298, 301, 314, 323, 344, 371, 377, 386, 393, 429, 432, 436, 438, 441, 443, 448, 451, 453, 456, 460, 461, 467, 520, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 582, 583, 616, 621, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 679, 681, 683, 753, 766, 783, 784, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 817, 819, 822, 837, 844, 845, 846, 847, 848, 849, 850, 885, 888, 889, 890, 891, 892, 893, 894, 942, 997, 1020, 1021, 1023, 1025, 1026, 1027, 1029, 1030, 1032, 1033], "n_instanc": [10, 622], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 79, 81, 82, 95, 98, 100, 109, 112, 113, 122, 124, 125, 129, 144, 163, 177, 182, 184, 189, 191, 192, 197, 198, 199, 202, 203, 204, 208, 213, 216, 231, 234, 235, 244, 248, 250, 256, 259, 264, 268, 269, 284, 301, 312, 313, 339, 345, 346, 349, 353, 359, 360, 368, 375, 379, 386, 397, 398, 399, 401, 404, 406, 407, 408, 409, 412, 435, 441, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 476, 486, 497, 498, 512, 515, 516, 520, 521, 524, 526, 527, 528, 529, 531, 532, 536, 537, 541, 546, 547, 548, 549, 550, 551, 553, 554, 555, 570, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 600, 625, 628, 632, 633, 634, 639, 647, 648, 653, 654, 655, 657, 660, 665, 666, 667, 674, 675, 692, 698, 701, 702, 704, 705, 713, 717, 718, 722, 726, 728, 734, 771, 772, 773, 775, 782, 783, 800, 801, 804, 805, 817, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 851, 858, 860, 861, 863, 864, 865, 867, 868, 874, 875, 876, 877, 881, 888, 896, 897, 898, 899, 923, 962, 966, 972, 974, 975, 978, 979, 980, 986, 987, 988, 990, 991, 992, 1002, 1009, 1011, 1018, 1020, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "atomic_benchmark": 10, "percentil": [10, 71, 123, 241, 301, 359, 581, 584, 585, 587, 588, 589, 592, 595, 621, 622, 736, 986, 1023, 1031], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 74, 121, 133, 163, 199, 237, 256, 263, 331, 349, 359, 371, 373, 384, 385, 400, 402, 406, 409, 438, 472, 527, 544, 545, 546, 547, 552, 553, 554, 555, 559, 674, 675, 785, 788, 789, 799, 812, 823, 824, 825, 826, 827, 965, 976, 986, 1011, 1026, 1028], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 66, 79, 81, 122, 147, 150, 156, 157, 169, 174, 200, 254, 259, 260, 271, 320, 339, 345, 346, 375, 382, 386, 387, 396, 397, 398, 399, 404, 407, 408, 409, 577, 582, 596, 597, 604, 616, 623, 648, 790, 800, 801, 804, 914, 966, 975, 1013, 1026, 1028], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 58, 64, 100, 112, 114, 119, 123, 139, 154, 158, 178, 181, 190, 207, 210, 216, 231, 254, 259, 266, 268, 324, 327, 329, 331, 332, 333, 335, 337, 345, 350, 368, 384, 386, 396, 397, 400, 403, 407, 409, 426, 429, 430, 434, 439, 446, 452, 460, 461, 467, 482, 497, 498, 571, 581, 584, 585, 587, 588, 589, 599, 602, 603, 604, 606, 608, 609, 611, 612, 614, 616, 621, 622, 632, 681, 689, 694, 695, 696, 704, 719, 728, 746, 747, 751, 754, 757, 758, 759, 760, 761, 762, 764, 766, 767, 768, 769, 770, 774, 816, 828, 829, 903, 976, 977, 978, 979, 986, 992, 1018, 1030, 1031, 1033, 1034], "contain": [10, 19, 24, 27, 33, 40, 49, 56, 58, 70, 71, 112, 114, 118, 126, 156, 168, 169, 171, 174, 189, 216, 227, 234, 237, 238, 241, 249, 257, 259, 265, 268, 269, 277, 285, 286, 288, 301, 314, 320, 323, 344, 345, 366, 367, 368, 370, 373, 375, 377, 378, 379, 380, 381, 382, 385, 386, 393, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 411, 413, 422, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 491, 492, 493, 497, 498, 499, 503, 504, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 675, 677, 678, 679, 680, 681, 685, 686, 687, 689, 690, 691, 698, 701, 723, 724, 725, 756, 760, 767, 768, 776, 780, 783, 784, 785, 788, 789, 791, 799, 803, 804, 807, 811, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 928, 929, 931, 932, 939, 943, 945, 965, 966, 968, 974, 977, 980, 982, 986, 987, 989, 992, 1002, 1011, 1018, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "generate_dataset": 10, "coef": [10, 54, 105, 167, 168, 177, 182, 185, 189, 190, 192, 197, 201, 202, 203, 207, 214, 241, 272, 297, 340, 513, 635, 636, 638, 641, 642, 648, 649, 650, 651, 652, 658, 661, 663, 669, 670, 671, 672, 673, 674, 675, 676, 980], "random_se": [10, 92, 119], "x_scaler": 10, "y_scaler": 10, "ok": [10, 373, 982], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 292, 323, 359, 696, 702, 717, 718, 726, 771, 772, 775, 776, 976, 1018, 1026, 1027, 1033], "bp": [10, 124, 147, 186, 187, 370, 984], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 60, 80, 92, 95, 96, 97, 113, 130, 133, 159, 174, 177, 178, 188, 196, 224, 238, 254, 265, 292, 296, 302, 306, 307, 321, 331, 352, 371, 386, 399, 404, 977], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 55, 58, 59, 60, 63, 64, 85, 91, 92, 97, 101, 116, 129, 157, 158, 174, 186, 191, 193, 195, 196, 198, 200, 201, 213, 215, 220, 244, 246, 247, 254, 259, 261, 262, 263, 286, 301, 306, 321, 349, 373, 377, 407, 1026, 1028, 1029, 1034], "linestyl": [10, 11, 16, 33, 60, 73, 80, 103, 105, 110, 122, 132, 136, 139, 150, 153, 155, 157, 159, 170, 183, 185, 186, 187, 198, 199, 200, 204, 208, 210, 211, 216, 235, 237, 256, 258, 262, 263, 268, 284, 292, 296, 302, 329, 332, 333, 335, 336, 337, 1007], "major": [10, 14, 116, 266, 301, 305, 311, 312, 313, 314, 315, 316, 346, 359, 368, 372, 373, 376, 379, 384, 387, 399, 403, 405, 407, 409, 540, 558, 559, 683, 717, 718, 726, 771, 772, 775, 900, 902, 976, 979, 990, 997, 1000, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25, 791, 807], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 206, 380, 427, 565, 687, 689, 691, 907], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 653, 674, 675, 972, 976], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 206, 221, 224, 279], "1e2": [10, 150, 157, 233, 250, 331, 734], "randomforest": [10, 119, 359, 406, 896, 897, 1023], "0001": [10, 206, 257, 375, 411, 432, 436, 448, 460, 461, 467, 522, 527, 529, 536, 538, 539, 548, 549, 635, 636, 637, 638, 641, 642, 647, 648, 649, 650, 651, 652, 657, 658, 661, 663, 665, 667, 669, 676, 678, 682, 845, 846, 888, 889, 965], "250": [10, 65, 123, 174, 219, 482, 681, 965, 988, 1025], "984": [10, 15], "plot_prediction_lat": [10, 15], "conserv": [11, 571, 578, 880, 881, 975, 988], "biologi": 11, "south": [11, 168, 292, 405], "american": [11, 12, 70, 81, 368, 399, 401, 405, 406, 407, 458, 463, 719, 868], "mammal": 11, "past": [11, 377, 378, 381, 384, 387, 403, 404, 406, 527, 544, 545, 667, 1000, 1003, 1034], "environment": [11, 182, 216], "unsuccess": 11, "cast": [11, 53, 198, 220, 367, 386, 387, 407, 485, 633, 634, 635, 641, 645, 646, 649, 650, 651, 652, 653, 654, 662, 664, 941, 1025, 1026, 1027, 1028, 1031, 1033], "densiti": [11, 49, 55, 60, 65, 75, 101, 105, 147, 165, 184, 198, 213, 216, 223, 227, 231, 243, 250, 251, 259, 265, 280, 285, 286, 293, 301, 331, 344, 370, 382, 386, 399, 406, 410, 418, 433, 435, 437, 439, 441, 453, 456, 487, 491, 525, 530, 538, 539, 783, 784, 785, 828, 829, 833, 834, 881, 970, 972, 975, 979, 981, 982, 988, 996, 998, 1002, 1012, 1013, 1020, 1022, 1026, 1027, 1033, 1034], "phillip": [11, 292, 487], "2006": [11, 292, 406, 409, 451, 487, 546, 547, 554, 555, 599, 600, 603, 608, 611, 638, 655, 656, 729, 776, 777, 783, 823, 881, 898, 899, 972, 976, 978, 981, 988, 989], "basemap": [11, 292], "coast": [11, 292], "line": [11, 17, 40, 43, 60, 70, 95, 100, 116, 122, 149, 160, 162, 163, 165, 168, 169, 186, 187, 188, 190, 193, 194, 196, 199, 200, 201, 206, 207, 209, 210, 227, 231, 232, 235, 237, 256, 263, 265, 266, 289, 292, 302, 313, 330, 335, 336, 340, 341, 344, 367, 368, 371, 373, 374, 375, 377, 378, 379, 380, 381, 384, 404, 405, 406, 427, 476, 477, 478, 497, 498, 531, 542, 543, 544, 545, 599, 602, 603, 621, 659, 675, 689, 690, 691, 791, 807, 944, 970, 976, 980, 983, 990, 996, 999, 1009, 1011, 1020, 1029, 1031, 1034], "nation": [11, 80, 292, 368, 835], "boundari": [11, 13, 25, 26, 27, 31, 34, 58, 60, 108, 112, 119, 128, 134, 151, 154, 165, 169, 181, 199, 227, 232, 235, 262, 282, 287, 289, 290, 292, 295, 301, 303, 306, 318, 325, 328, 329, 331, 333, 340, 341, 350, 369, 397, 406, 407, 409, 439, 445, 493, 525, 538, 539, 558, 577, 578, 580, 620, 817, 830, 836, 838, 839, 840, 867, 884, 885, 892, 893, 896, 912, 970, 979, 982, 986, 989, 990, 991, 1018, 1020, 1022, 1031, 1032, 1033], "america": [11, 12, 80, 292, 835, 986], "bradypu": [11, 292, 487], "variegatu": [11, 292, 487], "brown": [11, 92, 292, 487, 617, 966, 1023, 1025, 1026, 1027, 1030], "throat": [11, 292, 487], "sloth": [11, 292, 487], "microryzomi": [11, 292, 487], "minutu": [11, 292, 487], "known": [11, 17, 25, 27, 39, 49, 57, 58, 81, 104, 105, 130, 155, 157, 163, 182, 198, 199, 216, 227, 259, 261, 268, 288, 292, 302, 314, 319, 328, 345, 361, 370, 371, 373, 376, 381, 384, 386, 389, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 409, 427, 452, 471, 473, 487, 497, 498, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 577, 578, 580, 583, 598, 611, 622, 647, 648, 661, 671, 672, 683, 693, 699, 702, 707, 717, 731, 743, 745, 781, 817, 823, 824, 825, 826, 827, 830, 835, 838, 844, 872, 896, 897, 898, 899, 966, 968, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 986, 991, 992, 1002, 1007, 1009, 1010], "forest": [11, 27, 31, 108, 115, 119, 125, 126, 128, 130, 133, 134, 162, 165, 166, 172, 174, 227, 237, 256, 292, 313, 344, 355, 366, 385, 386, 397, 408, 452, 453, 479, 480, 484, 485, 487, 504, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 619, 623, 785, 790, 814, 821, 848, 862, 892, 896, 897, 898, 965, 966, 977, 984, 996, 997, 998, 1013, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1027], "rice": [11, 292, 487, 1031], "rat": [11, 292, 487], "rodent": [11, 292, 487], "live": [11, 70, 168, 292, 373, 399, 487, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614], "peru": [11, 292, 487], "colombia": [11, 292, 487], "ecuador": [11, 292, 487], "venezuela": [11, 292, 487], "entropi": [11, 239, 271, 292, 313, 319, 320, 355, 399, 406, 411, 487, 522, 546, 553, 596, 597, 647, 706, 724, 725, 729, 781, 896, 898, 972, 973, 976, 980, 992, 1020, 1022, 1026, 1027, 1032, 1034], "anderson": [11, 292, 487, 1024, 1030], "schapir": [11, 292, 406, 487, 542, 543], "ecolog": [11, 292, 487], "190": [11, 122, 216, 268, 292, 379, 487], "231": [11, 292, 352, 354, 399, 410, 433, 487, 573], "259": [11, 221, 292, 406, 487, 556, 557], "________________________________________________________________________________": [11, 54, 344], "coastlin": [11, 292, 370], "coverag": [11, 123, 198, 216, 292, 376, 395, 487, 616, 709], "area": [11, 34, 126, 198, 216, 237, 256, 259, 266, 268, 269, 331, 336, 340, 370, 373, 377, 384, 399, 406, 407, 691, 695, 696, 697, 730, 776, 777, 973, 976, 979, 995, 1020], "roc": [11, 25, 115, 165, 226, 228, 237, 238, 242, 252, 275, 380, 397, 403, 493, 499, 553, 647, 691, 695, 696, 697, 715, 730, 770, 776, 777, 804, 814, 817, 855, 893, 982, 1015, 1020, 1021, 1023, 1024, 1028, 1030, 1034], "868443": 11, "993919": 11, "elaps": [11, 47, 67, 116, 117, 118, 359, 453, 456, 558, 559, 847, 848, 849, 850], "astro": [11, 157, 219, 247], "washington": [11, 157, 219, 247, 284, 292], "fetch_species_distribut": [11, 292, 1027], "bunch": [11, 366, 367, 368, 453, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 499, 556, 557, 558, 559, 621, 622, 623, 847, 848, 896, 897, 898, 899, 936, 1000, 1011, 1023, 1025, 1028, 1030, 1034], "ll": [11, 55, 118, 254, 292, 373, 384, 521, 530, 979, 992, 1002], "otherwis": [11, 56, 62, 112, 159, 163, 179, 200, 206, 292, 355, 361, 375, 377, 379, 386, 390, 399, 401, 403, 407, 409, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 442, 443, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 485, 515, 522, 523, 524, 525, 527, 529, 530, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 583, 586, 591, 599, 600, 603, 620, 621, 622, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 675, 679, 681, 685, 686, 687, 689, 691, 692, 696, 698, 702, 703, 712, 714, 715, 716, 717, 718, 726, 729, 740, 742, 743, 744, 754, 762, 766, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 799, 803, 804, 807, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 845, 846, 848, 851, 852, 853, 854, 855, 859, 860, 867, 868, 869, 870, 873, 874, 875, 877, 878, 879, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 903, 909, 911, 924, 925, 935, 937, 960, 962, 971, 972, 973, 976, 979, 980, 982, 983, 986, 988, 990, 991, 996, 1000, 1002, 1020, 1026, 1027, 1028, 1031, 1034], "improvis": [11, 292], "mpl_toolkit": [11, 45, 67, 90, 101, 102, 169, 195, 219, 221, 292], "except": [11, 16, 44, 53, 98, 116, 206, 213, 227, 234, 267, 279, 292, 296, 297, 301, 303, 316, 362, 366, 373, 375, 376, 377, 378, 384, 386, 390, 393, 396, 400, 403, 404, 406, 407, 409, 421, 449, 454, 457, 471, 472, 473, 498, 543, 545, 546, 547, 549, 551, 553, 554, 557, 559, 600, 616, 619, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 676, 700, 766, 792, 821, 822, 828, 829, 831, 834, 839, 845, 846, 852, 866, 868, 886, 889, 891, 894, 897, 899, 929, 962, 972, 976, 991, 1002, 1010, 1011, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031], "importerror": [11, 16, 53, 98, 279, 292, 381, 485], "construct_grid": [11, 292], "object": [11, 13, 14, 19, 26, 44, 50, 62, 66, 70, 71, 98, 130, 136, 145, 146, 155, 165, 169, 182, 194, 198, 214, 216, 226, 234, 238, 240, 241, 242, 257, 271, 292, 307, 314, 315, 319, 345, 346, 355, 366, 367, 368, 373, 374, 376, 378, 379, 380, 382, 385, 386, 387, 390, 393, 399, 400, 401, 404, 407, 408, 409, 413, 415, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 689, 690, 691, 700, 707, 720, 721, 730, 746, 747, 769, 770, 777, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 908, 909, 910, 911, 912, 915, 919, 921, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 961, 962, 964, 972, 973, 974, 975, 979, 982, 983, 986, 989, 990, 991, 996, 997, 1002, 1003, 1005, 1006, 1009, 1011, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "func": [11, 75, 115, 168, 178, 216, 292, 373, 400, 454, 852, 986, 1022, 1024, 1026, 1027], "xgrid": [11, 292], "ygrid": [11, 292], "correspond": [11, 13, 16, 20, 26, 32, 41, 53, 65, 78, 82, 97, 113, 116, 117, 119, 126, 143, 146, 147, 151, 156, 159, 168, 187, 190, 198, 199, 207, 216, 228, 233, 234, 241, 249, 258, 260, 262, 263, 268, 269, 292, 306, 313, 314, 315, 345, 349, 350, 355, 360, 367, 368, 369, 372, 373, 375, 377, 380, 381, 385, 386, 387, 396, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 414, 420, 426, 428, 430, 434, 437, 440, 442, 448, 450, 452, 453, 461, 471, 472, 473, 479, 480, 481, 482, 483, 484, 485, 523, 530, 533, 534, 535, 538, 539, 541, 544, 546, 548, 549, 550, 553, 571, 573, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 606, 619, 621, 622, 624, 632, 633, 634, 635, 636, 637, 641, 647, 648, 649, 650, 651, 657, 658, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 676, 679, 680, 681, 683, 692, 699, 702, 712, 713, 722, 726, 740, 742, 762, 766, 770, 776, 777, 780, 782, 783, 784, 785, 788, 789, 791, 799, 807, 809, 817, 820, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 837, 845, 846, 855, 859, 861, 862, 865, 869, 877, 890, 893, 896, 897, 898, 899, 913, 919, 936, 951, 965, 966, 968, 969, 970, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 986, 987, 990, 991, 995, 1002, 1008, 1011, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "coordin": [11, 12, 13, 54, 100, 129, 154, 183, 219, 260, 292, 359, 404, 409, 432, 436, 437, 438, 450, 460, 461, 467, 520, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 539, 603, 635, 636, 640, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 670, 671, 672, 673, 677, 678, 679, 682, 683, 695, 752, 757, 888, 972, 973, 991, 1009, 1018, 1021, 1022, 1023, 1027, 1029, 1031, 1032, 1033], "corner": [11, 13, 26, 53, 167, 256, 260, 268, 269, 292, 373, 487, 900, 902, 976, 1032], "cell": [11, 12, 20, 26, 32, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 292, 298, 307, 312, 313, 315, 316, 321, 353, 370, 378, 681, 976, 977, 1024, 1032], "xmin": [11, 78, 188, 190, 207, 208, 292], "x_left_lower_corn": [11, 292, 487], "grid_siz": [11, 61, 292, 487], "xmax": [11, 78, 188, 190, 207, 208, 292], "nx": [11, 34, 292, 487], "ymin": [11, 78, 185, 187, 190, 191, 199, 207, 259, 292], "y_left_lower_corn": [11, 292, 487], "ny": [11, 34, 258, 292, 370, 487, 966, 988], "create_species_bunch": 11, "species_nam": [11, 292], "record": [11, 96, 114, 170, 234, 307, 346, 359, 373, 399, 401, 439, 446, 487, 609, 632, 681, 759, 762, 766, 767, 768, 769, 811, 834, 1031, 1032], "join": [11, 12, 19, 55, 162, 216, 259, 303, 368, 387, 452, 1011, 1018, 1026], "ascii": [11, 292, 407, 476, 577, 578, 580], "pt": [11, 368, 408, 864, 986], "desir": [11, 24, 112, 147, 163, 198, 200, 301, 305, 366, 373, 375, 377, 381, 393, 396, 399, 402, 403, 404, 408, 492, 527, 529, 533, 536, 556, 582, 591, 592, 653, 659, 674, 675, 697, 724, 828, 829, 833, 853, 855, 858, 859, 861, 862, 864, 865, 869, 872, 874, 876, 877, 912, 945, 968, 970, 973, 979, 986, 990, 991, 992, 1002, 1018, 1026, 1027, 1028, 1031], "pts_": 11, "ix": [11, 268, 338], "searchsort": 11, "dd": [11, 12, 128, 292, 487], "ii": [11, 96, 169, 205, 254, 370, 407, 571, 572, 578, 627, 655, 656, 851, 860, 972, 986, 995], "lat": [11, 292, 487, 752], "cov_": [11, 82], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 81, 92, 122, 163, 170, 222, 230, 234, 236, 271, 313, 375, 378, 385, 390, 789, 806, 823, 824, 825, 827, 965, 966], "land": [11, 292, 387, 406], "water": 11, "land_refer": [11, 292], "standard": [11, 12, 20, 26, 32, 34, 55, 61, 70, 71, 73, 80, 81, 86, 96, 110, 113, 115, 116, 117, 118, 119, 126, 130, 147, 150, 155, 157, 159, 168, 177, 183, 187, 196, 198, 207, 219, 220, 221, 232, 249, 254, 257, 258, 259, 260, 262, 301, 306, 329, 344, 359, 360, 365, 366, 367, 369, 370, 371, 373, 375, 376, 378, 379, 382, 384, 386, 389, 393, 395, 399, 401, 402, 403, 407, 409, 435, 457, 461, 477, 485, 490, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 513, 514, 519, 521, 524, 530, 541, 579, 583, 600, 623, 633, 634, 639, 640, 643, 644, 645, 653, 654, 661, 662, 663, 664, 665, 667, 676, 678, 682, 776, 791, 806, 807, 825, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 852, 857, 858, 861, 864, 865, 866, 868, 876, 877, 878, 879, 886, 888, 889, 908, 965, 968, 972, 973, 976, 978, 979, 980, 982, 990, 991, 997, 1000, 1002, 1007, 1009, 1010, 1011, 1013, 1024, 1025, 1026, 1027, 1029, 1030, 1031], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 292], "llcrnrlat": [11, 292], "urcrnrlat": [11, 292], "llcrnrlon": [11, 292], "urcrnrlon": [11, 292], "drawcoastlin": [11, 292], "drawcountri": [11, 292], "9998": [11, 292], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 56, 60, 63, 65, 68, 74, 75, 80, 90, 91, 92, 95, 102, 103, 109, 112, 119, 123, 126, 128, 129, 131, 132, 136, 139, 143, 144, 151, 153, 154, 158, 163, 165, 168, 169, 170, 180, 181, 183, 192, 195, 202, 210, 212, 231, 233, 235, 236, 244, 247, 259, 262, 263, 268, 269, 272, 279, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 302, 303, 304, 305, 311, 315, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 343, 344, 346, 347, 355, 360, 367, 368, 370, 373, 381, 382, 386, 390, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 429, 432, 435, 436, 437, 438, 439, 440, 441, 442, 448, 449, 451, 458, 461, 477, 491, 493, 495, 501, 512, 520, 526, 530, 533, 534, 535, 538, 539, 542, 544, 546, 547, 548, 570, 578, 579, 580, 581, 583, 584, 585, 587, 588, 589, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 620, 628, 629, 637, 639, 640, 642, 643, 644, 645, 647, 648, 652, 653, 654, 655, 656, 658, 668, 669, 671, 672, 673, 674, 675, 677, 680, 684, 685, 693, 694, 697, 706, 714, 725, 731, 744, 746, 747, 749, 754, 757, 762, 763, 764, 765, 767, 779, 780, 781, 783, 784, 786, 790, 792, 793, 794, 797, 800, 801, 803, 804, 806, 812, 823, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 849, 853, 854, 855, 859, 860, 861, 863, 864, 868, 876, 881, 895, 903, 911, 920, 925, 950, 965, 966, 968, 969, 970, 972, 973, 974, 975, 978, 980, 981, 982, 984, 989, 990, 991, 992, 996, 999, 1006, 1012, 1013, 1018, 1019, 1020, 1021, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "solid": [11, 16, 31, 33, 122, 153, 210, 211, 227, 292, 303, 1000], "z": [11, 16, 34, 58, 101, 119, 139, 152, 154, 169, 208, 210, 211, 212, 219, 221, 227, 232, 248, 285, 292, 295, 303, 306, 324, 330, 331, 335, 336, 337, 341, 370, 396, 404, 406, 542, 543, 574, 628, 653, 660, 674, 675, 678, 682, 712, 773, 868, 972, 973, 980, 981, 1033], "float64": [11, 13, 48, 53, 71, 122, 124, 125, 168, 169, 270, 315, 316, 360, 367, 373, 375, 386, 407, 460, 461, 467, 485, 486, 497, 498, 531, 570, 571, 578, 580, 630, 647, 662, 664, 688, 726, 853, 861, 862, 890, 891, 893, 894, 897, 899, 906, 908, 947, 950, 952, 953, 954, 991, 1002, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "idx": [11, 16, 19, 30, 45, 55, 105, 112, 116, 119, 131, 159, 169, 171, 182, 190, 197, 198, 207, 220, 237, 350, 400, 403], "9999": [11, 216, 292, 322, 487, 616, 1026], "coverages_land": 11, "contourf": [11, 16, 119, 212, 232, 285, 292, 295, 303, 304, 324, 330, 336, 341, 620, 621], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 198, 216, 237, 256, 259, 263, 266, 268, 269, 397, 691, 697, 776, 976, 1023, 1026, 1030], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 101, 105, 211, 212, 245, 266, 285, 286, 330, 336, 341, 399, 696, 976, 992], "fpr": [11, 228, 237, 256, 268, 269, 380, 581, 585, 687, 691, 695, 715, 777, 976, 1015, 1018, 1034], "tpr": [11, 228, 237, 256, 268, 269, 380, 691, 695, 777, 976, 1015, 1018, 1034], "threshold": [11, 25, 42, 65, 98, 105, 147, 165, 169, 171, 193, 228, 230, 256, 257, 258, 266, 277, 318, 325, 350, 353, 386, 399, 404, 406, 408, 430, 431, 434, 435, 458, 489, 497, 498, 520, 526, 531, 537, 538, 539, 552, 577, 580, 582, 586, 591, 592, 633, 656, 660, 665, 667, 681, 687, 689, 691, 692, 695, 696, 709, 714, 715, 727, 728, 744, 770, 776, 777, 780, 783, 784, 804, 823, 834, 835, 851, 853, 855, 871, 883, 884, 885, 893, 900, 902, 950, 972, 976, 979, 980, 982, 986, 989, 991, 992, 997, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1034], "roc_curv": [11, 228, 256, 268, 691, 695, 715, 770, 776, 976, 1018, 1019, 1020, 1023, 1024, 1026, 1031, 1034], "roc_auc": [11, 259, 263, 268, 269, 380, 623, 691, 976, 1015], "ntime": [11, 270], "145": [11, 15, 90, 93, 344, 347, 399], "plot_species_distribution_model": [11, 15, 487], "emploi": [12, 150, 233, 401, 407, 409, 439, 467, 571, 578, 984, 1000, 1010, 1024], "techniqu": [12, 70, 72, 97, 106, 111, 121, 138, 146, 163, 167, 206, 221, 223, 264, 283, 314, 320, 349, 361, 370, 384, 386, 397, 398, 399, 403, 404, 405, 406, 407, 408, 436, 437, 438, 439, 523, 543, 666, 678, 682, 683, 714, 744, 968, 972, 973, 975, 976, 979, 982, 984, 988, 990, 992, 997, 1000, 1005, 1010, 1011, 1031], "histor": [12, 198, 997], "quot": [12, 14, 70, 260, 344, 345, 360, 367, 368, 371, 377, 398, 477, 478, 485, 976, 988, 991, 1011, 1033], "quantiti": [12, 120, 259, 266, 313, 359, 386, 399, 406, 710, 711, 712, 773, 844, 965, 967, 970, 972, 1023], "daili": [12, 1000], "price": [12, 75, 120, 130, 307, 966, 972, 1000, 1007], "link": [12, 17, 168, 169, 177, 198, 216, 244, 262, 289, 349, 360, 371, 372, 373, 374, 377, 381, 386, 397, 399, 401, 404, 409, 550, 551, 599, 637, 658, 669, 677, 694, 907, 909, 972, 979, 992, 993, 996, 999, 1005, 1009, 1011, 1016, 1018, 1021, 1022, 1025, 1026, 1029], "fluctuat": [12, 60, 198, 266, 1026], "normalesup": [12, 32, 46, 66, 232], "2003": [12, 396, 399, 404, 407, 440, 441, 451, 502, 504, 678, 682, 823, 825, 972, 973, 978, 988, 1026], "2008": [12, 401, 403, 404, 467, 523, 552, 579, 634, 653, 674, 675, 681, 705, 714, 744, 818, 823, 827, 844, 970, 973, 974, 976, 977, 978, 981, 982, 991], "calm": 12, "ago": [12, 997], "tech": [12, 370, 826], "firm": [12, 399], "crash": [12, 373, 457, 878, 879, 886, 986, 1022, 1026, 1034], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 381, 844, 981, 1009], "msft": 12, "ibm": [12, 19, 323, 346, 368], "twx": 12, "warner": [12, 1033], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1011], "amzn": 12, "amazon": 12, "tm": [12, 979], "toyota": 12, "caj": 12, "canon": [12, 386, 397, 406, 471, 472, 474, 756, 997, 998, 1013], "sne": [12, 165, 218, 219, 220, 221, 223, 225, 503, 514, 681, 1012, 1013], "soni": [12, 1028, 1030], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 845, 846, 980], "boe": 12, "ko": [12, 26, 151], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 80, 81, 401, 458, 463], "mcdonald": 12, "pep": [12, 381, 1018], "pepsi": 12, "kellogg": 12, "un": [12, 373, 397, 407, 411, 522, 578, 781, 851, 860, 871, 875, 1027], "unilev": 12, "mar": [12, 994], "marriott": 12, "pg": [12, 379, 638, 972, 1023], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 967, 978, 1030], "electr": [12, 370, 399], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1000], "chase": [12, 1018], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 1000], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 359, 371, 384, 977, 994], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 70], "instrument": [12, 70, 96, 167], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1028], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 133], "dynam": [12, 169, 544, 545, 552, 568, 569, 665, 666, 667, 992, 996, 1000, 1024, 1030], "rtn": 12, "raytheon": 12, "cat": [12, 71, 169, 170, 314, 315, 316, 368, 407, 571, 701, 707, 742, 771, 869, 976, 986, 1027, 1028, 1030], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 346, 360, 375, 379, 401, 407, 488, 571, 577, 578, 580, 900, 902, 996], "fetch": [12, 17, 130, 168, 216, 366, 367, 368, 373, 377, 378, 381, 398, 404, 485, 544, 545, 552, 577, 578, 580, 1026, 1034], "histori": [12, 362, 535, 548, 549, 994, 1018], "stderr": [12, 817], "url": [12, 17, 147, 367, 370, 377], "githubusercont": 12, "master": [12, 16, 279, 316, 373, 377, 1000, 1023], "financi": [12, 399, 406, 972], "csv": [12, 367, 370, 378, 999, 1026, 1031], "read_csv": [12, 378, 485, 1033], "close_pric": 12, "vstack": [12, 26, 57, 65, 153, 154, 180, 244, 248, 279, 292, 336, 620, 977, 1026], "q": [12, 71, 85, 123, 198, 314, 396, 399, 404, 924, 972, 991], "open_pric": 12, "carri": [12, 31, 163, 259, 262, 267, 296, 303, 346, 387, 393, 407, 546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899, 1000, 1010], "invers": [12, 54, 77, 83, 165, 249, 268, 274, 331, 345, 346, 365, 386, 398, 400, 402, 403, 404, 407, 411, 434, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 516, 522, 523, 524, 528, 530, 532, 546, 550, 553, 578, 579, 580, 617, 633, 634, 647, 648, 655, 657, 663, 664, 665, 666, 667, 669, 712, 731, 740, 783, 784, 830, 831, 838, 839, 845, 846, 848, 852, 855, 861, 862, 864, 880, 881, 888, 889, 890, 893, 894, 896, 898, 914, 970, 972, 976, 979, 980, 986, 990, 991, 1009, 1011, 1012, 1013, 1018, 1021, 1026, 1029, 1030, 1032], "correl": [12, 27, 82, 85, 86, 106, 127, 143, 146, 155, 165, 166, 167, 169, 170, 172, 182, 187, 193, 216, 259, 277, 307, 312, 313, 339, 366, 369, 370, 378, 386, 388, 396, 401, 403, 408, 409, 439, 446, 471, 472, 474, 482, 483, 489, 513, 553, 595, 598, 616, 623, 624, 625, 671, 672, 731, 745, 766, 767, 768, 814, 828, 829, 865, 866, 868, 877, 967, 972, 977, 983, 986, 990, 992, 997, 998, 1013, 1018, 1019, 1020, 1031, 1032], "condition": [12, 27, 198, 397, 401, 746, 970], "connect": [12, 39, 44, 47, 51, 54, 62, 66, 67, 371, 373, 382, 386, 401, 430, 434, 441, 451, 452, 574, 575, 684, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 974, 979, 981, 989, 1022, 1031], "edge_model": 12, "graphicallassocv": [12, 82, 401, 460, 462, 463, 464, 465, 467, 1026, 1030, 1032, 1034], "seri": [12, 20, 82, 117, 167, 170, 180, 198, 219, 237, 241, 264, 308, 315, 319, 365, 368, 378, 386, 399, 478, 479, 480, 481, 485, 489, 490, 491, 493, 494, 499, 530, 679, 683, 806, 904, 967, 972, 973, 977, 979, 990, 996, 1021, 1024, 1025, 1026, 1030, 1033], "rather": [12, 53, 82, 113, 162, 168, 198, 199, 212, 305, 306, 344, 345, 355, 360, 369, 373, 375, 378, 379, 381, 384, 385, 386, 387, 399, 403, 404, 406, 407, 409, 437, 450, 452, 554, 570, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 618, 635, 636, 641, 642, 649, 650, 651, 652, 769, 799, 819, 821, 822, 851, 888, 889, 900, 925, 970, 972, 973, 976, 978, 979, 983, 997, 1006, 1009, 1018, 1019, 1020, 1021, 1025, 1026, 1027, 1028, 1033, 1034], "former": [12, 346, 406, 407, 554, 787, 794, 803, 978, 1018, 1024, 1027], "recoveri": [12, 82, 182, 197, 401], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 321, 353, 381], "trust": [12, 26, 71, 72, 81, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 321, 353, 377, 387, 393, 397, 1006, 1032], "unabl": [12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 167, 168, 169, 170, 179, 182, 198, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 321, 353, 361, 868, 986, 1027], "render": [12, 26, 53, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 193, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 321, 353, 373, 377, 378, 379, 386, 540, 578, 620, 689, 691, 865, 877, 900, 902, 975, 992, 1031], "nbviewer": [12, 26, 71, 72, 109, 115, 117, 118, 126, 127, 130, 133, 144, 155, 168, 169, 170, 179, 228, 229, 230, 234, 238, 239, 240, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 316, 321, 353], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 55, 58, 60, 132, 169, 171, 198, 220, 234, 250, 254, 307, 321, 345, 353, 368, 378, 386, 387, 390, 399, 405, 406, 407, 423, 435, 484, 577, 578, 580, 583, 707, 776, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 861, 862, 898, 899, 972, 973, 975, 976, 977, 986, 992, 993, 994, 996, 1002, 1005, 1006, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1034], "amongst": [12, 992], "indic": [12, 19, 20, 25, 26, 27, 48, 59, 60, 66, 75, 86, 95, 115, 155, 158, 163, 167, 169, 195, 221, 231, 234, 253, 261, 262, 265, 266, 279, 292, 319, 320, 323, 344, 345, 346, 353, 360, 368, 373, 374, 375, 377, 381, 382, 384, 386, 395, 396, 397, 399, 401, 403, 404, 406, 407, 409, 410, 414, 426, 429, 433, 439, 440, 441, 442, 444, 445, 446, 449, 453, 456, 461, 476, 497, 498, 500, 501, 502, 512, 521, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 570, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 609, 616, 617, 618, 619, 621, 622, 628, 636, 639, 640, 642, 643, 644, 650, 652, 654, 662, 664, 671, 672, 679, 681, 683, 685, 692, 696, 701, 702, 707, 708, 709, 713, 716, 717, 718, 719, 722, 726, 727, 728, 729, 742, 759, 766, 767, 768, 769, 771, 772, 773, 775, 776, 778, 779, 780, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 852, 855, 859, 861, 869, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 904, 908, 909, 914, 929, 939, 940, 966, 971, 972, 973, 976, 977, 978, 979, 980, 983, 984, 986, 987, 990, 991, 997, 1002, 1006, 1009, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1028, 1029, 1031, 1033, 1034], "reflect": [12, 40, 46, 47, 80, 92, 96, 120, 169, 170, 198, 216, 268, 283, 345, 369, 372, 377, 386, 388, 396, 439, 445, 973, 976, 982, 984, 1010, 1019, 1027], "properti": [12, 25, 157, 158, 200, 215, 245, 281, 306, 353, 359, 362, 366, 373, 375, 389, 396, 397, 399, 401, 404, 406, 408, 409, 414, 431, 434, 440, 441, 442, 453, 454, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 579, 580, 582, 583, 586, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 621, 635, 641, 644, 649, 651, 663, 664, 693, 694, 697, 785, 788, 789, 799, 816, 817, 847, 848, 861, 862, 863, 869, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 968, 971, 972, 973, 976, 977, 979, 982, 986, 989, 991, 992, 993, 997, 1002, 1023, 1027, 1028, 1031, 1032], "impact": [12, 25, 36, 37, 68, 75, 143, 165, 167, 168, 169, 200, 216, 253, 306, 316, 345, 355, 359, 360, 366, 384, 387, 397, 399, 404, 436, 438, 525, 529, 536, 579, 655, 656, 657, 661, 663, 665, 666, 667, 681, 780, 785, 788, 789, 799, 811, 828, 829, 865, 877, 911, 925, 947, 950, 965, 975, 983, 991, 1025, 1028, 1031], "affinity_propag": [12, 44], "covariance_": [12, 34, 80, 82, 458, 459, 460, 461, 462, 463, 464, 465, 538, 539, 970, 1025], "n_label": [12, 92, 235, 386, 476, 512, 702, 709, 714, 727, 728, 742, 744, 778, 779, 805, 976, 1024, 1026], "lai": [12, 306, 982], "canva": [12, 16], "manifold": [12, 39, 52, 67, 222, 223, 224, 225, 279, 311, 315, 316, 321, 362, 366, 386, 399, 404, 406, 491, 514, 519, 533, 538, 555, 837, 849, 858, 881, 911, 979, 1012, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "dens": [12, 55, 165, 176, 217, 315, 316, 323, 359, 382, 386, 399, 404, 406, 408, 432, 435, 436, 438, 453, 456, 485, 512, 513, 523, 524, 533, 555, 574, 575, 596, 597, 618, 641, 646, 647, 648, 655, 657, 661, 662, 665, 666, 667, 676, 677, 678, 681, 682, 748, 749, 755, 767, 778, 845, 846, 853, 860, 861, 863, 865, 866, 867, 868, 877, 878, 879, 880, 881, 888, 889, 890, 891, 893, 894, 926, 947, 950, 966, 969, 972, 973, 976, 977, 979, 982, 986, 988, 989, 990, 991, 992, 1018, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "eigen_solv": [12, 44, 46, 66, 219, 220, 404, 441, 451, 524, 677, 678, 680, 682, 684, 973, 1019, 1028, 1031, 1032, 1033], "arpack": [12, 19, 44, 46, 66, 220, 404, 440, 441, 442, 451, 524, 530, 533, 677, 678, 680, 682, 684, 973, 1024, 1025, 1030], "don": [12, 54, 70, 121, 168, 220, 234, 235, 259, 279, 322, 328, 332, 339, 344, 345, 359, 367, 373, 375, 377, 379, 381, 384, 385, 390, 400, 407, 635, 641, 816, 896, 897, 898, 899, 940, 965, 972, 975, 977, 980, 982, 990, 999, 1011, 1022, 1027, 1034], "control": [12, 16, 61, 99, 100, 116, 136, 155, 157, 182, 199, 206, 230, 231, 260, 262, 281, 312, 314, 349, 351, 352, 359, 360, 366, 369, 373, 375, 378, 381, 384, 386, 389, 393, 398, 399, 402, 403, 404, 405, 408, 409, 423, 429, 438, 443, 460, 461, 467, 520, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 582, 583, 585, 603, 608, 614, 616, 621, 623, 628, 630, 631, 635, 636, 638, 639, 640, 641, 643, 644, 645, 661, 663, 665, 666, 671, 672, 676, 681, 690, 698, 783, 784, 785, 787, 788, 789, 790, 791, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 814, 815, 818, 819, 822, 845, 846, 867, 869, 880, 881, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 902, 942, 963, 965, 972, 973, 975, 976, 977, 979, 982, 983, 986, 988, 990, 991, 992, 996, 997, 998, 1009, 1013, 1018, 1020, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "neighbor": [12, 31, 39, 44, 47, 60, 128, 131, 138, 162, 163, 220, 221, 223, 227, 236, 237, 283, 284, 285, 286, 288, 289, 290, 292, 293, 313, 315, 316, 344, 362, 365, 370, 382, 386, 389, 399, 405, 406, 407, 410, 413, 422, 430, 433, 434, 437, 439, 441, 446, 447, 450, 452, 485, 491, 493, 552, 559, 591, 596, 597, 616, 617, 620, 677, 678, 679, 680, 681, 682, 685, 769, 785, 814, 848, 849, 868, 884, 892, 950, 977, 982, 997, 998, 1005, 1010, 1012, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025], "node": [12, 41, 120, 124, 182, 311, 349, 353, 381, 382, 399, 401, 404, 406, 430, 431, 434, 452, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 639, 643, 645, 671, 672, 681, 828, 829, 896, 897, 898, 899, 900, 902, 930, 944, 979, 981, 982, 983, 992, 1021, 1022, 1023, 1024, 1025, 1027, 1030, 1031, 1032, 1033], "plane": [12, 210, 232, 285, 330, 333, 335, 336, 341, 370, 441, 451, 970, 972, 991, 1009], "node_position_model": 12, "locallylinearembed": [12, 219, 220, 221, 315, 677, 679, 681, 973, 979, 1023, 1024, 1032, 1033, 1034], "n_neighbor": [12, 44, 62, 67, 131, 162, 219, 220, 221, 223, 227, 237, 279, 281, 282, 285, 286, 287, 288, 291, 306, 311, 313, 344, 406, 441, 591, 596, 597, 617, 677, 678, 680, 682, 685, 830, 831, 832, 834, 836, 837, 841, 883, 884, 966, 973, 979, 982, 989, 1025, 1032, 1034], "output": [12, 14, 16, 25, 27, 37, 53, 59, 98, 108, 113, 119, 120, 130, 134, 138, 139, 150, 158, 162, 163, 165, 168, 194, 226, 234, 241, 242, 247, 253, 257, 259, 262, 266, 268, 269, 279, 302, 305, 307, 308, 311, 314, 315, 345, 346, 348, 353, 354, 366, 367, 368, 370, 373, 375, 379, 381, 384, 385, 386, 397, 398, 399, 400, 402, 403, 406, 407, 408, 415, 420, 422, 426, 430, 431, 432, 434, 435, 436, 438, 439, 441, 448, 449, 451, 452, 453, 454, 455, 456, 457, 471, 472, 473, 474, 477, 480, 481, 482, 483, 484, 485, 486, 492, 494, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 600, 616, 617, 618, 619, 620, 621, 622, 624, 627, 628, 629, 630, 631, 635, 636, 639, 641, 642, 643, 646, 647, 649, 650, 651, 652, 655, 656, 657, 660, 662, 663, 665, 667, 668, 670, 671, 672, 673, 677, 678, 679, 681, 683, 685, 689, 702, 703, 710, 711, 712, 714, 716, 723, 730, 733, 734, 736, 738, 739, 740, 741, 742, 744, 749, 755, 760, 773, 776, 783, 784, 787, 788, 789, 790, 791, 797, 799, 800, 801, 802, 803, 804, 805, 809, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 831, 832, 833, 837, 838, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 876, 877, 880, 881, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 909, 911, 914, 925, 926, 932, 935, 943, 963, 965, 966, 968, 970, 972, 973, 976, 977, 978, 979, 980, 983, 986, 991, 998, 1002, 1003, 1005, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "edg": [12, 26, 46, 66, 98, 120, 222, 266, 381, 386, 396, 399, 401, 442, 550, 551, 574, 575, 577, 578, 580, 783, 825, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 853, 901, 986, 989, 1000, 1024, 1026, 1029, 1032], "displai": [12, 25, 27, 34, 37, 46, 48, 60, 71, 81, 82, 85, 86, 89, 95, 116, 121, 126, 127, 130, 165, 168, 169, 183, 185, 202, 216, 226, 227, 237, 242, 248, 256, 260, 261, 266, 273, 289, 307, 312, 313, 335, 350, 359, 373, 376, 380, 382, 389, 400, 404, 407, 408, 427, 453, 456, 457, 485, 530, 553, 619, 620, 621, 647, 676, 686, 687, 689, 690, 691, 702, 707, 770, 777, 785, 791, 799, 807, 814, 848, 849, 861, 863, 868, 886, 893, 900, 901, 902, 916, 942, 963, 976, 980, 996, 1013, 1027, 1029, 1030, 1032, 1033], "strength": [12, 130, 157, 198, 202, 260, 311, 359, 402, 406, 435, 556, 557, 632, 637, 638, 641, 647, 648, 658, 661, 662, 663, 664, 665, 667, 669, 676, 771, 845, 846, 888, 889, 893, 894, 965, 972, 979, 982, 990, 991], "plan": [12, 367, 371, 373, 374, 387, 986, 1021], "fair": [12, 406, 679, 683, 817, 977, 1000], "crucial": [12, 167, 254, 359, 372, 373, 387, 399, 409, 991], "challeng": [12, 130, 150, 169, 177, 216, 227, 361, 368, 369, 399, 401, 451, 461, 976, 982, 1000, 1002], "overlap": [12, 37, 55, 110, 124, 146, 222, 246, 345, 371, 396, 399, 403, 406, 407, 576, 778, 779, 786, 790, 792, 793, 794, 795, 803, 973, 986, 1024], "heurist": [12, 14, 122, 344, 360, 399, 408, 438, 441, 450, 451, 497, 498, 526, 528, 535, 665, 666, 667, 680, 684, 788, 789, 890, 891, 892, 893, 894, 913, 973, 974, 979, 990, 992, 1000, 1009, 1018, 1019, 1023, 1027, 1030, 1031], "direct": [12, 85, 86, 90, 95, 97, 101, 104, 147, 204, 244, 250, 256, 288, 298, 306, 331, 336, 371, 373, 374, 377, 381, 387, 389, 399, 402, 404, 407, 408, 441, 451, 460, 461, 467, 523, 530, 538, 577, 578, 580, 591, 630, 677, 837, 970, 971, 972, 977, 979, 981, 997, 1010, 1018, 1021], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 58, 61, 82, 89, 95, 98, 154, 163, 189, 210, 214, 236, 283, 285, 288, 289, 293, 298, 330, 331, 335, 336, 337, 341, 362, 365, 370, 382, 386, 399, 405, 406, 410, 413, 422, 433, 435, 437, 439, 441, 446, 450, 451, 485, 491, 493, 596, 597, 616, 617, 619, 620, 624, 677, 678, 680, 681, 685, 778, 779, 785, 814, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 848, 849, 853, 868, 950, 973, 982, 991, 997, 998, 1005, 1013, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1030], "along": [12, 13, 56, 59, 66, 86, 117, 123, 185, 198, 232, 234, 263, 308, 311, 345, 346, 355, 373, 377, 379, 381, 382, 386, 389, 390, 393, 396, 404, 406, 407, 408, 409, 411, 522, 539, 576, 600, 601, 619, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 665, 667, 670, 671, 672, 673, 674, 675, 767, 768, 778, 785, 799, 857, 858, 861, 862, 865, 866, 867, 868, 873, 874, 875, 877, 878, 879, 904, 927, 951, 957, 965, 972, 979, 986, 989, 1000, 1018, 1023, 1024, 1026, 1030, 1031], "linecollect": [12, 222, 230, 621], "facecolor": [12, 16, 26, 34, 45, 60, 95, 102, 112, 139, 158, 219, 235, 259, 286, 303, 329, 332, 335, 336, 338], "partial_correl": 12, "precision_": [12, 82, 458, 459, 460, 461, 462, 463, 464, 465], "sqrt": [12, 80, 81, 82, 98, 101, 105, 114, 136, 177, 179, 222, 224, 239, 244, 245, 246, 249, 250, 259, 336, 399, 406, 407, 409, 452, 458, 459, 460, 461, 462, 463, 464, 465, 527, 529, 536, 546, 547, 548, 549, 553, 554, 608, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 719, 751, 752, 757, 868, 881, 896, 897, 898, 899, 968, 972, 973, 976, 978, 988, 1032], "diag": [12, 82, 158, 246, 249, 404, 409, 521, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 783, 784, 972, 1033], "newaxi": [12, 13, 19, 24, 42, 82, 105, 111, 151, 179, 188, 194, 199, 200, 201, 203, 204, 215, 230, 232, 273, 284, 291, 339, 351, 352, 396, 525, 972], "ab": [12, 17, 40, 75, 99, 106, 112, 120, 130, 143, 147, 171, 185, 189, 209, 211, 214, 216, 222, 259, 301, 329, 341, 399, 527, 529, 536, 616, 734, 828, 829, 863, 976], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 60, 61, 102], "start_idx": [12, 222], "end_idx": [12, 222], "sequenc": [12, 119, 186, 222, 375, 386, 400, 403, 404, 406, 407, 492, 501, 550, 551, 558, 559, 570, 571, 577, 578, 580, 635, 785, 788, 796, 814, 872, 928, 929, 939, 947, 950, 996, 1018, 1021, 1023, 1024], "line0": [12, 222], "linen": [12, 222], "x0": [12, 34, 190, 207, 222, 301, 328, 386, 420, 453, 556, 557, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 851, 852, 853, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869], "y0": [12, 222], "y1": [12, 91, 112, 222, 498, 705, 977, 978], "xm": [12, 222], "ym": [12, 222], "segment": [12, 36, 47, 68, 165, 222, 230, 368, 381, 399, 407, 441, 451, 497, 498, 680, 844, 976, 996, 1000, 1026, 1028, 1030], "stop": [12, 17, 44, 62, 108, 116, 134, 155, 157, 165, 169, 176, 200, 217, 312, 373, 375, 381, 382, 386, 399, 404, 406, 408, 429, 430, 432, 434, 436, 438, 441, 443, 451, 452, 460, 461, 467, 471, 472, 473, 485, 493, 497, 498, 504, 509, 521, 525, 526, 527, 528, 529, 532, 534, 535, 536, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 560, 577, 578, 580, 591, 606, 616, 633, 634, 635, 637, 638, 641, 645, 647, 648, 655, 656, 657, 658, 660, 665, 666, 667, 669, 680, 681, 684, 703, 783, 784, 814, 845, 846, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 930, 950, 965, 972, 980, 981, 991, 992, 997, 998, 1000, 1013, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034], "lc": [12, 222, 230], "zorder": [12, 34, 58, 97, 127, 139, 151, 159, 188, 196, 220, 222, 230, 233, 244, 312, 335, 336], "hot_r": [12, 301], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 153, 156, 177, 182, 184, 189, 222, 244, 245, 246, 248, 250, 256, 260, 284, 301, 331, 345, 379, 382, 386, 399, 407, 408, 431, 432, 436, 448, 449, 453, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 478, 520, 523, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 578, 579, 580, 586, 632, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 661, 663, 665, 667, 670, 673, 674, 675, 679, 681, 682, 683, 758, 825, 860, 875, 888, 890, 893, 958, 959, 969, 972, 974, 976, 986, 990, 1021, 1023, 1025, 1029], "set_arrai": [12, 222, 230], "set_linewidth": [12, 222, 230], "add_collect": [12, 222, 230], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 58, 71, 72, 115, 117, 121, 144, 147, 155, 162, 167, 168, 169, 170, 198, 216, 238, 241, 245, 246, 250, 254, 257, 258, 259, 260, 262, 270, 271, 279, 301, 306, 307, 308, 315, 319, 320, 345, 346, 368, 370, 371, 373, 375, 377, 382, 384, 386, 396, 400, 403, 404, 406, 407, 414, 432, 436, 437, 438, 439, 440, 442, 443, 446, 448, 449, 453, 456, 492, 498, 546, 547, 548, 549, 553, 554, 555, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 606, 621, 622, 629, 686, 693, 694, 701, 705, 707, 719, 726, 745, 767, 768, 774, 776, 780, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 814, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 861, 896, 897, 898, 899, 929, 947, 950, 955, 956, 976, 978, 979, 980, 990, 992, 996, 1009, 1011, 1018, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "dx": [12, 13, 515], "dy": 12, "this_dx": 12, "argmin": [12, 122, 258, 375, 401, 520, 526, 534, 535, 674, 767, 768, 992], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 62, 102, 227, 244, 295, 303], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 56, 60, 67, 90, 91, 92, 102, 112, 119, 126, 128, 129, 131, 132, 139, 142, 151, 152, 154, 158, 169, 181, 190, 200, 207, 210, 211, 212, 231, 232, 233, 235, 244, 247, 259, 262, 273, 282, 285, 286, 287, 290, 295, 303, 304, 306, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 341, 350, 351, 352, 620], "ptp": 12, "03": [12, 52, 68, 76, 80, 85, 95, 134, 155, 160, 164, 168, 179, 216, 225, 231, 242, 244, 250, 260, 293, 309, 320, 345, 370, 407, 736, 785, 972, 976], "186": [12, 15, 198, 298, 379, 776, 976], "plot_stock_market": [12, 15], "parallel": [13, 108, 114, 116, 119, 134, 165, 169, 200, 260, 312, 313, 315, 336, 353, 358, 365, 373, 374, 376, 377, 384, 386, 400, 408, 410, 411, 426, 433, 435, 437, 438, 439, 441, 446, 447, 450, 453, 456, 461, 484, 520, 522, 523, 524, 526, 528, 530, 531, 532, 534, 535, 537, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 578, 583, 591, 599, 621, 623, 628, 647, 677, 678, 679, 680, 681, 682, 683, 762, 766, 769, 785, 788, 789, 791, 796, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 847, 850, 883, 884, 944, 946, 997, 1006, 1011, 1013, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1033, 1034], "acquir": [13, 118, 261, 1030], "angl": [13, 34, 98, 147, 244, 245, 246, 249, 250, 370, 404, 520, 526, 528, 531, 532, 534, 535, 537, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 667, 671, 672, 673, 674, 675, 681, 973, 974, 998, 1013, 1018], "Such": [13, 126, 150, 155, 167, 177, 182, 187, 199, 262, 344, 386, 387, 403, 404, 406, 544, 545, 645, 966, 976, 979, 986, 992, 1009, 1028, 1033], "ct": [13, 158, 241, 400, 453, 455, 456], "cellular": 13, "materi": [13, 387, 570, 878, 879, 995], "haar": 13, "wavelet": [13, 105, 404], "sparsiti": [13, 82, 165, 176, 182, 191, 213, 214, 217, 233, 345, 359, 386, 401, 404, 406, 408, 490, 491, 516, 520, 526, 527, 528, 529, 532, 534, 535, 536, 635, 641, 646, 647, 665, 667, 710, 711, 712, 857, 863, 868, 873, 969, 972, 979, 986, 1005, 1010, 1020], "oper": [13, 19, 158, 165, 233, 252, 256, 266, 275, 346, 359, 360, 370, 371, 373, 376, 379, 384, 386, 387, 389, 393, 395, 403, 404, 406, 407, 408, 412, 437, 450, 457, 464, 471, 472, 473, 474, 493, 522, 523, 530, 540, 541, 555, 561, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 605, 610, 613, 619, 624, 632, 647, 678, 682, 691, 695, 696, 697, 715, 762, 769, 770, 776, 777, 804, 814, 817, 828, 829, 851, 855, 860, 871, 872, 886, 893, 896, 927, 944, 949, 972, 979, 986, 991, 996, 1000, 1009, 1022, 1024, 1025, 1026, 1028, 1029, 1034], "fidel": 13, "penal": [13, 30, 82, 130, 182, 187, 191, 198, 214, 216, 306, 339, 399, 401, 404, 408, 458, 459, 460, 461, 462, 463, 464, 465, 467, 636, 641, 642, 650, 652, 665, 694, 704, 722, 774, 781, 861, 888, 895, 972, 976, 978, 980, 990, 991, 1009], "account": [13, 55, 97, 104, 155, 162, 168, 216, 234, 259, 288, 339, 341, 345, 359, 369, 373, 386, 387, 393, 399, 402, 403, 404, 406, 407, 452, 556, 557, 616, 617, 619, 621, 622, 638, 662, 668, 693, 696, 716, 717, 718, 726, 731, 744, 771, 772, 775, 776, 786, 790, 803, 862, 968, 970, 974, 976, 977, 978, 979, 986, 990, 992, 1023, 1025, 1026, 1027, 1030, 1031, 1033], "call": [13, 17, 46, 48, 50, 54, 71, 92, 115, 122, 144, 150, 154, 156, 158, 167, 169, 186, 198, 199, 216, 234, 238, 240, 241, 259, 260, 268, 273, 274, 279, 281, 306, 308, 313, 314, 344, 345, 346, 353, 359, 360, 361, 368, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 389, 390, 397, 399, 400, 401, 402, 403, 404, 406, 407, 409, 411, 421, 429, 432, 435, 436, 438, 439, 440, 441, 442, 443, 446, 449, 451, 453, 454, 457, 458, 463, 471, 472, 473, 477, 480, 481, 484, 486, 492, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 566, 571, 572, 574, 575, 577, 578, 580, 586, 591, 596, 597, 599, 600, 603, 606, 609, 616, 617, 618, 619, 620, 621, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 678, 679, 680, 681, 682, 683, 684, 686, 689, 690, 693, 720, 730, 743, 759, 762, 766, 767, 768, 769, 779, 783, 784, 785, 787, 788, 789, 790, 791, 797, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 837, 839, 844, 845, 846, 847, 848, 851, 852, 853, 855, 857, 858, 860, 865, 868, 869, 872, 877, 878, 879, 880, 881, 885, 888, 889, 890, 891, 893, 894, 897, 899, 915, 919, 924, 925, 936, 942, 943, 944, 947, 950, 960, 965, 966, 968, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 984, 986, 988, 989, 991, 992, 996, 1000, 1002, 1006, 1009, 1010, 1011, 1013, 1015, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 56, 57, 61, 62, 66, 68, 79, 85, 95, 97, 109, 110, 111, 112, 116, 165, 174, 185, 187, 201, 214, 221, 223, 226, 230, 237, 242, 245, 246, 247, 250, 256, 259, 268, 279, 285, 286, 288, 292, 301, 303, 306, 311, 312, 313, 316, 330, 344, 345, 355, 359, 361, 366, 367, 368, 369, 370, 373, 374, 375, 376, 381, 382, 385, 386, 388, 395, 396, 398, 399, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 458, 463, 464, 467, 471, 472, 473, 477, 492, 500, 501, 502, 503, 504, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 536, 537, 542, 543, 544, 545, 548, 549, 552, 580, 592, 593, 599, 600, 624, 626, 628, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 693, 694, 697, 706, 708, 723, 725, 731, 762, 766, 767, 779, 781, 783, 784, 816, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 844, 849, 853, 855, 868, 872, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 908, 924, 925, 927, 941, 945, 951, 966, 968, 971, 973, 974, 976, 978, 981, 982, 986, 989, 990, 991, 995, 996, 997, 998, 1000, 1002, 1005, 1006, 1008, 1010, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "computation": [13, 78, 95, 116, 122, 130, 150, 279, 344, 358, 374, 398, 399, 400, 403, 404, 406, 409, 527, 621, 622, 660, 751, 785, 787, 788, 789, 799, 811, 972, 973, 975, 983, 984, 988, 1010, 1013, 1022], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 68, 79, 94, 96, 97, 107, 116, 123, 128, 133, 141, 148, 149, 160, 165, 170, 180, 182, 184, 186, 189, 196, 213, 218, 221, 225, 226, 230, 242, 246, 252, 254, 256, 275, 277, 295, 303, 305, 306, 311, 313, 324, 328, 343, 345, 347, 355, 368, 370, 386, 397, 401, 402, 404, 408, 426, 427, 432, 435, 436, 438, 477, 493, 501, 503, 504, 511, 514, 530, 538, 539, 542, 553, 554, 570, 571, 577, 578, 579, 580, 595, 597, 599, 600, 604, 611, 614, 620, 628, 632, 647, 661, 677, 678, 679, 680, 681, 693, 726, 731, 767, 776, 785, 788, 791, 799, 801, 814, 823, 826, 830, 845, 849, 857, 858, 860, 864, 865, 866, 868, 873, 874, 875, 876, 877, 878, 879, 888, 890, 891, 893, 894, 896, 965, 970, 973, 976, 978, 979, 982, 991, 1015], "l2": [13, 30, 40, 82, 85, 165, 176, 182, 183, 189, 198, 209, 213, 214, 216, 217, 260, 279, 301, 323, 344, 345, 375, 382, 384, 399, 401, 404, 407, 430, 434, 439, 446, 513, 527, 529, 536, 547, 550, 551, 554, 578, 579, 580, 632, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 661, 665, 667, 669, 670, 675, 676, 677, 723, 738, 749, 750, 766, 767, 768, 799, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 845, 846, 860, 868, 875, 888, 889, 893, 894, 895, 897, 899, 959, 965, 969, 972, 974, 979, 980, 986, 990, 992, 1009, 1011, 1020, 1022, 1023, 1025, 1027], "produc": [13, 25, 26, 44, 57, 70, 98, 123, 124, 125, 126, 182, 265, 298, 322, 355, 368, 369, 373, 375, 378, 386, 387, 399, 400, 403, 404, 406, 429, 432, 435, 441, 508, 525, 548, 552, 570, 577, 582, 583, 621, 622, 787, 788, 789, 797, 802, 805, 809, 853, 863, 890, 893, 967, 968, 972, 974, 975, 976, 979, 982, 983, 987, 989, 990, 991, 1002, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 55, 60, 62, 66, 73, 80, 94, 95, 100, 107, 110, 112, 115, 118, 128, 163, 165, 169, 170, 174, 176, 199, 217, 220, 235, 246, 259, 262, 268, 269, 301, 303, 306, 313, 322, 326, 331, 335, 336, 342, 344, 355, 359, 369, 370, 375, 378, 381, 384, 386, 397, 399, 400, 401, 404, 406, 407, 409, 453, 501, 508, 522, 527, 529, 530, 536, 538, 570, 577, 578, 580, 599, 620, 627, 635, 636, 662, 665, 666, 679, 683, 713, 720, 733, 734, 736, 741, 778, 804, 820, 821, 847, 848, 890, 892, 893, 898, 899, 965, 966, 968, 970, 972, 973, 975, 982, 983, 986, 990, 991, 1007, 1009, 1010, 1018, 1021, 1023, 1024, 1028, 1030, 1031, 1034], "central": [13, 200, 399, 982, 996], "emmanuel": [13, 66, 1018, 1025, 1026, 1027], "gouillart": [13, 66, 1018], "nsup": 13, "ndimag": [13, 46, 47, 54, 298, 1010], "_weight": [13, 216], "orig": [13, 286], "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 60, 62, 66, 81, 102, 120, 122, 139, 167, 188, 189, 216, 222, 233, 237, 270, 279, 308, 407, 966, 972, 1025], "hstack": [13, 33, 34, 42, 132, 143, 224, 236, 254, 334, 403, 847], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 139, 335], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 302, 334, 624], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 122, 132, 345, 828, 829], "mask": [13, 42, 66, 118, 198, 206, 257, 258, 323, 382, 386, 400, 406, 458, 463, 550, 551, 570, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 596, 597, 618, 619, 621, 622, 638, 660, 785, 788, 789, 799, 948, 966, 983, 1018, 1021, 1023, 1024, 1026, 1028], "logical_and": [13, 123], "proj_oper": 13, "coo_matrix": [13, 184, 441, 574, 575, 947, 950], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 58, 62, 103, 113, 127, 129, 142, 177, 182, 221, 222, 227, 233, 234, 273, 291, 312, 313, 323, 324, 338, 339, 345, 351, 352, 382, 390, 533, 693, 694, 704, 745, 769, 774, 880, 881, 883, 884, 885, 988, 1002, 1018, 1029, 1030], "gaussian_filt": [13, 46, 47, 54, 1010], "sigma": [13, 46, 47, 54, 80, 103, 123, 257, 259, 396, 401, 404, 406, 603, 638, 970, 972, 974, 978, 981, 1010], "logical_xor": [13, 154, 337], "binary_eros": 13, "128": [13, 14, 118, 145, 148, 198, 359, 525], "proj": [13, 638], "randn": [13, 33, 34, 39, 54, 65, 66, 80, 81, 98, 103, 126, 142, 150, 154, 167, 170, 187, 192, 193, 197, 211, 212, 215, 245, 248, 249, 254, 266, 268, 269, 273, 285, 286, 308, 312, 313, 330, 336, 337, 339, 341, 375, 378, 632, 659, 661, 667, 806, 891, 894], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 58, 71, 74, 78, 82, 87, 103, 116, 119, 120, 122, 123, 135, 140, 141, 145, 147, 148, 168, 169, 176, 182, 186, 198, 200, 216, 217, 246, 247, 249, 252, 256, 259, 260, 261, 263, 265, 268, 273, 275, 283, 298, 300, 302, 307, 309, 311, 313, 322, 331, 339, 362, 368, 373, 375, 382, 384, 385, 386, 390, 393, 394, 397, 400, 401, 404, 406, 407, 408, 409, 426, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 482, 490, 491, 493, 504, 530, 556, 557, 564, 582, 583, 586, 591, 595, 598, 631, 632, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 675, 690, 691, 695, 702, 716, 729, 773, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 822, 848, 849, 853, 868, 869, 886, 888, 890, 893, 931, 975, 976, 979, 980, 984, 986, 991, 992, 996, 997, 998, 1000, 1002, 1005, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "lassocv": [13, 130, 136, 168, 182, 187, 406, 408, 640, 641, 643, 644, 645, 652, 673, 972, 1006, 1018, 1021, 1025, 1028, 1029, 1031, 1032], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 58, 82, 89, 95, 98, 154, 157, 165, 176, 189, 214, 217, 230, 236, 268, 283, 291, 298, 320, 331, 337, 409, 624, 634, 642, 652, 661, 673, 689, 696, 831, 839, 849, 863, 867, 967, 972, 976, 986, 1025, 1030], "133": [13, 56, 110], "wspace": [13, 14, 39, 44, 45, 62, 80, 95, 110, 112, 198, 216, 227, 244, 246, 247, 250, 284, 292, 320, 328], "031": [13, 15, 370], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 72, 379, 398, 407, 524, 527, 533, 536, 1012, 1013, 1018, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035], "latentdirichletalloc": [14, 361, 378, 404, 996, 1023, 1025, 1032, 1033], "corpu": [14, 345, 346, 368, 404, 577, 578, 579, 580, 1011, 1019], "frobeniu": [14, 98, 432, 436, 448, 458, 459, 460, 461, 462, 463, 464, 465, 520, 526, 527, 529, 534, 535, 536, 972, 1025], "kullback": [14, 219, 404, 527, 529, 536, 681, 973, 1025], "leibler": [14, 219, 404, 527, 529, 536, 681, 973, 1025], "diverg": [14, 122, 219, 224, 284, 527, 529, 536, 681, 844, 973, 975, 976, 981, 983, 1025, 1026, 1031], "probabilist": [14, 27, 30, 82, 94, 107, 149, 150, 153, 157, 160, 165, 344, 386, 397, 405, 406, 426, 462, 465, 521, 523, 524, 530, 548, 577, 578, 599, 611, 632, 634, 665, 692, 729, 785, 810, 855, 890, 891, 893, 894, 969, 970, 972, 975, 976, 981, 986, 991, 992, 996, 1000, 1018, 1021, 1025], "semant": [14, 344, 345, 386, 533, 1011, 1012, 1013, 1020], "runnabl": [14, 377, 378], "coupl": [14, 52, 53, 55, 220, 367, 368, 396, 397, 399, 408, 578, 894, 965, 991], "ten": [14, 19, 110, 116, 147, 220, 250, 368, 370, 406, 509, 893, 1027], "polynomi": [14, 162, 165, 173, 175, 176, 198, 204, 217, 239, 259, 273, 313, 314, 328, 335, 338, 365, 369, 441, 480, 609, 628, 629, 630, 632, 661, 753, 762, 763, 814, 849, 858, 860, 863, 867, 888, 890, 891, 892, 893, 894, 971, 991, 998, 1013, 1030, 1031], "lda": [14, 33, 34, 94, 107, 165, 288, 355, 370, 395, 493, 525, 530, 538, 539, 837, 996, 998, 1012, 1013, 1023], "proport": [14, 26, 40, 146, 184, 198, 205, 211, 227, 262, 286, 289, 341, 359, 368, 397, 399, 401, 403, 404, 406, 407, 427, 428, 435, 458, 463, 504, 538, 539, 544, 546, 548, 549, 550, 551, 552, 553, 572, 573, 577, 580, 616, 621, 647, 648, 655, 656, 657, 663, 664, 665, 667, 685, 690, 701, 786, 787, 788, 789, 802, 805, 814, 834, 845, 846, 862, 888, 889, 890, 893, 894, 896, 898, 900, 902, 914, 965, 975, 976, 979, 982, 990, 991, 992, 1023], "116": [14, 1018], "tf": [14, 19, 231, 344, 345, 346, 368, 404, 510, 533, 577, 578, 579, 580, 827, 835, 860, 965, 974, 978, 986, 996, 1011], "idf": [14, 19, 231, 344, 345, 346, 368, 404, 510, 533, 577, 578, 579, 580, 827, 835, 860, 965, 974, 978, 986, 1011, 1018], "267": [14, 1018], "252": [14, 221, 370, 523, 864, 876], "2000": [14, 26, 40, 50, 75, 96, 103, 121, 174, 247, 250, 259, 295, 315, 345, 368, 370, 399, 400, 406, 411, 441, 451, 522, 523, 548, 678, 680, 682, 731, 776, 783, 834, 864, 876, 973, 976, 982, 988, 1002, 1010], "077": [14, 279], "336": [14, 277, 278, 379, 986], "minibatchnmf": [14, 361, 404, 1032, 1034, 1035], "batch_siz": [14, 19, 42, 64, 95, 98, 99, 345, 404, 438, 523, 525, 526, 527, 528, 535, 844, 845, 846, 928, 929, 942, 1019, 1026, 1029, 1031, 1032], "081": [14, 336, 342, 984], "229": [14, 976], "034": [14, 58, 460], "ensta": [14, 17, 37, 48, 61, 198, 216, 220, 260, 262, 344, 345, 346], "chyi": [14, 1021, 1022, 1023, 1024, 1025], "kwei": [14, 1021, 1022, 1023, 1024, 1025], "yau": [14, 1021, 1022, 1023, 1024, 1025], "chyikwei": 14, "fetch_20newsgroup": [14, 19, 70, 260, 323, 344, 345, 346, 368, 478, 1011, 1023, 1028], "countvector": [14, 323, 346, 368, 378, 400, 404, 407, 478, 525, 571, 578, 579, 580, 1011, 1018, 1020, 1023, 1026, 1027, 1028, 1029, 1030, 1031], "tfidfvector": [14, 19, 70, 260, 344, 368, 404, 407, 478, 577, 578, 579, 1018, 1020, 1026, 1027, 1028, 1031, 1032], "n_top_word": 14, "init": [14, 42, 45, 58, 59, 61, 64, 169, 178, 219, 220, 222, 223, 224, 245, 247, 279, 345, 376, 381, 399, 404, 406, 432, 436, 438, 440, 442, 448, 449, 527, 529, 536, 537, 548, 549, 621, 622, 679, 681, 683, 837, 973, 1018, 1027, 1030, 1032, 1033, 1034], "nndsvda": [14, 404, 527, 529, 536, 1027, 1030], "plot_top_word": 14, "feature_nam": [14, 19, 106, 117, 124, 127, 147, 168, 170, 171, 207, 238, 282, 301, 311, 312, 313, 328, 344, 350, 366, 368, 378, 400, 479, 480, 481, 485, 489, 490, 491, 493, 494, 499, 571, 620, 621, 622, 900, 901, 902, 984, 992, 1034], "flatten": [14, 32, 222, 232, 257, 305, 328, 340, 379, 491, 558, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 837], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 122, 124, 170, 171, 198, 216, 311, 319, 320, 344, 345, 368, 984], "top_featur": 14, "barh": [14, 124, 162, 163, 167, 168, 170, 171, 241, 308, 344, 345, 346], "fontdict": [14, 39], "invert_yaxi": [14, 163, 346], "labels": [14, 305], "set_vis": [14, 283, 289, 301], "filter": [14, 46, 47, 204, 216, 257, 259, 281, 344, 375, 379, 382, 398, 399, 407, 437, 477, 478, 492, 577, 580, 584, 585, 586, 587, 762, 823, 917, 941, 978, 979, 1008, 1011, 1028], "useless": [14, 119, 262, 379, 408, 504, 517, 647, 701, 972, 986, 1027], "earli": [14, 44, 62, 108, 110, 116, 119, 134, 165, 176, 217, 312, 386, 406, 430, 434, 438, 452, 485, 493, 504, 509, 525, 526, 527, 528, 535, 542, 543, 548, 549, 550, 551, 560, 616, 634, 645, 655, 656, 657, 665, 667, 681, 814, 845, 846, 950, 973, 979, 986, 995, 997, 1000, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033], "strip": [14, 216, 345, 359, 367, 368, 485], "header": [14, 70, 260, 344, 345, 368, 371, 407, 477, 478, 785, 788, 789, 799], "footer": [14, 70, 260, 344, 345, 368, 477, 478], "repli": [14, 344, 372, 373, 376], "common": [14, 17, 19, 98, 144, 147, 165, 166, 172, 254, 266, 313, 344, 346, 353, 359, 362, 367, 373, 375, 381, 383, 384, 385, 388, 390, 396, 397, 398, 399, 400, 403, 405, 408, 409, 454, 456, 485, 579, 621, 642, 661, 662, 690, 734, 741, 757, 800, 811, 814, 849, 851, 859, 860, 861, 866, 868, 873, 874, 876, 877, 878, 879, 927, 965, 966, 972, 979, 982, 986, 991, 992, 996, 997, 1000, 1002, 1013, 1018, 1026, 1028, 1029, 1033], "english": [14, 19, 70, 344, 345, 346, 378, 407, 577, 578, 580, 996, 997, 1011, 1031], "occur": [14, 70, 198, 216, 355, 373, 375, 381, 387, 396, 399, 401, 403, 407, 497, 498, 561, 570, 577, 579, 580, 616, 660, 784, 785, 788, 789, 791, 799, 807, 810, 811, 812, 815, 913, 976, 978, 986, 1011, 1018, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 260, 323, 344, 345, 577, 580, 1029], "min_df": [14, 19, 70, 260, 323, 344, 345, 407, 577, 580, 1018, 1020, 1029], "max_featur": [14, 31, 114, 125, 236, 256, 271, 313, 406, 408, 544, 545, 546, 547, 548, 549, 552, 553, 554, 577, 580, 586, 896, 897, 898, 899, 965, 972, 1018, 1020, 1021, 1025, 1026, 1029, 1032], "stop_word": [14, 19, 344, 345, 407, 577, 578, 580], "tfidf": [14, 70, 323, 407, 580, 1011], "tf_vector": 14, "beta_loss": [14, 527, 529, 536, 1025], "alpha_w": [14, 404, 527, 529, 536, 1031], "00005": 14, "alpha_h": [14, 404, 527, 529, 536, 1031], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 168, 170, 314, 344, 345, 346, 368, 375, 386, 400, 407, 415, 420, 422, 431, 432, 434, 436, 438, 453, 456, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 555, 556, 557, 558, 559, 570, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 677, 678, 681, 832, 837, 840, 844, 847, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 986, 1031, 1032, 1033, 1034], "solver": [14, 30, 33, 34, 46, 66, 165, 176, 187, 189, 190, 191, 198, 200, 213, 214, 216, 217, 295, 296, 297, 298, 308, 344, 379, 384, 386, 389, 395, 399, 411, 441, 451, 460, 461, 467, 491, 522, 524, 529, 530, 533, 536, 538, 635, 636, 637, 641, 642, 647, 648, 649, 650, 651, 652, 655, 657, 658, 659, 661, 663, 665, 669, 670, 673, 676, 677, 678, 680, 682, 684, 776, 799, 814, 819, 822, 845, 846, 890, 891, 892, 893, 894, 970, 973, 976, 980, 990, 991, 996, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "mu": [14, 80, 81, 259, 404, 412, 462, 464, 465, 468, 469, 470, 529, 536, 970, 972, 1025, 1028], "mbnmf": 14, "learning_method": [14, 378, 525], "learning_offset": [14, 525], "tf_feature_nam": 14, "522": [14, 15, 265, 275, 889], "plot_topics_extraction_with_nmf_lda": [14, 15], "741": [15, 58, 68], "execut": [15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 134, 140, 148, 160, 162, 164, 172, 175, 182, 187, 217, 225, 233, 242, 251, 264, 275, 278, 293, 299, 309, 317, 325, 342, 347, 354, 360, 373, 379, 393, 395, 399, 404, 410, 432, 450, 785, 791, 799, 807, 809, 810, 811, 812, 815, 833, 942, 943, 986, 989, 1003, 1011, 1020, 1023, 1026], "auto_examples_appl": 15, "00": [15, 22, 28, 32, 35, 68, 76, 80, 83, 87, 93, 98, 107, 134, 140, 148, 155, 160, 164, 168, 169, 172, 175, 189, 216, 217, 225, 231, 242, 251, 257, 260, 275, 278, 293, 298, 299, 309, 317, 319, 320, 325, 342, 345, 347, 354, 367, 370, 379, 399, 406, 407, 702, 704, 776, 785, 799, 812, 897, 972, 976, 986, 988, 990, 1010], "real": [15, 31, 55, 57, 70, 74, 78, 80, 108, 134, 153, 168, 223, 237, 253, 265, 273, 283, 302, 303, 346, 359, 362, 366, 367, 370, 377, 379, 382, 384, 385, 386, 396, 397, 399, 401, 403, 404, 406, 407, 458, 478, 479, 482, 483, 484, 485, 486, 489, 490, 493, 499, 509, 540, 541, 542, 544, 545, 546, 547, 548, 549, 553, 554, 581, 583, 584, 585, 586, 587, 588, 589, 693, 712, 716, 740, 743, 745, 773, 781, 782, 813, 814, 845, 846, 890, 891, 892, 893, 894, 896, 897, 899, 966, 967, 968, 973, 976, 978, 980, 981, 982, 992, 995, 1013, 1018, 1031], "svm_gui": [15, 16, 1009], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 81, 169, 323, 344, 345, 346, 368, 379, 398, 399, 401, 404, 778, 779, 783, 818, 900, 976, 977, 983, 996, 1011], "frontend": [16, 379], "mainli": [16, 27, 53, 113, 150, 268, 359, 375, 397, 600, 978, 983], "intend": [16, 57, 58, 99, 199, 344, 373, 374, 375, 380, 384, 403, 457, 571, 662, 857, 858, 868, 886, 971, 972, 976, 980, 987], "didact": [16, 373, 997], "region": [16, 25, 36, 47, 49, 53, 56, 66, 68, 131, 157, 165, 168, 198, 216, 227, 231, 232, 250, 304, 331, 370, 380, 386, 399, 406, 409, 437, 439, 445, 451, 576, 973, 976, 979, 982, 986, 990, 992, 1010], "induc": [16, 26, 56, 168, 182, 189, 191, 196, 199, 213, 233, 346, 396, 398, 404, 406, 409, 435, 438, 528, 532, 542, 546, 547, 548, 549, 553, 554, 555, 632, 714, 744, 861, 896, 897, 898, 899, 969, 976, 990, 1009], "mous": [16, 367], "button": [16, 373, 381, 1009], "prettenho": 16, "tkagg": 16, "backend": [16, 360, 386, 457, 886, 942, 944, 946, 976, 1021, 1026, 1027, 1028, 1029], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 34, 314, 362, 376, 377, 382, 386, 390, 426, 430, 434, 436, 438, 439, 446, 448, 467, 515, 525, 526, 527, 528, 529, 535, 542, 543, 544, 545, 558, 559, 568, 569, 571, 616, 622, 627, 633, 634, 639, 640, 643, 644, 645, 647, 653, 654, 729, 744, 756, 766, 767, 768, 788, 789, 791, 823, 824, 825, 827, 835, 847, 861, 890, 891, 892, 893, 894, 904, 919, 920, 922, 965, 966, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "tkinter": 16, "tk": 16, "contourset": 16, "dump_svmlight_fil": [16, 1018, 1019, 1023, 1033], "y_min": [16, 31, 34, 58, 90, 112, 119, 128, 139, 152, 232, 295, 303, 324, 335, 336, 624, 626], "y_max": [16, 31, 34, 58, 90, 112, 119, 128, 139, 152, 216, 232, 295, 303, 324, 335, 336, 624, 626], "x_min": [16, 31, 34, 52, 58, 90, 112, 119, 123, 128, 139, 152, 187, 232, 295, 303, 324, 335, 336], "x_max": [16, 31, 34, 52, 58, 90, 112, 119, 128, 139, 152, 232, 295, 303, 324, 335, 336], "notifi": [16, 561, 562, 563, 999, 1016, 1028], "regist": [16, 34, 182, 344, 379, 944, 946], "surfac": [16, 108, 134, 165, 190, 207, 327, 328, 348, 354, 406, 493, 542, 546, 553, 620, 752, 896, 902, 970, 975, 990, 991, 992], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 174, 338, 441, 524, 628, 629, 632, 763, 765, 890, 891, 892, 893, 894, 974, 991], "kernel_map": 16, "hasattr": [16, 44, 56, 62, 82, 119, 216, 231, 295, 303, 344, 386, 937, 1028], "decision_surfac": 16, "delta": [16, 402, 441], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 117, 136, 165, 252, 258, 260, 263, 275, 386, 403, 409, 491, 556, 616, 648, 654, 702, 785, 788, 789, 799, 814, 893, 965, 972, 976, 1025, 1026, 1027], "docstr": [16, 373, 375, 379, 386, 437, 450, 461, 688, 690, 915, 965, 976, 979, 980, 990, 1018, 1025, 1026, 1031, 1032], "set_xlim": [16, 31, 42, 60, 75, 80, 92, 115, 128, 163, 169, 196, 198, 203, 232, 244, 263, 265, 266, 284, 295, 301, 303, 304, 305, 306, 312, 340], "attributeerror": [16, 400, 548, 566, 937, 1010, 1027, 1028, 1030, 1034], "get_tk_widget": 16, "pack": [16, 382, 1026], "fill": [16, 34, 119, 136, 170, 254, 284, 350, 386, 400, 404, 504, 516, 527, 529, 536, 576, 619, 900, 902, 966, 979, 992], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 66, 101, 105, 113, 123, 151, 182, 208, 284, 289, 292, 312, 313, 397, 399, 400, 405, 411, 441, 454, 510, 522, 525, 604, 605, 611, 630, 747, 754, 764, 845, 846, 864, 970, 972, 974, 978, 979, 980, 989, 990, 991, 1009], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 216, 373, 377, 379, 399, 457, 525, 635, 641, 886, 973, 997, 999, 1018, 1023, 1024, 1026, 1031, 1032, 1033], "isinst": [16, 119, 216, 386], "lineset": 16, "support_vector": [16, 329], "place": [16, 60, 228, 238, 283, 359, 371, 373, 374, 375, 378, 380, 387, 397, 407, 409, 430, 434, 435, 471, 472, 473, 504, 570, 579, 617, 619, 620, 756, 769, 783, 955, 956, 996, 1018, 1025, 1028, 1029, 1031], "circl": [16, 60, 100, 128, 129, 139, 224, 235, 286, 289, 296, 301, 303, 321, 352, 369, 377, 381, 399, 441, 451, 503, 511, 752, 991], "dash": [16, 33, 80, 110, 122, 132, 150, 153, 155, 168, 185, 190, 193, 199, 200, 207, 210, 211, 237, 259, 269, 333, 337, 990], "bone": [16, 211, 341], "rais": [16, 199, 234, 235, 262, 305, 314, 373, 375, 377, 378, 379, 382, 384, 386, 390, 393, 400, 403, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 498, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 565, 566, 570, 571, 577, 578, 579, 580, 583, 592, 599, 600, 606, 618, 621, 624, 625, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 685, 687, 691, 698, 700, 701, 702, 703, 715, 717, 718, 726, 744, 766, 770, 771, 772, 775, 776, 777, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 799, 803, 807, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 837, 838, 839, 843, 845, 846, 847, 848, 851, 852, 853, 854, 855, 860, 861, 862, 866, 867, 868, 875, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 903, 906, 908, 909, 911, 912, 929, 937, 960, 961, 962, 963, 976, 986, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "valueerror": [16, 234, 235, 375, 379, 390, 457, 566, 592, 606, 624, 660, 703, 820, 838, 847, 853, 867, 907, 911, 912, 961, 962, 963, 986, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 231, 359, 360, 371, 373, 377, 379, 381, 389, 407, 497, 996, 1011, 1020], "anchor": [16, 270], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 165, 176, 190, 207, 217, 235, 262, 326, 328, 331, 336, 342, 501, 620, 647, 648, 655, 657, 663, 664, 665, 666, 888, 890, 892, 893, 990, 991], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 377, 647, 648, 655, 657, 665, 666, 667, 845, 846, 888, 986], "add_opt": 16, "action": [16, 314, 344, 372, 376, 377, 389, 986, 1028], "store": [16, 32, 53, 54, 70, 72, 81, 90, 144, 158, 174, 184, 187, 220, 228, 238, 249, 264, 268, 319, 346, 353, 359, 367, 368, 373, 375, 380, 381, 382, 384, 386, 400, 402, 404, 406, 407, 409, 410, 427, 429, 433, 435, 439, 446, 458, 459, 462, 463, 464, 465, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 497, 523, 524, 530, 538, 539, 544, 545, 552, 558, 559, 578, 599, 600, 616, 620, 621, 624, 627, 638, 639, 643, 649, 650, 651, 652, 655, 656, 662, 664, 665, 666, 667, 677, 678, 679, 681, 686, 687, 689, 690, 691, 769, 783, 784, 785, 791, 799, 807, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 843, 859, 866, 868, 869, 883, 884, 885, 908, 909, 933, 934, 947, 950, 966, 968, 972, 979, 988, 991, 992, 996, 1002, 1011, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "dest": [16, 316], "dump": [16, 17, 393, 476, 828, 829], "argv": [16, 231], "opt": [16, 371, 375], "arg": [16, 234, 296, 374, 386, 404, 406, 413, 560, 561, 562, 563, 564, 565, 566, 567, 606, 852, 972, 978, 979], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 323, 384], "classic": [17, 193, 223, 237, 244, 250, 370, 377, 401, 403, 404, 432, 436, 438, 448, 481, 489, 493, 499, 621, 622, 898, 899, 970, 972, 978, 986, 1005, 1018, 1019, 1023, 1032], "graph": [17, 25, 39, 44, 46, 66, 67, 158, 219, 256, 279, 281, 322, 359, 373, 376, 386, 396, 401, 410, 430, 433, 434, 441, 442, 446, 451, 452, 460, 461, 467, 500, 574, 575, 677, 680, 681, 684, 770, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 843, 884, 973, 976, 979, 981, 989, 992, 996, 1000, 1007, 1010, 1018, 1025, 1026, 1028, 1031, 1033], "vertex": [17, 26, 399, 442, 1031], "en": [17, 24, 381, 387, 520, 526, 584, 625, 653, 657, 660, 674, 675, 684, 694, 830, 831, 836, 837, 838, 839, 866, 882, 896, 897, 972, 976, 991, 992], "wiki": [17, 24, 379, 381, 584, 625, 657, 660, 684, 694, 830, 831, 836, 837, 838, 839, 866, 882, 896, 897, 972, 992], "eigenvector_centr": 17, "webpag": [17, 174, 373], "pagerank": 17, "insid": [17, 19, 26, 169, 200, 234, 259, 321, 331, 361, 367, 368, 375, 379, 399, 407, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 578, 579, 580, 583, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 936, 944, 983, 1000], "accord": [17, 24, 26, 37, 49, 78, 116, 122, 147, 151, 181, 198, 216, 231, 311, 345, 355, 373, 375, 384, 385, 386, 387, 396, 399, 401, 403, 404, 406, 407, 409, 426, 439, 441, 445, 449, 451, 454, 458, 493, 505, 506, 507, 514, 519, 521, 524, 525, 527, 529, 539, 542, 543, 550, 551, 552, 555, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 630, 631, 633, 634, 638, 647, 648, 659, 669, 680, 684, 723, 767, 768, 785, 786, 787, 788, 789, 792, 793, 794, 799, 809, 823, 824, 825, 826, 827, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 851, 858, 866, 878, 880, 881, 888, 889, 890, 891, 893, 894, 970, 972, 976, 978, 979, 986, 989, 990, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "tradit": [17, 55, 198, 213, 345, 361, 397, 406, 407, 621, 683, 972, 975, 986, 1000], "power_iter": 17, "martinsson": [17, 524, 530, 925], "dbpedia": 17, "content": [17, 306, 344, 346, 368, 373, 377, 379, 393, 398, 407, 475, 492, 497, 498, 577, 578, 580, 660, 902, 985, 1000, 1011, 1019, 1028], "bz2": [17, 497, 498], "bz2file": 17, "pprint": [17, 123, 234, 260, 368, 920], "urlopen": 17, "randomized_svd": [17, 382, 440, 442, 521, 530, 533, 535, 1018, 1019, 1024, 1031, 1032, 1033], "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 123, 162, 198, 297, 313, 358, 362, 376, 385, 406, 788, 789, 977, 994, 997, 1000, 1003, 1013, 1026, 1031, 1032], "wait": [17, 373, 377, 386, 655, 656, 657, 665, 667, 1030], "wb": 17, "index_map": 17, "setdefault": [17, 903], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 70, 260, 281, 311, 373, 377, 379, 381, 409, 415, 431, 432, 434, 436, 438, 453, 456, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 628, 629, 630, 631, 677, 678, 681, 791, 812, 832, 837, 840, 844, 848, 854, 880, 881, 1024, 1025, 1031, 1033], "get_redirect": 17, "transit": [17, 377, 1029], "malform": [17, 1022], "1000000": [17, 525], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 55, 66, 82, 98, 105, 117, 123, 168, 169, 194, 223, 230, 234, 296, 301, 331, 344, 368, 375, 377, 385, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 415, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 510, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 612, 616, 617, 618, 619, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 951, 957, 965, 971, 979, 980, 986, 992, 1000, 1006, 1007, 1009, 1010, 1030, 1031, 1032, 1033, 1034], "break": [17, 39, 46, 70, 81, 165, 187, 204, 234, 246, 314, 320, 326, 342, 344, 346, 373, 375, 377, 379, 385, 399, 458, 501, 628, 762, 766, 769, 783, 861, 868, 873, 890, 893, 972, 975, 984, 986, 991, 997, 1018, 1019, 1025, 1026, 1028, 1030, 1034], "get_adjacency_matrix": 17, "resolv": [17, 372, 373, 377, 381, 387, 407, 435, 441, 451, 680, 684, 925, 966, 976, 1025, 1027, 1028, 1031], "lil_matrix": 17, "float32": [17, 122, 222, 298, 316, 360, 368, 373, 375, 395, 546, 547, 548, 549, 552, 553, 554, 555, 582, 583, 629, 630, 647, 688, 751, 853, 896, 897, 898, 899, 906, 952, 953, 954, 992, 1002, 1011, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "del": [17, 379, 1030, 1031], "convert": [17, 34, 46, 48, 66, 71, 98, 155, 171, 198, 219, 240, 245, 246, 249, 250, 292, 359, 367, 382, 384, 386, 393, 407, 429, 432, 433, 436, 438, 439, 440, 441, 448, 453, 454, 485, 523, 530, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 570, 571, 577, 578, 579, 580, 582, 583, 595, 616, 617, 618, 619, 635, 641, 647, 648, 649, 651, 655, 657, 659, 663, 665, 666, 667, 681, 766, 843, 852, 853, 855, 859, 861, 862, 863, 865, 888, 896, 897, 898, 899, 906, 908, 909, 931, 961, 962, 965, 972, 973, 974, 976, 986, 987, 991, 992, 1011, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1033, 1034], "csr": [17, 346, 359, 367, 368, 382, 384, 386, 407, 410, 432, 435, 436, 438, 439, 448, 486, 497, 512, 542, 543, 546, 547, 553, 554, 555, 619, 647, 681, 703, 756, 778, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 843, 851, 855, 857, 859, 860, 863, 866, 867, 868, 871, 872, 873, 875, 878, 881, 896, 897, 898, 899, 904, 908, 909, 931, 939, 951, 952, 953, 954, 955, 956, 957, 979, 986, 990, 1018, 1019, 1024, 1026, 1027, 1033, 1034], "tocsr": 17, "convers": [17, 123, 189, 344, 355, 361, 367, 373, 375, 381, 384, 393, 407, 561, 843, 852, 860, 908, 909, 962, 973, 997, 1000, 1026, 1027, 1028, 1031, 1034], "5m": 17, "ram": [17, 53, 361, 406, 880, 881, 978, 991, 1011, 1024, 1030, 1033], "5000000": 17, "strongest": [17, 191], "highest": [17, 19, 26, 82, 143, 147, 257, 259, 270, 313, 344, 373, 384, 397, 399, 403, 406, 408, 426, 544, 546, 553, 581, 584, 585, 587, 588, 589, 592, 593, 595, 624, 626, 714, 744, 780, 783, 785, 788, 789, 799, 885, 896, 927, 965, 972, 976, 977, 980, 990, 992, 1030], "centrality_scor": 17, "networkx": [17, 382], "copyright": [17, 82], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 370], "dan": [17, 1018, 1022, 1023, 1024, 1026, 1027], "schult": 17, "dschult": 17, "pieter": [17, 1024, 1025, 1032], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 197, 231, 263, 346, 396, 410, 433, 512, 513, 520, 526, 531, 537, 577, 580, 674, 675, 830, 831, 834, 836, 838, 839, 972, 976], "indptr": [17, 279, 353, 1026, 1034], "dangl": 17, "isclos": 17, "guess": [17, 119, 403, 406, 407, 467, 521, 527, 529, 530, 536, 976, 990], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 57, 62, 78, 79, 80, 82, 85, 86, 96, 97, 98, 103, 105, 113, 150, 151, 157, 158, 168, 179, 182, 190, 192, 193, 205, 232, 245, 246, 248, 249, 263, 327, 329, 359, 375, 379, 382, 386, 396, 404, 407, 522, 527, 529, 536, 579, 580, 603, 635, 636, 639, 641, 642, 643, 646, 649, 650, 651, 652, 670, 671, 672, 673, 676, 749, 751, 860, 900, 926, 974, 978, 986, 990, 991, 1010, 1027], "converg": [17, 57, 61, 78, 79, 110, 121, 123, 150, 156, 159, 191, 200, 202, 206, 214, 245, 247, 296, 297, 301, 306, 320, 361, 382, 386, 396, 399, 404, 407, 409, 411, 429, 432, 435, 436, 437, 438, 441, 443, 448, 449, 450, 451, 460, 461, 467, 471, 472, 473, 522, 524, 525, 526, 527, 528, 535, 542, 560, 599, 633, 634, 635, 636, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 657, 661, 663, 665, 667, 671, 672, 676, 677, 679, 680, 683, 684, 783, 784, 837, 845, 846, 883, 884, 890, 966, 971, 972, 973, 975, 980, 990, 1018, 1021, 1022, 1023, 1025, 1026, 1029, 1031, 1032, 1033, 1034], "l_inf": 17, "scores_max": 17, "err": [17, 85, 99], "6f": [17, 99, 264, 725, 781], "concern": [18, 36, 77, 84, 88, 94, 108, 141, 149, 161, 165, 173, 176, 218, 243, 249, 276, 280, 294, 300, 318, 326, 343, 348, 359, 375, 398, 973, 988], "modul": [18, 36, 37, 49, 53, 77, 84, 88, 94, 95, 108, 141, 149, 159, 161, 165, 166, 173, 176, 213, 218, 219, 243, 252, 276, 280, 294, 296, 297, 300, 318, 326, 343, 348, 351, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 384, 386, 388, 389, 393, 396, 397, 398, 399, 402, 406, 407, 408, 410, 433, 492, 524, 568, 569, 648, 883, 917, 965, 970, 972, 974, 976, 977, 980, 982, 983, 986, 988, 990, 992, 993, 1000, 1005, 1006, 1011, 1019, 1020, 1021, 1023, 1024, 1028, 1030, 1032], "demo": [18, 22, 36, 68, 126, 165, 182, 204, 249, 260, 268, 306, 344, 345, 375, 396, 399, 407, 429, 430, 433, 435, 436, 437, 439, 440, 442, 444, 447, 491, 500, 501, 502, 530, 693, 694, 706, 708, 725, 779, 781, 849, 868], "spectral": [18, 22, 36, 44, 46, 49, 55, 68, 165, 220, 221, 373, 407, 438, 440, 441, 442, 451, 458, 459, 460, 461, 462, 463, 464, 465, 477, 500, 502, 580, 677, 678, 679, 680, 681, 684, 708, 781, 979, 989, 1012, 1013, 1018, 1019], "twenti": [19, 231, 370, 396, 399, 1011], "comp": [19, 85, 86, 98, 106, 298, 323, 344, 345, 346, 368, 1011], "window": [19, 323, 368, 373, 375, 376, 407, 996, 1018, 1021, 1025, 1029, 1031, 1032], "misc": [19, 53, 98, 260, 323, 344, 345, 346, 368, 1010], "categori": [19, 44, 62, 70, 71, 120, 130, 168, 169, 198, 206, 213, 237, 260, 296, 297, 303, 307, 308, 313, 316, 323, 344, 345, 346, 367, 368, 382, 398, 399, 400, 406, 407, 409, 477, 485, 486, 492, 550, 551, 637, 647, 648, 658, 669, 731, 746, 747, 824, 861, 862, 869, 966, 972, 973, 974, 978, 984, 1002, 1011, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "noth": [19, 70, 344, 345, 378, 531, 577, 578, 580, 703, 851, 860, 909, 986], "frequenc": [19, 27, 150, 169, 182, 192, 198, 231, 312, 313, 344, 345, 346, 368, 384, 397, 403, 404, 406, 407, 408, 540, 546, 548, 549, 550, 553, 577, 578, 579, 580, 593, 647, 648, 653, 655, 657, 663, 664, 665, 674, 675, 817, 852, 861, 862, 888, 890, 893, 896, 898, 914, 972, 973, 978, 986, 990, 992, 1020, 1022, 1023, 1029], "dhillon": [19, 396, 440, 442, 500], "cut": [19, 43, 46, 65, 66, 221, 377, 384, 396, 399, 435, 441, 442, 451, 577, 580, 680, 684, 986], "minibatchkmean": [19, 36, 44, 50, 61, 68, 165, 345, 361, 399, 404, 429, 431, 436, 501, 767, 1019, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034], "coclust": [19, 396, 440, 502], "4415": 19, "3015": 19, "talk": [19, 70, 260, 344, 345, 346, 362, 368, 386, 393, 1000, 1003, 1011], "polit": [19, 344, 368, 372, 972, 977], "mideast": [19, 368], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 306, 370], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 368], "17": [19, 39, 52, 74, 80, 151, 168, 197, 224, 231, 262, 295, 305, 368, 371, 378, 389, 391, 392, 399, 403, 409, 433, 450, 476, 486, 489, 512, 520, 525, 529, 536, 538, 539, 544, 548, 549, 558, 559, 586, 617, 638, 646, 647, 648, 655, 658, 661, 663, 676, 681, 717, 718, 728, 749, 754, 772, 775, 777, 803, 826, 837, 852, 857, 858, 866, 868, 874, 890, 893, 896, 897, 898, 899, 965, 966, 977, 979, 986, 994, 1014, 1016, 1018, 1019, 1020, 1021, 1024, 1027, 1032], "sci": [19, 70, 344, 345, 346, 368, 384, 678, 682, 859, 973, 986, 1011], "med": [19, 70, 268, 368, 986, 1011], "geb": 19, "gordon": [19, 247, 1024, 1028, 1030, 1032], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 368, 1011], "religion": [19, 260, 344, 345, 346, 368, 977, 1011], "alt": [19, 260, 323, 344, 345, 346, 368, 381, 1011], "atheism": [19, 260, 323, 344, 345, 346, 368, 1011], "god": [19, 344, 345, 1011], "jesu": [19, 344, 345], "kent": 19, "belief": [19, 259, 844, 981], "christ": 19, "faith": [19, 156, 336], "moral": [19, 71, 344, 647, 1026, 1030, 1031], "775": 19, "1623": 19, "pc": [19, 323, 346, 368], "hardwar": [19, 323, 346, 359, 360, 368, 371, 994, 996, 1032, 1033], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 806], "s3": [19, 96, 147, 186, 187, 370, 1010], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 307, 323, 368, 373, 697, 976], "electron": [19, 368, 370, 527, 529, 536, 616], "voltag": 19, "ship": [19, 130, 163, 350, 360, 371, 389, 407, 972, 1018, 1027], "circuit": [19, 973], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 396, 440, 1020, 1025, 1029], "v_measure_scor": [19, 37, 38, 49, 58, 345, 399, 706, 724, 725, 745, 976, 1027], "number_norm": 19, "token": [19, 346, 359, 368, 377, 407, 525, 577, 578, 579, 580, 1018, 1026, 1030], "placehold": [19, 377, 616, 617, 618, 619, 800, 801, 804, 805, 966], "begin": [19, 150, 254, 261, 277, 314, 344, 355, 373, 378, 379, 386, 396, 399, 406, 542, 543, 548, 550, 551, 655, 656, 665, 666, 667, 965, 972, 976, 986, 988, 990, 1026, 1032, 1033], "By": [19, 45, 95, 126, 127, 177, 234, 268, 301, 311, 344, 360, 373, 379, 380, 386, 390, 399, 400, 402, 403, 404, 405, 406, 408, 427, 430, 434, 435, 439, 453, 456, 457, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 513, 515, 538, 539, 546, 547, 548, 549, 553, 554, 574, 575, 577, 578, 580, 595, 598, 621, 622, 660, 662, 664, 666, 679, 681, 683, 686, 689, 691, 692, 707, 717, 718, 722, 726, 771, 772, 775, 780, 782, 788, 789, 834, 848, 849, 861, 862, 864, 866, 876, 878, 886, 891, 892, 896, 897, 898, 899, 908, 909, 944, 965, 966, 968, 972, 976, 983, 986, 988, 992, 1002, 1006, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1032], "isdigit": [19, 407], "numbernormalizingvector": 19, "build_token": [19, 407, 577, 578, 580], "super": [19, 25, 27, 375, 407, 1026], "forsal": [19, 346, 368], "rec": [19, 346, 368, 630], "auto": [19, 25, 27, 33, 44, 45, 48, 57, 58, 60, 92, 95, 143, 144, 154, 174, 181, 219, 220, 221, 222, 224, 232, 237, 239, 256, 258, 266, 279, 282, 287, 303, 311, 312, 313, 314, 315, 316, 327, 328, 329, 334, 337, 338, 346, 367, 368, 375, 406, 408, 409, 410, 430, 433, 434, 435, 436, 438, 439, 441, 446, 448, 451, 485, 497, 498, 524, 527, 529, 530, 533, 536, 538, 546, 547, 550, 551, 552, 553, 554, 556, 557, 582, 583, 586, 591, 596, 597, 618, 620, 621, 622, 624, 628, 635, 636, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 661, 662, 663, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 691, 723, 729, 788, 789, 816, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 845, 846, 861, 862, 869, 880, 881, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 924, 925, 942, 945, 967, 970, 972, 973, 976, 977, 979, 986, 991, 996, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "motorcycl": [19, 368], "sport": [19, 368], "basebal": [19, 368], "hockei": [19, 368], "crypt": [19, 368], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 95, 315, 345, 373, 386, 399, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 448, 449, 450, 451, 452, 500, 502, 1010, 1018, 1022, 1024, 1026, 1027, 1029, 1032], "svd_method": [19, 440, 442, 521, 1021], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 57, 58, 61, 68, 165, 247, 250, 304, 315, 345, 382, 399, 429, 432, 437, 438, 441, 451, 501, 778, 779, 783, 784, 853, 979, 986, 997, 1010, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 57, 58, 60, 61, 64, 95, 219, 220, 221, 222, 312, 315, 345, 399, 432, 436, 438, 440, 441, 442, 448, 451, 679, 683, 783, 784, 1010, 1018, 1026, 1032, 1033, 1034], "y_coclust": 19, "row_labels_": [19, 20, 21, 396, 440, 442], "y_kmean": 19, "fit_predict": [19, 56, 57, 60, 227, 234, 286, 375, 386, 399, 417, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 458, 552, 666, 783, 784, 834, 840, 848, 892, 982, 1023, 1026, 1027, 1031, 1033, 1035], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 55, 59, 63, 64, 70, 116, 131, 219, 237, 340, 500, 502], "get_indic": [19, 414, 440, 442], "float_info": 19, "row_compl": 19, "logical_not": [19, 64, 105, 201], "rows_": [19, 396, 414, 440, 442], "col_compl": 19, "columns_": [19, 396, 414, 440, 442], "ident": [19, 64, 122, 193, 198, 216, 227, 231, 324, 344, 368, 375, 386, 396, 399, 400, 401, 403, 409, 412, 427, 428, 441, 453, 454, 462, 464, 465, 468, 469, 470, 477, 492, 540, 548, 549, 553, 554, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 632, 668, 669, 693, 694, 724, 773, 781, 787, 790, 800, 801, 802, 804, 805, 830, 831, 837, 845, 846, 852, 853, 865, 877, 896, 897, 969, 970, 973, 976, 979, 980, 991, 1022, 1026, 1027, 1028, 1032], "most_common": 19, "counter": [19, 266, 399, 665, 666, 667, 1031], "itemgett": 19, "revers": [19, 75, 147, 203, 259, 523, 530, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 600, 777, 848, 976, 1018, 1019, 1028, 1030, 1034], "best_idx": [19, 258], "get_shap": [19, 414, 440, 442], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 58], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "041": [19, 22], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 396, 440, 442, 500, 502], "simultan": [20, 55, 96, 263, 267, 352, 365, 396, 399, 965, 976, 977, 992, 1000, 1025], "aim": [20, 81, 163, 287, 321, 361, 368, 371, 373, 386, 393, 399, 401, 407, 437, 972, 976, 979, 986, 991, 996, 1002, 1010, 1032], "identifi": [20, 97, 104, 123, 124, 167, 168, 198, 201, 247, 249, 257, 262, 268, 288, 308, 313, 344, 345, 367, 368, 372, 373, 377, 378, 386, 399, 400, 403, 406, 407, 435, 439, 446, 476, 485, 497, 498, 544, 545, 552, 595, 632, 638, 688, 701, 762, 813, 834, 853, 883, 884, 965, 972, 976, 982, 989, 1000, 1009, 1025, 1027, 1032, 1033], "particularli": [20, 31, 70, 71, 74, 105, 128, 199, 229, 259, 303, 312, 341, 355, 359, 373, 382, 386, 399, 400, 402, 405, 407, 485, 791, 807, 825, 925, 944, 945, 972, 973, 976, 978, 997, 1000, 1010, 1018, 1023, 1025, 1026, 1032], "suit": [20, 95, 128, 168, 198, 199, 227, 249, 314, 315, 344, 360, 373, 375, 378, 379, 381, 384, 389, 402, 404, 406, 409, 439, 441, 492, 666, 825, 869, 919, 965, 968, 973, 976, 978, 979, 990, 996, 997, 1000, 1004, 1025, 1032], "arrang": [20, 277, 621, 819, 820, 821, 822, 976], "genom": [20, 502], "rearrang": [20, 21, 396], "kemaleren": [20, 21], "make_checkerboard": [20, 500, 1020], "uniform": [20, 31, 37, 53, 122, 123, 126, 143, 151, 156, 159, 177, 178, 212, 224, 227, 230, 267, 282, 285, 286, 291, 295, 302, 304, 305, 308, 315, 330, 375, 378, 399, 427, 428, 540, 558, 559, 599, 600, 617, 628, 638, 639, 643, 657, 665, 666, 667, 710, 711, 716, 733, 734, 736, 738, 739, 741, 773, 789, 797, 799, 823, 824, 827, 830, 831, 838, 839, 853, 865, 867, 877, 913, 927, 965, 966, 975, 976, 979, 1024, 1026, 1028, 1032, 1034], "deviat": [20, 34, 61, 80, 113, 116, 117, 118, 119, 147, 150, 155, 157, 159, 168, 177, 204, 256, 257, 258, 259, 260, 262, 285, 286, 301, 306, 365, 369, 370, 378, 382, 386, 403, 406, 439, 461, 490, 500, 501, 502, 503, 505, 506, 507, 511, 513, 514, 519, 541, 583, 600, 623, 633, 634, 660, 712, 740, 791, 807, 834, 857, 858, 868, 877, 878, 879, 972, 976, 982, 986, 1009, 1024, 1025, 1026, 1029, 1030, 1031], "matshow": [20, 21, 66, 118, 145, 297, 491], "afterward": [20, 377, 524, 530, 812], "row_idx_shuffl": 20, "permut": [20, 21, 37, 81, 118, 124, 139, 165, 166, 172, 214, 252, 275, 308, 388, 394, 399, 406, 453, 485, 489, 493, 548, 549, 553, 554, 616, 619, 623, 668, 693, 694, 706, 724, 725, 743, 745, 781, 802, 804, 813, 814, 848, 862, 893, 896, 897, 925, 945, 947, 950, 976, 990, 1006, 1009, 1013, 1018, 1024, 1031, 1033], "col_idx_shuffl": 20, "redefin": [20, 123, 168], "lost": [20, 57, 82, 368, 374, 384, 973, 976], "strucutur": 20, "ground": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 126, 158, 182, 192, 198, 199, 250, 262, 345, 386, 398, 399, 692, 693, 694, 697, 701, 702, 703, 704, 706, 707, 710, 711, 712, 716, 717, 718, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 771, 772, 773, 774, 775, 781, 782, 976, 989, 1002, 1010, 1026], "truth": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 103, 126, 158, 182, 192, 198, 199, 250, 262, 345, 386, 398, 399, 692, 693, 694, 697, 701, 702, 703, 704, 706, 707, 710, 711, 712, 714, 716, 717, 718, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 771, 772, 773, 774, 775, 781, 782, 976, 1002, 1010, 1026, 1032], "consensus_scor": [20, 21, 396, 1020], "biclusters_": [20, 21, 414, 440, 442], "consensu": [20, 21, 37, 372, 373, 387, 396, 399, 638, 660, 667, 668, 708, 976], "1f": [20, 30, 50, 53, 98, 178, 198, 231, 244, 246, 266, 311, 345, 346], "perfect": [20, 26, 37, 70, 81, 98, 100, 194, 198, 344, 345, 373, 377, 399, 403, 542, 543, 679, 683, 693, 694, 697, 706, 714, 716, 719, 725, 731, 744, 745, 773, 774, 781, 972, 976, 979, 991, 1000, 1009, 1032], "ascend": [20, 71, 170, 307, 406, 439, 445, 616, 624, 900, 901, 902, 990, 1028, 1034], "column_labels_": [20, 21, 396, 440, 442], "reorder": [20, 45, 102, 386, 686, 707, 997, 1026], "reordered_row": 20, "reordered_data": 20, "step": [20, 26, 33, 42, 54, 55, 58, 67, 70, 71, 72, 73, 74, 81, 86, 98, 103, 115, 119, 120, 130, 144, 145, 146, 152, 155, 168, 170, 198, 206, 216, 228, 229, 232, 238, 241, 250, 257, 260, 266, 268, 279, 281, 287, 295, 298, 303, 306, 307, 312, 315, 324, 327, 331, 345, 346, 349, 355, 359, 362, 368, 371, 372, 373, 375, 377, 378, 381, 384, 386, 396, 397, 399, 401, 402, 404, 406, 407, 408, 431, 436, 438, 525, 526, 527, 528, 535, 552, 577, 578, 580, 582, 583, 586, 595, 616, 633, 637, 655, 656, 658, 665, 667, 668, 669, 683, 689, 783, 784, 785, 788, 789, 799, 819, 820, 821, 822, 844, 845, 846, 848, 849, 851, 888, 889, 890, 891, 893, 894, 924, 925, 947, 951, 966, 972, 975, 980, 981, 986, 990, 992, 993, 996, 999, 1007, 1011, 1018, 1022, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1034], "outer": [20, 100, 264, 321, 440, 503, 629, 639, 640, 643, 968, 1019], "product": [20, 71, 95, 131, 150, 155, 169, 355, 359, 375, 376, 379, 382, 393, 396, 404, 406, 440, 527, 529, 536, 571, 578, 579, 580, 602, 603, 622, 629, 653, 654, 674, 675, 749, 751, 763, 765, 860, 863, 880, 881, 926, 965, 968, 972, 974, 986, 988, 990, 991, 996, 1000, 1026], "shade": [20, 53, 181, 282, 287, 327, 404], "499": [20, 22, 147, 370, 379], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 362, 407, 414, 438, 440, 442, 477, 500, 502, 580, 708, 781, 976, 1012, 1013, 1020, 1024, 1025], "make_biclust": [21, 502, 1020], "implant": 21, "row_idx": [21, 198], "col_idx": 21, "fit_data": 21, "340": [21, 22, 233, 319], "plot_spectral_coclust": [21, 22], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 55, 75, 92, 108, 109, 110, 131, 134, 142, 149, 150, 151, 152, 160, 165, 168, 219, 223, 228, 231, 259, 262, 265, 266, 269, 301, 305, 311, 313, 322, 324, 359, 362, 368, 369, 375, 379, 384, 386, 399, 403, 404, 407, 408, 409, 424, 425, 426, 427, 428, 435, 436, 438, 493, 501, 504, 512, 516, 538, 539, 540, 542, 544, 546, 548, 550, 551, 553, 556, 558, 559, 582, 583, 599, 602, 603, 611, 616, 621, 622, 647, 648, 660, 665, 681, 687, 689, 691, 692, 695, 696, 698, 701, 705, 709, 714, 715, 717, 727, 728, 729, 730, 744, 770, 772, 775, 776, 777, 780, 783, 784, 785, 788, 789, 799, 813, 814, 817, 819, 820, 823, 824, 825, 826, 827, 830, 833, 838, 844, 845, 881, 882, 883, 884, 885, 888, 890, 893, 896, 898, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 986, 988, 989, 990, 992, 997, 998, 999, 1011, 1013, 1018, 1020, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1032], "confid": [24, 25, 26, 27, 155, 157, 245, 259, 262, 322, 387, 397, 409, 625, 647, 648, 655, 657, 660, 663, 664, 665, 687, 691, 696, 709, 714, 715, 727, 728, 744, 777, 816, 855, 888, 890, 893, 972, 975, 976, 977, 982, 989, 990, 991, 1000, 1011, 1028], "being": [24, 27, 45, 52, 55, 82, 86, 90, 100, 114, 127, 150, 155, 168, 170, 174, 192, 234, 253, 259, 305, 306, 331, 344, 346, 371, 372, 373, 375, 377, 378, 384, 386, 387, 393, 399, 401, 403, 406, 407, 408, 409, 410, 412, 430, 431, 433, 434, 439, 445, 458, 464, 482, 512, 558, 629, 638, 645, 661, 663, 676, 679, 683, 701, 707, 717, 722, 724, 771, 777, 783, 828, 829, 834, 836, 838, 839, 840, 863, 881, 926, 965, 966, 972, 975, 976, 979, 982, 983, 984, 986, 988, 990, 991, 992, 1018, 1019, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1033, 1034], "postprocess": [24, 397, 524, 530], "brier": [24, 25, 397, 698], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 365, 406, 426, 441, 524, 550, 609, 628, 632, 753, 762, 765, 845, 846, 890, 891, 892, 893, 894, 981, 991, 1009, 1013, 1031], "isoton": [24, 25, 165, 226, 242, 362, 426, 646, 911, 998, 1013, 1019, 1020, 1021, 1022, 1024, 1031, 1034], "belong": [24, 27, 55, 60, 237, 259, 311, 321, 367, 368, 396, 397, 399, 402, 403, 406, 414, 429, 432, 436, 437, 438, 440, 442, 512, 701, 719, 792, 798, 809, 835, 855, 869, 932, 933, 972, 975, 976, 978, 979, 980, 982, 991, 996, 1002, 1009], "mblondel": [24, 48, 189, 220, 260, 344, 367, 497], "telecom": [24, 25, 42, 227, 1000], "balaz": [24, 1022], "kegl": [24, 1022], "jhm": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233], "informatik": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233, 976], "uni": [24, 25, 26, 27, 74, 114, 150, 151, 153, 154, 155, 156, 157, 159, 189, 232, 233, 321, 339], "bremen": [24, 25, 26, 27, 150, 151, 153, 154, 155, 156, 157, 159, 233], "style": [24, 26, 81, 123, 187, 206, 216, 263, 373, 380, 399, 407, 432, 436, 448, 689, 791, 807, 908, 909, 1018, 1021, 1032], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 91, 190, 210, 227, 247, 304, 312, 315, 329, 332, 333, 340, 369, 375, 376, 406, 504, 1026, 1029, 1032], "50000": 24, "n_bin": [24, 25, 27, 53, 198, 216, 302, 304, 308, 427, 428, 853, 986], "calibration_curv": [24, 397, 426, 427, 1027, 1032], "blob": [24, 33, 42, 44, 57, 62, 64, 91, 399, 437, 501, 1023], "sample_weight": [24, 179, 198, 211, 216, 234, 312, 341, 373, 386, 390, 399, 406, 410, 416, 421, 426, 432, 433, 436, 438, 448, 449, 454, 458, 471, 472, 473, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 599, 600, 621, 622, 623, 624, 626, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 686, 687, 689, 691, 692, 696, 697, 698, 701, 702, 705, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 722, 723, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 770, 771, 772, 773, 775, 776, 777, 780, 782, 785, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 853, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 936, 964, 976, 990, 991, 992, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "sw_train": [24, 312], "sw_test": [24, 312], "calibratedclassifiercv": [24, 25, 26, 355, 386, 397, 665, 965, 991, 997, 1022, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "brier_score_loss": [24, 25, 397, 976, 1026, 1027, 1028], "gaussiannb": [24, 25, 27, 31, 132, 261, 355, 397, 406, 426, 558, 823, 824, 825, 827, 849, 970, 977, 978, 1022, 1023, 1024, 1026, 1031, 1034], "With": [24, 34, 44, 67, 75, 100, 121, 143, 165, 169, 198, 200, 226, 228, 233, 235, 241, 242, 259, 283, 359, 362, 368, 373, 375, 386, 399, 400, 403, 406, 408, 426, 428, 490, 571, 621, 622, 647, 756, 846, 849, 851, 862, 868, 869, 895, 897, 969, 972, 973, 976, 977, 979, 980, 983, 990, 992, 1002, 1003, 1010, 1015, 1021, 1025, 1026, 1028, 1030, 1032], "itself": [24, 49, 55, 123, 126, 169, 182, 196, 234, 240, 268, 279, 308, 331, 345, 359, 361, 372, 373, 375, 377, 386, 390, 398, 399, 410, 429, 430, 433, 434, 435, 458, 459, 460, 461, 462, 463, 464, 465, 516, 520, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 540, 555, 558, 572, 581, 584, 585, 587, 588, 589, 591, 592, 628, 629, 630, 631, 632, 634, 644, 678, 680, 778, 779, 823, 824, 825, 826, 827, 828, 829, 833, 841, 842, 853, 854, 855, 883, 884, 968, 972, 973, 975, 979, 980, 984, 996, 1022, 1033], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 128, 132, 151, 152, 153, 154, 234, 268, 295, 303, 306, 311, 313, 344, 375, 380, 386, 397, 398, 406, 426, 427, 538, 539, 540, 542, 544, 546, 548, 550, 553, 556, 558, 582, 583, 599, 608, 609, 611, 612, 620, 621, 622, 647, 648, 665, 687, 689, 691, 729, 730, 776, 783, 784, 785, 788, 789, 799, 809, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 830, 838, 845, 848, 855, 883, 884, 885, 890, 893, 896, 898, 972, 976, 978, 980, 983, 989, 990, 991, 992, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 112, 125, 182, 190, 204, 206, 207, 234, 320, 336, 339, 350, 370, 381, 384, 389, 399, 463, 548, 549, 579, 580, 624, 634, 653, 665, 667, 674, 675, 783, 972], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 102, 107], "109": [24, 53, 977, 1020], "y_uniqu": 24, "rainbow": [24, 221], "this_i": [24, 204], "this_x": [24, 196, 204, 1009], "this_sw": 24, "lexsort": 24, "51": [24, 92, 116, 134, 155, 216, 279, 399, 400, 769, 972, 1014], "uncalibr": [24, 25, 26, 426], "gnb": [24, 25, 27, 132, 406, 558, 978], "344": [24, 28], "plot_calibr": [24, 28], "reliabl": [25, 27, 397, 403, 427, 428, 635, 992, 1000], "diagram": [25, 27, 71, 239, 312, 397, 399, 427, 428, 457, 886, 986, 1029, 1030], "redund": [25, 27, 106, 146, 245, 250, 355, 369, 372, 373, 378, 386, 397, 504, 623, 997, 1011, 1030], "uninform": [25, 27, 308, 369, 378, 407, 965, 972, 1026], "rest": [25, 30, 120, 124, 165, 176, 182, 213, 217, 234, 247, 311, 323, 328, 379, 386, 398, 409, 501, 599, 620, 633, 647, 648, 665, 742, 776, 816, 817, 818, 837, 888, 890, 893, 972, 976, 977, 980, 983, 991, 1000, 1022, 1023, 1032, 1033, 1034], "make_classif": [25, 27, 31, 91, 114, 115, 117, 121, 144, 146, 256, 262, 270, 271, 289, 295, 303, 311, 313, 339, 355, 369, 376, 395, 426, 427, 501, 542, 544, 546, 553, 655, 686, 687, 689, 691, 807, 812, 818, 845, 848, 888, 965, 976, 977, 986, 991, 1024, 1025, 1026, 1028], "100_000": [25, 27, 168], "n_inform": [25, 27, 31, 91, 114, 117, 144, 146, 177, 182, 201, 256, 262, 272, 289, 295, 303, 311, 339, 375, 378, 504, 513, 542, 543, 544, 545, 553, 554, 654, 818, 977, 1026], "n_redund": [25, 27, 31, 91, 117, 144, 146, 256, 262, 289, 295, 303, 378, 426, 504, 542, 544, 553, 818], "logisticregress": [25, 27, 30, 71, 73, 115, 132, 138, 146, 181, 188, 189, 190, 191, 205, 213, 214, 228, 229, 239, 241, 262, 268, 277, 298, 303, 311, 312, 313, 314, 315, 344, 359, 373, 375, 379, 381, 385, 390, 397, 400, 406, 408, 427, 556, 558, 586, 620, 623, 632, 641, 648, 661, 662, 663, 664, 665, 676, 689, 776, 799, 807, 819, 820, 822, 873, 874, 876, 877, 878, 879, 895, 920, 972, 976, 977, 986, 990, 991, 1007, 1009, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "baselin": [25, 120, 123, 133, 147, 177, 216, 269, 277, 313, 345, 370, 399, 408, 540, 541, 623, 976, 979, 1011, 1034], "regular": [25, 36, 68, 71, 73, 79, 100, 108, 134, 157, 162, 165, 176, 177, 178, 182, 183, 185, 186, 187, 189, 198, 212, 216, 217, 233, 245, 253, 260, 263, 272, 284, 285, 294, 297, 298, 299, 306, 307, 326, 328, 330, 331, 332, 342, 344, 346, 349, 359, 373, 384, 385, 397, 399, 401, 402, 404, 405, 406, 409, 426, 432, 436, 460, 461, 465, 467, 468, 469, 470, 493, 501, 503, 504, 509, 511, 513, 517, 527, 528, 529, 532, 536, 537, 539, 548, 550, 551, 577, 578, 580, 627, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 682, 723, 729, 738, 783, 784, 802, 814, 815, 845, 846, 849, 868, 888, 889, 890, 891, 893, 894, 895, 965, 966, 968, 969, 970, 973, 975, 981, 982, 986, 989, 990, 991, 998, 1000, 1006, 1007, 1009, 1013, 1018, 1019, 1020, 1022, 1023, 1027, 1028, 1030, 1031], "logist": [25, 27, 30, 69, 71, 76, 115, 138, 165, 176, 217, 228, 241, 277, 298, 306, 315, 344, 386, 387, 397, 400, 406, 408, 409, 426, 478, 485, 491, 493, 501, 530, 548, 550, 560, 599, 620, 635, 646, 647, 648, 655, 657, 665, 729, 785, 799, 814, 844, 845, 846, 848, 868, 895, 911, 913, 976, 980, 981, 990, 991, 998, 1000, 1007, 1013, 1022, 1025, 1026, 1028, 1029], "guid": [25, 55, 69, 95, 116, 159, 165, 168, 169, 186, 219, 266, 285, 286, 289, 307, 311, 312, 313, 314, 315, 316, 362, 371, 372, 373, 378, 379, 380, 385, 386, 387, 390, 398, 400, 406, 410, 411, 412, 413, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 921, 976, 977, 1004, 1011, 1018, 1019, 1020, 1021, 1023, 1025, 1027, 1028], "gridspec": [25, 27, 65, 244, 380], "calibrationdisplai": [25, 27, 397, 1031, 1032], "lr": [25, 27, 115, 132, 133, 201, 213, 229, 230, 255, 262, 385, 390, 406, 557, 558, 559, 701], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 336], "dark2": [25, 27, 220], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 108, 134, 165, 198, 231, 265, 284, 301, 313, 397, 479, 548, 549, 550, 551, 553, 554, 631, 746, 747, 785, 790, 968, 974, 986, 998, 1012, 1013, 1030, 1033], "grid_posit": [25, 27], "y_prob": [25, 27, 153, 427, 428, 698, 819, 845, 976, 1032], "poorli": [25, 62, 78, 86, 113, 125, 223, 360, 399, 406, 517, 619, 972, 973, 1024], "violat": [25, 331, 381, 384, 386, 624, 912, 983, 990, 992], "independ": [25, 27, 37, 46, 96, 97, 99, 115, 119, 157, 169, 236, 259, 262, 264, 268, 277, 301, 308, 311, 345, 355, 359, 360, 369, 375, 377, 385, 386, 389, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 411, 438, 453, 477, 492, 504, 505, 506, 507, 509, 521, 522, 524, 526, 528, 529, 535, 536, 540, 541, 593, 596, 597, 614, 629, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 661, 662, 663, 664, 693, 694, 706, 724, 725, 743, 745, 781, 787, 813, 817, 819, 821, 822, 860, 864, 865, 866, 868, 872, 873, 874, 875, 877, 878, 879, 882, 890, 891, 892, 893, 894, 919, 965, 968, 970, 972, 973, 976, 977, 978, 981, 983, 986, 991, 992, 1012, 1013, 1018, 1019, 1024, 1026, 1028, 1033], "overli": [25, 26, 187, 264, 355, 404, 976], "typic": [25, 27, 99, 110, 174, 182, 198, 216, 233, 261, 262, 266, 268, 269, 285, 286, 313, 331, 345, 359, 366, 367, 368, 371, 375, 376, 377, 382, 385, 386, 397, 398, 399, 400, 403, 404, 406, 407, 409, 432, 436, 438, 485, 540, 542, 544, 545, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 618, 627, 629, 632, 643, 644, 645, 660, 671, 672, 701, 855, 862, 866, 869, 924, 925, 936, 961, 965, 969, 972, 973, 975, 976, 977, 978, 982, 984, 1000, 1011, 1027, 1031, 1034], "transpos": [25, 259, 411, 515, 527, 529, 536, 649, 650, 651, 652, 776, 925, 962, 976, 988, 1010, 1018, 1032], "nearli": [25, 262, 368, 386, 398, 752, 976, 979, 988, 1011], "albeit": 25, "strongli": [25, 27, 82, 86, 98, 120, 124, 168, 180, 213, 234, 265, 344, 373, 388, 389, 397, 406, 647, 724, 781, 972, 973, 1013, 1027, 1034], "plenti": 25, "greater": [25, 92, 112, 168, 215, 232, 247, 265, 277, 285, 286, 349, 359, 369, 378, 386, 397, 399, 402, 406, 430, 434, 438, 441, 452, 461, 525, 530, 546, 547, 548, 549, 550, 551, 553, 554, 555, 582, 583, 586, 599, 600, 617, 629, 631, 634, 653, 655, 656, 660, 665, 666, 667, 681, 698, 701, 709, 723, 724, 727, 730, 776, 781, 783, 784, 818, 830, 831, 838, 839, 845, 846, 851, 866, 878, 882, 885, 896, 897, 898, 899, 925, 945, 965, 971, 972, 973, 976, 977, 982, 986, 991, 992, 1021, 1026, 1029, 1031, 1032, 1033], "exploit": [25, 277, 977, 997, 1021], "f1_score": [25, 266, 323, 368, 726, 976, 1018, 1020, 1021, 1022, 1023, 1027, 1028, 1034], "log_loss": [25, 26, 122, 125, 151, 306, 323, 344, 386, 397, 406, 546, 548, 550, 553, 635, 647, 665, 896, 898, 965, 972, 976, 990, 992, 1020, 1022, 1024, 1032, 1033, 1034], "precision_scor": [25, 266, 697, 775, 976, 1018, 1020, 1021, 1022, 1023, 1028, 1034], "recall_scor": [25, 266, 403, 697, 772, 976, 1018, 1020, 1021, 1022, 1023, 1028, 1034], "roc_auc_scor": [25, 259, 268, 311, 691, 695, 696, 697, 777, 976, 1020, 1021, 1026, 1028, 1032, 1033], "score_nam": [25, 37, 233, 261, 274, 345, 791, 807], "score_df": 25, "set_index": [25, 123, 155, 187, 216, 259, 307, 345], "decim": [25, 156, 460, 461, 901, 1025, 1026], "098921": 25, "323178": 25, "937457": 25, "872009": 25, "851408": 25, "861586": 25, "117608": 25, "782755": 25, "940374": 25, "857400": 25, "875941": 25, "866571": 25, "098332": 25, "370738": 25, "938613": 25, "883065": 25, "836224": 25, "859007": 25, "108880": 25, "368896": 25, "940201": 25, "861106": 25, "871277": 25, "866161": 25, "refin": [25, 82, 461, 698, 976, 1011], "alter": [25, 163, 375, 386, 717, 718, 726, 771, 772, 775, 1023, 1027, 1030], "uncertainti": [25, 150, 157, 177, 261, 397, 399, 556, 557, 632, 848, 966, 988], "linearsvc": [25, 27, 70, 72, 143, 144, 165, 174, 232, 256, 258, 266, 303, 311, 326, 328, 339, 342, 344, 359, 375, 379, 397, 407, 408, 426, 501, 556, 566, 620, 628, 632, 641, 661, 662, 663, 664, 665, 676, 723, 730, 811, 816, 889, 890, 893, 895, 972, 976, 977, 991, 1018, 1019, 1020, 1024, 1026, 1029, 1034], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 216, 230, 301, 331, 624, 665, 729, 858, 986, 1022, 1029, 1030], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 132, 426, 896, 898], "dual": [25, 27, 70, 72, 143, 144, 174, 232, 256, 258, 266, 303, 311, 328, 329, 339, 344, 407, 408, 460, 461, 467, 556, 557, 600, 628, 635, 636, 641, 642, 647, 648, 649, 650, 651, 652, 670, 673, 723, 816, 828, 829, 888, 889, 890, 893, 976, 977, 991, 1020, 1029, 1032, 1034], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 67, 100, 168, 169, 187, 266, 386, 397, 401, 403, 408, 432, 436, 438, 458, 527, 529, 536, 552, 701, 718, 834, 892, 1018], "behavior": [25, 27, 37, 39, 52, 162, 165, 168, 169, 198, 216, 234, 250, 252, 262, 275, 297, 301, 303, 308, 331, 355, 360, 367, 370, 373, 375, 377, 381, 382, 386, 397, 399, 403, 407, 525, 540, 555, 655, 656, 657, 665, 666, 667, 690, 717, 718, 771, 772, 775, 786, 787, 790, 802, 803, 804, 805, 806, 825, 861, 965, 972, 977, 982, 986, 1000, 1002, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "hing": [25, 205, 208, 210, 267, 328, 329, 333, 386, 655, 665, 723, 888, 895, 972, 990, 991, 1011], "focus": [25, 78, 187, 368, 384, 406, 973, 986, 996], "far": [25, 60, 82, 120, 151, 157, 168, 198, 216, 331, 344, 346, 373, 382, 409, 709, 868, 951, 981, 982, 991, 1000, 1009], "awai": [25, 26, 27, 60, 78, 119, 150, 151, 155, 201, 336, 368, 397, 409, 617, 830, 831, 838, 839, 975, 976, 991, 1009], "shown": [25, 48, 57, 89, 110, 112, 116, 123, 159, 167, 169, 182, 188, 196, 216, 224, 227, 232, 246, 259, 262, 265, 268, 284, 296, 297, 301, 302, 303, 319, 344, 345, 373, 378, 387, 397, 399, 400, 403, 404, 405, 407, 409, 427, 449, 621, 687, 689, 690, 691, 702, 785, 799, 900, 902, 971, 972, 973, 976, 979, 984, 986, 990, 991, 992, 1011, 1022, 1027, 1028, 1029, 1032], "varieti": [25, 162, 246, 307, 331, 381, 384, 398, 399, 401, 406, 407, 632, 979, 992, 996, 1000, 1020, 1033, 1034], "niculescu": [25, 27, 397, 426, 428], "mizil": [25, 27, 397, 426, 428], "caruana": [25, 27, 397, 426, 428], "144943": 25, "465660": 25, "937597": 25, "872186": 25, "851792": 25, "861868": 25, "099820": 25, "376999": 25, "936480": 25, "853174": 25, "877981": 25, "865400": 25, "098758": 25, "321301": 25, "937532": 25, "873724": 25, "848743": 25, "861053": 25, "deal": [25, 57, 71, 162, 168, 182, 223, 346, 373, 378, 398, 400, 407, 408, 409, 463, 485, 692, 697, 751, 775, 854, 925, 972, 1000, 1008, 1021, 1033, 1034], "situat": [25, 44, 57, 72, 167, 168, 204, 227, 262, 373, 381, 401, 403, 404, 406, 457, 517, 523, 571, 861, 864, 876, 886, 970, 972, 978, 979, 989, 992, 1026], "supervis": [25, 27, 37, 49, 54, 58, 86, 104, 115, 138, 139, 220, 235, 246, 259, 288, 313, 322, 325, 345, 359, 362, 368, 375, 385, 386, 397, 399, 402, 403, 404, 406, 407, 409, 426, 428, 453, 477, 492, 493, 542, 577, 579, 582, 583, 623, 665, 717, 786, 787, 790, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 813, 814, 837, 847, 848, 852, 862, 869, 883, 884, 885, 893, 970, 973, 976, 978, 979, 982, 986, 987, 991, 992, 993, 996, 997, 999, 1002, 1003, 1005, 1011, 1013, 1018, 1024, 1030], "icml": [25, 27, 397, 399, 407, 426, 428, 823, 825, 844, 976, 978, 990, 995], "2005": [25, 27, 81, 370, 397, 426, 428, 837, 972, 979, 989], "046": [25, 28, 345], "plot_calibration_curv": [25, 28], "simplex": [26, 659, 783, 863], "arrow": [26, 1032], "green": [26, 34, 81, 92, 113, 127, 132, 150, 174, 224, 296, 302, 306, 312, 386, 977, 1026, 1027, 1029, 1030], "600": [26, 50, 129, 130, 163, 164, 247, 251, 346, 368, 669], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 210, 227, 247, 304, 333, 501], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 56, 114, 115, 116, 117, 118, 119, 132, 170, 171, 239, 240, 256, 271, 311, 313, 344, 355, 385, 386, 397, 406, 408, 546, 547, 548, 550, 555, 556, 558, 788, 789, 818, 898, 965, 977, 1000, 1015, 1022, 1023, 1026, 1027, 1028, 1031, 1032, 1033, 1034], "concaten": [26, 39, 50, 61, 69, 76, 81, 112, 126, 158, 165, 177, 180, 220, 227, 237, 244, 248, 249, 255, 266, 268, 269, 284, 298, 305, 308, 320, 344, 400, 453, 456, 493, 498, 520, 526, 530, 531, 588, 769, 785, 847, 848, 850, 853, 861, 893, 977, 1006, 1019], "randomforestclassifierrandomforestclassifi": [26, 117, 118, 170, 239, 271], "cal_clf": 26, "prefit": [26, 386, 397, 408, 426, 556, 557, 586, 997, 1030, 1031, 1032], "x27": [26, 71, 72, 109, 115, 130, 133, 144, 168, 169, 170, 228, 229, 238, 239, 241, 249, 257, 259, 260, 266, 271, 298, 307, 312, 313, 315, 321], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1030], "unit": [26, 70, 80, 168, 174, 198, 216, 284, 297, 301, 345, 368, 373, 374, 375, 379, 381, 382, 404, 407, 411, 453, 478, 479, 508, 513, 521, 522, 523, 530, 531, 578, 579, 580, 600, 647, 648, 665, 674, 758, 835, 844, 845, 846, 852, 858, 860, 864, 866, 868, 874, 875, 876, 878, 879, 888, 889, 972, 974, 975, 981, 986, 992, 996, 1009, 1022, 1026, 1032, 1033], "mid": [26, 331, 976, 978], "frac": [26, 80, 81, 259, 266, 268, 314, 396, 397, 399, 401, 404, 405, 406, 407, 409, 421, 452, 454, 471, 472, 473, 543, 545, 547, 549, 551, 554, 557, 559, 600, 604, 608, 611, 612, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 658, 659, 661, 662, 667, 668, 669, 685, 743, 757, 821, 822, 831, 839, 846, 889, 891, 894, 897, 899, 968, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 983, 984, 986, 988, 990, 991, 992, 1009], "shrink": [26, 82, 95, 124, 169, 182, 193, 196, 219, 248, 301, 404, 548, 549, 665, 667, 835, 845, 846, 890, 891, 892, 893, 894, 979, 991, 1009], "perfectli": [26, 37, 262, 273, 388, 399, 406, 427, 556, 595, 693, 694, 704, 706, 724, 725, 745, 774, 781, 861, 971, 973, 976, 991, 1031, 1032], "incur": [26, 608, 888, 991, 1026], "correct": [26, 27, 57, 81, 158, 168, 182, 187, 198, 216, 244, 253, 259, 266, 268, 331, 333, 344, 355, 370, 373, 375, 377, 387, 397, 398, 399, 403, 404, 406, 407, 439, 445, 458, 463, 477, 490, 492, 624, 656, 665, 667, 692, 693, 697, 701, 702, 707, 710, 711, 712, 716, 717, 718, 722, 726, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 771, 772, 773, 775, 780, 782, 816, 817, 818, 825, 833, 859, 961, 972, 976, 977, 991, 1002, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "decreas": [26, 39, 46, 55, 58, 66, 75, 127, 146, 158, 168, 169, 206, 230, 231, 261, 266, 272, 295, 303, 306, 311, 349, 359, 361, 373, 397, 399, 406, 430, 434, 452, 510, 523, 524, 530, 546, 547, 548, 549, 550, 551, 553, 554, 555, 591, 624, 625, 626, 665, 666, 667, 695, 701, 715, 770, 777, 845, 846, 896, 897, 898, 899, 965, 967, 972, 973, 976, 979, 980, 983, 984, 990, 991, 1000, 1009, 1020, 1025, 1028, 1031], "cal_scor": 26, "327": [26, 718, 1009], "549": [26, 322, 325], "p1d": 26, "p0": 26, "p1": [26, 132], "p2": [26, 132, 216], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 397, 426], "this_p": 26, "sure": [26, 56, 191, 204, 234, 235, 355, 359, 360, 367, 371, 372, 373, 374, 375, 377, 378, 381, 384, 397, 400, 407, 482, 512, 638, 908, 909, 919, 962, 966, 973, 990, 996, 997, 1025, 1026, 1028, 1033], "renorm": 26, "multiclass": [26, 30, 116, 165, 176, 217, 235, 252, 266, 269, 275, 277, 328, 340, 362, 368, 369, 375, 376, 378, 386, 399, 406, 426, 441, 451, 478, 493, 548, 550, 556, 557, 560, 583, 591, 599, 620, 621, 622, 647, 648, 655, 657, 662, 663, 664, 665, 691, 695, 697, 717, 718, 722, 723, 726, 731, 742, 771, 772, 775, 776, 777, 780, 785, 786, 788, 789, 790, 791, 799, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 855, 869, 888, 890, 893, 970, 972, 987, 991, 992, 998, 999, 1011, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1033, 1034], "argmax": [26, 103, 258, 272, 375, 406, 558, 816, 896, 991, 1031], "505": [26, 28, 338, 342], "plot_calibration_multiclass": [26, 28], "gave": [27, 397, 785, 788, 789, 799, 855], "four": [27, 143, 158, 174, 180, 199, 246, 247, 320, 328, 369, 373, 386, 546, 553, 708, 896, 898, 914, 972, 974, 975, 976, 986, 995], "naiv": [27, 31, 128, 259, 261, 344, 346, 362, 368, 397, 406, 407, 426, 533, 823, 824, 825, 826, 827, 970, 971, 979, 998, 1013, 1018, 1019, 1020, 1021, 1026, 1028, 1031, 1033], "bay": [27, 31, 113, 128, 150, 187, 249, 261, 344, 362, 368, 397, 404, 406, 407, 409, 525, 538, 539, 645, 823, 824, 825, 826, 827, 869, 970, 971, 972, 986, 998, 1011, 1013, 1018, 1019, 1020, 1021, 1026, 1028, 1031, 1033], "train_sampl": [27, 213, 214], "against": [27, 37, 86, 105, 113, 124, 142, 174, 189, 190, 207, 215, 234, 268, 307, 311, 331, 368, 373, 387, 397, 399, 403, 407, 427, 498, 531, 537, 540, 665, 667, 743, 745, 776, 787, 792, 794, 813, 817, 942, 968, 972, 976, 977, 979, 991, 995, 1002], "rfc": [27, 240, 311, 1015], "circleci": [27, 34, 53, 112, 154, 156, 158, 159, 177, 190, 207, 245, 304, 308, 311, 323, 336, 350, 373], "1198": 27, "userwarn": [27, 44, 62, 112, 159, 190, 207, 336, 350, 378, 701, 986, 1024, 1026, 1031], "redundantli": [27, 386], "keyword": [27, 344, 367, 373, 375, 378, 380, 386, 399, 410, 413, 427, 433, 434, 439, 441, 446, 453, 456, 485, 492, 524, 527, 529, 548, 549, 556, 557, 558, 559, 609, 617, 620, 621, 628, 632, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 677, 681, 686, 687, 689, 690, 691, 762, 766, 767, 768, 769, 778, 779, 791, 807, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 848, 852, 920, 922, 943, 965, 973, 976, 979, 989, 1018, 1022, 1024, 1025, 1026, 1028, 1030, 1032, 1033, 1034], "argument": [27, 72, 199, 228, 231, 234, 360, 367, 368, 373, 374, 376, 378, 379, 381, 382, 384, 386, 399, 400, 403, 404, 406, 408, 410, 411, 413, 417, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 446, 448, 450, 452, 457, 458, 482, 485, 492, 497, 522, 524, 525, 527, 529, 540, 548, 549, 552, 556, 557, 558, 559, 566, 570, 571, 577, 578, 580, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 620, 628, 632, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 655, 657, 665, 666, 670, 673, 677, 681, 685, 687, 688, 689, 690, 691, 703, 708, 723, 730, 751, 767, 768, 791, 807, 816, 817, 820, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 845, 848, 852, 886, 892, 902, 906, 915, 920, 922, 943, 944, 945, 946, 960, 965, 968, 972, 973, 974, 976, 979, 983, 984, 991, 992, 1002, 1006, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034], "fmt": [27, 61, 209], "preced": [27, 277, 360, 373, 476, 976, 1018], "contrast": [27, 104, 169, 200, 233, 259, 261, 288, 306, 345, 386, 397, 399, 400, 402, 406, 409, 438, 441, 451, 608, 632, 799, 844, 966, 969, 971, 972, 976, 979, 981, 984, 986, 989, 990, 992, 1028], "push": [27, 373, 377, 397, 999], "equat": [27, 339, 373, 399, 404, 406, 546, 547, 548, 549, 553, 554, 555, 579, 616, 671, 672, 676, 751, 868, 896, 897, 898, 899, 966, 973, 976, 981, 1026], "twice": [27, 271, 344, 346, 375, 409, 608, 718, 720, 927, 1027], "approx": [27, 95, 232, 404, 406, 407, 976, 983, 990], "rare": [27, 169, 307, 355, 377, 384, 386, 388, 397, 399, 403, 578, 637, 647, 648, 658, 669, 888, 913, 944, 972, 986, 1000, 1025, 1026, 1027, 1031, 1033], "explan": [27, 86, 234, 359, 372, 373, 397, 407, 965, 975, 977, 992, 1000, 1021], "bag": [27, 70, 108, 114, 116, 125, 134, 165, 170, 345, 346, 369, 397, 505, 506, 507, 544, 545, 546, 547, 548, 549, 552, 553, 554, 729, 790, 814, 897, 974, 977, 998, 1013, 1018, 1020, 1021, 1022, 1023, 1024, 1031, 1032, 1034], "underli": [27, 56, 80, 129, 147, 199, 201, 234, 264, 283, 284, 352, 360, 373, 384, 386, 388, 390, 395, 397, 399, 401, 403, 404, 405, 406, 408, 409, 426, 440, 441, 442, 451, 453, 454, 460, 461, 467, 513, 556, 557, 558, 559, 582, 583, 586, 591, 647, 657, 669, 680, 684, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 833, 888, 896, 897, 898, 899, 941, 972, 973, 977, 982, 989, 991, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1034], "restrict": [27, 66, 67, 162, 165, 215, 294, 299, 375, 379, 384, 397, 399, 406, 407, 454, 482, 491, 521, 570, 599, 642, 643, 644, 645, 647, 671, 672, 702, 770, 776, 777, 814, 836, 838, 839, 840, 842, 844, 845, 846, 848, 874, 976, 992, 1012, 1013, 1018, 1020, 1028, 1030], "interv": [27, 108, 134, 157, 165, 182, 198, 199, 200, 216, 259, 368, 386, 397, 403, 406, 409, 427, 428, 505, 506, 507, 546, 547, 549, 551, 553, 554, 624, 625, 627, 666, 730, 736, 738, 789, 806, 814, 851, 853, 867, 890, 891, 892, 912, 968, 972, 976, 986, 992, 1025, 1029], "move": [27, 119, 260, 298, 331, 372, 373, 377, 379, 397, 399, 538, 539, 560, 561, 562, 564, 566, 567, 943, 1010, 1018, 1019, 1023, 1026, 1028, 1031, 1032], "characterist": [27, 44, 62, 147, 155, 165, 227, 252, 256, 275, 301, 355, 368, 370, 378, 397, 403, 406, 409, 492, 493, 612, 627, 647, 691, 695, 697, 715, 770, 776, 777, 804, 814, 817, 855, 893, 972], "difficult": [27, 55, 168, 206, 373, 381, 397, 404, 406, 542, 543, 548, 550, 551, 971, 973, 975, 979, 981, 983, 992, 1000, 1018, 1032], "bayesian": [27, 54, 165, 176, 182, 186, 217, 243, 245, 249, 250, 251, 404, 426, 513, 517, 521, 633, 634, 645, 646, 783, 784, 849, 851, 863, 868, 965, 996, 998, 1012, 1013, 1024, 1031], "domingo": [27, 776, 976], "pazzani": 27, "proc": [27, 79, 397, 407, 439, 678, 682, 823, 965, 973, 978, 982], "13th": 27, "intl": [27, 403], "1996": [27, 399, 406, 410, 433, 505, 506, 507, 544, 545, 986], "zadrozni": [27, 397, 426, 665], "bianca": 27, "charl": [27, 752, 1018, 1021, 1024, 1028, 1030, 1033], "elkan": [27, 312, 397, 426, 432, 436, 448, 665, 1024, 1028, 1029, 1031, 1032], "vol": [27, 158, 182, 265, 370, 399, 463, 548, 549, 617, 624, 634, 653, 674, 675, 783, 813, 825, 966, 978, 979], "2001": [27, 155, 170, 258, 396, 399, 406, 426, 440, 441, 442, 451, 500, 548, 549, 553, 554, 617, 623, 628, 634, 680, 685, 723, 776, 869, 881, 913, 966, 972, 976, 982, 984, 986, 988, 991], "174": [27, 28, 122, 298, 379, 573], "plot_compare_calibr": [27, 28], "069": [28, 257], "auto_examples_calibr": 28, "calibr": [28, 30, 216, 362, 386, 501, 504, 553, 558, 647, 665, 698, 717, 729, 772, 775, 776, 814, 826, 885, 888, 965, 972, 976, 989, 991, 998, 1013, 1015, 1022, 1024], "discrimin": [29, 35, 104, 142, 144, 165, 174, 213, 220, 235, 288, 362, 370, 397, 406, 464, 501, 538, 539, 555, 771, 837, 965, 973, 976, 979, 990, 992, 998, 1009, 1013, 1021], "ellipsoid": [29, 35, 165, 243, 244, 251, 538, 539, 783, 784, 970, 975], "ledoit": [29, 35, 77, 78, 82, 83, 165, 462, 464, 468, 469, 501, 538, 970], "wolf": [29, 35, 77, 78, 82, 83, 165, 462, 464, 468, 469, 501, 538, 970, 1025], "oa": [29, 35, 77, 83, 165, 401, 458, 459, 462, 463, 465, 466, 501, 538, 785, 970], "hand": [29, 35, 86, 89, 97, 100, 116, 123, 142, 155, 165, 168, 169, 191, 205, 223, 230, 231, 233, 234, 256, 261, 268, 331, 359, 367, 368, 370, 373, 375, 379, 381, 385, 393, 404, 405, 406, 408, 491, 632, 686, 702, 776, 814, 869, 893, 965, 969, 972, 976, 978, 980, 984, 989, 991, 1000, 1002, 1005, 1008, 1009], "built": [30, 86, 111, 119, 121, 170, 206, 262, 292, 311, 350, 359, 371, 373, 374, 375, 377, 379, 381, 382, 384, 385, 386, 389, 393, 398, 399, 400, 403, 406, 408, 434, 492, 542, 543, 544, 545, 550, 551, 577, 578, 582, 586, 628, 629, 630, 631, 632, 635, 636, 641, 647, 649, 650, 651, 652, 661, 662, 663, 664, 670, 788, 789, 796, 819, 822, 828, 829, 898, 899, 960, 972, 976, 977, 989, 990, 992, 996, 1000, 1011, 1018, 1021, 1022, 1024, 1030], "enabl": [30, 50, 72, 121, 169, 206, 221, 234, 303, 312, 314, 315, 340, 371, 373, 378, 381, 384, 386, 389, 390, 395, 398, 399, 400, 404, 406, 407, 438, 457, 523, 524, 530, 548, 549, 550, 551, 552, 568, 569, 579, 580, 591, 599, 783, 784, 785, 788, 848, 849, 861, 862, 885, 886, 888, 889, 890, 891, 892, 893, 894, 903, 943, 966, 968, 973, 975, 976, 979, 986, 987, 990, 991, 997, 1000, 1018, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "troubl": [30, 407], "ovr": [30, 190, 213, 277, 311, 340, 647, 648, 776, 817, 888, 890, 893, 972, 976, 977, 991, 1018, 1023, 1024, 1026, 1027, 1028, 1032, 1033], "gpc": [30, 149, 160, 165, 493, 599, 600, 602, 603, 608, 609, 611, 612, 692, 729, 998, 1013, 1028], "gaussian_process": [30, 31, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 362, 386, 409, 632, 977, 1021, 1024, 1025], "gaussianprocessclassifi": [30, 31, 151, 152, 153, 154, 158, 386, 409, 600, 608, 609, 611, 612, 977, 1024, 1026, 1028, 1032], "accuracy_scor": [30, 110, 151, 263, 306, 322, 344, 355, 385, 390, 546, 553, 697, 717, 718, 722, 726, 730, 771, 772, 775, 780, 782, 965, 976, 1019, 1020, 1021, 1030], "iri": [30, 41, 45, 74, 88, 93, 94, 99, 106, 107, 108, 121, 131, 134, 139, 143, 149, 160, 165, 176, 181, 191, 217, 241, 246, 253, 264, 265, 268, 269, 282, 290, 296, 313, 318, 325, 326, 327, 331, 334, 342, 348, 353, 354, 366, 367, 385, 399, 400, 403, 404, 406, 485, 493, 530, 538, 542, 546, 553, 599, 611, 620, 665, 785, 799, 883, 884, 885, 888, 893, 896, 900, 901, 902, 965, 966, 970, 975, 976, 979, 983, 986, 989, 990, 991, 992, 1002, 1009, 1010, 1013, 1031], "load_iri": [30, 41, 45, 74, 90, 99, 102, 104, 106, 119, 121, 131, 139, 143, 152, 181, 191, 207, 241, 246, 253, 264, 265, 266, 268, 269, 282, 287, 290, 296, 311, 313, 316, 324, 327, 328, 331, 334, 350, 353, 385, 393, 399, 400, 403, 406, 408, 550, 556, 591, 599, 608, 609, 611, 612, 620, 647, 648, 776, 785, 788, 789, 791, 799, 816, 837, 883, 884, 885, 896, 898, 900, 901, 902, 966, 971, 976, 977, 978, 979, 983, 986, 992, 1002, 1008, 1009, 1010, 1024, 1026, 1029], "saga": [30, 189, 213, 214, 647, 648, 661, 663, 676, 799, 972, 1025, 1027], "multi_class": [30, 190, 213, 268, 311, 558, 599, 647, 648, 776, 822, 888, 972, 977, 991, 1018, 1022, 1026, 1031, 1033], "n_classifi": [30, 558, 559], "xx": [30, 34, 42, 58, 80, 119, 123, 128, 139, 152, 153, 154, 169, 185, 205, 208, 209, 210, 211, 212, 224, 227, 235, 248, 285, 295, 303, 304, 324, 330, 331, 335, 336, 337, 340, 341, 377], "yy": [30, 34, 42, 58, 80, 119, 128, 139, 152, 154, 169, 205, 209, 210, 211, 212, 224, 227, 235, 285, 295, 303, 304, 324, 330, 331, 335, 336, 337, 340, 341], "xfull": 30, "imshow_handl": 30, "04": [30, 40, 42, 54, 67, 68, 97, 105, 140, 148, 155, 160, 168, 172, 179, 197, 216, 235, 242, 244, 250, 259, 260, 272, 275, 292, 293, 299, 317, 338, 370, 406, 408, 460, 461, 776, 785, 799, 972, 976, 980, 990], "cax": [30, 153, 270], "orient": [30, 95, 168, 219, 301, 386, 900, 973], "horizont": [30, 95, 219, 232, 301, 304, 378, 386, 453, 504, 686, 690], "087": [30, 35, 331, 342], "plot_classification_prob": [30, 35], "salt": [31, 232, 303, 1032], "convei": [31, 224, 303, 1009], "linearli": [31, 100, 112, 168, 177, 212, 220, 227, 268, 269, 303, 306, 335, 344, 359, 370, 384, 404, 406, 504, 631, 696, 976, 979, 982, 991, 1009, 1025, 1034], "semi": [31, 235, 303, 313, 325, 362, 368, 386, 477, 493, 524, 577, 579, 665, 717, 814, 848, 852, 883, 884, 885, 893, 974, 979, 982, 998, 1013, 1018, 1030, 1033], "transpar": [31, 303, 961, 1000], "ga\u00ebl": [31, 45, 51, 73, 89, 90, 102, 181, 195, 196, 303, 335, 336, 387, 1000], "modifi": [31, 45, 51, 73, 75, 89, 90, 181, 182, 195, 196, 208, 219, 220, 221, 234, 246, 336, 341, 371, 373, 375, 377, 386, 399, 406, 409, 432, 436, 443, 448, 457, 471, 472, 473, 474, 484, 499, 570, 599, 600, 602, 608, 665, 667, 678, 682, 717, 718, 756, 771, 772, 775, 906, 972, 989, 990, 997, 1008, 1012, 1013, 1018, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1033], "listedcolormap": [31, 119, 282, 287, 290, 295, 303], "make_circl": [31, 44, 62, 100, 128, 224, 295, 296, 303, 321, 369, 1019, 1026, 1029], "make_moon": [31, 44, 62, 227, 259, 295, 296, 303, 369, 965, 1025, 1029], "discriminant_analysi": [31, 33, 34, 104, 220, 288, 355, 362, 395, 525, 837, 970, 977, 1018, 1021, 1022, 1023, 1024, 1025], "quadraticdiscriminantanalysi": [31, 34, 538, 970, 977, 979, 1018, 1023, 1025, 1033], "adaboostclassifi": [31, 109, 110, 112, 119, 406, 543, 548, 550, 1020, 1021, 1024, 1025, 1027, 1028, 1031, 1033, 1034], "decisionboundarydisplai": [31, 56, 112, 126, 131, 181, 190, 207, 262, 282, 287, 290, 306, 327, 328, 329, 332, 333, 350, 1032, 1033], "kneighborsclassifi": [31, 131, 138, 281, 282, 287, 288, 306, 313, 315, 344, 406, 591, 831, 835, 836, 837, 838, 839, 977, 979, 1009, 1018, 1028, 1030, 1031, 1032, 1033, 1034], "neural_network": [31, 165, 169, 238, 294, 295, 296, 297, 298, 361, 362, 384, 977, 980, 1020], "mlpclassifi": [31, 165, 294, 295, 297, 299, 361, 491, 493, 503, 511, 560, 844, 846, 858, 977, 980, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "decisiontreeclassifi": [31, 109, 110, 112, 119, 131, 263, 349, 350, 353, 386, 406, 542, 544, 546, 548, 550, 553, 620, 791, 812, 897, 898, 900, 901, 902, 966, 977, 992, 1019, 1020, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "net": [31, 165, 176, 182, 189, 209, 217, 272, 379, 398, 403, 460, 461, 467, 490, 513, 546, 547, 548, 549, 553, 554, 555, 635, 636, 641, 646, 647, 648, 649, 650, 651, 652, 657, 665, 667, 670, 673, 844, 896, 897, 898, 899, 965, 976, 981, 990, 998, 1000, 1013, 1018, 1023, 1027, 1028, 1030], "adaboost": [31, 108, 119, 134, 165, 508, 509, 542, 543, 548, 620, 692, 782, 814, 896, 897, 998, 1013, 1020], "qda": [31, 34, 370, 538, 539, 998, 1013, 1023], "025": [31, 200, 229, 242, 256, 679, 683], "n_clusters_per_class": [31, 91, 114, 144, 146, 256, 289, 295, 303, 378, 504], "linearly_separ": [31, 295], "ds_cnt": [31, 303, 304], "rdbu": [31, 95, 214, 295, 331, 336], "cm_bright": [31, 295, 303], "ff0000": [31, 287, 295], "0000ff": [31, 287, 295], "ep": [31, 44, 46, 49, 55, 65, 181, 183, 222, 231, 384, 399, 410, 433, 439, 444, 460, 461, 467, 620, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 670, 671, 672, 673, 679, 683, 703, 729, 840, 880, 881, 882, 988, 1033, 1034], "lstrip": [31, 44, 62, 227, 295, 303], "370": [31, 35], "plot_classifier_comparison": [31, 35, 303], "8x8": [32, 89, 189, 231, 288, 298, 370, 491, 1008], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 58, 72, 73, 89, 137, 138, 145, 189, 205, 220, 231, 232, 257, 258, 261, 267, 274, 281, 283, 288, 296, 298, 319, 320, 379, 400, 434, 435, 521, 522, 523, 524, 588, 589, 627, 628, 657, 677, 678, 679, 680, 1002, 1006, 1007, 1008, 1009, 1010, 1024, 1029], "set_axis_off": 32, "gray_r": [32, 89, 98, 153, 220, 298, 319, 320, 1008], "entir": [32, 162, 198, 206, 298, 301, 312, 353, 355, 367, 374, 375, 386, 393, 399, 403, 405, 407, 461, 481, 523, 577, 578, 579, 580, 636, 640, 642, 644, 647, 648, 650, 652, 654, 655, 657, 665, 671, 672, 722, 782, 816, 817, 820, 845, 847, 848, 861, 873, 874, 876, 877, 878, 879, 945, 965, 966, 976, 986, 990, 992, 1009, 1027, 1028], "97": [32, 105, 171, 235, 250, 298, 320, 331, 370, 379, 385, 403, 647, 971, 977, 986, 1018], "98": [32, 34, 42, 44, 54, 62, 64, 82, 98, 227, 257, 295, 298, 303, 320, 370, 377, 403, 406, 648, 823, 971, 978, 1006, 1011], "86": [32, 70, 144, 189, 303, 319, 320, 776, 896, 976, 1007], "92": [32, 34, 50, 98, 144, 174, 257, 298, 319, 320, 331, 368, 370, 527, 529, 536, 551, 586, 785, 799, 971, 1011], "899": [32, 257, 323], "confus": [32, 165, 252, 268, 275, 319, 320, 344, 386, 457, 493, 620, 641, 686, 702, 704, 707, 717, 718, 726, 742, 772, 775, 814, 886, 893, 1011, 1018, 1019, 1023, 1027, 1028, 1030, 1031, 1032, 1033], "figure_": [32, 169, 238, 311, 313, 380, 427, 620, 621, 686, 687, 689, 690, 691, 791, 807], "confusion_matrix": [32, 228, 253, 319, 320, 686, 702, 742, 811, 976, 1011, 1019, 1024, 1025, 1028, 1029, 1031], "gt": [32, 71, 72, 115, 130, 168, 249, 257, 271, 371, 373, 377], "rebuilt": [32, 828, 829], "459": [32, 35, 399, 431], "plot_digits_classif": [32, 35], "oracl": [33, 198, 216, 412, 458, 459, 462, 463, 464, 465, 970, 1018], "shrinkag": [33, 77, 79, 82, 83, 103, 125, 165, 290, 412, 458, 459, 462, 463, 464, 465, 466, 468, 469, 470, 528, 532, 538, 550, 551, 785, 972, 986, 998, 1013, 1018, 1022, 1023, 1025], "lineardiscriminantanalysi": [33, 34, 104, 220, 288, 355, 395, 525, 539, 837, 970, 977, 979, 1018, 1021, 1022, 1023, 1024, 1025, 1027, 1030, 1032, 1033, 1034], "200": [33, 34, 44, 50, 54, 60, 75, 98, 104, 107, 112, 121, 123, 129, 154, 184, 193, 199, 202, 203, 204, 210, 215, 220, 239, 244, 260, 266, 268, 269, 301, 304, 321, 323, 330, 331, 352, 355, 368, 375, 384, 404, 406, 411, 429, 443, 457, 460, 461, 522, 523, 524, 527, 528, 529, 532, 536, 573, 638, 640, 660, 668, 681, 799, 845, 846, 886, 890, 891, 892, 893, 894, 991], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 131, 132, 406, 558], "lsqr": [33, 308, 538, 661, 663, 676, 970, 1019, 1025, 1032], "clf2": [33, 131, 132, 375, 393, 406, 558], "store_precis": [33, 79, 458, 459, 462, 463, 464, 465], "assume_cent": [33, 79, 401, 412, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469], "clf3": [33, 131, 132, 375, 406, 558], "covariance_estim": [33, 538, 970, 1030], "features_samples_ratio": 33, "gold": [33, 192, 199, 201, 204, 208, 212, 215, 245, 250, 266, 285, 330, 379], "navi": [33, 70, 79, 99, 104, 105, 129, 177, 201, 209, 222, 245, 246, 247, 250, 266, 268, 284, 291, 321, 352], "192": [33, 35, 122, 379, 1018], "plot_lda": [33, 35], "doubl": [34, 116, 271, 373, 386, 404, 527, 529, 536, 828, 829, 839, 960, 966, 991, 992, 1018, 1028, 1029], "own": [34, 116, 216, 234, 249, 279, 281, 321, 345, 360, 367, 376, 377, 378, 381, 382, 389, 398, 399, 411, 415, 429, 443, 522, 546, 553, 635, 783, 784, 830, 831, 832, 834, 836, 838, 839, 840, 862, 896, 898, 914, 919, 944, 972, 978, 979, 982, 986, 991, 1000, 1010, 1011, 1025, 1026, 1028], "mpl": [34, 244, 245, 246, 250, 301], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "plot_lda_qda": [34, 35], "matplotlibdeprecationwarn": 34, "minor": [34, 262, 266, 368, 376, 387, 485, 976, 1018, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "dataset_fixed_cov": 34, "dim": [34, 207, 231, 282, 287, 288, 290, 327, 328, 516], "dataset_cov": 34, "matric": [34, 40, 80, 82, 95, 203, 245, 246, 248, 249, 250, 279, 292, 312, 323, 344, 345, 365, 367, 375, 376, 384, 385, 386, 398, 399, 400, 401, 402, 404, 407, 408, 414, 439, 440, 442, 453, 462, 471, 472, 473, 523, 524, 527, 529, 530, 533, 536, 538, 539, 544, 545, 552, 555, 570, 571, 578, 632, 647, 653, 661, 663, 676, 742, 748, 756, 762, 766, 767, 768, 769, 778, 783, 784, 814, 832, 835, 840, 851, 855, 857, 860, 863, 865, 866, 868, 871, 873, 875, 877, 878, 879, 880, 881, 890, 891, 893, 894, 904, 925, 931, 940, 947, 949, 950, 966, 970, 973, 974, 975, 977, 979, 980, 988, 990, 991, 996, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "linalg": [34, 54, 78, 79, 82, 101, 103, 105, 184, 244, 245, 246, 249, 250, 373, 379, 404, 440, 441, 442, 451, 521, 524, 530, 533, 646, 661, 663, 676, 680, 684, 923], "plot_data": 34, "fig_index": 34, "splot": [34, 245, 250], "tp": [34, 399, 701, 707, 719, 770, 771, 772, 775, 900, 976], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 113, 168, 331, 368], "000099": 34, "pcolormesh": [34, 128, 139, 181, 282, 287, 327, 331, 335, 620], "white": [34, 58, 60, 95, 155, 168, 212, 219, 285, 298, 303, 324, 330, 404, 407, 409, 614, 992, 1018, 1021, 1024, 1028, 1032], "means_": [34, 244, 245, 246, 247, 249, 250, 538, 539, 783, 784], "yellow": [34, 92, 331, 977], "markers": [34, 49, 55, 58, 61, 63, 64, 123, 153, 157, 230, 315], "markeredgecolor": [34, 49, 55, 61, 63, 64], "plot_ellips": [34, 244], "cov": [34, 82, 86, 112, 249, 373, 386, 389, 392, 402, 412, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 508, 521, 523, 530, 537], "eigh": [34, 244, 245, 246, 249, 250, 404, 411, 522, 524, 1033], "arctan": [34, 245, 250, 369, 507], "180": [34, 244, 245, 246, 249, 250, 253, 261, 275, 288, 292, 345, 379, 409, 491], "ell": [34, 244, 245, 246, 250, 396], "patch": [34, 50, 244, 245, 246, 249, 250, 254, 368, 377, 384, 404, 406, 544, 545, 572, 573, 576, 1018, 1026], "ellips": [34, 227, 244, 245, 246, 249, 250, 982], "set_clip_box": [34, 244, 245, 246, 249, 250], "set_alpha": [34, 109, 244, 245, 246, 249, 250], "add_artist": [34, 220, 244, 245, 246, 249, 250], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 128, 220, 345, 382, 395, 402, 411, 440, 442, 471, 472, 474, 521, 522, 523, 524, 528, 529, 530, 533, 535, 538, 539, 653, 661, 662, 663, 674, 675, 676, 847, 925, 970, 1011, 1020, 1024, 1025, 1031, 1033], "store_covari": [34, 538, 539, 1023, 1025], "tight": [34, 40, 105, 112, 119, 139, 143, 183, 185, 190, 191, 192, 202, 203, 207, 210, 212, 215, 221, 224, 248, 279, 285, 286, 290, 291, 327, 330, 331, 334, 335, 336, 350, 571, 681, 1030], "292": [34, 35, 345, 389, 406, 723], "auto_examples_classif": 35, "handwritten": [36, 68, 165, 218, 223, 225, 231, 257, 297, 298, 319, 320, 366, 399, 406, 436, 491, 530, 533, 538, 555, 677, 678, 679, 680, 681, 693, 694, 706, 725, 779, 781, 837, 849, 858, 868, 881, 973, 979, 1002, 1013], "hierarch": [36, 40, 54, 68, 165, 171, 315, 386, 407, 430, 432, 434, 435, 493, 501, 503, 511, 519, 536, 719, 841, 868, 993, 997, 1012, 1013, 1018, 1021, 1022, 1034], "coin": [36, 68, 165, 399, 407, 430, 451, 988, 1010], "shift": [36, 44, 68, 165, 177, 222, 249, 284, 298, 301, 401, 405, 429, 437, 447, 450, 458, 501, 504, 678, 682, 834, 857, 986, 1012, 1013, 1018, 1022, 1026], "chanc": [36, 49, 68, 165, 198, 206, 213, 216, 259, 265, 268, 269, 307, 345, 355, 372, 399, 403, 689, 691, 693, 694, 697, 705, 743, 745, 774, 781, 813, 976, 984, 992, 1034], "agglom": [36, 44, 47, 68, 165, 399, 430, 434, 491, 680, 766, 841, 1021], "bisect": [36, 68, 165, 432, 436, 501, 1032], "quantiz": [36, 68, 165, 367, 368, 399, 432, 436, 438, 495, 767, 853, 950, 986], "birch": [36, 44, 68, 165, 315, 361, 386, 435, 438, 501, 1012, 1013, 1022, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "toi": [36, 49, 53, 57, 68, 86, 99, 113, 126, 131, 132, 165, 180, 188, 212, 226, 242, 244, 296, 328, 338, 366, 379, 384, 406, 407, 429, 430, 431, 433, 435, 437, 438, 439, 441, 447, 458, 501, 503, 511, 552, 628, 666, 714, 744, 784, 834, 841, 849, 868, 892, 973, 975, 976, 982, 986, 1013], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 56, 67, 68, 165, 171, 429, 430, 434, 435, 452, 501, 503, 511, 868, 996, 1010, 1021, 1026, 1029], "dbscan": [36, 44, 55, 65, 68, 165, 384, 386, 435, 439, 441, 444, 501, 693, 694, 706, 725, 779, 781, 840, 868, 979, 1012, 1013, 1018, 1020, 1022, 1023, 1025, 1026, 1027, 1034], "hdbscan": [36, 44, 68, 165, 433, 501, 868, 966, 996, 1012, 1013, 1034], "optic": [36, 44, 68, 165, 315, 366, 410, 433, 435, 444, 445, 446, 491, 1012, 1013, 1027, 1031, 1032, 1033, 1034], "affin": [36, 44, 68, 165, 301, 365, 375, 386, 398, 404, 429, 430, 434, 441, 443, 451, 501, 524, 680, 684, 693, 694, 706, 725, 779, 781, 884, 970, 973, 976, 1012, 1013, 1018, 1019, 1022, 1028, 1029, 1031, 1033], "propag": [36, 68, 165, 318, 325, 368, 398, 429, 443, 491, 501, 503, 686, 693, 694, 702, 703, 706, 707, 725, 779, 781, 848, 862, 883, 884, 885, 942, 943, 980, 998, 1012, 1013, 1018, 1030, 1033], "agglomer": [36, 68, 165, 365, 399, 407, 434, 491, 589, 595, 634, 785, 790, 848, 1013], "unstructur": [36, 68, 165, 297, 399, 430, 434, 452, 492, 519, 841, 988, 1000, 1022], "dendrogram": [36, 68, 165, 171, 399, 430, 434, 493, 1030], "pictur": [36, 68, 165, 231, 250, 368, 387, 399, 404, 407, 451, 482, 483, 510, 997], "greek": [36, 68, 165, 399, 451], "silhouett": [36, 38, 49, 57, 58, 68, 165, 345, 373, 436, 501, 778, 779, 1018, 1022], "embed": [36, 44, 46, 68, 115, 150, 165, 218, 221, 223, 225, 226, 242, 279, 288, 379, 386, 398, 399, 430, 441, 451, 478, 491, 533, 538, 555, 571, 628, 677, 678, 679, 680, 681, 682, 683, 684, 685, 837, 849, 858, 880, 881, 882, 968, 979, 982, 988, 993, 1012, 1013, 1018, 1019, 1029, 1030, 1032], "explor": [37, 113, 114, 223, 224, 260, 261, 267, 268, 308, 313, 331, 345, 355, 367, 370, 372, 379, 393, 399, 406, 461, 785, 788, 796, 869, 965, 972, 973, 975, 981, 983, 984, 986, 1000, 1005, 1011, 1024], "uniformli": [37, 116, 123, 142, 227, 244, 311, 375, 505, 506, 507, 540, 631, 789, 797, 799, 867, 965, 966, 976, 979, 986, 1022, 1027], "divid": [37, 43, 48, 91, 95, 144, 155, 198, 244, 345, 355, 369, 370, 396, 399, 403, 404, 458, 459, 460, 461, 462, 463, 464, 465, 501, 508, 523, 530, 639, 640, 643, 644, 645, 653, 654, 665, 666, 667, 708, 714, 722, 726, 744, 780, 782, 845, 846, 890, 893, 925, 928, 929, 965, 973, 975, 976, 979, 986, 990, 1011, 1018, 1025, 1026, 1029], "randomli": [37, 48, 50, 61, 71, 88, 93, 113, 126, 162, 165, 169, 202, 215, 231, 235, 249, 254, 265, 277, 319, 355, 360, 382, 384, 385, 399, 403, 406, 409, 438, 447, 501, 504, 508, 512, 520, 526, 534, 535, 540, 548, 549, 552, 553, 554, 599, 600, 660, 668, 679, 683, 705, 783, 784, 844, 882, 896, 897, 898, 899, 975, 977, 979, 982, 984, 988, 992, 1009, 1011, 1029, 1033], "quiroz": [37, 57, 116, 177, 182, 260, 262, 306, 344, 345, 346], "fundament": [37, 49, 81, 345, 371, 385, 402, 485, 527, 529, 536, 697, 972, 976], "homogen": [37, 38, 39, 44, 46, 49, 55, 58, 345, 368, 384, 386, 401, 406, 409, 435, 603, 693, 706, 719, 724, 725, 745, 781, 973, 974, 976, 1027], "frequent": [37, 163, 262, 268, 269, 345, 362, 370, 373, 407, 540, 579, 619, 838, 861, 862, 865, 877, 966, 968, 976, 990, 994, 997], "ari": [37, 58, 345, 399, 694, 1023, 1029], "mutual": [37, 38, 49, 55, 58, 141, 148, 165, 406, 408, 435, 581, 584, 585, 588, 589, 595, 596, 597, 598, 693, 694, 704, 743, 745, 774, 781, 965, 972, 976, 977, 1018, 1024, 1034], "mi": [37, 142, 399, 596, 597, 693, 743, 745, 966, 976, 990], "theoret": [37, 57, 150, 398, 399, 406, 542, 543, 628, 693, 714, 744, 888, 965, 973, 975, 976, 978, 988, 990, 991, 999, 1000], "nmi": [37, 399, 706, 724, 725, 745], "ami": [37, 49, 58, 399, 693], "score_func": [37, 71, 72, 581, 584, 585, 587, 588, 589, 730, 1018, 1020], "rand_scor": [37, 399, 704, 976, 1030], "adjusted_rand_scor": [37, 38, 49, 58, 345, 399, 693, 704, 730, 745, 774, 976, 1031], "mutual_info_scor": [37, 399, 693, 976, 1026, 1029, 1030], "normalized_mutual_info_scor": [37, 399, 724, 743, 781, 976, 1026, 1032], "adjusted_mutual_info_scor": [37, 38, 49, 58, 399, 694, 704, 743, 745, 774, 976, 1018, 1026, 1030, 1034], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 61, 174, 345], "seaborn": [37, 109, 111, 167, 168, 177, 182, 249, 259, 282, 373, 389, 392, 996], "sn": [37, 109, 111, 167, 168, 177, 182, 249, 259, 282], "color_palett": [37, 109, 111, 249], "colorblind": [37, 109, 111], "vx": 37, "errorbar": [37, 61, 79, 81, 146, 156, 157, 281, 322, 334, 791, 807], "refer": [37, 38, 60, 63, 71, 124, 130, 147, 159, 216, 234, 266, 289, 301, 311, 312, 313, 314, 315, 316, 345, 360, 362, 371, 373, 374, 375, 377, 378, 379, 380, 381, 384, 385, 386, 387, 389, 393, 400, 410, 411, 412, 426, 427, 428, 429, 431, 433, 435, 436, 437, 439, 440, 441, 442, 443, 446, 451, 452, 453, 456, 457, 458, 461, 462, 463, 464, 487, 492, 500, 502, 504, 505, 506, 507, 508, 509, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 533, 536, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 579, 582, 583, 584, 591, 596, 597, 599, 600, 603, 608, 611, 612, 616, 617, 620, 621, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 636, 638, 640, 642, 644, 645, 647, 650, 652, 654, 655, 656, 657, 660, 662, 664, 665, 667, 668, 671, 672, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 693, 694, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 722, 723, 724, 725, 726, 728, 729, 731, 744, 746, 747, 757, 771, 773, 774, 776, 777, 778, 779, 781, 783, 784, 785, 787, 788, 789, 791, 799, 807, 808, 809, 810, 811, 812, 813, 815, 818, 819, 823, 824, 825, 827, 833, 834, 835, 837, 844, 845, 846, 854, 855, 864, 865, 869, 876, 881, 882, 883, 884, 885, 886, 888, 890, 891, 893, 894, 896, 897, 898, 899, 913, 925, 942, 987, 997, 1002, 1006, 1010, 1011, 1018, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033], "satur": [37, 168, 301], "uniform_labelings_scor": 37, "nwith": [37, 57, 61, 146, 345], "constantli": [37, 198, 1000], "unbound": [37, 975, 1032], "cardin": [37, 117, 118, 124, 170, 307, 308, 399, 406, 452, 542, 543, 546, 547, 548, 549, 553, 554, 555, 668, 861, 862, 869, 896, 897, 898, 899, 976, 977, 984, 986, 1032, 1033], "why": [37, 52, 95, 116, 168, 170, 174, 187, 256, 259, 344, 345, 373, 381, 386, 399, 401, 404, 410, 433, 436, 440, 976, 978, 991, 1006, 1009, 1021], "chart": [37, 264, 977, 1004, 1021], "henc": [37, 60, 72, 168, 202, 231, 268, 331, 344, 345, 359, 368, 375, 377, 379, 386, 399, 403, 406, 407, 476, 497, 528, 530, 531, 532, 552, 579, 632, 635, 641, 649, 651, 661, 676, 693, 694, 698, 704, 719, 745, 774, 781, 804, 805, 823, 824, 825, 826, 827, 863, 973, 975, 976, 977, 982, 983, 986, 997, 1025, 1026, 1029, 1030, 1032], "safe": [37, 168, 187, 234, 345, 373, 375, 399, 400, 423, 497, 498, 577, 580, 762, 766, 882, 942, 948, 979, 1024, 1025, 1026, 1031, 1032], "stabil": [37, 114, 168, 202, 220, 264, 301, 345, 386, 396, 435, 639, 643, 659, 826, 845, 846, 864, 876, 924, 966, 972, 975, 986, 997, 1002, 1018, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "mislead": [37, 117, 118, 124, 168, 374, 388, 406, 542, 543, 546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899, 1013, 1031], "meaning": [37, 224, 288, 346, 396, 403, 407, 408, 409, 537, 717, 718, 726, 771, 772, 775, 837, 980, 990, 991, 1018, 1034], "917": [37, 49, 68], "plot_adjusted_for_chance_measur": [37, 68], "brendan": [38, 429, 443], "frei": [38, 429, 443, 1028], "delbert": [38, 429, 443], "dueck": [38, 429, 443], "messag": [38, 44, 62, 70, 95, 234, 344, 345, 368, 371, 372, 373, 377, 378, 381, 382, 399, 429, 443, 457, 528, 532, 537, 563, 616, 701, 785, 788, 789, 791, 799, 807, 812, 815, 817, 837, 845, 846, 886, 907, 908, 909, 912, 915, 939, 960, 976, 986, 1018, 1022, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "feb": [38, 429, 443], "affinitypropag": [38, 44, 315, 399, 1018, 1021, 1022, 1026, 1029, 1031, 1032, 1033, 1034], "labels_tru": [38, 49, 55, 64, 399, 693, 694, 703, 704, 706, 719, 724, 725, 743, 745, 774, 781], "af": 38, "prefer": [38, 44, 55, 250, 268, 301, 355, 359, 360, 361, 371, 373, 374, 375, 386, 399, 403, 404, 406, 407, 429, 443, 460, 461, 467, 476, 497, 498, 616, 621, 622, 643, 647, 648, 690, 714, 716, 745, 746, 837, 863, 888, 889, 930, 942, 965, 968, 970, 972, 976, 981, 991, 992, 996, 1009, 1019, 1025, 1027, 1031, 1032], "cluster_centers_indic": [38, 443], "cluster_centers_indices_": [38, 429], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 55, 58, 61, 62, 63, 65, 67, 315, 345, 373, 386, 399, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 1010, 1023], "n_clusters_": [38, 49, 55, 63, 430, 434], "homogeneity_scor": [38, 49, 58, 345, 399, 706, 724, 781, 976], "completeness_scor": [38, 49, 58, 312, 345, 399, 724, 725, 781, 976], "silhouette_scor": [38, 49, 58, 60, 345, 373, 399, 1018, 1022, 1024, 1026, 1028, 1032], "sqeuclidean": [38, 439, 446, 766, 767, 768], "872": [38, 984], "912": 38, "871": [38, 80, 81, 401, 463], "753": [38, 344], "cycler": 38, "viridi": [38, 279, 686], "class_memb": 38, "cluster_cent": [38, 61, 63, 64, 450], "309": [38, 68, 334, 342], "plot_affinity_propag": [38, 68, 429, 443], "impos": [39, 57, 127, 192, 307, 384, 399, 404, 406, 407, 516, 646, 972], "simpli": [39, 86, 128, 150, 158, 223, 235, 268, 292, 313, 314, 359, 368, 373, 375, 378, 384, 386, 401, 402, 403, 404, 406, 407, 474, 684, 750, 753, 855, 927, 968, 976, 977, 978, 979, 990, 1003, 1011, 1025, 1026, 1027], "There": [39, 46, 116, 150, 216, 223, 234, 237, 250, 254, 256, 259, 344, 366, 368, 370, 373, 374, 375, 378, 384, 386, 387, 389, 396, 398, 399, 404, 406, 407, 408, 435, 441, 451, 523, 542, 543, 548, 549, 577, 578, 580, 595, 634, 966, 972, 973, 974, 975, 976, 979, 983, 986, 990, 991, 992, 995, 999, 1010, 1018, 1026], "singl": [39, 48, 52, 53, 55, 58, 61, 62, 72, 108, 111, 119, 120, 121, 129, 134, 147, 150, 156, 162, 165, 169, 171, 174, 182, 198, 200, 238, 240, 249, 255, 268, 297, 315, 331, 344, 345, 346, 350, 352, 355, 359, 360, 367, 368, 373, 378, 380, 381, 382, 384, 385, 386, 397, 398, 400, 402, 403, 404, 406, 407, 408, 423, 426, 429, 430, 434, 435, 436, 438, 443, 453, 455, 456, 482, 483, 485, 495, 498, 523, 542, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 571, 581, 588, 589, 591, 595, 616, 621, 623, 632, 655, 656, 662, 665, 666, 667, 679, 681, 683, 699, 710, 711, 712, 713, 724, 725, 726, 729, 762, 773, 783, 784, 785, 788, 789, 799, 806, 810, 811, 813, 814, 817, 825, 828, 829, 833, 845, 846, 847, 857, 858, 861, 862, 863, 868, 869, 883, 884, 896, 897, 898, 899, 904, 940, 944, 963, 965, 971, 972, 973, 976, 977, 979, 981, 983, 984, 986, 990, 991, 992, 996, 1000, 1002, 1009, 1011, 1018, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "unstabl": [39, 66, 168, 399, 401, 402, 678, 682, 924, 925, 992, 1022, 1023, 1025, 1030, 1032], "quickli": [39, 238, 296, 311, 370, 373, 374, 403, 406, 681, 972, 979, 980, 1000, 1011, 1029], "fight": [39, 1000], "percol": 39, "distanc": [39, 40, 55, 57, 60, 61, 65, 67, 77, 81, 83, 100, 162, 165, 171, 184, 199, 219, 221, 224, 231, 279, 281, 282, 287, 289, 291, 292, 301, 306, 311, 315, 316, 344, 345, 359, 370, 382, 384, 386, 396, 399, 401, 404, 405, 409, 410, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 444, 445, 446, 447, 448, 450, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 527, 529, 536, 596, 597, 604, 608, 609, 611, 612, 617, 647, 648, 655, 657, 663, 664, 665, 666, 667, 677, 678, 679, 681, 682, 683, 684, 685, 688, 692, 713, 722, 746, 748, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 766, 767, 768, 769, 778, 779, 782, 817, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 867, 882, 886, 888, 890, 892, 893, 894, 896, 897, 898, 899, 966, 970, 973, 974, 976, 982, 986, 988, 990, 991, 997, 1009, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "merg": [39, 41, 46, 51, 314, 371, 373, 376, 381, 384, 387, 399, 429, 430, 431, 434, 435, 452, 805, 1010, 1018, 1025], "exagger": [39, 168, 681, 973], "behaviour": [39, 100, 199, 200, 216, 333, 373, 386, 399, 406, 548, 549, 553, 554, 591, 886, 896, 897, 949, 965, 966, 976, 986, 1026, 1029, 1030, 1033, 1034], "shortest": [39, 378, 382, 677, 930, 973, 1031], "mechan": [39, 234, 340, 344, 360, 373, 375, 399, 407, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 974, 992, 1000], "resembl": 39, "brittl": [39, 399], "pronounc": [39, 40, 52, 155], "kneighbors_graph": [39, 44, 62, 67, 279, 386, 399, 430, 434, 830, 831, 832, 834, 836, 838, 839, 840, 842, 979, 1018, 1022, 1027], "geometri": [39, 399, 973, 979], "instabl": [39, 168, 289, 441, 524, 528, 532, 684, 1025, 1028, 1031], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 56, 62, 67, 386, 399, 429, 431, 434, 1010, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033], "1500": [39, 50, 57, 62, 67, 92, 219, 223, 244], "knn_graph": 39, "include_self": [39, 44, 67, 841, 842, 1022], "908": [39, 68, 130, 134, 347, 976], "plot_agglomerative_clust": [39, 68], "waveform": 40, "euclidean": [40, 57, 58, 184, 231, 279, 287, 311, 316, 345, 396, 398, 399, 404, 405, 406, 407, 409, 429, 430, 433, 434, 435, 439, 441, 446, 449, 452, 520, 526, 578, 604, 608, 611, 612, 665, 667, 679, 681, 684, 685, 750, 751, 757, 758, 759, 760, 766, 767, 768, 769, 778, 779, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 882, 966, 970, 974, 977, 979, 988, 997, 1022, 1025, 1026, 1027, 1028, 1034], "cityblock": [40, 44, 399, 439, 446, 750, 766, 767, 768, 979], "invari": [40, 370, 386, 399, 409, 603, 678, 735, 803, 804, 972, 973, 976, 991, 997, 1026, 1029, 1030, 1031], "ie": [40, 66, 96, 429, 693, 756, 972, 986], "inter": [40, 117, 355, 406, 705, 931], "character": [40, 216, 349, 399, 403, 973], "ill": [40, 82, 203, 460, 461, 467, 639, 640, 643, 644, 645, 671, 672, 972, 975, 1010, 1028], "recov": [40, 65, 82, 96, 97, 103, 120, 150, 167, 182, 197, 198, 219, 346, 401, 405, 408, 411, 449, 522, 548, 972, 973, 975, 997, 1010, 1024], "put": [40, 58, 139, 150, 152, 232, 239, 244, 295, 303, 315, 324, 335, 336, 341, 361, 375, 377, 378, 381, 409, 432, 436, 448, 504, 603, 636, 650, 783, 865, 869, 877, 890, 891, 892, 893, 894, 915, 966, 973, 975, 976, 977, 983, 986, 999, 1003, 1005, 1011, 1030], "cc": [40, 371], "patheffect": 40, "pairwise_dist": [40, 386, 399, 410, 430, 433, 434, 435, 439, 446, 677, 685, 750, 759, 767, 768, 778, 779, 832, 834, 836, 840, 974, 1018, 1022, 1024, 1026, 1027, 1029, 1030], "sqr": 40, "sign": [40, 79, 86, 96, 99, 112, 182, 249, 295, 339, 373, 399, 404, 407, 533, 571, 578, 595, 624, 625, 647, 648, 655, 657, 663, 664, 665, 666, 723, 730, 888, 892, 923, 925, 941, 972, 976, 981, 986, 990, 991, 1010, 1018, 1022, 1027, 1031, 1033], "phi": [40, 404, 731, 854, 968, 976, 986, 991], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 62, 63, 227], "f781bf": [40, 44, 62, 63], "set_label": [40, 153, 231], "avg_dist": [40, 769], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 66], "cividi": 40, "vmin": [40, 82, 95, 98, 106, 153, 156, 177, 182, 189, 214, 232, 248, 254, 297, 331], "interclass": 40, "plot_agglomerative_clustering_metr": [40, 68], "hierarchi": [41, 171, 373, 439, 445, 452, 981, 1010], "plot_dendrogram": 41, "kwarg": [41, 98, 234, 375, 380, 413, 417, 427, 431, 437, 439, 453, 458, 524, 527, 529, 552, 606, 620, 635, 636, 641, 642, 649, 650, 651, 652, 666, 670, 673, 687, 688, 689, 691, 730, 828, 829, 847, 848, 852, 892, 903, 922, 936, 1025, 1029, 1031, 1035], "children_": [41, 430, 434, 452], "current_count": 41, "child_idx": 41, "leaf": [41, 115, 126, 128, 349, 353, 399, 406, 410, 430, 431, 432, 433, 434, 435, 439, 446, 452, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 896, 897, 898, 899, 900, 901, 979, 992, 1021, 1023, 1025, 1029, 1032], "linkage_matrix": 41, "column_stack": [41, 295, 303], "distances_": [41, 430, 434, 1030], "distance_threshold": [41, 430, 434, 1027, 1030], "truncate_mod": 41, "parenthesi": [41, 373], "101": [41, 68, 201, 217, 370, 834, 1019], "plot_agglomerative_dendrogram": [41, 68], "scalabl": [42, 44, 62, 165, 173, 175, 252, 275, 316, 345, 373, 399, 406, 407, 437, 480, 491, 578, 629, 791, 802, 812, 814, 826, 849, 858, 860, 888, 890, 893, 894, 968, 971, 973, 976, 989, 991, 1000, 1018, 1021, 1022, 1028, 1029, 1032, 1033], "hundr": [42, 122, 220, 305, 368, 403, 406, 550, 551, 973, 1029], "thousand": [42, 116, 231, 233, 305, 345, 368, 399, 406, 845, 846, 893, 973, 1011, 1027, 1029], "million": [42, 56, 155, 174, 407, 409, 681, 973, 991, 1000, 1032, 1033], "chose": [42, 168, 1006], "usag": [42, 53, 71, 74, 85, 99, 121, 144, 168, 169, 228, 232, 234, 253, 282, 288, 290, 297, 327, 346, 359, 372, 373, 375, 376, 380, 381, 383, 386, 387, 389, 399, 403, 404, 409, 410, 433, 435, 439, 478, 550, 551, 598, 637, 647, 648, 649, 655, 657, 658, 665, 666, 667, 668, 669, 766, 769, 778, 779, 888, 896, 897, 898, 899, 925, 965, 968, 975, 976, 977, 979, 991, 998, 1002, 1006, 1013, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "enjoi": 42, "edit": [42, 370, 372, 373, 376, 377, 381, 384, 389, 519, 523, 818, 970, 972, 977, 983, 1011], "158": [42, 406, 658], "manojkumarsivaraj334": 42, "joblib": [42, 54, 72, 116, 279, 312, 368, 371, 373, 376, 382, 384, 386, 389, 392, 393, 398, 400, 410, 426, 430, 433, 434, 435, 437, 439, 441, 446, 447, 450, 453, 456, 461, 497, 520, 524, 525, 526, 528, 531, 532, 534, 535, 537, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 583, 591, 599, 621, 623, 628, 636, 640, 642, 644, 646, 647, 648, 650, 652, 654, 655, 657, 665, 668, 677, 678, 679, 680, 681, 682, 683, 762, 766, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 830, 831, 834, 836, 838, 839, 841, 842, 847, 848, 849, 850, 883, 884, 942, 943, 944, 946, 961, 976, 997, 1018, 1019, 1021, 1023, 1025, 1026, 1027, 1029, 1030, 1033], "cpu_count": [42, 116, 279, 944], "n_center": [42, 501], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 58, 165, 280, 293, 304, 315, 345, 369, 399, 431, 432, 435, 436, 437, 438, 441, 448, 449, 451, 493, 538, 620, 835, 998, 1013, 1018, 1022, 1025, 1030, 1034], "subcluster_centers_": [42, 431], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 64], "256": [42, 48, 53, 122, 158, 160, 307, 360, 368, 399, 406, 438, 457, 526, 535, 552, 844, 876, 886, 1011, 1032], "max_no_improv": [42, 61, 64, 438, 526, 527, 528, 535, 1032, 1033], "t_mini_batch": [42, 64], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 58, 60, 61, 63, 64, 95, 315, 345, 429, 432, 436, 437, 438, 1010], "420": [42, 68, 323], "plot_birch_vs_minibatchkmean": [42, 68], "bisectingkmean": [43, 399, 1032, 1033, 1034], "__doc__": [43, 75, 155, 237, 247, 386], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 62], "variant": [43, 95, 161, 164, 165, 259, 314, 315, 345, 346, 379, 399, 402, 404, 407, 409, 438, 449, 479, 482, 483, 501, 504, 532, 548, 549, 554, 604, 608, 611, 612, 616, 619, 627, 628, 630, 634, 661, 693, 786, 790, 792, 793, 794, 803, 810, 831, 849, 885, 966, 972, 973, 974, 975, 976, 978, 979, 990, 997, 1011, 1018, 1026], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 373, 381, 823, 824, 825, 826, 827, 1021, 1026, 1034], "flat": [43, 95, 101, 169, 219, 220, 221, 257, 399, 407, 429, 435, 437, 450, 498, 983, 1010, 1018, 1019, 1034], "label_out": 43, "plot_bisect_kmean": [43, 68], "null": [44, 71, 168, 169, 170, 259, 265, 399, 403, 637, 658, 669, 693, 719, 745, 781, 813, 972, 973, 976, 991, 1028], "mismatch": [44, 975, 1027], "warn": [44, 53, 62, 72, 198, 213, 234, 262, 279, 296, 297, 304, 305, 308, 311, 359, 362, 373, 376, 377, 378, 386, 393, 407, 436, 438, 448, 485, 527, 529, 536, 539, 542, 543, 546, 547, 548, 549, 553, 554, 555, 560, 561, 562, 563, 564, 565, 567, 591, 625, 659, 679, 682, 683, 701, 702, 717, 718, 726, 771, 772, 775, 823, 824, 825, 827, 852, 853, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 908, 909, 915, 925, 942, 944, 946, 962, 963, 965, 976, 986, 1009, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "noisy_circl": [44, 62], "noisy_moon": [44, 62], "no_structur": [44, 62], "anisotropicli": [44, 62], "170": [44, 57, 58, 62, 290, 293, 379], "x_aniso": [44, 57, 62], "aniso": [44, 62], "plot_num": [44, 62, 227], "default_bas": [44, 62], "quantil": [44, 53, 63, 91, 110, 112, 165, 176, 217, 301, 304, 305, 384, 406, 427, 428, 447, 508, 541, 549, 551, 646, 659, 711, 733, 736, 738, 811, 853, 865, 866, 867, 877, 878, 976, 986, 998, 1013, 1018, 1022, 1025, 1027, 1031, 1032, 1034], "damp": [44, 399, 429, 443], "min_sampl": [44, 49, 65, 384, 386, 399, 410, 433, 435, 439, 445, 446, 660, 972, 1027, 1031], "xi": [44, 65, 370, 399, 402, 407, 439, 445, 498, 990, 1029], "min_cluster_s": [44, 65, 399, 435, 439, 445, 1027], "allow_single_clust": [44, 435], "hdbscan_min_cluster_s": 44, "hdbscan_min_sampl": 44, "220": [44, 1018], "i_dataset": [44, 62, 227], "algo_param": [44, 62], "param": [44, 55, 61, 62, 71, 122, 124, 125, 219, 233, 234, 257, 259, 267, 271, 283, 296, 373, 375, 386, 406, 409, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 797, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 1024, 1028, 1029, 1031, 1032], "estimate_bandwidth": [44, 63, 399, 437, 450], "symmetr": [44, 123, 171, 200, 386, 397, 399, 441, 451, 452, 463, 508, 516, 518, 679, 683, 684, 693, 694, 704, 705, 706, 712, 716, 724, 725, 743, 745, 751, 773, 781, 783, 784, 962, 965, 972, 976, 979], "meanshift": [44, 315, 399, 429, 1021, 1022, 1023, 1026, 1028, 1029, 1032, 1033, 1034], "bin_seed": [44, 63, 437, 450, 1029], "two_mean": 44, "spectralclust": [44, 315, 399, 429, 979, 1018, 1019, 1028, 1030, 1031, 1032, 1033, 1034], "nearest_neighbor": [44, 441, 680], "average_linkag": 44, "gmm": [44, 165, 243, 245, 248, 249, 250, 251, 493, 501, 784, 804, 975, 1018, 1019, 1022, 1023, 1024], "gaussianmixtur": [44, 57, 245, 246, 247, 248, 249, 250, 405, 783, 1024, 1026, 1027, 1031, 1032], "covariance_typ": [44, 245, 246, 248, 249, 250, 783, 784], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 62, 297, 381, 382], "catch_warn": [44, 62, 234, 296, 297], "filterwarn": [44, 62, 213, 296, 297, 373, 986], "fulli": [44, 55, 117, 123, 359, 367, 368, 386, 399, 405, 406, 408, 432, 436, 546, 547, 553, 554, 896, 897, 898, 899, 900, 902, 965, 966, 972, 981, 989, 996, 1031, 1032], "t1": [44, 46, 62, 213, 221, 224, 227], "ff7f00": [44, 62, 227], "4daf4a": [44, 62], "a65628": [44, 62], "984ea3": [44, 62], "999999": [44, 62], "e41a1c": [44, 62], "dede00": [44, 62, 63], "000000": [44, 168, 187, 216, 259, 305, 725], "transax": [44, 62, 223, 227, 246, 287, 303], "981": [44, 68, 267, 370, 976], "plot_cluster_comparison": [44, 68], "bad": [45, 60, 61, 151, 168, 344, 355, 373, 399, 409, 681, 734, 965, 972, 973, 978, 984, 1010, 1018], "eight": [45, 1011], "deliv": [45, 359, 1000], "though": [45, 55, 116, 147, 174, 177, 265, 284, 303, 305, 345, 346, 355, 359, 367, 370, 373, 375, 385, 386, 399, 404, 405, 406, 407, 408, 792, 794, 888, 965, 966, 968, 973, 976, 979, 986, 990, 1011, 1026], "3d": [45, 48, 67, 90, 101, 102, 195, 219, 221, 223, 407, 495, 575, 939, 1025, 1026, 1028], "mplot3d": [45, 67, 90, 101, 102, 169, 195, 219, 221], "noqa": [45, 67, 90, 101, 102, 123, 147, 162, 163, 169, 195, 219, 221, 270, 271, 313, 344, 377, 568, 569, 616, 788, 789, 965, 1027], "f401": [45, 67, 90, 101, 102, 169, 195, 219, 221], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 130, 168, 234, 236, 303, 313, 355, 393, 406, 551, 723, 853, 965, 976, 986, 990, 1029, 1030], "elev": [45, 67, 90, 101, 102, 169, 195, 219, 223], "azim": [45, 67, 90, 101, 102, 169, 195, 219, 223], "134": [45, 53, 102, 122, 259, 1021], "xaxi": [45, 90, 101, 102, 116, 195, 219, 221, 224, 279, 284, 344], "set_ticklabel": [45, 90, 101, 102, 195, 344], "zaxi": [45, 90, 101, 102, 195, 219], "petal": [45, 90, 104, 106, 119, 241, 313, 316, 370, 400, 901, 992, 1008, 1009], "sepal": [45, 90, 104, 106, 119, 152, 181, 241, 313, 316, 328, 370, 986, 1008, 1009], "length": [45, 70, 89, 90, 92, 104, 106, 119, 150, 151, 152, 155, 156, 158, 174, 181, 234, 235, 238, 241, 313, 316, 328, 346, 366, 370, 373, 381, 382, 386, 400, 404, 406, 407, 409, 434, 479, 497, 498, 501, 504, 512, 540, 552, 570, 571, 578, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 621, 635, 636, 639, 640, 641, 642, 643, 645, 646, 649, 650, 651, 652, 670, 673, 769, 785, 788, 789, 799, 814, 816, 819, 820, 822, 830, 831, 832, 834, 836, 875, 901, 908, 910, 914, 930, 931, 947, 950, 975, 982, 986, 1002, 1008, 1009, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1034], "set_zlabel": [45, 90, 195], "setosa": [45, 90, 102, 104, 268, 269, 370, 493, 1002, 1009], "versicolour": [45, 90, 102, 104, 370, 1009], "virginica": [45, 90, 102, 104, 268, 269, 370, 493, 976, 1009], "text3d": [45, 102], "294": [45, 68], "plot_cluster_iri": [45, 68], "voxel": [46, 66, 574], "multipl": [46, 69, 76, 92, 105, 116, 118, 119, 165, 168, 192, 232, 259, 271, 281, 311, 359, 360, 361, 367, 369, 370, 373, 375, 376, 377, 378, 384, 386, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 433, 449, 453, 455, 456, 458, 463, 477, 480, 481, 484, 485, 486, 492, 493, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 548, 549, 550, 551, 552, 570, 588, 596, 597, 599, 600, 616, 621, 623, 628, 629, 630, 631, 635, 636, 639, 641, 642, 643, 646, 649, 650, 651, 652, 655, 656, 657, 660, 662, 665, 667, 668, 678, 679, 681, 682, 683, 710, 711, 716, 733, 734, 736, 738, 739, 741, 773, 776, 779, 783, 784, 785, 787, 788, 789, 790, 791, 797, 799, 800, 801, 802, 803, 804, 805, 810, 811, 812, 814, 818, 819, 820, 821, 822, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 850, 853, 865, 869, 877, 880, 881, 888, 889, 890, 893, 904, 919, 924, 925, 947, 950, 968, 971, 972, 973, 977, 978, 979, 983, 984, 989, 990, 992, 996, 997, 1002, 1011, 1018, 1019, 1021, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1034], "partli": [46, 757], "procedur": [46, 56, 116, 123, 147, 178, 186, 249, 261, 304, 308, 331, 344, 355, 373, 375, 384, 385, 386, 387, 397, 398, 401, 403, 404, 406, 408, 520, 526, 527, 529, 534, 535, 536, 542, 543, 544, 545, 548, 549, 582, 584, 591, 598, 633, 661, 663, 676, 716, 773, 845, 846, 865, 877, 947, 965, 972, 978, 984, 986, 989, 990, 991, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "solut": [46, 177, 182, 187, 189, 202, 203, 212, 227, 233, 314, 331, 371, 375, 386, 396, 399, 401, 403, 404, 407, 408, 409, 438, 440, 442, 520, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 599, 635, 637, 639, 641, 643, 644, 645, 647, 649, 651, 653, 654, 655, 656, 657, 658, 661, 663, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 783, 784, 799, 837, 845, 846, 969, 970, 972, 973, 975, 980, 982, 990, 991, 995, 1000, 1006, 1009, 1011, 1018, 1021, 1031, 1032, 1033], "closest": [46, 64, 375, 399, 429, 431, 432, 436, 437, 438, 448, 642, 767, 768, 818, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 967, 970, 977, 979, 1009], "partit": [46, 66, 70, 126, 128, 259, 297, 396, 397, 399, 403, 406, 438, 440, 442, 451, 500, 546, 547, 548, 549, 552, 553, 554, 693, 694, 704, 774, 836, 896, 897, 898, 899, 975, 979, 982, 986, 992, 1011], "cluster_qr": [46, 399, 441, 451, 1032], "qr": [46, 200, 523, 530, 533, 924, 925, 973, 1024], "pivot": [46, 270, 271], "cheung": [46, 1019], "andrew": [46, 399, 451, 680, 684, 706, 725, 781, 863, 980, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "knyazev": [46, 399, 441, 451, 684, 1028, 1031, 1032], "ucdenv": 46, "skimag": [46, 47, 367, 1010], "spectral_clust": [46, 66, 1026, 1028, 1030, 1031, 1032, 1033], "orig_coin": [46, 47], "speed": [46, 47, 57, 70, 98, 116, 163, 169, 184, 187, 191, 237, 279, 313, 320, 344, 346, 361, 362, 373, 376, 382, 384, 386, 397, 399, 404, 406, 407, 410, 432, 433, 436, 437, 438, 439, 441, 446, 448, 449, 450, 451, 520, 521, 599, 616, 621, 622, 623, 628, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 653, 670, 673, 681, 783, 784, 791, 812, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 863, 925, 965, 973, 975, 977, 990, 1000, 1010, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "down": [46, 47, 81, 213, 214, 221, 231, 232, 234, 262, 298, 301, 355, 367, 376, 381, 401, 404, 432, 439, 445, 579, 582, 583, 628, 638, 762, 766, 769, 863, 866, 867, 878, 890, 893, 900, 972, 1002, 1010, 1026], "alias": [46, 47, 234, 371, 373, 376, 390, 436, 448, 1018, 1022, 1032], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 1010], "anti_alias": [46, 47, 1010], "img_to_graph": [46, 66, 407, 1021, 1031], "exponenti": [46, 75, 150, 155, 284, 289, 405, 406, 409, 438, 525, 543, 548, 603, 608, 611, 628, 632, 746, 747, 828, 829, 833, 845, 846, 863, 968, 972, 976, 991, 1009, 1025, 1031], "beta": [46, 85, 167, 379, 397, 399, 402, 525, 527, 529, 536, 633, 717, 718, 724, 730, 771, 781, 783, 976, 1009, 1020, 1023, 1025, 1027, 1028], "voronoi": [46, 66, 399], "n_region": 46, "extra": [46, 119, 236, 279, 346, 371, 372, 374, 377, 386, 406, 407, 427, 432, 436, 448, 453, 521, 546, 547, 555, 579, 580, 689, 690, 691, 809, 832, 898, 899, 915, 936, 975, 976, 979, 1018, 1021, 1023, 1024, 1026, 1031, 1033], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 441, 451, 677, 680, 684, 1028, 1031, 1032, 1033], "amg": [46, 66, 399, 441, 451, 680, 684, 1028, 1032, 1033], "pyamg": [46, 389, 392, 399, 441, 451, 680, 684], "toler": [46, 73, 162, 189, 191, 214, 215, 346, 368, 375, 382, 399, 411, 432, 436, 441, 448, 451, 460, 461, 467, 471, 472, 473, 520, 521, 522, 524, 525, 529, 530, 531, 532, 533, 534, 536, 537, 548, 549, 550, 551, 616, 635, 636, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 665, 667, 668, 670, 671, 672, 673, 677, 678, 679, 680, 682, 683, 684, 828, 829, 833, 837, 845, 846, 883, 884, 888, 889, 890, 891, 892, 893, 894, 962, 972, 976, 990, 991, 1007, 1030, 1031, 1032, 1033], "eigen_tol": [46, 441, 451, 680, 684, 1019, 1032, 1033], "todo": [46, 231, 377, 381, 386, 399, 1034, 1035], "21243": 46, "assign_label": [46, 399, 441, 451], "individu": [46, 60, 80, 108, 113, 130, 134, 142, 159, 165, 166, 172, 198, 216, 228, 262, 264, 311, 339, 360, 374, 377, 380, 382, 386, 388, 396, 400, 403, 406, 407, 426, 441, 451, 453, 485, 490, 492, 498, 544, 545, 548, 549, 551, 552, 554, 556, 557, 558, 559, 592, 598, 599, 621, 622, 632, 634, 646, 647, 648, 657, 660, 661, 662, 663, 664, 665, 666, 667, 676, 701, 708, 716, 722, 738, 739, 773, 785, 799, 816, 820, 821, 823, 824, 825, 826, 827, 846, 849, 857, 858, 860, 861, 862, 865, 867, 868, 873, 874, 875, 888, 889, 976, 977, 986, 991, 1006, 1011, 1013, 1019, 1022, 1024, 1030, 1032, 1034], "comment": [46, 344, 371, 372, 373, 374, 376, 377, 381, 476, 568, 976], "paus": 46, "21194": [46, 1031], "54": [46, 174, 182, 198, 201, 368, 370, 399, 480, 1019, 1020], "615": [46, 48, 68], "plot_coin_segment": [46, 68], "spatial": [47, 49, 55, 171, 182, 215, 297, 368, 386, 399, 410, 433, 435, 439, 441, 446, 668, 681, 748, 751, 766, 767, 768, 769, 778, 779, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 972, 979, 986, 1020, 1024, 1031, 1034], "constrain": [47, 95, 120, 127, 169, 189, 295, 312, 329, 331, 366, 386, 398, 399, 404, 406, 498, 550, 551, 624, 647, 679, 683, 813, 972, 975, 1022], "piec": [47, 199, 360, 975], "grid_to_graph": [47, 51, 54, 399, 407, 1010, 1031], "st": [47, 67, 259, 316, 1021, 1024, 1026], "149": [47, 977, 1018], "4697": 47, "356": [47, 68, 984], "plot_coin_ward_segment": [47, 68], "vq": [48, 58], "palac": 48, "china": [48, 399, 495, 496, 573], "literatur": [48, 155, 259, 345, 370, 373, 379, 381, 384, 385, 399, 402, 404, 406, 432, 436, 438, 490, 525, 527, 529, 536, 544, 545, 577, 580, 697, 783, 965, 968, 972, 976, 1028], "codebook": [48, 555, 818], "palett": [48, 168, 259, 282], "byte": [48, 53, 407, 476, 492, 497, 498, 571, 577, 578, 580, 941, 1009, 1011, 1018, 1025, 1026, 1033], "wherea": [48, 53, 67, 80, 109, 126, 202, 212, 260, 261, 262, 268, 306, 340, 361, 387, 403, 406, 554, 647, 648, 787, 803, 816, 968, 975, 977, 979, 986, 992, 1031], "rgb": [48, 368, 407, 482, 483, 572, 573, 576], "gif": 48, "pick": [48, 55, 60, 171, 235, 267, 315, 319, 368, 373, 377, 399, 406, 432, 449, 512, 662, 898, 899, 965, 972, 973, 975, 990, 1029], "017": [48, 314, 317, 379, 460, 461], "038": [48, 184, 460, 461, 845], "072": [48, 317, 332, 342, 426, 637], "robertlayton": 48, "load_sample_imag": [48, 572, 573, 1027], "pairwise_distances_argmin": [48, 64, 315, 768, 1026, 1032, 1033, 1034], "n_color": 48, "photo": 48, "jpg": [48, 495, 573], "255": [48, 98, 279, 297, 307, 314, 368, 482, 483, 550, 551], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 238], "book": [48, 70, 432, 436, 438, 818, 823, 827, 972, 973, 974, 977, 994, 1030], "alongsid": [48, 373, 379, 386, 389, 408, 976, 983, 996, 997], "504": [48, 68, 250, 251], "plot_color_quant": [48, 68], "750": [49, 55, 118, 259], "math": [49, 70, 237, 259, 260, 370, 389, 752], "db": [49, 55, 399], "n_noise_": 49, "come": [49, 67, 70, 80, 86, 100, 101, 150, 232, 311, 339, 344, 345, 359, 361, 366, 370, 373, 374, 377, 381, 384, 386, 389, 399, 403, 406, 407, 428, 439, 445, 461, 539, 694, 781, 806, 890, 893, 965, 966, 970, 973, 975, 979, 982, 991, 1002, 1018, 1029, 1032, 1034], "handi": [49, 71, 345, 346, 374, 1034], "883": [49, 232, 242], "916": 49, "626": [49, 184], "unique_label": [49, 55, 345, 375, 382], "core_samples_mask": 49, "zeros_lik": [49, 200, 268], "bool": [49, 66, 81, 163, 216, 353, 373, 411, 412, 413, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 508, 511, 512, 513, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 689, 691, 692, 696, 697, 698, 700, 701, 702, 703, 714, 715, 716, 717, 718, 719, 726, 729, 730, 738, 739, 742, 744, 749, 751, 755, 756, 757, 762, 766, 770, 771, 772, 773, 775, 777, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 799, 803, 804, 807, 808, 811, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 909, 919, 925, 926, 938, 941, 947, 949, 957, 962, 963, 964, 966, 1027, 1030, 1031], "core_sample_indices_": [49, 433], "class_member_mask": 49, "markerfacecolor": [49, 55, 61, 63, 64], "171": [49, 53, 68, 370, 379, 776, 976], "plot_dbscan": [49, 68, 410, 433], "constitut": [50, 386, 403, 406, 439, 445, 577, 578, 580, 980], "standpoint": 50, "proce": [50, 144, 179, 371, 377, 402, 403, 406, 429, 972], "reassign": [50, 373, 436, 438, 1019, 1023], "success": [50, 165, 252, 266, 275, 355, 394, 399, 403, 404, 406, 504, 553, 568, 785, 788, 789, 806, 893, 979, 1000, 1006, 1010, 1013, 1030], "becom": [50, 55, 57, 72, 80, 200, 234, 261, 279, 302, 306, 331, 344, 355, 367, 373, 375, 377, 381, 386, 387, 399, 401, 406, 407, 409, 429, 439, 443, 444, 446, 570, 577, 578, 580, 608, 616, 647, 648, 665, 667, 862, 888, 889, 895, 971, 972, 973, 975, 979, 986, 991, 1009, 1011, 1019, 1026, 1027, 1030, 1031, 1032, 1033], "fetch_olivetti_fac": [50, 95, 118, 236, 368, 1026, 1027, 1028], "extract_patches_2d": [50, 98, 407, 1026], "patch_siz": [50, 98, 407, 572, 573], "buffer": [50, 1031], "max_patch": [50, 407, 572, 573, 1026], "4i": 50, "dt": [50, 98, 109, 131, 406, 407, 992], "2400": 50, "700": [50, 313], "800": [50, 121, 314, 368, 573, 681], "1100": 50, "1200": [50, 122, 301, 406], "1300": 50, "1400": [50, 463], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 314], "2200": [50, 368, 482], "2300": [50, 187], "ntrain": 50, "619": [50, 63, 68, 345, 437], "plot_dict_face_patch": [50, 68], "agglo": [51, 434, 1010], "featureagglomer": [51, 54, 429, 430, 993, 1010, 1021, 1027, 1028, 1031, 1032, 1034], "x_reduc": [51, 90, 128, 434, 1010], "x_restor": 51, "images_restor": 51, "vmax": [51, 82, 95, 98, 106, 153, 156, 177, 182, 189, 214, 232, 248, 254, 297, 331], "167": [51, 68, 379, 1018], "plot_digits_agglomer": [51, 68], "rich": [52, 381, 384, 399, 428, 1000, 1029, 1032], "richer": [52, 105, 399], "uneven": [52, 254, 399, 403], "patholog": [52, 975, 1024], "clean": [52, 71, 197, 355, 365, 371, 405, 982, 986, 1028], "fring": [52, 399], "sensibl": [52, 162, 345, 375, 972, 986], "resampl": [52, 123, 155, 168, 216, 283, 382, 384, 544, 545, 950, 997, 1027, 1031], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 219, 220, 221, 677, 678, 679, 681, 973, 1019, 1024, 1028, 1032, 1033], "389": [52, 68, 582, 583, 1011], "plot_digits_linkag": [52, 68], "raccoon": [53, 98, 404], "addition": [53, 72, 112, 168, 198, 216, 234, 312, 314, 345, 373, 384, 397, 407, 599, 600, 635, 641, 660, 865, 965, 966, 976, 984, 996, 1024], "adapt": [53, 55, 109, 122, 123, 153, 244, 245, 303, 360, 371, 372, 373, 382, 399, 406, 409, 504, 505, 506, 507, 665, 666, 667, 845, 846, 972, 978, 980, 986, 990, 996, 997, 1026, 1027, 1034], "pooch": [53, 373, 389, 392], "instal": [53, 241, 279, 311, 312, 313, 314, 315, 316, 359, 360, 362, 373, 374, 376, 377, 379, 381, 384, 385, 392, 395, 399, 407, 441, 451, 485, 680, 684, 944, 992, 994, 1011, 1025, 1026, 1027, 1031, 1032], "raccoon_fac": [53, 98], "nbyte": [53, 231], "768": 53, "1024": [53, 105, 438, 457, 527, 886, 1031], "uint8": [53, 98, 367, 486, 495, 496, 1030], "786432": 53, "unsign": [53, 99, 368, 571, 941], "786": [53, 71], "kilobyt": 53, "behind": [53, 80, 375, 377, 381, 398, 401, 406, 975, 979, 988, 1034], "simplest": [53, 403, 973, 976, 1009, 1010], "certainli": [53, 70, 345], "compressed_raccoon_uniform": 53, "_discret": [53, 304, 308], "239": [53, 304, 308, 1018], "futurewarn": [53, 177, 304, 308, 311, 373, 381, 1025, 1026, 1027, 1029, 1031, 1034], "onward": [53, 304, 308, 862, 1022], "subsampl": [53, 105, 122, 125, 169, 198, 215, 216, 255, 304, 308, 313, 447, 548, 549, 550, 551, 552, 621, 668, 690, 788, 789, 814, 853, 865, 877, 904, 914, 968, 972, 997, 999, 1018, 1028, 1032, 1034], "200_000": [53, 304, 308, 853, 1034], "silenc": [53, 234, 304, 308, 485], "disabl": [53, 114, 304, 308, 344, 371, 373, 407, 438, 449, 457, 526, 527, 528, 535, 548, 549, 550, 551, 847, 886, 908, 909, 986, 1024, 1027, 1031, 1033], "spot": [53, 229, 399], "leav": [53, 115, 124, 169, 171, 216, 266, 306, 353, 355, 359, 370, 372, 378, 386, 399, 406, 409, 430, 431, 434, 435, 452, 492, 546, 547, 548, 549, 550, 551, 553, 554, 555, 662, 664, 787, 792, 793, 794, 795, 803, 804, 828, 829, 877, 896, 897, 898, 899, 965, 973, 979, 983, 992, 1006, 1009, 1018, 1025, 1027, 1029, 1030, 1034], "bin_edg": 53, "bin_edges_": [53, 302, 853], "bin_cent": [53, 198], "625": [53, 198, 345, 697], "875": [53, 151, 658], "375": [53, 438, 738, 976], "140": [53, 323, 325, 406, 499, 505, 506, 507, 544, 545, 977], "203": [53, 79, 83], "234": [53, 823, 827, 845, 846, 978], "axvlin": [53, 60, 73, 82, 103, 122, 132, 168, 170, 187, 265, 1007], "get_ybound": 53, "state": [53, 57, 70, 72, 80, 200, 231, 239, 245, 265, 313, 355, 360, 361, 373, 375, 379, 381, 384, 386, 387, 398, 407, 412, 429, 432, 436, 438, 443, 448, 464, 533, 578, 668, 788, 789, 797, 799, 801, 828, 829, 835, 883, 884, 911, 965, 966, 972, 978, 981, 988, 996, 997, 1000, 1020, 1022, 1024, 1026, 1028, 1031, 1034], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "159": [53, 101, 107, 368, 1018], "79431128": 53, "185": [53, 159, 370, 379, 845, 846], "18557327": 53, "224": [53, 85, 124, 128, 134, 399, 713], "01945707": 53, "save": [53, 70, 72, 298, 372, 373, 377, 379, 380, 381, 386, 393, 403, 411, 457, 523, 524, 616, 828, 829, 886, 972, 976, 986, 992, 1000, 1011, 1018, 1021, 1025, 1028], "verifi": [53, 60, 168, 198, 373, 378, 395, 960, 979], "6291456": 53, "surpris": [53, 169, 972, 996, 1020], "x8": 53, "ndarrai": [53, 58, 90, 198, 241, 257, 258, 259, 373, 374, 375, 379, 380, 395, 407, 410, 411, 414, 415, 417, 420, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 689, 690, 691, 704, 707, 710, 711, 712, 715, 716, 726, 733, 734, 736, 738, 739, 741, 742, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 777, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 906, 907, 908, 913, 914, 924, 925, 926, 927, 931, 938, 940, 941, 945, 948, 949, 951, 952, 953, 954, 957, 962, 963, 976, 991, 997, 1021, 1025, 1028, 1029, 1032, 1033, 1034], "practic": [53, 71, 80, 86, 98, 116, 120, 150, 167, 168, 174, 182, 200, 227, 233, 260, 267, 285, 286, 313, 331, 360, 362, 373, 375, 376, 379, 381, 385, 386, 399, 401, 403, 404, 405, 406, 407, 409, 436, 441, 451, 510, 513, 578, 621, 622, 659, 783, 827, 881, 888, 965, 966, 970, 975, 976, 977, 978, 979, 982, 983, 986, 996, 997, 998, 1000, 1002, 1011, 1012, 1013, 1020, 1024, 1026, 1028, 1030], "gain": [53, 221, 266, 279, 281, 320, 344, 345, 353, 372, 379, 381, 384, 406, 521, 546, 550, 551, 553, 714, 744, 783, 784, 817, 896, 898, 977, 981, 989, 992, 1021, 1025, 1028], "447": [53, 68], "plot_face_compress": [53, 68], "anova": [54, 141, 148, 165, 326, 342, 400, 493, 504, 581, 584, 585, 587, 588, 589, 593, 594, 595, 598, 702, 810, 814, 848, 849, 868, 888, 893, 991], "bayesianridg": [54, 162, 177, 178, 182, 313, 616, 633, 972, 1025, 1026, 1027, 1028, 1031, 1032, 1034], "shutil": [54, 72, 400], "tempfil": [54, 281, 311, 400, 979], "feature_select": [54, 71, 72, 74, 141, 142, 143, 144, 145, 146, 147, 165, 241, 313, 315, 334, 355, 362, 386, 390, 400, 408, 570, 965, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "kfold": [54, 116, 122, 136, 254, 264, 355, 403, 426, 461, 556, 557, 583, 591, 636, 640, 642, 644, 650, 652, 654, 662, 785, 788, 789, 791, 793, 795, 799, 804, 806, 807, 808, 809, 810, 811, 812, 813, 815, 819, 822, 869, 1006, 1019, 1020, 1021, 1023, 1024, 1026, 1028], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 78, 270, 409, 996], "cachedir": [54, 72, 382, 400], "mkdtemp": [54, 400], "mem": [54, 379, 497], "n_x": [54, 574], "n_y": [54, 574, 978, 986], "parcel": [54, 67, 399], "ward__n_clust": 54, "n_job": [54, 72, 73, 116, 117, 118, 123, 124, 130, 137, 146, 162, 168, 169, 170, 220, 222, 239, 258, 260, 261, 263, 274, 279, 311, 312, 313, 316, 360, 373, 386, 406, 410, 426, 433, 435, 437, 439, 441, 446, 447, 450, 453, 456, 461, 520, 524, 525, 526, 528, 531, 532, 534, 535, 537, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 583, 591, 599, 621, 623, 628, 636, 640, 642, 644, 646, 647, 648, 650, 652, 654, 655, 657, 665, 668, 677, 678, 679, 680, 681, 682, 683, 762, 766, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 847, 850, 883, 884, 942, 944, 965, 976, 977, 979, 1006, 1007, 1011, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 430, 434, 1018, 1022], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 109, 113, 114, 125, 229, 253, 258, 266, 268, 312, 345, 349, 353, 362, 370, 372, 373, 375, 382, 387, 396, 398, 399, 403, 404, 406, 407, 410, 433, 435, 441, 453, 476, 497, 501, 503, 509, 511, 515, 516, 520, 526, 527, 529, 539, 546, 547, 548, 549, 553, 554, 555, 556, 557, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 606, 621, 647, 648, 655, 657, 665, 666, 667, 696, 706, 715, 722, 724, 734, 751, 757, 766, 770, 776, 777, 818, 828, 829, 830, 831, 832, 834, 836, 838, 839, 843, 845, 846, 851, 867, 868, 871, 875, 888, 893, 896, 897, 898, 899, 927, 928, 929, 947, 949, 950, 970, 972, 976, 977, 980, 983, 986, 987, 988, 992, 1000, 1002, 1023, 1024, 1026, 1028, 1029, 1030, 1032, 1034], "return_dist": [54, 452, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 979, 1022], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 142, 408, 581, 584, 585, 587, 588, 589, 593, 594, 598, 1021, 1025, 1032], "cach": [54, 165, 260, 279, 280, 293, 359, 360, 368, 386, 430, 434, 439, 457, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 491, 497, 785, 830, 832, 848, 849, 886, 890, 891, 892, 893, 894, 961, 979, 991, 1021, 1025, 1026, 1027, 1028, 1030, 1031, 1033], "selectpercentil": [54, 71, 241, 334, 408, 581, 584, 585, 587, 588, 592, 595, 1019, 1024, 1034], "percentag": [54, 104, 120, 189, 216, 254, 262, 265, 403, 408, 523, 530, 533, 538, 582, 583, 637, 658, 669, 692, 722, 734, 803, 804, 805, 818, 900, 902, 977, 992, 1020, 1024, 1030, 1031], "anova__percentil": [54, 334], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 368, 370, 1020], "638768": 54, "rdbu_r": [54, 82, 106, 331], "temporari": [54, 70, 72, 359, 457, 676, 769, 886, 979, 1021, 1022, 1025, 1031, 1032], "worri": [54, 973, 1003], "rmtree": [54, 72, 400], "ignore_error": 54, "519": [54, 68, 346], "plot_feature_agglomeration_vs_univariate_select": [54, 68], "perspect": [55, 60, 198, 359, 368, 384, 387, 519, 632, 888, 969], "certain": [55, 168, 203, 215, 234, 259, 279, 305, 355, 368, 369, 371, 377, 388, 399, 404, 408, 627, 638, 642, 647, 652, 673, 853, 888, 965, 968, 972, 973, 976, 977, 980, 986, 991, 996, 1002, 1006, 1023, 1027, 1030, 1033], "conveni": [55, 365, 381, 384, 400, 403, 407, 409, 414, 432, 436, 438, 440, 442, 453, 478, 600, 665, 667, 716, 773, 847, 848, 950, 966, 968, 972, 973, 983, 1000, 1011, 1018], "ground_truth": [55, 286], "proba_map": 55, "class_index": 55, "ci": [55, 360, 376, 377, 381, 978, 1024, 1026], "preambl": 55, "parameters_str": 55, "greatest": [55, 389, 399, 855, 1026], "remark": [55, 86, 147, 361, 373, 986], "unlik": [55, 56, 116, 168, 169, 219, 221, 249, 301, 329, 373, 375, 379, 384, 386, 390, 401, 403, 404, 407, 435, 439, 524, 639, 640, 643, 644, 645, 671, 672, 773, 806, 828, 829, 868, 879, 891, 972, 975, 976, 983, 991, 1018, 1024], "bi": [55, 407], "isotrop": [55, 57, 61, 100, 152, 154, 219, 221, 399, 401, 409, 501, 508, 521, 604, 608, 609, 611, 612], "worth": [55, 119, 169, 198, 373, 381, 1000], "rememb": [55, 375, 378, 389, 407, 979, 983, 992], "hardli": [55, 596, 597], "proper": [55, 187, 216, 361, 379, 397, 406, 438, 530, 542, 665, 925, 951, 971, 972, 973, 976, 991, 1018, 1028, 1029, 1030, 1031, 1032, 1033], "must": [55, 168, 169, 171, 179, 182, 215, 216, 227, 238, 254, 285, 302, 307, 344, 355, 368, 372, 373, 374, 375, 377, 379, 381, 386, 387, 390, 395, 397, 399, 400, 403, 404, 406, 407, 408, 409, 410, 420, 427, 430, 433, 434, 435, 436, 438, 439, 440, 444, 446, 448, 450, 451, 453, 455, 456, 458, 463, 476, 497, 498, 501, 512, 520, 526, 527, 528, 529, 530, 532, 533, 536, 542, 543, 548, 549, 550, 551, 556, 557, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 599, 600, 606, 609, 616, 617, 618, 619, 621, 622, 627, 631, 632, 637, 638, 641, 647, 648, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 692, 695, 698, 723, 734, 752, 759, 762, 766, 769, 776, 778, 779, 780, 782, 783, 784, 785, 786, 788, 789, 790, 792, 794, 795, 797, 799, 800, 801, 803, 804, 806, 812, 814, 815, 823, 824, 825, 826, 827, 830, 831, 832, 834, 836, 837, 838, 839, 840, 843, 844, 845, 846, 848, 851, 852, 853, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 888, 889, 890, 891, 892, 893, 894, 895, 901, 944, 951, 960, 962, 965, 966, 972, 973, 974, 976, 979, 980, 982, 983, 990, 991, 992, 1002, 1011, 1018, 1021, 1025, 1029, 1031, 1032], "maintain": [55, 203, 216, 219, 234, 259, 360, 362, 372, 376, 379, 380, 381, 384, 386, 389, 399, 406, 429, 431, 857, 858, 864, 865, 868, 873, 876, 877, 879, 972, 973, 986, 996, 997, 1002, 1013, 1033], "mitig": [55, 170, 308, 360, 361, 973, 992, 1009, 1010, 1030], "great": [55, 167, 168, 196, 355, 373, 384, 404, 752, 997, 1000, 1018, 1025], "appropri": [55, 57, 103, 155, 168, 268, 339, 349, 355, 371, 373, 375, 381, 386, 398, 399, 403, 405, 406, 410, 433, 439, 446, 478, 479, 480, 485, 489, 490, 491, 493, 494, 499, 566, 571, 580, 581, 584, 585, 587, 588, 589, 661, 663, 676, 698, 830, 831, 832, 834, 836, 838, 839, 840, 960, 972, 975, 976, 986, 1022, 1025, 1031, 1034], "immedi": [55, 373, 384, 785, 799, 809, 810, 1026], "hdb": [55, 435], "probabilities_": [55, 435], "capabl": [55, 56, 86, 155, 223, 375, 386, 389, 977, 980, 991, 992, 1000, 1018, 1027], "constraint": [55, 57, 67, 95, 108, 134, 165, 193, 254, 296, 297, 298, 312, 373, 384, 404, 407, 476, 497, 498, 550, 551, 621, 624, 803, 804, 945, 965, 967, 972, 973, 990, 1022, 1025, 1026, 1029, 1031, 1033], "reachabl": [55, 65, 435, 439, 444, 445, 446, 834, 930], "extend": [55, 56, 67, 199, 248, 266, 331, 370, 371, 384, 386, 397, 398, 399, 404, 406, 620, 709, 817, 820, 821, 853, 855, 872, 903, 968, 976, 977, 991, 997, 998, 1013, 1023, 1024, 1025, 1026, 1028, 1033], "fragment": [55, 98], "sparser": [55, 177, 189, 404, 460, 467, 528, 532, 972, 979, 990], "Not": [55, 136, 169, 359, 384, 399, 417, 418, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 458, 459, 460, 461, 462, 463, 464, 465, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 552, 555, 558, 559, 570, 571, 572, 577, 578, 580, 616, 617, 618, 619, 666, 677, 678, 679, 680, 682, 756, 780, 783, 784, 785, 788, 789, 799, 825, 828, 829, 832, 833, 834, 836, 840, 852, 860, 863, 864, 866, 880, 881, 892, 976, 982, 996, 1027], "mention": [55, 86, 216, 312, 355, 359, 373, 377, 378, 384, 386, 399, 685, 880, 881, 965, 970, 972, 997, 1000, 1011, 1025, 1026, 1027], "until": [55, 121, 147, 206, 271, 313, 315, 378, 386, 387, 396, 399, 403, 408, 409, 497, 498, 546, 547, 548, 549, 553, 554, 555, 582, 635, 636, 641, 642, 647, 648, 649, 650, 651, 652, 655, 657, 660, 665, 666, 667, 683, 783, 784, 788, 789, 845, 846, 885, 888, 896, 897, 898, 899, 951, 965, 972, 973, 981, 989, 992, 1011, 1021, 1025, 1026, 1032], "tradeoff": [55, 113, 165, 232, 252, 266, 267, 275, 344, 359, 373, 381, 405, 504, 553, 687, 691, 715, 777, 814, 849, 868, 888, 973, 1009, 1027, 1030], "comfort": [55, 406], "epsilon": [55, 65, 180, 222, 233, 338, 404, 435, 444, 632, 638, 656, 665, 667, 734, 845, 846, 889, 891, 894, 969, 972, 976, 980, 990, 991, 1009, 1018], "incap": 55, "suffici": [55, 121, 130, 206, 273, 331, 359, 386, 399, 408, 521, 535, 646, 671, 672, 804, 805, 977, 979, 997, 1027, 1033, 1034], "intervent": 55, "inaccess": 55, "ultim": [55, 223, 374], "world": [55, 70, 74, 168, 223, 237, 344, 359, 362, 366, 370, 399, 404, 407, 966, 976, 978, 995, 997, 1000, 1005, 1013, 1018], "whose": [55, 79, 80, 81, 147, 155, 198, 329, 368, 381, 382, 386, 397, 399, 401, 406, 408, 409, 412, 426, 427, 428, 437, 450, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 504, 523, 527, 529, 530, 533, 536, 538, 561, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 629, 660, 684, 707, 785, 792, 799, 813, 834, 853, 880, 881, 924, 955, 956, 970, 977, 981, 982, 983, 991, 1021, 1026, 1027, 1029, 1032], "respect": [55, 67, 100, 114, 116, 119, 127, 158, 174, 177, 182, 187, 200, 212, 215, 219, 221, 228, 231, 233, 249, 268, 285, 286, 298, 306, 315, 328, 359, 360, 368, 369, 373, 397, 399, 402, 404, 406, 407, 409, 435, 453, 456, 459, 460, 461, 462, 463, 464, 465, 523, 529, 530, 536, 542, 550, 551, 586, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 625, 632, 660, 679, 683, 701, 716, 770, 773, 783, 784, 824, 834, 845, 846, 900, 902, 965, 969, 970, 972, 973, 976, 979, 980, 981, 982, 986, 991, 996, 1000, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "neighborhood": [55, 82, 165, 219, 280, 293, 370, 386, 399, 404, 410, 433, 435, 439, 446, 491, 493, 504, 530, 538, 617, 620, 685, 814, 830, 831, 834, 836, 837, 838, 839, 840, 842, 848, 849, 868, 973, 982, 998, 1013, 1027], "recomput": [55, 56, 238, 240, 281, 311, 458, 463, 972, 988, 1023, 1034], "span": [55, 78, 123, 232, 256, 368, 399, 407, 538, 625, 785, 788, 976, 1010], "cut_dist": [55, 435], "778": [55, 68], "plot_hdbscan": [55, 68], "intract": [56, 404, 973, 981], "inferenti": 56, "meta": [56, 70, 108, 133, 134, 165, 198, 234, 268, 355, 367, 371, 375, 377, 384, 386, 390, 395, 397, 398, 408, 409, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 570, 571, 577, 579, 580, 583, 586, 592, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 785, 786, 787, 788, 789, 792, 794, 799, 803, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 936, 965, 977, 997, 998, 1013, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1032, 1033], "chirag": 56, "nagpal": 56, "christo": [56, 1027, 1028, 1030, 1032], "arida": [56, 1027, 1028, 1030, 1032], "baseestim": [56, 234, 279, 373, 385, 386, 422, 621, 622, 917, 1018, 1025, 1028, 1030, 1032, 1033], "clone": [56, 123, 158, 169, 234, 298, 355, 371, 373, 376, 377, 379, 381, 386, 397, 400, 409, 426, 454, 558, 559, 586, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 791, 807, 812, 815, 819, 822, 848, 849, 885, 997, 1018, 1024, 1026, 1030, 1034], "metaestim": [56, 386, 885, 1022, 1031, 1032], "available_if": [56, 386, 1031, 1032], "check_is_fit": [56, 234, 375, 382, 386, 1028, 1031, 1032], "5000": [56, 184, 213, 214, 216, 313, 869], "_classifier_ha": 56, "deleg": [56, 379, 423, 901, 1022, 1024, 1030], "unfit": [56, 400, 423, 453, 558, 559, 591, 600, 1026, 1028], "classifier_": [56, 234], "inductivecluster": 56, "clusterer_": 56, "plot_scatt": 56, "cluster_label": [56, 60], "x_new": [56, 400, 404, 408, 422, 431, 432, 434, 436, 438, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 538, 556, 558, 559, 571, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 617, 619, 624, 627, 628, 629, 630, 631, 677, 678, 679, 680, 681, 837, 844, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 880, 881, 988, 1002], "y_new": 56, "declar": [56, 220, 234, 355, 373, 374, 375, 379, 386, 432, 435, 436, 448, 460, 461, 467, 679, 683, 1025, 1029], "membership": [56, 387, 396, 398, 399, 500, 501, 502, 503, 504, 508, 511, 991], "inductive_learn": 56, "probable_clust": 56, "response_method": [56, 112, 126, 131, 181, 190, 207, 262, 282, 287, 290, 306, 327, 328, 350, 620, 621, 622, 687, 689, 691], "120": [56, 68, 71, 76, 126, 220, 237, 242, 408, 579, 1018], "plot_inductive_clust": [56, 68], "meant": [57, 147, 368, 375, 382, 463, 482, 666, 834, 942, 943, 966, 980, 982, 986, 1019], "unintuit": 57, "possibli": [57, 86, 147, 198, 213, 345, 370, 372, 381, 393, 399, 406, 407, 440, 442, 578, 823, 824, 825, 826, 827, 893, 894, 896, 897, 898, 899, 965, 968, 973, 979, 986, 1033], "undesir": [57, 151, 409], "phil": [57, 1023], "roth": [57, 1023, 1026, 1033], "mr": [57, 316, 1019, 1022, 1032], "spheric": [57, 85, 126, 221, 246, 248, 249, 292, 369, 752, 783, 784, 972, 975, 979, 996], "anisotrop": [57, 152, 409, 606, 608, 611], "ellipt": [57, 972], "60834549": 57, "63667341": 57, "40887718": 57, "85253229": 57, "x_vari": 57, "y_vari": 57, "unequ": [57, 1026], "x_filter": 57, "unevenli": [57, 198, 254], "y_filter": 57, "set_i": 57, "scenario": [57, 70, 150, 174, 262, 355, 380, 389, 403, 406, 526, 532, 534, 535, 970, 976, 986, 1028], "criteria": [57, 116, 165, 176, 187, 206, 217, 249, 259, 381, 399, 408, 455, 471, 472, 473, 490, 546, 547, 548, 549, 553, 554, 635, 641, 645, 647, 648, 660, 681, 849, 868, 888, 889, 896, 897, 898, 899, 966, 975, 980, 990, 1010, 1021, 1026, 1029], "knowledg": [57, 118, 168, 215, 237, 259, 362, 368, 373, 376, 379, 385, 386, 399, 403, 406, 410, 433, 500, 544, 545, 552, 709, 724, 728, 771, 817, 976, 977, 988, 1011], "consequ": [57, 103, 216, 259, 260, 301, 328, 355, 404, 406, 550, 551, 555, 644, 645, 966, 972, 976, 992, 1027, 1029, 1034], "likelihood": [57, 77, 79, 80, 81, 83, 103, 150, 151, 152, 154, 155, 156, 157, 159, 165, 186, 216, 248, 252, 259, 265, 275, 298, 301, 375, 386, 397, 401, 404, 406, 409, 426, 458, 459, 460, 461, 462, 463, 464, 465, 466, 504, 521, 525, 530, 538, 539, 540, 599, 600, 620, 634, 647, 701, 729, 783, 784, 785, 811, 814, 833, 844, 864, 876, 890, 891, 893, 894, 972, 975, 978, 986, 991, 1021, 1022, 1027, 1033], "inertia": [57, 58, 61, 345, 399, 432, 436, 438, 441, 448, 449, 451, 452, 1029], "common_param": [57, 123, 169, 233, 261, 262], "unexpect": [57, 234, 355, 373, 378, 381, 393, 524, 685, 976, 991, 1020, 1026, 1027, 1030, 1032, 1034], "suffic": [57, 58, 375, 1011], "propos": [57, 78, 79, 279, 368, 373, 375, 384, 386, 399, 401, 406, 411, 412, 439, 464, 524, 596, 597, 665, 666, 667, 845, 846, 972, 975, 979, 990, 994, 1025], "inflat": [57, 167, 168, 170, 399, 403, 976, 986], "allevi": [57, 177, 182, 399, 978], "fastest": [57, 257, 346, 436, 659, 661, 663, 676, 924, 925, 975], "restart": [57, 376, 381, 436, 520, 526, 527, 532, 534, 535, 599, 600, 973, 1031], "141": [57, 68, 523, 888, 977], "plot_kmeans_assumpt": [57, 68], "judg": [58, 204, 399, 1006], "definit": [58, 81, 186, 198, 266, 279, 345, 373, 374, 375, 386, 388, 399, 401, 402, 404, 516, 518, 524, 600, 617, 681, 697, 707, 716, 746, 783, 784, 965, 968, 970, 972, 974, 976, 979, 990, 995, 1013, 1022, 1026, 1033], "shorthand": [58, 386, 400, 456, 550, 551, 849, 850, 1021], "homo": 58, "compl": 58, "mea": 58, "context": [58, 237, 241, 279, 359, 360, 367, 372, 374, 385, 386, 399, 400, 405, 406, 407, 409, 410, 426, 433, 435, 437, 439, 441, 446, 447, 450, 453, 456, 457, 461, 520, 524, 525, 526, 528, 531, 532, 533, 534, 535, 537, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 583, 591, 599, 615, 616, 619, 621, 623, 628, 636, 640, 642, 644, 646, 647, 648, 650, 652, 654, 655, 657, 665, 668, 677, 678, 679, 680, 681, 682, 683, 762, 766, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 830, 831, 834, 836, 838, 839, 841, 842, 847, 850, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 966, 972, 976, 982, 986, 990, 997, 1000, 1009, 1018, 1025, 1026, 1031, 1034], "n_digit": 58, "1797": [58, 89, 257, 298, 319, 370, 434, 491, 521, 522, 523, 524, 588, 589, 677, 678, 679, 680, 979, 1008], "bench_k_mean": 58, "tabl": [58, 216, 259, 373, 374, 377, 382, 399, 407, 571, 647, 669, 785, 799, 825, 941, 972, 976, 977, 982, 996, 1019], "fit_tim": [58, 120, 187, 206, 261, 403, 811, 812], "inertia_": [58, 61, 64, 432, 436, 438, 1029], "clustering_metr": 58, "sample_s": [58, 232, 345, 779], "formatter_result": 58, "determinist": [58, 123, 360, 369, 375, 386, 399, 432, 436, 438, 440, 441, 442, 447, 448, 451, 540, 548, 549, 553, 554, 572, 573, 680, 684, 796, 797, 844, 896, 897, 968, 972, 1019, 1022, 1024, 1026, 1027, 1030, 1033], "ttime": 58, "tinertia": 58, "thomo": 58, "tcompl": 58, "tv": 58, "tari": 58, "tami": 58, "tsilhouett": 58, "__________________________________________________________________________________": 58, "69545": 58, "598": [58, 103, 151, 312, 317, 530], "645": [58, 154, 160], "621": [58, 757], "469": 58, "617": [58, 262, 399, 757], "152": [58, 379], "69735": 58, "681": [58, 379], "723": [58, 233], "701": [58, 121, 134], "574": [58, 523, 530], "698": 58, "72686": 58, "636": [58, 155, 160, 182, 285, 293, 345, 379], "658": [58, 86], "647": [58, 323], "521": 58, "643": [58, 257], "reduced_data": 58, "mesh": [58, 119, 128, 152, 232, 287, 295, 303, 324, 327], "169": [58, 298], "mark": [58, 92, 142, 163, 263, 270, 365, 373, 375, 377, 381, 382, 386, 399, 524, 596, 597, 600, 621, 647, 841, 842, 883, 884, 901, 915, 920, 925, 972, 1000, 1013, 1018, 1019, 1024, 1026, 1027], "plot_kmeans_digit": [58, 68], "kmeans_plusplu": [59, 399, 1030], "4000": [59, 125, 247], "centers_init": 59, "4eacc5": [59, 64], "ff9c34": [59, 64], "4e9a06": [59, 64], "cluster_data": 59, "063": [59, 68, 257, 259, 426], "plot_kmeans_plusplu": [59, 68], "wrong": [60, 198, 285, 344, 355, 370, 373, 375, 407, 493, 714, 744, 779, 976, 982, 991, 1021, 1023, 1025, 1026, 1027, 1028, 1031], "wide": [60, 61, 113, 231, 302, 384, 399, 404, 407, 965, 972, 996, 1000, 1011, 1018, 1020, 1034], "ambival": 60, "thick": [60, 289, 979], "ow": 60, "7049787496083262": 60, "5882004012129721": 60, "6505186632729437": 60, "561464362648773": 60, "4857596147013469": 60, "silhouette_sampl": [60, 779, 1022, 1024, 1026, 1034], "distinct": [60, 259, 321, 344, 346, 368, 375, 378, 386, 387, 403, 406, 407, 578, 786, 795, 803, 862, 863, 883, 884, 965, 972, 979, 982, 1011, 1026], "center_box": [60, 501], "range_n_clust": 60, "set_size_inch": [60, 136, 238], "lie": [60, 85, 146, 168, 232, 301, 321, 329, 331, 404, 406, 595, 836, 838, 839, 840, 970, 973, 976, 986, 991], "insert": [60, 168, 198, 384, 399, 476, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 903], "blank": [60, 378, 966, 992], "demarc": 60, "silhouette_avg": 60, "sample_silhouette_valu": 60, "y_lower": [60, 123], "aggreg": [60, 114, 216, 262, 268, 308, 315, 399, 406, 523, 544, 545, 710, 711, 716, 733, 734, 736, 738, 739, 741, 773, 977, 979, 986, 1034], "ith_cluster_silhouette_valu": 60, "size_cluster_i": 60, "y_upper": [60, 123], "fill_betweenx": 60, "2nd": [60, 90, 158, 306, 399, 410, 433, 519, 986, 1033], "lw": [60, 78, 79, 81, 99, 104, 105, 192, 199, 201, 204, 208, 215, 222, 247, 254, 269, 284, 301, 321, 338], "fontweight": [60, 193], "bold": [60, 123, 187, 193, 373], "148": [60, 68, 233, 1021], "plot_kmeans_silhouette_analysi": [60, 68], "reach": [61, 116, 147, 198, 200, 214, 216, 261, 315, 331, 353, 378, 387, 389, 399, 404, 408, 439, 446, 497, 498, 582, 583, 616, 633, 634, 635, 636, 641, 642, 643, 644, 645, 649, 650, 651, 652, 655, 656, 657, 665, 666, 667, 668, 670, 671, 672, 673, 717, 718, 771, 783, 784, 845, 846, 885, 965, 976, 980, 990, 992, 1000, 1029, 1033, 1034], "optimum": [61, 156, 168, 174, 272, 404, 461, 972, 975], "stuck": [61, 681, 973], "check_random_st": [61, 214, 221, 230, 236, 375, 382, 386], "trade": [61, 78, 116, 170, 258, 260, 261, 331, 344, 398, 399, 401, 542, 543, 548, 549, 623, 645, 681, 785, 788, 789, 799, 811, 973, 980, 988, 990, 991, 997], "n_init_rang": 61, "n_samples_per_cent": 61, "make_data": 61, "n_clusters_tru": 61, "init_s": [61, 345, 438], "factori": [61, 259, 407, 730, 946, 976], "empti": [61, 70, 105, 210, 322, 359, 368, 375, 377, 399, 411, 472, 522, 550, 551, 620, 796, 853, 895, 903, 908, 909, 915, 935, 966, 991, 1009, 1020, 1022, 1026, 1027, 1029, 1030, 1032, 1033, 1034], "run_id": 61, "km": [61, 315, 345], "my_memb": [61, 63, 64], "214": [61, 68, 151, 409, 573], "plot_kmeans_stability_low_dim_dens": [61, 68], "fast": [62, 174, 182, 187, 213, 214, 232, 233, 302, 346, 359, 368, 373, 382, 399, 401, 403, 404, 406, 407, 409, 411, 435, 436, 458, 463, 497, 521, 522, 524, 527, 529, 533, 536, 553, 554, 555, 577, 578, 580, 621, 622, 629, 647, 648, 661, 663, 676, 785, 799, 809, 810, 820, 821, 828, 829, 833, 844, 925, 945, 968, 972, 975, 978, 979, 981, 982, 992, 996, 1000, 1011, 1018, 1019, 1024, 1025, 1028, 1029], "globular": [62, 399], "cleanli": [62, 1018], "plot_linkage_comparison": [62, 68], "dorin": [63, 437], "comaniciu": [63, 399, 437], "meer": [63, 399, 437], "ieee": [63, 79, 81, 370, 399, 401, 408, 412, 437, 464, 523, 552, 653, 674, 675, 713, 757, 972, 976, 982], "transact": [63, 370, 399, 401, 410, 412, 433, 437, 464, 523, 527, 529, 536, 552, 633, 653, 674, 675, 713, 714, 744, 757, 972, 976], "intellig": [63, 344, 370, 399, 406, 437, 544, 545, 627, 685, 713, 818, 845, 846, 977, 988, 997, 1000], "2002": [63, 397, 399, 406, 426, 437, 582, 583, 714, 744, 835, 883, 968, 976], "603": [63, 298, 299, 354, 437], "labels_uniqu": 63, "plot_mean_shift": [63, 68, 450], "3000": [64, 110, 222, 880, 881], "k_mean": [64, 382, 386, 1010, 1026, 1034], "t_batch": 64, "pairwis": [64, 167, 168, 231, 268, 311, 315, 316, 344, 359, 365, 375, 386, 399, 404, 409, 435, 447, 450, 451, 457, 476, 497, 498, 524, 550, 551, 609, 627, 628, 629, 630, 631, 632, 677, 679, 681, 683, 685, 766, 769, 776, 778, 779, 816, 832, 834, 836, 840, 854, 886, 976, 979, 988, 991, 1013, 1018, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034], "k_means_cluster_cent": 64, "mbk_means_cluster_cent": 64, "k_means_label": 64, "mbk_means_label": 64, "ninertia": 64, "bbbbbb": 64, "plot_mini_batch_kmean": [64, 68], "shane": [65, 1027, 1030, 1033], "grigsbi": 65, "refug": 65, "rocktalu": 65, "cluster_optics_dbscan": [65, 399], "n_points_per_clust": 65, "c1": [65, 120, 158, 230, 307], "c2": [65, 120, 158, 230, 307], "c3": [65, 120, 307], "c4": [65, 307, 998, 1013], "c5": [65, 998, 1013], "c6": 65, "clust": [65, 439, 446], "labels_050": 65, "reachability_": [65, 399, 439, 444, 445, 446], "core_dist": [65, 444], "core_distances_": [65, 439, 444, 446], "ordering_": [65, 399, 439, 444, 445, 446], "labels_200": 65, "ax3": [65, 322], "ax4": 65, "klass": 65, "xk": [65, 539], "rk": 65, "full_lik": 65, "noptic": 65, "ndbscan": 65, "359": [65, 68], "plot_opt": [65, 68], "tri": [66, 104, 219, 288, 360, 375, 378, 384, 387, 397, 406, 438, 440, 442, 620, 621, 622, 659, 681, 687, 689, 691, 799, 944, 981, 999, 1002, 1020, 1026, 1030], "intens": [66, 98, 279, 370, 374, 404, 432, 436, 448, 596, 597, 621, 622, 787, 965, 983, 1000, 1026], "weakli": 66, "outlin": [66, 119, 373, 375, 386, 387, 388, 399, 965, 1013], "center1": 66, "center2": 66, "center3": 66, "58": [66, 79, 298, 370, 401, 412, 464, 752, 986, 1007], "center4": 66, "radius1": 66, "radius2": 66, "radius3": 66, "radius4": 66, "circle1": 66, "circle2": 66, "circle3": 66, "circle4": 66, "label_im": 66, "cleaner": 66, "plot_segmentation_toi": [66, 68], "swiss": [67, 165, 218, 225, 399, 519, 681, 682, 1032], "roll": [67, 165, 218, 225, 376, 399, 519, 681, 682, 919, 1000, 1028, 1033], "sole": [67, 384, 399], "oppos": [67, 234, 377, 395, 399, 884, 979, 991, 1002, 1018], "make_swiss_rol": [67, 223, 1032], "thinner": 67, "fig1": 67, "set_posit": [67, 101, 102, 209, 301], "jet": 67, "fig2": 67, "121": [67, 112, 163, 169, 202, 232, 658, 986], "346": [67, 68, 406, 490, 544, 545], "plot_ward_structured_vs_unstructur": [67, 68], "677": 68, "auto_examples_clust": 68, "chain": [69, 76, 165, 276, 278, 279, 355, 362, 365, 384, 386, 398, 409, 485, 491, 530, 600, 616, 647, 726, 785, 814, 817, 819, 820, 821, 822, 848, 849, 868, 965, 966, 977, 981, 993, 996, 1000, 1011, 1013], "raster": 70, "caption": 70, "serv": [70, 99, 156, 262, 400, 535, 540, 627, 968, 1032], "matt": [70, 1021, 1022, 1023, 1028, 1029, 1033], "terri": [70, 1022], "truncatedsvd": [70, 128, 220, 345, 404, 523, 524, 528, 529, 530, 681, 847, 850, 973, 1020, 1025, 1029, 1030, 1032], "dictvector": [70, 165, 343, 345, 347, 368, 407, 477, 571, 577, 578, 579, 580, 861, 1018, 1019, 1022, 1028, 1030, 1031, 1034], "compris": [70, 123, 257, 344, 345, 346, 368, 384, 404, 406, 504, 792, 973], "subject": [70, 127, 250, 262, 344, 368, 373, 375, 377, 384, 386, 387, 397, 398, 401, 403, 404, 484, 647, 648, 674, 851, 888, 889, 944, 946, 967, 972, 991, 995, 1011, 1027, 1028, 1031, 1033], "mccall": 70, "mksol": 70, "dseg": 70, "ti": [70, 198, 246, 249, 257, 340, 359, 397, 399, 588, 589, 624, 709, 714, 744, 783, 784, 890, 893, 896, 975, 976, 991, 1019, 1021, 1022, 1026, 1028, 1032, 1033], "fred": [70, 1018, 1031], "575": [70, 198, 345], "3539": 70, "1993apr6": 70, "131900": 70, "8407": 70, "perhap": [70, 119, 370, 372, 381, 386, 405, 997], "militari": 70, "slug": 70, "school": [70, 370, 399, 776, 976], "physic": [70, 116, 360, 494, 941, 972, 1034], "teacher": 70, "ex": [70, 371, 374, 389, 1022, 1023], "fighter": 70, "jock": 70, "wasn": [70, 234, 1027], "poundal": 70, "flink": 70, "funni": 70, "propon": 70, "si": 70, "insist": 70, "safeti": [70, 384, 400, 942, 997, 1028], "ball": [70, 284, 292, 399, 405, 437, 681, 828, 829, 833, 836, 838, 839, 840, 1018, 1020, 1023, 1029], "mari": [70, 1026, 1027, 1028, 1029, 1032], "shafer": 70, "nasa": [70, 344, 345, 370], "am": [70, 75, 80, 130, 169, 344, 378, 401, 463, 482, 1025], "dryden": 70, "stateless": [70, 345, 361, 375, 386, 407, 571, 572, 578, 627, 851, 852, 860, 986, 1034], "subject_body_extractor": 70, "startswith": [70, 220, 292], "subject_body_transform": 70, "sentenc": [70, 344, 346, 368, 387, 407], "text_stat": 70, "num_sent": 70, "text_stats_transform": 70, "subjectbodyextractor": 70, "subjectbodi": 70, "union": [70, 168, 400, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 485, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 583, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 726, 742, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 847, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 1025], "body_bow": 70, "pull": [70, 314, 360, 371, 376, 386, 387, 1028], "body_stat": 70, "transformer_weight": [70, 453, 456, 847, 1023, 1030], "396": [70, 370, 1011], "394": [70, 159], "529": [70, 76], "plot_column_transform": [70, 76], "imput": [71, 130, 164, 170, 229, 239, 241, 312, 315, 362, 365, 377, 385, 386, 400, 406, 479, 490, 554, 569, 628, 634, 661, 810, 831, 849, 907, 909, 996, 997, 1013, 1020, 1021], "miss": [71, 130, 164, 170, 229, 239, 259, 279, 312, 316, 355, 359, 362, 365, 368, 370, 372, 373, 375, 377, 378, 386, 395, 398, 399, 400, 401, 435, 461, 479, 485, 487, 490, 550, 551, 554, 555, 616, 617, 618, 619, 628, 634, 661, 679, 683, 715, 757, 810, 831, 849, 857, 858, 862, 864, 865, 868, 869, 873, 876, 877, 879, 972, 973, 976, 996, 997, 998, 1000, 1013, 1020, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "chi": [71, 80, 110, 305, 365, 408, 508, 581, 584, 585, 587, 588, 589, 593, 594, 595, 598, 627, 628, 629, 630, 631, 746, 747, 1013, 1018, 1023, 1024], "dispatch": [71, 362, 395, 457, 785, 799, 809, 810, 811, 886, 942, 943, 1006, 1013, 1033], "processor": [71, 130, 168, 362, 410, 426, 433, 435, 437, 439, 441, 446, 447, 450, 453, 456, 461, 520, 524, 525, 526, 528, 531, 532, 534, 535, 537, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 583, 591, 599, 621, 623, 628, 636, 640, 642, 644, 646, 647, 648, 650, 652, 654, 655, 657, 665, 668, 677, 678, 679, 680, 681, 682, 683, 762, 766, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 830, 831, 834, 836, 838, 839, 841, 842, 847, 850, 883, 884], "pedro": [71, 1019, 1021, 1022, 1026], "chi2": [71, 407, 408, 441, 570, 581, 584, 585, 587, 588, 589, 594, 595, 598, 609, 627, 628, 629, 630, 631, 632, 747, 753, 762, 1018, 1025, 1032], "simpleimput": [71, 130, 162, 163, 170, 229, 239, 241, 312, 315, 355, 386, 616, 617, 618, 966, 986, 1026, 1027, 1029, 1030, 1032, 1033, 1034], "40945": 71, "titan": [71, 170, 241, 311, 315, 316], "surviv": [71, 170, 965, 996], "ag": [71, 147, 168, 170, 186, 187, 198, 216, 238, 239, 241, 301, 314, 315, 316, 368, 370, 1000, 1002, 1009], "fare": [71, 170, 241, 315, 316, 1022, 1023], "embark": [71, 170, 241, 311, 315, 316], "sex": [71, 147, 168, 170, 186, 187, 241, 316, 370, 984, 1009], "femal": [71, 168, 316, 378, 861, 862, 986], "male": [71, 168, 316, 378, 861, 862, 986], "pclass": [71, 170, 241, 311, 315, 316], "numeric_featur": [71, 315], "numeric_transform": [71, 315], "categorical_transform": 71, "selector": [71, 143, 144, 381, 407, 455, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 1020, 1028, 1030, 1034], "preprocessor": [71, 130, 168, 198, 229, 239, 307, 312, 314, 315, 316, 400, 407, 577, 578, 580, 996, 1011, 1018, 1021, 1026, 1028], "798": [71, 406], "lt": [71, 72, 115, 130, 168, 249, 257, 271, 371, 373], "0x7f6509099430": 71, "pipelinepipelin": [71, 72, 115, 130, 144, 168, 170, 228, 229, 238, 239, 241, 260, 266, 307, 312, 315], "columntransformercolumntransform": [71, 130, 168, 169, 170, 229, 239, 307, 312, 315], "simpleimputersimpleimput": [71, 130, 170, 229, 239, 312, 315], "standardscalerstandardscal": [71, 130, 168, 228, 229, 238, 239, 241, 266, 312, 315], "onehotencoderonehotencod": [71, 115, 130, 168, 169, 229, 239, 312, 315], "selectpercentileselectpercentil": [71, 241], "logisticregressionlogisticregress": [71, 115, 228, 229, 239, 241, 298, 312, 315], "make_column_selector": [71, 120, 130, 400, 453, 456, 1028], "subset_featur": 71, "Then": [71, 109, 111, 115, 118, 130, 133, 144, 168, 174, 182, 186, 198, 223, 228, 234, 240, 261, 262, 344, 367, 377, 379, 381, 389, 396, 397, 399, 402, 404, 407, 408, 559, 582, 708, 744, 785, 799, 848, 966, 975, 976, 982, 991, 1011, 1027], "1047": 71, "1118": 71, "684": [71, 80, 200, 217], "1045": 71, "841": 71, "1046": [71, 249], "kb": [71, 168, 169], "numerical_transform": 71, "yourself": [71, 372, 373, 374, 378, 381, 980], "dtype_exclud": [71, 455], "dtype_includ": [71, 120, 130, 400, 455], "_column_transform": [71, 130], "0x7f64ea5cef70": 71, "0x7f64ea5ce3a0": 71, "exactli": [71, 167, 177, 182, 191, 198, 250, 267, 302, 344, 373, 375, 396, 399, 403, 404, 407, 412, 435, 442, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 504, 515, 579, 580, 604, 665, 667, 692, 694, 751, 786, 803, 809, 968, 972, 973, 974, 976, 977, 992, 1010, 1011, 1018, 1024, 1025, 1031], "hyperparamet": [71, 109, 150, 151, 157, 158, 162, 165, 169, 177, 182, 187, 212, 216, 227, 252, 257, 262, 264, 275, 281, 298, 344, 375, 386, 399, 403, 404, 406, 409, 491, 524, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 632, 642, 648, 654, 662, 665, 716, 773, 785, 799, 965, 970, 971, 972, 975, 976, 978, 980, 982, 990, 997, 1011, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1034], "cartesian": [71, 396, 622, 979, 1033], "preprocessor__num__imputer__strategi": 71, "preprocessor__cat__selector__percentil": 71, "classifier__c": 71, "search_cv": 71, "param_distribut": [71, 150, 260, 267, 271, 313, 385, 789, 797, 799], "randomizedsearchcvrandomizedsearchcv": 71, "trigger": [71, 72, 377, 400, 845, 846, 848, 849, 908, 909, 925, 972, 1011, 1026, 1032, 1033], "best_params_": [71, 73, 123, 150, 233, 249, 257, 263, 313, 331, 385, 785, 788, 789, 799, 965, 1007, 1011], "best_score_": [71, 73, 233, 260, 263, 264, 331, 662, 664, 785, 788, 789, 799, 1006, 1007, 1011, 1029], "cv_results_": [71, 72, 73, 82, 116, 136, 146, 249, 257, 258, 259, 260, 263, 267, 270, 271, 281, 331, 461, 583, 785, 788, 789, 799, 1011, 1024, 1028, 1030, 1031], "sort_valu": [71, 170, 241, 249, 259, 270, 307, 308], "mean_test_scor": [71, 72, 73, 82, 116, 136, 146, 249, 258, 259, 260, 267, 270, 271, 281, 331, 461, 583, 785, 799, 965, 1024, 1031], "std_test_scor": [71, 73, 116, 136, 146, 258, 259, 260, 267, 281, 461, 583, 785, 799, 1024, 1031], "param_preprocessor__num__imputer__strategi": 71, "param_preprocessor__cat__selector__percentil": 71, "param_classifier__c": 71, "786015": 71, "031020": 71, "785063": 71, "030498": 71, "783149": 71, "030462": 71, "plot_column_transformer_mixed_typ": [71, 76], "instanti": [72, 153, 314, 376, 390, 406, 439, 556, 557, 591, 619, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 915, 982, 1008, 1018, 1026, 1030, 1034], "memoiz": [72, 368, 386], "costli": [72, 78, 117, 162, 260, 340, 360, 374, 379, 399, 432, 616, 793, 795, 880, 881, 925, 976, 979, 988, 997], "mcgibbon": [72, 1020, 1021, 1024], "selectkbest": [72, 74, 143, 144, 315, 355, 373, 390, 400, 408, 570, 581, 584, 585, 587, 589, 595, 965, 1019, 1024, 1034], "mutual_info_classif": [72, 408, 581, 584, 585, 588, 589, 1024, 1030, 1033], "pipe": [72, 73, 120, 239, 258, 307, 313, 314, 385, 390, 400, 407, 579, 848, 873, 874, 876, 877, 878, 879, 965, 986, 1007], "reduce_dim": [72, 239, 258, 400], "popul": [72, 78, 80, 168, 198, 262, 301, 368, 382, 386, 401, 429, 701, 707, 830, 831, 832, 834, 836, 838, 839, 840, 945, 976, 982, 986, 992], "n_features_opt": 72, "c_option": 72, "iterated_pow": [72, 521, 524, 530, 1024], "reduce_dim__n_compon": [72, 258, 400], "classify__c": 72, "reduce_dim__k": 72, "reducer_label": 72, "kbest": [72, 581], "0x7f65091198b0": 72, "gridsearchcvgridsearchcv": [72, 239, 249, 257, 259], "minmaxscalerminmaxscal": 72, "passthroughpassthroughlinearsvclinearsvc": 72, "mean_scor": [72, 268, 271, 345, 1031], "alphabet": [72, 386, 729], "eas": [72, 249, 306, 373, 376, 379, 972, 990, 996, 997, 1000, 1029, 1030, 1032], "sometim": [72, 130, 167, 259, 297, 345, 355, 360, 361, 373, 375, 377, 379, 385, 386, 389, 399, 401, 404, 406, 407, 438, 523, 524, 527, 529, 530, 853, 854, 855, 903, 971, 972, 973, 976, 981, 986, 987, 991, 1002, 1010, 1015, 1019, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1034], "worthwhil": [72, 386], "slower": [72, 98, 116, 120, 162, 233, 268, 346, 406, 407, 408, 435, 440, 442, 527, 529, 536, 544, 545, 547, 552, 554, 577, 578, 580, 620, 621, 622, 632, 648, 661, 663, 676, 681, 693, 816, 820, 821, 969, 973, 974, 975, 977, 979, 992, 1011, 1022, 1029], "constructor": [72, 230, 360, 375, 386, 398, 400, 407, 453, 456, 538, 539, 544, 556, 557, 558, 559, 570, 571, 577, 578, 586, 657, 665, 666, 830, 831, 832, 834, 835, 836, 838, 839, 840, 847, 848, 849, 850, 944, 965, 977, 986, 991, 997, 1002, 1018, 1019, 1021, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033], "folder": [72, 368, 371, 373, 377, 381, 389, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 979, 1011], "cached_pip": [72, 400], "delet": [72, 320, 322, 377, 378, 458, 463, 475], "exit": [72, 279, 377, 381, 457], "benefici": [72, 74, 78, 95, 128, 301, 302, 371, 973], "702": [72, 76], "plot_compare_reduct": [72, 76], "logistic__c": [73, 1007], "046415888336127774": 73, "pca__n_compon": [73, 1007], "truncat": [73, 128, 220, 382, 523, 524, 528, 529, 530, 533, 665, 667, 714, 744, 783, 837, 901, 925, 965, 975, 976, 990, 1007, 1011, 1012, 1013, 1024, 1026], "x_digit": [73, 138, 296, 400, 1006, 1007, 1009], "y_digit": [73, 138, 296, 400, 1006, 1007, 1009], "__": [73, 260, 386, 400, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 1007, 1026, 1027], "spectrum": [73, 513, 533, 684, 925, 1000, 1007, 1026], "ax0": [73, 75, 198, 230, 345, 1007], "n_components_": [73, 103, 386, 430, 434, 523, 527, 528, 529, 530, 531, 532, 880, 881, 1007, 1027, 1029], "explained_variance_ratio_": [73, 104, 345, 404, 523, 530, 533, 538, 1007, 1021, 1024], "named_step": [73, 86, 400, 582, 583, 586, 848, 849, 888, 889, 972, 1007, 1025, 1027], "components_col": 73, "param_pca__n_compon": 73, "best_clf": 73, "nlargest": 73, "yerr": [73, 79, 81, 117, 120, 146, 281, 307, 322], "val": [73, 210, 259, 927], "826": [73, 76, 147, 148], "plot_digits_pip": [73, 76], "candid": [74, 249, 257, 260, 267, 313, 361, 373, 377, 399, 406, 437, 439, 785, 788, 789, 797, 799, 972, 979, 992, 1024], "features__pca__n_compon": 74, "features__univ_select__k": 74, "svm__c": 74, "867": 74, "967": [74, 976, 980], "transformer_list": [74, 400, 847, 850, 966, 1029, 1030], "univ_select": 74, "amuel": [74, 114, 189, 232, 321, 339], "ai": [74, 114, 189, 232, 321, 339, 403], "bonn": [74, 114, 189, 232, 321, 339], "mayb": [74, 297, 386, 407, 991, 997], "combined_featur": 74, "x_featur": [74, 629, 630, 631, 968], "grid_search": [74, 116, 239, 249, 257, 267, 400, 1020, 1021, 1022, 1023, 1024, 1025], "380": [74, 76, 345, 1011], "plot_feature_union": [74, 76], "overview": [75, 374, 376, 385, 386, 722, 731, 978, 990, 1012, 1013], "transformedtargetregressor": [75, 168, 198, 384, 400, 582, 583, 586, 1026, 1028, 1031], "hous": [75, 130, 162, 163, 301, 313, 366, 479, 1013], "translat": [75, 375, 409, 516, 603, 857, 858, 874, 973, 976, 994, 1000], "lowest": [75, 86, 169, 182, 249, 367, 399, 403, 624, 626, 788, 789, 792, 895, 896, 973, 976, 992, 1033], "logarithm": [75, 130, 168, 231, 260, 331, 386, 408, 449, 579, 647, 648, 665, 693, 714, 729, 739, 743, 744, 745, 791, 828, 829, 923, 992, 1006, 1025], "log1p": [75, 230, 852, 976, 986], "expm1": 75, "y_tran": 75, "At": [75, 203, 271, 319, 322, 359, 360, 377, 387, 389, 395, 402, 406, 426, 429, 454, 577, 578, 580, 591, 816, 818, 855, 940, 965, 972, 975, 977, 981, 990, 1000], "meda": [75, 168, 976], "median_absolute_error": [75, 168, 976, 1022, 1028, 1030], "r2_score": [75, 167, 182, 193, 194, 406, 421, 454, 471, 472, 473, 543, 545, 547, 549, 551, 554, 557, 559, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 712, 716, 821, 822, 831, 839, 846, 889, 891, 894, 897, 899, 965, 976, 1019, 1021, 1027, 1031, 1032], "compute_scor": [75, 103, 177, 178, 633, 634, 1027], "r2": [75, 111, 116, 130, 167, 169, 193, 233, 375, 400, 406, 543, 559, 662, 811, 846, 976, 984, 1027], "ridge_cv": 75, "y_pred_ridg": 75, "ridge_cv_with_trans_target": 75, "inverse_func": [75, 168, 400, 454, 852, 986, 1026], "y_pred_ridge_with_trans_target": 75, "sell": 75, "quantile_transform": [75, 865, 876, 986, 1025, 1026, 1027], "house_pric": [75, 130], "select_dtyp": [75, 120, 316, 455], "nan": [75, 120, 162, 163, 168, 216, 239, 254, 262, 307, 311, 316, 359, 365, 375, 382, 386, 406, 435, 457, 485, 544, 545, 546, 550, 551, 553, 582, 583, 586, 592, 595, 598, 616, 617, 618, 619, 624, 701, 702, 703, 710, 711, 712, 716, 717, 718, 757, 766, 771, 772, 773, 775, 785, 788, 789, 791, 799, 807, 810, 811, 812, 815, 857, 858, 862, 864, 865, 868, 869, 873, 876, 877, 879, 906, 907, 908, 909, 951, 965, 976, 986, 992, 1013, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "inf": [75, 153, 289, 382, 399, 409, 435, 439, 446, 450, 460, 461, 467, 542, 543, 548, 549, 582, 583, 586, 595, 596, 597, 608, 616, 624, 626, 637, 638, 639, 641, 658, 660, 661, 665, 669, 676, 716, 718, 734, 766, 773, 777, 844, 853, 860, 906, 908, 909, 923, 976, 986, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "lotfrontag": 75, "garageyrblt": 75, "masvnrarea": [75, 130], "to_fram": 75, "n_quantil": [75, 169, 305, 865, 877, 1027], "output_distribut": [75, 301, 305, 400, 864, 865, 876, 877, 986], "squeez": [75, 156, 157, 279, 301, 1010], "quantiletransform": [75, 169, 305, 400, 454, 864, 877, 966, 986, 1025, 1026, 1027, 1028, 1029, 1034], "weaker": 75, "residu": [75, 194, 200, 255, 421, 454, 471, 472, 473, 541, 543, 545, 547, 549, 551, 554, 557, 559, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 660, 661, 662, 663, 667, 668, 674, 675, 690, 732, 773, 821, 822, 831, 839, 846, 889, 891, 894, 897, 899, 972, 976, 1009, 1030, 1031, 1033], "smile": [75, 368, 1032], "194": [75, 76, 298], "plot_transformed_target": [75, 76, 454], "752": [76, 344], "auto_examples_compos": 76, "mahalanobi": [77, 83, 165, 399, 401, 439, 446, 458, 459, 460, 461, 462, 463, 464, 465, 766, 767, 768, 835, 970, 982, 1026, 1029, 1030], "ledoitwolf": [77, 79, 83, 103, 165, 401, 458, 459, 463, 464, 465, 466, 785, 1022], "empiricalcovari": [78, 80, 81, 401, 458, 462, 463, 464, 465, 982], "unbias": [78, 397, 401, 404, 426, 539, 645, 661, 663, 676, 972, 1006], "shrunk": [78, 103, 301, 412, 462, 464, 465, 468, 469, 470, 538, 869, 970, 990, 1012, 1013], "base_x_train": 78, "base_x_test": 78, "coloring_matrix": [78, 79], "shrunkcovari": [78, 103, 401, 458, 459, 462, 463, 464], "empirical_covari": [78, 401, 1034], "log_likelihood": [78, 599, 600, 783, 784], "negative_loglik": 78, "real_cov": [78, 79, 459, 462, 463, 464, 465], "emp_cov": [78, 80, 82, 467, 470], "loglik_r": 78, "inv": [78, 82, 296], "formula": [78, 79, 396, 399, 401, 412, 462, 464, 505, 506, 507, 579, 632, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 653, 665, 667, 693, 717, 743, 752, 965, 970, 972, 976, 981, 982, 986, 990, 1023, 1025, 1027], "asymptot": [78, 79, 187, 359, 401, 463, 525, 718, 972, 975, 1028], "criterion": [78, 79, 171, 186, 206, 249, 271, 312, 375, 382, 386, 399, 404, 430, 434, 438, 441, 448, 451, 521, 526, 528, 535, 542, 543, 546, 547, 548, 549, 553, 554, 555, 595, 616, 633, 634, 637, 645, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 669, 680, 684, 699, 784, 885, 890, 891, 892, 893, 894, 896, 897, 898, 899, 972, 975, 976, 984, 989, 992, 998, 1010, 1013, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1034], "chen": [78, 79, 401, 406, 412, 464, 714, 744, 968, 976, 1021, 1024, 1025, 1026, 1028, 1031, 1032, 1033], "Its": [78, 109, 257, 261, 369, 375, 386, 404, 409, 527, 971, 972, 981, 984, 990, 996, 1000, 1021], "tuned_paramet": [78, 136, 257], "loglik_lw": 78, "loglik_oa": 78, "unseen": [78, 121, 144, 187, 206, 272, 285, 361, 365, 375, 385, 386, 399, 403, 834, 865, 877, 967, 976, 982, 984, 986, 992, 1002, 1021, 1026, 1030], "loglog": [78, 231], "lik_max": 78, "amax": [78, 121], "lik_min": 78, "amin": 78, "vline": [78, 97, 185, 186, 187, 199, 259, 272, 302], "shrinkage_": [78, 79, 462, 464], "magenta": [78, 125], "purpl": [78, 92, 223], "cyan": [78, 113, 168, 282, 290], "realli": [78, 170, 187, 377, 378, 379, 976, 982, 1000, 1032], "interestingli": [78, 147, 986], "outperform": [78, 86, 130, 306, 384, 403, 406, 441, 451, 978, 986], "plot_covariance_estim": [78, 83], "inspir": [79, 127, 169, 216, 373, 384, 406, 550, 551, 913, 966, 996, 1027], "mmse": [79, 401, 412, 464], "tran": 79, "octob": [79, 368, 1018, 1025, 1031, 1032], "choleski": [79, 198, 216, 382, 460, 461, 467, 516, 600, 637, 639, 640, 643, 644, 645, 647, 648, 658, 661, 663, 669, 671, 672, 676, 783, 784, 972, 1021, 1025, 1027, 1030, 1033, 1034], "toeplitz": 79, "simul": [79, 97, 168, 192, 235, 259, 1000], "n_samples_rang": [79, 231], "lw_mse": 79, "oa_ms": 79, "lw_shrinkag": 79, "oa_shrinkag": 79, "error_norm": [79, 81, 458, 459, 460, 461, 462, 463, 464, 465], "darkorang": [79, 99, 104, 105, 199, 209, 222, 245, 246, 247, 250, 266, 268, 282, 284, 290, 291, 321, 351], "plot_lw_vs_oa": [79, 83], "x_i": [80, 114, 142, 168, 199, 314, 339, 399, 404, 405, 406, 409, 603, 604, 608, 611, 612, 614, 823, 824, 827, 967, 968, 972, 978, 979, 980, 986, 990, 991, 992], "d_": [80, 399, 404, 637, 658, 669, 766, 973, 978], "mle": [80, 103, 530, 1026, 1029], "resist": [80, 81, 373], "erron": [80, 81, 404, 972, 1019, 1026, 1030], "breakdown": [80, 81, 215, 668, 972], "n_": [80, 81, 259, 314, 399, 404, 406, 635, 641, 674, 685, 968, 972, 976, 978, 979, 983, 986, 988, 991, 992], "smallest": [80, 81, 198, 279, 349, 368, 399, 401, 408, 516, 530, 619, 643, 644, 645, 671, 672, 679, 683, 684, 785, 788, 789, 799, 804, 992, 1031], "pure": [80, 81, 86, 182, 198, 386, 399, 462, 468, 485, 546, 547, 548, 549, 553, 554, 555, 694, 704, 774, 781, 896, 897, 898, 899, 986], "rousseuw": [80, 81], "rousseeuw": [80, 81, 399, 401, 458, 463, 778, 779, 982], "ass": [80, 81, 401, 463], "1984": [80, 81, 401, 463, 896, 897, 992], "wilson": [80, 370, 1018, 1021], "hilferti": 80, "1931": 80, "proceed": [80, 368, 370, 399, 410, 428, 433, 500, 685, 697, 714, 744, 835, 885, 976, 988, 989, 990], "academi": [80, 835], "688": 80, "n_outlier": [80, 81, 126, 201, 227, 286], "gen_cov": 80, "ey": [80, 81, 246, 250, 331, 368, 523, 530, 539], "outliers_cov": 80, "mincovdet": [80, 81, 401, 458, 459, 462, 464, 465, 982, 1018, 1025], "robust_cov": 80, "nmcd": 80, "nmle": 80, "26253567e": 80, "06695631e": 80, "22747343e": 80, "23773583": 80, "24640578": 80, "51963999": 80, "inlier": [80, 126, 201, 227, 237, 301, 386, 401, 458, 552, 660, 666, 834, 865, 877, 891, 892, 894, 972, 982, 1025, 1026, 1031], "inlier_plot": 80, "outlier_plot": 80, "get_xlim": [80, 193, 203, 301], "zz": 80, "mahal_emp_cov": 80, "emp_cov_contour": 80, "pubu_r": 80, "mahal_robust_cov": 80, "robust_contour": 80, "ylorbr_r": 80, "dist": [80, 220, 231, 377, 458, 459, 460, 461, 462, 463, 464, 465, 751, 757, 828, 829], "borderaxespad": 80, "cubic": [80, 409], "suggest": [80, 98, 113, 117, 168, 171, 259, 331, 359, 372, 373, 380, 386, 403, 404, 406, 458, 463, 554, 634, 813, 970, 972, 973, 981, 991, 1011, 1022, 1029, 1032], "emp_mah": 80, "markeredgewidth": [80, 263], "rm": [80, 153, 377, 381, 401], "mahal": 80, "robust_mah": 80, "location_": [80, 81, 458, 459, 460, 461, 462, 463, 464, 465], "284": [80, 83, 638], "plot_mahalanobis_dist": [80, 83], "compens": [81, 167, 169, 174, 198, 216, 260, 401, 404], "soon": [81, 386, 1009], "5n_": 81, "johanna": 81, "hardin": 81, "rock": 81, "decemb": [81, 155, 368, 653, 674, 675, 1018, 1026, 1028, 1030, 1033], "928": [81, 426], "946": 81, "zoubir": 81, "koivunen": 81, "chakhchoukh": 81, "muma": 81, "signal": [81, 95, 96, 97, 105, 123, 150, 155, 156, 165, 176, 197, 199, 217, 250, 314, 398, 399, 401, 407, 408, 409, 412, 464, 492, 510, 515, 520, 523, 526, 530, 614, 633, 634, 635, 636, 641, 642, 652, 653, 661, 673, 674, 675, 773, 806, 814, 862, 972, 976, 993, 1000, 1005, 1012, 1013], "tutori": [81, 136, 137, 138, 139, 187, 200, 216, 259, 362, 373, 374, 379, 381, 385, 393, 399, 441, 451, 680, 991, 1009, 1021], "treatment": [81, 167, 367, 404, 458, 463], "concept": [81, 116, 121, 234, 268, 362, 373, 384, 398, 399, 405, 407, 968, 976, 979, 992, 1000], "magazin": [81, 408], "29": [81, 151, 155, 189, 198, 213, 215, 217, 316, 320, 370, 371, 389, 391, 392, 406, 548, 549, 679, 683, 769, 783, 840, 972, 973, 990], "61": [81, 169, 216, 367, 370, 379, 400, 530, 549, 702], "range_n_outli": 81, "err_loc_mcd": 81, "err_cov_mcd": 81, "err_loc_emp_ful": 81, "err_cov_emp_ful": 81, "err_loc_emp_pur": 81, "err_cov_emp_pur": 81, "outliers_index": 81, "outliers_offset": 81, "inliers_mask": 81, "pure_x": 81, "pure_loc": 81, "pure_emp_cov": 81, "font_prop": 81, "hat": [81, 105, 255, 259, 284, 314, 371, 397, 401, 405, 406, 967, 972, 973, 976, 978, 980], "_2": [81, 155, 404, 407, 520, 526, 534, 535, 635, 641, 972, 980, 990, 991], "x_size": 81, "562": [81, 83], "plot_robust_vs_empirical_covari": [81, 83], "graphicallasso": [82, 401, 458, 459, 461, 462, 463, 464, 465, 467, 1026, 1034], "largest": [82, 97, 116, 200, 370, 399, 401, 404, 432, 516, 530, 546, 547, 548, 549, 553, 554, 577, 698, 783, 784, 804, 826, 896, 897, 898, 899, 925, 973, 976, 986, 991, 992], "invert": [82, 100, 144, 220, 345, 346, 384, 401, 407, 619, 678, 682, 986, 1027], "fairli": [82, 122, 221, 274, 296, 381, 399, 548, 549, 977, 1009], "tweak": [82, 234, 403, 942, 975, 1011, 1029], "readabl": [82, 260, 314, 378, 379, 381, 393, 523, 1027, 1030, 1031, 1032, 1033], "make_sparse_spd_matrix": [82, 518], "prng": 82, "prec": [82, 228, 516, 976], "smallest_coef": [82, 516], "largest_coef": [82, 516], "multivariate_norm": [82, 86, 244, 458, 459, 460, 461, 462, 463, 464, 465], "ledoit_wolf": [82, 401, 1031], "prec_": 82, "lw_cov_": 82, "lw_prec_": 82, "this_cov": 82, "this_prec": 82, "ma": [82, 307, 331, 972, 1024, 1029], "masked_equ": 82, "set_facecolor": [82, 244], "set_axis_bgcolor": 82, "alpha_": [82, 136, 168, 178, 186, 187, 461, 600, 633, 634, 636, 640, 642, 644, 645, 650, 652, 662, 664, 972, 992, 1006, 1018, 1025], "524": [82, 83, 136, 140, 346], "plot_sparse_cov": [82, 83], "982": 83, "auto_examples_covari": 83, "cross_decomposit": [84, 85, 86, 165, 235, 362, 1022, 1023, 1025, 1026, 1027], "plscanon": [85, 471, 473, 474, 998, 1013, 1022, 1026, 1028, 1030, 1032], "plsregress": [85, 86, 998, 1013, 1025, 1028, 1030, 1032], "share": [85, 128, 168, 249, 344, 353, 355, 359, 360, 375, 381, 399, 404, 407, 538, 657, 693, 697, 783, 784, 788, 789, 970, 983, 1018, 1020, 1026, 1028, 1030, 1033], "appar": [85, 978, 1000], "scatterplot": [85, 177, 259, 282], "maxim": [85, 86, 95, 106, 123, 177, 249, 250, 260, 264, 268, 269, 289, 306, 313, 331, 349, 353, 370, 386, 396, 399, 402, 404, 408, 409, 538, 599, 600, 633, 634, 637, 658, 668, 669, 709, 785, 788, 789, 799, 857, 863, 873, 970, 972, 976, 979, 981, 991, 1006, 1009, 1021, 1023, 1028, 1031, 1033], "weak": [85, 109, 121, 124, 216, 265, 403, 546, 547, 548, 553, 554, 555, 619, 979, 1000], "var": [85, 86, 101, 113, 147, 178, 259, 370, 374, 408, 630, 634, 890, 891, 892, 893, 894, 976, 1026], "corr": [85, 171, 259], "corrcoef": [85, 106], "plsca": [85, 472], "x_train_r": 85, "y_train_r": 85, "x_test_r": 85, "y_test_r": 85, "221": [85, 128, 273, 275, 1021], "222": [85, 128, 991], "223": [85, 128, 370], "yj": [85, 305], "noiz": 85, "xb": [85, 867], "50210309": 85, "55301008": 85, "72528805": 85, "03429511": 85, "83576671": 85, "74902647": 85, "03916339": 85, "84652988": 85, "78629756": 85, "11231897": 85, "1905275": 85, "33508757": 85, "35433161": 85, "32686504": 85, "39877158": 85, "47827435": 85, "38004088": 85, "35574845": 85, "exce": [85, 277, 312, 409, 431, 504, 591, 638, 647, 1027, 1030, 1032], "219": [85, 87, 258, 297, 299], "plot_compare_cross_decomposit": [85, 87], "pcr": [86, 402], "pl": [86, 202, 370, 402, 471, 472, 473, 474, 1023], "greedili": [86, 147, 399, 403, 408, 449], "despit": [86, 196, 198, 216, 233, 288, 386, 390, 401, 616, 617, 619, 972, 979, 1000, 1026, 1027], "suffer": [86, 118, 170, 279, 301, 345, 359, 399, 406, 409, 533, 751, 971, 972, 976, 979, 1010, 1027], "dive": [86, 373, 379], "explained_variance_": [86, 523, 530, 533, 1010, 1025], "onto": [86, 220, 221, 232, 301, 384, 404, 407, 411, 435, 437, 450, 522, 528, 532, 616, 617, 619, 677, 970, 974, 979], "recommend": [86, 118, 162, 215, 228, 234, 255, 268, 305, 313, 359, 360, 362, 367, 371, 373, 375, 379, 381, 384, 389, 402, 403, 404, 406, 408, 427, 436, 438, 440, 449, 485, 497, 524, 527, 533, 538, 550, 551, 558, 571, 572, 578, 595, 600, 620, 621, 627, 659, 665, 681, 686, 687, 689, 691, 791, 797, 799, 807, 844, 851, 853, 860, 867, 868, 873, 874, 876, 877, 878, 879, 881, 890, 893, 925, 944, 965, 973, 976, 978, 980, 983, 986, 988, 990, 991, 992, 995, 1000, 1013, 1020, 1021, 1027, 1028, 1029, 1030, 1032, 1034], "linearregress": [86, 133, 167, 177, 188, 193, 194, 195, 196, 201, 204, 215, 230, 234, 236, 255, 273, 302, 355, 373, 384, 385, 400, 406, 454, 559, 621, 624, 635, 638, 641, 643, 660, 661, 676, 972, 976, 986, 1009, 1022, 1023, 1027, 1030, 1031, 1032, 1034], "retriev": [86, 168, 202, 266, 345, 353, 377, 386, 400, 404, 407, 408, 457, 485, 579, 582, 583, 615, 642, 652, 673, 714, 718, 720, 721, 744, 769, 823, 827, 860, 886, 942, 972, 974, 976, 978, 996, 997, 1010, 1023, 1028, 1030, 1032], "026": 86, "predit": 86, "pca_2": 86, "673": [86, 379], "448": [86, 87, 279], "plot_pcr_vs_pl": [86, 87], "666": [87, 117, 153, 830, 966], "auto_examples_cross_decomposit": 87, "multilabel": [88, 93, 165, 226, 242, 266, 277, 368, 375, 376, 386, 394, 471, 476, 486, 497, 498, 504, 512, 530, 546, 553, 556, 663, 664, 692, 696, 702, 714, 717, 718, 722, 723, 726, 727, 742, 744, 771, 772, 775, 776, 780, 782, 817, 821, 845, 852, 855, 859, 861, 872, 893, 896, 898, 914, 938, 939, 940, 987, 998, 999, 1011, 1013, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1032, 1033], "056": [89, 93, 984], "plot_digits_last_imag": [89, 93], "iris": [90, 265, 266, 1008], "150x4": 90, "unus": [90, 101, 102, 169, 195, 219, 221, 452, 568, 751, 759, 965, 973, 1018, 1026, 1028, 1029, 1031, 1033], "plai": [90, 96, 124, 152, 181, 207, 253, 282, 290, 327, 328, 359, 384, 1011], "set1": [90, 259, 288, 289], "getter": [90, 458, 459, 460, 461, 462, 463, 464, 465, 582, 583, 586], "110": [90, 177, 195, 205, 230, 307, 426, 970, 971], "3rd": [90, 158, 823, 866, 978, 986], "plot_iris_dataset": [90, 93], "easi": [91, 169, 206, 216, 247, 257, 259, 331, 344, 355, 368, 379, 381, 384, 385, 399, 406, 489, 493, 499, 855, 965, 971, 975, 983, 986, 996, 997, 1000, 1011, 1028, 1033, 1034], "make_gaussian_quantil": [91, 110, 112, 369, 459, 463, 464, 465, 509], "321": 91, "323": 91, "y2": [91, 112, 705, 977], "324": [91, 368], "multi": [91, 108, 109, 134, 165, 176, 214, 217, 218, 221, 225, 226, 227, 235, 238, 242, 252, 256, 268, 275, 277, 294, 299, 311, 316, 344, 348, 354, 360, 368, 370, 375, 376, 382, 386, 389, 399, 406, 407, 409, 416, 426, 441, 451, 458, 463, 484, 485, 493, 494, 499, 503, 504, 508, 509, 511, 530, 538, 539, 540, 542, 544, 546, 547, 548, 550, 553, 554, 556, 558, 599, 620, 622, 632, 635, 636, 641, 642, 646, 647, 649, 650, 651, 652, 655, 657, 661, 662, 663, 664, 665, 670, 673, 679, 692, 702, 709, 717, 722, 728, 730, 771, 785, 799, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 835, 836, 838, 844, 845, 846, 849, 855, 868, 872, 883, 884, 888, 890, 893, 896, 897, 898, 900, 901, 902, 908, 911, 914, 965, 977, 979, 983, 986, 990, 996, 997, 998, 1002, 1008, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1034], "325": 91, "326": [91, 344], "317": [91, 93, 155], "plot_random_dataset": [91, 93], "make_multilabel_classif": [92, 235, 369, 504, 525, 776, 819, 820, 976, 1020, 1021, 1023, 1029], "star": [92, 133, 373], "degener": [92, 245, 411, 429, 443, 522, 709, 972, 976, 1027, 1031, 1032], "vocabulari": [92, 213, 344, 345, 384, 407, 577, 578, 579, 580, 978, 1002, 1011, 1018, 1020, 1023, 1026, 1029, 1031], "757": [92, 257, 279, 370], "w0": 92, "w1": [92, 406, 646], "make_ml_clf": 92, "ff3333": 92, "0198e1": 92, "bf5fff": 92, "fcd116": 92, "ff7216": 92, "4dbd33": 92, "87421f": 92, "plot_2d": [92, 219], "p_c": [92, 512], "p_w_c": [92, 512], "allow_unlabel": [92, 235, 512], "return_distribut": [92, 512], "sep": [92, 268], "p_w": 92, "126": [92, 93, 184, 406], "plot_random_multilabel_dataset": [92, 93], "644": 93, "auto_examples_dataset": 93, "blind": [94, 107, 165, 344, 404, 522, 530], "fastica": [94, 107, 165, 404, 521, 524, 530, 1010, 1018, 1020, 1026, 1032, 1033], "increment": [94, 107, 165, 262, 377, 379, 431, 436, 452, 493, 522, 523, 524, 525, 528, 530, 533, 591, 635, 647, 655, 791, 812, 820, 821, 823, 824, 825, 826, 827, 857, 858, 868, 888, 889, 951, 972, 978, 1021, 1022], "fa": [94, 106, 107, 165, 379, 404, 462, 465, 521, 530, 785, 810], "precomput": [94, 107, 165, 176, 217, 222, 279, 281, 375, 382, 384, 386, 399, 407, 410, 421, 429, 430, 433, 434, 435, 439, 441, 446, 454, 460, 471, 472, 473, 513, 520, 524, 526, 529, 531, 537, 543, 545, 547, 549, 551, 554, 557, 559, 599, 600, 609, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 670, 671, 673, 674, 677, 679, 680, 681, 685, 762, 766, 769, 778, 779, 821, 822, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 846, 889, 890, 891, 892, 893, 894, 897, 899, 952, 953, 954, 968, 974, 979, 991, 997, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1033, 1034], "olivetti": [95, 118, 366, 404, 484, 1013, 1018, 1026], "chapter": [95, 355, 375, 399, 404, 406, 409, 519, 521, 523, 603, 608, 611, 632, 966, 969, 972, 991, 992], "decompos": [95, 99, 113, 303, 398, 523, 527, 698, 809, 925, 971, 972, 976, 993, 1012, 1013], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 236], "constrained_layout": [95, 169, 219, 307, 308, 316], "set_constrained_layout_pad": 95, "w_pad": [95, 119, 350], "h_pad": [95, 119, 350], "set_edgecolor": 95, "vec": [95, 407, 527, 529, 536], "im": [95, 106, 270, 283, 999], "pad": [95, 119, 162, 169, 219, 237, 344, 350, 407, 577, 578, 580], "initialis": [95, 527, 529, 536, 1018, 1026, 1027], "mathbb": [95, 113, 153, 402, 976, 983, 991], "4096": [95, 368, 404, 484], "human": [95, 169, 344, 393, 399, 404, 845, 846, 976, 983, 1027], "friendli": [95, 360, 373, 381, 404, 881, 988, 989, 996, 997], "visualis": [95, 98, 106, 235, 533, 979, 997], "64x64": [95, 368, 404], "singular": [95, 382, 396, 399, 402, 440, 442, 471, 472, 473, 474, 510, 513, 523, 527, 529, 530, 533, 536, 538, 539, 646, 661, 662, 663, 676, 925, 972, 973, 975, 1012, 1013, 1024, 1025], "scalar": [95, 314, 379, 386, 400, 409, 411, 453, 456, 513, 522, 604, 605, 606, 611, 612, 616, 617, 726, 730, 904, 912, 968, 980, 982, 986, 990, 996, 1028, 1029, 1032, 1034], "noise_variance_": [95, 186, 521, 523, 530, 645, 1025, 1032], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 168, 365, 401, 404, 407, 462, 505, 506, 507, 616, 617, 618, 619, 638, 660, 667, 668, 823, 824, 825, 826, 827, 970, 972, 975, 978, 996, 1002, 1010, 1013], "subcompon": [95, 404], "ica_estim": 95, "15e": 95, "sparsepca": [95, 520, 522, 523, 524, 526, 528, 529, 530, 531, 534, 535, 1018, 1025, 1026, 1028, 1029, 1031, 1032, 1033], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 361, 404, 520, 527, 531, 534, 535, 1019, 1021, 1028, 1029, 1031, 1032, 1033, 1034], "batch_dict_estim": 95, "That": [95, 147, 187, 227, 259, 263, 345, 346, 360, 367, 381, 386, 403, 408, 409, 432, 435, 436, 546, 553, 582, 803, 896, 897, 965, 973, 974, 976, 982, 992, 1027, 1028], "enhanc": [95, 372, 373, 377, 384, 386, 399, 976, 994, 1016, 1017, 1018, 1019, 1020, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "consum": [95, 355, 367, 375, 386, 390, 399, 403, 406, 438, 788, 789, 848, 849, 932, 972, 1000, 1023], "kmeans_estim": 95, "heteroscedast": [95, 103, 123, 200, 404, 864, 876], "fa_estim": 95, "factoranalysi": [95, 103, 106, 404, 533, 1019, 1021, 1030, 1032], "wrap": [95, 115, 123, 279, 367, 375, 386, 422, 497, 574, 575, 646, 665, 730, 814, 872, 966, 976, 979, 991, 996, 1018, 1023, 1026, 1028, 1029, 1031, 1033], "colormap": [95, 112, 158, 190, 207, 331, 336, 350, 686, 1031], "uv": [95, 404], "x_1": [95, 142, 153, 195, 199, 402, 404, 406, 409, 602, 614, 646, 861, 972, 978, 980, 986, 990], "x_n": [95, 404, 978, 980, 990], "dict_pos_dict_estim": 95, "positive_dict": [95, 520, 526, 534, 535], "dict_pos_code_estim": 95, "fit_algorithm": [95, 520, 526, 1033, 1034], "cd": [95, 370, 371, 373, 377, 379, 404, 460, 461, 467, 520, 526, 528, 529, 532, 534, 535, 536, 972, 1011, 1023, 1033], "positive_cod": [95, 520, 526, 531, 534, 535], "dict_pos_estim": 95, "plot_faces_decomposit": [95, 107], "imagin": [96, 150, 234, 403, 404, 407, 972], "microphon": 96, "s1": [96, 147, 158, 186, 187, 370, 1010], "sinusoid": [96, 111, 123, 182, 233, 409, 969, 1010], "s2": [96, 147, 158, 186, 187, 370, 539, 1010], "sawtooth": [96, 1010], "saw": [96, 199, 1010], "tooth": [96, 1010], "s_": [96, 263, 973, 984, 1010], "a_": [96, 396, 399, 527, 529, 536, 972, 1010], "mixing_": [96, 97, 522, 1010], "prove": [96, 1000], "revert": [96, 619, 621, 622, 1025, 1030], "unmix": [96, 411, 522], "allclos": [96, 127, 988, 1010], "mean_": [96, 263, 521, 522, 523, 528, 530, 532, 868, 986, 1010, 1026], "orthogon": [96, 97, 98, 165, 176, 217, 398, 404, 515, 520, 526, 528, 531, 532, 537, 653, 654, 674, 675, 988, 998, 1013, 1018], "steelblu": [96, 97, 132], "sig": 96, "298": [96, 107, 231, 984], "plot_ica_blind_source_separ": [96, 107], "ica": [97, 398, 411, 992, 1012, 1013], "geometr": [97, 399, 677, 693, 719, 745, 973, 1026], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 250], "axis_list": 97, "x_axi": [97, 206, 263], "y_axi": [97, 206], "quiver": 97, "hline": 97, "set_zord": 97, "09": [97, 105, 168, 217, 231, 235, 242, 251, 272, 275, 298, 399, 723, 826, 976, 986, 990], "282": [97, 107, 1007, 1018], "plot_ica_vs_pca": [97, 107], "firstli": [98, 359, 384, 646, 1011], "undistort": 98, "noiseless": [98, 974], "pursuit": [98, 165, 176, 217, 404, 463, 515, 520, 526, 531, 537, 653, 654, 674, 675, 998, 1013, 1018], "omp": [98, 105, 197, 404, 520, 526, 531, 537, 653, 654, 674, 675, 998, 1013, 1018, 1026], "promin": [98, 386], "reminisc": 98, "downsampl": [98, 237], "075": [98, 345], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 206, 247, 386, 429, 436, 437, 438, 460, 461, 471, 472, 473, 520, 521, 522, 525, 526, 527, 528, 529, 532, 550, 551, 616, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 667, 668, 669, 679, 681, 783, 784, 837, 845, 846, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 1022, 1025, 1026, 1028, 1031, 1032, 1034], "n_steps_": [98, 438, 526, 527, 1031], "reconstruct_from_patches_2d": [98, 407, 572], "intercept": [98, 190, 207, 215, 340, 386, 471, 472, 473, 538, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 676, 863, 867, 870, 888, 889, 895, 972, 974, 976, 981, 990, 991, 1021, 1023, 1027, 1028], "transform_algorithm": [98, 105, 520, 526, 531, 1034], "n1": 98, "atom": [98, 105, 404, 520, 526, 528, 531, 532, 534, 535, 642, 652, 673, 972, 1018, 1031], "transform_n_nonzero_coef": [98, 105, 520, 526, 531], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 520, 526, 531, 1031], "set_param": [98, 106, 114, 120, 123, 169, 170, 178, 186, 187, 191, 202, 206, 232, 272, 311, 334, 345, 376, 386, 399, 400, 406, 409, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 966, 982, 1002, 1009, 1018, 1024, 1025, 1026, 1031, 1032], "716": [98, 107, 502], "plot_image_denois": [98, 107], "ipca": [99, 522, 523], "flip": [99, 571, 730, 925, 978, 1022, 1031], "incrementalpca": [99, 361, 404, 522, 524, 528, 530, 533, 1022, 1025, 1026, 1028, 1029, 1032], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 125, 204, 215, 222, 246, 247, 266], "x_transform": [99, 128, 234, 474, 520, 521, 522, 523, 524, 526, 528, 532, 555, 627, 628, 677, 678, 679, 680], "nmean": 99, "shadow": [99, 104, 105, 222, 321, 338, 346, 407], "scatterpoint": [99, 104, 222, 246, 321], "238": [99, 107], "plot_incremental_pca": [99, 107], "kernal": 100, "nest": [100, 110, 165, 187, 234, 252, 275, 360, 379, 386, 389, 399, 403, 409, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 451, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 493, 508, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 790, 799, 810, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 944, 965, 976, 979, 1018, 1019, 1022, 1024, 1025, 1026, 1032], "train_ax": 100, "test_ax": 100, "straight": [100, 188, 194, 196, 256, 359], "inner": [100, 123, 260, 264, 321, 359, 407, 432, 503, 535, 571, 578, 637, 658, 669, 763, 765, 968, 976, 986, 991, 1019, 1022, 1032], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 376, 973], "untangl": 100, "mind": [100, 167, 168, 169, 216, 305, 306, 344, 345, 355, 373, 393, 401, 403, 406, 635, 636, 693, 972, 991, 996, 1002, 1009], "investig": [100, 106, 163, 339, 373, 972], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 116, 120, 147, 171, 186, 187, 279, 312, 316, 344, 359, 360, 375, 378, 381, 382, 384, 386, 395, 396, 399, 404, 406, 407, 538, 574, 575, 582, 586, 596, 597, 812, 815, 853, 942, 965, 968, 970, 972, 976, 979, 986, 991, 1000, 1026, 1027, 1028, 1032, 1034], "analyt": [100, 404, 409, 521, 609, 697, 966, 970, 976, 995, 1000], "kernelridg": [100, 150, 233, 661, 969, 1022], "relianc": 100, "592": [100, 107, 600, 603, 614, 983], "plot_kernel_pca": [100, 107], "aid": [101, 256, 399, 778, 779, 973, 1000, 1018, 1030], "kevin": [101, 632, 1020, 1022, 1024, 1025, 1028, 1029, 1030, 1032, 1033], "hugh": [101, 863, 1020, 1031], "pdf": [101, 147, 259, 284, 301, 370, 373, 399, 408, 431, 438, 520, 523, 526, 530, 630, 633, 638, 647, 653, 655, 656, 660, 665, 668, 671, 672, 674, 675, 681, 825, 826, 837, 844, 881, 883, 972, 989, 992, 999, 1014, 1018], "30000": [101, 368], "pdf_z": 101, "plot_fig": [101, 195], "fig_num": [101, 195], "pca_scor": [101, 103], "vt": [101, 539], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 169, 195], "plot_pca_3d": [101, 107], "cla": 102, "plot_pca_iri": [102, 107], "homoscedast": [103, 230, 305, 976, 1026], "succe": [103, 182], "subspac": [103, 402, 406, 441, 504, 544, 545, 680, 684, 925, 970, 979, 982, 988, 1000, 1010], "overestim": [103, 355, 403], "circumst": [103, 216, 979, 996], "nip": [103, 370, 504, 530, 555, 630, 976], "604": [103, 530], "minka": [103, 530, 972], "deni": [103, 1020, 1021, 1025, 1026, 1027, 1033], "engemann": [103, 1020, 1021, 1025], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 137, 162, 163, 165, 252, 255, 264, 273, 275, 334, 355, 373, 375, 384, 403, 406, 509, 564, 692, 730, 785, 809, 811, 896, 897, 965, 976, 1006, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1030, 1031], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 136, 188, 258, 262], "violet": 103, "712": [103, 107], "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 268, 495, 496, 976, 996], "92461872": 104, "05306648": 104, "x_r": [104, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592], "x_r2": 104, "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 404, 520, 526, 529, 537, 1025, 1026, 1028, 1030, 1032], "mexican": 105, "piecewis": [105, 314, 396, 967, 972, 986, 992], "matter": [105, 250, 355, 399, 406, 556, 657, 665, 667, 972, 1022], "motiv": [105, 373, 375, 386, 406, 968, 976, 986, 1000, 1031], "heavier": [105, 401, 972], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 520, 526, 531, 537, 1028], "n_nonzero": 105, "coder": [105, 531, 705], "flatnonzero": [105, 186, 258, 267, 268, 769], "soft": [105, 131, 132, 373, 386, 558, 559, 884, 892, 990, 1000, 1023], "debias": 105, "lstsq": [105, 373, 646, 659], "rcond": 105, "304": [105, 107, 305, 370], "plot_sparse_cod": [105, 107], "uncov": [106, 684], "inher": [106, 193, 355, 399, 404, 966, 968, 970, 971, 973, 977], "varimax": [106, 404, 521, 1030], "jona": [106, 1030], "sassenhagen": [106, 1030], "set_yticklabel": [106, 153, 162, 163, 171, 270, 346], "n_comp": [106, 174], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "364": [106, 107, 460, 461, 1019], "plot_varimax_fa": [106, 107], "auto_examples_decomposit": 107, "predictor": [108, 134, 165, 198, 216, 375, 385, 386, 400, 402, 403, 406, 409, 455, 456, 471, 472, 473, 485, 505, 506, 507, 544, 545, 551, 554, 557, 591, 599, 619, 621, 622, 637, 642, 646, 658, 662, 669, 690, 809, 811, 820, 821, 849, 861, 862, 868, 950, 972, 977, 1019, 1025, 1028], "stack": [108, 134, 165, 284, 353, 372, 381, 384, 386, 405, 453, 455, 456, 485, 504, 551, 554, 556, 557, 601, 616, 617, 619, 642, 662, 690, 809, 811, 849, 853, 861, 862, 868, 950, 966, 996, 997, 998, 999, 1013, 1021, 1025, 1026, 1027, 1028, 1029], "versu": [108, 130, 134, 165, 168, 176, 207, 213, 217, 233, 247, 252, 275, 287, 318, 325, 399, 403, 406, 409, 493, 509, 523, 542, 545, 599, 628, 647, 648, 655, 657, 663, 664, 665, 666, 771, 782, 785, 790, 810, 814, 820, 849, 884, 885, 892, 893, 896, 897, 965, 972, 976, 977, 982, 989, 990, 991, 1009, 1026], "isolationforest": [108, 134, 165, 227, 237, 620, 814, 892, 982, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1033, 1034], "oob": [108, 122, 134, 165, 406, 504, 553, 997, 1020, 1031], "votingclassifi": [108, 134, 165, 493, 553, 559, 620, 647, 826, 830, 893, 896, 965, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032], "vote": [108, 116, 131, 132, 134, 165, 277, 386, 387, 490, 544, 545, 546, 549, 553, 554, 558, 559, 646, 816, 830, 831, 836, 838, 977, 979, 998, 1009, 1013, 1021, 1023, 1028], "hasti": [109, 110, 113, 114, 121, 125, 147, 186, 258, 370, 403, 406, 508, 509, 542, 548, 549, 617, 645, 710, 711, 712, 818, 835, 881, 896, 897, 966, 970, 972, 977, 983, 988, 990, 992], "2009": [109, 110, 113, 114, 125, 182, 399, 403, 404, 406, 407, 508, 509, 517, 520, 526, 527, 529, 530, 533, 536, 542, 548, 549, 624, 660, 668, 685, 819, 896, 897, 924, 925, 972, 976, 977, 983, 992], "tibshirani": [109, 113, 114, 125, 147, 186, 258, 370, 403, 406, 509, 548, 549, 617, 645, 710, 711, 712, 818, 835, 896, 897, 966, 970, 972, 977, 983, 992], "friedman": [109, 113, 114, 125, 258, 401, 403, 406, 467, 505, 506, 507, 509, 547, 548, 549, 554, 582, 583, 818, 896, 897, 899, 970, 972, 977, 983, 992], "ed": [109, 114, 125, 399, 406, 509, 548, 549, 988, 1018, 1025], "springer": [109, 113, 114, 125, 258, 397, 399, 403, 404, 406, 509, 524, 548, 549, 679, 683, 685, 694, 709, 714, 728, 729, 744, 783, 896, 897, 973, 976, 977, 983, 992], "zhu": [109, 110, 406, 508, 542, 647, 883], "zou": [109, 110, 186, 406, 508, 542, 645, 972, 990], "rosset": [109, 110, 406, 508, 542], "make_hastie_10_2": [109, 121, 125, 263, 369, 406, 548, 983], "12_000": 109, "Be": [109, 144, 159, 344, 373, 401, 556, 557, 637, 643, 644, 645, 647, 648, 658, 669, 693, 803, 804, 863, 986, 1015, 1019], "stump": [109, 112, 406, 548, 1029], "2_000": 109, "dt_stump": 109, "min_samples_leaf": [109, 116, 122, 123, 170, 311, 314, 349, 406, 546, 547, 548, 549, 550, 551, 553, 554, 555, 896, 897, 898, 899, 992, 1024], "dt_stump_err": 109, "dt_err": 109, "ada_discret": 109, "adaboostclassifieradaboostclassifi": 109, "decisiontreeclassifierdecisiontreeclassifi": [109, 353], "ada_r": 109, "zero_one_loss": [109, 373, 692, 722, 976, 1019, 1020, 1021], "ada_discrete_err": 109, "staged_predict": [109, 110, 124, 406, 542, 543, 548, 549, 550, 551, 1018, 1030], "ada_discrete_err_train": 109, "ada_real_err": 109, "ada_real_err_train": 109, "leg": 109, "fancybox": [109, 338], "get_fram": 109, "345": [109, 134, 370], "plot_adaboost_hastie_10_2": [109, 134], "sphere": [110, 165, 218, 219, 225, 345, 405, 508, 578, 677, 678, 679, 680, 681, 752, 911, 970, 974, 979], "roughli": [110, 123, 187, 250, 269, 279, 306, 359, 386, 404, 407, 508, 973, 1018], "samm": [110, 112, 406, 542], "13000": 110, "bdt_real": 110, "bdt_discret": 110, "real_test_error": 110, "discrete_test_error": 110, "real_test_predict": 110, "discrete_test_predict": 110, "n_trees_discret": 110, "n_trees_real": 110, "termin": [110, 360, 378, 379, 381, 389, 399, 437, 450, 542, 543, 547, 548, 549, 552, 554, 655, 656, 657, 665, 667, 845, 846, 897, 899, 982, 992], "alwai": [110, 116, 120, 123, 177, 198, 216, 224, 231, 262, 265, 269, 308, 328, 345, 355, 359, 360, 367, 373, 374, 375, 379, 385, 386, 389, 397, 399, 400, 403, 406, 407, 408, 409, 421, 432, 438, 453, 454, 456, 458, 471, 472, 473, 477, 485, 497, 498, 533, 538, 540, 541, 543, 545, 547, 548, 549, 550, 551, 553, 554, 557, 559, 570, 577, 578, 580, 583, 600, 616, 617, 619, 621, 622, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 660, 661, 662, 665, 667, 668, 684, 694, 698, 704, 710, 711, 712, 720, 722, 723, 727, 770, 773, 774, 783, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 821, 822, 831, 832, 839, 840, 846, 853, 861, 866, 868, 881, 889, 890, 891, 893, 894, 896, 897, 899, 926, 935, 965, 966, 968, 970, 972, 975, 976, 979, 982, 984, 988, 989, 991, 992, 1000, 1002, 1009, 1018, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033], "crop": [110, 381, 1033], "discrete_estimator_error": 110, "estimator_errors_": [110, 542, 543], "real_estimator_error": 110, "discrete_estimator_weight": 110, "estimator_weights_": [110, 542, 543], "62": [110, 169, 174, 216, 253, 298, 316, 320, 355, 368, 399, 482, 483, 828, 829, 1014, 1021], "329": [110, 134, 439], "plot_adaboost_multiclass": [110, 134], "1d": [111, 113, 165, 169, 199, 231, 280, 293, 338, 351, 373, 380, 382, 385, 386, 400, 405, 453, 456, 606, 622, 642, 646, 649, 652, 673, 692, 701, 702, 708, 717, 718, 722, 726, 730, 771, 772, 775, 782, 830, 831, 832, 833, 834, 836, 838, 839, 840, 853, 904, 908, 909, 939, 963, 977, 1002, 1009, 1018, 1023, 1024, 1025, 1027, 1031, 1032], "299": [111, 669], "drucker": [111, 406, 543], "1997": [111, 368, 404, 406, 409, 524, 543, 679, 683, 972, 973, 976], "dummi": [111, 198, 216, 234, 262, 362, 375, 378, 394, 861, 870, 986, 992, 1013, 1019, 1021, 1022, 1023, 1025], "decisiontreeregressor": [111, 113, 238, 302, 311, 351, 352, 378, 543, 545, 547, 548, 549, 551, 554, 621, 622, 896, 899, 901, 920, 966, 992, 1019, 1020, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "adaboostregressor": [111, 406, 542, 551, 1020, 1021, 1024, 1027, 1028, 1031, 1033, 1034], "regr_1": [111, 351, 352], "regr_2": [111, 351, 352], "y_1": [111, 351, 352, 402, 976, 980, 990], "y_2": [111, 351, 352, 980], "433": [111, 134, 370], "plot_adaboost_regress": [111, 134], "puriti": [112, 900, 902], "plot_adaboost_twoclass": [112, 134], "73": [112, 263, 320, 385, 785, 799, 834, 897, 986, 1007, 1018, 1020], "bdt": 112, "plot_color": [112, 350], "br": 112, "plot_step": [112, 119, 350], "class_nam": [112, 253, 900, 901, 902, 992, 1034], "xx0": [112, 620], "twoclass_output": 112, "plot_rang": 112, "810": [112, 134, 170], "irreduc": [113, 976], "light": [113, 368], "beam": [113, 1018], "pointwis": [113, 157, 410, 433], "offset": [113, 174, 384, 401, 404, 458, 497, 498, 552, 621, 622, 630, 631, 633, 634, 666, 716, 763, 765, 834, 892, 976, 990, 1009, 1026], "narrow": [113, 123, 301, 303, 378, 828, 829], "bootstrap": [113, 114, 122, 162, 262, 271, 313, 403, 406, 543, 544, 545, 546, 547, 552, 553, 554, 914, 947, 972, 1018, 1019, 1021, 1023, 1026, 1028, 1031], "stem": [113, 170, 197, 250, 403, 407, 968, 978], "0255": 113, "0003": 113, "0152": 113, "0098": 113, "0196": 113, "0004": [113, 306], "0092": 113, "baggingregressor": [113, 406, 544, 899, 966, 1021, 1024, 1026, 1029, 1033, 1034], "n_repeat": [113, 117, 124, 146, 168, 170, 171, 259, 311, 403, 504, 623, 800, 801, 984], "knn": [113, 131, 138, 162, 287, 288, 291, 306, 313, 321, 344, 406, 591, 837, 883, 884, 979, 989, 1009, 1024], "y_predict": [113, 375, 1018], "y_error": [113, 204], "y_nois": 113, "y_bia": 113, "y_var": 113, "534": [113, 134, 168], "plot_bias_vari": [113, 134], "z_i": [114, 980], "y_i": [114, 314, 339, 397, 406, 967, 968, 972, 976, 980, 990, 991, 992], "whilst": [114, 221], "practition": 114, "suitabl": [114, 123, 182, 184, 296, 346, 367, 368, 379, 382, 399, 404, 407, 441, 451, 457, 476, 494, 497, 616, 624, 823, 824, 827, 862, 863, 886, 941, 945, 970, 972, 975, 986, 988, 990, 996, 999, 1011, 1032, 1033], "p592": 114, "593": 114, "kian": [114, 1023, 1033], "ho": [114, 406, 544, 545, 976, 1023, 1026, 1027, 1032], "hui": [114, 186, 527, 529, 536, 645, 972], "ordereddict": 114, "123": [114, 132, 345, 355, 406, 505, 506, 507, 544, 545, 821, 977, 984], "warm_start": [114, 154, 191, 314, 375, 379, 386, 406, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 599, 635, 637, 638, 641, 647, 649, 651, 655, 656, 657, 658, 665, 666, 667, 669, 783, 784, 837, 845, 846, 982, 998, 1013, 1018, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1032, 1034], "track": [114, 122, 320, 373, 376, 377, 389, 395, 523, 945, 977, 996, 997, 1025, 1028], "trajectori": 114, "ensemble_clf": 114, "oob_scor": [114, 406, 544, 545, 546, 547, 553, 554, 1023, 1025], "log2": [114, 208, 239, 546, 547, 548, 549, 553, 554, 896, 897, 898, 899, 977], "error_r": 114, "min_estim": 114, "max_estim": 114, "oob_error": 114, "oob_score_": [114, 544, 545, 546, 547, 548, 549, 553, 554, 1020, 1034], "clf_err": 114, "629": [114, 134], "plot_ensemble_oob": [114, 134], "betatim": [115, 129, 1033], "leak": [115, 264, 344, 355, 400, 403, 848, 873, 874, 876, 877, 878, 879, 986, 1018, 1025, 1028], "80_000": 115, "x_full_train": 115, "y_full_train": 115, "x_train_ensembl": 115, "x_train_linear": 115, "y_train_ensembl": 115, "y_train_linear": 115, "gradientboostingclassifi": [115, 121, 122, 125, 303, 355, 384, 406, 542, 550, 621, 622, 977, 983, 1018, 1019, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034], "random_forest": 115, "gradient_boost": [115, 1019, 1020, 1021, 1027], "histgradientboostingclassifi": [115, 116, 311, 312, 313, 314, 316, 360, 406, 548, 553, 621, 622, 966, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "randomtreesembed": [115, 128, 220, 406, 898, 1019, 1026, 1027, 1031, 1032, 1033], "random_tree_embed": 115, "rt_model": 115, "randomtreesembeddingrandomtreesembed": 115, "rf_appli": 115, "rf_leaves_yield": 115, "kw_arg": [115, 852, 986, 1024], "rf_model": 115, "0x7f64e9901d30": 115, "functiontransformerfunctiontransform": 115, "gbdt_appli": 115, "gbdt_leaves_yield": 115, "gbdt_model": 115, "0x7f64ea244a60": 115, "roccurvedisplai": [115, 237, 240, 256, 268, 269, 311, 380, 776, 777, 982, 1015, 1028, 1034], "rt": 115, "rf": [115, 116, 129, 132, 133, 170, 311, 355, 406, 556, 558, 559], "gbdt": [115, 169, 311, 312, 378, 406], "model_displai": 115, "plot_feature_transform": [115, 134], "hgbt": [116, 406], "fetch_california_h": [116, 162, 163, 301, 313, 368, 385, 400, 1027, 1029], "20640": [116, 163, 368, 479], "n_core": 116, "only_physical_cor": 116, "unnecessari": [116, 244, 378, 432, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 694, 979, 986, 997, 1000, 1021, 1023, 1028, 1029, 1031, 1034], "max_leaf_nod": [116, 125, 198, 314, 353, 406, 546, 547, 548, 549, 550, 551, 553, 554, 555, 896, 897, 898, 899, 1021, 1027, 1029], "early_stop": [116, 169, 206, 295, 314, 344, 386, 406, 550, 551, 655, 656, 657, 665, 666, 667, 845, 846, 990, 1026, 1029, 1032, 1033], "return_train_scor": [116, 263, 307, 403, 785, 788, 789, 799, 811, 1024, 1025, 1027], "wast": [116, 379, 403, 404, 965], "plotli": [116, 260, 373, 389, 392], "cursor": [116, 260], "px": [116, 260], "make_subplot": 116, "shared_yax": 116, "subplot_titl": 116, "model_nam": [116, 237, 277], "colors_list": 116, "param_nam": [116, 260, 274, 339, 390, 807, 815, 971, 1011], "param_": 116, "scatter_fig": 116, "mean_fit_tim": [116, 281, 785, 799], "error_x": [116, 260], "std_fit_tim": [116, 281, 785, 799], "error_i": [116, 260], "hover_data": [116, 260], "line_fig": 116, "scatter_trac": 116, "line_trac": 116, "add_trac": 116, "mean_score_tim": [116, 257, 260, 785, 799], "std_score_tim": [116, 260, 785, 799], "update_layout": [116, 260], "xaxis2": 116, "traceord": 116, "borderwidth": 116, "plateau": [116, 146, 257, 261], "earlier": [116, 169, 367, 373, 402, 819, 822, 986, 994, 1016, 1019, 1031, 1033], "never": [116, 235, 355, 373, 382, 384, 393, 399, 400, 402, 403, 439, 446, 512, 535, 544, 545, 546, 553, 848, 849, 968, 986, 1028, 1031], "hgbdt": 116, "sightli": 116, "domin": [116, 163, 198, 203, 268, 306, 368, 379, 397, 868, 978, 986, 992], "ever": [116, 129, 382, 406, 1000], "disput": 116, "thumb": [116, 174, 359, 373, 374, 384, 399, 647, 648, 655, 657, 665, 666, 667, 888, 976], "951": [116, 134], "plot_forest_hist_grad_boosting_comparison": [116, 134], "artifici": [117, 120, 127, 163, 219, 233, 298, 344, 368, 369, 370, 378, 396, 398, 399, 403, 404, 409, 524, 685, 818, 845, 846, 969, 973, 975, 977, 983, 988, 992, 997, 1000, 1018], "feature_importances_": [117, 118, 124, 147, 170, 171, 386, 406, 408, 542, 543, 546, 547, 548, 549, 553, 554, 555, 582, 583, 586, 896, 897, 898, 899, 1020, 1023, 1027], "estimators_": [117, 119, 235, 311, 386, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 816, 817, 818, 819, 820, 821, 822, 1019, 1025, 1032], "008": [117, 345, 370, 379], "forest_import": 117, "mdi": [117, 124, 165, 166, 171, 172, 406, 453, 485, 553, 619, 623, 814, 848, 862, 984], "overcom": [117, 359, 407], "permutation_import": [117, 118, 124, 170, 171, 311, 406, 542, 543, 546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899, 984, 1028, 1030, 1031], "importances_mean": [117, 124, 170, 171, 311, 623, 984], "importances_std": [117, 623, 984], "omit": [117, 167, 168, 324, 378, 412, 464, 523, 655, 657, 665, 792, 794, 816, 817, 820, 823, 824, 825, 826, 827, 845, 974, 981], "163": [117, 134, 370, 984], "plot_forest_import": [117, 134], "hotter": 118, "job": [118, 247, 373, 377, 381, 406, 410, 426, 433, 435, 437, 439, 441, 446, 447, 450, 453, 456, 457, 461, 520, 524, 525, 526, 528, 531, 532, 534, 535, 537, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 591, 599, 623, 628, 646, 677, 678, 679, 680, 681, 682, 683, 762, 766, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 847, 850, 883, 884, 886, 942, 1000, 1004], "five": [118, 245, 320, 323, 368, 520, 528, 534, 973, 979, 991, 1000, 1018], "drawback": [118, 215, 968, 971], "img_shap": 118, "imp_reshap": 118, "met": [118, 234, 375, 408, 523, 530, 616, 660, 972, 976, 1026], "251": [118, 134, 221, 344, 370], "plot_forest_importances_fac": [118, 134], "third": [119, 124, 142, 147, 158, 216, 227, 250, 284, 303, 360, 368, 372, 384, 387, 407, 523, 577, 578, 579, 580, 787, 788, 789, 794, 830, 831, 832, 834, 836, 866, 878, 944, 965, 987, 994, 1018, 1029, 1034], "fourth": [119, 1002], "descend": [119, 616, 1028], "extratreesclassifi": [119, 128, 406, 408, 547, 553, 555, 898, 899, 977, 1021, 1022, 1026, 1027, 1028, 1031, 1032, 1033, 1034], "decisiontre": [119, 1023], "consol": [119, 371, 1003], "extratre": [119, 128, 359, 1021], "sequenti": [119, 141, 148, 165, 192, 260, 313, 371, 404, 406, 407, 490, 523, 582, 586, 591, 592, 594, 595, 635, 636, 641, 642, 649, 650, 651, 652, 662, 848, 966, 984, 990, 996, 998, 1013, 1018, 1027, 1030], "9266666666666666": 119, "8666666666666667": 119, "9933333333333333": 119, "rdylbu": [119, 350], "plot_step_coars": 119, "plot_idx": 119, "model_titl": 119, "model_detail": 119, "blend": [119, 130, 307, 386, 403, 996], "estimator_alpha": 119, "coarser": [119, 123], "regularli": [119, 384, 978], "xx_coarser": 119, "yy_coars": 119, "z_points_coars": 119, "cs_point": 119, "210": [119, 134, 197, 217], "plot_forest_iri": [119, 134], "equidist": [120, 681], "lowa": 120, "sale": [120, 259, 976, 1000], "42165": 120, "categorical_columns_subset": 120, "bldgtype": 120, "garagefinish": 120, "lotconfig": 120, "masvnrtyp": [120, 130], "housestyl": [120, 130], "fireplacequ": 120, "extercond": 120, "exterqu": [120, 130], "poolqc": 120, "numerical_columns_subset": 120, "3ssnporch": 120, "fireplac": 120, "bsmthalfbath": 120, "halfbath": 120, "garagecar": [120, 130], "totrmsabvgrd": 120, "bsmtfinsf1": [120, 130], "bsmtfinsf2": 120, "grlivarea": 120, "screenporch": 120, "n_categorical_featur": [120, 550, 551, 621, 622], "n_numerical_featur": 120, "1460": [120, 130], "make_column_transform": [120, 130, 168, 229, 312, 400, 453, 455, 1026], "dropper": 120, "hist_drop": 120, "hist_one_hot": 120, "etc": [120, 198, 216, 254, 263, 264, 355, 359, 361, 373, 375, 377, 378, 384, 385, 386, 390, 396, 400, 403, 407, 478, 492, 546, 547, 553, 554, 657, 665, 681, 707, 759, 785, 799, 819, 822, 852, 863, 896, 897, 898, 899, 900, 902, 908, 909, 919, 965, 966, 970, 976, 979, 996, 997, 1000, 1018, 1025, 1027, 1028], "use_encoded_valu": [120, 130, 170, 307, 862, 986, 1030], "unknown_valu": [120, 130, 170, 307, 862, 986, 1030, 1032, 1033], "hist_ordin": 120, "n_unique_categori": [120, 307], "hist_n": 120, "mean_absolute_percentage_error": [120, 976, 1030, 1032], "neg_mean_absolute_percentage_error": [120, 976, 984], "n_cv_fold": [120, 307, 791, 807, 812, 815], "dropped_result": 120, "one_hot_result": 120, "ordinal_result": 120, "native_result": 120, "plot_result": [120, 244, 245, 250], "figure_titl": 120, "plot_info": 120, "test_scor": [120, 122, 124, 206, 258, 261, 307, 339, 349, 385, 403, 791, 807, 811, 812, 815], "y_limit": 120, "mape_cv_mean": 120, "mape_cv_std": 120, "c0": [120, 230, 307], "slowest": [120, 924, 925], "theori": [120, 233, 249, 339, 370, 398, 399, 403, 406, 679, 683, 714, 744, 880, 881, 925, 965, 972, 973, 975, 976, 977, 991, 992], "poorer": [120, 355, 404], "slight": [120, 203, 313, 406, 438, 1028], "acf": 120, "bde": 120, "isol": [120, 126, 227, 237, 345, 371, 373, 379, 389, 552, 834, 892, 1027, 1028], "bcde": 120, "histgradientboostingregressor__max_depth": 120, "histgradientboostingregressor__max_it": 120, "altogeth": [120, 379, 1026], "961": [120, 134, 845], "plot_gradient_boosting_categor": [120, 134], "validation_fract": [121, 206, 314, 406, 548, 549, 550, 551, 655, 656, 657, 665, 667, 845, 846, 990, 1026, 1032], "denot": [121, 382, 386, 389, 397, 399, 403, 406, 577, 578, 580, 785, 791, 799, 807, 861, 862, 961, 965, 968, 972, 974, 976, 977, 986, 989, 1002], "kept": [121, 249, 279, 339, 367, 377, 393, 409, 485, 524, 527, 529, 530, 535, 536, 586, 599, 600, 608, 609, 633, 684, 783, 784, 909, 986, 1026, 1027], "asid": [121, 206, 393, 548, 549, 550, 551, 655, 656, 657, 665, 667, 845, 846], "n_estimators_": [121, 548, 549], "vighnesh": [121, 1023, 1024, 1026], "birodkar": [121, 1023, 1024, 1026], "vighneshbirodkar": 121, "rvraghav93": [121, 263, 301], "data_list": 121, "n_gb": 121, "score_gb": 121, "time_gb": 121, "n_gbe": 121, "gbe": 121, "gb": [121, 133, 406, 542, 622], "bar_width": 121, "bar1": 121, "crimson": 121, "bar2": 121, "coral": 121, "n_est": 121, "max_i": [121, 235, 978], "plot_gradient_boosting_early_stop": [121, 134], "fly": [122, 378, 381, 497, 498, 571, 1018, 1020, 1027], "pessimist": [122, 406], "cumul": [122, 198, 216, 399, 714, 723, 744, 865, 877, 986, 990, 1025, 1027, 1028], "demand": [122, 407, 785, 799, 809, 810], "6820": 122, "special": [122, 168, 188, 216, 289, 307, 331, 367, 369, 375, 379, 384, 386, 399, 402, 404, 453, 456, 542, 544, 548, 809, 900, 965, 970, 972, 974, 975, 976, 977, 979, 992, 1025, 1028, 1030, 1032], "expit": [122, 188, 406, 550, 972, 1025], "ridgewai": [122, 406], "gbm": [122, 406, 1021], "x3": [122, 237, 400, 1010], "binomi": [122, 125, 406, 542, 548, 550, 972, 1032], "acc": 122, "heldout_scor": 122, "devianc": [122, 125, 198, 216, 406, 542, 547, 548, 550, 551, 554, 637, 658, 669, 710, 711, 712, 735, 737, 740, 897, 899, 972, 992, 1019, 1028, 1029, 1031, 1032, 1034], "y_proba": [122, 125, 306, 386, 848], "staged_predict_proba": [122, 125, 542, 548, 550, 1018], "cv_estim": 122, "cv_clf": 122, "val_scor": 122, "cv_score": 122, "cumsum": [122, 198, 216, 1025], "oob_improvement_": [122, 406, 548, 549, 1020], "oob_best_it": 122, "test_best_it": 122, "cv_best_it": 122, "brew": [122, 371, 389], "oob_color": 122, "212": [122, 264, 322, 370, 458, 489, 982, 1009], "test_color": 122, "127": [122, 1018], "201": [122, 370, 573], "cv_color": 122, "253": [122, 523], "oob_lin": 122, "test_lin": 122, "cv_line": 122, "dashdot": [122, 150, 153], "xticks_po": 122, "tolist": [122, 162, 171, 258, 313, 368], "xticks_label": 122, "021": [122, 134], "plot_gradient_boosting_oob": [122, 134], "atleast_2d": [123, 375], "expected_i": 123, "amplitud": [123, 155, 157, 192, 409, 972], "lognorm": [123, 156, 179, 248, 305, 986], "tail": [123, 163, 168, 198, 200, 259, 301, 510, 513, 972], "imposs": [123, 346, 997], "mean_pinball_loss": [123, 314, 972, 976, 1031], "all_model": 123, "min_samples_split": [123, 124, 125, 263, 271, 302, 313, 406, 546, 547, 548, 549, 553, 554, 555, 788, 789, 896, 897, 898, 899, 965, 992, 1024], "gbr": 123, "gbr_l": 123, "5th": [123, 158, 399], "95th": [123, 736], "y_med": 123, "fill_between": [123, 136, 150, 155, 157, 159, 177, 178, 216, 259, 261, 262, 263, 269, 791, 807], "unfortun": [123, 167, 168, 216, 381, 384, 406, 497, 498], "sinoisoid": 123, "highlight_min": [123, 187], "font": [123, 187, 212, 232, 900, 902], "pbl": 123, "nbsp": [123, 187], "715413": 123, "750348": 123, "127128": 123, "253445": 123, "379763": 123, "933253": 123, "305438": 123, "622811": 123, "940184": 123, "827917": 123, "909909": 123, "145957": 123, "382005": 123, "667219": 123, "asymmetr": [123, 200, 386, 1023], "signficiantli": 123, "nor": [123, 262, 344, 355, 359, 378, 384, 407, 426, 435, 583, 912, 980, 992, 1029], "917281": 123, "767498": 123, "617715": 123, "692901": 123, "144204": 123, "245961": 123, "347717": 123, "648026": 123, "412021": 123, "607752": 123, "803483": 123, "874771": 123, "354394": 123, "355445": 123, "356497": 123, "852774": 123, "underestim": [123, 169, 198, 216, 259, 373], "extrem": [123, 198, 200, 236, 301, 308, 322, 345, 373, 376, 399, 404, 546, 547, 553, 554, 555, 621, 622, 668, 712, 740, 898, 899, 900, 902, 976, 978], "coverage_fract": 123, "y_low": 123, "y_high": 123, "868": [123, 143], "hypothesi": [123, 259, 265, 339, 403, 679, 683, 813, 973], "pinbal": [123, 314, 551, 659, 711, 736, 972, 1031, 1032], "experiment": [123, 162, 163, 198, 270, 271, 313, 314, 362, 373, 375, 376, 383, 384, 386, 390, 403, 485, 538, 616, 685, 788, 789, 944, 946, 965, 966, 972, 975, 976, 996, 997, 1005, 1013, 1026, 1027, 1030, 1031, 1032, 1033], "enable_halving_search_cv": [123, 270, 271, 313, 377, 788, 789, 965], "halvingrandomsearchcv": [123, 271, 313, 568, 788, 965, 1030, 1032, 1033], "make_scor": [123, 263, 390, 403, 785, 810, 811, 976, 1027], "neg_mean_pinball_loss_05p_scor": 123, "greater_is_bett": [123, 730, 976], "search_05p": 123, "max_resourc": [123, 788, 789, 965], "min_resourc": [123, 788, 789], "neg_mean_pinball_loss_95p_scor": 123, "search_95p": 123, "estimator__alpha": 123, "did": [123, 150, 168, 171, 198, 206, 216, 245, 368, 616, 701, 804, 890, 1010, 1019, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1033], "untun": 123, "joint": [123, 165, 169, 176, 217, 219, 400, 600, 641, 651, 681, 823, 824, 825, 826, 827, 888, 972, 973, 977, 981, 983, 987, 1018], "9026666666666666": 123, "796": 123, "sadli": 123, "552": [123, 134], "plot_gradient_boosting_quantil": [123, 134], "tackl": [124, 259, 360, 373, 399, 825, 978, 1000, 1005], "katrina": [124, 1029], "ni": [124, 1024, 1029], "nilichen": 124, "reg": [124, 168, 178, 234, 302, 312, 336, 406, 547, 549, 557, 639, 640, 642, 643, 644, 645, 646, 652, 653, 654, 659, 660, 667, 668, 678, 682, 899, 972, 1023], "3025": 124, "7877": 124, "train_score_": [124, 406, 548, 549, 550, 551], "impur": [124, 353, 388, 406, 408, 542, 543, 546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899, 900, 902, 992, 1013, 1023, 1024, 1025, 1026], "feature_import": 124, "sorted_idx": [124, 311], "po": [124, 222, 407], "align": [124, 163, 219, 244, 270, 346, 386, 678, 682, 979, 990, 1012, 1013, 1034], "vert": [124, 170, 171, 311, 990], "plot_gradient_boosting_regress": [124, 134], "consider": [125, 151, 154, 254, 260, 266, 373, 409, 608, 785, 799, 965, 978, 982, 990, 1000], "return_invers": [125, 375], "original_param": 125, "test_devi": 125, "177": [125, 134, 379], "plot_gradient_boosting_regular": [125, 134], "anomali": [126, 165, 226, 237, 242, 285, 286, 368, 398, 458, 501, 511, 552, 628, 666, 834, 849, 892, 982, 1024, 1025], "recurs": [126, 141, 148, 165, 349, 375, 398, 399, 403, 429, 430, 431, 434, 452, 491, 504, 552, 582, 583, 586, 591, 621, 622, 647, 804, 893, 976, 979, 982, 983, 992, 998, 1010, 1013, 1018, 1028, 1029], "deform": [126, 249, 341], "notat": [126, 386, 400, 404, 407, 579, 701, 972, 976, 1002, 1027, 1034], "cluster_1": 126, "cluster_2": 126, "legend_el": [126, 211, 262], "nuniformli": 126, "max_sampl": [126, 162, 406, 544, 545, 546, 547, 552, 553, 554, 623, 1028, 1031, 1034], "isolationforestisolationforest": 126, "ax_": [126, 253, 262, 266, 274, 306, 311, 380, 427, 620, 686, 687, 689, 690, 691, 791, 807], "nof": 126, "457": [126, 134, 604], "plot_isolation_forest": [126, 134], "trend": [127, 155, 169, 230, 296, 409, 1000, 1025], "xgboost": [127, 406, 996], "partialdependencedisplai": [127, 169, 238, 312, 313, 314, 316, 380, 622, 983, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "f_0": 127, "f_1": [127, 266, 976], "gbdt_no_cst": [127, 312], "histgradientboostingregressorhistgradientboostingregressor": [127, 130, 307, 316], "gbdt_with_monotonic_cst": 127, "monotonic_cst": [127, 312, 314, 406, 550, 551, 1033], "line_kw": [127, 238, 261, 312, 621, 791, 807], "unconstrain": [127, 169, 312, 368, 990], "axes_": [127, 238, 312, 380, 621], "f_idx": 127, "oscil": [127, 169, 203, 399, 429], "x_df": 127, "gbdt_with_monotonic_cst_df": 127, "585": [127, 134, 1009], "plot_monotonic_constraint": [127, 134], "excel": [128, 367, 373, 679, 683, 972, 1000], "bernoullinb": [128, 361, 824, 825, 826, 827, 977, 978, 1019, 1020, 1022, 1025, 1030, 1031, 1033], "hasher": [128, 346, 407], "transformed_grid": 128, "y_grid_pr": 128, "353": [128, 134, 346, 347, 1011], "plot_random_forest_embed": [128, 134], "multioutput": [129, 268, 277, 362, 375, 386, 421, 454, 471, 472, 473, 540, 543, 545, 546, 547, 549, 551, 553, 554, 557, 559, 600, 621, 622, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 710, 711, 716, 733, 734, 736, 738, 739, 741, 773, 776, 809, 817, 831, 839, 846, 855, 889, 891, 894, 896, 897, 898, 899, 914, 939, 940, 976, 998, 1013, 1018, 1019, 1020, 1024, 1025, 1031, 1032], "multioutputregressor": [129, 421, 454, 471, 472, 473, 543, 545, 547, 549, 551, 554, 557, 559, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 820, 822, 831, 839, 846, 889, 891, 894, 897, 899, 1024, 1025, 1027, 1029, 1030, 1034], "nativ": [129, 162, 360, 368, 386, 406, 550, 551, 820, 821, 944, 972, 976, 996, 1028, 1030], "centr": 129, "regr_multirf": 129, "regr_rf": 129, "y_multirf": 129, "y_rf": 129, "cornflowerblu": [129, 192, 201, 208, 245, 247, 250, 266, 268, 282, 284, 290, 351, 352], "523": [129, 134, 513], "plot_random_forest_regression_multioutput": [129, 134], "compil": [130, 279, 346, 359, 360, 373, 374, 375, 376, 381, 382, 384, 996, 1018], "dean": [130, 1026, 1032], "cock": [130, 1027], "becam": [130, 387, 1026], "kaggl": [130, 385], "residenti": 130, "iowa": 130, "won": [130, 297, 345, 377, 399, 457, 485, 616, 617, 619, 676, 693, 706, 724, 725, 743, 745, 781, 975, 986, 1023, 1024, 1029], "load_ames_h": 130, "yrsold": 130, "heatingqc": 130, "street": [130, 370], "yearremodadd": 130, "heat": [130, 331, 399, 441, 451, 684], "bsmtunfsf": 130, "mssubclass": 130, "condition2": 130, "garagetyp": 130, "overallqu": 130, "totalbsmtsf": 130, "miscfeatur": 130, "mosold": 130, "cat_selector": 130, "num_selector": 130, "besid": [130, 230, 373, 378, 578, 965, 1026], "cat_tree_processor": 130, "encoded_missing_valu": [130, 170, 862, 986, 1032, 1033], "num_tree_processor": 130, "add_ind": [130, 163, 616, 617, 619, 966, 1027, 1030], "tree_preprocessor": [130, 198], "0x7f64e8fbc430": 130, "0x7f64e8fbc7f0": 130, "ordinalencoderordinalencod": [130, 169, 170, 307], "cat_linear_processor": 130, "num_linear_processor": 130, "linear_preprocessor": 130, "tediou": 130, "wrote": [130, 368], "lasso_pipelin": 130, "lassocvlassocv": 130, "rf_pipelin": 130, "randomforestregressorrandomforestregressor": 130, "gbdt_pipelin": 130, "stackingregressor": [130, 311, 406, 556, 1028, 1029, 1030, 1031, 1032], "stacking_regressor": 130, "final_estim": [130, 311, 406, 556, 557], "unknown_v": 130, "stackingregressorstackingregressor": 130, "forestcolumntransform": 130, "lassocolumntransform": 130, "boostingcolumntransform": 130, "final_estimatorridgecvridgecv": 130, "cross_val_predict": [130, 255, 311, 397, 403, 406, 426, 556, 557, 810, 811, 1022, 1023, 1024, 1025, 1027, 1029, 1031], "scorer": [130, 216, 263, 375, 386, 390, 403, 406, 550, 551, 583, 591, 623, 648, 662, 664, 700, 720, 721, 730, 785, 788, 789, 791, 799, 807, 810, 811, 812, 815, 934, 965, 972, 976, 984, 997, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "test_": [130, 403], "line_kwarg": [130, 690], "nevalu": 130, "plot_stack_predictor": [130, 134], "exemplari": 131, "eclf": [131, 132, 406], "axarr": [131, 301], "tt": [131, 254, 454], "541": [131, 134, 441, 451], "plot_voting_decision_region": [131, 134], "examplari": 132, "class1_1": 132, "class2_1": 132, "lightgreen": [132, 204, 215], "p3": 132, "p4": 132, "nweight": 132, "337": [132, 134, 379], "plot_voting_proba": [132, 134], "votingregressor": [133, 406, 558, 1027, 1028, 1029, 1032], "cohort": 133, "reg1": [133, 406], "reg2": [133, 406], "reg3": [133, 406], "ereg": [133, 406], "votingregressorvotingregressor": 133, "gbgradientboostingregressorgradientboostingregressor": 133, "rfrandomforestregressorrandomforestregressor": 133, "lrlinearregressionlinearregress": 133, "xt": [133, 279, 386, 434, 527, 529, 616, 618, 785, 788, 789, 799, 832, 840, 848, 853, 858, 865, 877, 906, 1034], "pred1": 133, "pred2": 133, "pred3": 133, "pred4": 133, "labelbottom": [133, 259], "968": [133, 134, 155, 167, 257], "plot_voting_regressor": [133, 134], "067": [134, 159, 193, 217], "auto_examples_ensembl": 134, "n_fold": [136, 636, 640, 642, 644, 648, 650, 652, 1019, 1020, 1024], "scores_std": [136, 137], "semilogx": [136, 137, 187, 272], "std_error": 136, "transluc": 136, "999999999999999e": 136, "31622776601683794": 136, "answer": [136, 167, 259, 373, 384, 714, 744, 976, 1000], "extern": [136, 150, 361, 362, 366, 370, 373, 375, 378, 384, 386, 396, 399, 407, 408, 409, 582, 599, 600, 706, 725, 781, 972, 975, 976, 979, 992, 997, 1003, 1009, 1013, 1026, 1030], "lasso_cv": 136, "k_fold": [136, 1006], "maximis": [136, 245, 287, 970, 979], "5f": [136, 315], "moreov": [136, 156, 303, 315, 355, 377, 399, 403, 409, 881, 946, 976, 1000, 1026, 1032, 1033], "substanti": [136, 281, 285, 286, 302, 373, 834, 982, 1022, 1025], "05968": 136, "54209": 136, "04520": 136, "15521": 136, "07880": 136, "45192": 136, "plot_cv_diabet": [136, 140], "this_scor": [137, 334], "470": [137, 140], "plot_cv_digit": [137, 140], "961111": 138, "933333": [138, 837], "plot_digits_classification_exercis": [138, 140], "200j": [139, 335], "297": [139, 140, 368], "plot_iris_exercis": [139, 140], "440": [140, 168], "auto_examples_exercis": 140, "exercis": [140, 361, 362, 370, 373, 490, 491, 493, 494, 641, 642, 647, 785, 790, 810, 830, 893, 1003, 1021], "elimin": [141, 148, 165, 398, 399, 403, 437, 491, 504, 582, 583, 586, 591, 647, 788, 789, 804, 893, 962, 976, 998, 1000, 1013, 1018], "x_2": [142, 153, 195, 404, 406, 407, 409, 602, 614, 972, 980, 986], "x_3": [142, 986], "irrelev": [142, 182, 355, 379, 401, 406, 408, 593, 728, 976], "agre": [142, 381, 387, 398, 399, 774, 1002], "percept": [142, 169, 983], "correctli": [142, 146, 198, 216, 234, 266, 268, 273, 289, 308, 321, 331, 373, 382, 404, 406, 416, 426, 458, 482, 538, 539, 540, 542, 544, 546, 548, 550, 553, 556, 558, 599, 647, 655, 657, 663, 664, 665, 692, 780, 782, 816, 817, 818, 819, 823, 824, 825, 826, 827, 830, 835, 838, 845, 868, 883, 884, 888, 890, 891, 892, 893, 894, 896, 898, 926, 973, 976, 979, 980, 986, 991, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "mutual_info_regress": [142, 315, 408, 581, 584, 585, 588, 589, 598, 1024, 1025, 1030, 1032, 1033, 1034], "f_test": 142, "x_": [142, 151, 250, 259, 311, 375, 399, 402, 404, 616, 624, 752, 883, 884, 972, 978, 983, 1024], "285": [142, 148, 320, 712], "plot_f_test_vs_mi": [142, 148], "examin": [143, 379, 381, 399, 837], "f_classif": [143, 144, 334, 408, 581, 584, 585, 587, 588, 589, 593, 595, 598], "log10": [143, 156, 168, 183, 191, 260, 331], "pvalues_": [143, 581, 584, 585, 587, 588, 589, 1018], "x_indic": 143, "p_": [143, 976, 979, 992], "svm_weight": 143, "789": [143, 406], "clf_select": 143, "svm_weights_select": 143, "get_support": [143, 147, 313, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 1020], "227": [143, 148, 259, 399, 713], "plot_feature_select": [143, 148], "mistak": [144, 320, 355, 399, 403, 723, 859, 873, 874, 876, 877, 878, 879, 972, 977], "anova_filt": 144, "anova_svm": 144, "selectkbestselectkbest": [144, 315], "linearsvclinearsvc": [144, 266], "75788833": 144, "27161955": 144, "26113448": 144, "016": [144, 148], "plot_feature_selection_pipelin": [144, 148], "rfe": [145, 146, 408, 583, 586, 591, 1018, 1022, 1028, 1029, 1030, 1031, 1032, 1034], "n_features_to_select": [145, 147, 313, 408, 582, 591, 1030, 1032], "ranking_": [145, 582, 583], "plot_rfe_digit": [145, 148], "introduct": [146, 216, 257, 362, 373, 403, 404, 407, 579, 776, 777, 823, 827, 972, 974, 976, 978, 995, 1003, 1009, 1012, 1013], "class_sep": [146, 289, 504], "rfecv": [146, 408, 582, 586, 591, 1022, 1024, 1026, 1028, 1029, 1030, 1031, 1034], "stratifiedkfold": [146, 246, 254, 265, 269, 322, 403, 426, 556, 557, 583, 591, 648, 662, 785, 786, 788, 789, 790, 791, 793, 795, 799, 803, 805, 807, 808, 809, 810, 811, 812, 813, 815, 869, 1006, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1031], "min_features_to_select": [146, 583, 1026], "n_features_": [146, 530, 582, 583, 1031, 1033], "n_score": 146, "609": [146, 148, 159, 345, 379], "plot_rfe_with_cross_valid": [146, 148], "selectfrommodel": [147, 386, 582, 591, 592, 998, 1013, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1034], "sequentialfeatureselect": 147, "greedi": [147, 406, 408, 436, 438, 449, 548, 549, 591, 972, 992], "442": [147, 163, 263, 275, 370, 490, 1009], "descript": [147, 168, 307, 366, 367, 372, 373, 377, 378, 381, 386, 399, 407, 441, 451, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 496, 499, 533, 619, 665, 750, 753, 766, 976, 990, 991, 997, 999, 1011, 1028, 1029, 1030, 1031, 1032, 1033], "descr": [147, 366, 367, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 496, 499, 1008, 1026], "_diabetes_dataset": 147, "mass": [147, 238, 370, 435, 783, 972, 983], "blood": [147, 228, 370, 1009], "pressur": [147, 370, 1009], "six": [147, 199, 220, 305, 370, 1027], "serum": [147, 370], "bmi": [147, 186, 187, 238, 370, 984], "tc": [147, 370, 387], "cholesterol": [147, 370], "ldl": [147, 370], "lipoprotein": [147, 370], "hdl": [147, 370], "s4": [147, 186, 187, 370], "tch": [147, 370], "s5": [147, 186, 187, 370, 984], "ltg": [147, 370, 490], "triglycerid": [147, 370], "s6": [147, 186, 187, 370], "glu": [147, 370], "sugar": [147, 370], "www4": [147, 370], "ncsu": [147, 370], "boo": [147, 370], "bradlei": [147, 370, 972], "efron": [147, 370, 671, 672, 972], "trevor": [147, 186, 316, 370, 617, 645, 710, 711, 712, 966, 972, 988, 1022, 1023, 1026, 1027, 1028, 1030], "iain": [147, 370, 972], "johnston": [147, 370, 972, 1027], "annal": [147, 182, 186, 370, 406, 463, 505, 506, 507, 548, 549, 645, 972], "407": [147, 370], "web": [147, 367, 368, 370, 373, 376, 381, 399, 406, 407, 510, 881, 976, 986, 1014, 1018], "stanford": [147, 370, 638, 671, 672, 823, 826, 827, 881, 974], "leastangle_2002": [147, 370], "pitfal": [147, 165, 166, 170, 172, 313, 362, 385, 386, 388, 403, 454, 456, 485, 642, 661, 662, 690, 741, 800, 811, 814, 849, 861, 868, 972, 1013], "e501": [147, 344], "accept": [147, 150, 234, 256, 311, 331, 344, 346, 355, 359, 360, 367, 373, 375, 382, 384, 385, 386, 387, 390, 393, 395, 399, 404, 407, 426, 430, 433, 434, 437, 450, 453, 456, 497, 498, 544, 545, 550, 551, 558, 559, 570, 571, 582, 583, 586, 617, 624, 628, 632, 668, 715, 730, 766, 783, 784, 788, 789, 830, 831, 838, 839, 852, 906, 908, 909, 912, 936, 972, 974, 976, 979, 984, 986, 991, 996, 997, 1006, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "tic": [147, 169, 270, 978], "sfm": 147, "toc": 147, "sequentialfeatureselector": [147, 408, 582, 586, 592, 1030, 1031, 1032, 1033, 1034], "sf": [147, 237, 259, 313, 368, 408, 481, 591], "backward": [147, 234, 313, 376, 386, 408, 485, 566, 591, 603, 604, 607, 608, 609, 611, 612, 901, 904, 976, 980, 997, 1018, 1021, 1026, 1027, 1028, 1030, 1032, 1034], "tic_fwd": 147, "sfs_forward": 147, "toc_fwd": 147, "tic_bwd": 147, "sfs_backward": 147, "toc_bwd": 147, "547": 147, "isn": [147, 311, 344, 346, 355, 360, 373, 381, 504, 550, 551, 583, 780, 788, 789, 861, 979, 991, 1028], "sound": [147, 355], "finish": [147, 247, 973], "expos": [147, 234, 314, 316, 360, 366, 370, 386, 390, 397, 406, 408, 409, 426, 453, 542, 543, 556, 557, 558, 559, 582, 583, 591, 600, 785, 788, 789, 799, 817, 818, 819, 820, 821, 822, 903, 944, 972, 976, 978, 1006, 1008, 1010, 1015, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "plot_select_from_model_diabet": [147, 148], "093": [148, 211, 217, 460, 1023], "auto_examples_feature_select": 148, "basic": [149, 160, 163, 165, 196, 308, 336, 359, 361, 362, 373, 375, 377, 384, 386, 399, 403, 404, 406, 600, 611, 884, 896, 897, 898, 899, 965, 966, 979, 990, 995, 996, 997, 1000, 1009], "introductori": [149, 160, 165, 226, 600, 611, 1000], "gpr": [149, 159, 160, 165, 485, 599, 600, 602, 603, 604, 605, 610, 611, 612, 613, 614, 998, 1013, 1028], "mauna": [149, 160, 165, 485, 600, 604, 611, 612, 614], "loa": [149, 160, 165, 485, 600, 604, 611, 612, 614], "co2": [149, 160, 165, 485, 600, 604, 611, 612, 614, 1025], "xor": [149, 160, 165, 337, 599, 603, 611, 972, 992, 1025], "posterior": [149, 150, 151, 160, 165, 177, 259, 404, 409, 538, 539, 541, 599, 600, 602, 603, 604, 608, 611, 612, 616, 633, 634, 697, 783, 970, 996, 1024, 1027], "iso": [149, 160, 165, 221, 599, 602, 603], "trick": [150, 233, 289, 346, 358, 361, 362, 376, 384, 400, 409, 571, 578, 632, 661, 968, 969, 980, 990, 991, 1009, 1010, 1013, 1019, 1027], "drastic": [150, 231, 267, 399, 403, 979, 989], "theorem": [150, 398, 409, 978], "period": [150, 155, 159, 377, 386, 387, 397, 409, 604, 806, 867, 1026, 1031, 1033], "reus": [150, 191, 260, 311, 346, 375, 386, 399, 400, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 623, 635, 637, 638, 641, 647, 649, 651, 655, 656, 657, 658, 665, 666, 667, 669, 845, 846, 984, 988, 1000, 1025], "training_sample_indic": 150, "training_data": 150, "training_noisy_target": 150, "newer": [150, 372, 389, 404], "expsinesquar": [150, 155, 159, 409], "emb": [150, 220, 231, 288, 366, 367, 451, 684, 973], "kernel_ridg": [150, 233, 362, 1022], "length_scal": [150, 151, 154, 155, 156, 157, 159, 409, 601, 604, 608, 610, 611, 612, 613], "tell": [150, 168, 169, 234, 259, 331, 336, 360, 368, 399, 407, 552, 568, 965, 970, 983, 1011], "1e0": [150, 233, 250, 267, 965], "kernel__length_scal": 150, "kernel__period": 150, "1e1": [150, 156, 198, 233, 331], "kernel_ridge_tun": 150, "793": 150, "9915849773450223": 150, "7986499491396728": 150, "607275806426108": 150, "predictions_kr": 150, "gaussianprocessregressor": [150, 155, 156, 157, 158, 159, 409, 599, 602, 603, 604, 605, 606, 610, 613, 614, 632, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "whitekernel": [150, 155, 156, 409, 600, 601, 603, 1029], "periodicity_bound": [150, 155, 159, 604], "033": [150, 984], "kernel_": [150, 151, 152, 153, 154, 155, 156, 157, 159, 599, 600], "675": 150, "57": [150, 168, 214, 268, 298, 370, 371, 389, 391, 392, 400, 694, 769, 821, 976, 986, 1018], "noise_level": [150, 155, 156, 409, 601, 614], "182": [150, 298, 379, 406], "mean_predictions_gpr": 150, "std_predictions_gpr": 150, "return_std": [150, 155, 156, 157, 159, 177, 178, 386, 541, 556, 557, 600, 602, 603, 604, 605, 614, 616, 633, 634, 848, 1025, 1026, 1030], "formul": [150, 159, 268, 373, 401, 404, 407, 409, 412, 464, 538, 539, 546, 553, 639, 640, 643, 644, 645, 647, 648, 654, 659, 751, 757, 784, 890, 893, 896, 898, 976, 977, 986, 998, 1013], "forc": [150, 183, 279, 305, 344, 367, 371, 377, 394, 403, 406, 439, 446, 485, 595, 598, 635, 636, 641, 642, 646, 649, 650, 651, 652, 661, 662, 663, 670, 673, 676, 742, 766, 769, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 890, 891, 892, 893, 894, 906, 908, 909, 986, 1013, 1023, 1026, 1027, 1028, 1030, 1031, 1032], "capac": [150, 170], "length_scale_bound": [150, 156, 157, 159, 409, 600, 604, 608, 611, 612], "attenu": 150, "536": [150, 155, 160, 279], "plot_compare_gpr_krr": [150, 160], "arbitrarili": [151, 245, 250, 344, 386, 409, 421, 454, 471, 472, 473, 541, 543, 545, 547, 549, 551, 554, 557, 559, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 658, 659, 661, 662, 667, 668, 669, 710, 711, 712, 734, 773, 777, 821, 822, 831, 839, 846, 869, 889, 891, 894, 897, 899, 976, 979, 986, 992], "lml": [151, 152, 156, 409], "exhibit": [151, 203, 344, 388, 403, 404, 406, 409, 984], "steep": [151, 169, 268, 269, 399, 403, 409, 439, 445], "laplac": [151, 409, 599, 600, 823, 824, 825, 827, 978], "319": [151, 152, 160, 1011], "gp_fix": 151, "gp_opt": 151, "log_marginal_likelihood": [151, 152, 154, 156, 159, 409, 599, 600, 1028], "theta": [151, 152, 154, 156, 158, 159, 235, 404, 409, 512, 525, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 681, 978, 992], "landscap": [151, 409], "theta0": 151, "theta1": 151, "pcolor": 151, "xscale": [151, 156, 233, 791], "yscale": [151, 156, 198, 233, 344, 791], "117": [151, 160, 1019], "plot_gpc": [151, 160], "gpc_rbf_isotrop": 152, "gpc_rbf_anisotrop": 152, "m_max": 152, "plot_gpc_iri": [152, 160], "0256": 153, "dotproduct": [153, 154, 159, 409, 600, 614], "sigma_0": [153, 154, 159, 409, 603], "constantkernel": [153, 159, 409, 600, 606, 610, 613], "lim": [153, 523], "experi": [153, 157, 167, 168, 169, 170, 174, 200, 306, 339, 345, 346, 360, 367, 373, 376, 398, 403, 504, 716, 773, 972, 977, 988, 994, 995, 996, 1000, 1009, 1011], "61611719": 153, "00099547": 153, "10469096": 153, "32782448": 153, "00000000": 153, "50000000": 153, "17289014": 153, "6984743": 153, "3109306": 153, "93271427": 153, "03823144": 153, "10584743": 153, "87600388": 153, "74310541": 153, "21301203": 153, "26386883": 153, "gp": [153, 158, 409, 599, 600, 611, 1024], "cb": [153, 231, 248], "widehat": 153, "mathbf": [153, 404, 972, 976, 980, 981, 990], "leq": [153, 404, 406, 972, 976, 979, 990, 991, 992], "clim": 153, "clabel": [153, 209], "plot_gpc_isoprob": [153, 160], "stationari": [154, 409, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614], "coincid": [154, 200, 409], "429": [154, 156], "convergencewarn": [154, 156, 158, 159, 206, 213, 245, 296, 297, 303, 382, 386, 783, 784, 1026, 1027, 1030], "k1__constant_valu": 154, "bound": [154, 156, 158, 165, 200, 216, 226, 242, 258, 371, 380, 399, 404, 407, 409, 410, 433, 478, 491, 501, 512, 525, 584, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 621, 624, 626, 639, 643, 647, 666, 694, 723, 783, 784, 828, 829, 865, 877, 880, 881, 882, 890, 891, 892, 895, 912, 944, 972, 975, 976, 979, 988, 990, 991, 993, 1026, 1029, 1030, 1032], "100000": [154, 233, 244, 373, 602, 603, 604, 608, 609, 611, 612, 614, 877, 969, 1009, 1011], "puor_r": [154, 337], "plot_gpc_xor": [154, 160], "rw2006": [155, 409, 599, 600], "ascent": [155, 409], "monthli": [155, 387, 409, 976], "atmospher": [155, 409], "ppm": 155, "observatori": [155, 409], "hawaii": [155, 409], "1958": [155, 404, 406, 409, 521], "air": [155, 752], "41187": 155, "flag": [155, 371, 373, 374, 376, 390, 453, 599, 600, 616, 662, 664, 716, 773, 991, 1024, 1028, 1029, 1031, 1032, 1033, 1034], "station": 155, "mlo": 155, "316": [155, 159, 311, 317, 600, 603, 614, 864], "co2_data": 155, "to_datetim": 155, "timestamp": 155, "march": [155, 714, 744, 976, 1018, 1022, 1026, 1028, 1033], "dropna": 155, "nfrom": 155, "upcom": [155, 371], "to_numpi": 155, "rise": [155, 409], "irregular": [155, 399, 409, 979], "long_term_trend_kernel": 155, "decai": [155, 409, 533, 845, 846, 925, 976, 990, 1022], "seasonal_kernel": 155, "ration": [155, 612, 974], "diffus": [155, 409], "accommod": [155, 409, 1026], "rationalquadrat": [155, 159, 409, 605], "irregularities_kernel": 155, "shall": [155, 409], "phenomena": [155, 409], "noise_kernel": 155, "noise_level_bound": [155, 156, 614], "co2_kernel": 155, "subtract": [155, 168, 402, 404, 409, 432, 436, 448, 523, 633, 634, 639, 640, 643, 644, 645, 653, 654, 1025], "normalize_i": [155, 409, 600, 1032], "y_mean": [155, 156, 159, 600, 633, 634], "gaussianprocessregressorgaussianprocessregressor": 155, "futur": [155, 199, 240, 314, 373, 375, 377, 384, 386, 387, 393, 403, 407, 485, 523, 624, 944, 946, 976, 977, 991, 992, 1000, 1015, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "todai": [155, 384, 1011], "current_month": 155, "mean_y_pr": 155, "std_y_pr": 155, "188": [155, 370, 379, 573], "0367": 155, "6ppm": 155, "plot_gpr_co2": [155, 160], "target_gener": 156, "add_nois": 156, "minima": [156, 186, 404, 436, 681, 973, 1010, 1026], "y_std": [156, 159, 541, 600, 633, 634, 1031], "k1__k2__length_scal": [156, 409], "noptimum": 156, "nlog": 156, "length_scale_grid": 156, "noise_level_grid": 156, "newshap": 156, "plot_gpr_noisi": [156, 160], "principl": [157, 284, 306, 346, 373, 384, 386, 387, 403, 406, 409, 925, 965, 975, 979, 990, 1025], "tikhonov": [157, 409, 661], "training_indic": 157, "n_restarts_optim": [157, 409, 599, 600], "43": [157, 195, 231, 259, 279, 309, 370, 378, 785, 799, 869], "mean_predict": 157, "std_predict": 157, "whenev": [157, 167, 355, 367, 381, 386, 389, 397, 471, 472, 473, 485, 617, 619, 967, 975, 997, 1028], "noise_std": 157, "y_train_noisi": 157, "494": [157, 160], "plot_gpr_noisy_target": [157, 160], "gene": [158, 367, 396, 440, 502, 582, 583, 835, 868], "letter": [158, 368, 370, 377, 407, 776, 777, 791, 807, 976], "among": [158, 169, 174, 198, 249, 277, 353, 361, 368, 375, 386, 387, 397, 398, 402, 436, 438, 501, 508, 780, 813, 831, 836, 838, 890, 893, 896, 897, 898, 899, 965, 968, 976, 977, 983, 986, 991, 1018, 1024, 1025, 1028], "brighter": 158, "4th": [158, 370], "6th": 158, "haussler": 158, "1999": [158, 368, 397, 399, 401, 404, 406, 426, 439, 446, 458, 463, 523, 530, 544, 545, 548, 549, 711, 882, 890, 891, 893, 894, 982, 988], "646": 158, "technic": [158, 199, 220, 315, 368, 370, 373, 386, 406, 641, 653, 674, 675, 883, 972, 973, 979], "depart": [158, 399], "california": [158, 162, 163, 301, 307, 313, 366, 370, 479, 1013], "santa": [158, 1033], "cruz": 158, "generickernelmixin": [158, 1028], "sequencekernel": 158, "baseline_similar": 158, "baseline_similarity_bound": 158, "hyperparameter_baseline_similar": 158, "_f": [158, 972], "_g": 158, "__call__": [158, 331, 386, 407, 409, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 1025], "eval_gradi": [158, 409, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614], "is_stationari": [158, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614], "clone_with_theta": [158, 409, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614], "agct": 158, "agc": 158, "aact": 158, "taa": 158, "aaa": 158, "gaaca": 158, "training_idx": 158, "cga": 158, "taac": 158, "tcg": 158, "cttt": 158, "tgct": 158, "atag": 158, "ctc": 158, "419": [158, 605], "plot_gpr_on_structured_data": [158, 160], "plot_gpr_sampl": 159, "gpr_model": 159, "y_sampl": [159, 600], "sample_i": [159, 409, 600, 1032], "single_prior": 159, "pm": [159, 169, 269, 406, 976], "dev": [159, 168, 216, 264, 269, 371, 373, 377, 379, 381, 976, 1000, 1014, 1025, 1030, 1033], "594": [159, 198], "279": [159, 972], "alpha_bound": [159, 612], "1e15": 159, "05e": 159, "799": [159, 345], "791": 159, "sigma_0_bound": [159, 603], "_gpr": 159, "659": [159, 233], "lbfg": [159, 295, 375, 637, 638, 647, 648, 658, 661, 663, 669, 676, 819, 822, 845, 846, 972, 980, 1022, 1023, 1025, 1026, 1031, 1032, 1033], "statu": [159, 367, 377, 389, 485, 828, 829], "abnormal_termination_in_lnsrch": 159, "475": 159, "7337046907": 159, "481": 159, "matern": [159, 409, 1029, 1033], "484": 159, "543": [159, 160, 164, 213], "plot_gpr_prior_posterior": [159, 160], "577": [160, 370], "auto_examples_gaussian_process": 160, "iterativeimput": [161, 163, 164, 165, 479, 554, 569, 617, 618, 619, 628, 634, 661, 810, 831, 849, 1027, 1028, 1029, 1030, 1032, 1033, 1034], "robin": [162, 163, 616, 966, 1024, 1027, 1032, 1033], "kneighborsregressor": [162, 236, 291, 315, 406, 559, 830, 836, 838, 839, 979, 1018, 1020, 1022, 1028, 1030, 1031, 1032, 1033, 1034], "mimic": [162, 198, 344, 803], "missforest": [162, 966], "popular": [162, 223, 368, 371, 378, 381, 384, 386, 398, 405, 406, 407, 409, 441, 451, 966, 968, 972, 974, 981, 990, 997, 1006, 1011], "enable_iterative_imput": [162, 163, 377, 616, 966, 1027], "x_full": [162, 163, 301], "y_full": [162, 163, 301], "2k": 162, "br_estim": 162, "score_full_data": 162, "neg_mean_squared_error": [162, 163, 200, 233, 273, 811, 976, 984, 1024], "x_miss": [162, 163], "y_miss": [162, 163], "missing_sampl": [162, 163], "missing_featur": [162, 163], "score_simple_imput": 162, "missing_valu": [162, 163, 239, 386, 616, 617, 618, 619, 757, 966, 1026, 1027], "score_iterative_imput": 162, "stricter": 162, "impute_estim": 162, "__class__": [162, 198, 200, 234, 261, 303, 344, 345, 346, 380], "xerr": [162, 163, 345], "942": [162, 164, 187, 217, 267, 275], "plot_iterative_imputer_variants_comparison": [162, 164], "ness": [163, 216], "auxiliari": [163, 371, 1000, 1033], "district": [163, 368], "neither": [163, 168, 311, 344, 355, 384, 426, 583, 617, 912, 979, 992], "feel": [163, 301, 372, 373, 381, 399, 435, 992], "x_diabet": [163, 1006], "y_diabet": [163, 1006], "x_california": 163, "y_california": 163, "add_missing_valu": 163, "missing_r": 163, "n_missing_sampl": 163, "x_miss_california": 163, "y_miss_california": 163, "x_miss_diabet": 163, "y_miss_diabet": 163, "knnimput": [163, 311, 616, 619, 966, 1028, 1029, 1032, 1033, 1034], "get_scores_for_imput": 163, "impute_scor": 163, "x_label": 163, "mses_california": 163, "stds_california": 163, "mses_diabet": 163, "stds_diabet": 163, "get_full_scor": 163, "full_scor": 163, "get_impute_zero_scor": 163, "fill_valu": [163, 229, 239, 312, 616, 619, 986, 1026, 1034], "zero_impute_scor": 163, "unweight": [163, 211, 452, 636, 642, 667, 696, 702, 717, 718, 726, 771, 772, 775, 776, 823, 824, 825, 826, 827, 966], "get_impute_knn_scor": 163, "knn_impute_scor": 163, "get_impute_mean": 163, "mean_impute_scor": 163, "obvious": [163, 359, 1011], "get_impute_it": 163, "n_nearest_featur": [163, 616], "sample_posterior": [163, 616, 966], "iterative_impute_scor": 163, "n_bar": 163, "xval": 163, "plot_missing_valu": [163, 164], "auto_examples_imput": 164, "prune": [165, 348, 354, 408, 489, 546, 547, 548, 549, 553, 554, 582, 633, 814, 896, 897, 898, 899, 979, 998, 1013, 1018, 1021, 1028, 1029], "elast": [165, 176, 182, 189, 209, 217, 272, 398, 460, 461, 467, 490, 513, 635, 636, 641, 646, 647, 648, 649, 650, 651, 652, 657, 665, 667, 670, 673, 965, 976, 990, 998, 1013, 1018, 1023, 1027, 1028], "gram": [165, 176, 217, 375, 404, 407, 478, 513, 537, 577, 578, 579, 580, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 653, 654, 670, 671, 672, 673, 674, 675, 755, 763, 765, 965, 986, 1011, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1029, 1031, 1032], "huberregressor": [165, 176, 204, 217, 513, 659, 660, 661, 667, 668, 972, 1024, 1025, 1026, 1027], "aic": [165, 176, 186, 217, 249, 490, 640, 642, 643, 644, 645, 784, 849, 868, 965, 972, 1018, 1025, 1031, 1032], "bic": [165, 176, 186, 217, 408, 490, 640, 642, 643, 644, 645, 784, 849, 868, 965, 972, 975, 1018, 1025, 1031, 1032], "mnist": [165, 176, 206, 217, 279, 294, 299, 485, 560, 647, 814, 845, 868, 911, 972, 980], "20newgroup": [165, 176, 217, 478, 560, 647, 814, 972], "ordinari": [165, 176, 177, 182, 200, 201, 203, 215, 217, 314, 624, 635, 641, 643, 644, 645, 646, 661, 667, 671, 672, 676, 990, 998, 1013], "spline": [165, 176, 217, 505, 506, 507, 661, 849, 863, 867, 996, 1031], "ransac": [165, 176, 204, 215, 217, 513, 638, 646, 660, 667, 668], "convex": [165, 176, 217, 219, 340, 345, 399, 401, 404, 412, 435, 441, 451, 462, 464, 465, 468, 469, 470, 647, 665, 681, 972, 973, 979, 980, 990, 1031], "theil": [165, 176, 204, 217, 638, 646, 660, 667, 668], "sen": [165, 176, 204, 217, 638, 646, 660, 667, 668], "tweedi": [165, 176, 217, 453, 485, 541, 637, 658, 669, 695, 712, 733, 735, 737, 738, 740, 814, 849, 852, 853, 861, 868, 972, 1028, 1029, 1031], "insur": [165, 176, 198, 217, 453, 485, 541, 637, 658, 669, 695, 733, 738, 740, 814, 849, 852, 853, 861, 868, 972], "claim": [165, 176, 217, 373, 453, 485, 541, 637, 658, 669, 695, 733, 738, 740, 814, 849, 852, 853, 861, 868, 972], "failur": [165, 166, 168, 172, 373, 381, 646, 773, 814, 908, 909, 999, 1000, 1031, 1032], "infer": [165, 166, 168, 172, 245, 249, 250, 259, 350, 367, 375, 384, 398, 403, 404, 485, 497, 498, 504, 523, 525, 527, 529, 536, 538, 539, 542, 548, 549, 621, 624, 646, 698, 711, 729, 773, 783, 784, 791, 807, 814, 824, 862, 869, 883, 884, 896, 897, 898, 899, 939, 966, 972, 976, 981, 986, 989, 992, 996, 997, 1005, 1019, 1023, 1024, 1029, 1032, 1035], "causal": [165, 166, 172, 646, 773, 814], "multicollinear": [165, 166, 172, 402, 489, 553, 623, 644, 814, 972, 984], "isomap": [165, 218, 221, 225, 311, 315, 406, 491, 533, 538, 555, 678, 679, 680, 681, 837, 849, 858, 881, 979, 1012, 1013, 1026, 1028, 1031, 1032, 1033, 1034], "And": [165, 218, 225, 234, 259, 344, 381, 393, 399, 403, 407, 519, 577, 578, 580, 681, 682, 972, 976, 994, 1025], "hole": [165, 218, 225, 519, 681, 682, 1032], "perplex": [165, 218, 219, 223, 225, 279, 503, 514, 525, 681, 973, 1023, 1025, 1032], "metadata": [165, 226, 242, 345, 367, 368, 393, 413, 416, 419, 421, 422, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 478, 485, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 932, 933, 934, 935, 936, 960, 976, 996, 997, 1002, 1013, 1034], "rout": [165, 226, 242, 386, 413, 416, 419, 421, 422, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 933, 934, 935, 936, 960, 1013, 1032, 1034], "johnson": [165, 226, 242, 301, 305, 365, 398, 478, 491, 864, 876, 880, 881, 882, 986, 993, 1013, 1026, 1032, 1034], "lindenstrauss": [165, 226, 242, 365, 398, 478, 491, 880, 881, 882, 993, 1013], "halv": [165, 252, 275, 394, 504, 553, 568, 785, 788, 789, 893, 1013, 1030], "custom": [165, 238, 252, 260, 275, 281, 286, 311, 326, 331, 342, 344, 346, 365, 368, 371, 375, 380, 381, 382, 384, 385, 386, 398, 399, 400, 403, 409, 457, 478, 482, 483, 491, 493, 527, 529, 536, 538, 546, 547, 553, 554, 560, 562, 591, 620, 679, 702, 785, 814, 852, 886, 893, 960, 965, 970, 976, 979, 991, 996, 997, 1000, 1011, 1013, 1018, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1033, 1034, 1035], "det": [165, 252, 275, 373, 401, 504, 553, 687, 691, 715, 777, 814, 849, 868, 888, 923, 1030], "tsne": [165, 219, 220, 221, 223, 224, 280, 293, 315, 386, 413, 422, 485, 677, 678, 679, 832, 836, 849, 950, 973, 979, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "novelti": [165, 227, 280, 286, 293, 330, 834, 998, 1012, 1013, 1018, 1026], "lof": [165, 227, 237, 280, 293, 552, 834, 892, 982], "boltzmann": [165, 294, 299, 491, 647, 702, 814, 844, 845, 846, 848, 874, 1012, 1013, 1020], "mlp": [165, 169, 238, 294, 296, 299, 485, 560, 814, 845, 846, 980], "semi_supervis": [165, 313, 315, 318, 319, 320, 321, 322, 323, 324, 362, 977, 989, 1019, 1024, 1025, 1032, 1033], "tie": [165, 326, 342, 384, 406, 501, 816, 893, 977, 991, 992, 1019, 1034], "unbalanc": [165, 262, 326, 342, 403, 501, 620, 893, 913, 914, 965, 990], "featurehash": [165, 343, 345, 347, 361, 368, 407, 453, 477, 570, 577, 578, 579, 580, 861, 1019, 1024, 1025, 1026, 1032, 1033], "auto_examples_python": 165, "auto_examples_jupyt": 165, "unless": [167, 234, 245, 250, 373, 375, 376, 384, 386, 397, 399, 402, 410, 426, 433, 435, 437, 439, 441, 446, 447, 450, 453, 456, 461, 478, 485, 497, 498, 520, 524, 525, 526, 528, 531, 532, 534, 535, 536, 537, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 583, 591, 599, 600, 621, 623, 628, 635, 636, 640, 641, 642, 644, 646, 647, 648, 650, 652, 654, 655, 657, 665, 668, 677, 678, 679, 680, 681, 682, 683, 698, 703, 762, 766, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 830, 831, 834, 836, 838, 839, 841, 842, 845, 846, 847, 850, 873, 874, 876, 877, 878, 879, 883, 884, 896, 897, 898, 899, 904, 908, 909, 925, 944, 972, 975, 977, 1018, 1020, 1024, 1026, 1029, 1030], "willing": [167, 256], "econom": [167, 168, 259], "educ": [167, 168, 373, 705, 977], "earn": [167, 168, 387], "polici": [167, 168, 198, 216, 386, 524, 530, 972, 1033], "maker": [167, 168], "ovb": [167, 168], "parent_hourly_wag": 167, "college_degre": 167, "true_coef": [167, 182, 193], "hourly_wag": 167, "stori": [167, 259, 368, 975], "pairplot": [167, 168], "diag_kind": [167, 168], "kde": [167, 168, 283, 284, 292, 405, 833], "features_nam": [167, 1025], "regressor_with_": 167, "y_pred_with_": 167, "r2_with_abl": 167, "975": [167, 991], "model_coef": 167, "intellectu": 167, "proxi": [167, 168, 404, 844, 1006, 1023], "inadvert": [167, 386], "iq": 167, "regressor_without_": 167, "y_pred_without_": 167, "r2_without_": 167, "incorrect": [167, 266, 322, 355, 373, 399, 596, 597, 621, 622, 722, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "brought": [167, 542, 543, 546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899], "unobserv": [167, 168, 404], "confound": [167, 168], "conduct": [167, 259, 409, 996, 1032], "prohibit": [167, 403, 406, 616, 981, 989, 1025], "uneth": 167, "iv": [167, 976], "631": [167, 172, 284, 293], "plot_causal_interpret": [167, 172], "hint": [168, 359, 374, 378, 393, 437, 976, 1009], "aris": [168, 262, 339, 360, 378, 399, 704, 972, 973, 1030], "mathemat": [168, 186, 215, 262, 365, 370, 373, 386, 388, 398, 401, 404, 405, 538, 539, 546, 553, 624, 635, 645, 778, 779, 784, 846, 890, 893, 896, 898, 976, 986, 988, 998, 1000, 1009, 1013, 1032], "survei": [168, 402], "1985": [168, 399, 694, 704, 774], "race": [168, 368, 1021], "occup": [168, 301], "sector": 168, "marr": 168, "not_memb": 168, "marri": 168, "freq": [168, 182, 346], "378": [168, 345, 406, 1011, 1018], "289": 168, "438": [168, 984], "156": [168, 370], "411": [168, 266, 275, 401, 411, 462, 522], "350": 168, "018727": 168, "822097": 168, "833333": 168, "615373": 168, "379710": 168, "726573": 168, "55": [168, 174, 193, 198, 216, 221, 267, 320, 378, 399, 403, 480, 586, 785, 791, 799, 812, 976, 1018], "thereaft": [168, 177], "hispan": 168, "manufactur": 168, "unmarri": 168, "dollar": [168, 368], "exploratori": [168, 1000], "emul": [168, 381], "train_dataset": [168, 367], "rangeindex": 168, "533": [168, 169], "normalis": [168, 600, 1011], "numerical_column": [168, 170, 456], "if_binari": [168, 241, 861, 986, 1029], "prepend": [168, 1018], "exp10": 168, "ufunc": 168, "passthroughpassthroughtransformedtargetregressor": 168, "transformedtargetregressortransformedtargetregressor": 168, "ridgeridg": 168, "mae_train": 168, "mae_test": 168, "learnt": [168, 355, 386, 403, 869, 965], "obviou": [168, 355, 359, 396, 404], "regressor_": [168, 454, 582, 583, 586], "race_hispan": 168, "013519": 168, "race_oth": 168, "009075": 168, "race_whit": 168, "022594": 168, "occupation_cler": 168, "000045": 168, "occupation_manag": 168, "090528": 168, "occupation_oth": 168, "025102": 168, "occupation_profession": 168, "071964": 168, "occupation_sal": 168, "046636": 168, "occupation_servic": 168, "091053": 168, "sector_construct": 168, "000198": 168, "sector_manufactur": 168, "031255": 168, "sector_oth": 168, "031025": 168, "marr_unmarri": 168, "032405": 168, "union_not_memb": 168, "117154": 168, "sex_mal": 168, "090808": 168, "south_y": 168, "033823": 168, "054699": 168, "035005": 168, "030867": 168, "adimension": 168, "Their": [168, 368, 370, 387, 399, 633, 1018], "visibl": [168, 169, 200, 341, 367, 373, 399, 844, 981, 1023, 1033], "gaug": 168, "decad": [168, 997], "x_train_preprocess": 168, "multipli": [168, 216, 259, 359, 382, 386, 404, 406, 407, 412, 453, 464, 504, 527, 529, 530, 536, 546, 550, 553, 635, 637, 641, 643, 647, 648, 649, 651, 657, 658, 659, 661, 665, 666, 667, 669, 675, 676, 678, 682, 752, 890, 891, 892, 893, 894, 896, 898, 914, 952, 953, 954, 965, 972, 976, 990, 1029], "coef_i": 168, "std_i": 168, "emphas": [168, 341, 379, 404, 976], "perturb": [168, 215, 298, 404, 406, 975], "caution": [168, 377, 429, 443, 1026], "repeatedkfold": [168, 403, 790, 801, 1025], "cv_model": 168, "return_estim": [168, 403, 811, 1026], "train_idx": [168, 386], "stripplot": 168, "whi": [168, 170], "collinear": [168, 171, 203, 216, 406, 556, 637, 658, 669, 861, 972, 1018], "teas": 168, "apart": [168, 314, 331, 384, 386, 400, 402, 408, 713, 991, 1000, 1026], "vice": [168, 256, 344, 399, 409, 431, 596, 597, 817, 1022], "versa": [168, 256, 344, 399, 409, 431, 596, 597, 817, 1022], "column_to_drop": 168, "said": [168, 227, 260, 368, 373, 778, 974, 982, 1002, 1009], "unchang": [168, 216, 266, 406, 422, 426, 431, 432, 433, 434, 435, 436, 438, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 681, 751, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 835, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 877, 880, 881, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 979, 1002, 1026, 1032, 1034], "neglig": [168, 979, 1021], "littl": [168, 169, 170, 171, 227, 368, 407, 451, 633, 785, 799, 925, 966, 973, 975, 991, 992, 1009, 1019, 1030], "ridgecvridgecv": 168, "alon": [168, 265, 331, 386, 393, 397, 637, 658, 669, 730, 1025, 1027], "suppress": [168, 311, 359, 381, 681, 979, 1025], "themselv": [168, 301, 369, 381, 386, 390, 396, 399, 406, 407, 409, 435, 604, 778, 992, 1011, 1028], "bring": [168, 301, 404, 665, 667, 973, 1000], "entic": 168, "pursu": 168, "tempt": 168, "conclud": [168, 178, 216, 259, 346, 355, 387], "deflat": [168, 402, 411, 522], "presum": [168, 277, 399, 407, 823], "respond": [168, 373, 399], "357": [168, 172, 345, 370, 489, 889], "plot_linear_model_coefficient_interpret": [168, 172], "complement": [169, 269, 344, 621, 622, 787, 802, 805, 814, 823, 824, 825, 826, 827, 983, 998, 1013, 1026], "molnar": [169, 983], "christoph": [169, 404, 409, 521, 599, 600, 603, 608, 611, 783, 972, 977, 1019, 1023, 1026, 1029, 1030, 1031, 1032, 1033], "goldstein": [169, 983], "kapeln": [169, 983], "bleich": [169, 983], "pitkin": [169, 983], "peek": [169, 373, 983], "settingwithcopywarn": 169, "2284": 169, "904": [169, 257, 400], "287": [169, 988], "1747": 169, "1729": 169, "mask_train": [169, 216], "accordingli": [169, 373, 377, 378, 1025, 1026, 1033], "8640": 169, "115": [169, 206, 217, 984], "nomin": [169, 367, 386, 387, 406, 407, 570, 571, 705, 986, 997], "numerical_featur": [169, 307], "xtick_start": 169, "xtick_period": 169, "average_bike_rent": 169, "numeric_onli": 169, "decor": [169, 311, 373, 374, 375, 382, 791, 807, 915, 919, 920, 937, 943, 1028, 1031, 1034], "strike": 169, "mlp_preprocessor": 169, "quantiletransformerquantiletransform": 169, "catindex": 169, "hgbdt_preprocessor": 169, "sparse_threshold": [169, 453, 456, 1026], "passthroughpassthrough": 169, "mlp_model": 169, "hidden_layer_s": [169, 238, 295, 297, 845, 846, 980], "learning_rate_init": [169, 296, 297, 845, 846], "689": 169, "forget": [169, 355, 360, 367, 377, 384, 404, 973, 999], "poor": [169, 174, 265, 274, 322, 397, 403, 404, 679, 683, 726, 825, 828, 829, 970, 971, 973, 978, 997, 1002, 1025, 1026, 1027, 1029, 1031], "grid_resolut": [169, 313, 329, 620, 621, 622], "features_info": 169, "119": [169, 970, 1021], "hgbdt_model": 169, "213": 169, "cheaper": [169, 399, 409, 662, 968, 972], "temperatur": [169, 407, 983], "wind": [169, 977], "meaningless": [169, 407, 890, 893, 1021], "celsiu": [169, 983], "interaction_cst": [169, 316, 406, 550, 551, 1033], "hgbdt_model_without_interact": 169, "histgradientboostingregressor__interaction_cst": 169, "38": [169, 189, 197, 253, 267, 268, 284, 344, 406, 621, 718, 869, 976, 986, 1018, 1019, 1020], "heatmap": [169, 171, 177, 182, 270, 316, 331, 621, 983], "737": [169, 233, 513], "slope": [169, 196, 200, 215, 399, 711, 736, 974, 976], "dry": 169, "wetter": 169, "105": [169, 184, 188, 217, 305], "spike": 169, "degrad": [169, 227, 301, 345, 405], "somehow": 169, "forbidden": [169, 406], "noisili": 169, "379": 169, "partial_depend": [169, 621, 983, 1019, 1027, 1028, 1029, 1030, 1033, 1034], "grid_valu": [169, 622, 1034], "add_ax": [169, 223, 270], "surf": 169, "rstride": 169, "cstride": 169, "bupu": 169, "nthe": [169, 257, 353], "pretti": [169, 223, 257, 344, 359, 373, 384, 845, 846, 980, 1027], "view_init": [169, 219, 221, 223], "clb": 169, "ndepend": 169, "734": [169, 172, 346], "plot_partial_depend": [169, 172, 311, 312, 313, 1023, 1027, 1028, 1029, 1030, 1031, 1032], "breiman": [170, 403, 406, 505, 506, 507, 544, 545, 553, 554, 623, 896, 897, 984, 992], "random_num": 170, "random_cat": 170, "sibsp": [170, 316], "parch": [170, 316], "categorical_encod": 170, "numerical_pip": 170, "memor": 170, "814": [170, 1009], "mdi_import": 170, "sorted_importances_idx": 170, "retri": [170, 485, 1026, 1032], "classifier__min_samples_leaf": 170, "anymor": [170, 198, 261, 311, 312, 331, 355, 377, 400, 659, 1024, 1027, 1030, 1031, 1032, 1034], "832": [170, 406, 544, 545], "train_result": 170, "test_result": 170, "train_import": 170, "test_import": 170, "246": [170, 172, 178, 182, 190, 217, 984, 1018], "plot_permutation_import": [170, 172], "wisconsin": [171, 366, 489, 1013, 1023], "spearman": [171, 624, 625, 967], "squareform": 171, "spearmanr": 171, "load_breast_canc": [171, 322, 349, 378, 581, 584, 585, 587, 663, 664, 776, 976, 1023, 1024, 1029], "012": [171, 174, 305, 309], "contradict": [171, 997], "perm_sorted_idx": 171, "tree_importance_sorted_idx": 171, "tree_indic": 171, "fill_diagon": [171, 222], "distance_matrix": 171, "dist_linkag": 171, "dendro": 171, "leaf_rot": 171, "dendro_idx": 171, "ivl": 171, "cluster_id": [171, 345], "fcluster": 171, "cluster_id_to_feature_id": 171, "selected_featur": 171, "x_train_sel": 171, "x_test_sel": 171, "clf_sel": 171, "738": [171, 172], "plot_permutation_importance_multicollinear": [171, 172], "707": [172, 864, 876], "auto_examples_inspect": 172, "polynomialcountsketch": [174, 628, 630, 968, 1030, 1032], "covtyp": 174, "tensor": [174, 365, 395, 404, 527, 529, 536, 628, 629, 630, 1013, 1030], "sketch": [174, 361, 365, 382, 398, 628, 629, 630, 941, 1013, 1030], "daniel": [174, 316, 359, 869, 986, 1000, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1030, 1032], "lopez": 174, "sanchez": [174, 1026, 1027], "lope": 174, "usal": 174, "581": 174, "cartograph": 174, "remot": [174, 320, 373, 376], "fetch_covtyp": [174, 237, 313, 368, 1027, 1030, 1032], "5_000": 174, "mm": 174, "lsvm": 174, "lsvm_time": 174, "lsvm_score": 174, "condens": [174, 435], "compact": [174, 301, 359, 370, 828, 829, 992, 1020], "ps_lsvm_time": 174, "ps_lsvm_score": 174, "ksvm": 174, "ksvm_time": 174, "ksvm_score": 174, "pham": [174, 968, 1025], "ninh": 174, "rasmu": [174, 1025], "pagh": [174, 968], "kdd": [174, 368, 397, 426, 988], "doi": [174, 198, 216, 373, 399, 665], "1145": [174, 399, 665], "2487575": 174, "2487591": 174, "csie": [174, 367, 476, 497, 498, 647], "ntu": [174, 367, 476, 497, 498, 647], "tw": [174, 367, 476, 497, 498, 647, 991], "cjlin": [174, 367, 476, 497, 498, 647, 1021], "libsvmtool": [174, 367, 476, 497, 498], "943": [174, 175, 1006], "plot_scalable_poly_kernel": [174, 175], "auto_examples_kernel_approxim": 175, "ard": [177, 633, 634], "ol": [177, 188, 193, 195, 196, 204, 215, 314, 645, 972], "true_weight": 177, "ardregress": [177, 182, 634, 972, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1034], "olr": 177, "brr": 177, "_bay": 177, "renam": [177, 249, 260, 373, 377, 399, 430, 434, 436, 448, 460, 461, 467, 525, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 861, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "symlognorm": [177, 182], "linthresh": [177, 182], "10e": [177, 182], "cbar_kw": [177, 182], "seismic_r": [177, 182], "stabilis": 177, "retain": [177, 386, 399, 402, 403, 407, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 483, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 684, 685, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 861, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 989, 1018], "ard_scor": 177, "scores_": [177, 178, 581, 584, 585, 587, 588, 589, 633, 634, 648, 1018, 1028], "brr_score": 177, "cutoff": [177, 930, 986, 1027], "full_data": 177, "input_featur": [177, 375, 386, 415, 420, 431, 432, 434, 436, 438, 453, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 555, 556, 557, 558, 559, 570, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 677, 678, 681, 832, 837, 840, 844, 847, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 1034], "x_plot": [177, 199, 204, 233, 262, 284, 306], "y_plot": [177, 199, 204, 262], "ard_poli": 177, "brr_poli": 177, "y_ard": 177, "y_ard_std": 177, "y_brr": 177, "y_brr_std": 177, "queri": [177, 292, 359, 377, 405, 410, 433, 435, 439, 446, 541, 599, 600, 617, 633, 634, 714, 744, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 976, 979, 992, 996, 1020, 1022, 1023, 1026], "lambda_init": [177, 178, 634, 972, 1028], "intrins": [177, 386, 404, 406, 979, 984, 990, 1030], "708": [177, 217, 527, 529, 536, 738], "plot_ard": [177, 217, 633], "alpha_init": [178, 634, 972, 1028], "yoshihiro": [178, 1028], "uchida": [178, 1028], "nimbus1after2a1sun7show": 178, "1234": [178, 247, 262, 373], "n_order": 178, "vander": 178, "ymean": 178, "ystd": 178, "pink": 178, "_init": 178, "lambda_": [178, 633, 634, 864, 972, 1025], "plot_bayesian_ridge_curvefit": [178, 217], "normalized_weight": 179, "x_offset": 179, "x_center": 179, "x_scale": [179, 858, 874, 986], "uncent": 179, "incorrectli": [179, 406, 407, 542, 548, 550, 722, 728, 976, 1019, 1024, 1026, 1027, 1029, 1034], "lm": 179, "98809919e": 179, "48938813e": 179, "03237920e": 179, "25349312e": 179, "53959628e": 179, "67451144e": 179, "00768662e": 179, "19112072e": 179, "07963978e": 179, "47987268e": 179, "76195467e": 179, "00393284e": 179, "07582983e": 179, "66670169e": 179, "65799352e": 179, "99891212e": 179, "58195950e": 179, "58667835e": 179, "98350372e": 179, "60836363e": 179, "00911944e": 179, "elasticnetelasticnet": 179, "840": [179, 217, 379], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [179, 217], "huber": [180, 208, 398, 406, 549, 638, 665, 667, 990, 1018, 1020, 1021, 1030], "mks542": 180, "x_outlier": [180, 212, 285, 286, 330], "y_outlier": 180, "epsilon_valu": 180, "intercept_": [180, 188, 190, 207, 235, 329, 336, 340, 375, 386, 471, 472, 473, 538, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 888, 889, 890, 891, 892, 893, 894, 970, 972, 990, 991, 1018, 1025, 1030, 1032], "coef_ridg": 180, "plot_huber_vs_ridg": [180, 217], "logreg": [181, 822], "plot_method": [181, 282, 287, 327, 329, 332, 333, 620], "051": [181, 217, 461], "plot_iris_logist": [181, 217], "underdetermin": 182, "time_step": [182, 846], "anti": [182, 355, 595, 823, 978], "9502547": 182, "8059798": 182, "63394388": 182, "70359377": 182, "62241605": 182, "84077985": 182, "30506066": 182, "63327171": 182, "74495357": 182, "02456369": 182, "random_sampl": [182, 828, 829, 833], "sensor": 182, "monitor": [182, 206, 376, 386, 542, 543, 548, 549, 550, 551, 980, 1021, 1026, 1028, 1030], "superposit": 182, "tempor": [182, 996, 997], "y_pred_lasso": 182, "r2_score_lasso": 182, "480": 182, "y_pred_ard": 182, "r2_score_ard": 182, "095": 182, "542": [182, 370], "elasticnetcv": [182, 386, 635, 641, 649, 650, 651, 652, 670, 972, 1018, 1021, 1029, 1031, 1032], "enet": [182, 272], "y_pred_enet": 182, "r2_score_enet": 182, "nlasso": 182, "meinshausen": 182, "yu": [182, 399, 441, 451, 647, 972, 980, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "270": [182, 320], "483": [182, 217, 637], "plot_lasso_and_elasticnet": [182, 217], "penalis": [183, 196, 213, 685], "enet_path": [183, 386, 636, 1020, 1022, 1031], "lasso_path": [183, 640, 641, 642, 643, 644, 645, 652, 671, 672, 972, 1018, 1020, 1022, 1031], "alphas_lasso": 183, "coefs_lasso": 183, "alphas_positive_lasso": 183, "coefs_positive_lasso": 183, "alphas_enet": 183, "coefs_enet": 183, "alphas_positive_enet": 183, "coefs_positive_enet": 183, "neg_log_alphas_lasso": 183, "neg_log_alphas_enet": 183, "coef_l": 183, "neg_log_alphas_positive_lasso": 183, "coef_pl": 183, "neg_log_alphas_positive_enet": 183, "coef_p": 183, "318": [183, 217, 439], "plot_lasso_coordinate_descent_path": [183, 217, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673], "sai": [184, 227, 339, 344, 345, 373, 397, 399, 400, 404, 406, 407, 435, 436, 489, 493, 499, 666, 965, 982, 989, 1000, 1008, 1009, 1011], "x_sp": 184, "sparse_lasso": 184, "dense_lasso": 184, "coeff_diff": 184, "2e": [184, 273], "01e": 184, "xs_sp": 184, "tocsc": 184, "nnz": [184, 345, 368], "857": [184, 260, 345], "65e": 184, "197": [184, 217, 409], "plot_lasso_dense_vs_sparse_data": [184, 217], "lars_path": [185, 382, 520, 526, 528, 531, 532, 534, 535, 537, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 672, 673, 674, 675, 972, 1018, 1020, 1023, 1027, 1029], "080": [185, 217], "plot_lasso_lar": [185, 217], "zht2007": 186, "lassolars": [186, 187, 408, 640, 643, 644, 972, 1018, 1025, 1027, 1031, 1032], "2173": [186, 645, 972], "2192": [186, 645, 972], "038076": [186, 187], "050680": [186, 187], "061696": [186, 187], "021872": [186, 187], "044223": [186, 187], "034821": [186, 187], "043401": [186, 187], "002592": [186, 187], "019907": [186, 187], "017646": [186, 187], "001882": [186, 187], "044642": [186, 187], "051474": [186, 187], "026328": [186, 187], "008449": [186, 187], "019163": [186, 187], "074412": [186, 187], "039493": [186, 187], "068332": [186, 187], "092204": [186, 187], "085299": [186, 187], "044451": [186, 187], "005670": [186, 187], "045599": [186, 187], "034194": [186, 187], "032356": [186, 187], "002861": [186, 187], "025930": [186, 187], "089063": [186, 187], "011595": [186, 187], "036656": [186, 187], "012191": [186, 187], "024991": [186, 187], "036038": [186, 187], "034309": [186, 187], "022688": [186, 187], "009362": [186, 187], "005383": [186, 187], "036385": [186, 187], "003935": [186, 187], "015596": [186, 187], "008142": [186, 187], "031988": [186, 187], "046641": [186, 187], "linearlars": 186, "akaik": [186, 187, 249, 645, 784, 965, 972], "lasso_lars_": [186, 187], "zou_et_al_criterion_resc": 186, "noise_vari": [186, 521, 645, 972, 1032], "aic_criterion": 186, "criterion_": [186, 187, 645], "index_alpha_path_a": 186, "alphas_": [186, 187, 636, 639, 640, 642, 643, 644, 645, 650, 652, 671, 672, 1018, 1021, 1031], "lassolarsic__criterion": [186, 187], "bic_criterion": 186, "index_alpha_path_b": 186, "102": [186, 217, 379, 1009, 1020], "plot_lasso_lars_": [186, 217], "n_random_featur": 187, "x_random": 187, "random_": 187, "02d": 187, "random_02": 187, "random_05": 187, "random_08": 187, "random_11": 187, "647689": 187, "234137": 187, "469474": 187, "465730": 187, "012831": 187, "412304": 187, "067528": 187, "110923": 187, "601707": 187, "057711": 187, "208864": 187, "196861": 187, "478522": 187, "057122": 187, "324084": 187, "611676": 187, "331263": 187, "185659": 187, "812526": 187, "003533": 187, "alpha_a": 187, "alpha_b": 187, "160030": 187, "5244": 187, "764779": 187, "300343": 187, "5208": 187, "250639": 187, "5212": 187, "341949": 187, "542052": 187, "4928": 187, "018900": 187, "4936": 187, "201520": 187, "034077": 187, "4869": 187, "678359": 187, "4881": [187, 1023], "952289": 187, "189631": 187, "4815": 187, "437362": 187, "4831": [187, 644], "802601": 187, "329616": 187, "4810": 187, "423641": 187, "4830": 187, "880191": 187, "306012": 187, "4803": 187, "573491": 187, "4828": 187, "121351": 187, "124225": 187, "4804": 187, "126502": 187, "4832": 187, "765671": 187, "820705": 187, "621645": 187, "4836": 187, "352124": 187, "750389": 187, "4805": 187, "012521": 187, "4841": 187, "834310": 187, "570655": 187, "290075": 187, "4846": 187, "203174": 187, "550213": 187, "4807": 187, "075887": 187, "4852": 187, "080295": 187, "358295": 187, "4806": 187, "878051": 187, "4855": 187, "973770": 187, "259297": 187, "706026": 187, "4860": 187, "893055": 187, "237703": 187, "4809": [187, 262], "440409": 187, "4866": 187, "718747": 187, "850031": 187, "989341": 187, "4867": 187, "358990": 187, "384338": 187, "4801": 187, "702266": 187, "163224": 187, "296575": 187, "4802": 187, "594754": 187, "4872": 187, "147022": 187, "031555": 187, "236720": 187, "4874": 187, "880298": 187, "618263": 187, "4798": 187, "484109": 187, "4876": 187, "218997": 187, "526599": 187, "4799": 187, "543841": 187, "370039": 187, "586798": 187, "4794": 187, "238744": 187, "4880": 187, "156252": 187, "445978": 187, "4795": 187, "589715": 187, "4885": 187, "598533": 187, "259031": 187, "4796": 187, "966981": 187, "4891": 187, "067109": 187, "032179": 187, "662409": 187, "4894": 187, "853846": 187, "019069": 187, "652739": 187, "4888": 187, "752867": 187, "626286": 187, "817724": 187, "set_xscal": [187, 202, 203, 791], "optimist": [187, 264, 344, 355, 696, 972, 976], "badli": [187, 198, 344, 361, 868, 972, 986], "lassolarscv": [187, 408, 641, 642, 643, 645, 652, 654, 671, 672, 673, 972, 1018, 1025, 1031], "3800": 187, "mse_path_": [187, 636, 640, 642, 644, 650, 652], "cv_alphas_": [187, 640, 644, 1030], "kink": 187, "heavili": [187, 359, 360, 373, 381, 638, 644, 993], "efficaci": 187, "plot_lasso_model_select": [187, 217, 636, 642], "plot_logist": [188, 217], "axes_row": 189, "clf_l1_lr": 189, "clf_l2_lr": 189, "clf_en_lr": 189, "coef_l1_lr": 189, "coef_l2_lr": 189, "coef_en_lr": 189, "sparsity_l1_lr": 189, "sparsity_l2_lr": 189, "sparsity_en_lr": 189, "nl1_ratio": 189, "plot_logistic_l1_l2_spars": [189, 217], "995": 190, "plot_logistic_multinomi": [190, 217], "976": 190, "dupr": [190, 206, 279, 281, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "m4x": [190, 214], "sag": [190, 205, 647, 648, 661, 663, 676, 972, 990, 996, 1023, 1024, 1025, 1027, 1028], "bry": [190, 207], "classes_": [190, 207, 228, 234, 268, 319, 320, 373, 375, 386, 426, 427, 538, 539, 540, 542, 544, 546, 548, 550, 553, 556, 558, 582, 583, 599, 647, 648, 655, 657, 663, 664, 665, 686, 689, 691, 776, 785, 788, 789, 799, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 830, 835, 838, 845, 848, 855, 856, 859, 883, 884, 885, 888, 890, 893, 896, 898, 901, 976, 987, 990, 1019, 1022, 1023, 1025, 1028, 1030], "plot_hyperplan": [190, 207, 235], "looser": 191, "liblinear": [191, 329, 379, 647, 648, 776, 888, 889, 890, 893, 894, 976, 991, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1034], "l1_min_c": [191, 972, 991, 1018], "intercept_sc": [191, 647, 648, 888, 889, 895, 972], "coefs_": [191, 297, 845, 846, 980, 1023], "plot_logistic_path": [191, 217], "jointli": [192, 266, 398, 399, 404, 972], "instant": 192, "wave": [192, 373, 975], "n_task": [192, 972], "n_relevant_featur": 192, "multitasklasso": [192, 641, 649, 652, 972, 1018, 1026, 1029, 1031], "coef_lasso_": 192, "coef_multi_task_lasso_": 192, "spy": 192, "feature_to_plot": 192, "seagreen": 192, "258": [192, 217, 221], "plot_multi_task_lasso_support": [192, 217], "reg_nnl": 193, "y_pred_nnl": 193, "r2_score_nnl": 193, "nnl": [193, 646], "8225220806196526": 193, "reg_ol": 193, "y_pred_ol": 193, "r2_score_ol": 193, "7436926291700353": 193, "low_x": 193, "high_x": 193, "low_i": 193, "high_i": 193, "get_ylim": [193, 301, 302], "847222222222214": 193, "plot_nnl": [193, 217], "23786125": 194, "2548": 194, "diabetes_x": [194, 1009], "diabetes_i": [194, 1009], "diabetes_x_train": [194, 1009], "diabetes_x_test": [194, 1009], "diabetes_y_train": [194, 1009], "diabetes_y_test": [194, 1009], "regr": [194, 400, 543, 545, 554, 635, 636, 656, 821, 846, 889, 891, 894, 991, 1009], "diabetes_y_pr": 194, "plot_ol": [194, 217], "175": [195, 208, 217, 291, 293, 379, 986], "plot_ols_3d": [195, 217], "greatli": [196, 232, 316, 373, 381, 441, 979, 992, 1024, 1032], "217": [196, 217, 345, 524, 530], "plot_ols_ridge_vari": [196, 217], "make_sparse_coded_sign": [197, 520, 526, 1032, 1034], "orthogonalmatchingpursuit": [197, 654, 674, 675, 972, 1018, 1020, 1023, 1026, 1031], "orthogonalmatchingpursuitcv": [197, 653, 1020, 1031], "512": 197, "n_nonzero_coef": [197, 515, 520, 526, 531, 537, 639, 653, 674, 675], "xw": [197, 314, 635, 636, 638, 641, 642, 643, 644, 645, 649, 650, 651, 652, 661, 670, 671, 672, 673, 972], "_0": [197, 674, 972, 976, 991], "distort": [197, 231, 370, 397, 398, 865, 877, 882, 973, 986, 988], "y_noisi": 197, "idx_r": 197, "omp_cv": 197, "plot_omp": [197, 217], "gbrt": [198, 406], "contract": [198, 216, 360, 386, 997], "compani": [198, 216, 399, 1000], "policyhold": [198, 216, 972], "vehicl": [198, 216], "driver": [198, 216, 1033], "exposur": [198, 216, 972], "car": 198, "accid": [198, 216], "noll": [198, 216], "salzmann": [198, 216], "wuthrich": [198, 216], "novemb": [198, 216, 370, 1023, 1024, 1026], "2139": [198, 216], "ssrn": [198, 216], "3164764": [198, 216], "ch": [198, 200, 216, 322, 324], "rth": [198, 216], "41214": [198, 216], "idpol": [198, 216], "claimnb": [198, 216], "vehpow": [198, 216], "vehag": [198, 216], "drivag": [198, 216], "bonusmalu": [198, 216], "vehbrand": [198, 216], "vehga": [198, 216], "b12": [198, 216], "1217": 198, "r82": 198, "77000": 198, "75000": 198, "diesel": [198, 216], "r22": 198, "09000": 198, "r72": 198, "84000": 198, "678008": 198, "6114326": 198, "00274": 198, "3317": 198, "r93": 198, "678009": 198, "6114327": 198, "9850": 198, "r11": [198, 216], "678010": 198, "6114328": 198, "1323": 198, "678011": 198, "6114329": 198, "r26": 198, "678012": 198, "6114330": 198, "678013": [198, 216], "10070308464041304": 198, "log_scale_transform": [198, 216], "linear_model_preprocessor": 198, "passthrough_numer": [198, 216], "binned_numer": [198, 216], "2e5": [198, 216], "log_scaled_numer": [198, 216], "onehot_categor": [198, 216], "imbalanc": [198, 262, 266, 268, 345, 384, 397, 403, 692, 697, 775, 786, 790, 825, 976, 978, 984, 996], "simplist": [198, 407], "pertin": 198, "dummyregressor": [198, 216, 540, 976, 1019, 1021, 1022, 1025, 1026, 1028, 1031, 1032], "df_train": [198, 216], "df_test": [198, 216], "regressor__sample_weight": 198, "mean_absolute_error": [198, 200, 216, 976, 1019, 1021], "mean_poisson_devi": [198, 976, 1028], "score_estim": [198, 216], "n_mask": 198, "564": 198, "189": [198, 256, 275, 333, 342, 379, 885, 989], "comonli": 198, "ridge_glm": 198, "strictli": [198, 216, 234, 301, 345, 378, 386, 397, 402, 404, 407, 497, 498, 524, 530, 533, 550, 551, 577, 580, 631, 659, 660, 684, 689, 727, 754, 785, 788, 789, 795, 799, 811, 837, 864, 876, 880, 881, 883, 884, 888, 889, 893, 894, 923, 965, 967, 972, 976, 986, 990, 1019, 1029, 1034], "domain": [198, 307, 386, 388, 403, 624, 710, 711, 712, 786, 787, 792, 793, 794, 972, 997], "560": [198, 506, 507], "595": 198, "223745": 198, "597": 198, "glm": [198, 216, 312, 637, 658, 669, 972, 1018, 1029], "vanilla": [198, 395, 399, 436, 438, 449, 618], "poissonregressor": [198, 216, 312, 315, 637, 669, 972, 1029, 1032, 1033], "poisson_glm": 198, "newton": [198, 216, 298, 599, 637, 647, 648, 658, 669, 845, 846, 972, 1022, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034], "deep": [198, 375, 386, 406, 413, 423, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 757, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 980, 981, 996, 997, 1000, 1023, 1029, 1030, 1032], "implicit": [198, 386, 406, 407, 561, 671, 672, 970, 975, 996, 1027], "concis": [198, 373, 378, 1029, 1031], "poisson_gbrt": 198, "566": 198, "prone": [198, 246, 305, 384, 397], "set_yscal": [198, 791], "5e5": 198, "realiz": [198, 1000], "priori": [198, 215, 268, 277, 301, 386, 399, 406, 577, 583, 975, 1034], "wrongli": [198, 331], "gen_even_slic": [198, 382, 928], "_mean_frequency_by_risk_group": 198, "y_true_bin": 198, "y_pred_bin": 198, "idx_sort": 198, "sl": 198, "y_true_seg": 198, "y_pred_seg": 198, "11935": 198, "11933": 198, "11932": 198, "12196": 198, "11931": 198, "portfolio": [198, 216, 970], "riskiest": [198, 216], "safest": [198, 216, 355, 367], "irrespect": [198, 231, 268, 279, 595], "lorenz": [198, 216, 1023], "summar": [198, 250, 266, 268, 346, 373, 375, 388, 406, 510, 647, 683, 695, 696, 972, 973, 976, 982], "gini": [198, 216, 239, 271, 313, 542, 543, 546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899, 965, 984, 992, 1026, 1027, 1034], "lorenz_curv": [198, 216], "ranked_frequ": 198, "ranked_exposur": [198, 216], "cumulated_claim": 198, "cumulated_exposur": 198, "cum_exposur": 198, "cum_claim": [198, 216], "0x7f64d7e39c70": 198, "worst": [198, 307, 370, 399, 436, 697, 717, 718, 771, 772, 775, 778, 779, 813, 976, 1000, 1018, 1031], "occurr": [198, 307, 345, 346, 368, 373, 399, 407, 558, 559, 570, 578, 579, 606, 616, 617, 618, 619, 771, 823, 851, 978, 1019, 1024], "circumstanti": 198, "extractor": [198, 298, 361, 368, 386, 407, 492, 965, 1018], "discrim": 198, "profil": [198, 359, 373, 376, 510, 513, 972, 1000], "ideal": [198, 200, 216, 256, 259, 266, 268, 269, 355, 372, 373, 377, 378, 381, 384, 386, 397, 714, 744, 965, 975, 990, 991, 997], "meaningfulli": [198, 976], "022": [198, 217, 345, 984], "plot_poisson_regression_non_normal_loss": [198, 217], "monomi": 199, "vandermond": [199, 986], "x_0": [199, 646], "pseudo": [199, 298, 375, 403, 411, 429, 441, 443, 451, 458, 459, 460, 462, 463, 464, 465, 522, 550, 551, 552, 616, 623, 628, 630, 631, 635, 636, 641, 642, 649, 650, 651, 652, 666, 680, 684, 788, 789, 797, 799, 837, 844, 880, 881, 885, 888, 889, 890, 893, 924, 925, 972, 988, 1023, 1032], "consecut": [199, 397, 403, 407, 432, 436, 438, 439, 441, 445, 448, 451, 526, 527, 528, 535, 591, 634, 655, 656, 657, 665, 666, 667, 783, 784, 790, 823, 824, 825, 826, 827, 845, 846, 965, 986, 1011, 1026], "basis_1": 199, "basis_2": 199, "infinit": [199, 244, 262, 359, 409, 435, 611, 612, 766, 783, 906, 908, 909, 968, 975, 986, 991, 1026, 1028, 1031, 1032, 1033], "malt": [199, 1031, 1032, 1033], "londschien": [199, 1031], "prepar": [199, 234, 344, 359, 375, 376, 379, 381, 992, 1000, 1026, 1034], "set_prop_cycl": 199, "teal": [199, 208, 266], "yellowgreen": [199, 201, 208, 351], "tomato": 199, "unwant": [199, 344], "oscillatori": [199, 986], "danger": [199, 403], "pft": 199, "splt": 199, "bsplines_": [199, 867], "refrain": [199, 373], "dec": [199, 666, 867, 892, 991], "31st": [199, 867], "advis": [199, 234, 355, 371, 373, 399, 407, 426, 635, 641, 643, 649, 651, 661, 676, 968, 972, 978, 980, 991, 1032], "x_plot_ext": 199, "y_plot_ext": 199, "490": [199, 217], "plot_polynomial_interpol": [199, 217, 863, 867], "pareto": 200, "dale": [200, 1031], "mail": [200, 306, 368, 373, 377, 381, 384, 387, 994, 1026, 1027], "ru": 200, "glemaitre58": 200, "y_true_mean": 200, "y_normal": 200, "y_pareto": 200, "huge": [200, 203, 359, 379, 616, 1021], "heavi": [200, 396, 997], "parse_vers": [200, 659], "sp_version": [200, 659], "incompat": [200, 377, 485, 966, 1026, 1027], "older": [200, 234, 372, 377, 1021, 1028, 1030], "recent": [200, 234, 362, 371, 374, 378, 381, 386, 389, 399, 457, 527, 554, 990, 1000, 1021, 1030], "interior": [200, 659, 972, 1033], "out_bounds_predict": 200, "bool_": 200, "logical_or": [200, 206, 268, 379], "hit": [200, 379], "wider": [200, 407, 901, 972], "asymmetri": [200, 344], "linger": 200, "linear_regress": [200, 273], "quantile_regress": 200, "y_pred_lr": 200, "y_pred_qr": 200, "805": 200, "486": 200, "670": 200, "cv_results_lr": 200, "cv_results_qr": 200, "test_neg_mean_squared_error": [200, 811], "732": 200, "690": 200, "679": [200, 888], "129": [200, 1007, 1018], "plot_quantile_regress": [200, 217], "robustli": [201, 398], "faulti": [201, 1018], "1903908407869": 201, "17236387": 201, "08533159": 201, "ransacregressor": [201, 204, 215, 638, 667, 668, 972, 1021, 1023, 1024, 1025, 1026, 1029, 1031, 1032], "inlier_mask": 201, "inlier_mask_": [201, 660], "outlier_mask": 201, "line_x": [201, 215], "line_i": 201, "line_y_ransac": 201, "estimator_": [201, 234, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 582, 583, 586, 660, 960, 1033], "plot_ransac": [201, 217], "regularis": [202, 412, 462, 464], "eventu": [202, 247, 398, 399, 408, 582, 1000], "simpler": [202, 216, 331, 359, 372, 399, 404, 972, 977, 1009, 1023], "stronger": [202, 260, 632, 641, 647, 648, 661, 662, 663, 664, 665, 667, 676], "kornel": [202, 1024], "kielczewski": [202, 1024], "plusnet": 202, "384": [202, 217, 685, 889], "plot_ridge_coeff": [202, 217], "practis": 203, "10x10": 203, "hilbert": [203, 854, 968, 986], "n_alpha": [203, 461, 635, 636, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 662, 664, 670, 671, 672, 673, 1021], "196": [203, 217, 240, 242, 335, 342, 885, 989], "plot_ridge_path": [203, 217], "theilsen": 204, "lessen": [204, 647, 648, 888, 889], "theilsenregressor": [204, 215, 638, 660, 667, 972, 1022, 1030, 1032], "x_error": 204, "y_errors_larg": 204, "x_errors_larg": 204, "deviant": [204, 982], "legend_titl": 204, "nabsolut": 204, "nto": [204, 268], "plot_robust_fit": [204, 217], "asgd": [205, 990], "rob": [205, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1030, 1033], "zinkov": [205, 1018, 1019, 1020, 1022, 1023], "heldout": 205, "squared_hing": [205, 339, 655, 665, 888, 895, 972], "0e4": 205, "yy_": 205, "901": [205, 217], "plot_sgd_comparison": [205, 217], "_test": [206, 303, 375, 1031], "ignore_warn": [206, 303, 1024], "load_mnist": [206, 279], "class_0": [206, 370, 499], "class_1": [206, 370, 499], "554": [206, 214, 297], "mnist_784": [206, 214, 279, 297], "fit_and_scor": 206, "train_scor": [206, 307, 339, 349, 791, 807, 811, 812, 815, 971], "estimator_dict": 206, "flush": 206, "results_df": [206, 259, 307], "group_df": 206, "plot_sgd_early_stop": [206, 217], "ova": [207, 655, 657, 665, 990], "plot_sgd_iri": [207, 217], "ugli": [207, 282, 287, 290, 327], "modified_huber_loss": 208, "darkorchid": 208, "plot_sgd_loss_funct": [208, 217], "l1_color": 209, "l2_color": 209, "elastic_net_color": 209, "1001": 209, "rho": [209, 404, 666, 972, 990, 1019], "elastic_net": 209, "dpi": [209, 902, 1031], "elastic_net_contour": 209, "l2_contour": 209, "l1_contour": 209, "inlin": [209, 373, 374, 992], "302": [209, 217, 259, 616], "plot_sgd_penalti": [209, 217], "ndenumer": 210, "083": [210, 217, 257], "plot_sgd_separating_hyperplan": [210, 217], "no_weight": 211, "samples_weight": 211, "no_weights_handl": 211, "weights_handl": 211, "plot_sgd_weighted_sampl": [211, 217], "sgdoneclasssvm": [212, 227, 314, 892, 982, 990, 1031, 1033, 1034], "rc": [212, 377], "novel": [212, 285, 330, 355, 397, 965], "abnorm": [212, 227, 285, 330, 368, 481, 552, 834, 982, 1026], "y_pred_train": [212, 330], "y_pred_test": [212, 285, 330], "y_pred_outli": [212, 285, 330], "n_error_train": [212, 330], "n_error_test": [212, 285, 330], "n_error_outli": [212, 285, 330], "clf_sgd": 212, "pipe_sgd": 212, "y_pred_train_sgd": 212, "y_pred_test_sgd": 212, "y_pred_outliers_sgd": 212, "n_error_train_sgd": 212, "n_error_test_sgd": 212, "n_error_outliers_sgd": 212, "z_sgd": 212, "pubu": [212, 231, 285, 330], "darkr": [212, 285, 330], "palevioletr": [212, 285, 330], "b1": [212, 285, 330], "b2": [212, 285, 330], "blueviolet": [212, 285, 330], "332": [212, 217, 231, 345, 876], "plot_sgdocsvm_vs_ocsvm": [212, 217], "newgroups20": 213, "trim": [213, 399, 828, 829], "20newsgroup": [213, 366, 1018], "4500": 213, "130107": [213, 231, 478], "epoch": [213, 386, 525, 655, 656, 657, 665, 666, 667, 845, 846, 990, 1025, 1026, 1031], "5960": 213, "26593496": 213, "43348936": 213, "26362917": 213, "31973683": 213, "37815029": 213, "2928359": 213, "27054655": 213, "62717609": 213, "19522393": 213, "30897646": 213, "34586917": 213, "28207552": 213, "34125758": 213, "29898468": 213, "34279478": 213, "59489497": 213, "38353048": 213, "35278655": 213, "19829832": 213, "14603365": 213, "6440": 213, "36047253": 213, "1268187": 213, "10606655": 213, "17985197": 213, "5395559": 213, "07993421": 213, "06686804": 213, "21443888": 213, "11528972": 213, "2075215": 213, "10914094": 213, "11144673": 213, "13988486": 213, "09684337": 213, "26286057": 213, "11682692": 213, "55800226": 213, "17370318": 213, "11452112": 213, "arthur": [213, 214, 399, 436, 449, 1023, 1024, 1025, 1026, 1027, 1030, 1032], "mensch": [213, 214, 1023, 1024, 1025, 1026], "timeit": [213, 247, 379], "default_tim": [213, 247], "model_param": 213, "this_max_it": 213, "train_tim": [213, 233, 344, 345], "ndataset": [213, 303], "run_tim": [213, 214], "616": [213, 217, 825, 978, 986], "plot_sparse_logistic_regression_20newsgroup": [213, 217], "8253": 214, "428": 214, "l1_plot": 214, "496": [214, 217], "plot_sparse_logistic_regression_mnist": [214, 217], "subpopul": [215, 668, 972], "residual_threshold": [215, 660, 972, 1031], "remedi": 215, "max_subpopul": [215, 668, 1032], "lose": [215, 346, 368, 386, 402, 407, 409, 535, 924, 925, 966, 972, 1011], "florian": [215, 1000, 1018, 1022, 1024, 1028], "wilhelm": [215, 1022, 1024, 1028], "indigo": 215, "587": [215, 217, 346], "plot_theilsen": [215, 217], "motor": 216, "parti": [216, 360, 372, 384, 787, 794, 944, 994, 1018, 1029, 1034], "liabil": 216, "functool": 216, "mean_tweedie_devi": [216, 976, 1028], "load_mtpl2": 216, "fremtpl2freq": 216, "df_freq": 216, "fremtpl2sev": 216, "41215": 216, "df_sev": 216, "claimamount": 216, "fillna": 216, "unquot": 216, "field": [216, 370, 396, 399, 400, 407, 487, 490, 606, 972, 974, 983, 991, 996, 999, 1011, 1019], "column_nam": 216, "plot_obs_pr": 216, "y_label": 216, "fill_legend": 216, "df_": 216, "tweedie_pow": 216, "d\u00b2": 216, "subset_label": 216, "score_label": [216, 265], "est_freq": 216, "est_sev": 216, "unstack": [216, 262], "fremtpl2": 216, "unreason": [216, 403], "exception": 216, "200000": 216, "column_tran": [216, 400], "purepremium": 216, "indirectli": 216, "avgclaimamount": 216, "fmax": 216, "option_context": 216, "max_column": 216, "139": [216, 248, 251, 279, 379, 406, 441, 451, 680, 684, 977], "414": [216, 400, 714, 744, 864, 876, 976], "424": 216, "463": 216, "27000": 216, "303": [216, 624], "404": 216, "333333": 216, "r25": 216, "1981": [216, 972], "14156": 216, "142857": 216, "4792": 216, "1456": 216, "10403": 216, "928571": 216, "10834": 216, "17474": 216, "193548": 216, "225806": 216, "r73": 216, "3986": 216, "12860": [216, 1027], "5417": 216, "seemingli": [216, 355, 384], "169504": 216, "6237": 216, "upon": [216, 224, 292, 368, 373, 384, 386, 393, 550, 551, 616, 619, 660, 777, 783, 784, 828, 829, 965, 972, 992, 1002, 1011, 1032], "glm_freq": 216, "0201": 216, "0219": 216, "1379": 216, "1378": 216, "2441": 216, "2246": 216, "surprisingli": [216, 368, 407], "bonu": [216, 373, 1006, 1011], "malu": 216, "younger": 216, "infti": [216, 409, 608, 972, 986, 1025], "gammaregressor": [216, 312, 315, 669, 972, 1029, 1032, 1033], "mask_test": 216, "glm_sev": 216, "400000e": 216, "700000e": 216, "756746e": 216, "744042e": 216, "801770e": 216, "030677e": 216, "dummy_sev": 216, "000000e": 216, "756687e": 216, "744497e": 216, "803882e": 216, "033764e": 216, "avgclaim": 216, "nbclaim": 216, "1951": 216, "1940": 216, "1978": [216, 972], "apriori": 216, "regardless": [216, 260, 261, 262, 360, 373, 399, 524, 621, 622, 647, 693, 704, 976, 988, 1026, 1033, 1034], "glm_pure_premium": 216, "999": [216, 259, 377, 406, 706, 845, 846], "scores_product_model": 216, "scores_glm_pure_premium": 216, "expand_frame_repr": 216, "690000e": 216, "420000e": 216, "669930e": 216, "617050e": 216, "640770e": 216, "640880e": 216, "7000": 216, "695740e": 216, "683980e": 216, "682880e": 216, "692270e": 216, "8000": [216, 262, 263], "046010e": 216, "040530e": 216, "037600e": 216, "045390e": 216, "9000": 216, "387580e": 216, "385000e": 216, "382120e": 216, "387830e": 216, "9900": 216, "015716e": 216, "015414e": 216, "015347e": 216, "015587e": 216, "9990": 216, "914573e": 216, "914370e": 216, "914538e": 216, "914387e": 216, "904751e": 216, "904556e": 216, "904747e": 216, "904558e": 216, "730119e": 216, "722128e": 216, "739865e": 216, "731249e": 216, "295040e": 216, "212197e": 216, "295505e": 216, "213056e": 216, "917618e": 216, "299546e": 216, "916555e": 216, "313276e": 216, "951751e": 216, "325198e": 216, "riski": 216, "operation": [216, 1000], "develop": [216, 257, 259, 311, 344, 359, 362, 368, 372, 373, 379, 384, 386, 387, 388, 390, 393, 396, 398, 401, 402, 406, 407, 422, 482, 785, 972, 976, 979, 992, 994, 996, 997, 999, 1000, 1009, 1018, 1026, 1027, 1028, 1031, 1033, 1035], "ranked_pure_premium": 216, "cumulated_claim_amount": 216, "cumulated_sampl": 216, "y_pred_product": 216, "y_pred_tot": 216, "ordered_sampl": 216, "929": [216, 217, 307, 309], "plot_tweedie_regression_insurance_claim": [216, 217], "573": [217, 407], "auto_examples_linear_model": 217, "md": [219, 220, 221, 222, 377, 677, 681, 683, 1012, 1013, 1018, 1030, 1033], "seek": [219, 221, 223, 372, 373, 384, 387, 497, 498, 973, 1003, 1005], "ticker": [219, 221, 224, 279], "s_point": 219, "s_color": 219, "make_s_curv": [219, 224], "plot_3d": 219, "points_color": 219, "subplot_kw": [219, 283], "set_major_loc": [219, 284], "multipleloc": [219, 284], "add_2d_scatt": 219, "set_major_formatt": [219, 221, 224, 279, 284], "nullformatt": [219, 221, 224, 279], "lle": [219, 220, 221, 223, 519, 678, 682, 973, 1030], "thought": [219, 284, 386, 399, 435, 973, 977], "analys": [219, 353, 404, 788, 789, 973, 996, 1000], "lle_standard": 219, "s_standard": 219, "lle_ltsa": 219, "ltsa": [219, 220, 221, 678, 682, 973], "s_ltsa": 219, "lle_hessian": 219, "hessian": [219, 220, 221, 406, 637, 647, 648, 658, 669, 678, 682, 972, 980, 1012, 1013, 1033], "s_hessian": 219, "lle_mod": 219, "s_mod": 219, "lle_method": 219, "tangent": [219, 678, 682, 974, 1012, 1013], "eigenmap": [219, 678, 680, 682, 684, 1012, 1013, 1019], "isometr": [219, 677, 679, 680, 681, 973], "geodes": [219, 677, 973], "s_isomap": 219, "md_scale": 219, "normalized_stress": [219, 220, 221, 222, 679, 683, 973, 1033], "s_scale": 219, "laplacian": [219, 365, 396, 429, 441, 451, 609, 628, 632, 680, 684, 753, 754, 762, 884, 972, 973, 989, 1013, 1019, 1024], "s_spectral": 219, "t_sne": [219, 1026], "s_t_sne": 219, "055": [219, 225, 370, 976], "plot_compare_method": [219, 225], "offsetbox": 220, "plot_embed": 220, "425": [220, 604], "shown_imag": 220, "someth": [220, 234, 344, 373, 375, 376, 377, 381, 407, 976, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "4e": 220, "imagebox": 220, "annotationbbox": 220, "offsetimag": 220, "neighborhoodcomponentsanalysi": [220, 287, 288, 289, 979, 1027, 1032], "random_project": [220, 231, 362, 988, 993, 1019, 1024, 1034], "sparserandomproject": [220, 231, 880, 988, 1019, 1024, 1032, 1034], "embeed": 220, "n_iter_without_progress": [220, 681, 1023, 1024], "nca": [220, 287, 288, 289, 837, 979], "955": [220, 225, 236, 242, 279, 403, 643], "plot_lle_digit": [220, 225], "pole": 221, "thin": [221, 609], "earth": [221, 345, 752, 996], "064": [221, 379, 984], "098": 221, "058": [221, 257, 370], "sphere_data": 221, "trans_data": 221, "2g": [221, 224, 686, 1029], "257": [221, 225, 257], "se": [221, 370, 389], "347": [221, 225], "plot_manifold_spher": [221, 225], "euclidean_dist": [222, 231, 375, 439, 446, 677, 750, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 1018, 1023, 1026, 1027], "finfo": [222, 460, 461, 467, 595, 639, 640, 643, 644, 645, 671, 672, 729, 1033], "x_true": 222, "dissimilar": [222, 386, 396, 441, 679, 683, 973, 1024, 1034], "embedding_": [222, 386, 677, 678, 679, 680, 681], "nmd": 222, "npo": 222, "215": [222, 225, 573], "plot_md": [222, 225], "sr_point": 223, "sr_color": 223, "ambient": 223, "text2d": 223, "unrol": 223, "unnecessarili": [223, 1025, 1028], "clump": 223, "sr_lle": 223, "sr_err": 223, "locally_linear_embed": [223, 973], "sr_tsne": 223, "stretch": [223, 248], "byproduct": 223, "sh_point": 223, "sh_color": 223, "topologi": [223, 224], "sh_lle": 223, "sh_err": 223, "sh_tsne": 223, "937": [223, 225], "plot_swissrol": [223, 225], "tendenc": [224, 972, 973, 975, 978, 981], "clearer": [224, 991], "distil": 224, "pub": [224, 826, 883], "misread": 224, "narin": [224, 1025, 1026], "kokhlikyan": [224, 1025, 1026], "plot_t_sne_perplex": [224, 225], "auto_examples_manifold": 225, "cope": [227, 361, 368, 972], "multimod": 227, "inli": [227, 972, 982], "unimod": [227, 463], "localoutlierfactor": [227, 237, 285, 286, 315, 386, 552, 892, 982, 1025, 1026, 1028, 1032, 1033, 1034], "modal": [227, 463, 927], "hypercub": [227, 504], "decent": [227, 258, 368, 978], "handpick": 227, "absenc": [227, 262, 386, 701, 851, 975, 976], "negative_linestyl": 227, "outliers_fract": 227, "n_inlier": 227, "anomaly_algorithm": 227, "blobs_param": 227, "plot_anomaly_comparison": [227, 242], "transfus": 228, "1464": 228, "donat": 228, "confust": 228, "cm_displai": 228, "y_score": [228, 266, 268, 386, 471, 472, 473, 696, 709, 714, 715, 727, 728, 744, 770, 776, 777, 780, 785, 788, 789, 799, 848, 976, 1024, 1032, 1034], "pos_label": [228, 237, 386, 427, 428, 687, 689, 691, 695, 696, 698, 715, 717, 718, 726, 770, 771, 772, 775, 777, 855, 872, 976, 1026, 1030, 1032], "roc_displai": 228, "previs": 228, "precision_recall_curv": [228, 266, 689, 695, 696, 715, 976, 1019, 1020, 1024, 1031, 1032, 1034], "pr_displai": 228, "easlii": 228, "410": [228, 242, 345, 347], "plot_display_object_visu": [228, 242], "summaris": [229, 312], "composit": [229, 312, 362, 365, 403, 647, 776, 966, 972, 985, 1013, 1019], "num_proc": [229, 312], "cat_proc": [229, 312], "feat1": [229, 312, 407], "feat3": [229, 312, 407], "feat0": [229, 312], "feat2": [229, 312, 407], "plot_estimator_represent": [229, 242], "isotonicregress": [230, 967, 1019, 1020, 1021, 1022, 1024, 1026, 1027, 1028, 1030, 1032, 1033, 1034], "ir": [230, 404, 579, 714, 744, 823, 827, 974, 976], "out_of_bound": [230, 624], "y_": [230, 245, 249, 250, 291, 375, 402, 404, 626, 637, 658, 669, 717, 718, 726, 752, 771, 772, 775, 972, 976, 1024], "linearregressionlinearregress": 230, "x_thresholds_": [230, 624, 1030], "y_thresholds_": [230, 624, 1030], "237": [230, 242, 1009], "plot_isotonic_regress": [230, 242], "lemma": [231, 365, 398, 523, 530, 538, 880, 881, 882, 970, 1013, 1021], "johnson_lindenstrauss_min_dim": [231, 988, 1019], "achliopta": [231, 881, 882, 988], "_compon": [231, 525], "geq": [231, 397, 404, 406, 972, 976, 986, 990, 991], "_sampl": [231, 404, 527, 529, 536], "admiss": [231, 360], "eps_rang": 231, "min_n_compon": 231, "nn_sampl": [231, 271], "semilogi": 231, "nn_compon": [231, 232], "100k": 231, "n_components_rang": 231, "rp": 231, "projected_data": 231, "n_byte": 231, "projected_dist": 231, "min_dist": 231, "max_dist": 231, "hexbin": 231, "gridsiz": 231, "271": 231, "jl": [231, 881], "436": 231, "074": [231, 242, 257], "plot_johnson_lindenstrauss_bound": [231, 242], "rbfsampler": [232, 628, 629, 631, 968, 1002, 1022, 1032, 1033], "mont": [232, 409, 600, 630, 631, 968, 981], "fourier": [232, 398, 627, 628, 629, 630, 631, 746, 747, 968], "acceler": [232, 316, 359, 384, 399, 457, 681, 886, 973, 996, 1000, 1027, 1031, 1033], "data_train": [232, 260, 344], "targets_train": 232, "data_test": [232, 260, 344], "targets_test": 232, "kernel_svm": 232, "linear_svm": 232, "feature_map_fouri": 232, "feature_map_nystroem": [232, 628], "fourier_approx_svm": 232, "feature_map": [232, 301], "nystroem_approx_svm": 232, "kernel_svm_tim": 232, "kernel_svm_scor": 232, "linear_svm_tim": 232, "linear_svm_scor": 232, "fourier_scor": 232, "nystroem_scor": 232, "fourier_tim": 232, "nystroem_tim": 232, "feature_map__n_compon": 232, "timescal": 232, "ly": [232, 836, 838, 839, 840, 1022], "flat_grid": 232, "lv_ep": 232, "tab10": [232, 249], "plot_kernel_approxim": [232, 242], "krr": [233, 409, 632, 969], "insensit": [233, 632, 665, 667, 776, 889, 969, 990, 991, 1018], "fifth": [233, 969, 1002], "kr": [233, 259, 1032], "svr_fit": 233, "kr_fit": 233, "sv_ratio": 233, "support_": [233, 338, 458, 463, 582, 583, 591, 890, 891, 892, 893, 894, 991], "y_svr": 233, "svr_predict": 233, "y_kr": 233, "kr_predict": 233, "09999999999999999": [233, 267, 331], "247": [233, 868], "085": 233, "sv_ind": 233, "arithmet": [233, 379, 381, 399, 540, 637, 658, 669, 693, 706, 724, 725, 745, 781, 976, 1026], "test_tim": [233, 344], "train_test_s": 233, "learningcurvedisplai": [233, 261, 316, 971, 1033, 1034], "negate_scor": [233, 791, 807], "score_typ": [233, 261, 274, 791, 807, 1034], "std_display_styl": [233, 261, 791, 807], "get_legend_handles_label": [233, 261, 266], "641": [233, 242], "plot_kernel_ridge_regress": [233, 242], "set_config": [234, 239, 241, 308, 312, 359, 360, 390, 400, 426, 432, 433, 436, 438, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 583, 599, 600, 615, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 1027, 1029, 1032, 1034], "classifiermixin": [234, 373, 375, 386, 403, 1029], "metaestimatormixin": 234, "regressormixin": [234, 375, 386, 454, 1029], "transformermixin": [234, 279, 375, 386, 454, 1026, 1033, 1034], "metadata_rout": [234, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 583, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899], "metadatarout": [234, 426, 819, 820, 821, 822, 935], "methodmap": [234, 933], "get_routing_for_object": 234, "process_rout": 234, "my_group": [234, 390], "my_weight": [234, 390], "my_other_weight": [234, 390], "enable_metadata_rout": [234, 390, 426, 432, 433, 436, 438, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 583, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 1034], "check_metadata": 234, "obj": [234, 393, 556, 557, 935, 936, 937, 942], "print_rout": 234, "get_metadata_rout": [234, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 932, 934, 935, 936, 976], "_serial": 234, "exampleclassifi": 234, "smart": [234, 432, 448, 449, 579], "accomplish": [234, 375, 397, 535, 973, 977, 979, 1000], "magic": [234, 374, 379, 409, 605, 610, 613], "set_fit_request": [234, 390, 426, 432, 433, 436, 438, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 577, 580, 583, 624, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 679, 785, 788, 789, 799, 820, 821, 823, 824, 825, 826, 827, 833, 853, 854, 867, 868, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899], "set_predict_request": [234, 432, 436, 438, 471, 472, 473, 541, 600, 624, 633, 634, 896, 897, 898, 899], "set_score_request": [234, 390, 426, 432, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 599, 600, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 830, 831, 835, 838, 839, 845, 846, 848, 883, 884, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 976], "inherit": [234, 373, 375, 385, 386, 566, 665, 917, 919, 972, 1018, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1033, 1034], "metaclassifi": [234, 235], "owner": [234, 368, 370, 932, 933], "method_map": [234, 933], "fit_param": [234, 386, 422, 426, 431, 434, 454, 521, 523, 525, 526, 528, 531, 532, 538, 556, 558, 559, 571, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 617, 619, 624, 627, 628, 629, 630, 631, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 819, 820, 821, 822, 832, 837, 840, 844, 847, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 880, 881, 936, 1025, 1028, 1029, 1030, 1032, 1034], "metadatarequest": [234, 413, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 933, 935], "request_rout": 234, "validate_metadata": 234, "routed_param": [234, 936], "route_param": 234, "caller": [234, 400, 635, 636, 641, 649, 650, 651, 670, 878, 879, 934, 944, 952, 953, 954, 1027], "predict_param": [234, 454, 556, 557, 848, 1031], "object_nam": [234, 933, 936], "method_nam": [234, 936], "silent": [234, 407, 570, 844, 986, 1023, 1024, 1026, 1027, 1031, 1032], "bug": [234, 311, 312, 313, 314, 315, 316, 362, 371, 375, 376, 378, 381, 384, 386, 994, 997, 1018, 1019, 1020, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "notabl": [234, 301, 367, 386, 485, 716, 861, 973, 975, 979, 1022, 1025, 1032], "metaclassifiermetaclassifi": 234, "exampleclassifierexampleclassifi": 234, "typeerror": [234, 314, 378, 700, 912, 960, 1025, 1026, 1029, 1031], "got": [234, 266, 355, 378, 540, 638, 654, 1031, 1033], "sample_weight1": 234, "sample_weight2": 234, "aliased_sample_weight": 234, "alia": [234, 374, 377, 381, 386, 426, 432, 433, 436, 438, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 522, 523, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 577, 579, 580, 583, 599, 600, 606, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 679, 785, 786, 787, 788, 789, 792, 794, 799, 803, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 838, 839, 845, 846, 848, 851, 853, 854, 855, 860, 867, 868, 883, 884, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 950, 982, 997, 1018, 1032], "calle": [234, 934], "predict_log_proba": [234, 375, 386, 538, 539, 540, 542, 544, 546, 548, 553, 582, 583, 647, 648, 665, 785, 788, 789, 799, 809, 823, 824, 825, 826, 827, 845, 848, 885, 890, 893, 896, 898, 991, 1018, 1031], "meta_est": 234, "routerconsumerclassifi": 234, "add_self_request": 234, "self_request": 234, "bellow": 234, "clf_sample_weight": 234, "meta_clf_sample_weight": 234, "routerconsumerclassifierrouterconsumerclassifi": 234, "complic": [234, 295, 379, 409, 683, 979], "simplepipelin": 234, "_required_paramet": [234, 375], "transformer_": [234, 454], "child": [234, 344, 353, 360, 384, 386, 390, 399, 406, 431, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 896, 897, 898, 899, 936, 944, 992, 1025], "boilerpl": [234, 375, 1000, 1011], "exampletransform": 234, "set_transform_request": [234, 471, 472, 473, 522, 571, 577, 579, 580, 624, 851, 854, 860, 868], "metaregressor": 234, "weightedmetaregressor": 234, "__metadata_request__fit": 234, "compat": [234, 262, 279, 312, 367, 376, 382, 383, 384, 386, 389, 390, 407, 452, 458, 497, 555, 566, 574, 575, 578, 592, 603, 604, 607, 608, 609, 611, 612, 621, 622, 623, 647, 648, 662, 664, 762, 766, 786, 787, 790, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806, 832, 833, 853, 861, 862, 900, 901, 904, 939, 973, 976, 979, 981, 996, 997, 1000, 1013, 1018, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "exampleregressor": 234, "commun": [234, 366, 372, 376, 378, 381, 386, 389, 399, 406, 527, 529, 536, 681, 699, 860, 966, 973, 979, 986, 990, 994, 996, 1000, 1026, 1027], "vendor": [234, 1023, 1026, 1027], "NOT": [234, 285, 370, 376, 795, 828, 829], "signatur": [234, 344, 345, 368, 477, 478, 546, 547, 553, 554, 583, 599, 600, 648, 662, 664, 700, 730, 791, 807, 810, 812, 815, 861, 936, 965, 1025, 1031], "079": [234, 242, 370], "plot_metadata_rout": [234, 242], "theta_c": [235, 512], "reject": [235, 386, 387, 512, 660, 715, 908, 909, 972, 976, 1026], "likewis": [235, 399, 512], "surround": [235, 373, 834, 982], "cca": [235, 402, 472, 474, 1022, 1026, 1027, 1028, 1030, 1032], "onevsrestclassifi": [235, 266, 268, 277, 397, 816, 818, 888, 1002, 1019, 1020, 1022, 1024, 1025, 1031, 1032], "min_x": 235, "max_x": 235, "plot_subfigur": 235, "min_i": 235, "zero_class": 235, "one_class": 235, "160": [235, 289, 293, 965, 1009], "nfor": 235, "262": [235, 242, 1018], "plot_multilabel": [235, 242], "extratreesregressor": [236, 406, 546, 554, 555, 898, 899, 1021, 1024, 1026, 1027, 1028, 1031, 1032, 1033, 1034], "n_face": 236, "face_id": 236, "n_pixel": [236, 257], "nn": [236, 407, 684, 1009], "y_test_predict": 236, "true_fac": 236, "completed_fac": 236, "plot_multioutput_face_complet": [236, 242], "benchmark": [237, 279, 313, 345, 346, 359, 366, 368, 373, 384, 389, 392, 397, 457, 504, 886], "iforest": 237, "pharuj": 237, "rajborirug": 237, "ra": 237, "kmitl": 237, "ac": [237, 519, 653, 674, 675, 972, 989, 1011], "th": [237, 314, 353, 385, 399, 403, 406, 414, 430, 434, 440, 442, 448, 452, 461, 546, 547, 548, 549, 550, 551, 553, 554, 555, 582, 583, 621, 637, 638, 658, 660, 669, 685, 707, 768, 806, 869, 913, 966, 972, 976, 980, 983, 990, 991, 1033], "preprocess_dataset": 237, "fetch_kddcup99": [237, 368, 1025, 1026, 1027, 1030, 1031], "labelbinar": [237, 268, 386, 729, 817, 852, 861, 872, 977, 1002, 1021, 1022, 1023, 1027, 1032], "dataset_nam": [237, 279], "smtp": [237, 368, 481], "sa": [237, 368, 481], "percent10": [237, 481], "lb": [237, 855, 987], "forestcov": 237, "glass": [237, 368], "wdbc": [237, 370], "cardiotocographi": 237, "tablewar": 237, "x_mal": 237, "y_mal": 237, "x_ben": 237, "y_ben": 237, "x_mal2": 237, "y_mal2": 237, "compute_predict": 237, "negative_outlier_factor_": [237, 286, 834, 982], "datasets_nam": 237, "models_nam": 237, "ceil": [237, 546, 547, 548, 549, 552, 553, 554, 555, 583, 660, 788, 789, 896, 897, 898, 899, 990], "model_idx": 237, "plot_chance_level": [237, 266, 268, 269, 689, 691, 1034], "chance_level_kw": [237, 689, 691, 1034], "plot_outlier_detection_bench": [237, 242], "recalcul": [238, 240, 399, 1015, 1018], "mlpregressormlpregressor": 238, "tree_disp": 238, "mlp_disp": 238, "0x7f64e8f97fa0": 238, "plot_partial_dependence_visualization_api": [238, 242], "deactiv": [239, 367, 371, 374, 379, 389, 400, 788, 789, 1032], "standard_scal": 239, "polynomialfeaturespolynomialfeatur": 239, "pcapca": 239, "svcsvc": [239, 240, 257, 259, 313], "numeric_preprocessor": 239, "imputation_mean": 239, "categorical_preprocessor": [239, 307], "imputation_const": 239, "onehot": [239, 302, 303, 400, 853, 986], "gender": [239, 861, 986], "classifier__n_estim": 239, "classifier__max_featur": 239, "classifier__max_depth": 239, "classifier__criterion": 239, "090": [239, 242, 353, 354], "plot_pipeline_displai": [239, 242], "svc_disp": [240, 311, 1015], "rfc_disp": [240, 311, 1015], "plot_roc_curve_visualization_api": [240, 242], "transform_output": [241, 308, 457, 886, 1033, 1034], "slep018": [241, 375, 1033], "106": [241, 370, 864, 970, 1019], "x_test_scal": 241, "894264": 241, "798301": 241, "271411": 241, "327605": 241, "244466": 241, "086944": 241, "327407": 241, "459074": 241, "660797": 241, "462234": 241, "576989": 241, "159419": 241, "933197": 241, "427329": 241, "414810": 241, "039497": 241, "275851": 241, "scaler2": 241, "x_test_np": 241, "x_test_df": 241, "feature_names_in_": [241, 308, 314, 386, 420, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 616, 617, 618, 619, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 1031, 1032, 1033, 1034], "num_pip": 241, "num_col": 241, "7621951219512195": 241, "log_reg": [241, 315], "config_context": [241, 359, 360, 395, 615, 886, 1025, 1031, 1034], "reset": [241, 355, 381, 523, 665, 666, 667, 828, 829, 857, 858, 868, 1020], "133660": 241, "438059": 241, "894273": 241, "506893": 241, "478": [241, 251], "000619": 241, "182778": 241, "671": [241, 988], "548540": 241, "461032": 241, "817": 241, "487001": 241, "13366001": 241, "4380594": 241, "89427284": 241, "50689261": 241, "00061876": 241, "18277786": 241, "54853974": 241, "46103177": 241, "48700054": 241, "157": [241, 242, 379], "plot_set_output": [241, 242], "auto_examples_miscellan": 242, "bayesiangaussianmixtur": [244, 245, 250, 784, 1024, 1026, 1027, 1031, 1032], "weight_concentration_prior_typ": [244, 250, 783, 975, 1024], "dirichlet_distribut": [244, 783, 975, 1024], "dirichlet_process": [244, 250, 783, 975, 1024], "weight_concentration_prior": [244, 250, 783, 975], "finit": [244, 250, 359, 368, 386, 457, 527, 540, 571, 595, 598, 599, 600, 647, 716, 766, 773, 783, 809, 886, 906, 908, 909, 972, 975, 976, 1000, 1002, 1009, 1025, 1026, 1030, 1032, 1033], "covar": [244, 245, 250], "eig_val": 244, "eig_vec": 244, "unit_eig_vec": 244, "arctan2": [244, 246, 249], "56b4e9": 244, "plot_titl": 244, "weights_": [244, 783, 784, 1032], "covariances_": [244, 245, 246, 249, 250, 783, 784, 1025], "get_xaxi": [244, 289, 301], "set_tick_param": 244, "labelleft": 244, "0072b2": 244, "f0e442": 244, "d55e00": 244, "mean_precision_prior": [244, 250, 783], "nprior": 244, "gamma_0": [244, 250], "reg_covar": [244, 783, 784], "init_param": [244, 247, 250, 783, 784], "concentrations_prior": 244, "546": [244, 251], "plot_concentration_prior": [244, 251], "_base": [245, 375], "268": 245, "color_it": [245, 249, 250], "dp": [245, 250], "shouldn": [245, 250, 373], "em": [245, 246, 250, 432, 436, 448, 525, 783, 784, 975, 1032], "dpgmm": [245, 250, 1018, 1022, 1024], "208": [245, 251, 279, 370], "plot_gmm": [245, 251], "ronweiss": 246, "make_ellips": 246, "datalim": 246, "skf": [246, 403, 804], "train_index": [246, 322, 403, 786, 787, 790, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806], "test_index": [246, 322, 403, 786, 787, 790, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806], "cov_typ": 246, "means_init": [246, 247, 784], "y_train_pr": 246, "train_accuraci": 246, "y_test_pr": 246, "test_accuraci": [246, 260], "216": [246, 251, 989], "plot_gmm_covari": [246, 251], "random_from_data": [247, 783, 784, 975], "diamond": 247, "colour": [247, 370, 407, 576, 977], "walsh": [247, 1030, 1032], "timer": [247, 379], "_samples_gener": 247, "extmath": [247, 323, 344, 382, 442, 1024, 1025, 1028, 1033], "row_norm": 247, "x_squared_norm": [247, 449], "get_initial_mean": 247, "times_init": 247, "relative_tim": 247, "ini": 247, "init_tim": 247, "2fx": 247, "plot_gmm_init": [247, 251], "shifted_gaussian": 248, "stretched_gaussian": 248, "score_sampl": [248, 284, 285, 286, 292, 386, 405, 458, 521, 530, 552, 666, 783, 784, 785, 788, 789, 799, 833, 834, 844, 848, 892, 982, 1021, 1026, 1028, 1030], "plot_gmm_pdf": [248, 251], "component_1": 249, "component_2": 249, "best_parameters_": 249, "gmm_bic_scor": 249, "callabl": [249, 263, 386, 403, 407, 408, 410, 411, 430, 432, 433, 434, 435, 436, 438, 439, 441, 446, 448, 449, 453, 454, 455, 456, 520, 522, 524, 526, 528, 534, 535, 546, 547, 548, 549, 550, 551, 553, 554, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 599, 600, 609, 617, 623, 628, 632, 648, 655, 660, 662, 664, 677, 680, 681, 685, 700, 708, 720, 730, 759, 762, 766, 767, 768, 769, 778, 779, 785, 788, 789, 791, 799, 807, 810, 811, 812, 813, 815, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 852, 861, 883, 884, 890, 891, 892, 893, 894, 937, 943, 946, 960, 965, 976, 986, 1018, 1022, 1025, 1026, 1027, 1028, 1030, 1032, 1034], "0x7f64e9e14a60": 249, "gaussianmixturegaussianmixtur": 249, "param_n_compon": 249, "param_covariance_typ": 249, "829429": 249, "1084": 249, "038689": 249, "1114": 249, "517272": 249, "1148": 249, "512281": 249, "1179": 249, "977890": 249, "catplot": 249, "hue": [249, 259, 282, 306, 370], "eigenvalu": [249, 396, 399, 401, 441, 451, 458, 459, 460, 461, 462, 463, 464, 465, 524, 530, 538, 662, 677, 678, 680, 682, 684, 854, 973, 986, 1020, 1024, 1027, 1028, 1029, 1030], "265": [249, 251, 264, 275, 723, 823, 827, 978], "plot_gmm_select": [249, 251], "loos": [250, 256, 991, 1026], "liberti": 250, "judgment": [250, 976], "panel": [250, 284, 301, 405, 996], "primarili": [250, 264, 373, 386, 395, 399, 934, 1000, 1027, 1028], "covariance_prior": [250, 783], "plot_gmm_sin": [250, 251], "auto_examples_mixtur": 251, "mislabel": [253, 406, 978], "imbal": [253, 262, 403, 696, 717, 718, 726, 771, 772, 775, 776, 976], "misclassifi": [253, 344, 991], "life": [253, 381, 973], "set_printopt": 253, "titles_opt": 253, "plot_confusion_matrix": [253, 275, 311, 1028, 1029, 1030, 1031], "groupkfold": [254, 264, 390, 403, 583, 785, 788, 789, 790, 791, 792, 793, 794, 799, 803, 807, 809, 810, 811, 812, 815, 1006, 1024, 1031], "groupshufflesplit": [254, 403, 1006, 1024], "shufflesplit": [254, 261, 339, 403, 787, 793, 795, 805, 814, 1006, 1018, 1019, 1021, 1023, 1024], "stratifiedgroupkfold": [254, 1031], "stratifiedshufflesplit": [254, 331, 403, 1006, 1018, 1019, 1024, 1025, 1031], "1338": 254, "cmap_data": 254, "cmap_cv": 254, "coolwarm": [254, 328], "n_point": [254, 828, 829], "percentiles_class": 254, "perc": 254, "group_prior": 254, "visualize_group": 254, "yticklabel": [254, 344], "ngroup": 254, "nclass": 254, "plot_cv_indic": [254, 275], "tr": [254, 370, 377, 399, 401, 458, 459, 460, 461, 462, 463, 464, 465, 826], "this_cv": 254, "137": [254, 275, 379, 1019], "195": [255, 269, 275, 482, 483], "plot_cv_predict": [255, 275], "fnr": [256, 687, 715], "det_curv": [256, 687, 770, 777, 976, 1030, 1031], "commonli": [256, 366, 386, 399, 400, 409, 603, 746, 747, 783, 817, 860, 973, 974, 976, 977, 979, 1034], "detcurvedisplai": [256, 314, 715, 1030, 1031], "ax_roc": 256, "ax_det": 256, "feedback": [256, 372, 373, 374, 387, 996, 1026], "plot_det": [256, 275], "n_imag": 257, "print_datafram": 257, "filtered_cv_result": 257, "mean_precis": 257, "std_precis": 257, "mean_recal": 257, "std_recal": 257, "mean_test_precis": [257, 263], "std_test_precis": 257, "mean_test_recal": 257, "std_test_recal": 257, "03f": 257, "refit_strategi": 257, "best_index": [257, 263], "precision_threshold": 257, "high_precision_cv_result": 257, "rank_test_recal": 257, "rank_test_precis": [257, 263], "best_recall_std": 257, "best_recal": 257, "best_recall_threshold": 257, "high_recall_cv_result": 257, "fastest_top_recall_high_precision_index": 257, "idxmin": 257, "854": 257, "061": 257, "039": [257, 739, 769, 976], "780": 257, "905": 257, "889": [257, 301, 309, 426], "890": 257, "073": [257, 460, 461], "695": 257, "743": [257, 1009], "065": [257, 379], "066": [257, 637], "611": [257, 259, 530], "028": [257, 345], "744": [257, 279, 304, 309], "618": 257, "004931": 257, "877206": 257, "069196": 257, "0x7f64e914c4c0": 257, "807": [257, 259], "261": [257, 275], "plot_grid_search_digit": [257, 275], "minimis": [258, 399, 403, 647, 648, 992], "260": [258, 309, 1031], "york": [258, 776, 783, 966, 976, 988], "usa": [258, 368, 885, 966, 973, 988, 989], "best_index_": [258, 263, 785, 788, 789, 799], "wenhao": [258, 1026, 1027], "zhang": [258, 399, 431, 653, 668, 674, 675, 678, 682, 746, 747, 972, 973, 974, 978, 990, 1022, 1023, 1025, 1026, 1027, 1028, 1030], "wenhaoz": 258, "ucla": [258, 972], "lower_bound": 258, "best_score_idx": 258, "best_low_complex": 258, "fewest": [258, 616], "candidate_idx": 258, "param_reduce_dim__n_compon": 258, "plot_grid_search_refit_cal": [258, 275], "moon": [259, 296, 303, 344, 345, 511], "moder": [259, 373, 409, 443, 982], "352": [259, 379], "repeatedstratifiedkfold": [259, 403, 800, 804, 1025], "repetit": [259, 378, 403, 800, 801, 984, 1032], "rank_test_scor": [259, 267, 785, 799, 1024], "rename_axi": 259, "9400": 259, "079297": 259, "9300": 259, "077846": 259, "3_poli": 259, "9044": [259, 1025], "098776": 259, "2_poli": 259, "6852": 259, "169106": 259, "certainti": [259, 375, 730, 976], "repreat": 259, "model_scor": [259, 277], "regex": [259, 346, 453, 455], "_test_scor": [259, 461, 583, 1031], "lineplot": 259, "labelpad": 259, "882561": 259, "783392": 259, "351390": 259, "746492": 259, "298688": 259, "355440": 259, "nadeau": [259, 1026], "bengio": [259, 845, 846, 965, 989], "framework": [259, 359, 375, 384, 386, 393, 399, 626, 677, 783, 972, 973, 980, 994, 997, 1000, 1018, 1024], "diebold": 259, "mariano": 259, "proven": [259, 970, 974, 1000], "replic": [259, 372, 375], "cdot": [259, 396, 399, 404, 405, 409, 603, 604, 608, 611, 612, 854, 968, 970, 976, 980, 986], "sum_": [259, 268, 339, 396, 397, 399, 404, 405, 406, 527, 529, 536, 685, 743, 970, 972, 973, 976, 978, 980, 981, 983, 984, 986, 990, 991, 992], "ij": [259, 289, 396, 399, 404, 527, 529, 536, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 972, 973, 976, 978, 981, 991], "corrected_std": 259, "crossvalid": [259, 273], "corrected_var": 259, "ddof": [259, 868, 879], "compute_corrected_ttest": 259, "t_stat": 259, "p_val": 259, "model_1_scor": 259, "model_2_scor": 259, "ncorrect": 259, "uncorrect": [259, 584, 587], "t_stat_uncorrect": 259, "p_val_uncorrect": 259, "convent": [259, 362, 373, 375, 376, 377, 379, 386, 417, 418, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 458, 459, 460, 461, 462, 463, 464, 465, 497, 498, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 536, 552, 555, 558, 559, 570, 571, 572, 577, 578, 580, 616, 617, 618, 619, 666, 677, 678, 679, 680, 707, 783, 784, 816, 817, 832, 834, 836, 840, 852, 860, 863, 864, 866, 880, 881, 892, 919, 920, 976, 1003, 1018, 1025, 1026, 1029, 1031, 1032, 1034], "benavoli": 259, "colleagu": 259, "conjug": [259, 441, 451, 661, 663, 676, 684, 972], "overlin": [259, 396], "t_post": 259, "ppf": 259, "infin": [259, 530, 671, 672, 701, 809, 895, 907, 979], "minu": [259, 748, 976], "better_prob": 259, "cdf": 259, "773": [259, 344, 637, 826], "essenti": [259, 316, 371, 375, 399, 403, 404, 498, 968, 976, 979, 997, 1000, 1026], "rope": 259, "rope_interv": 259, "rope_prob": 259, "432": [259, 401], "x_rope": 259, "uncertain": [259, 320, 372], "credibl": 259, "cred_interv": 259, "cred_int_df": 259, "000977": 259, "019023": 259, "005422": 259, "025422": 259, "016445": 259, "036445": 259, "bonferroni": 259, "n_comparison": 259, "pairwise_t_test": 259, "model_i": 259, "model_k": 259, "model_i_scor": 259, "model_k_scor": 259, "pairwise_comp_df": 259, "model_1": 259, "model_2": 259, "657": 259, "565": 259, "276": 259, "851": 259, "pairwise_bayesian": 259, "worse_prob": 259, "pairwise_bayesian_df": 259, "018": [259, 461], "882": 259, "187": [259, 379, 573, 977, 1009, 1020], "dietterich": [259, 818, 977], "1998": [259, 368, 370, 404, 406, 544, 545, 818, 823, 854, 977, 978, 980, 986, 990], "bouckaert": 259, "frank": [259, 819, 977, 1023, 1027, 1028], "pacif": 259, "asia": [259, 986], "confer": [259, 368, 399, 404, 410, 428, 433, 439, 500, 524, 552, 685, 697, 714, 744, 844, 845, 846, 976, 982, 988, 992], "discoveri": [259, 368, 379, 382, 399, 406, 408, 410, 433, 500, 544, 545, 552, 581, 584, 585, 587, 588, 589, 595, 709, 728, 771, 976, 988, 1000, 1032, 1033], "corani": 259, "dem\u0161ar": 259, "zaffalon": 259, "accompani": [259, 1026], "1995": [259, 370, 397, 406, 542, 543, 818, 885, 977], "144": [259, 379, 1018], "579": [259, 275, 513], "plot_grid_search_stat": [259, 275], "loader": [260, 323, 344, 366, 367, 368, 487, 488, 497, 996, 997, 1011, 1018, 1023, 1025, 1026, 1029], "fetch20newsgroup": 260, "complementnb": [260, 344, 823, 824, 826, 827, 978, 1026, 1030, 1031, 1033], "tfidfvectorizertfidfvector": 260, "complementnbcomplementnb": 260, "vect__": 260, "clf__": 260, "parameter_grid": 260, "vect__max_df": 260, "vect__min_df": 260, "vect__ngram_rang": [260, 1011], "unigram": [260, 368, 407, 577, 578, 580, 1025], "bigram": [260, 407, 577, 578, 580, 1011], "vect__norm": 260, "clf__alpha": [260, 1011], "exhaust": [260, 311, 312, 313, 314, 315, 316, 359, 370, 378, 385, 394, 399, 785, 788, 789, 799, 878, 879, 881, 972, 1011, 1013], "parallelis": [260, 457, 886, 1025], "random_search": [260, 267], "870": [260, 370], "best_paramet": 260, "get_param": [260, 376, 386, 409, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 965, 1028, 1029, 1030, 1032, 1033], "816": [260, 460, 461], "709": 260, "ambigu": [260, 378, 407, 561, 701, 925, 979, 1027, 1029, 1031], "shorten_param": 260, "xanchor": 260, "yanchor": 260, "autom": [260, 377, 389, 681, 965, 972, 973, 976, 996, 1000], "parallel_coordin": 260, "understood": [260, 373, 399, 1008], "column_result": 260, "transform_func": 260, "fromkei": [260, 903], "ngram_rang": [260, 323, 407, 577, 578, 580], "color_continuous_scal": 260, "viridis_r": 260, "slide": [260, 633, 972, 995, 996], "intersect": [260, 328, 396, 399, 726], "undo": [260, 858, 1022], "979": [260, 275], "plot_grid_search_text_feature_extract": [260, 275], "depict": [261, 406, 975], "ax_idx": 261, "resort": [261, 368, 544, 1028], "learning_curv": [261, 316, 791, 971, 1021, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1033], "return_tim": [261, 812, 1028], "test_scores_nb": 261, "fit_times_nb": 261, "score_times_nb": 261, "test_scores_svm": 261, "fit_times_svm": 261, "score_times_svm": 261, "score_tim": [261, 403, 811, 812], "rapidli": [261, 991, 1000, 1005], "inflect": 261, "plot_learning_curv": [261, 275], "class_likelihood_ratio": [262, 976, 1033], "medicin": [262, 701, 976], "medic": [262, 403, 701, 972, 1000], "truli": [262, 266, 361, 701, 976], "odd": [262, 406, 503, 701, 976, 1025, 1026], "suppos": [262, 319, 359, 360, 375, 379, 401, 406, 407, 408, 546, 550, 553, 647, 648, 655, 657, 663, 664, 665, 730, 834, 888, 890, 893, 896, 898, 914, 980, 1027, 1029], "physiolog": [262, 370, 1009], "hopefulli": [262, 381, 1018], "indirect": [262, 374, 386], "bio": 262, "diagnos": [262, 370, 381, 388, 400], "diagnosi": [262, 370, 835], "pos_lr": 262, "neg_lr": 262, "raise_warn": [262, 701, 962], "positive_likelihood_ratio": [262, 701], "negative_likelihood_ratio": [262, 701], "extract_scor": 262, "test_positive_likelihood_ratio": 262, "test_negative_likelihood_ratio": 262, "718894": 262, "724619": 262, "321091": 262, "054054": 262, "dummyclassifi": [262, 541, 976, 1019, 1021, 1022, 1023, 1025, 1026, 1027, 1028], "108843": 262, "986989": 262, "268147": 262, "034278": 262, "diagnost": [262, 366, 386, 489, 701, 810, 811, 976, 996, 997, 1013], "most_frequ": [262, 540, 616, 619, 838, 966, 976, 1026, 1028, 1030], "undefin": [262, 386, 701, 717, 726, 729, 771, 945, 976, 1026, 1030, 1034], "373333": 262, "5557": 262, "235430": 262, "stand": [262, 346, 377, 384, 404, 520, 526, 534, 535, 585, 598, 667, 694, 706, 724, 725, 745, 774, 776, 781, 975, 976, 982], "lr_base": 262, "pos_lr_bas": 262, "pos_lr_base_std": 262, "neg_lr_bas": 262, "neg_lr_base_std": 262, "plot_indic": 262, "scoring_on_bootstrap": 262, "n_bootstrap": [262, 1019], "results_for_preval": 262, "bootstrap_indic": 262, "default_rng": 262, "2039": 262, "507943": 262, "113516": 262, "207667": 262, "009778": 262, "3419": 262, "445329": 262, "125197": 262, "198280": 262, "008907": 262, "422287": 262, "123864": 262, "192630": 262, "006340": 262, "6196": [262, 1023], "410507": 262, "163975": 262, "193761": 262, "005864": 262, "7578": [262, 1025], "335398": 262, "175224": 262, "189120": 262, "005820": 262, "8963": 262, "198284": 262, "238943": 262, "185496": 262, "005020": 262, "band": [262, 303, 986], "422": [262, 275, 582, 583, 714, 744, 976], "plot_likelihood_ratio": [262, 275], "scorer_nam": [263, 785, 799], "predefin": [263, 798, 965, 979, 1006, 1033], "403": [263, 292, 293], "402": 263, "maskedarrai": [263, 1024], "param_min_samples_split": 263, "sample_score_mean": 263, "sample_score_std": 263, "std_": [263, 1023], "rank_test_": 263, "best_scor": 263, "mean_test_": 263, "plot_multi_metric_evalu": [263, 275], "cawlei": [264, 976], "talbot": 264, "mach": [264, 397, 403, 582, 583], "2079": 264, "2107": 264, "007581": 264, "007833": 264, "num_trial": 264, "x_iri": [264, 1010], "y_iri": [264, 1010], "p_grid": 264, "non_nested_scor": 264, "nested_scor": 264, "leaveoneout": [264, 403, 1006], "leaveonegroupout": [264, 403, 786, 793, 794, 1006, 1024], "inner_cv": 264, "outer_cv": 264, "non_nest": 264, "score_differ": 264, "211": [264, 302, 309, 316, 322, 864, 876], "non_nested_scores_lin": 264, "nested_lin": 264, "difference_plot": 264, "plot_nested_cross_validation_iri": [264, 275], "permutation_test_scor": [265, 403, 1018, 1025, 1030], "plant": [265, 268, 269, 366, 976, 1013], "uncorrel": [265, 369, 517, 523, 530, 976, 1009], "n_uncorrelated_featur": 265, "x_rand": 265, "undergo": 265, "score_iri": 265, "perm_scores_iri": 265, "pvalue_iri": 265, "n_permut": [265, 403, 813], "score_rand": 265, "perm_scores_rand": 265, "pvalue_rand": 265, "evid": [265, 344, 381, 399, 403, 404, 406, 633, 783, 975], "ndata": 265, "destroi": [265, 407, 781, 857, 986], "ojala": [265, 403, 813], "garriga": [265, 403, 813], "plot_permutation_tests_for_classif": [265, 275], "t_p": 266, "plu": [266, 370, 378, 668, 819, 822, 977, 990], "f_p": 266, "f_n": 266, "denomin": [266, 407, 412, 464, 579, 693, 745, 970], "stairstep": 266, "ap": [266, 696, 697, 976], "sum_n": [266, 696, 976], "r_n": [266, 696, 976], "p_n": [266, 696, 976], "nth": [266, 696, 976], "r_k": 266, "p_k": [266, 976], "trapezoid": [266, 695, 696, 976], "binar": [266, 268, 269, 365, 367, 398, 400, 742, 823, 852, 853, 855, 859, 861, 872, 976, 978, 1002, 1013, 1032, 1034], "average_precision_scor": [266, 695, 697, 730, 770, 776, 976, 1018, 1021, 1025, 1026, 1032, 1034], "differenti": [266, 406, 409, 548, 549, 608, 611], "mt19937": [266, 271, 1029], "0x7f64e868f540": [266, 271], "precisionrecalldisplai": [266, 314, 770, 772, 775, 1028, 1031, 1034], "label_binar": [266, 268, 855, 1022], "average_precis": [266, 689, 696, 730, 976], "prevalence_pos_label": [266, 689], "setup": [266, 268, 359, 371, 375, 379, 381, 979, 1003], "f_score": 266, "extens": [266, 268, 284, 359, 360, 367, 368, 371, 374, 376, 377, 381, 382, 384, 393, 399, 404, 485, 492, 523, 729, 919, 927, 973, 975, 976, 995, 996, 1000, 1018, 1024, 1031, 1032, 1034], "plot_precision_recal": [266, 275], "pose": [267, 972, 1010], "deem": [267, 268, 523, 984, 1031], "993": 267, "01761326452827255": 267, "14458295175799263": 267, "015": [267, 345, 349, 984], "2610311314285183": 267, "003999234857448686": 267, "980": 267, "01672701940764589": 267, "5720620992012775": 267, "996": 267, "6666666666666666": 267, "2222222222222222": 267, "1111111111111111": 267, "n_top": 267, "param_dist": [267, 271, 313], "n_iter_search": 267, "plot_randomized_search": [267, 275], "unambigu": [268, 977, 1024], "notion": [268, 345, 361, 384, 399, 404, 406, 972, 976], "scheme": [268, 284, 307, 308, 368, 386, 399, 403, 405, 407, 555, 579, 647, 648, 694, 798, 855, 856, 859, 861, 865, 869, 872, 877, 888, 893, 965, 972, 986, 990, 1018, 1026, 1029, 1030], "harder": [268, 269, 305, 368, 372, 375, 381, 399, 504, 550, 551, 999], "bulk": [268, 410, 433], "scrutin": 268, "y_onehot_test": 268, "class_id": [268, 269], "class_of_interest": 268, "nvirginica": 268, "versicolor": [268, 269, 493], "tp_c": 268, "fn_c": 268, "fp_c": 268, "tn_c": 268, "briefli": [268, 372, 385, 406, 965, 1028], "nreceiv": 268, "micro_roc_auc_ovr": 268, "mcclish": [268, 776], "deci": 268, "1989": [268, 624, 776, 845, 846, 972, 979], "jul": 268, "fpr_grid": 268, "mean_tpr": [268, 269], "interp": [268, 269, 331], "macro_roc_auc_ovr": 268, "deeppink": 268, "aqua": 268, "role": [268, 359, 372, 384, 404, 994], "pair_list": 268, "pair_scor": 268, "label_a": 268, "label_b": 268, "a_mask": 268, "b_mask": 268, "ab_mask": 268, "a_tru": 268, "b_true": 268, "idx_a": 268, "idx_b": 268, "fpr_a": 268, "tpr_a": 268, "fpr_b": 268, "tpr_b": 268, "macro_roc_auc_ovo": 268, "ovo_tpr": 268, "pool": [268, 384, 434, 624, 945, 997, 1029], "731": [268, 275], "plot_roc": [268, 275], "mean_fpr": 269, "viz": [269, 380], "interp_tpr": 269, "mean_auc": 269, "std_auc": 269, "std_tpr": 269, "tprs_upper": 269, "tprs_lower": 269, "plot_roc_crossv": [269, 275], "halvinggridsearchcv": [270, 271, 313, 568, 789, 965, 1030, 1032, 1033], "1e4": [270, 648, 668, 882, 988], "gsh": 270, "gsh_time": 270, "gs_time": 270, "make_heatmap": 270, "is_sh": 270, "make_cbar": 270, "param_c": [270, 785], "param_gamma": [270, 785, 799], "sh": [270, 377, 381, 965], "scores_matrix": 270, "pivot_t": 270, "aggfunc": 270, "0e": [270, 538, 539], "get_xticklabel": 270, "rotation_mod": 270, "cbar_ax": 270, "537": [270, 275], "plot_successive_halving_heatmap": [270, 275], "rsh": [271, 313], "_distn_infrastructur": 271, "rv_discrete_frozen": 271, "0x7f64cb2bea30": 271, "0x7f64ea9ca4f0": 271, "halvingrandomsearchcvhalvingrandomsearchcv": 271, "params_str": 271, "drop_dupl": 271, "n_resources_": [271, 788, 789, 965], "nn_candid": 271, "n_candidates_": [271, 788, 789, 965], "n_iterations_": [271, 788, 789], "multialign": 271, "836": [271, 275], "plot_successive_halving_iter": [271, 275], "n_samples_train": [272, 890, 891, 892, 893, 894], "n_samples_test": [272, 890, 891, 892, 893, 894, 979, 986], "train_error": 272, "test_error": 272, "i_alpha_optim": 272, "alpha_optim": 272, "0002652948464431897": 272, "233": [272, 275], "plot_train_error_vs_test_error": [272, 275], "nonlinear": [273, 314, 633, 677, 678, 682, 685, 854, 972, 973, 981, 986], "true_fun": 273, "polynomial_featur": 273, "plot_underfitting_overfit": [273, 275], "validationcurvedisplai": [274, 971, 1034], "subset_mask": 274, "isin": 274, "param_rang": [274, 339, 807, 815, 971], "radiu": [274, 286, 331, 370, 399, 431, 439, 677, 752, 769, 828, 829, 830, 831, 832, 836, 838, 839, 840, 842, 979, 1020, 1022, 1032], "718": [274, 275], "plot_validation_curv": [274, 275], "624": [275, 983], "auto_examples_model_select": 275, "yeast": 277, "2417": 277, "103": [277, 279, 368, 406, 486, 544, 545, 1018], "jaccard": [277, 396, 439, 446, 692, 708, 717, 722, 726, 766, 767, 768, 782, 979, 1026, 1027], "adam": [277, 296, 845, 846, 980, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033], "kleczewski": [277, 1025, 1026], "jaccard_scor": [277, 692, 717, 722, 782, 976, 1027, 1030], "classifierchain": [277, 386, 820, 822, 1025, 1030, 1033], "40597": 277, "wrapper": [277, 279, 379, 382, 403, 409, 533, 609, 660, 888, 992, 996, 1022, 1030], "base_lr": [277, 819], "y_pred_ovr": 277, "ovr_jaccard_scor": 277, "y_pred_chain": 277, "chain_jaccard_scor": 277, "y_pred_ensembl": 277, "ensemble_jaccard_scor": 277, "x_po": 277, "plot_classifier_chain_yeast": [277, 278], "auto_examples_multioutput": 278, "kneighborstransform": [279, 281, 311, 840, 979, 1028, 1032, 1033], "nmslib": 279, "pynndesc": 279, "pip": [279, 311, 312, 313, 314, 315, 316, 360, 371, 373, 377, 379, 389, 992], "pynndescenttransform": 279, "csr_matrix": [279, 312, 429, 433, 441, 485, 523, 533, 546, 547, 548, 549, 552, 553, 554, 555, 577, 582, 583, 703, 814, 863, 890, 891, 893, 894, 896, 897, 898, 899, 977, 986, 990, 991, 992, 1033], "nmslibtransform": 279, "sw": 279, "n_samples_fit_": [279, 830, 831, 832, 834, 836, 838, 839, 840], "cosinesimil": 279, "nmslib_": 279, "adddatapointbatch": 279, "createindex": 279, "n_samples_transform": [279, 832, 840], "thread": [279, 312, 315, 371, 384, 386, 399, 406, 820, 821, 942, 943, 944, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1033, 1034], "num_thread": 279, "knnquerybatch": 279, "mnist_10000": 279, "mnist_20000": 279, "20_000": 279, "tsne_param": 279, "barnes_hut": [279, 681, 1025, 1026], "parallel_batch_queri": 279, "msg": [279, 960], "transformer_nam": 279, "longest": 279, "fit_dur": 279, "transform_dur": 279, "315": [279, 370], "823": 279, "884": 279, "769": 279, "733": 279, "759": 279, "numba": [279, 997], "cold": 279, "nearestneighbor": [279, 315, 389, 399, 410, 433, 435, 437, 450, 677, 678, 682, 830, 831, 832, 834, 838, 839, 840, 979, 1018, 1022, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "i_ax": 279, "int32": [279, 308, 373, 386, 432, 436, 438, 440, 442, 890, 891, 892, 893, 894, 941, 991, 1027, 1033, 1034], "828": 279, "994": 279, "brute": [279, 384, 394, 403, 410, 433, 435, 439, 446, 621, 622, 677, 678, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 983, 1013, 1022, 1026, 1030, 1033, 1034], "spent": [279, 307, 374, 379, 812, 1033], "approximate_nearest_neighbor": [279, 293], "slow": [281, 301, 344, 359, 367, 371, 373, 404, 407, 436, 862, 863, 867, 890, 893, 925, 973, 979, 997, 1010, 1025], "temporarydirectori": [281, 311], "n_neighbors_list": 281, "graph_model": 281, "classifier_model": 281, "sklearn_graph_cache_": 281, "tmpdir": [281, 311], "full_model": 281, "classifier__n_neighbor": 281, "grid_model": 281, "991": [281, 293, 976], "plot_caching_nearest_neighbor": [281, 293], "cmap_light": [282, 287, 290], "cmap_bold": [282, 287, 290], "darkblu": [282, 290], "neighbour": [282, 435, 451, 681, 981], "487": [282, 293, 712], "plot_classif": [282, 293], "79269019073225": 283, "kerneldens": [283, 284, 292, 405, 1020, 1026, 1027, 1031, 1032, 1033], "new_data": [283, 375], "4x11": 283, "real_data": 283, "set_clim": 283, "474": [283, 293], "plot_digits_kde_sampl": [283, 293], "block": [284, 301, 315, 368, 370, 373, 378, 381, 386, 396, 399, 402, 405, 441, 442, 451, 462, 468, 469, 477, 478, 500, 502, 684, 944, 979, 981], "wildli": [284, 975], "kd": [284, 399, 405, 979, 1026, 1027, 1028], "jakevdp": [284, 292], "aaaaff": [284, 287], "tophat": [284, 405, 828, 829, 833], "log_den": 284, "x_src": 284, "format_func": 284, "ih": 284, "epanechnikov": [284, 405, 828, 829, 833], "funcformatt": 284, "nullloc": 284, "true_den": 284, "plot_kde_1d": [284, 293], "plot_lof_novelty_detect": [285, 293], "x_inlier": 286, "n_error": 286, "x_score": [286, 471, 472, 473, 474], "legend_handl": 286, "handlerpathcollect": 286, "update_legend_marker_s": 286, "update_from": 286, "set_siz": 286, "handler_map": 286, "update_func": 286, "086": [286, 293], "plot_lof_outlier_detect": [286, 293], "ffaaaa": 287, "aaffaa": 287, "00ff00": 287, "451": [287, 293, 635], "plot_nca_classif": [287, 293], "neighborhoodcomponentanalysi": 288, "dim_reduction_method": 288, "acc_knn": 288, "x_embed": [288, 289, 681, 685, 837, 979], "ntest": 288, "plot_nca_dim_reduct": [288, 293], "logsumexp": [289, 1025], "get_yaxi": [289, 301], "link_thickness_i": 289, "diff_embed": 289, "dist_embed": 289, "einsum": 289, "exp_dist_embed": 289, "relate_point": 289, "pt_i": 289, "pt_j": 289, "plot_nca_illustr": [289, 293], "8133333333333334": 290, "nearestcentroid": [290, 344, 977, 979, 1018, 1022, 1025, 1030, 1033], "shrink_threshold": [290, 835, 979, 1018, 1030], "plot_nearest_centroid": [290, 293], "barycent": [291, 1018], "plot_regress": [291, 293], "geospati": [292, 405], "haversin": [292, 405, 750, 752, 979, 1027, 1030], "latitud": [292, 301, 368, 487, 752], "longitud": [292, 301, 368, 487, 752], "xtrain": 292, "ytrain": 292, "radian": [292, 752], "land_mask": 292, "ball_tre": [292, 410, 433, 439, 446, 677, 678, 830, 831, 832, 833, 834, 836, 838, 839, 840, 979, 1018], "ocean": 292, "plot_species_kd": [292, 293], "454": [293, 345], "auto_examples_neighbor": 293, "combat": [295, 404], "encourag": [295, 331, 372, 373, 384, 991, 996], "lesser": [295, 386, 431, 530, 972], "curvatur": 295, "plot_mlp_alpha": [295, 299], "bfg": [296, 599, 600, 637, 638, 647, 658, 661, 663, 669, 676, 979, 980, 1033], "980000": 296, "096950": 296, "momentum": [296, 845, 846, 980], "049530": 296, "nesterov": [296, 845, 846, 980], "049540": 296, "360000": 296, "978444": 296, "860000": 296, "503452": 296, "504185": 296, "045311": 296, "956038": 296, "243802": 296, "992766": 296, "041297": 296, "993879": 296, "042898": 296, "638843": 296, "855465": 296, "912632": 296, "290584": 296, "909293": 296, "318387": 296, "991653": 296, "045934": 296, "840000": 296, "601052": 296, "940000": 296, "157334": 296, "154453": 296, "500000": 296, "692470": 296, "689143": 296, "689751": 296, "150527": 296, "850000": 296, "341523": 296, "336188": 296, "335919": 296, "689015": 296, "830000": 296, "512595": 296, "513034": 296, "930000": 296, "170087": 296, "schedul": [296, 360, 665, 666, 667, 845, 846, 944, 990, 1000, 1025], "nesterovs_momentum": [296, 845, 846], "invscal": [296, 665, 666, 667, 845, 846, 990], "plot_arg": 296, "plot_on_dataset": 296, "nlearn": 296, "loss_": [296, 548, 845, 846, 980, 1032], "loss_curve_": [296, 845, 846], "data_set": 296, "get_lin": 296, "725": [296, 299], "plot_mlp_training_curv": [296, 299], "28x28": 297, "784": 297, "throw": [297, 382, 907, 1022, 1025, 1026, 1027, 1028, 1032], "infrastructur": [297, 994, 996, 997], "44139186": 297, "19174891": 297, "13983521": 297, "11378556": 297, "09443967": 297, "07846529": 297, "06506307": 297, "05534985": 297, "986429": 297, "953061": 297, "plot_mnist_filt": [297, 299], "greyscal": 298, "bernoulli": [298, 407, 408, 823, 824, 825, 826, 827, 844, 845, 846, 851, 972, 986, 998, 1013, 1018], "bernoullirbm": [298, 845, 846, 981, 986, 1020, 1021, 1030, 1032], "yann": [298, 1018, 1020], "dauphin": [298, 1020], "gabriel": [298, 1026, 1027, 1028, 1031, 1032], "synnaev": 298, "convolv": 298, "minmax_scal": [298, 301, 858, 1023, 1026], "nudge_dataset": 298, "1px": 298, "direction_vector": 298, "apply_along_axi": 298, "feature_rang": [298, 858, 874, 986, 1020, 1030], "cg": [298, 647, 648, 661, 663, 676, 972, 1022, 1023, 1025, 1029, 1031, 1032], "rbm": [298, 844, 845, 846, 981], "rbm_features_classifi": 298, "6000": [298, 616], "raw_pixel_classifi": 298, "181": [298, 379], "207": [298, 1018], "154": [298, 640, 977], "plot_rbm_logistic_classif": [298, 299], "488": 299, "auto_examples_neural_network": 299, "incom": [301, 368, 429], "unscal": [301, 306, 972, 976, 1026, 1032], "unterthin": [301, 1021, 1022, 1023], "medinc": [301, 313, 368], "houseag": [301, 313, 368], "averoom": [301, 313, 368], "room": [301, 368, 378, 399, 999], "avebedrm": [301, 368], "bedroom": [301, 368], "aveoccup": [301, 313, 368], "features_idx": 301, "quantile_rang": [301, 866, 878, 1024], "yeo": [301, 305, 864, 876, 986, 1026, 1032, 1034], "cox": [301, 305, 864, 876, 986, 1026, 1034], "plasma": 301, "plasma_r": 301, "create_ax": 301, "bottom_h": 301, "left_h": 301, "rect_scatt": 301, "rect_histx": 301, "rect_histi": 301, "ax_scatt": 301, "ax_histx": 301, "ax_histi": 301, "ax_scatter_zoom": 301, "ax_histx_zoom": 301, "ax_histy_zoom": 301, "rect_colorbar": 301, "ax_colorbar": 301, "plot_distribut": 301, "hist_nbin": 301, "x0_label": 301, "x1_label": 301, "hist_x1": 301, "hist_x0": 301, "aesthet": [301, 992, 1023], "layout": [301, 384, 888, 889, 890, 893, 909, 991, 1021, 1023], "tick_bottom": 301, "tick_left": 301, "outward": 301, "ec": [301, 519], "make_plot": 301, "item_idx": 301, "ax_zoom_out": 301, "ax_zoom_in": 301, "zoom_in_percentile_rang": 301, "cutoffs_x0": 301, "cutoffs_x1": 301, "non_outliers_mask": 301, "colorbarbas": 301, "OR": [301, 399, 410, 433, 1029], "indistinguish": 301, "quadrant": 301, "plot_all_sc": [301, 309, 857, 858, 860, 864, 865, 866, 868, 873, 874, 875, 876, 877, 878, 879], "straightforward": [302, 372, 404, 1000], "anywher": 302, "qinhanmin2005": 302, "sina": [302, 1031], "rnd": 302, "enc": [302, 304, 315, 861, 862, 986], "x_bin": 302, "line_bin": 302, "plot_discret": [302, 309], "get_nam": 303, "broader": [303, 972], "logisticregression__c": 303, "linearsvc__c": 303, "kbinsdiscretizer__n_bin": 303, "gradientboostingclassifier__learning_r": 303, "svc__c": 303, "cm_piyg": 303, "piyg": 303, "b30065": 303, "178000": 303, "est_idx": 303, "630": [303, 309, 712], "plot_discretization_classif": [303, 309], "centers_0": 304, "centers_1": 304, "x_list": 304, "grid_encod": 304, "stripe": 304, "plot_discretization_strategi": [304, 309], "powertransform": [305, 865, 876, 966, 986, 1026, 1029, 1032, 1034], "johnwon": 305, "weibul": 305, "bimod": [305, 405], "ineffect": [305, 986, 1026, 1027], "eric": [305, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "ericchang2017": 305, "northwestern": [305, 647], "contact": [305, 384, 996], "font_siz": 305, "bc": 305, "qt": [305, 865], "x_lognorm": [305, 986], "x_chisq": 305, "chisquar": 305, "x_weibul": 305, "x_gaussian": 305, "x_uniform": 305, "loc_a": 305, "loc_b": 305, "x_a": 305, "x_b": 305, "x_bimod": 305, "d81b60": 305, "0188ff": 305, "ffc107": 305, "b7a2ff": 305, "2ec5ac": 305, "figaspect": 305, "axes_idx": 305, "axes_list": 305, "x_trans_bc": 305, "lmbda_bc": 305, "lambdas_": [305, 864, 1031, 1034], "x_trans_yj": 305, "lmbda_yj": 305, "x_trans_qt": 305, "ax_origin": 305, "ax_bc": 305, "ax_yj": 305, "ax_qt": 305, "x_tran": [305, 375, 395, 431, 453, 864, 869, 876, 986], "meth_nam": 305, "lmbda": 305, "plot_map_data_to_norm": [305, 309], "involv": [306, 311, 331, 359, 361, 368, 373, 377, 386, 387, 402, 409, 816, 817, 973, 977, 979, 983, 991, 996, 1000, 1009, 1026], "kneighbor": [306, 315, 830, 831, 832, 834, 836, 979, 1022, 1027, 1031, 1032, 1033, 1034], "obatin": 306, "tyler": [306, 1025, 1031, 1032, 1033], "lanigan": [306, 1025], "tylerlanigan": 306, "sebastian": [306, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "raschka": [306, 1023, 1024, 1025, 1026, 1027, 1030], "sebastianraschka": 306, "alcohol": [306, 370], "malic": [306, 370], "acid": [306, 370], "scaled_x_train": 306, "x_plot_scal": 306, "fit_and_plot_model": 306, "scaled_pca": 306, "x_train_transform": [306, 355, 403], "x_train_std_transform": 306, "first_pca_compon": 306, "target_class": 306, "repercuss": 306, "logisticregressioncv": [306, 386, 390, 647, 972, 977, 1022, 1023, 1024, 1026, 1027, 1028, 1032, 1033], "unscaled_clf": 306, "scaled_clf": 306, "y_pred_scal": 306, "y_proba_sc": 306, "0824": 306, "vastli": 306, "461": [306, 309, 379], "plot_scaling_import": [306, 309], "targetencod": [307, 308, 861, 862, 986, 1034], "review": [307, 359, 368, 375, 376, 377, 378, 379, 384, 387, 403, 404, 524, 530, 976, 986, 1003], "wine_review": 307, "42074": 307, "countri": [307, 973], "provinc": 307, "region_1": 307, "region_2": 307, "wineri": 307, "tremend": [307, 406], "variet": 307, "hail": 307, "martha": 307, "vineyard": 307, "235": 307, "napa": 307, "vallei": 307, "cabernet": 307, "sauvignon": 307, "heitz": 307, "spain": 307, "ripe": 307, "aroma": 307, "blackberri": 307, "cassi": 307, "carodorum": 307, "selecci\u00f3n": 307, "reserva": 307, "northern": 307, "toro": 307, "tinta": 307, "bodega": 307, "carmen": 307, "rodr\u00edguez": 307, "watson": [307, 400, 996], "honor": 307, "late": [307, 361], "harvest": 307, "knight": 307, "sonoma": 307, "blanc": 307, "macaulei": 307, "oak": 307, "reserv": [307, 550, 551, 1000, 1002], "oregon": 307, "willamett": 307, "pinot": 307, "noir": 307, "ponzi": 307, "franc": [307, 752], "b\u00e9gude": 307, "aft": [307, 1021], "br\u00fblade": 307, "provenc": 307, "bandol": 307, "one_hot": 307, "max_categori": [307, 315, 861, 862, 986, 1032, 1034], "target_typ": [307, 869, 912, 939], "evaluate_model_and_stor": 307, "rmse_test_scor": 307, "rmse_train_scor": 307, "rmse_test_mean": 307, "rmse_test_std": 307, "rmse_train_mean": 307, "rmse_train_std": 307, "nuniqu": 307, "14810": 307, "1236": 307, "632": 307, "455": [307, 313, 317], "workaround": [307, 373, 785, 799], "high_cardinality_featur": 307, "low_cardinality_featur": 307, "mixed_encoded_preprocessor": 307, "high_cardin": 307, "low_cardin": 307, "mixed_pip": 307, "passthroughpassthroughhigh_cardinalityindex": 307, "targetencodertargetencod": 307, "low_cardinalityindex": 307, "mixed_target": 307, "name_to_color": 307, "rmse_": 307, "_mean": 307, "_std": 307, "explod": 307, "unrel": [307, 360, 378, 381, 407, 504], "plot_target_encod": [307, 309], "targetenocod": 308, "50_000": [308, 345], "n_categori": [308, 824, 862, 986], "kbin": [308, 316], "x_inform": 308, "permuted_categori": 308, "x_shuffl": 308, "catastroph": [308, 751, 997], "x_near_unique_categori": 308, "assembl": [308, 346, 848], "near_uniqu": 308, "raw_model": 308, "0049896314219657345": 308, "00457762158159003": 308, "model_with_cv": 308, "8000184677460285": 308, "7927845601690948": 308, "coefs_cv": 308, "target_encod": 308, "x_train_no_cv_encod": 308, "x_test_no_cv_encod": 308, "model_no_cv": 308, "858486250088675": 308, "6338211367110066": 308, "coefs_no_cv": 308, "385": [308, 309], "plot_target_encoder_cross_v": [308, 309], "auto_examples_preprocess": 309, "announc": [311, 312, 313, 314, 315, 316, 377], "latest": [311, 312, 313, 314, 315, 316, 371, 373, 377, 379, 381, 387, 992, 994, 1032], "upgrad": [311, 312, 313, 314, 315, 316, 389, 997, 1018, 1023, 1026], "conda": [311, 312, 313, 314, 315, 316, 360, 373, 374, 376, 377, 379, 381, 389, 392, 992], "forg": [311, 312, 313, 314, 315, 316, 360, 374, 376, 377, 381, 389], "plot_roc_curv": [311, 1028, 1030], "plot_precision_recall_curv": [311, 1028, 1030, 1031], "stackingclassifi": [311, 355, 406, 557, 1028, 1029, 1030, 1031, 1032, 1033], "_class": [311, 976], "9473684210526315": 311, "radiusneighborstransform": [311, 832, 979, 1028, 1030, 1032, 1033], "sklearn_cache_": 311, "isomap__n_neighbor": 311, "nan_euclidean_dist": [311, 750, 966, 1028], "ccp_alpha": [311, 349, 546, 547, 548, 549, 553, 554, 896, 897, 898, 899, 992, 1028], "tree_": [311, 349, 353, 833, 896, 897, 898, 899], "node_count": [311, 349, 353, 896, 897, 898, 899], "check_estim": [311, 375, 386, 920, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033], "pytest": [311, 360, 371, 373, 375, 376, 389, 392, 919, 920, 1028, 1031], "estimator_check": [311, 375, 386, 1025, 1026, 1028, 1029, 1032, 1033, 1034], "parametrize_with_check": [311, 375, 919, 1028, 1029], "test_sklearn_compatible_estim": [311, 920], "ovo": [311, 776, 816, 890, 893, 976, 977, 991], "preval": [311, 386, 689, 701, 976], "decision_function_shap": [311, 340, 890, 893, 991, 1023, 1024, 1027, 1028], "9918666666666667": 311, "plot_release_highlights_0_22_0": [311, 317], "await": 312, "lam": [312, 313, 1029], "35776189065725783": 312, "42425183539869404": 312, "openmp": [312, 371, 376, 384, 386, 399, 406, 944, 1029, 1031, 1034], "8674374623185609": 312, "10k": [312, 436], "monotoinc": 312, "gbdt_cst": 312, "999791942438998": 312, "plot_release_highlights_0_23_0": [312, 317], "art": [313, 379, 638, 681, 996, 1000], "footprint": [313, 316, 359, 361, 399, 404, 544, 545, 552, 1020, 1023, 1024, 1029, 1030, 1033], "yarowski": [313, 885, 989], "selftrainingclassifi": [313, 322, 323, 324, 989, 1030], "random_unlabeled_point": [313, 883, 884, 885], "self_training_model": [313, 885], "base_estim": [313, 375, 397, 426, 542, 543, 544, 545, 819, 822, 885, 965, 972, 1029, 1031, 1032, 1033, 1034], "selftrainingclassifierselftrainingclassifi": 313, "7354": 313, "linear_baselin": 313, "7137": 313, "decisiontreeregressordecisiontreeregressor": 313, "effort": [313, 373, 379, 996, 1000, 1029, 1031], "plot_release_highlights_0_24_0": [313, 317], "l2_regular": [314, 406, 550, 551], "max_bin": [314, 315, 406, 550, 551], "quantileregressor": [314, 972, 976, 1031, 1032, 1033], "min_": [314, 399, 406, 858, 972, 986, 990, 991, 992], "sum_i": [314, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 967, 968, 972, 974, 976, 981], "pb_q": [314, 972], "_1": [314, 401, 404, 407, 520, 526, 527, 529, 534, 535, 536, 635, 636, 641, 642, 643, 644, 645, 649, 650, 651, 652, 670, 671, 672, 673, 754, 972, 974, 976, 991], "get_feature_nam": [314, 1026, 1027, 1029, 1030, 1031], "pet": [314, 776, 976], "dog": [314, 315, 571, 771, 869, 986], "fish": 314, "pet_cat": 314, "pet_dog": 314, "pet_fish": 314, "plot_": [314, 389], "plot_release_highlights_1_0_0": [314, 317], "x_1d": 315, "hist_quantil": 315, "log_reg_input_featur": 315, "gather": [315, 381, 387, 398, 399, 986, 1000], "min_frequ": [315, 861, 862, 986, 1032, 1034], "rabbit": [315, 986], "snake": [315, 571, 869, 986], "infrequent_categories_": [315, 861, 862, 869, 986], "x0_cat": [315, 986], "x0_rabbit": [315, 986], "x0_infrequent_sklearn": [315, 986], "refactor": [315, 1018, 1020, 1021, 1022, 1028, 1031, 1032, 1033], "radius_neighbor": [315, 836, 838, 839, 840, 1022, 1027, 1028, 1030, 1031, 1032, 1033], "summari": [315, 355, 370, 384, 681, 702, 901, 974, 977, 996, 1011], "pairwise_distances_argmin_min": [315, 767, 1021, 1026, 1032, 1033, 1034], "radiusneighborsclassifi": [315, 830, 831, 836, 839, 977, 979, 1018, 1020, 1024, 1026, 1028, 1030, 1031, 1032, 1033, 1034], "radiusneighborsregressor": [315, 830, 831, 836, 838, 979, 1018, 1020, 1026, 1028, 1030, 1031, 1032, 1033, 1034], "trustworthi": [315, 1026, 1027, 1032, 1033, 1034], "labelpropag": [315, 321, 884, 885, 977, 989, 1019, 1024, 1025, 1028, 1029, 1030, 1032, 1033, 1034], "labelspread": [315, 319, 320, 321, 323, 324, 883, 885, 977, 989, 1019, 1024, 1025, 1028, 1029, 1032, 1033, 1034], "blog": [315, 359, 373, 379, 381, 387, 1029], "cython": [315, 359, 360, 362, 371, 373, 376, 382, 384, 389, 392, 395, 399, 406, 497, 986, 987, 990, 991, 996, 997, 1018, 1021, 1022, 1024, 1030, 1033, 1034], "readili": [315, 404, 992, 1000], "true_w": 315, "true_h": 315, "x_reconstruct": [315, 471, 472, 473, 572], "00364": 315, "divis": [315, 399, 407, 579, 580, 583, 701, 702, 717, 718, 726, 734, 771, 772, 775, 976, 1010, 1022, 1026, 1027, 1030, 1034], "repeatedli": [315, 355, 386, 399, 406, 409, 497, 535, 655, 656, 665, 666, 667, 769, 966, 980, 1006], "bisect_km": 315, "plot_release_highlights_1_1_0": [315, 317], "video": [316, 362, 367, 376, 492, 977, 1000, 1003], "sepal_col": 316, "petal_col": 316, "x_out": [316, 852, 861, 862], "114": [316, 1018], "052506": 316, "592373": 316, "189830": 316, "973554": 316, "416010": 316, "630382": 316, "107": [316, 399, 883, 977, 1020], "765012": 316, "362176": 316, "021849": 316, "788808": 316, "hist_no_interact": 316, "v1": [316, 367, 389, 744, 783, 784, 823, 824, 825, 827, 1030, 1033, 1034], "liac": [316, 367, 373, 485, 1033, 1034], "arff": [316, 373, 485, 1030, 1033, 1034], "ticket": [316, 373], "cabin": 316, "boat": 316, "allen": [316, 1021, 1023, 1025, 1028], "elisabeth": 316, "walton": 316, "24160": 316, "3375": 316, "b5": 316, "loui": [316, 1023, 1024, 1028, 1030, 1032], "mo": [316, 1029], "allison": 316, "hudson": 316, "9167": 316, "113781": 316, "151": [316, 379, 406, 988], "5500": [316, 677, 973], "c22": 316, "c26": 316, "montreal": 316, "pq": 316, "chestervil": 316, "ON": 316, "helen": 316, "lorain": 316, "joshua": [316, 368, 1020, 1021, 1023, 1024, 1030, 1033, 1034], "creighton": 316, "135": [316, 370], "bessi": 316, "waldo": 316, "compliant": [316, 373], "cupi": [316, 395], "gpu": [316, 395, 980, 997, 1011], "changelog": [316, 377, 386], "746": [316, 317, 370], "plot_release_highlights_1_2_0": [316, 317], "auto_examples_release_highlight": 317, "semisupervis": [319, 386], "clai": [319, 320, 321, 324, 1018], "woolam": [319, 320, 321, 324, 1018], "n_total_sampl": [319, 320], "n_labeled_point": [319, 320], "unlabeled_set": 319, "everyth": [319, 355, 377, 379, 384, 453, 931, 996, 997, 1018], "lp_model": [319, 320], "predicted_label": [319, 320], "transduction_": [319, 320, 321, 883, 884, 885], "true_label": [319, 320], "_plot": 319, "0x7f64e804c9d0": 319, "pred_entropi": [319, 320], "label_distributions_": [319, 320, 883, 884, 1029], "uncertainty_index": [319, 320], "image_index": [319, 320], "439": [319, 325], "plot_label_propagation_digit": [319, 325], "max_iter": 320, "______________________________________________________________________": 320, "290": [320, 677, 678, 682, 973], "330": 320, "280": 320, "unlabeled_indic": 320, "transduc": 320, "in1d": [320, 1025], "delete_indic": 320, "183": [320, 379, 977, 1018], "nfit": 320, "delete_index": 320, "610": [320, 325], "plot_label_propagation_digits_active_learn": [320, 325], "label_spread": 321, "labelspreadinglabelspread": 321, "output_label": 321, "output_label_arrai": 321, "outer_numb": 321, "inner_numb": 321, "176": [321, 325, 329, 342, 379, 821, 977, 984], "plot_label_propagation_structur": [321, 325], "breast_canc": 322, "569": [322, 370, 489, 581, 584, 585, 587], "augment": [322, 619, 870, 1000], "oliv": [322, 324, 1026, 1027, 1029, 1030, 1031], "rausch": [322, 324, 1026, 1027, 1030], "rauscho": [322, 324], "ethz": [322, 324], "total_sampl": [322, 525], "base_classifi": [322, 324, 989], "x_valu": 322, "99999": 322, "amount_label": 322, "amount_iter": 322, "self_training_clf": 322, "skfold": 322, "y_test_tru": 322, "labeled_iter_": [322, 885], "return_count": [322, 345, 840], "capsiz": 322, "twinx": 322, "plot_self_training_varying_threshold": [322, 325], "2823": 323, "2117": 323, "761": 323, "1697": 323, "1071": 323, "850": 323, "193": [323, 379, 406, 704, 774, 989], "runtimewarn": 323, "encount": [323, 360, 371, 393, 399, 406, 407, 485, 550, 551, 570, 823, 824, 825, 827, 861, 951, 986, 990, 996, 999, 1000, 1011, 1026, 1029], "matmul": 323, "tfidftransform": [323, 345, 346, 407, 478, 580, 1011, 1025, 1026, 1032, 1034], "sdg_param": 323, "vectorizer_param": 323, "selftrain": 323, "st_pipelin": 323, "ls_pipelin": 323, "eval_and_print_metr": 323, "y_mask": 323, "x_20": 323, "y_20": 323, "plot_semi_supervised_newsgroup": [323, 325], "y_rand": 324, "y_30": 324, "y_50": 324, "ls30": 324, "ls50": 324, "ls100": 324, "st30": 324, "st50": 324, "rbf_svc": [324, 991], "color_map": 324, "974": [324, 325], "plot_semi_supervised_versus_svm_iri": [324, 325], "887": 325, "auto_examples_semi_supervis": 325, "my_kernel": [327, 991], "096": [327, 342], "plot_custom_kernel": [327, 342], "2x2": [328, 399, 742], "230": [328, 342, 573], "plot_iris_svc": [328, 342], "convention": [329, 386, 884], "support_vector_indic": 329, "plot_linearsvc_support_vector": [329, 342], "397": [330, 342, 368], "plot_oneclass": [330, 342], "midpoint": 331, "blink": 331, "act": [331, 344, 373, 385, 405, 406, 702, 717, 718, 726, 771, 772, 775, 863, 867, 973, 976, 979, 991, 1026], "spuriou": [331, 381, 986, 1031, 1032, 1033], "c_rang": 331, "gamma_rang": 331, "midpointnorm": 331, "masked_arrai": [331, 785, 799], "x_2d": 331, "y_2d": 331, "cheat": [331, 980, 990, 1020], "c_2d_rang": 331, "gamma_2d_rang": 331, "bright": 331, "brutal": 331, "plot_rbf_paramet": [331, 342], "plot_separating_hyperplan": [332, 342], "plain": [333, 409, 646, 990], "n_samples_1": [333, 991], "n_samples_2": [333, 991], "clusters_std": 333, "wclf": 333, "wdisp": 333, "surface_": [333, 620], "plot_separating_hyperplane_unbalanc": [333, 342], "blown": 334, "score_mean": 334, "score_std": 334, "plot_svm_anova": [334, 342], "fignum": [335, 336], "plot_svm_kernel": [335, 342], "plot_svm_margin": [336, 342], "unreg": 336, "perpendicular": 336, "yy_down": 336, "yy_up": 336, "nusvc": [337, 359, 891, 977, 991, 1018, 1019, 1020, 1023, 1026, 1028, 1029, 1030, 1032], "482": [337, 342], "plot_svm_nonlinear": [337, 342], "svr_rbf": 338, "svr_lin": 338, "svr_poli": 338, "kernel_label": 338, "model_color": 338, "setdiff1d": 338, "plot_svm_regress": [338, 342], "mathcal": [339, 404, 406, 616, 685, 968, 970, 972, 976, 990, 1031], "omega": [339, 402, 970], "model_l1": 339, "validation_curv": [339, 807, 971, 1025, 1026, 1027, 1030, 1034], "logx": 339, "train_size_idx": 339, "results_sc": 339, "c_scale": 339, "model_l2": 339, "959": [339, 342, 864, 876], "plot_svm_scale_c": [339, 342], "break_ti": [340, 890, 893, 991, 1028], "accent": [340, 577, 578, 580, 1028], "972": [340, 342], "plot_svm_tie_break": [340, 342], "emphasi": [341, 402, 890, 891, 892, 893, 894, 983, 996], "subtl": [341, 355, 975, 997], "plot_decision_funct": 341, "sample_weight_last_ten": 341, "sample_weight_const": 341, "clf_no_weight": 341, "clf_weight": 341, "544": [341, 342], "plot_weighted_sampl": [341, 342], "296": [342, 988], "auto_examples_svm": 342, "size_mb": 344, "utf": [344, 346, 407, 476, 492, 571, 577, 578, 580], "load_dataset": 344, "sublinear_tf": [344, 404, 407, 579, 580], "duration_train": 344, "duration_test": 344, "data_train_size_mb": 344, "data_test_size_mb": 344, "2034": [344, 368], "98mb": 344, "1353": 344, "87mb": 344, "393": 344, "136mb": 344, "7831": 344, "418mb": 344, "ridgeclassifi": [344, 359, 661, 662, 664, 972, 977, 1023, 1027, 1031, 1032, 1033], "sparse_cg": [344, 661, 663, 676, 972, 1019, 1025, 1027, 1028, 1032], "rarer": [344, 346, 407], "deeper": [344, 992], "plot_feature_effect": 344, "average_feature_effect": 344, "top5": 344, "top_indic": 344, "predictive_word": 344, "bar_siz": 344, "y_loc": 344, "keith": [344, 1018, 1023], "atheist": 344, "orbit": [344, 345], "caltech": 344, "expectedli": 344, "pollut": [344, 716, 773, 976, 982], "sender": [344, 368], "livesei": 344, "solntz": 344, "wpd": 344, "sgi": 344, "jon": [344, 1025, 1028, 1029, 1031, 1032], "nntp": [344, 368, 1011], "1qlettinn8oi": 344, "cco": 344, "allan": [344, 397, 1030], "schneider": [344, 1031], "me": 344, "instinct": 344, "happi": [344, 384, 387, 803, 804], "listen": 344, "murder": 344, "voluntari": 344, "disregard": [344, 386, 407, 421, 454, 471, 472, 473, 541, 543, 545, 547, 549, 551, 554, 557, 559, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 710, 711, 712, 773, 821, 822, 831, 839, 846, 857, 858, 864, 865, 868, 873, 876, 877, 879, 889, 891, 894, 897, 899, 976, 1026], "beings": 344, "bahavior": 344, "theirs": 344, "mimicri": 344, "imit": 344, "parrot": 344, "polli": 344, "pulchritud": 344, "anim": [344, 407], "kill": 344, "Or": [344, 353, 403, 404, 861, 976, 982, 990], "sigh": 344, "wonder": 344, "bahaviour": 344, "believ": [344, 345, 381, 384, 1000], "primat": 344, "arbitarili": 344, "poster": [344, 372, 373, 1010], "weren": [344, 862, 1027], "slai": 344, "mate": 344, "ritual": 344, "whatnot": 344, "aren": [344, 368, 377, 389, 398, 714, 744, 981, 1028, 1030], "ye": [344, 381, 386, 855, 872, 972], "gorilla": 344, "dolphin": 344, "platypu": 344, "writer": 344, "launch": [344, 345, 389, 1000], "custom_nam": 344, "clf_descr": 344, "rocchio": [344, 835], "0006": 344, "5316": 344, "0362": 344, "000582": 344, "000803": 344, "0628": 344, "704": 344, "0297": 344, "000603": 344, "0268": 344, "00062": 344, "762": 344, "00272": 344, "00142": 344, "748": [344, 379], "00177": 344, "000489": 344, "779": 344, "training_tim": 344, "txt": [344, 367, 482, 492], "curs": [344, 345, 399, 405, 409, 978, 979, 1005, 1010], "harm": [344, 375, 407, 781], "plot_document_classification_20newsgroup": [344, 347], "discov": [345, 399, 404, 407, 410, 433, 437, 1002, 1033], "category_s": 345, "true_k": 345, "3387": 345, "evaluations_std": 345, "fit_and_evalu": 345, "evaluation_std": 345, "score_valu": 345, "std_score": [345, 1031], "reweight": [345, 386, 401, 406, 579, 580, 637, 658, 669], "collis": [345, 346, 407, 571, 578], "x_tfidf": 345, "405": 345, "7929": [345, 1025], "prod": [345, 610], "phenomenon": [345, 986], "cluster_s": 345, "2050": 345, "711": 345, "446": [345, 409, 714, 744, 976], "485": [345, 685], "1708": 345, "3384": 345, "1887": 345, "311": 345, "1688": 345, "973": [345, 403], "987": 345, "628": 345, "358": 345, "redo": 345, "x_lsa": 345, "explained_vari": [345, 976], "374": 345, "398": [345, 636, 1011], "010": [345, 379, 984], "435": 345, "416": [345, 349, 354, 727, 976], "320": [345, 368, 965, 990, 1018], "019": [345, 370, 379, 460], "030": 345, "minibatch_kmean": 345, "348": 345, "092": 345, "376": [345, 984], "027": [345, 370], "influenti": [345, 1000], "original_space_centroid": 345, "order_centroid": 345, "ve": [345, 373, 407, 999, 1000, 1011, 1025], "shuttl": 345, "bibl": 345, "sparciti": 345, "lsa_vector": 345, "x_hashed_lsa": 345, "392": 345, "437": 345, "413": 345, "328": [345, 718], "043": [345, 379], "367": [345, 406, 1018], "df_std": 345, "speak": [345, 359, 373, 990], "safer": [345, 355, 399, 403, 1018], "plot_document_clust": [345, 347], "18000": [346, 368], "raw_data": 346, "data_size_mb": 346, "3803": 346, "245mb": 346, "anyth": [346, 377, 379, 386, 390, 403, 940, 1032], "unicod": [346, 407, 476, 492, 571, 577, 578, 580, 941, 1018, 1026, 1030], "charact": [346, 373, 378, 386, 407, 492, 497, 498, 577, 578, 580, 900, 981, 1011, 1018, 1031, 1033], "underscor": [346, 375, 386, 960, 1008, 1018, 1028, 1031], "tok": [346, 407], "findal": 346, "token_freq": 346, "dict_count_vector": 346, "47928": 346, "vocabulary_": [346, 407, 570, 577, 580, 1011, 1018], "19145": 346, "n_nonzero_column": 346, "43873": 346, "inact": [346, 367, 373], "47668": 346, "input_typ": [346, 407, 453, 571], "y_po": 346, "downsid": 346, "featureheash": 346, "implicitli": [346, 382, 406, 586, 621, 622, 867, 966, 968, 983, 986, 991], "token_pattern": [346, 407, 577, 578, 580], "728": 346, "47885": 346, "plot_hashing_vs_dict_vector": [346, 347], "auto_examples_text": 347, "parameter": [349, 409, 603, 604, 611, 612, 783, 784, 972, 973, 981, 986, 992], "weakest": [349, 992], "cost_complexity_pruning_path": [349, 896, 897, 898, 899], "drawstyl": [349, 689], "3272984419327777": 349, "plot_cost_complexity_prun": [349, 354], "ryb": 350, "pairidx": 350, "borderpad": 350, "handletextpad": 350, "plot_iris_dtc": [350, 354], "plot_tre": [350, 353, 992, 1027, 1029, 1030, 1031, 1033], "777": [350, 354, 379], "089": [351, 354], "plot_tree_regress": [351, 354], "regr_3": 352, "y_3": 352, "plot_tree_regression_multioutput": [352, 354], "decision_path": [353, 546, 547, 553, 554, 555, 896, 897, 898, 899, 1024, 1029], "children_left": 353, "children_right": 353, "n_node_sampl": 353, "travers": [353, 979, 983], "n_node": [353, 430, 434, 452, 546, 547, 553, 554, 555, 896, 897, 898, 899, 930], "node_depth": 353, "is_leav": 353, "pop": [353, 384, 903, 1006, 1026], "visit": [353, 373, 983], "node_id": [353, 900, 902], "is_split_nod": 353, "children": [353, 399, 406, 430, 434, 452, 555, 1022], "800000011920929": 353, "950000047683716": 353, "node_index": 353, "node_ind": 353, "leaf_id": 353, "sample_id": [353, 368, 486], "threshold_sign": 353, "inequ": [353, 386, 399, 432, 436, 448, 973, 974, 979], "boolean": [353, 368, 373, 375, 382, 400, 406, 407, 408, 453, 550, 551, 570, 571, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 618, 621, 622, 625, 638, 660, 817, 823, 844, 851, 871, 904, 960, 966, 972, 978, 983, 986, 992, 1018, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1033], "common_nod": 353, "common_node_id": 353, "plot_unveil_tree_structur": [353, 354], "auto_examples_tre": 354, "x_test_transform": [355, 403], "standard_norm": 355, "unfair": 355, "x_select": 355, "gbc": 355, "x_train_select": 355, "x_test_select": 355, "tip": [355, 358, 362, 373, 376, 379, 394, 407, 523, 530, 634, 681, 972, 998, 1012, 1013, 1016, 1021], "glossari": [355, 362, 373, 375, 379, 398, 410, 411, 426, 429, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 453, 456, 458, 461, 463, 477, 480, 481, 484, 486, 492, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 572, 573, 583, 591, 596, 597, 599, 600, 616, 621, 623, 628, 629, 630, 631, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 762, 766, 769, 779, 783, 784, 785, 787, 788, 789, 790, 791, 797, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 830, 831, 833, 834, 836, 837, 838, 839, 841, 842, 844, 845, 846, 847, 850, 853, 865, 869, 877, 880, 881, 883, 884, 888, 889, 890, 893, 896, 897, 898, 899, 924, 925, 947, 950, 965, 966, 972, 1002, 1026], "mtrand": 355, "_rand": 355, "85418642": 355, "79084103": 355, "13077794": 355, "11915045": 355, "56479934": 355, "70814003": 355, "25291366": 355, "55212743": 355, "18197458": 355, "37845099": 355, "snippet": [355, 373, 378, 381, 384, 395, 406, 407, 408, 966, 986, 999, 1031], "mutat": [355, 1026], "somewhat": [355, 361, 373, 375, 404, 406, 890, 893, 972, 991, 992], "debug": [355, 360, 374, 376, 379, 386, 388, 616, 887, 942, 996, 1011, 1026, 1030], "govern": [355, 359, 362, 373, 386, 994, 1000], "implic": [355, 373], "rf_123": 355, "rf_inst": 355, "didn": [355, 386, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "strict": [355, 371, 386, 404, 492, 524, 577, 578, 580, 972, 1018, 1027, 1030], "pervas": [355, 373], "throughout": [355, 386, 616, 786, 845, 846, 1002, 1021, 1026], "codebas": [355, 373, 374, 375, 407, 1018, 1024], "unlucki": 355, "lucki": 355, "fairer": 355, "temptat": [355, 373], "throughput": [358, 996, 1013, 1021], "switch": [358, 667, 693, 706, 725, 743, 745, 781, 828, 829, 924, 925, 976, 979, 1013, 1018], "offlin": [359, 373], "bottleneck": [359, 379, 406, 437, 845, 846], "hurt": [359, 523, 1026], "toolkit": [359, 996, 1000], "branch": [359, 371, 373, 376, 377, 399, 406, 431, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 896, 897, 898, 899, 901, 979, 983, 992], "sklearn_assume_finit": 359, "assume_finit": [359, 360, 457, 886], "assert_all_finit": [359, 382, 457], "nm": 359, "csc": [359, 384, 386, 407, 540, 542, 543, 659, 681, 855, 857, 863, 868, 871, 873, 879, 904, 908, 909, 939, 951, 952, 954, 955, 956, 957, 979, 986, 1026, 1027, 1029, 1032], "32bit": [359, 941], "speedup": [359, 404, 406, 639, 643, 646, 1018, 1019, 1020, 1021, 1033], "multithread": [359, 399, 888, 889, 890, 891, 892, 893, 894], "bla": [359, 360, 371, 374, 379, 1018, 1026, 1027, 1029, 1030], "sparsity_ratio": 359, "gbt": 359, "speedi": 359, "packet": 359, "reuter": [359, 368], "carefulli": [359, 404], "spawn": [359, 384, 785, 799, 809, 810, 811, 1029], "gil": [359, 360, 374, 944, 1021, 1026, 1027, 1030, 1031], "ought": 359, "lapack": [359, 360, 371, 521, 524, 530, 677, 1033], "dgemm": 359, "show_vers": [359, 371, 373, 381, 389, 1026], "atla": [359, 371], "rebuild": [359, 393, 407, 431], "openbla": [359, 360, 371, 384, 944, 1031], "mkl": [359, 360, 371, 384, 944, 1018], "veclib": [359, 384], "osx": 359, "nouri": [359, 1019, 1021], "instruct": [359, 373, 374, 375, 376, 377, 378, 381, 384, 385, 492, 577, 578, 580, 1002, 1011, 1018], "ubuntu": [359, 371, 379, 381], "1gb": 359, "mib": [359, 457, 886], "working_memori": [359, 360, 457, 769, 886, 1026], "adher": [359, 375, 386, 919, 920, 1018, 1019], "pairwise_distances_chunk": [359, 766, 1026, 1029], "facilit": [359, 386, 393, 996, 997, 1024, 1027], "moment": [359, 404, 409, 429, 604, 612, 845, 846, 940, 980, 981], "000024": 359, "027400": 359, "mileag": 359, "deploi": [359, 388, 393, 997, 1000], "upstream": [359, 373, 377, 381, 384, 986, 1027], "lighter": [359, 689, 691, 770, 777, 1034], "threadpoolctl": [360, 371, 389, 392], "subsect": [360, 373, 398], "worker": [360, 386, 407, 942, 943, 944, 1033], "14228": 360, "loki": [360, 944, 976, 1026, 1029], "duplic": [360, 372, 373, 386, 399, 410, 433, 437, 438, 504, 624, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 812, 859, 962, 979, 1018, 1021, 1030, 1032, 1034], "memmap": [360, 368, 386, 404, 497, 523, 1026], "1mb": [360, 1023], "parallel_backend": [360, 410, 426, 433, 435, 437, 439, 441, 446, 447, 450, 453, 456, 461, 520, 524, 525, 526, 528, 531, 532, 534, 535, 537, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 583, 591, 599, 621, 623, 628, 636, 640, 642, 644, 646, 647, 648, 650, 652, 654, 655, 657, 665, 668, 677, 678, 679, 680, 681, 682, 683, 762, 766, 769, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 830, 831, 834, 836, 838, 839, 841, 842, 847, 850, 883, 884, 1026], "exclus": [360, 384, 404, 406, 616, 617, 619, 965, 972, 976, 977, 1000, 1025, 1029], "omp_num_thread": 360, "my_script": 360, "algebra": [360, 371, 376, 384, 404, 407, 451, 854, 986], "bli": [360, 371, 384], "mkl_num_thread": 360, "openblas_num_thread": 360, "blis_num_thread": 360, "bash": [360, 381], "zsh": 360, "prompt": [360, 371, 373, 389, 392, 407, 1002], "pypi": [360, 371, 373, 375, 377, 379, 389, 992, 1026, 1030, 1032, 1033], "channel": [360, 368, 371, 384, 389, 407, 482, 483, 572, 573, 575, 576], "subscript": [360, 944, 1031], "max_thread": [360, 374], "n_cpu": [360, 386], "lib": [360, 371, 389, 996], "_num_thread": 360, "singleton": [360, 793, 911, 1031], "aforement": [360, 977], "global_random_se": 360, "fixtur": [360, 373], "build_numb": 360, "disrupt": 360, "config": [360, 373, 374, 381, 615, 1026], "contributor": [360, 376, 377, 378, 381, 384, 386, 976, 994, 997, 1019, 1020, 1021], "watch": 360, "annoi": 360, "test_your_test_nam": 360, "skip": [360, 373, 375, 382, 395, 407, 457, 557, 635, 636, 641, 649, 650, 651, 660, 670, 886, 1011, 1022, 1025, 1028, 1030, 1032, 1034], "global_dtyp": 360, "boundscheck": [360, 374], "segfault": [360, 374, 1018, 1026, 1031], "posix": [360, 384], "pairwisedistancesreduct": 360, "adequ": [360, 379, 556, 1002, 1031], "drive": [361, 404, 405, 406, 538, 990, 1000, 1011], "passiveaggressiveregressor": [361, 972, 1019, 1022, 1025, 1026, 1029, 1031], "maxabsscal": [361, 852, 873, 966, 986, 1023, 1026, 1027, 1028, 1029, 1034], "routin": [361, 367, 370, 373, 374, 375, 376, 381, 384, 386, 408, 661, 663, 676, 890, 891, 892, 893, 894, 973, 979, 986, 987, 990, 996, 1000, 1018, 1032, 1033, 1034], "passiveaggress": [361, 407], "fledg": [361, 407], "naivebay": 361, "dramat": 361, "welcom": [362, 372, 373, 381, 387, 997, 999], "roadmap": [362, 994], "persist": [362, 381, 384, 404, 435, 599, 600, 844, 981, 996, 1013, 1024, 1027], "miscellan": [362, 366, 367, 1024, 1025, 1032, 1033, 1035], "craft": [362, 376], "curat": [362, 373, 376, 377], "fetcher": [366, 1023, 1025], "linnerrud": [366, 1013], "breast": [366, 489, 1013, 1023], "cancer": [366, 489, 582, 583, 835, 1013, 1023], "covertyp": [366, 480, 1013], "rcv1": [366, 486, 1013, 1023], "kddcup": [366, 481, 1013], "svmlight": [366, 476, 497, 498, 996, 1013, 1018, 1019, 1025, 1027], "jpeg": [367, 368, 482, 483], "publish": [367, 368, 375, 377, 381, 386, 988, 997, 1030], "creativ": 367, "spare": [367, 663, 664], "pyplpt": 367, "load_svmlight_fil": [367, 1018, 1019, 1024, 1025, 1026, 1033], "test_dataset": 367, "everybodi": [367, 373], "upload": [367, 371, 377, 384, 660], "mice": [367, 616, 966], "brain": 367, "miceprotein": 367, "1080": [367, 399], "sc": [367, 399], "clara": [367, 1030], "higuera": 367, "katheleen": 367, "gardin": 367, "krzysztof": 367, "cio": 367, "protein": [367, 996], "cite": [367, 399, 994], "kj": [367, 978], "critic": [367, 373, 385, 393, 406, 681, 973, 976, 984, 991, 1000, 1029], "syndrom": 367, "plo": [367, 596, 597], "ONE": [367, 596, 597], "e0129126": 367, "40966": 367, "upload_d": 367, "08t16": 367, "17928620": 367, "file_id": 367, "default_target_attribut": 367, "row_id_attribut": 367, "mouseid": 367, "ignore_attribut": 367, "genotyp": 367, "cc18": 367, "study_135": 367, "study_98": 367, "study_99": 367, "md5_checksum": 367, "3c479a6885bfa0438971388283a1ce32": 367, "websit": [367, 368, 370, 373, 387, 980, 990, 1000, 1011, 1019, 1020, 1021], "4550": 367, "creator": [367, 370], "17t14": 367, "1804243": 367, "pone": 367, "0129126": 367, "openml100": 367, "study_14": 367, "study_34": 367, "earliest": [367, 973], "iris_61": 367, "iris_969": 367, "969": 367, "iris_version_3": 367, "vanschoren": [367, 1030], "rijn": [367, 1026], "bischl": 367, "torgo": 367, "acm": [367, 368, 399, 410, 433, 439, 446, 449, 500, 552, 665, 714, 744, 834, 976, 979, 982, 988], "sigkdd": [367, 368, 500, 665, 869, 986, 988], "newslett": 367, "legaci": [367, 377, 386, 944, 1018, 1025, 1030], "my": [367, 373, 378, 381, 485], "columnar": [367, 453, 996], "usabl": [367, 373, 375, 386, 393, 407, 785, 944, 1018, 1025, 1032, 1033], "io": [367, 370, 371, 373, 377, 379, 381, 386, 387, 393, 681, 996, 1016], "json": [367, 373, 389], "sql": 367, "smoothli": 367, "manipul": [367, 395, 496, 944, 996, 1024], "mat": [367, 407], "load_fil": [367, 368, 1011, 1020, 1032], "audio": [367, 492], "wish": [367, 373, 380, 382, 389, 399, 639, 640, 643, 644, 645, 653, 654, 925, 1003, 1011, 1025], "imageio": 367, "wavfil": 367, "wav": 367, "hdf5": 367, "h5py": 367, "pytabl": 367, "april": [368, 653, 674, 675, 1022, 1030], "1992": [368, 370, 403, 406, 556, 557, 634, 972], "1994": [368, 370, 633], "AT": [368, 484], "laboratori": [368, 996], "cambridg": [368, 404, 579, 823, 827, 972, 974, 978], "facial": 368, "upright": 368, "frontal": 368, "movement": 368, "credit": [368, 381, 406, 972, 1000], "18846": [368, 477, 478], "scikit_learn_data": [368, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488], "20news_hom": 368, "newsgroups_train": 368, "11314": 368, "1073": 368, "20new": [368, 1011], "34118": 368, "01327": 368, "newsgroups_test": 368, "vectors_test": 368, "class_prior": [368, 823, 824, 825, 827, 1019, 1022], "fit_prior": [368, 823, 824, 825, 827], "88213": 368, "suspici": 368, "show_top10": 368, "top10": 368, "affili": 368, "abund": 368, "clue": [368, 381, 973], "bare": [368, 973, 1011], "quotat": 368, "77310": 368, "76995": 368, "cleveland": 368, "indian": 368, "leagu": 368, "team": [368, 376, 384, 386, 994, 996, 1000, 1018], "ohio": 368, "spark": [368, 997], "death": 368, "floyd": [368, 677, 973], "reckon": 368, "coloni": 368, "paul": [368, 1021, 1024, 1025, 1026, 1027, 1031, 1032], "dolan": 368, "nicknam": 368, "tribe": 368, "theme": [368, 1018], "mlb": [368, 859], "inappropri": [368, 403, 409, 698, 806], "nlp": [368, 404, 407, 823, 827, 974, 1000], "cultur": 368, "inflammatori": 368, "famou": [368, 370, 991], "internet": [368, 378, 986, 1009], "offici": [368, 375, 386, 389, 482, 486, 996, 1011, 1026, 1027, 1030], "verif": [368, 976, 1000], "identif": [368, 373, 486, 965, 1003], "viola": [368, 1026], "opencv": 368, "detector": [368, 386, 834], "5749": [368, 482, 483], "13233": [368, 482, 483], "5828": [368, 482, 483], "200m": 368, "lfw_home": 368, "rectangular": [368, 386, 925, 997], "1140": 368, "fetch_lfw_pair": [368, 1023, 1033], "lfw_pairs_train": 368, "subdivid": [368, 409], "10_fold": [368, 482], "gari": [368, 1025], "huang": [368, 647, 1024, 1029], "manu": 368, "ramesh": [368, 1000, 1021, 1024, 1028], "tamara": 368, "berg": [368, 1019, 1020, 1030], "erik": [368, 1000, 1021], "miller": [368, 1026, 1027, 1031], "massachusett": 368, "amherst": 368, "30m": 368, "seven": [368, 969], "homepag": [368, 519, 992], "581012": [368, 480], "newswir": 368, "ltd": [368, 1000], "804414": [368, 486], "47236": [368, 486], "fetch_rcv1": [368, 1023, 1027], "v2": [368, 486, 653, 674, 675, 972], "chronolog": [368, 486], "23149": [368, 486, 1032], "781265": [368, 486], "lyrl2004": [368, 486], "2286": 368, "810596": 368, "2287": 368, "2288": 368, "uint32": [368, 486], "gmil": 368, "381327": 368, "ccat": 368, "e11": 368, "ecat": 368, "m11": 368, "656": 368, "lewi": [368, 1025, 1029], "yang": [368, 399, 404, 523, 628, 1024, 1025, 1028, 1030, 1031, 1032], "rose": 368, "361": [368, 406, 544, 545], "cup": [368, 976], "tcpdump": 368, "darpa": 368, "intrus": 368, "mit": [368, 379, 399, 409, 599, 600, 603, 608, 611, 632, 655, 656, 665, 825, 969], "lincoln": 368, "inject": [368, 406], "attack": 368, "unrealist": 368, "logged_in": 368, "resp": [368, 406, 586, 783, 784, 990, 1026], "4898431": [368, 481], "976158": 368, "699691": 368, "619052": 368, "95373": 368, "kddcup99": [368, 481], "richard": [368, 408, 647, 1019, 1028, 1030, 1032, 1033], "lippmann": 368, "hain": 368, "jonathan": [368, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1034], "korba": 368, "da": [368, 1033, 1034], "yamanishi": 368, "takeuchi": 368, "william": [368, 370, 409, 599, 600, 603, 608, 611, 628, 976, 980, 1025, 1026, 1027, 1028, 1033, 1034], "miln": 368, "discount": [368, 399, 714, 744, 1025, 1028], "sixth": 368, "press": [368, 399, 404, 409, 410, 433, 579, 599, 600, 603, 608, 611, 632, 823, 827, 969, 972, 974, 978], "household": 368, "statlib": 368, "dcc": 368, "ltorgo": 368, "cal_hous": 368, "1990": 368, "censu": 368, "bureau": 368, "resid": 368, "vacat": 368, "pace": 368, "kellei": [368, 1020, 1021], "ronald": [368, 980, 1021, 1031], "barri": [368, 1026], "autoregress": 368, "291": [368, 370], "hyperspher": [369, 996], "interleav": [369, 511], "simplif": [369, 372, 378, 1018, 1024], "realiti": 369, "make_sparse_uncorrel": 369, "make_friedman1": [369, 406, 528, 532, 582, 583, 621], "make_friedman2": [369, 600, 602, 603, 604, 605, 606, 610, 613, 614], "reciproc": [369, 976], "make_friedman3": 369, "7826": 370, "4194": 370, "9490": 370, "9565": 370, "fisher": [370, 406, 493, 625, 996], "donor": 370, "michael": [370, 397, 399, 439, 617, 626, 680, 783, 966, 972, 1000, 1011, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1032, 1033], "marshal": 370, "arc": [370, 406], "juli": [370, 408, 722, 869, 986, 1021, 1025, 1026, 1027], "1988": 370, "sir": 370, "referenc": [370, 373, 375, 381, 386, 880, 881, 979, 1025, 1031], "duda": [370, 970], "hart": [370, 970, 1026], "taxonom": 370, "annual": [370, 399, 714, 744, 885, 976, 989], "eugen": [370, 1019, 1024], "179": [370, 379, 406, 1018], "1936": 370, "john": [370, 407, 525, 697, 723, 757, 863, 890, 891, 893, 894, 966, 972, 976, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1031, 1033, 1034], "wilei": [370, 966], "1950": [370, 976], "1973": [370, 397], "scene": [370, 979, 981, 1031], "q327": 370, "d83": 370, "son": [370, 966], "isbn": [370, 399, 972], "471": 370, "22361": 370, "218": [370, 460, 704, 774], "dasarathi": 370, "1980": 370, "nose": [370, 1021, 1025], "pami": [370, 399, 713], "gate": [370, 1031], "1972": 370, "431": 370, "mlc": 370, "cheeseman": 370, "autoclass": 370, "conceptu": [370, 406, 974], "alpaydin": 370, "boun": 370, "nist": [370, 976], "bitmap": 370, "preprint": 370, "32x32": 370, "nonoverlap": 370, "4x4": [370, 404, 407], "garri": 370, "candela": 370, "dimmick": 370, "geist": 370, "grother": 370, "janet": 370, "handprint": 370, "nistir": 370, "5469": 370, "kaynak": 370, "msc": 370, "graduat": 370, "bogazici": 370, "cascad": 370, "kybernetika": 370, "ken": [370, 1011, 1020, 1027], "tang": [370, 1028, 1029, 1030], "ponnuthurai": 370, "suganthan": 370, "yao": [370, 1024, 1025, 1026, 1027, 1034], "kai": [370, 552, 982, 1025], "dimensionalityreduct": 370, "nanyang": 370, "technolog": 370, "claudio": [370, 1032, 1033], "gentil": [370, 1030], "linnerud": [370, 494], "men": 370, "club": 370, "waist": 370, "puls": 370, "chin": [370, 1022], "situp": 370, "tenenhau": 370, "pratiqu": 370, "alcalin": 370, "magnesium": 370, "phenol": 370, "nonflavanoid": 370, "proanthocyanin": 370, "od280": 370, "od315": 370, "dilut": 370, "class_2": [370, 499], "162": 370, "278": [370, 828, 829], "1680": 370, "chemic": 370, "grown": [370, 406, 542, 543, 544, 545, 546, 547, 553, 554, 896, 897, 898, 899, 992], "itali": 370, "cultiv": 370, "thirteen": 370, "constitu": 370, "forina": 370, "parvu": 370, "pharmaceut": 370, "food": 370, "technologi": [370, 399, 996, 1000], "brigata": 370, "salerno": 370, "16147": 370, "genoa": 370, "lichman": 370, "irvin": 370, "ca": [370, 399, 431, 896, 897, 988, 992], "aeberhard": 370, "cooman": 370, "vel": 370, "rep": [370, 996], "dept": 370, "cook": [370, 1018, 1024], "north": [370, 399], "queensland": 370, "submit": [370, 371, 372, 375, 376, 377, 378, 381, 386, 387], "technometr": [370, 401, 458, 463, 982], "rda": 370, "1nn": 370, "THE": 370, "OF": 370, "chemometr": 370, "perimet": 370, "textur": [370, 746, 747, 974], "concav": 370, "symmetri": [370, 861, 864, 876, 974], "fractal": 370, "malign": [370, 489], "benign": [370, 489], "143": [370, 460, 461, 988, 1018, 1019], "2501": 370, "427": [370, 495, 496, 572, 573], "873": 370, "4254": 370, "071": [370, 426], "664": 370, "wolberg": 370, "nick": [370, 1018, 1024, 1025, 1026, 1027], "olvi": 370, "mangasarian": 370, "goo": 370, "gl": 370, "u2uwz2": 370, "needl": 370, "aspir": [370, 373], "fna": 370, "nuclei": 370, "multisurfac": 370, "msm": 370, "bennett": [370, 976], "midwest": 370, "cognit": 370, "societi": [370, 399, 401, 458, 463, 530, 616, 864, 876, 972, 990], "insepar": 370, "uw": [370, 1030], "ftp": [370, 671, 672], "wisc": [370, 883], "prog": 370, "cpo": 370, "nuclear": 370, "tumor": 370, "spie": 370, "1993": [370, 463, 653, 674, 675, 992], "symposium": [370, 399, 449], "861": [370, 776, 777, 976], "san": [370, 407, 988], "jose": [370, 647, 976, 1026, 1028], "prognosi": 370, "570": [370, 1009], "august": [370, 399, 500, 523, 991, 1018, 1020, 1021, 1025, 1032], "272": [371, 389, 391, 392], "wheel": [371, 373, 377, 389, 1028, 1030, 1032], "quickest": 371, "registri": [371, 389], "uninstal": 371, "git": [371, 375, 377, 379, 381, 999, 1014, 1018], "fork": [371, 373, 377, 381, 384], "miniforge3": [371, 381], "miniforg": [371, 381, 389], "env": [371, 381, 389], "virtualenv": [371, 373], "python3": [371, 389], "venv": [371, 389], "pep517": [371, 373], "dev0": [371, 377, 999, 1014], "pyx": [371, 373, 374, 379, 381], "pxd": [371, 373], "sklearn_fail_no_openmp": 371, "checkout": [371, 373, 377, 381], "cumbersom": 371, "reinstal": [371, 389], "setuptool": 371, "unix": [371, 407], "makefil": 371, "studio": [371, 1000], "vs_buildtool": 371, "desktop": 371, "screenshot": 371, "secondli": [371, 384, 399, 406, 646, 972, 1011], "architectur": [371, 375, 381, 384, 389, 393, 457, 886, 980, 994, 1000, 1018], "cmd": 371, "powershel": 371, "struct": [371, 386, 1021], "calcsiz": 371, "distutils_use_sdk": 371, "x86": 371, "buildtool": 371, "vc": 371, "vcvarsal": 371, "bat": 371, "x64": 371, "clang": [371, 374], "confusingli": 371, "usr": 371, "gcc": [371, 374, 379, 384], "libomp": [371, 1030], "silicon": [371, 994], "m1": [371, 994], "januari": [371, 373, 389, 1018, 1019, 1028, 1030, 1033], "arm64": [371, 376, 389], "llvm": 371, "toolchain": 371, "xcode": 371, "conflict": [371, 373, 377, 381, 389, 1025, 1026], "condarc": 371, "channel_prior": 371, "reactiv": [371, 379], "echo": [371, 377], "cxx": 371, "cflag": 371, "cxxflag": 371, "ldflag": 371, "subfold": [371, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 1031], "fopenmp": [371, 374], "export": [371, 374, 375, 389, 393, 900, 901, 992, 996, 999, 1027], "cppflag": 371, "xpreprocessor": 371, "wl": 371, "rpath": 371, "lomp": 371, "sudo": [371, 389], "apt": [371, 381, 389], "pip3": 371, "pythonx": 371, "site": [371, 373, 376, 381, 389, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 1000, 1026], "precompil": 371, "arm": [371, 373, 381, 965], "cython3": 371, "cento": 371, "yum": 371, "devel": 371, "gnu": 371, "port": [371, 389, 1028], "pkg": 371, "build_ext": [371, 379], "build_clib": 371, "linker": [371, 374], "sysconfig": 371, "counterpart": [371, 965, 973, 991, 1006], "get_config_var": 371, "sklearn_build_parallel": 371, "tracker": [372, 376, 381, 384, 387, 389, 393, 994, 997], "prioriti": [372, 621, 816, 817, 997, 1021], "guidelin": [372, 376, 378, 379, 381, 398, 399, 406], "reformul": 372, "xyz": 372, "someestim": 372, "glanc": 372, "relabel": [372, 803, 804, 885], "stall": [372, 376], "sprint": [372, 373, 994, 1018], "unfinish": [372, 373], "supersed": [372, 1023], "overflow": [372, 381, 384, 1021, 1025, 1026, 1027, 1028, 1029, 1031], "submitt": 372, "strive": [372, 387, 1000], "expertis": [372, 373, 384], "unclear": [372, 373, 490], "pleasant": [372, 1000], "chime": 372, "permiss": [372, 377, 387, 389, 1000, 1033], "matthew": [372, 378, 525, 731, 1018, 1021, 1025, 1027, 1031, 1032], "rocklin": [372, 378], "acknowledg": [372, 598], "struggl": [372, 387, 399], "everyon": [373, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "underrepres": 373, "merit": [373, 377, 387], "teach": 373, "priceless": 373, "abid": 373, "codeofconduct": 373, "hesit": 373, "typo": [373, 387, 390, 1018], "send": [373, 399, 411, 522], "valuabl": [373, 966, 1000], "burden": [373, 860, 997], "slep": [373, 386, 994], "templat": [373, 377, 378, 386, 387, 546, 547, 552, 553, 554, 555, 996], "ecosystem": [373, 966, 995, 1000], "contrib": [373, 375, 381, 384, 386, 399, 996, 997, 1034], "numpydoc": [373, 386, 389, 392], "compli": [373, 386, 919, 997], "fulfil": [373, 399, 406, 785, 788, 789, 799, 848, 852, 972], "anyon": [373, 387, 1000], "gist": [373, 381, 999], "repo": [373, 377, 997], "feasibl": [373, 857, 858, 868], "traceback": [373, 378, 381, 384, 457, 999], "doubt": [373, 374, 377, 972, 982, 996], "companion": [373, 986], "transcript": 373, "inclus": [373, 375, 381, 439, 445, 742, 774, 976, 977, 1018, 1032], "yourlogin": 373, "ruff": [373, 389, 392], "mypi": [373, 377, 389, 392, 1029], "synchron": [373, 407], "my_featur": 373, "commit": [373, 377, 381, 999, 1018, 1019, 1020, 1021], "modified_fil": 373, "committ": [373, 1018], "modif": [373, 402, 406, 407, 435, 989], "approv": [373, 387, 406], "mrg": [373, 381], "incomplet": [373, 389, 399, 694, 781, 966, 973, 1011, 1022, 1024], "wip": [373, 381, 389], "matur": [373, 996, 997], "broad": [373, 386, 996], "collabor": 373, "_logist": 373, "doctest": [373, 386, 1003, 1018], "test_logist": [373, 381], "rst": [373, 377, 381, 1011, 1018, 1023], "test_common": [373, 381], "caught": [373, 381, 393], "submodul": [373, 377, 379, 398, 968, 974, 1018], "intricaci": 373, "narr": [373, 386, 647, 888, 893, 1018, 1019], "unittest": 373, "tests_for_packag": 373, "static": [373, 375, 379, 381, 635, 636, 641, 642, 649, 650, 651, 652], "astropi": 373, "linux": [373, 375, 376, 381, 996, 1018], "gh": 373, "lint": [373, 381], "nogil": [373, 374], "cpython": [373, 374, 379, 1033], "pyodid": 373, "sklearn_run_float32_test": 373, "lengthi": [373, 384], "etiquett": 373, "she": [373, 878, 879, 1028], "he": [373, 714, 744, 845, 846, 878, 879, 976, 1011, 1025, 1032, 1033], "shorten": [373, 991, 1031], "leader": [373, 1000], "grab": 373, "familiar": [373, 405, 1026], "acquaint": 373, "experienc": 373, "abandon": 373, "someon": [373, 377, 386, 1018], "glad": 373, "restructuredtext": 373, "some_param": 373, "hello": [373, 381, 937], "goodby": 373, "liter": [373, 377, 1000], "array_paramet": 373, "list_param": 373, "typed_ndarrai": 373, "multioutput_arrai": 373, "bracket": [373, 972], "delimit": [373, 982, 1033], "colon": 373, "selectfpr": [373, 408, 581, 584, 587, 588, 589, 595, 1034], "incorpor": [373, 400, 406, 975, 996, 1000], "defer": 373, "backtick": [373, 378], "nowadai": 373, "dropdown": 373, "syntax": [373, 378, 381, 400, 457, 886, 965, 1002, 1029, 1031], "pragmat": 373, "bibliograph": 373, "arxiv": [373, 451], "_my": 373, "ref": [373, 380, 381, 966, 1024], "currentmodul": 373, "succeed": 373, "editor": [373, 381, 384], "_build": 373, "viewabl": 373, "pillow": [373, 389, 392], "sphinxext": [373, 389, 392], "opengraph": [373, 389, 392], "vast": 373, "examples_pattern": 373, "your_regex_goes_her": 373, "no_mathjax": 373, "latexpdf": 373, "stone": [373, 896, 897, 992], "subdirectori": 373, "subpackag": [373, 377, 994, 1022, 1027], "cleanup": [373, 1018], "charg": 373, "test_requiring_mpl_fixtur": 373, "hang": [373, 999, 1028, 1029], "fruit": [373, 977], "asv": 373, "asv_benchmark": 373, "airspe": 373, "veloc": 373, "publicli": [373, 1028], "zero_on": [373, 1019], "example_funct": 373, "exampleestim": 373, "_n_cluster": 373, "versionchang": 373, "meet": [373, 384, 387, 408, 561, 592, 845, 846, 885, 976, 989, 1000, 1026, 1027, 1028], "nit": 373, "retract": 373, "grammar": 373, "disambigu": [373, 816, 885, 989, 1033], "Will": [373, 486, 523, 616, 633, 634, 635, 641, 645, 646, 649, 650, 651, 652, 653, 654, 662, 664, 696, 703, 776, 853, 857, 861, 867, 868, 1021, 1022, 1024, 1026], "clariti": [373, 381], "unhelp": 373, "extran": 373, "rewritten": [373, 638, 1020, 1022], "generos": 373, "reward": 373, "heard": 373, "enemi": 373, "courtesi": 373, "justifi": [373, 379, 397, 554], "occas": 373, "deserv": [373, 379], "digest": [373, 1033], "overwhelm": 373, "sheer": [373, 1000], "myself": 373, "trickiest": 373, "buri": 373, "mixin": [373, 386, 414, 415, 416, 417, 418, 420, 421, 422, 590, 919, 1020, 1029, 1033], "grep": 373, "delai": [373, 485, 785, 799, 809, 810, 944, 1032, 1033], "some_funct": [373, 915], "some_iter": 373, "flavor": [373, 979], "pointer": [373, 381, 431, 1027], "mandatori": [373, 407], "favorit": [373, 384, 1000], "Being": [373, 387, 393, 972, 979], "killer": [373, 1000], "blame": 373, "migrat": [373, 1018], "ignorerevsfil": 373, "rev": [373, 596, 597], "ruin": 373, "maco": [374, 376, 389, 1026, 1030, 1032], "sklearn_enable_debug_cython_direct": 374, "scratch": [374, 431, 976, 1020], "gdb": [374, 376, 999], "entrypoint_to_bug_reproduc": 374, "cdef": 374, "state_to_print": 374, "test_val": 374, "unifi": [374, 382, 384, 385, 406, 626, 996, 1018], "fuse": [374, 1024, 1034], "ongo": [374, 387], "concret": [374, 387, 408, 657, 663, 664, 665, 666, 880, 881, 972, 990], "shell": [374, 381, 384, 1002, 1011], "cythonx": 374, "language_level": 374, "wraparound": 374, "initializedcheck": 374, "nonecheck": 374, "cdivis": 374, "recompil": [374, 379, 389], "pep073": 374, "pathwai": 374, "memoryview": 374, "cnp": 374, "lightweight": [374, 785, 799, 809, 810, 996], "virtual": [374, 389, 403, 1000], "enter": [374, 377, 399, 431, 983], "prang": 374, "void": 374, "my_func": [374, 379], "st\u00e9fan": 374, "benhel": 374, "_cython_bla": 374, "protect": [374, 377, 942], "_openmp_help": 374, "cimport": [374, 382, 1026], "omp_get_max_thread": 374, "prolifer": 375, "adopt": [375, 386, 884, 976, 990, 1026, 1033, 1035], "predomin": [375, 1019], "overrid": [375, 407, 435, 439, 446, 531, 537, 577, 578, 580, 582, 583, 586, 645, 653, 674, 675, 791, 807, 830, 831, 832, 834, 836, 838, 839, 840, 1018, 1026, 1028, 1032, 1034], "creation": [375, 500, 501, 502, 504, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 645, 828, 829, 1000, 1025, 1026, 1027, 1031], "optimis": [375, 399, 979, 996, 1021, 1031, 1033], "param1": [375, 1008], "param2": [375, 1008], "param3": 375, "postpon": [375, 377], "requisit": 375, "liner": [375, 814], "ipython": [375, 378, 379, 381, 1003, 1011], "session": [375, 379, 384, 389, 995, 1000, 1011], "trainabl": 375, "trail": [375, 960], "overridden": [375, 386, 409, 531, 537, 605, 610, 613, 683, 1026, 1027], "n_features_in_": [375, 386, 420, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 616, 617, 618, 619, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 1029, 1031, 1033], "slep010": [375, 1029], "duck": [375, 386, 1028], "check_x_i": [375, 382, 1022, 1026, 1027, 1032], "check_arrai": [375, 382, 457, 523, 886, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "templateclassifi": 375, "demo_param": 375, "myestim": 375, "subestim": 375, "my_extra_param": 375, "my_estim": [375, 400], "subestimator__c": 375, "subestimator__class_weight": 375, "subestimator__du": 375, "subestimator__fit_intercept": 375, "subestimator__intercept_sc": 375, "subestimator__l1_ratio": 375, "subestimator__max_it": 375, "subestimator__multi_class": 375, "subestimator__n_job": 375, "subestimator__penalti": 375, "subestimator__random_st": 375, "subestimator__solv": 375, "subestimator__tol": 375, "subestimator__verbos": 375, "subestimator__warm_start": 375, "__c": 375, "__class_weight": 375, "unpack": 375, "easiest": [375, 381, 400, 973], "__repr__": [375, 997, 1027], "setattr": 375, "deepcopi": 375, "__sklearn_clone__": [375, 423, 1034], "frozen": 375, "frozentransform": 375, "fitted_transform": [375, 453], "__getattr__": 375, "_estimator_typ": [375, 386, 1023], "clustermixin": [375, 1035], "is_classifi": [375, 386], "programmat": [375, 488, 1027], "_get_tag": [375, 1029], "allow_nan": [375, 907, 909, 1034], "array_api_support": [375, 395], "binary_onli": [375, 1028, 1029], "multioutput_onli": 375, "no_valid": 375, "non_determinist": [375, 1032], "primari": [375, 386, 404, 504, 983, 1000], "_safe_split": 375, "preserves_dtyp": 375, "poor_scor": 375, "requires_fit": 375, "requires_positive_x": [375, 1028, 1033], "requires_i": [375, 1029], "requires_positive_i": 375, "_skip_test": 375, "_xfail_check": 375, "check_nam": 375, "xfail": [375, 381], "skiptestwarn": 375, "x_type": 375, "2darrai": 375, "signifi": [375, 399, 570, 796, 981], "1dlabel": 375, "2dlabel": 375, "_more_tag": 375, "mymultioutputestim": 375, "ridgeregress": 375, "idiosyncrat": 375, "subclass": [375, 409, 563, 942, 1023, 1026, 1031], "onetoonefeaturemixin": [375, 422], "classnameprefixfeaturesoutmixin": [375, 422, 1033], "auto_wrap_output_kei": 375, "mytransform": 375, "__init_subclass__": 375, "ownership": 375, "pep8": [375, 377, 381], "indent": [375, 942], "nsampl": [375, 783, 784], "statement": [375, 378, 381, 384, 386, 404, 994, 1011], "flow": 375, "client": 375, "corollari": 375, "foo": [375, 570, 980], "baz": [375, 570], "pyflak": 375, "asanyarrai": 375, "hadamard": 375, "choose_random_sampl": 375, "freestand": 375, "unmodifi": [375, 386], "random_state_": [375, 525, 616, 837, 1032], "gaussiannois": 375, "showcas": 375, "quasi": [375, 845, 846, 972], "assert_allclos": 375, "rtol": [375, 828, 829, 833], "atol": [375, 661, 663, 828, 829, 833], "checklist": 376, "unclaim": 376, "workflow": [376, 377, 385, 403], "boil": [376, 401], "markdown": 376, "saniti": [376, 852, 976, 1018, 1019], "outdat": 376, "diff": [376, 976], "valgrind": 376, "platform": [376, 384, 386, 387, 393, 1000, 1023, 1026, 1027, 1029, 1031, 1032], "x86_64": [376, 389], "yep": 376, "gperftool": 376, "debugg": [376, 381], "gprof": 376, "callgrind": 376, "kcachegrind": 376, "warm": [376, 386, 520, 526, 532, 534, 535, 599, 642, 648, 655, 657, 665, 666, 667, 972, 997, 1028, 1030, 1032], "homebrew": [376, 389], "freebsd": 376, "rrrcn": 377, "pep101": 377, "build_tool": 377, "blocker": 377, "mileston": 377, "maint_tool": 377, "sort_whats_new": 377, "whats_miss": 377, "fixm": [377, 386], "feedstock": 377, "recip": [377, 973, 1000], "yaml": 377, "whats_new": [377, 381], "v0": [377, 460, 461, 467, 501, 577, 578, 580, 785, 799, 847, 850, 1019, 1026, 1027, 1028], "freez": [377, 389, 393, 997, 1000, 1026], "0rc1": [377, 1014], "__version__": 377, "draft": [377, 387], "rebas": 377, "bugfix": [377, 1018, 1032], "backport": [377, 382, 1025], "maint": 377, "enh": 377, "blindli": 377, "invit": 377, "cherri": 377, "shortlog": 377, "f2": [377, 977], "sed": [377, 1018], "front": [377, 1025], "rc1": 377, "suffix": [377, 811, 976, 1028], "brows": 377, "3a": 377, "22wheel": 377, "pyproject": 377, "toml": 377, "oldest": [377, 485], "abi": 377, "acronym": 377, "deliveri": 377, "whl": 377, "22publish": 377, "went": [377, 976], "bot": [377, 981, 1032], "sync": 377, "testpypi": 377, "tarbal": [377, 1033], "wheelhouse_upload": 377, "twine": 377, "rrr": 377, "symlink": 377, "latestst": 377, "tmp": 377, "ln": [377, 972, 980, 986], "versionwarn": 377, "secur": [377, 386, 996, 997, 1000, 1013], "twitter": 377, "linkedin": 377, "squash": [377, 409, 520, 526, 531, 537], "authorship": 377, "permalink": 377, "_hist_gradient_boost": 377, "_iter": 377, "pickl": [377, 386, 393, 407, 577, 578, 580, 828, 829, 996, 997, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034], "checker": [377, 808], "type_check": 377, "test_enable_hist_gradient_boost": 377, "enable_hist_gradient_boost": [377, 1027], "enable_my_experimental_featur": 377, "indefinit": 377, "incentiv": 377, "workabl": 378, "stackoverflow": [378, 381, 384, 999], "blogpost": 378, "mcve": [378, 381, 384], "my_data": 378, "with_mean": [378, 868, 879, 986, 1026, 1031], "default_scor": 378, "other_scor": 378, "scrollbar": 378, "tripl": 378, "fenc": 378, "qualifi": 378, "a674e682c281": 378, "lda_featur": 378, "lda_model": 378, "n_topic": [378, 525, 1025], "minimalist": [378, 407, 999], "continuous_featur": 378, "positive_featur": 378, "invest": [379, 1000], "idiom": 379, "crunch": 379, "performancetip": 379, "reimplement": [379, 386, 1024, 1028], "spottabl": 379, "amen": [379, 409, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 965], "cpp": 379, "engag": [379, 387], "tent": 379, "somewher": [379, 976, 1011], "prun": 379, "14496": [379, 1027], "682": 379, "ncall": 379, "tottim": 379, "percal": 379, "cumtim": 379, "lineno": 379, "042": 379, "_nls_subproblem": 379, "1263": 379, "_po": 379, "057": [379, 526], "_initialize_nmf": 379, "_spars": 379, "_neg": 379, "hotspot": 379, "16159": [379, 1029], "2833": 379, "653": [379, 600, 603, 614], "_dotbla": 379, "651": 379, "036": [379, 461], "1397": 379, "2780": 379, "1542": 379, "2734": 379, "fromnumer": 379, "1185": 379, "lapack_lit": 379, "dgesdd": 379, "rewrit": [379, 992, 1010, 1018], "shallow": [379, 406, 550, 551, 903], "4x": [379, 1033], "line_profil": 379, "wire": [379, 523, 530], "profile_default": 379, "ipython_config": 379, "terminalipythonapp": 379, "interactiveshellapp": 379, "lprun": 379, "qtconsol": 379, "_nmf": 379, "73153": 379, "h_init": 379, "138": [379, 406, 409, 976], "5863": 379, "172": [379, 482, 483, 638, 972], "nl": 379, "173": [379, 573], "112141": 379, "2336": 379, "wtv": 379, "16144": 379, "wtw": 379, "113": [379, 1021], "638": 379, "1880": 379, "195133": 379, "305": 379, "grad": [379, 1000], "495761": 379, "proj_gradi": 379, "2449": 379, "130": 379, "1474": 379, "4474": 379, "inner_it": 379, "83833": 379, "hn": 379, "194239": 379, "191": [379, 977], "48858": 379, "150407": 379, "gradd": 379, "515390": 379, "349": 379, "dqd": 379, "pin": 379, "memory_profil": [379, 389, 392], "memit": 379, "mprun": 379, "1e7": 379, "402344": 379, "standalon": [379, 647, 888, 999], "bianp": 379, "conda_prefix": 379, "pydebug": 379, "extra_cflag": 379, "dpy_debug": 379, "num_cor": 379, "dbg": 379, "fortun": [379, 406, 1011, 1031, 1032], "my_fil": 379, "callgrin": 379, "prof": 379, "encapsul": [380, 400, 413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899], "artist": [380, 427, 621, 687, 689, 690, 691, 791, 807, 902], "classmethod": [380, 427, 620, 621, 686, 687, 689, 690, 691, 791, 807], "line_": [380, 427, 687, 689, 690, 691, 791, 807], "gridspecfromsubplotspec": 380, "subplot_spec": 380, "get_subplotspec": 380, "ax_top_left": 380, "ax_top_right": 380, "ax_bottom": 380, "bounding_ax_": [380, 621], "lines_": [380, 621, 791, 807], "contours_": [380, 621], "advic": [381, 409, 611, 612], "forth": 381, "userscript": 381, "tampermonkei": 381, "greasemonkei": 381, "shortcut": [381, 409], "pr_number": 381, "navig": [381, 1020], "overlai": [381, 621], "codecov": 381, "test_sparsifi": 381, "pdb": 381, "ipdb": [381, 1011], "pdbcl": 381, "terminalpdb": 381, "lf": 381, "ff": 381, "tb": [381, 560, 561, 562, 563, 564, 565, 566, 567], "runxfail": 381, "werror": 381, "mailman": 381, "listinfo": 381, "crowd": [381, 387, 973, 997, 999], "imped": 381, "attent": [381, 596, 597, 990], "pytb": 381, "stdin": [381, 1011], "perman": 381, "25163598": 381, "issuenumb": 381, "1506": 381, "volunt": 381, "establish": [381, 384, 387, 966], "clarifi": [381, 387, 779], "regression_test": 381, "0008": 381, "patienc": [381, 386], "manifest": [381, 973, 979], "fault": [381, 1026, 1028, 1030], "glibc": 381, "uniniti": 381, "trace": [381, 399, 412, 462, 464, 465, 468, 469, 470, 678, 682, 973, 1029], "supp": 381, "readm": [381, 407, 482], "my_test_script": 381, "mobil": 381, "deploy": [381, 996, 997, 1000], "scalewai": 381, "aw": 381, "graviton": 381, "laptop": [381, 457, 886, 1032, 1033, 1034], "workstat": 381, "qemu": 381, "docker": [381, 393, 1031, 1032], "multiarch": 381, "ppc64le": 381, "filesystem": [381, 389, 1031], "pushd": 381, "wget": 381, "aarch64": [381, 389], "arm64v8": 381, "mount": 381, "privileg": 381, "pwd": 381, "reinit": 381, "bashrc": 381, "ephemer": 381, "evolv": [382, 1033], "as_float_arrai": 382, "column_or_1d": [382, 1029, 1033], "multitarget": 382, "multi_output": [382, 908], "safe_index": [382, 1028], "check_memori": [382, 386, 1025], "5488135": 382, "71518937": 382, "60276338": 382, "54488318": 382, "has_fit_paramet": 382, "randomized_range_find": [382, 1019, 1024], "arrayfunc": 382, "cholesky_delet": 382, "min_po": 382, "least_angl": 382, "fast_logdet": 382, "safe_sparse_dot": [382, 1028], "weighted_mod": 382, "sample_without_replac": [382, 1024], "n_popul": [382, 945], "sparsefunc": [382, 1031], "mean_variance_axi": [382, 1024, 1031], "sparsefuncs_fast": 382, "inplace_csr_row_normalize_l1": 382, "inplace_csr_row_normalize_l2": 382, "inplace_csr_column_scal": 382, "sort_graph_by_row_valu": [382, 1033], "single_source_shortest_path_length": 382, "dijkstra": [382, 677, 973], "graph_shortest_path": [382, 1031], "all_estim": [382, 1028, 1029, 1033], "all_displai": [382, 1033], "all_funct": [382, 1033], "is_multilabel": 382, "dict_learn": [382, 520, 526, 535, 1019, 1026, 1028, 1031, 1032, 1034], "gen_batch": [382, 929], "safe_mask": 382, "safe_sqr": 382, "murmurhash3_32": 382, "murmurhash3_x86_32": [382, 941], "cryptograph": 382, "lookup": [382, 941, 1027], "bloom": [382, 941], "384616559": 382, "3910350737": 382, "murmurhash": 382, "graphical_lasso": [382, 460, 461, 1026, 1034], "kit": 384, "toolbox": [384, 996, 1000], "multilay": [384, 974], "kera": [384, 996], "forese": 384, "redesign": [384, 1018], "pystruct": [384, 996], "ssvm": 384, "seqlearn": 384, "4143": 384, "meanwhil": [384, 991], "pipegraph": 384, "squared_loss": [384, 1031], "undertak": 384, "discourag": [384, 389, 678], "slowli": [384, 386, 533, 925], "ordinarili": [384, 386], "corrobor": 384, "proof": [384, 406, 882, 988], "road": 384, "bridg": [384, 973, 996], "reproduct": [384, 972, 999], "guidanc": [384, 409], "gitter": [384, 994, 1025, 1026], "value_kei": [384, 903], "levenshtein": 384, "dna": [384, 617, 966], "rna": 384, "pain": 384, "suppli": [384, 399, 635, 908, 909, 979, 1000, 1022, 1024, 1026, 1031], "leven": 384, "acctcctagaag": 384, "acctactagaagtt": 384, "gaatattaggccga": 384, "lev_metr": 384, "multiprocess": [384, 386, 942, 944, 979, 1018, 1026, 1032], "exec": 384, "nvidia": 384, "cuda": [384, 395], "reiniti": 384, "culprit": 384, "refus": [384, 878, 879], "forkserv": 384, "joblib_start_method": 384, "set_start_method": 384, "dozen": [385, 409], "newli": [385, 406, 452, 983, 1024, 1025, 1033], "leakag": [385, 386, 400, 1013], "disclos": 385, "entail": [385, 866, 868, 990], "r_squar": 385, "searchcv": [385, 1033], "tacit": 386, "inconsist": [386, 393, 407, 497, 498, 565, 890, 893, 912, 982, 991, 1013, 1018, 1023, 1024, 1025, 1026, 1028, 1031, 1033, 1034], "elsewher": [386, 451, 452, 460, 461, 467], "formal": [386, 387, 399, 406, 828, 829, 973, 976, 977, 980], "thereof": 386, "transduct": [386, 399, 883, 884, 997], "position": 386, "serial": [386, 932, 996, 997, 1013, 1018, 1026, 1030], "unpickl": [386, 393, 565, 828, 829, 1024, 1030, 1034], "pep257": 386, "nuanc": 386, "flaw": [386, 406], "terminologi": [386, 1026], "est1": [386, 621], "est2": [386, 621], "exemplifi": 386, "_score": [386, 785, 799, 811, 976, 1018, 1031], "_loss": [386, 976], "divers": [386, 406], "abstract": [386, 404, 409, 607, 757, 996, 1018], "notfittederror": [386, 837, 960, 1022, 1024, 1027, 1028, 1034], "descriptor": [386, 497, 498], "hoc": 386, "spectral_embed": [386, 973, 1019, 1022, 1024, 1026, 1028, 1031, 1032, 1033], "maxabs_scal": [386, 857, 1026], "astrai": 386, "readthedoc": [386, 387], "entireti": 386, "shield": 386, "n_output": [386, 406, 416, 421, 422, 426, 431, 434, 454, 458, 471, 472, 473, 521, 523, 525, 526, 528, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 571, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 617, 619, 622, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 659, 661, 662, 663, 664, 665, 667, 668, 710, 711, 716, 733, 734, 736, 738, 739, 741, 742, 773, 776, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 835, 837, 838, 839, 844, 845, 846, 847, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 880, 881, 883, 884, 888, 889, 890, 891, 893, 894, 896, 897, 898, 899, 914, 947, 976, 977, 992, 1025, 1028], "n_target": [386, 402, 471, 472, 473, 474, 513, 545, 600, 632, 635, 636, 639, 640, 641, 642, 643, 645, 646, 649, 650, 651, 652, 653, 654, 660, 661, 662, 663, 664, 670, 671, 672, 673, 674, 675, 676, 977, 1030, 1032, 1034], "synonym": [386, 830, 831, 832, 838, 839, 840], "themat": 386, "alphanumer": [386, 577, 578, 580], "statistician": [386, 868], "prescrib": 386, "baggingclassifi": [386, 406, 545, 898, 966, 1021, 1024, 1025, 1026, 1029, 1033, 1034], "estimator__max_depth": [386, 965], "improp": [386, 1025], "pairwise_kernel": [386, 409, 441, 632, 753, 854, 974, 1018, 1025], "distancemetr": [386, 405, 979, 1026, 1030, 1031, 1032], "di": [386, 399, 404, 520, 526, 653, 674, 675, 881, 1022, 1031], "vectori": [386, 1028], "noun": 386, "venu": [386, 999], "broadli": [386, 399], "consolid": [386, 387, 1018], "coo": [386, 542, 543, 681, 855, 904, 908, 909, 979, 1019], "lil": [386, 542, 543, 855, 904, 930, 979], "csgraph": [386, 1031], "absent": [386, 407, 742, 809], "densifi": [386, 404, 647, 648, 655, 657, 665, 666, 667, 888, 966, 1020], "lossili": 386, "unnorm": [386, 525, 973, 1024, 1025], "encompass": [386, 439, 445, 544, 545, 973], "is_regressor": 386, "get_n_split": [386, 786, 787, 790, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806], "estimatorcv": [386, 997], "loo": [386, 793, 1029], "type_of_target": [386, 855, 869, 977, 1032, 1033], "hashabl": [386, 856, 859, 987], "labelencod": [386, 558, 862, 987, 1018, 1026, 1033], "canonic": 386, "xxx": 386, "everywher": 386, "multilabelbinar": [386, 817, 852, 861, 977, 1002, 1021, 1023, 1024, 1026, 1027], "nonetheless": [386, 976], "wherein": 386, "amber": 386, "return_cov": [386, 556, 557, 600, 848], "test_idx": 386, "_idx": 386, "label1": 386, "label2": 386, "class_label": [386, 546, 550, 553, 647, 648, 655, 657, 663, 664, 665, 896, 898, 914, 991], "bincount": [386, 403, 546, 550, 553, 647, 648, 655, 657, 663, 664, 665, 888, 890, 893, 896, 898, 913, 914, 1025], "rebalanc": 386, "compute_class_weight": [386, 1021, 1032], "check_cv": [386, 1023], "obei": [386, 974], "triangl": [386, 404, 432, 436, 448, 974, 979], "concurr": [386, 407, 942, 1030, 1032], "unset": [386, 1026], "get_scor": [386, 721, 1025], "check_scor": 386, "uppercas": [386, 1031], "unavail": [386, 647, 648, 937, 1025, 1031], "deadlock": 387, "meritocrat": 387, "somebodi": 387, "unanim": 387, "emeritu": [387, 994], "recant": 387, "outreach": 387, "brand": [387, 389], "social": [387, 399, 1000], "strateg": 387, "entiti": [387, 714, 744], "duti": 387, "resign": 387, "occasion": [387, 715, 1027], "escal": 387, "fallback": [387, 389, 816, 817, 976], "hereaft": 387, "lazi": [387, 407, 990, 1022], "opinion": 387, "slep020": 387, "veto": 387, "appeal": 387, "revis": [387, 659], "slep000": 387, "insuffici": [388, 975, 1010], "afraid": 389, "64bit": [389, 1018], "miniconda": 389, "administr": 389, "venvpython": 389, "venvsourc": 389, "activatesourc": 389, "activatesklearn": 389, "activatepip": 389, "learnpip": 389, "learnpip3": 389, "learnconda": 389, "installedpython3": 389, "virtualenvpython3": 389, "installedpython": 389, "virtualenvpython": 389, "installedconda": 389, "environmentpython": 389, "dnf": 389, "pacman": 389, "raspberri": 389, "polar": [389, 392, 1011], "pyarrow": [389, 392], "copybutton": [389, 392], "lock": [389, 392, 942, 944], "19137": 389, "py3": 389, "apk": 389, "bind": [389, 1018, 1025, 1026], "buster": 389, "fedora30": 389, "pkgsrc": 389, "py39": 389, "intelex": [389, 996], "oned": 389, "sklearnex": 389, "plugin": 389, "appdata": 389, "usernam": 389, "windowsapp": 389, "oserror": [389, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487], "errno": 389, "pythonsoftwarefound": 389, "7_qbz5n2kfra8p0": 389, "localcach": 389, "python37": 389, "data_nam": 389, "australian": 389, "data_vers": 389, "lift": 389, "regedit": 389, "menu": 389, "hkey_local_machin": 389, "currentcontrolset": 389, "longpathsen": 389, "broken": [389, 403, 588, 589, 624, 709, 904, 976, 992, 1021, 1025, 1026, 1027, 1029, 1032], "set_": 390, "_request": 390, "weighted_acc": 390, "sample_weigh": 390, "router": [390, 933, 934, 935, 936], "sel": [390, 408], "scoring_weight": 390, "fitting_weight": 390, "hasn": 390, "retrain": [393, 997, 1034], "inconsistentversionwarn": [393, 1034], "simplefilt": 393, "model_from_prevision_vers": 393, "original_sklearn_vers": [393, 565], "untrust": 393, "malici": 393, "unsupport": [393, 482, 1026, 1031], "inadvis": 393, "immut": 393, "snapshot": [393, 548, 549, 997], "portabl": 393, "alex": [393, 407, 991, 1018, 1021, 1026, 1028, 1029, 1030, 1032, 1033, 1034], "gaynor": 393, "sio": 393, "get_untrusted_typ": 393, "unknown_typ": 393, "exchang": [393, 999], "markup": 393, "pmml": [393, 996], "onnx": [393, 996, 997], "xml": 393, "sklearn2pmml": [393, 996], "affero": 393, "gplv3": 393, "datastructur": [395, 1026, 1030], "namespac": 395, "array_api": 395, "x_np": 395, "y_np": 395, "x_cu": 395, "y_cu": 395, "devic": [395, 403, 571], "array_api_dispatch": [395, 457, 886], "_estimator_with_converted_arrai": 395, "transfer": [395, 972, 997], "_array_api": 395, "cupy_to_ndarrai": 395, "lda_np": 395, "torch": 395, "x_torch": 395, "y_torch": 395, "array_api_compat": 395, "submatrix": [396, 414, 440, 442], "unusu": [396, 982, 986, 1026], "submatric": 396, "bipartit": [396, 442, 500, 981], "subgraph": 396, "a_n": 396, "lceil": [396, 982], "log_2": [396, 552, 982], "rceil": [396, 982], "bmatrix": 396, "u_2": 396, "u_": [396, 471, 472, 473], "n_column": [396, 440, 442], "inderjit": [396, 442], "spectralbiclust": [396, 442, 1020, 1024, 1025, 1029], "blockwis": [396, 972], "bistochast": [396, 440], "l_": [396, 600, 641, 729, 976], "k_": [396, 409, 605, 608, 610, 613, 762, 986], "u_1": 396, "v_1": 396, "v_2": 396, "v_": [396, 407], "kluger": [396, 440, 502], "yuval": [396, 440], "microarrai": [396, 440, 502, 617, 966], "cap": [396, 399, 743, 976, 1027], "hochreit": [396, 708], "hungarian": [396, 708], "bodenhof": [396, 708], "fabia": [396, 708], "acquisit": [396, 708], "murphi": [397, 632, 969], "discriminatori": 397, "wilk": 397, "tricki": [397, 973], "logit": [397, 409, 647, 648, 972], "f_i": 397, "train_set": 397, "test_set": 397, "disjoint": [397, 399, 400, 426, 693, 719, 743, 745, 973], "platt": [397, 426, 890, 891, 893, 894, 991], "_i": [397, 406, 967, 972, 976, 980, 991], "_j": [397, 967], "f_j": [397, 984], "meteorologi": 397, "climatologi": 397, "precipit": 397, "wea": 397, "640": [397, 479, 495, 496, 572, 573, 965], "650": 397, "1990a": 397, "menon": 397, "ak": [397, 1032, 1033], "jiang": [397, 1022, 1029], "xj": 397, "vembu": 397, "ohno": 397, "machado": [397, 711], "703": [397, 502], "710": 397, "kull": [397, 976], "silva": [397, 677, 973, 1029, 1031], "filho": 397, "flach": [397, 976], "mario": [397, 1022, 1024, 1032, 1033, 1034], "w\u00fcthrich": 397, "merz": 397, "2023": [397, 1033], "actuari": 397, "refurbish": 398, "rough": [398, 982, 1004], "uniti": 398, "lipschitz": [398, 988], "usecas": 399, "mu_j": 399, "coher": 399, "elong": 399, "lloyd": [399, 432, 436, 438, 448, 1032, 1033], "distant": [399, 681, 698, 979], "sergei": [399, 1020, 1024, 1025, 1026, 1027, 1028], "vassilvitskii": [399, 436, 449], "eighteenth": 399, "siam": [399, 403, 441, 449, 451, 524, 530], "industri": [399, 996], "predetermin": [399, 973], "scullei": 399, "19th": 399, "exemplar": [399, 429, 443, 1010], "sent": [399, 817], "leftarrow": [399, 980, 990], "foral": [399, 409, 602], "neq": [399, 976, 978, 986], "notin": 399, "hill": [399, 437, 450, 1028], "climb": [399, 437, 450], "maxima": [399, 409], "x_j": [399, 409, 603, 604, 608, 611, 612, 614, 967, 968, 972, 979, 991, 992], "dictat": 399, "solvabl": 399, "stella": [399, 441, 451], "jianbo": [399, 441, 451, 680], "shi": [399, 441, 451, 680], "anil": [399, 441, 451], "daml": [399, 441, 451], "victor": [399, 441, 451, 1025, 1028], "minden": [399, 441, 451], "lex": [399, 441, 451], "ying": [399, 441, 451, 1032], "adjac": [399, 404, 441, 451, 574, 575, 624, 680, 684, 930, 973, 979, 1010], "adjacency_matrix": 399, "ulrik": [399, 441, 451, 680], "von": [399, 441, 451, 680, 996, 1025, 1026], "luxburg": [399, 441, 451, 680], "jitendra": [399, 441, 451, 680], "malik": [399, 441, 451, 680], "walk": [399, 405, 1021], "marina": 399, "meila": 399, "ng": [399, 404, 680, 834, 980, 982, 1029], "jordan": [399, 404, 680, 783, 1028, 1029, 1032, 1033], "yair": [399, 680], "precondit": [399, 441, 451, 684, 992], "zhuzhunashvili": [399, 451], "forbid": [399, 406], "macroscop": 399, "occupi": [399, 976], "manhattan": [399, 430, 434, 439, 446, 750, 759, 766, 767, 768, 835, 974, 979, 1022, 1027, 1034], "bisecting_strategi": [399, 432], "largest_clust": [399, 432], "biggest_inertia": [399, 432], "biggest": [399, 402, 404, 432], "steinbach": [399, 1033], "karypi": 399, "vipin": 399, "egin": 399, "minnesota": 399, "june": [399, 973, 1024], "weblog": 399, "abirami": 399, "mayilvahanan": 399, "emerg": [399, 1000], "ijet": 399, "jian": 399, "xinyu": 399, "gou": 399, "baod": 399, "hebei": 399, "knee": 399, "triangular": [399, 452, 600, 973], "whichev": [399, 406, 435, 533, 550, 551, 622, 639, 643, 645, 653, 671, 672, 686], "conjunct": [399, 583, 785, 788, 789, 791, 799, 807, 809, 810, 811, 812, 815, 943, 966, 972, 1033], "extract_dbscan": 399, "radius_neighbors_graph": [399, 410, 433, 830, 831, 832, 834, 836, 838, 839, 840, 841, 979, 1022, 1027, 1030], "ester": [399, 410, 433], "kriegel": [399, 410, 433, 439, 446, 834, 982], "sander": [399, 410, 433, 435, 439, 446, 834, 982, 1027, 1028], "xu": [399, 402, 410, 433, 990, 1031, 1032], "portland": [399, 410, 433], "aaai": [399, 410, 433, 823, 978], "226": [399, 410, 433], "revisit": [399, 410, 433], "schubert": [399, 410, 433, 439, 1022, 1023, 1026, 1027, 1029, 1030, 1031, 1032], "tod": [399, 410, 433], "lj2017": 399, "d_c": 399, "x_p": [399, 972], "d_m": 399, "x_q": 399, "g_": 399, "varepsilon": [399, 990, 991], "cm2013": 399, "mst": 399, "minimum_cluster_s": 399, "campello": [399, 435], "moulavi": [399, 435], "pei": [399, 1025], "tseng": 399, "cao": 399, "motoda": 399, "pakdd": 399, "lectur": [399, 633, 968, 995], "7819": [399, 1025], "berlin": [399, 404, 524, 685, 714, 744, 976], "heidelberg": [399, 404, 524, 685, 714, 744, 976], "mcinn": [399, 1024, 1025, 1026, 1028, 1029, 1034], "heali": 399, "icdmw": 399, "max_ep": [399, 439, 444, 446], "nearbi": [399, 979], "cluster_hierarchy_": [399, 439], "planar": 399, "peripheri": 399, "wall": 399, "ankerst": [399, 439, 446], "mihael": [399, 439, 446], "marku": [399, 439, 446, 1026, 1028, 1029, 1030], "breunig": [399, 439, 446, 834, 982], "han": [399, 431, 439, 446, 1018, 1026, 1027, 1031], "j\u00f6rg": [399, 439, 446, 1026], "sigmod": [399, 439, 446, 834, 982], "cft": 399, "lossi": 399, "cf": [399, 402, 431, 689, 972, 986, 997], "subclust": [399, 431], "till": [399, 431, 776, 976], "temporarili": [399, 1023], "farthest": 399, "brc": [399, 431], "tian": [399, 431, 1023, 1024, 1025], "raghu": [399, 431], "ramakrishnan": [399, 431], "maron": [399, 431], "livni": [399, 431], "sfu": [399, 431], "coursecentr": [399, 431], "zhang96": [399, 431], "roberto": [399, 431], "perdisci": [399, 431], "jbirch": [399, 431], "java": [399, 431, 996], "satisfi": [399, 639, 643, 706, 724, 725, 828, 829], "labels_pr": [399, 693, 694, 703, 704, 706, 719, 724, 725, 743, 745, 774, 781], "unadjust": [399, 976, 1030], "swap": [399, 404, 705, 724, 955, 956, 1018], "ri": [399, 694, 774], "c_2": [399, 973], "unord": [399, 406, 986], "esp": [399, 1018], "hubert": [399, 694, 704, 774], "arabi": [399, 694, 704, 774], "steinlei": [399, 694], "psycholog": [399, 694, 705], "agreement": [399, 693, 705, 743, 745, 781, 976], "22504": 399, "10526": 399, "u_i": [399, 471, 472, 473, 743], "v_j": [399, 743, 981], "veb2009": 399, "a_i": 399, "b_j": 399, "yat2016": 399, "average_method": [399, 693, 745, 1026], "vinh": [399, 693], "veb2010": 399, "strehl": 399, "joydeep": 399, "583": [399, 1009], "1162": 399, "153244303321897735": 399, "epp": [399, 693], "bailei": [399, 693], "26th": [399, 714, 744, 976], "1553374": 399, "1553511": 399, "9781605585161": 399, "csail": [399, 655, 656, 665, 825], "volume11": 399, "vinh10a": 399, "algesheim": 399, "tesson": 399, "30750": 399, "1038": 399, "srep30750": 399, "rosenberg": [399, 706, 725, 781], "hirschberg": [399, 706, 725, 781], "b2011": 399, "homogeneity_completeness_v_measur": [399, 1027], "n_k": [399, 539], "n_c": [399, 648], "julia": [399, 706, 725, 781], "media": [399, 1000], "hila": 399, "becker": [399, 1000, 1021, 1030], "fowlkes_mallows_scor": [399, 976, 1024, 1026], "fmi": [399, 719], "fp": [399, 701, 707, 719, 770, 771, 772, 775, 976], "fn": [399, 701, 707, 719, 770, 771, 772, 775, 976, 977], "47140": 399, "fowkl": [399, 719], "1983": [399, 719, 868], "tandfonlin": 399, "01621459": 399, "10478008": 399, "kmeans_model": 399, "1987": [399, 596, 597, 778, 779], "calinski_harabasz_scor": [399, 1026], "dispers": [399, 699, 713, 972], "561": 399, "n_e": 399, "mathrm": [399, 401, 404, 408, 972, 992], "b_k": 399, "w_k": [399, 972], "c_q": 399, "n_q": 399, "c_e": 399, "cali\u0144ski": 399, "1974": [399, 407, 699], "dendrit": [399, 699], "davies_bouldin_scor": [399, 1026], "6619": 399, "bould": 399, "c_i": [399, 979], "c_j": [399, 981], "s_i": [399, 986], "diamet": 399, "nonneg": [399, 404, 442, 527, 529, 536, 865], "s_j": 399, "max_": [399, 976], "1979": [399, 713, 757], "halkidi": 399, "batistaki": 399, "yanni": 399, "vazirgianni": 399, "michali": 399, "contingency_matrix": [399, 743, 1026], "pair_confusion_matrix": [399, 1030], "permit": [400, 456, 577, 578, 580, 785, 788, 789, 799, 810, 849, 850, 976, 977, 978, 1024], "clf__c": 400, "pca1": [400, 415], "svm1": 400, "77484909e": 400, "07058917e": 400, "pca2": [400, 415], "svm2": 400, "raw_target_regr": 400, "bypass": [400, 588, 635, 641, 896, 897, 898, 899], "check_invers": [400, 454, 852, 986, 1026, 1032, 1033], "linear_pca": 400, "make_union": [400, 847, 1021, 1025], "unreli": 400, "citi": [400, 407, 455, 1011], "london": [400, 407, 455], "sallisaw": [400, 455], "bow": 400, "moveabl": 400, "feast": 400, "grape": 400, "wrath": 400, "expert_r": 400, "user_r": 400, "city_categori": 400, "title_bow": 400, "city_london": 400, "city_pari": 400, "city_sallisaw": 400, "507": 400, "301": [400, 990], "ignored_new_col": 400, "estimator_html_repr": [400, 1029, 1030, 1031, 1032], "shrunk_covari": 401, "sigma_": [401, 633, 634, 1031], "365": [401, 462], "wiesel": [401, 412, 464], "eldar": [401, 412, 464], "hero": [401, 412, 464], "5016": [401, 412, 464], "5029": [401, 412, 464], "_k": [401, 970, 972], "glasso": [401, 467], "biostatist": [401, 467], "uncommon": [401, 647, 888, 991], "downweight": [401, 525], "driessen": [401, 458, 463, 982], "fastmcd": [401, 458, 463], "raw_location_": [401, 458, 463], "raw_covariance_": [401, 458, 463], "multidimension": [402, 677, 679, 681, 683, 973, 979], "plsw2a": 402, "u_k": [402, 404], "v_k": [402, 404, 520, 526, 534, 535], "x_k": [402, 404, 970, 979], "y_k": [402, 986], "xi_k": 402, "omega_k": [402, 970], "gamma_k": 402, "delta_k": 402, "nipal": [402, 472, 473], "xp": [402, 863], "x_rotations_": [402, 471, 472, 473], "y_rotations_": [402, 471, 472, 473], "ty": 402, "x_weights_": [402, 471, 472, 473, 474], "y_weights_": [402, 471, 472, 473, 474], "yv": 402, "tx": 402, "pls1": [402, 473], "pls2": [402, 473], "tx_k": [402, 970], "ty_k": 402, "ja": [402, 1025], "wegelin": 402, "methodolog": [403, 999], "academ": [403, 1000], "commerci": [403, 1000], "flowchart": [403, 1004], "f1_macro": [403, 976, 1022], "custom_cv_2fold": 403, "custom_cv": 403, "9333": 403, "scorer1_nam": 403, "scorer2_nam": 403, "return_indic": [403, 811, 1034], "precision_macro": [403, 1006], "recall_macro": [403, 976], "test_precision_macro": 403, "test_recall_macro": 403, "prec_macro": 403, "rec_macro": 403, "test_prec_macro": 403, "test_rec_macro": 403, "train_prec_macro": 403, "train_rec_macro": 403, "undistinguish": 403, "kf": [403, 790], "12883823": 403, "rkf": [403, 800], "weigh": [403, 1025], "caveat": [403, 409], "part3": 403, "spector": 403, "submodel": 403, "kohavi": 403, "jnt": 403, "bharat": [403, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "rao": [403, 1030, 1033], "fung": 403, "rosal": 403, "witten": 403, "leavepout": [403, 793, 1006], "ss": 403, "gkf": 403, "sgkf": [403, 803], "suboptim": [403, 689, 691, 770, 777, 979, 1026, 1034], "leavepgroupsout": [403, 787, 1006, 1024], "n_group": [403, 794, 1006, 1024], "lpgo": [403, 794], "gss": [403, 787], "withheld": 403, "predefinedsplit": [403, 1006, 1022], "test_fold": [403, 798], "train_indx": 403, "test_indx": 403, "autocorrel": 403, "superset": [403, 806, 976], "surplu": 403, "tscv": [403, 806], "inbuilt": 403, "some_integ": 403, "n_cv": [403, 426], "isotropi": 404, "alik": [404, 974], "halko": [404, 524, 530, 533, 924, 925], "szlam": [404, 924, 925], "disadvantag": [404, 409, 972, 973, 980, 990, 991, 992], "parsimoni": [404, 986], "jen09": 404, "mrl09": 404, "ell_1": [404, 972], "underset": [404, 972, 979, 992], "operatornam": [404, 729, 972, 976, 992], "fro": [404, 527, 529, 536, 682, 972], "gentli": 404, "spirit": 404, "mairal": [404, 520, 526], "bach": [404, 520, 525, 526, 527, 647, 972], "ponc": [404, 520, 526], "sapiro": [404, 520, 526], "jenatton": 404, "obozinski": 404, "scholkopf1997": 404, "bakir2003": 404, "smola": [404, 407, 524, 854, 986, 991], "klau": [404, 524, 854], "eigendecompos": 404, "eigensolv": [404, 441, 451, 524, 533, 684, 973], "eigsh": [404, 524, 1024, 1025], "lehoucq": 404, "sorensen": 404, "lsa": [404, 533, 1020], "synonymi": 404, "polysemi": 404, "lsi": 404, "sigma_k": [404, 970], "columnwis": 404, "sublinear": [404, 579, 580], "use_idf": [404, 407, 579, 580, 1011], "textual": [404, 992, 1027], "man": [404, 579, 757, 823, 827, 974, 976, 978], "prabhakar": 404, "raghavan": [404, 579, 823, 827, 974, 976, 978], "hinrich": 404, "sch\u00fctze": [404, 579, 974, 976, 978], "transform_method": 404, "split_cod": 404, "dictionarylearn": [404, 526, 528, 529, 531, 532, 533, 534, 535, 1019, 1023, 1025, 1028, 1031, 1032, 1033, 1034], "overcomplet": 404, "mammalian": 404, "cortex": 404, "inpaint": 404, "h_i": [404, 981], "psi": 404, "sim": [404, 1009], "wh_i": 404, "ww": 404, "superflu": 404, "psi_1": 404, "psi_2": 404, "psi_n": 404, "superimpos": 404, "plug": [404, 972, 1000, 1011], "wh": [404, 527, 529, 536], "hoyer": [404, 1021], "nndsvd": [404, 527, 529, 536, 1027, 1030], "nndsvdar": [404, 527, 529, 536, 1027], "elementwis": [404, 527, 529, 536], "_featur": [404, 527, 529, 536], "kl": [404, 973, 1026], "itakura": [404, 527, 529, 536, 1025], "saito": [404, 527, 529, 536, 1025], "w_new": 404, "forget_factor": [404, 527], "lee": [404, 1018, 1019, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1033], "seung": 404, "boutsidi": 404, "gallopoulo": 404, "cichocki": [404, 527, 529, 536], "phan": 404, "fevott": [404, 527, 529, 536], "idier": [404, 527, 529, 536], "lefevr": [404, 527], "corpora": 404, "hoffman": [404, 525, 1023, 1030], "unshad": 404, "beta_k": 404, "eta": [404, 525, 665, 666, 667, 980, 990, 1023], "topic_word_prior": [404, 525], "theta_d": 404, "doc_topic_prior": [404, 525], "z_": 404, "w_": [404, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 972, 976, 978, 981], "beta_": 404, "elbo": 404, "overset": [404, 983], "e_": 404, "blei": [404, 525, 783], "wang": [404, 525, 668, 678, 682, 714, 744, 972, 973, 976, 1021, 1023, 1024, 1025, 1026, 1030, 1033], "paislei": [404, 525], "kaiser": [404, 521], "talli": 405, "disproportion": 405, "41075698": 405, "41076071": 405, "rho_k": 405, "unsmooth": 405, "scott": [405, 833, 1018, 1019, 1024, 1026, 1027, 1028, 1033], "silvermann": 405, "propto": [405, 978], "2h": 405, "angular": [405, 681, 752], "contin": [405, 703, 986], "generaliz": 406, "flavour": 406, "b1999": 406, "b1996": 406, "h1998": 406, "lg2012": 406, "bootstrap_featur": [406, 544, 545], "844": [406, 544, 545], "geurt": [406, 544, 545, 546, 547, 554, 555, 898, 899], "b1998": 406, "decoupl": [406, 978], "cancel": [406, 407, 751], "b2001": 406, "bear": [406, 996], "ernst": [406, 546, 547, 554, 555, 898, 899], "wehenkel": [406, 546, 547, 554, 555, 898, 899], "l2014": 406, "lieg": 406, "freund": [406, 542, 543], "fs1995": 406, "w_1": [406, 972, 980], "w_2": [406, 972, 980], "w_n": 406, "w_i": [406, 967, 976], "reappli": 406, "htf": 406, "zzrh2009": 406, "d1997": 406, "semin": 406, "friedman2001": 406, "shelf": 406, "ecologi": 406, "lightgbm": [406, 550, 551, 1027, 1034], "913": [406, 548], "nr": 406, "f_m": 406, "h_m": 406, "f_": [406, 624, 976], "l_m": 406, "taylor": [406, 1026, 1028, 1029, 1032], "g_i": [406, 638], "absolute_error": [406, 547, 549, 551, 554, 660, 897, 899, 1031], "sum_m": 406, "softmax": [406, 550, 647, 648, 972, 979, 980], "superior": 406, "ineffici": [406, 432, 563, 816, 817, 979, 981], "r2007": 406, "friedman2002": 406, "1189": 406, "1232": 406, "8965": 406, "grower": [406, 550, 551], "missing": [406, 616, 617, 619, 1027], "fisher1958": 406, "loan": [406, 523, 972, 1000], "nevertheless": 406, "mayer2022": 406, "mayer": [406, 1030, 1032], "bourassa": 406, "hoesli": 406, "scognamiglio": 406, "valuat": 406, "tianqi": 406, "guestrin": 406, "ke": [406, 1029, 1030], "boostingdecis": 406, "w2": 406, "w3": 406, "lr__c": 406, "rf__n_estim": 406, "w1992": 406, "knr": 406, "stack_method": [406, 556], "286": 406, "225": 406, "164": 406, "stack_method_": [406, 556, 557], "final_layer_rfr": 406, "final_layer_gbr": 406, "final_lay": 406, "multi_layer_regressor": 406, "wolpert": [406, 556, 557], "241": [406, 556, 557], "dubai": 407, "francisco": [407, 988], "movi": [407, 1003], "movie_entri": 407, "thriller": [407, 859], "drama": 407, "000e": 407, "003e": 407, "011e": 407, "974e": 407, "unseen_featur": [407, 570], "speech": [407, 976], "chunker": 407, "pos_window": 407, "pos_vector": 407, "1x6": 407, "part_of_speech": 407, "token_featur": 407, "isupp": 407, "uppercase_initi": 407, "all_uppercas": 407, "raw_x": [407, 571], "pos_tagg": 407, "comprehens": [407, 746, 747, 974, 1000, 1026], "murmurhash3": [407, 571, 578, 941], "weinberg": 407, "modulo": [407, 1029], "kilian": [407, 1033], "anirban": 407, "dasgupta": [407, 435, 882, 988], "langford": [407, 677, 973], "josh": [407, 1025], "attenberg": 407, "multitask": [407, 977], "punctuat": [407, 577, 578, 580], "diminish": 407, "4x9": 407, "build_analyz": [407, 577, 578, 580, 1028], "interrog": 407, "bigram_vector": 407, "cool": [407, 1018], "feature_index": 407, "him": 407, "constru": 407, "nqy18": 407, "smooth_idf": [407, 579, 580], "_n": [407, 976], "textbook": [407, 579], "6x3": 407, "81940995": 407, "57320793": 407, "47330339": 407, "88089948": 407, "58149261": 407, "81355169": 407, "term1": 407, "term2": 407, "term3": 407, "0986": [407, 852], "819": 407, "8473": 407, "8515": [407, 1025], "5243": 407, "85151335": 407, "52433293": 407, "55422893": 407, "83236428": 407, "63035731": 407, "77630514": 407, "idf_": [407, 579, 580, 1026], "western": 407, "europ": [407, 986], "koi8": 407, "russian": 407, "modern": [407, 457, 492, 579, 679, 683, 718, 886, 973, 997, 1034], "unicodedecodeerror": [407, 577, 578, 580], "told": 407, "chardet": 407, "chardetect": 407, "damag": 407, "sloppili": 407, "ftfy": 407, "mish": 407, "mash": 407, "text1": 407, "sei": 407, "mir": 407, "gegr": 407, "xc3": 407, "xbc": 407, "x9ft": 407, "mein": 407, "sauerkraut": 407, "text2": 407, "holdselig": 407, "sind": 407, "dein": 407, "ger": 407, "xfcche": 407, "text3": 407, "xff": 407, "xfea": 407, "x00u": 407, "x00f": 407, "x00": 407, "x00l": 407, "xfc": 407, "x00g": 407, "x00e": 407, "x00n": 407, "x00d": 407, "x00a": 407, "x00h": 407, "x00r": 407, "x00z": 407, "x00i": 407, "x00b": 407, "x00c": 407, "x00t": 407, "x00o": 407, "spolski": 407, "nnmf": [407, 1012, 1013, 1018], "phrase": 407, "misspel": 407, "rescu": 407, "resili": 407, "wprd": 407, "ngram_vector": 407, "char_wb": [407, 577, 578, 580], "rd": 407, "wo": 407, "wp": [407, 646, 660], "char": [407, 577, 578, 580, 1018], "jumpi": 407, "fox": 407, "1x4": 407, "umpi": 407, "1x5": 407, "mpy": 407, "fo": 407, "paragraph": [407, 492, 1011], "barrier": 407, "hv": 407, "4x10": 407, "discrep": [407, 1011, 1022], "4x1048576": 407, "collid": 407, "ingest": 407, "spend": 407, "my_token": 407, "lowercas": [407, 415, 431, 432, 434, 436, 438, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 577, 578, 580, 628, 629, 630, 631, 677, 678, 681, 832, 837, 840, 844, 849, 854, 880, 881, 1031], "lucen": 407, "build_preprocessor": [407, 577, 578, 580, 1028], "whitespac": 407, "fanci": 407, "lemmat": 407, "nltk": [407, 995, 996], "word_token": 407, "wordnetlemmat": 407, "lemmatoken": 407, "wnl": 407, "british": 407, "spell": 407, "to_british": 407, "1or": 407, "bt": 407, "1er": 407, "ing": 407, "ation": 407, "1z": 407, "ogu": 407, "og": 407, "customvector": 407, "asian": 407, "one_imag": [407, 573], "fake": 407, "assert_array_equ": 407, "patchextractor": [407, 1034], "five_imag": 407, "variancethreshold": [408, 853, 966, 1021, 1028, 1031, 1034], "selectfdr": [408, 581, 585, 587, 588, 589, 595, 1022, 1024, 1025, 1034], "selectfw": [408, 581, 584, 585, 588, 589, 595, 1034], "genericunivariateselect": [408, 584, 585, 587, 588, 589, 591, 1032, 1034], "r_regress": [408, 595, 1031, 1032], "nonparametr": [408, 596, 597], "bewar": 408, "importance_gett": [408, 582, 583, 586, 1030], "unimport": 408, "lsvc": 408, "baraniuk": 408, "isr": 408, "ist": 408, "utl": 408, "aguiar": 408, "cs_note": 408, "ferri": [408, 976], "versatil": [409, 991, 1000], "optima": 409, "markov": [409, 600, 981, 996, 1018], "ppmv": 409, "0336": 409, "4ppm": 409, "27ppm": 409, "197ppm": 409, "nuisanc": 409, "one_vs_on": [409, 599, 977], "ingredi": 409, "duv2014": 409, "theta_l": 409, "x_bound": [409, 606], "operand": 409, "k1__": 409, "k2__": 409, "constant_valu": [409, 602, 606], "constant_value_bound": [409, 600, 602, 606], "k1__k1__constant_valu": 409, "value_typ": [409, 606], "n_element": [409, 606], "k2__length_scal": 409, "k1": [409, 610, 613], "k1__k1": 409, "k1__k1__constant_value_bound": 409, "k1__k2": 409, "k1__k2__length_scale_bound": 409, "k2": [409, 610, 613], "k2__length_scale_bound": 409, "69314718": [409, 601, 986], "30258509": 409, "interoper": [409, 994, 997, 1013], "pairwisekernel": 409, "_valu": [409, 602], "_level": [409, 614], "k_1": [409, 610, 613], "k_2": [409, 610, 613], "__add__": [409, 613], "__mul___": 409, "__pow__": [409, 605], "2l": [409, 611], "bigg": [409, 608], "bessel": [409, 608], "rightarrow": [409, 608, 980], "quad": [409, 979, 990], "tfrac": 409, "3l": 409, "pp84": 409, "x_d": [409, 603], "inhomogen": [409, 603], "expon": [409, 605, 665, 666, 667, 797, 845, 846, 863, 965], "carl": [409, 599, 600, 603, 608, 611], "rasmussen": [409, 599, 600, 603, 608, 611], "duvenaud": [409, 611, 612], "cookbook": [409, 611, 612], "minkowski": [410, 433, 439, 446, 677, 766, 767, 768, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 979, 1018, 1021, 1032, 1033], "metric_param": [410, 433, 435, 439, 446, 677, 681, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 1022, 1025, 1032], "leaf_siz": [410, 433, 435, 439, 446, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840], "kd_tree": [410, 433, 439, 446, 677, 678, 830, 831, 832, 833, 834, 836, 838, 839, 840, 979, 1031], "balltre": [410, 433, 435, 439, 446, 677, 678, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 973, 1018, 1020, 1022, 1026, 1031, 1034], "ckdtree": [410, 433, 1020], "inhibit": [410, 433], "core_sampl": 410, "n_core_sampl": [410, 433], "attract": [410, 433, 970, 979, 996], "fun": [411, 522, 1000], "logcosh": [411, 522], "fun_arg": [411, 522], "w_init": [411, 522], "whiten_solv": [411, 522, 1033], "return_x_mean": 411, "compute_sourc": 411, "return_n_it": [411, 443, 448, 467, 534, 535, 635, 636, 641, 642, 649, 650, 651, 652, 670, 671, 672, 673, 674, 675, 676, 683, 1032], "cube": [411, 522], "my_g": [411, 522], "x_mean": 411, "AS": 411, "fortran": [411, 530, 635, 636, 641, 642, 649, 650, 651, 652, 654, 670, 673, 674, 675, 908, 909, 1018, 1021, 1022, 1026], "hyvarinen": [411, 522], "oja": [411, 522], "430": [411, 522], "shrunk_cov": [412, 468, 470], "eq": [412, 464, 710, 711, 712], "subobject": [413, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 783, 784, 785, 788, 789, 799, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899], "row_ind": [414, 440, 442], "intp": [414, 440, 442], "col_ind": [414, 440, 442], "get_submatrix": [414, 440, 442], "pca0": 415, "_n_features_out": 415, "class_name0": [415, 431, 432, 434, 436, 438, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 628, 629, 630, 631, 677, 678, 681, 832, 837, 840, 844, 854, 880, 881], "class_name1": [415, 431, 432, 434, 436, 438, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 628, 629, 630, 631, 677, 678, 681, 832, 837, 840, 844, 854, 880, 881], "class_name2": [415, 431, 432, 434, 436, 438, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 628, 629, 630, 631, 677, 678, 681, 832, 837, 840, 844, 854, 880, 881], "feature_names_out": [415, 420, 431, 432, 434, 436, 438, 453, 471, 472, 473, 474, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 555, 556, 557, 558, 559, 570, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 616, 617, 618, 619, 624, 627, 628, 629, 630, 631, 677, 678, 681, 832, 837, 840, 844, 847, 848, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 880, 881, 1032], "harsh": [416, 426, 458, 538, 539, 540, 542, 544, 546, 548, 550, 553, 556, 558, 599, 647, 655, 657, 663, 664, 665, 816, 817, 818, 819, 823, 824, 825, 826, 827, 830, 835, 838, 845, 883, 884, 888, 890, 893, 896, 898, 1028, 1030, 1033], "n_samples_fit": [421, 454, 471, 472, 473, 543, 545, 547, 549, 551, 554, 557, 559, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 677, 821, 822, 830, 831, 832, 834, 836, 838, 839, 840, 846, 889, 891, 894, 897, 899], "uniform_averag": [421, 454, 471, 472, 473, 543, 545, 547, 549, 551, 554, 557, 559, 600, 624, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 659, 661, 662, 667, 668, 710, 711, 716, 733, 734, 736, 738, 739, 741, 773, 821, 822, 831, 839, 846, 889, 891, 894, 897, 899, 976, 1027], "n_features_new": [422, 431, 434, 521, 523, 525, 526, 528, 531, 532, 538, 556, 558, 559, 571, 572, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 617, 619, 624, 627, 628, 629, 630, 631, 837, 844, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 880, 881], "base_clf": 426, "calibrated_clf": 426, "927": 426, "x_calib": 426, "y_calib": 426, "prob_tru": [427, 428], "prob_pr": [427, 428], "ref_lin": 427, "alexandru": 428, "22nd": 428, "525": [428, 617, 966], "convergence_it": [429, 443], "hardcod": [429, 443, 1026], "affinity_matrix_": [429, 441, 680], "cluster_center_indic": [429, 443], "compute_full_tre": [430, 434, 1022], "compute_dist": [430, 434, 1030], "inferior": [430, 434, 1029], "n_leaves_": [430, 434], "n_connected_components_": [430, 434, 1027], "branching_factor": 431, "compute_label": [431, 438], "promot": [431, 697, 996, 1029, 1031], "redistribut": 431, "overwritten": [431, 521, 522, 523, 525, 530, 537, 596, 597, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 661, 663, 668, 670, 671, 672, 673, 675, 944, 946, 1031], "root_": 431, "_cfnode": 431, "cftree": 431, "dummy_leaf_": 431, "subcluster_labels_": 431, "centroids_": [431, 435, 835], "copy_x": [432, 436, 448, 524, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 661, 663, 668, 670, 671, 672, 673, 674, 1020, 1026, 1027], "k_init": [432, 448], "sse": 432, "bisect_mean": 432, "pooling_func": [434, 1026], "xred": [434, 1034], "cluster_selection_epsilon": 435, "max_cluster_s": 435, "cluster_selection_method": 435, "eom": 435, "store_cent": 435, "kdtree": [435, 439, 446, 677, 678, 828, 830, 831, 832, 833, 834, 836, 838, 839, 840, 1020, 1022, 1026, 1030, 1031], "excess": [435, 986, 1025], "medoid": 435, "overwrit": [435, 485, 620, 1002, 1018, 1029, 1034], "medoids_": 435, "zimek": 435, "chaudhuri": 435, "jaskowiak": 435, "malzer": 435, "baum": 435, "hybrid": [435, 638, 996], "dbscan_clust": 435, "border": [435, 1028], "unclust": 435, "socg2006": 436, "min_bin_freq": [437, 450], "cluster_al": [437, 450], "get_bin_se": 437, "orphan": [437, 450, 1018], "reassignment_ratio": 438, "eec": [438, 630], "tuft": 438, "dscullei": 438, "fastkmean": 438, "55102041": 438, "48979592": 438, "06896552": 438, "set_partial_fit_request": [438, 523, 527, 655, 657, 665, 666, 667, 816, 817, 820, 821, 823, 824, 825, 826, 827, 845, 868], "cluster_method": 439, "predecessor_correct": [439, 445], "unprocess": [439, 577, 578, 580], "heap": 439, "braycurti": [439, 446, 766, 767, 768, 979], "canberra": [439, 446, 766, 767, 768, 979], "chebyshev": [439, 446, 766, 767, 768, 979], "dice": [439, 446, 766, 767, 768, 979], "kulsinski": [439, 446, 766, 767, 768], "rogerstanimoto": [439, 446, 766, 767, 768, 979], "russellrao": [439, 446, 766, 767, 768, 979], "seuclidean": [439, 446, 766, 767, 768, 835, 979, 1026, 1029, 1030], "sokalmichen": [439, 446, 766, 767, 768, 979], "sokalsneath": [439, 446, 766, 767, 768, 979], "yule": [439, 446, 766, 767, 768], "manhattan_dist": [439, 446, 677, 750, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 1018, 1028, 1033, 1034], "minkowski_dist": [439, 446, 677, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842], "l_p": [439, 446, 677, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842], "upward": [439, 445], "successor": [439, 445, 992, 996], "predecessor": [439, 445, 446], "predecessor_": [439, 446], "erich": [439, 1022, 1023, 1026, 1027, 1029, 1030, 1031, 1032], "gertz": 439, "lernen": 439, "wissen": 439, "daten": [439, 1026, 1027], "analysen": 439, "lwda": 439, "n_best": 440, "n_svd_vec": [440, 442], "mini_batch": [440, 442], "n_row_clust": [440, 442, 502], "n_column_clust": [440, 442, 502], "ncv": [440, 442], "n_oversampl": [440, 442, 530, 533, 925, 1032], "kernel_param": [441, 524, 628, 632], "precomputed_nearest_neighbor": [441, 680], "eigendecomposit": [441, 451, 662, 680, 684, 854], "dist_matrix": 441, "csc_matrix": [441, 546, 547, 552, 553, 554, 555, 865, 896, 897, 898, 899, 966, 986, 992, 1023], "best_n_it": 448, "n_local_tri": 449, "n_seed": 450, "multigrid": 451, "multiscal": 451, "preliminari": 451, "heapq": 452, "topolog": [452, 996], "n_connected_compon": 452, "n_leav": [452, 896, 897, 898, 899], "untransform": [453, 456, 987], "transformers_": 453, "remaining_column": 453, "named_transformers_": 453, "sparse_output_": [453, 540], "output_indices_": [453, 1031], "datatyp": [453, 455, 1025, 1028], "norm1": 453, "norm2": 453, "text_preprocess": 453, "num_preprocess": 453, "x_t": [453, 616, 847], "sum_n_compon": [453, 847], "y_hat": 454, "90453403": 455, "50755672": 455, "30151134": 455, "print_changed_onli": [457, 886, 1027, 1029, 1030], "pairwise_dist_chunk_s": [457, 886], "enable_cython_pairwise_dist": [457, 886], "skip_parameter_valid": [457, 886, 1034], "cache_s": [457, 886, 890, 891, 892, 893, 894, 991], "get_config": [457, 769, 886, 943, 1033], "offset_": [458, 552, 666, 834, 892, 1026], "raw_support_": [458, 463], "dist_": [458, 463], "true_cov": [458, 460, 461], "7411": [458, 463, 1024], "2535": [458, 463], "3053": [458, 463], "0813": [458, 463], "0427": [458, 463], "correct_covari": [458, 463], "rvd": [458, 463], "covariance_correct": [458, 463], "comp_cov": [458, 459, 460, 461, 462, 463, 464, 465], "get_precis": [458, 459, 460, 461, 462, 463, 464, 465, 521, 523, 530], "is_inli": [458, 552, 834], "reweight_covari": [458, 463], "rvdriessen": [458, 463], "location_reweight": [458, 463], "covariance_reweight": [458, 463], "support_reweight": [458, 463], "negative_mahal_dist": 458, "7569": 459, "2818": 459, "3928": 459, "0622": [459, 465], "0193": [459, 465], "enet_tol": [460, 461, 467, 1023], "220446049250313e": [460, 461, 467, 639, 640, 643, 644, 645, 671, 672], "graphlasso": [460, 1023, 1026], "costs_": [460, 461, 1034], "dual_gap": [460, 461, 467, 635, 636, 641, 642, 649, 650, 651, 652, 670, 673], "return_cost": [460, 461, 467], "049": 460, "n_refin": 461, "graphlassocv": [461, 1020, 1026], "dualiti": [461, 972], "094": 461, "block_siz": [462, 468, 469, 1022], "4406": 462, "1616": 462, "0595": 462, "0075": [462, 530], "rouseeuw1984": 463, "butlerdavi": 463, "butler": [463, 1021, 1029, 1030], "davi": [463, 713, 976, 1022], "jhun": 463, "1385": 463, "7533": [464, 1025], "2763": 464, "3964": 464, "7833": 464, "2431": 464, "3889": 464, "0195": 464, "7387": 465, "2536": 465, "4110": 465, "cov_init": [467, 1034], "graph_lasso": [467, 1026], "x_loadings_": [471, 472, 473], "y_loadings_": [471, 472, 473], "plssvd": [471, 472, 998, 1013, 1030, 1032], "x_c": [471, 472, 474, 983], "y_c": [471, 472, 474], "y_reconstruct": [471, 472, 473], "x_scores_": [473, 1030], "y_scores_": [473, 1030], "y_transform": 474, "data_hom": [475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 1025], "sklearn_learn_data": [475, 488], "zero_bas": [476, 497, 498], "query_id": [476, 497, 498], "grok": 476, "qid": [476, 497, 498, 1019, 1024], "download_if_miss": [477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 1025], "stopword": [478, 1011], "target_column": [478, 479, 485], "percent": [481, 589, 989], "494021": 481, "slice_": [482, 483, 1033], "unrestrict": 482, "2914": 483, "5748": 483, "n_retri": [485, 1032], "read_csv_kwarg": [485, 1034], "timeout": [485, 942, 1032], "412": [485, 972], "ith": [485, 762, 766, 824, 845, 846, 861, 862], "1592": 487, "1212": 487, "1624": 487, "620": 487, "data_filenam": [490, 494], "target_filenam": [490, 494], "container_path": 492, "load_cont": 492, "allowed_extens": 492, "container_fold": 492, "category_1_fold": 492, "file_1": 492, "file_2": 492, "file_42": 492, "category_2_fold": 492, "file_43": 492, "file_44": 492, "image_nam": 495, "first_img_data": 496, "backup": [497, 1018], "instantan": 497, "mycach": 497, "get_data": 497, "mysvmlightfil": 497, "xn": 498, "yn": [498, 977, 978], "q1": 498, "qn": 498, "yi": [498, 978, 1022, 1026, 1027, 1030], "qi": [498, 1030], "triplet": 498, "minval": [500, 502], "maxval": [500, 502], "seventh": [500, 988], "269": 500, "274": 500, "return_cent": [501, 1029], "intric": 501, "basri": 502, "gerstein": 502, "flip_i": 504, "interdepend": 504, "polytop": 504, "guyon": [504, 582, 583, 976], "madelon": 504, "1991": [505, 506, 507], "12000": 509, "effective_rank": [510, 513], "tail_strength": [510, 513], "bell": [510, 1026, 1028, 1030, 1031], "fat": [510, 513], "crawl": [510, 917], "return_ind": 512, "make_low_rank_matrix": 513, "4967": 513, "1382": 513, "6476": 513, "2341": 513, "4694": 513, "5425": 513, "7674": [513, 1025], "4017": 513, "data_transpos": [515, 1032, 1034], "norm_diag": 516, "make_spd_matrix": 516, "celeux": 517, "el": [517, 1031, 1033], "anbari": 517, "marin": 517, "frequentist": 517, "n_dim": [518, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614], "marsland": 519, "vuw": 519, "nz": 519, "marslast": 519, "ch6": 519, "code_init": [520, 534], "dict_init": [520, 526, 534, 535], "callback": [520, 526, 528, 534, 535, 837, 942, 997, 1034], "split_sign": [520, 526, 531], "transform_max_it": [520, 526, 527, 531, 1028], "_fro": [520, 526, 534, 535, 635, 636, 641, 649, 650, 651, 670], "lasso_cd": [520, 526, 531, 537], "invok": [520, 526, 528, 534, 535, 556, 558, 559, 809, 885, 1030], "error_": [520, 532], "minibatchsparsepca": [520, 522, 526, 529, 531, 532, 534, 535, 1018, 1019, 1029, 1031, 1032, 1033, 1034], "sierra": [520, 526], "icml09": [520, 526], "x_hat": [520, 526], "noise_variance_init": 521, "quartimax": [521, 1030], "loglike_": 521, "barber": 521, "bishop": [521, 523, 530, 729, 783, 972, 977, 991], "get_covari": [521, 523, 530], "unmixing_matrix": 522, "whitening_": 522, "kpca": [522, 523, 524, 1012, 1013, 1018], "set_inverse_transform_request": [522, 570, 855, 868], "unsaf": 523, "singular_values_": [523, 530, 533, 1025], "var_": [523, 826, 868, 1031], "miketip": [523, 530], "mppca": [523, 530], "n_samples_seen_": [523, 857, 858, 868, 1026], "batch_size_": 523, "ross": [523, 596, 597, 992, 1032, 1033], "vision": [523, 746, 747, 968, 972, 974, 992, 996, 1000, 1019], "toronto": [523, 633, 844], "dross": 523, "ivt": 523, "rosslimlinyang_ijcv": 523, "karhunen": 523, "loev": 523, "levi": [523, 1025], "lindenbaum": 523, "1371": 523, "1374": 523, "abstain": 523, "holub": 523, "opportun": [523, 990], "golub": [523, 826, 868], "x_spars": [523, 947, 950], "sigma2": [523, 530], "x_origin": [523, 528, 530, 532, 533, 619, 880, 881], "check_input": [523, 537, 635, 636, 641, 649, 650, 651, 670, 676, 896, 897, 898, 899, 1026], "remove_zero_eig": [524, 1020, 1027], "x_fit_": [524, 632], "eigenvalues_": [524, 1031], "eigenvectors_": [524, 1031], "dual_coef_": [524, 632, 890, 891, 892, 893, 894, 991, 1022], "x_transformed_fit_": 524, "gamma_": [524, 1034], "nathan": [524, 1026, 1030, 1033], "gunnar": [524, 925], "tropp": [524, 530], "288": [524, 530], "vladimir": [524, 925, 972, 1028, 1032], "rokhlin": [524, 530, 925], "tygert": [524, 530, 925], "learning_decai": 525, "evaluate_everi": 525, "perp_tol": 525, "mean_change_tol": 525, "max_doc_update_it": 525, "kappa": [525, 705], "tau_0": 525, "pseudocount": [525, 1026], "exp_dirichlet_component_": 525, "n_batch_iter_": 525, "bound_": 525, "doc_topic_prior_": 525, "topic_word_prior_": 525, "franci": [525, 647, 972, 1024], "onlineldavb": 525, "chong": 525, "00360392": 525, "25499205": 525, "0036211": 525, "64236448": 525, "09541846": 525, "15297572": 525, "00362644": 525, "44412786": 525, "39568399": 525, "003586": 525, "vb": 525, "sub_sampl": 525, "doc_topic_distr": [525, 1025], "fresh_restart": 527, "fresh_restarts_max_it": 527, "_w": [527, 529, 536], "_ratio": [527, 529, 536], "_h": [527, 529, 536], "fresh": [527, 997, 1028], "reconstruction_err_": [527, 529], "andrzej": [527, 529, 536], "anh": [527, 529, 536], "ieic": [527, 529, 536], "721": [527, 529, 536], "waspa": 527, "ridge_alpha": [528, 532, 1025], "power_iteration_norm": [530, 533, 924, 925, 1032], "500x500": 530, "lu": [530, 533, 924, 925, 1024, 1025, 1026, 1027], "n_samples_": 530, "royal": [530, 616, 864, 876, 990], "methodologi": [530, 861, 966, 976, 1000], "622": 530, "9924": 530, "30061": 530, "54980": 530, "00755": 530, "99244": 530, "ascontiguousarrai": 530, "sparse_encod": [531, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 671, 672, 673, 674, 675, 1018, 1025, 1026, 1028, 1032], "u_init": 532, "v_init": 532, "9666": 532, "oversampl": [533, 1018], "indeterminaci": 533, "x_dens": 533, "0157": 533, "0512": 533, "0499": 533, "0479": 533, "0453": 533, "2102": 533, "2410": 533, "5981": 533, "5420": 533, "4486": 533, "3288": 533, "method_max_it": [534, 535, 1028], "dict_learning_onlin": [534, 1019, 1028, 1031, 1032], "return_cod": 535, "iter_offset": [535, 1032], "return_inner_stat": [535, 1032], "inner_stat": [535, 1032], "update_h": 536, "_n_compon": 536, "hal": [536, 647, 746, 747, 974], "copy_cov": 537, "orthogonal_mp": [537, 653, 654, 675, 972], "eigen": [538, 662, 680, 684, 970, 1024, 1027], "sum_k": [538, 992], "prior_k": 538, "c_k": 538, "priors_": [538, 539], "scalings_": [538, 539], "xbar_": 538, "reg_param": 539, "scaling_": 539, "colinear": 539, "rotations_": 539, "n_classes_": [540, 542, 544, 546, 548, 553, 599, 816, 817, 896, 898, 1019, 1028, 1030], "class_prior_": [540, 826], "n_outputs_": [540, 541, 546, 547, 553, 554, 555, 845, 846, 896, 897, 898, 899], "dummy_clf": 540, "constant_": 541, "dummy_regr": 541, "base_estimator_": [542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 599, 885, 1033], "983": [542, 716], "dok": [542, 543, 855, 1031], "staged_decision_funct": [542, 548, 550], "staged_scor": [542, 543], "7972": 543, "9771": 543, "estimators_samples_": [544, 545, 552, 1024, 1026, 1029], "estimators_features_": [544, 545, 552], "oob_decision_function_": [544, 546, 553], "oob_prediction_": [545, 547, 554], "8720": [545, 1026], "min_weight_fraction_leaf": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899, 992, 1021, 1024, 1025], "min_impurity_decreas": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899, 992, 1025], "shannon": [546, 553, 896, 898, 973, 992], "unlimit": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899], "n_t": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899], "n_t_r": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899], "right_impur": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899], "n_t_l": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899], "left_impur": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899], "balanced_subsampl": [546, 553, 1026], "subtre": [546, 547, 548, 549, 553, 554, 896, 897, 898, 899, 992], "unprun": [546, 547, 553, 554, 896, 897, 898, 899], "x_leav": [546, 547, 548, 549, 553, 554, 555, 896, 897, 898, 899], "n_nodes_ptr": [546, 547, 553, 554, 555], "friedman_ms": [547, 548, 549, 554, 897, 899, 992, 1034], "extratreeregressor": [547, 552, 555, 898, 982, 1027, 1028, 1029, 1031, 1032, 1033], "2727": 547, "dummyestim": [548, 549], "eras": [548, 549, 635, 641, 647, 649, 651, 655, 656, 657, 665, 666, 667, 845, 846], "oob_scores_": [548, 549, 1034], "init_": [548, 549], "init_estim": [548, 549], "max_features_": [548, 549, 586, 896, 897, 898, 899, 1032], "_fit_stag": [548, 549], "crossentropi": 550, "deepest": [550, 551, 1029], "no_interact": [550, 551, 1033], "do_early_stopping_": [550, 551], "n_trees_per_iteration_": [550, 551], "validation_score_": [550, 551], "is_categorical_": [550, 551], "n_trees_per_iter": 550, "max_samples_": 552, "fei": [552, 982], "ting": [552, 982, 1026, 1027], "ming": [552, 982, 1022, 1026, 1027, 1028, 1032], "zhou": [552, 628, 884, 982, 1026], "zhi": [552, 982], "hua": [552, 982], "icdm": [552, 982], "eighth": [552, 982], "tkdd": 552, "n_left": 552, "32987858": 554, "n_out": 555, "one_hot_encoder_": 555, "extratreeclassifi": [555, 899, 977, 1022, 1027, 1028, 1029, 1031, 1032, 1033], "moosmann": 555, "trigg": 555, "juri": 555, "random_tre": 555, "x_sparse_embed": 555, "randomtreesembedding_": 555, "final_estimator_": [556, 557], "named_estimators_": [556, 557, 558, 559, 1026, 1028], "named_estim": [556, 557, 558, 559], "parameter_nam": [556, 557, 558, 559], "new_valu": [556, 557, 558, 559], "linearsvr": [557, 894, 991, 1022, 1024, 1029, 1034], "flatten_transform": [558, 1025], "le_": 558, "eclf1": 558, "array_equ": [558, 1025], "eclf2": 558, "eclf3": 558, "maj": 558, "probabilities_or_label": 558, "n_regressor": 559, "r1": 559, "r3": 559, "er": 559, "with_traceback": [560, 561, 562, 563, 564, 565, 566, 567], "__traceback__": [560, 561, 562, 563, 564, 565, 566, 567], "current_sklearn_vers": 565, "repr": [566, 1029, 1030, 1032], "linter": 568, "flake8": 568, "spam": [570, 698, 729, 823, 976, 978, 1000], "feature_names_": 570, "xa": 570, "dict_typ": 570, "conform": [570, 617, 816, 817, 976, 996, 997, 1025, 1031], "1048576": [571, 578], "non_neg": [571, 1025], "eleph": 571, "bird": [571, 707, 742, 976], "patch_height": [572, 573, 576], "patch_width": [572, 573, 576], "img_height": 572, "img_width": 572, "pe": 572, "pe_tran": 572, "263758": 572, "image_height": [572, 573, 576], "image_width": [572, 573, 576], "n_channel": [572, 573, 576], "n_patch": [572, 573, 576], "272214": 573, "243": 573, "244": 573, "n_z": 574, "return_a": [574, 575, 1021], "_coo": [574, 575], "image_s": 576, "strip_acc": [577, 578, 580], "nfkd": [577, 578, 580, 1028], "unicodedata": [577, 578, 580], "regexp": [577, 578, 580], "min_n": [577, 578, 580, 1018], "max_n": [577, 578, 580, 1018], "fixed_vocabulary_": [577, 580], "stop_words_": [577, 580], "delattr": [577, 580, 1030], "vectorizer2": 577, "raw_docu": [577, 580], "get_stop_word": [577, 578, 580], "x_inv": [577, 580], "con": 578, "yates2011": 579, "baeza": [579, 718, 1021], "yate": [579, 718], "ribeiro": [579, 718, 1031], "neto": [579, 718], "addison": [579, 718], "weslei": [579, 718], "mrs2008": 579, "118": 579, "tfid": 579, "22314355": 579, "51082562": 579, "91629073": 579, "_check_stop_list": 580, "pvalu": [581, 584, 585, 587, 588, 589, 813], "k_best": [581, 885, 989], "fdr": 581, "fwe": 581, "iff": [581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 859], "retent": [581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592], "n_selected_featur": [581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592], "n_original_featur": [581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592], "attrgett": [582, 586], "barnhil": [582, 583], "vapnik": [582, 583], "n_subsets_of_featur": 583, "narrai": 583, "benjamini": [584, 1024, 1025], "hochberg": [584, 1024, 1025], "false_discovery_r": 584, "norm_ord": [586, 1025], "threshold_": [586, 1025], "3252302": 586, "83462377": 586, "49750423": 586, "55245": 586, "half_cal": 586, "half_selector": 586, "unspecifi": [588, 589, 787, 973], "_get_support_mask": 590, "n_features_to_select_": 591, "variances_": 592, "weed": 593, "p_valu": [593, 594, 595], "f_statist": [594, 595], "force_finit": [595, 598, 716, 773, 976, 1032], "pearson": [595, 598, 1031], "discrete_featur": [596, 597], "essenc": [596, 597, 731, 973, 976], "kraskov": [596, 597], "stogbauer": [596, 597], "grassberg": [596, 597], "phy": [596, 597], "kozachenko": [596, 597], "leonenko": [596, 597], "probl": [596, 597], "peredachi": [596, 597], "correlation_coeffici": 598, "fmin_l_bfgs_b": [599, 600], "max_iter_predict": 599, "copy_x_train": [599, 600], "one_vs_rest": [599, 977], "compoundkernel": [599, 1032], "obj_func": [599, 600], "initial_theta": [599, 600], "theta_opt": [599, 600], "func_min": [599, 600], "_posterior_mod": 599, "log_marginal_likelihood_value_": [599, 600], "9866": [599, 608, 611], "83548752": 599, "03228706": 599, "13222543": 599, "79064206": 599, "06525643": 599, "14410151": 599, "clone_kernel": [599, 600, 1028], "n_kernel_param": [599, 600], "log_likelihood_gradi": [599, 600], "x_train_": 600, "y_train_": 600, "3680": [600, 603, 614], "y_cov": 600, "n_samples_x": [600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 762, 763, 764, 765, 766, 767, 768, 769], "requires_vector_input": [601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614], "51292546": 601, "09861229": [601, 986], "n_samples_i": [601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 762, 763, 764, 765, 766, 767, 768, 769], "n_kernel": 601, "k_gradient": [601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614], "k_diag": [601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614], "hyperparameter_constant_valu": 602, "3696": 602, "606": [602, 818, 977], "hyperparameter_sigma_0": 603, "edward": [603, 608, 611, 1021, 1026, 1027, 1028, 1029, 1033], "hyperparameter_length_scal": [604, 608, 611, 612], "hyperparameter_period": 604, "0144": 604, "3894": 604, "3467": 604, "559": 605, "namedtupl": [606, 934, 1034], "maxsiz": 606, "mat\u00e9rn": 608, "appr": 608, "8513": 608, "0368": 608, "1117": 608, "8086": [608, 1025], "0693": 608, "1220": 608, "gamma_bound": 609, "pairwise_kernels_kwarg": 609, "additive_chi2": [609, 627, 753, 762], "pairwise_kernel_funct": [609, 632, 762], "hyperparameter_gamma": 609, "9733": [609, 612], "8880": 609, "05663": 609, "05532": 609, "8676": [609, 1025], "07073": 609, "06165": 609, "__mul__": 610, "8354": [611, 1025], "03228": 611, "1322": 611, "7906": [611, 638], "0652": 611, "1441": 611, "hyperparameter_alpha": 612, "8881": 612, "0566": 612, "05518": 612, "8678": 612, "0707": 612, "0614": 612, "hyperparameter_noise_level": 614, "initial_strategi": 616, "imputation_ord": [616, 1028], "skip_complet": 616, "min_valu": [616, 1029, 1030], "max_valu": [616, 1029, 1030], "keep_empty_featur": [616, 617, 619, 966, 1033], "nullabl": [616, 617, 618, 619, 1029, 1033], "na": [616, 617, 618, 619, 757, 766, 906, 908, 909, 1028, 1029, 1032, 1033], "known_val": 616, "Nearness": 616, "arab": 616, "broadcast": 616, "missingind": [616, 617, 619, 966, 1026, 1027, 1028, 1032, 1034], "initial_imputer_": 616, "imputation_sequence_": 616, "feat_idx": 616, "neighbor_feat_idx": 616, "n_features_with_missing_": 616, "indicator_": [616, 617, 619], "knp": 616, "stef": [616, 966], "buuren": [616, 966], "karin": [616, 966], "groothui": [616, 966], "oudshoorn": [616, 966], "buck": 616, "1960": [616, 705], "306": 616, "imp_mean": [616, 619], "9584": [616, 1025], "nan_euclidean": [617, 750, 766], "_pairwise_cal": 617, "kwd": [617, 759, 762, 766, 769, 778, 779], "olga": [617, 966], "troyanskaya": [617, 966], "cantor": [617, 966], "gavin": [617, 966], "sherlock": [617, 966], "pat": [617, 966], "botstein": [617, 966], "russ": [617, 966], "altman": [617, 966], "bioinformat": [617, 966], "520": [617, 837, 966, 979], "n_output_featur": 617, "error_on_new": 618, "features_": [618, 966], "n_missing_featur": 618, "x2_tr": 618, "n_features_with_miss": 618, "statistics_": 619, "n_features_missing_ind": 619, "x_imput": 619, "n_features_out": 619, "quadcontourset": 620, "quadmesh": 620, "feature_1": [620, 901], "feature_2": 620, "nicer": 620, "pd_result": 621, "target_idx": 621, "decil": [621, 1029], "is_categor": 621, "pdp": [621, 983, 1032], "nonexist": 621, "deciles_vlines_": 621, "vlines_": 621, "deciles_hlines_": 621, "bars_": 621, "heatmaps_": 621, "pdp_lim": 621, "ice_lines_kw": 621, "pd_line_kw": 621, "contour_kw": 621, "disp1": 621, "disp2": 621, "pdp_line_kw": 621, "bar_kw": 621, "heatmap_kw": 621, "seq": 622, "n_values_feature_j": 622, "bre": [623, 992], "4666": 623, "2211": 623, "x_min_": 624, "x_max_": 624, "n_threshold": [624, 715, 770, 777], "stepwis": [624, 643, 644, 645, 671, 672, 972], "increasing_": 624, "isotonic_regress": [624, 1031], "secondari": [624, 1022], "leeuw": 624, "1977": 624, "nilotp": [624, 626], "chakravarti": [624, 626], "308": 624, "pava": 624, "hornik": 624, "mair": 624, "kruskal": [624, 679, 683, 973], "psychometrica": 624, "iso_reg": 624, "8628": 624, "7256": 624, "isotonicregression0": 624, "increasing_bool": 625, "fisher_transform": 625, "sample_step": 627, "sample_interv": 627, "sample_interval_": [627, 1034], "skewedchi2sampl": [627, 628, 629, 630, 968, 1025, 1032, 1033], "chi2_kernel": [627, 631, 746, 753, 974, 1019], "additive_chi2_kernel": [627, 747, 753, 968], "vedaldi": [627, 968], "zisserman": [627, 968, 976], "chi2sampl": 627, "9499": 627, "component_indices_": [628, 1031], "normalization_": 628, "additivechi2sampl": [628, 629, 630, 631, 746, 747, 968, 1032, 1034], "kernel_metr": [628, 629, 630, 631], "seeger": 628, "mahdavi": 628, "jin": [628, 1029, 1030], "data_transform": 628, "9987": 628, "fft": 629, "indexhash": 629, "bithash": 629, "indexhash_": 629, "bithash_": 629, "kitchen": [630, 968], "sink": [630, 968], "random_offset_": [630, 631], "random_weights_": [630, 631], "rahimi": [630, 968], "benjamin": [630, 1020, 1021, 1029, 1030, 1031, 1032, 1033, 1034], "recht": [630, 968], "berkelei": [630, 896, 897], "brecht": 630, "rah": 630, "rbf_featur": [630, 968], "skewed": [631, 1025], "secant": 631, "hyperbol": [631, 845, 846, 974, 980], "fuxin": 631, "catalin": 631, "ionescu": [631, 968, 1028], "cristian": 631, "sminchisescu": [631, 968], "chi2_featur": 631, "2c": [632, 641, 661, 662, 663, 664, 676, 968], "492": [632, 969, 1009], "493": [632, 888, 969], "alpha_1": [633, 634, 972], "alpha_2": [633, 634, 972], "lambda_1": [633, 634, 972], "lambda_2": [633, 634, 972], "threshold_lambda": 633, "x_offset_": [633, 634, 1030], "x_scale_": [633, 634, 1030], "mackai": [633, 634, 972], "ashra": 633, "salakhutdinov": [633, 837, 979], "utstat": 633, "rsalakhu": 633, "sta4273": 633, "lecture2": 633, "computed_scor": 634, "appendix": [634, 665, 972, 986], "wipf": [634, 972], "nagarajan": [634, 972], "2_2": [635, 636, 641, 642, 643, 644, 645, 649, 650, 651, 652, 661, 670, 671, 672, 673], "glmnet": [635, 636, 1018], "sparse_coef_": [635, 641, 649, 651, 1018], "dual_gap_": [635, 636, 641, 642, 649, 650, 651, 652, 1031], "max_j": [635, 641], "w_j": [635, 641, 976, 990], "ext": 635, "83816048": 635, "55968825": 635, "coef_init": [635, 636, 641, 642, 649, 650, 651, 652, 655, 657, 665, 666, 667, 670, 673], "mono": [635, 636, 641, 642, 649, 650, 651, 652, 670, 673], "_21": [635, 636, 641, 642, 649, 650, 651, 652, 670, 673], "sum_j": [635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 972, 976, 981], "alpha_min": [635, 636, 639, 641, 642, 643, 645, 649, 650, 651, 652, 670, 671, 672, 673], "alpha_max": [635, 636, 641, 642, 649, 650, 651, 652, 670, 673], "ndim": [635, 636, 641, 642, 649, 650, 651, 652, 670, 673, 908, 909], "multitaskelasticnet": [635, 636, 641, 650, 651, 652, 670, 972, 1018, 1025, 1026, 1029, 1031], "multitaskelasticnetcv": [635, 636, 641, 649, 651, 652, 670, 972, 1021, 1028, 1029, 1031], "l1_ratio_": [636, 648, 650], "n_l1_ratio": [636, 648, 650, 1021], "199": [636, 739, 991], "unpen": [637, 658, 669, 972], "raphson": [637, 658, 669], "g_j": [637, 658, 669], "896": 637, "795": 637, "pg_i": 638, "scale_": [638, 857, 858, 866, 868, 878, 986, 1023], "outliers_": 638, "elvezio": [638, 972], "ronchetti": [638, 972], "concomit": [638, 972], "owen": [638, 1027, 1028], "statweb": [638, 671, 672], "hhu": [638, 1027], "806": 638, "7200": 638, "4923": 638, "1698": 638, "0106": 638, "9221": 638, "0226": 638, "fit_path": [639, 643, 644, 645, 671, 672], "jitter": [639, 643, 1029], "coef_path_": [639, 640, 643, 644, 972], "active_": [639, 640, 643, 644], "larscv": [639, 654, 671, 672, 1025, 1031], "1111": [639, 645], "max_n_alpha": [640, 644], "n_cv_alpha": [640, 644], "cv_alpha": [640, 644], "lassolar": [640, 641, 642, 644, 645, 652, 653, 654, 671, 672, 673, 972, 1009, 1018, 1019, 1021, 1025, 1028, 1029, 1031], "9996": 640, "2961": 640, "3996": 640, "2_f": 641, "_11": 641, "4951": 642, "2_fro": [642, 651, 652, 673], "coef_path": [642, 652, 673], "46874778": [642, 652, 673], "2159048": [642, 652, 673], "4425765": [642, 652, 673], "23689075": [642, 652, 673], "coef_path_lar": [642, 652, 673], "coef_path_continu": [642, 652, 673], "interp1d": [642, 652, 673], "46915237": [642, 652, 673], "23668876": [642, 652, 673], "congruenc": [643, 644, 645, 671, 672], "fragil": 644, "3972": 644, "2222": 645, "rank_": 646, "singular_": 646, "maxent": [647, 648, 972], "primal": [647, 648, 666, 888, 889, 990, 991], "synthetic_feature_weight": [647, 648], "ciyou": 647, "byrd": 647, "jorg": [647, 1021, 1030, 1032], "noced": 647, "lui": [647, 1019, 1021, 1022, 1026], "iem": 647, "lbfgsb": 647, "schmidt": [647, 972, 1021], "le": [647, 856, 967, 972, 979, 987, 989, 1026, 1030, 1031], "roux": [647, 972, 989], "00860051": 647, "defazio": [647, 972], "lacost": [647, 972], "hsiang": [647, 1022], "fu": [647, 1022], "fang": [647, 1025, 1026], "lan": [647, 1033], "chih": [647, 1023], "jen": [647, 1026], "maxent_du": 647, "cs_": 648, "l1_ratios_": 648, "coefs_paths_": [648, 1028], "coefs_path": 648, "n_l1_ratios_": 648, "w_ij": 649, "eps_": [649, 651], "45663524": 649, "45612256": 649, "0872422": 649, "fro_2": [650, 652], "multitasklassocv": [650, 1021, 1028, 1029, 1031], "52875032": 650, "46958558": 650, "00166409": 650, "60809415": 651, "94592424": 651, "41888636": 651, "87382323": 651, "9994": 652, "5713": 652, "153": 652, "7971": 652, "9015": [652, 1026], "n_nonzero_coefs_": [653, 654], "orthogonal_mp_gram": [653, 654, 674, 1032], "mallat": [653, 674, 675, 972], "3397": [653, 674, 675], "3415": [653, 674, 675], "papier": [653, 674, 675], "mallatpursuit93": [653, 674, 675], "rubinstein": [653, 674, 675], "zibulevski": [653, 674, 675], "elad": [653, 674, 675], "technion": [653, 674, 675, 972], "ronrubin": [653, 674, 675, 972], "ksvd": [653, 674, 675, 972], "9991": [653, 654, 1026], "3854": [653, 654], "previous_loss": [655, 656, 657, 666], "pa": [655, 656, 885, 972, 976, 989], "preset": [655, 657, 665, 980], "t_": [655, 656, 657, 665, 666, 667, 845, 846, 990], "loss_function_": [655, 657, 665, 666], "volume7": [655, 656], "crammer06a": [655, 656], "crammer": [655, 656, 723, 972, 976, 991], "dekel": [655, 656, 972], "keshat": [655, 656, 972], "shalev": [655, 656, 972, 990], "shwartz": [655, 656, 972, 990], "singer": [655, 656, 723, 972, 976, 990, 991], "26642044": 655, "45070924": 655, "67251877": 655, "64185414": 655, "84127814": 655, "intercept_init": [655, 657, 665, 667], "y_all": [655, 657, 665, 816, 817, 845], "epsilon_insensit": [656, 665, 667, 889, 972, 990], "squared_epsilon_insensit": [656, 665, 667, 889, 972, 1024], "48736655": 656, "18818427": 656, "59122734": 656, "94731329": 656, "02306214": 656, "eta0": [657, 665, 666, 667, 990], "lossfunct": [657, 665, 666, 1027], "therein": 657, "939": [657, 1006], "990": [658, 976], "088": [658, 984], "676": 658, "solver_opt": 659, "ipm": 659, "linprog": [659, 972], "is_data_valid": [660, 972], "is_model_valid": [660, 972], "max_trial": [660, 972], "max_skip": 660, "stop_n_inli": [660, 972], "stop_scor": [660, 972], "stop_prob": 660, "mad": [660, 1024], "costlier": 660, "n_trials_": 660, "n_skips_no_inliers_": 660, "n_skips_invalid_data_": 660, "n_skips_invalid_model_": 660, "sri": [660, 972, 1025, 1026], "bmva": 660, "bmvc": [660, 972], "paper355": 660, "9885": 660, "9417": 660, "15000": [661, 676, 845, 846], "btol": [661, 663], "gcv_mode": [662, 1020], "store_cv_valu": [662, 664, 1026, 1029], "alpha_per_target": [662, 1030], "cv_values_": [662, 664], "ridgeclassifiercv": [662, 663, 776, 976, 977, 1026, 1028, 1029, 1031, 1032], "5166": 662, "gcv": [662, 664], "9595": 663, "9630": 664, "power_t": [665, 666, 667, 845, 846, 990], "best_loss": [665, 667], "leon": [665, 666, 667, 1018], "bottou": [665, 666, 667, 980, 990], "pow": [665, 666, 667, 845, 846], "dl": 665, "775047": 665, "775151": 665, "justif": 665, "volume2": 665, "zhang02c": 665, "offset_init": 666, "unshifft": 666, "n_subsampl": [668, 914], "breakdown_": 668, "n_subpopulation_": 668, "xin": [668, 972, 1026], "dang": [668, 972], "hanxiang": [668, 972], "peng": [668, 972, 1024, 1025, 1026, 1028, 1030], "xueqin": [668, 972], "hepe": [668, 972], "olemiss": 668, "xdang": 668, "mtse": 668, "9884": 668, "5871": 668, "coeff": 669, "839": 669, "599": 669, "copy_gram": [671, 672, 675], "return_path": [671, 672, 674, 675], "lars_path_gram": [671, 972, 1027], "tib": [671, 672], "xgamma": 674, "norms_squar": 675, "copy_xi": 675, "return_intercept": [676, 1027], "linearoper": 676, "_preprocess_data": 676, "path_method": [677, 973], "neighbors_algorithm": [677, 678], "arnoldi": [677, 678, 682], "fw": 677, "warshal": [677, 973], "kernel_pca_": 677, "nbrs_": [677, 678], "dist_matrix_": 677, "tenenbaum": [677, 973], "reconstruction_error": 677, "frobenius_norm": 677, "d_fit": 677, "x_fit": 677, "n_queri": [677, 830, 831, 832, 834, 836, 838, 839, 840], "hessian_tol": [678, 682], "modified_tol": [678, 682], "reconstruction_error_": 678, "rowei": [678, 682, 837, 973, 979], "saul": [678, 682, 973, 1025, 1026, 1028], "2323": [678, 682, 973], "donoho": [678, 682, 973], "grime": [678, 682, 973], "natl": [678, 682, 973], "acad": [678, 682, 973], "5591": [678, 682, 973], "mlle": [678, 682, 973], "zha": [678, 682, 973], "shanghai": [678, 682, 973], "univ": [678, 682, 973], "406": [678, 682, 973], "immers": [679, 683], "nonmetr": [679, 683], "smacof": [679, 1033], "stress": [679, 683, 973, 1033], "stress_": 679, "dispar": [679, 683, 973], "dissimilarity_matrix_": 679, "psychometrika": [679, 683, 973], "1964": [679, 683, 864, 876, 973], "borg": [679, 683, 973], "groenen": [679, 683, 973], "affinity_matrix": 680, "n_neighbors_": [680, 834], "early_exagger": 681, "min_grad_norm": [681, 1024], "der": [681, 685, 973, 1021, 1022, 1026], "maaten": [681, 685, 973], "bhtsne": [681, 1025], "opentsn": 681, "abort": 681, "pdist": [681, 766, 769], "pairwise_distance_funct": [681, 685, 766, 769, 979], "barn": [681, 1023, 1025, 1028], "hut": [681, 1023, 1025, 1028], "nlogn": 681, "kl_divergence_": [681, 1025], "learning_rate_": [681, 846], "hinton": [681, 837, 844, 845, 846, 973, 979, 980, 981], "2579": 681, "2605": 681, "lvdmaaten": [681, 1025], "oct": [681, 757, 973, 979], "3221": [681, 973], "3245": [681, 973], "jmlr_2014": 681, "belkina": [681, 973], "ciccolella": [681, 973], "anno": [681, 973], "halpert": [681, 973], "spidlen": [681, 973], "snyder": [681, 973], "cappion": [681, 973], "kobak": [681, 1031], "beren": 681, "transcriptom": 681, "guttman": 683, "norm_laplacian": 684, "drop_first": 684, "nk": 685, "2n": [685, 968, 980], "3k": 685, "cosine_dist": [685, 750, 979, 1024], "jarkko": 685, "venna": 685, "samuel": [685, 1000, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "kaski": 685, "icann": 685, "verlag": 685, "491": 685, "twelfth": 685, "pmlr": 685, "391": 685, "im_": 686, "axesimag": 686, "text_": 686, "include_valu": 686, "values_format": [686, 1028], "im_kw": [686, 1032], "text_kw": [686, 1033], "get_metr": 688, "predictionrecalldisplai": [689, 976], "chance_level_": [689, 691, 1034], "drop_intermedi": [689, 691, 770, 777, 1034], "errors_lines_": 690, "with_error": 690, "scatter_": 690, "balanced_accuracy_scor": [692, 775, 976, 1026], "imperfectli": [692, 722, 976], "label_tru": [693, 706, 725, 743, 745, 781], "upperlimit": 693, "nat": [693, 743, 745, 1032], "expected_ri": 694, "discord": 694, "hubert1985": 694, "1007": 694, "2fbf01908075": 694, "steinley2004": 694, "wk": 694, "rand_index": 694, "adjusted_rand_index": 694, "chacon": 694, "chac\u00f3n": 694, "rastrojo": 694, "balanced_accuraci": [697, 976, 1026], "brodersen": 697, "ong": 697, "stephan": [697, 1021, 1027, 1028, 1030], "buhmann": 697, "20th": 697, "3121": 697, "kelleh": [697, 976], "aoif": [697, 976], "arci": [697, 976], "y_true_categor": [698, 976], "037": 698, "calinski": [699, 1024], "harabasz": 699, "allow_non": 700, "thrown": [700, 1027, 1028], "tn": [701, 707, 976], "negative_class": 701, "zebra": 701, "output_dict": [702, 1026, 1030], "zero_divis": [702, 717, 718, 726, 771, 772, 775, 1028, 1030, 1034], "precision_recall_fscore_support": [702, 717, 718, 772, 775, 976, 1022, 1026, 1028, 1034], "multilabel_confusion_matrix": [702, 717, 718, 726, 772, 775, 976, 1027], "conting": [703, 704, 719, 743, 1024], "n_classes_tru": [703, 743], "n_classes_pr": [703, 743], "cohen": [705, 1026], "p_o": 705, "p_e": 705, "artstein": 705, "poesio": 705, "linguist": [705, 885, 989], "555": 705, "596": 705, "label_pr": [706, 724, 725, 743, 745, 781], "ant": [707, 742, 976], "a_row": 708, "a_column": 708, "b_row": 708, "b_column": 708, "tsoumaka": [709, 722, 728, 976], "kataki": [709, 722, 728, 976], "vlahava": [709, 728, 976], "handbook": [709, 728, 976], "667": [709, 728, 976], "685": [709, 728, 976], "raw_valu": [710, 711, 716, 733, 734, 736, 738, 739, 741, 773, 976, 1026, 1029], "wainwright": [710, 711, 712], "su": [710, 711, 712], "statlearnspars": [710, 711, 712], "764": [710, 976], "691": 710, "8125": 710, "57142857": 710, "d2": 711, "d2_absolute_error_scor": [711, 976, 1032], "koenker": [711, 972], "roger": [711, 1025, 1026, 1030], "jos\u00e9": [711, 1021, 1031], "772": 711, "045": 711, "bouldin": 713, "farther": 713, "log_bas": 714, "ignore_ti": [714, 744], "ndcg": [714, 744, 976, 1025], "ndcg_score": [714, 976, 1025, 1028, 1033, 1034], "sharper": 714, "discounted_cumulative_gain": 714, "dcg": [714, 744, 976, 1025], "jarvelin": [714, 744, 976], "kekalainen": [714, 744, 976], "colt": [714, 744, 976], "mcsherri": [714, 744, 976], "najork": [714, 744, 976], "european": [714, 744, 976], "421": [714, 744, 976], "groud": [714, 744], "true_relev": [714, 744], "propabl": 715, "imperfect": [716, 773, 976, 1020], "variance_weight": [716, 773, 976], "n_unique_label": [717, 718, 726, 771, 772, 775, 940], "fbeta_scor": [717, 730, 771, 976, 1020, 1021, 1022, 1023, 1028, 1034], "undefinedmetricwarn": [717, 718, 771, 772, 775, 1027], "y_true_empti": 717, "y_pred_empti": [717, 718], "66666667": [717, 770, 838, 986], "fowlk": [719, 1024], "mallow": [719, 1024], "get_scorer_nam": [720, 976, 1032], "forgiv": 722, "upperbound": 722, "grigorio": 722, "ioanni": 722, "wareh": 722, "septemb": [722, 976, 1018, 1021, 1024, 1026, 1031], "pred_decis": [723, 976, 1031], "disagre": [723, 983], "kobi": 723, "yoram": 723, "AND": 723, "denero": 723, "gluster": 724, "v_measur": [724, 781], "6666": [726, 976, 1024], "5833": [726, 976], "lrap": [727, 976], "209": [729, 864], "21616": 729, "needs_proba": [730, 1027], "needs_threshold": [730, 976], "ftwo_scor": [730, 976], "mcc": [731, 976, 1032], "baldi": 731, "brunak": 731, "chauvin": 731, "andersen": [731, 1032], "nielsen": [731, 1026], "gorodkin": 731, "jurman": 731, "riccadonna": 731, "furlanello": 731, "cen": 731, "mape": [734, 976], "3273": 734, "5515": 734, "6198": 734, "112589990684262": 734, "0568": 735, "4260": [737, 740], "612": 738, "822": 738, "41666667": 738, "825": 738, "msle": [739, 976], "rmsle": 739, "00462428": 739, "08377444": 739, "samplewis": [742, 976], "mcm": [742, 976], "mcm_": 742, "multi_confus": 742, "normalized_discounted_cumulative_gain": 744, "dcg_score": [744, 976, 1025, 1028], "kernel_matrix": [746, 747, 754, 764], "marszalek": [746, 747, 974], "lazebnik": [746, 747, 974], "schmid": [746, 747, 974], "ouvert": [746, 747, 974], "00171412": [746, 747, 974], "cosine_similar": [748, 753, 974, 1023], "dense_output": [749, 755, 881, 926, 1026], "linear_kernel": [749, 753, 974, 1026], "haversine_dist": [750, 1027], "y_norm_squar": 751, "x_norm_squar": [751, 1023], "paired_dist": [751, 757, 766, 1022], "41421356": [751, 757, 979], "arcsin": 752, "lon": 752, "ezeiza": 752, "airport": 752, "bueno": 752, "argentina": 752, "gaull": 752, "bsa": 752, "83333": 752, "5166646": 752, "0083899664": 752, "53844117956": 752, "bsas_in_radian": 752, "paris_in_radian": 752, "6371000": 752, "kilomet": 752, "11099": 752, "54035582": 752, "polynomial_kernel": [753, 974], "rbf_kernel": [753, 974, 1022], "laplacian_kernel": [753, 974, 1023], "sigmoid_kernel": [753, 974], "kernal_metr": 753, "sum_over_featur": [756, 1018, 1033], "componentwis": 756, "sq": 757, "dixon": [757, 1028, 1029], "cybernet": 757, "ieeexplor": 757, "4310090": 757, "filter_param": 762, "jth": [762, 766], "tanh": [765, 845, 846, 974, 991], "force_all_finit": [766, 906, 908, 909, 1029, 1032], "distance_metr": [766, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842], "metric_kwarg": [767, 768], "reduce_func": [769, 1029], "d_chunk": 769, "sought": 769, "neigh": [769, 830, 831, 832, 834, 836, 838, 839, 840], "gen": 769, "probas_pr": 770, "warn_for": 771, "shantanu": 771, "godbol": 771, "sunita": 771, "sarawagi": 771, "pig": 771, "948": [773, 976], "max_fpr": [776, 976, 1026], "provost": [776, 976], "ceder": [776, 976], "stern": [776, 976], "fawcett": [776, 777, 976], "874": [776, 777, 976], "generalis": [776, 976, 997], "multioutputclassifi": [776, 817, 819, 821, 976, 1025, 1027, 1028, 1029, 1030, 1034], "n_samples_a": [778, 779], "favour": [778, 973, 975, 1027], "mean_prior": 783, "degrees_of_freedom_prior": 783, "verbose_interv": [783, 784], "wishart": 783, "emipr": 783, "precisions_": [783, 784], "precisions_cholesky_": [783, 784, 1032], "converged_": [783, 784], "lower_bound_": [783, 784, 1026], "weight_concentration_prior_": 783, "weight_concentration_": 783, "mean_precision_prior_": 783, "mean_precision_": 783, "mean_prior_": 783, "degrees_of_freedom_prior_": 783, "degrees_of_freedom_": 783, "covariance_prior_": 783, "hagai": 783, "attia": 783, "bgm": 783, "n_dimens": [783, 784], "log_prob": [783, 784], "weights_init": 784, "precisions_init": [784, 1032], "gm": 784, "pre_dispatch": [785, 791, 799, 807, 809, 810, 811, 812, 815, 942, 1021], "error_scor": [785, 788, 789, 791, 799, 807, 810, 811, 812, 815, 965, 1022, 1026, 1030, 1033], "explos": [785, 799, 809, 810, 811], "fitfailedwarn": [785, 788, 789, 791, 799, 807, 810, 811, 812, 815], "param_kernel": [785, 799], "param_degre": 785, "split0_test_scor": [785, 799, 1024], "rank_t": 785, "split1_test_scor": [785, 799], "split0_train_scor": [785, 799, 1024], "split1_train_scor": [785, 799], "mean_train_scor": [785, 799, 1024], "std_train_scor": [785, 799, 1024], "split0_test_precis": [785, 799], "mean_train_precis": [785, 799], "best_estim": [785, 788, 789, 799], "scorer_": [785, 788, 789, 799], "n_splits_": [785, 788, 789, 799], "refit_time_": [785, 788, 789, 799, 1026], "multimetric_": [785, 788, 789, 799], "parametergrid": [785, 1020, 1026], "split2_test_scor": 785, "num_sampl": [785, 799, 1033], "stratif": [786, 787, 793, 794, 803, 804, 805, 947, 1027], "group_kfold": 786, "set_split_request": [786, 787, 792, 794, 803], "aggressive_elimin": [788, 789, 965], "r0": [788, 789], "replai": [788, 789], "n_remaining_candidates_": [788, 789], "n_candid": [788, 789, 965], "max_resources_": [788, 789], "min_resources_": [788, 789], "n_required_iterations_": [788, 789], "n_possible_iterations_": [788, 789], "exceed": [788, 789, 1024], "n_unique_tick": [791, 812], "n_tick": [791, 807, 812, 815], "neg_": [791, 807, 1024], "errorbar_": [791, 807], "errorbarcontain": [791, 807], "line2d": [791, 807], "fill_between_": [791, 807], "polycollect": [791, 807], "exploit_incremental_learn": [791, 812], "log_scal": [791, 1034], "fill_between_kw": [791, 807], "errorbar_kw": [791, 807], "model_selectionkfold": [791, 807], "predispatch": [791, 807, 812, 815], "negat": [791, 807, 976], "combinator": 795, "lpo": 795, "param_list": 797, "rounded_list": 797, "89856": 797, "923223": 797, "878964": 797, "038159": 797, "parametersampl": [799, 1020, 1026, 1030], "2652124": 800, "rskf": 801, "36851234": 801, "sizeabl": [802, 805], "sad": [803, 804], "sss": 805, "logistic_regress": 807, "n_valu": [807, 815, 1026], "checked_cv": 808, "3315057": [810, 811], "08022103": [810, 811], "03531816": [810, 811], "test_r2": 811, "test_auc": 811, "train_r2": 811, "train_auc": 811, "3635": 811, "3573": 811, "6114": 811, "28009951": 811, "3908844": 811, "22784907": 811, "train_sizes_ab": 812, "train_size_ab": 812, "cv_train_scor": 812, "cv_test_scor": 812, "permutation_scor": 813, "pairwise_indices_": 816, "outputcodeclassifi": [816, 817, 1025, 1030, 1034], "label_binarizer_": 817, "multilabel_": [817, 1023], "onevsoneclassifi": [817, 818, 1019, 1021, 1022, 1024, 1025, 1027, 1030, 1032], "code_s": [818, 977], "code_book_": 818, "bakiri": [818, 977], "pict": [818, 977], "order_": [819, 822], "regressorchain": [819, 821, 1026, 1029, 1033], "jess": [819, 977, 1031], "pfahring": [819, 977], "geoff": [819, 977], "holm": [819, 977], "eib": [819, 977], "8387": 819, "9431": 819, "4576": 819, "8878": 819, "3684": 819, "2640": 819, "0321": 819, "9935": 819, "0625": 819, "y_decis": 819, "partial_fit_param": [820, 821], "load_linnerud": [821, 1024, 1029], "force_alpha": [823, 824, 825, 827, 1033], "lidston": [823, 824, 825, 827, 978], "class_count_": [823, 824, 825, 826, 827], "class_log_prior_": [823, 824, 825, 827], "feature_count_": [823, 825, 827], "feature_log_prob_": [823, 824, 825, 827], "categoricalnb": [823, 825, 826, 827, 978, 1028, 1029, 1030, 1031, 1033], "renni": [823, 825, 978, 1026], "schuetz": [823, 827], "htmledit": [823, 827, 974], "mccallum": [823, 978], "nigam": [823, 978], "metsi": [823, 978], "androutsopoulo": [823, 978], "palioura": [823, 978], "cea": [823, 978], "predict_joint_log_proba": [823, 824, 825, 826, 827, 1033], "min_categori": [824, 1030], "category_count_": 824, "n_categories_": 824, "mirror": [825, 965], "mahout": 825, "weka": 825, "feature_all_": 825, "shih": [825, 978], "teevan": [825, 978], "karger": [825, 978], "623": [825, 978], "jrenni": 825, "icml03": 825, "var_smooth": [826, 1026], "stan": 826, "levequ": [826, 868], "cstr": 826, "epsilon_": 826, "theta_": [826, 978], "clf_pf": 826, "distancemetric64": [828, 829], "valid_metr": [828, 829, 979], "19662693": [828, 829], "29473397": [828, 829], "tree_copi": [828, 829], "query_radiu": [828, 829], "count_onli": [828, 829], "kernel_dens": [828, 829], "94114649": [828, 829], "83281226": [828, 829], "2071716": [828, 829], "two_point_correl": [828, 829], "580": [828, 829], "get_arrai": [828, 829], "get_n_cal": [828, 829], "n_call": [828, 829], "get_tree_stat": [828, 829], "tree_stat": [828, 829], "breadth_first": [828, 829, 833], "return_log": [828, 829], "k_true": [828, 829], "k_ret": [828, 829], "breadth": [828, 829, 833, 1000, 1020], "dualtre": [828, 829], "sort_result": [828, 829, 836, 838, 839, 840, 1030], "radii": [828, 829], "reset_n_cal": [828, 829], "effective_metric_": [830, 831, 832, 834, 836, 838, 839, 840, 979], "callbl": 830, "effective_metric_params_": [830, 831, 832, 834, 836, 838, 839, 840], "outputs_2d_": [830, 838, 1028], "nearest_neighbor_algorithm": [830, 838, 839], "333": 830, "n_index": [830, 831, 832, 834, 836, 838, 839], "neigh_dist": [830, 831, 832, 834, 836, 838, 839, 840], "neigh_ind": [830, 831, 832, 834, 836, 838, 839, 840], "nearest_neighbors_algorithm": [831, 836], "nearer": [832, 840, 979], "x_dist_graph": 832, "silverman": [833, 1033], "binarytre": [833, 1022, 1026, 1030], "bandwidth_": 833, "log_dens": 833, "52955942": 833, "51462041": 833, "60244657": 833, "logprob": 833, "negative_outlier_factor": 834, "9821": 834, "0370": 834, "3697": 834, "shifted_opposite_lof_scor": 834, "opposite_lof_scor": 834, "wminkowski": [835, 1030, 1032], "narasimhan": 835, "chu": [835, 1034], "shrunken": [835, 1018], "6567": 835, "6572": 835, "nbr": [836, 979], "neighborsclassifi": [836, 838, 839, 840, 1018], "n_features_a": 837, "n_features_b": 837, "goldberg": [837, 979], "neighbourhood": [837, 979], "513": [837, 979], "ncanip": 837, "neighbourhood_components_analysi": 837, "961904": 837, "outlier_label": [838, 1028], "outlier_label_": 838, "33333333": [838, 986], "x_cluster": 840, "warn_when_not_sort": 843, "efficiencywarn": [843, 1033], "sml": [844, 981], "pcd": [844, 981], "sweep": 844, "gibb": [844, 981, 996], "intercept_hidden_": 844, "intercept_visible_": 844, "h_samples_": 844, "osindero": [844, 981], "teh": [844, 981], "1527": 844, "1554": 844, "absp": 844, "fastnc": 844, "tieleman": [844, 981], "v_new": 844, "pseudo_likelihood": 844, "relu": [845, 846], "beta_1": [845, 846], "beta_2": [845, 846], "max_fun": [845, 846, 1028], "n_layer": [845, 846], "neuron": [845, 846, 974, 980], "tan": [845, 846, 980, 1025], "rectifi": [845, 846], "kingma": [845, 846, 980], "diederik": [845, 846, 980, 1033], "jimmi": [845, 846, 980, 1024, 1026], "gradual": [845, 846, 990], "effective_learning_r": [845, 846], "best_loss_": [845, 846, 1033], "best_validation_score_": [845, 846, 1033], "validation_scores_": [845, 846, 1033], "intercepts_": [845, 846, 980], "n_layers_": [845, 846], "out_activation_": [845, 846], "geoffrei": [845, 846, 980, 1029, 1030, 1031, 1032, 1034], "connectionist": [845, 846], "glorot": [845, 846], "xavier": [845, 846, 1026, 1027, 1028, 1030, 1031], "yoshua": [845, 846, 989], "feedforward": [845, 846], "kaim": [845, 846], "delv": [845, 846], "surpass": [845, 846], "imagenet": [845, 846], "log_y_prob": 845, "named_transform": [847, 1033], "transform_list": 847, "s__p": 848, "n_transformed_featur": 848, "predict_log_proba_param": 848, "y_log_proba": 848, "predict_proba_param": 848, "analyst": 851, "x_tr": [851, 857, 860, 861, 862, 866, 868, 871, 873, 874, 878, 879], "accept_spars": [852, 908, 909, 1025], "inv_kw_arg": 852, "pickleabl": [852, 1024], "6931": 852, "3862": 852, "n_bins_": 853, "int_": 853, "regener": 853, "xinv": 853, "tild": [854, 984, 986], "k_fit_rows_": 854, "k_fit_all_": 854, "1299": [854, 986], "1319": [854, 986], "n_samples1": 854, "n_samples2": 854, "k_new": 854, "neg_label": [855, 872], "y_type_": 855, "sparse_input_": 855, "tokyo": [856, 987], "amsterdam": [856, 987], "max_abs_": 857, "x_std": [858, 874, 986], "data_min_": [858, 1023], "data_max_": [858, 1023], "data_range_": [858, 1023], "unwieldi": 859, "fi": 859, "comedi": 859, "y_indic": 859, "yt": 859, "ands": 859, "feature_name_combin": [861, 1034], "categories_": [861, 862, 869, 986, 1026, 1033], "unregular": [861, 884, 1009, 1027], "intact": [861, 1011], "infrequ": [861, 862, 869, 976, 1018, 1032, 1033, 1034], "infrequent_if_exist": [861, 986], "x_6": 861, "x_7": 861, "drop_idx_": [861, 1029, 1033], "drop_idx": 861, "gender_femal": 861, "gender_mal": 861, "group_1": 861, "group_2": 861, "group_3": 861, "drop_enc": [861, 986], "drop_binary_enc": 861, "custom_combin": 861, "custom_fnames_enc": 861, "x0_str_femal": 861, "x0_str_male": 861, "x1_int_1": 861, "x1_int_2": 861, "x1_int_3": 861, "oh": [861, 1028], "infrequent_sklearn": [861, 986], "n_encoded_featur": [861, 862], "bpo": 862, "43475": 862, "lenient": [862, 997], "min_degre": [863, 1031], "max_degre": [863, 1031], "powers_": 863, "n_output_features_": 863, "nystrom": [863, 1027, 1028], "featurewis": 864, "power_transform": [864, 877, 1026], "biometrika": [864, 876], "954": [864, 876], "386": 864, "ignore_implicit_zero": [865, 877], "landmark": [865, 877, 986], "n_quantiles_": 865, "quantiles_": [865, 986, 1028], "references_": 865, "robustscal": [865, 878, 966, 986, 1023, 1024, 1026, 1028, 1029, 1030, 1034], "with_cent": [866, 878], "with_scal": [866, 878], "unit_vari": [866, 878, 1030], "iqr": [866, 878], "interquartil": [866, 878], "quartil": 866, "75th": 866, "q_min": [866, 878], "q_max": [866, 878], "center_": 866, "robust_scal": [866, 877, 1026], "interquartile_rang": 866, "bspline": 867, "n_features_out_": 867, "with_std": [868, 879, 986, 1026], "n_samples_seen": 868, "5a": 868, "randal": [868, 1022, 1032], "242": [868, 1018], "mic": [869, 986], "target_mean_": [869, 986], "target_type_": 869, "encodings_": [869, 986], "micci": [869, 986], "barreca": [869, 986], "newsl": [869, 986], "enc_auto": 869, "enc_high_smooth": 869, "enc_low_smooth": 869, "ahead": 872, "return_norm": [875, 1025], "notimplementederror": [875, 1025], "compute_inverse_compon": [880, 881, 988], "inverse_components_": [880, 881, 988, 1032], "2759": [880, 881], "afor": [880, 881], "baserandomproject": [880, 881], "ping": [881, 988, 1024, 1025], "density_": 881, "gaussianrandomproject": [881, 988, 1019, 1032, 1034], "church": [881, 988], "kdd06_rp": 881, "cgi": 881, "uoa": 881, "gr": 881, "opta": 881, "0182": 881, "e2": [882, 972], "93lindenstrauss_lemma": 882, "sanjoi": [882, 988], "anupam": [882, 988, 1033], "gupta": [882, 988, 1025, 1026, 1029, 1030, 1031, 1032, 1034], "elementari": [882, 988], "663": [882, 984, 988], "11841": [882, 988], "1112658": [882, 988], "7894": [882, 988], "9868": [882, 988], "steadi": [883, 884], "baselabelpropag": [883, 1025], "xiaojin": 883, "zoubin": 883, "ghahramani": 883, "cmu": 883, "cald": 883, "carnegi": 883, "mellon": 883, "jerryzhu": 883, "label_prop_model": [883, 884], "clamp": [884, 989], "dengyong": 884, "bousquet": 884, "navin": 884, "lal": 884, "schoelkopf": 884, "termination_condition_": 885, "no_chang": 885, "all_label": 885, "33rd": [885, 989], "acl": [885, 989, 990], "stroudsburg": [885, 989], "optmiz": [888, 889], "crammer_sing": [888, 977, 991, 1018], "seldom": 888, "readonli": [888, 889, 1031, 1033, 1034], "raw_coef_": [888, 889], "smo": [888, 889], "526": 888, "1693": 888, "unsur": 889, "582": 889, "023": [889, 984], "class_weight_": [890, 891, 892, 893, 894, 1033], "n_sv": [890, 891, 892, 893, 894, 991, 1028], "fit_status_": [890, 891, 892, 893, 894], "n_support_": [890, 891, 892, 893, 894, 991, 1028], "proba_": [890, 893, 1029], "probb_": [890, 893, 1029], "shape_fit_": [890, 891, 892, 893, 894], "n_dimensions_of_x": [890, 891, 892, 893, 894], "7798": 892, "0547": 892, "0556": 892, "0561": 892, "7332": 892, "unshift": 892, "impract": 893, "tube": [894, 991], "_tree": [896, 897, 898, 899, 1019, 1021], "decision_tree_learn": [896, 897, 992], "olshen": [896, 897, 992], "wadsworth": [896, 897, 992], "belmont": [896, 897, 992], "cutler": [896, 897], "cc_home": [896, 897], "htm": [896, 897], "ccp_path": [896, 897, 898, 899], "get_depth": [896, 897, 898, 899, 1027], "get_n_leav": [896, 897, 898, 899, 1027], "set_predict_proba_request": [896, 898], "extra_tre": [898, 899], "8947": 898, "decision_tre": [900, 901, 902, 992], "out_fil": [900, 992], "leaves_parallel": 900, "special_charact": [900, 992], "fontnam": [900, 1031], "helvetica": [900, 902], "graphviz": [900, 992], "postscript": 900, "tpng": 900, "paint": [900, 902], "dot_data": [900, 992], "digraph": 900, "show_weight": 901, "feature_0": 901, "unrepresent": 903, "keyerror": [903, 1028], "popitem": 903, "lifo": 903, "input_nam": [907, 909, 939, 1032], "accept_large_spars": [908, 909, 1026], "ensure_2d": [908, 909], "allow_nd": [908, 909], "ensure_min_sampl": [908, 909], "ensure_min_featur": [908, 909], "y_numer": 908, "bsr": [908, 909, 1031], "x_convert": 908, "y_convert": 908, "array_convert": 909, "min_val": 912, "max_val": 912, "include_boundari": [912, 1032], "y_org": 913, "class_weight_vect": 913, "king": 913, "zen": 913, "sample_weight_vect": 914, "parenthes": 915, "type_filt": 917, "generate_onli": [919, 1028], "checks_gener": 919, "test_check_estim": 920, "check_estimators_fit_returns_self": 920, "array_lik": 923, "logdet": 923, "slogdet": 923, "6375861597263857": 923, "flip_sign": 925, "svd_lapack_driv": 925, "gesdd": 925, "p5": 925, "transposit": 925, "gesvd": 925, "conquer": 925, "unitari": 925, "vh": 925, "dot_product": 926, "deweight": 927, "min_batch_s": 928, "n_pack": [928, 929], "path_length": 930, "sliceabl": 931, "methodmetadatarequest": 932, "routemappingpair": 933, "routing_info": 933, "methodpair": 934, "other_param": 936, "truthi": 937, "helloifeven": 937, "_x_is_even": 937, "say_hello": 937, "temp_fold": 942, "max_nbyt": 942, "1m": 942, "mmap_mod": 942, "dispatch_next": 942, "dispatch_one_batch": 942, "unprotect": 942, "prefetch": 942, "print_progress": 942, "inner_max_num_thread": 944, "backend_param": 944, "register_parallel_backend": [944, 1026], "pyiodin": 944, "dask": [944, 997, 1026], "workload": [944, 996], "register_rai": 944, "backend_nam": 944, "oversubscript": [944, 1032], "threadpool": 944, "effective_n_job": 944, "tracking_select": 945, "reservoir_sampl": 945, "reservoir": 945, "make_default": 946, "parallelbackendbas": 946, "resampled_arrai": 947, "3x2": [947, 950], "shuffled_arrai": 950, "last_mean": 951, "last_var": 951, "last_n": 951, "return_sum_weight": 957, "sum_weight": 957, "all_or_ani": [960, 1028], "is_fit": 960, "__sklearn_is_fitted__": [960, 1031, 1032], "eg": 960, "substitut": [960, 997, 1024], "raise_except": 962, "array_sym": 962, "is_paramet": 964, "enclos": 965, "set_stat": 965, "bergstra": [965, 1018, 1019], "tournament": 965, "dispos": [965, 1011], "n_resources_i": 965, "n_resources_0": 965, "n_candidates_i": 965, "n_candidates_0": 965, "r_0": 965, "n_resourc": 965, "983667": 965, "951958": 965, "947958": 965, "961009": 965, "955989": 965, "jamieson": 965, "talwalkar": 965, "desalvo": 965, "rostamizadeh": 965, "hyperband": 965, "bandit": 965, "multimetr": [965, 1028, 1033], "calibrated_forest": 965, "select__k": 965, "model__estimator__max_depth": 965, "imp": 966, "sophist": [966, 978], "14338": 966, "13286": 966, "15611": 966, "amelia": 966, "scientist": [966, 1000], "roderick": 966, "rubin": 966, "1986": [966, 992], "ol2001": 966, "mask_missing_values_onli": 966, "mask_al": 966, "rr2007": 968, "2x_iy_i": 968, "vz2010": 968, "vvz2010": 968, "prod_i": 968, "ls2010": 968, "c_0": [968, 974], "tensorsketch": 968, "pp2013": 968, "wikic": 968, "ccf2002": 968, "mercer": 968, "langl": [968, 976, 990, 991], "rangl": [968, 976, 990, 991], "y_j": [968, 976, 978, 991], "obviat": 968, "dagm": 968, "vempati": 968, "jawahar": 968, "charikar": 968, "farach": 968, "colton": 968, "m2012": 969, "mu_k": 970, "cst": 970, "omega_": 970, "k0": 970, "h_l": 970, "extrema": 970, "honei": 970, "stork": 970, "dilemma": 971, "valid_scor": 971, "w_0": 972, "w_p": 972, "34545455": 972, "13636": [972, 1027], "rifkin": 972, "lippert": 972, "2n_": 972, "softw": 972, "kim": [972, 1026, 1027, 1028, 1032], "koh": [972, 1000], "lustig": 972, "boyd": 972, "gorinevski": 972, "c_p": 972, "cherkasski": 972, "yunqian": 972, "1691": 972, "1714": 972, "ell_2": 972, "equiangular": 972, "weisberg": 972, "ell_0": [972, 976], "_coef": 972, "mp": 972, "ell_": 972, "posteriori": [972, 978], "radford": 972, "neal": [972, 1031], "50000013": 972, "49999993": 972, "lambda_i": [972, 986], "srikantan": 972, "tristan": 972, "fletcher": [972, 1018, 1022], "nomenclatur": [972, 1024], "deliber": 972, "overparameter": 972, "ldot": [972, 976, 978, 980, 990], "w_l": 972, "min_w": 972, "iverson": 972, "hood": [972, 991], "broyden": 972, "goldfarb": 972, "shanno": 972, "shortcom": 972, "statsmodel": [972, 996], "aaron": [972, 1021, 1022, 1023, 1028], "simon": [972, 1000, 1021, 1022, 1031, 1032, 1033], "93fletcher": 972, "93goldfarb": 972, "93shanno_algorithm": 972, "noah": 972, "multirespons": 972, "edm": 972, "agricultur": 972, "rainfal": 972, "paid": 972, "bernouli": 972, "fraud": [972, 1000], "cash": 972, "fraudul": [972, 1000], "interrupt": 972, "drug": 972, "cure": 972, "entertain": 972, "mccullagh": 972, "nelder": 972, "boca": 972, "raton": 972, "chapman": 972, "hall": [972, 1025, 1029], "crc": 972, "31760": 972, "j\u00f8rgensen": 972, "monografia": 972, "matem\u00e1tica": 972, "2463": 972, "4337": 972, "7638": 972, "disappear": [972, 1018], "photogrammetr": 972, "hypothes": 972, "paradigm": 972, "cartographi": 972, "fischler": 972, "boll": 972, "sunglok": 972, "choi": 972, "taemin": 972, "wonpil": 972, "93sen_estim": 972, "binom": 972, "infeas": [972, 979, 981], "k\u00e4rkk\u00e4inen": 972, "\u00e4yr\u00e4m\u00f6": 972, "h_": 972, "oarc": 972, "dae": 972, "bassett": 972, "jr": 972, "econometrica": 972, "econometr": 972, "portnoi": 972, "hare": 972, "tortois": 972, "paraboloid": 972, "w_3": 972, "w_4": 972, "w_5": 972, "z_1": 972, "z_2": 972, "z_3": 972, "z_4": 972, "z_5": 972, "streamlin": 972, "gotten": [972, 986], "necess": [973, 979], "strife": 973, "mother": 973, "baloo": 973, "song": 973, "jungl": 973, "rubric": 973, "defici": [973, 990], "hlle": 973, "revolv": 973, "belkin": 973, "niyogi": 973, "1373": 973, "1396": 973, "molecul": 973, "jk": 973, "delta_": 973, "c_1": 973, "disentangl": 973, "legitim": 973, "die": 973, "noisier": 973, "5415": 973, "brief": 974, "num_featur": [974, 1033], "quantum": 974, "nutshel": 974, "36787944": 974, "89483932": 974, "58364548": 974, "51341712": 974, "83822343": 974, "7768366": 974, "facil": 975, "equi": 975, "agnost": [975, 984], "cue": 975, "came": 975, "quicker": 975, "unpract": 975, "analogi": [975, 976], "top_k_accuraci": 976, "top_k_accuracy_scor": [976, 1030, 1032], "neg_brier_scor": [976, 1028], "f1_micro": [976, 1022], "f1_weight": [976, 1022], "f1_sampl": 976, "neg_log_loss": 976, "roc_auc_ovr": [976, 1028], "roc_auc_ovo": [976, 1028], "roc_auc_ovr_weight": [976, 1028], "roc_auc_ovo_weight": [976, 1028], "explained_variance_scor": [976, 1021, 1025, 1032], "max_error": [976, 1027], "neg_mean_squared_log_error": 976, "mean_squared_log_error": [976, 1025, 1031], "neg_median_absolute_error": 976, "neg_mean_poisson_devi": 976, "neg_mean_gamma_devi": 976, "mean_gamma_devi": [976, 1028], "d2_pinball_scor": [976, 1032], "d2_tweedie_scor": [976, 1031], "invalidparametererror": 976, "_error": 976, "my_custom_loss_func": 976, "693": 976, "protocol": [976, 1021, 1034, 1035], "custom_scoring_funct": 976, "custom_scorer_modul": 976, "confusion_matrix_scor": 976, "test_tp": 976, "test_fn": 976, "untru": 976, "dividend": 976, "divisor": 976, "quotient": 976, "texttt": 976, "youden": 976, "informed": 976, "mosley2013": 976, "kelleher2015": 976, "guyon2015": 976, "urbanowicz2015": 976, "escalant": 976, "escalera": 976, "maci\u00e0": [976, 1031, 1033], "saeed": 976, "statnikov": 976, "viega": 976, "chalearn": 976, "automl": [976, 996], "ijcnn": 976, "moslei": 976, "ijcv": 976, "urbanowicz": 976, "exstrac": 976, "evol": 976, "intel": [976, 996], "cohen_kappa_scor": [976, 1023, 1025], "4285714285714286": 976, "manning2008": 976, "everingham2010": 976, "davis2006": 976, "flach2015": 976, "everingham": 976, "gool": 976, "winn": 976, "pascal": 976, "voc": 976, "goadrich": 976, "y_l": 976, "_l": 976, "emptyset": 976, "f_beta": 976, "hinge_loss": [976, 1022, 1030, 1031], "ne": [976, 979], "1738": 976, "matthews_corrcoef": [976, 1018, 1024, 1025, 1032], "t_k": [976, 992], "ik": 976, "ki": 976, "kk": 976, "auroc": 976, "ht2001": 976, "fc2009": 976, "pd2000": 976, "f2006": 976, "f2001": 976, "inner_clf": 976, "c\u00e8sar": 976, "hernandez": 976, "orallo": 976, "modroiu": 976, "wikipediadet2017": 976, "martin1997": 976, "navratil2007": 976, "consult": 976, "encyclopedia": 976, "utc": 976, "php": [976, 996], "detection_error_tradeoff": 976, "oldid": 976, "798982054": 976, "doddington": 976, "kamm": 976, "ordowski": 976, "przybocki": 976, "navractil": 976, "klusacek": 976, "acoust": 976, "icassp": 976, "honolulu": 976, "232": 976, "brier1950": 976, "p_i": [976, 979], "bella2012": 976, "flach2008": 976, "bella": 976, "hern\u00e1ndez": 976, "ram\u00edrez": 976, "quintana": 976, "khosrow": 976, "pour": 976, "hershei": 976, "edson": [976, 1023], "matsubara": 976, "dagstuhl": 976, "seminar": 976, "schloss": 976, "leibniz": 976, "zentrum": 976, "lr_": 976, "brenner": 976, "gefel": 976, "coverage_error": [976, 1022, 1032], "label_ranking_average_precision_scor": [976, 1022, 1026, 1027, 1033], "label_ranking_loss": [976, 1023], "grade": 976, "unalt": 976, "epsilon_i": 976, "925": [976, 1006], "7083": 976, "log_": 976, "growth": [976, 1023, 1024], "commod": 976, "mapd": 976, "2e6": 976, "2666": 976, "y_n": [976, 980, 990], "elicit": 976, "2500": 976, "mean_pinball_loss_95p": 976, "skill": 976, "mcfadden": 976, "d2_tweedie_score_15": 976, "d2_pinball_score_08": 976, "heteroschedast": 976, "homoschedast": 976, "pear": 977, "y_dens": 977, "y_spars": 977, "advoc": 977, "elabor": 977, "financ": 977, "f3": 977, "y3": 977, "multi_target_forest": 977, "75474165": 977, "147": 977, "03498585": 977, "03812219": 977, "12165031": 977, "12914884": 977, "46081961": 977, "8948621": 977, "44373091": 977, "88978285": 977, "62745778": 977, "02891072": 977, "48204257": 977, "03260883": 977, "165": 977, "34867495": 977, "52003279": 977, "92529176": 977, "25719016": 977, "84253": 977, "25193977": 977, "16443186": 977, "12274212": 977, "170388": 977, "80956739": 977, "16979946": 977, "72667194": 977, "50941682": 977, "50447799": 977, "37967282": 977, "15699552": 977, "72850319": 977, "prod_": 978, "downarrow": 978, "spite": 978, "famous": 978, "serious": 978, "flair": 978, "2_y": 978, "mu_i": 978, "sigma_i": [978, 986], "theta_i": 978, "cnb": 978, "mnb": 978, "inventor": 978, "alpha_i": [978, 991], "cj": [978, 1021, 1022, 1023, 1024, 1025], "summat": [978, 980], "min_c": 978, "t_i": 978, "poorest": 978, "n_i": [978, 986], "satellit": 979, "kdt": 979, "pyfunc": 979, "farawai": 979, "invent": 979, "orthotrop": 979, "bentlei": 979, "1975": 979, "omohundro": 979, "characteris": 979, "unaffect": 979, "amort": 979, "cache_path": 979, "gettempdir": 979, "unsort": [979, 1019, 1022, 1026], "5807": 979, "nca_pip": 979, "96190476": 979, "limits_": 979, "lx": 979, "x_m": 980, "leftmost": 980, "w_1x_1": 980, "w_2x_2": 980, "w_mx_m": 980, "backpropag": 980, "998": 980, "b_1": 980, "b_2": 980, "z_l": 980, "dfrac": [980, 986], "nabla": 980, "deduct": 980, "rumelhart": 980, "jiquan": 980, "ngiam": 980, "chuan": 980, "yifan": 980, "carolin": 980, "suen": 980, "backprop": [980, 990], "lecun": [980, 990], "orr": [980, 990], "strai": 981, "v_ih_j": 981, "b_iv_i": 981, "c_jh_j": 981, "h_j": 981, "v_i": 981, "b_i": 981, "sum_h": 981, "fantasi": 981, "particl": 981, "thoroughli": 981, "hereund": 982, "1443": 982, "1471": 982, "outlying": 982, "h2009": 983, "g2015": 983, "absurd": 983, "m2019": 983, "bike": 983, "mc_clf": 983, "466": 983, "overlaid": 983, "obscur": [983, 1034], "cice": [983, 1032], "pd_": 983, "dx_c": 983, "footnot": [983, 996], "opaqu": 984, "x_val": 984, "y_val": 984, "probe": 984, "204": [984, 989], "050": 984, "048": 984, "r_multi": 984, "029": 984, "1013": 984, "866": 984, "445": 984, "726": 984, "277": [984, 1020], "i_j": 984, "min_max_scal": [986, 1023], "x_train_minmax": 986, "x_test_minmax": 986, "max_abs_scal": 986, "x_train_maxab": 986, "x_test_maxab": 986, "unintention": 986, "kernelcenter": [986, 1028, 1032], "semidefinit": [986, 991], "scholkopf1998": 986, "1_": 986, "x_train_tran": 986, "x_test_tran": 986, "8pt": 986, "x_normal": 986, "firefox": 986, "chrome": 986, "safari": 986, "africa": 986, "dragon": 986, "lexicon": 986, "par": 986, "tau": 986, "l_i": 986, "pargent": 986, "pfister": 986, "2671": 986, "2692": 986, "infant": 986, "kid": 986, "teen": 986, "adult": 986, "senior": [986, 1000], "citizen": 986, "retbin": 986, "x_1x_2": 986, "x_1x_3": 986, "x_2x_3": 986, "x_1x_2x_3": 986, "rung": 986, "eiler": 986, "marx": 986, "perperogl": 986, "sauerbrei": 986, "abrahamowicz": 986, "bmc": 986, "methodol": 986, "38629436": 986, "sixteenth": 988, "uai": 988, "craig": [988, 1021, 1026], "boutili": 988, "mois\u00e9": 988, "goldszmidt": 988, "morgan": [988, 992, 994], "kaufmann": [988, 992, 1030], "ella": 988, "bingham": 988, "heikki": 988, "mannila": 988, "245": [988, 1020], "explic": 988, "3947": 988, "687": 988, "kenneth": [988, 1018, 1019, 1024, 1025, 1032, 1033], "12th": 988, "x_new_invers": 988, "x_new_again": 988, "delalleau": 989, "aistat": 989, "gatsbi": 989, "ucl": 989, "uk": [989, 1011], "fullpap": 989, "xi_i": 990, "slack": 990, "t_0": 990, "l\u00e9on": [990, 1032, 1033, 1034], "_init_t": 990, "basesgd": 990, "eta_0": 990, "_t": 990, "svmsgd": 990, "pegaso": 990, "srebro": 990, "tsuruoka": 990, "tsujii": 990, "ananiad": 990, "afnlp": 990, "lin_clf": 991, "grasp": [991, 997], "sv": 991, "builtin": 991, "qp": 991, "linear_svc": 991, "gram_train": 991, "gram_test": 991, "zeta": 991, "zeta_i": 991, "textrm": [991, 1009], "q_": 991, "equiv": 991, "reparameter": 991, "wu": [991, 1022, 1030], "weng": 991, "1005": 991, "rong": 991, "aug": 991, "1871": 991, "1874": 991, "ofmulticlass": 991, "fitter": 992, "pariti": 992, "multiplex": 992, "export_graphviz": [992, 1023, 1025, 1031, 1033, 1034], "export_text": [992, 1027, 1034], "dumont": 992, "subwindow": 992, "beforehand": 992, "dichotomis": 992, "quinlan": 992, "multiwai": 992, "proprietari": 992, "ruleset": 992, "q_m": 992, "n_m": 992, "t_m": 992, "setminu": 992, "mk": 992, "_m": 992, "ge0": 992, "widetild": 992, "tradition": 992, "t_t": 992, "eff": 992, "predictive_analyt": 992, "troubleshoot": 994, "artwork": 994, "fund": 994, "spotifi": 994, "betawork": 994, "evernot": 994, "aweb": 994, "yhat": 994, "rangespan": 994, "birchbox": 994, "bestofmedia": 994, "phimeca": 994, "howaboutw": 994, "peerindex": 994, "datarobot": 994, "okcupid": 994, "love": [994, 1011], "publica": 994, "machinali": 994, "solido": 994, "infonea": 994, "dataiku": 994, "otto": 994, "zopa": 994, "bnp": 994, "pariba": 994, "cardif": 994, "post1": [994, 1016], "foot": 995, "gear": 995, "neuroimag": [995, 1000], "astronom": 995, "pycon": 995, "thirti": 995, "nyc": [995, 1000], "sister": 996, "sklearn_panda": 996, "sklearn_xarrai": 996, "xarrai": 996, "autoviml": 996, "tpot": 996, "featuretool": 996, "neuraxl": 996, "neat": [996, 1018], "checkpoint": 996, "funki": 996, "saver": 996, "evalml": 996, "neptun": 996, "mlop": 996, "sacr": 996, "dtreeviz": 996, "eli5": 996, "mlxtend": 996, "yellowbrick": 996, "deap": 996, "evolutionari": 996, "interchang": [996, 1035], "skop": [996, 1013], "jpmml": 996, "porter": 996, "transpil": 996, "javascript": 996, "m2cgen": 996, "dart": 996, "haskel": 996, "rust": 996, "treelit": 996, "tslearn": 996, "sktime": 996, "hmmlearn": 996, "pomegran": 996, "crfsuit": 996, "skforecast": 996, "nolearn": 996, "lasagn": 996, "theano": 996, "skorch": 996, "scikera": 996, "scikit_learn": 996, "feder": 996, "lego": 996, "subsembl": 996, "lightn": 996, "sdca": 996, "adagrad": 996, "svrg": 996, "nadaraya": 996, "gplearn": 996, "genet": 996, "multilearn": 996, "seglearn": 996, "libopf": 996, "fastfm": 996, "kmode": 996, "sphereclust": 996, "mise": 996, "giotto": 996, "tda": 996, "pymc": 996, "censor": 996, "lightfm": 996, "openrec": 996, "spotlight": 996, "gensim": 996, "nilearn": 996, "neuro": 996, "astroml": 996, "astronomi": 996, "msmbuilder": 996, "dissemin": 996, "chines": 996, "persian": 996, "spanish": 996, "korean": 996, "disclaim": 996, "promis": 997, "eleven": 997, "incept": 997, "scala": 997, "reinforc": 997, "era": 997, "7242": 997, "12147": 997, "5523": 997, "10733": 997, "13902": [997, 1028], "12800": 997, "12866": 997, "15550": 997, "5853": 997, "11805": 997, "15319": 997, "11977": 997, "12852": [997, 1028], "13911": [997, 1028], "amput": 997, "6284": 997, "beginn": 997, "priorit": [997, 1025], "4497": 997, "7646": 997, "6425": 997, "6424": 997, "8480": 997, "6231": 997, "8100": 997, "6599": 997, "6715": 997, "14582": 997, "3855": 997, "13227": 997, "6323": 997, "14180": [997, 1029], "9173": 997, "13146": [997, 1028], "8614": 997, "7608": 997, "5082": 997, "8243": 997, "searchgrid": 997, "6929": 997, "__array_function__": [997, 1028], "etl": [997, 1000], "8370": 997, "6451": 997, "lifecycl": 997, "8157": 997, "7382": 997, "drift": 997, "11047": [997, 1028], "9326": 997, "slep011": 997, "1626": 997, "10463": 997, "id3": [998, 1013], "cart": [998, 1013], "touch": 999, "savetxt": 999, "cloneabl": 999, "datafil": 999, "printabl": 999, "indispens": 1000, "stephen": [1000, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031], "simmon": 1000, "vp": 1000, "athena": 1000, "music": 1000, "bernhardsson": 1000, "pariet": [1000, 1018], "lear": 1000, "visag": 1000, "fantast": 1000, "startup": 1000, "bitli": 1000, "chartbeat": 1000, "digg": [1000, 1025], "poncho": 1000, "gilad": 1000, "lotan": 1000, "chief": 1000, "chat": 1000, "bread": 1000, "butter": 1000, "chaumond": [1000, 1026], "offic": 1000, "ayzenshtat": [1000, 1026], "undergrad": 1000, "professor": 1000, "hotel": 1000, "destin": 1000, "agent": 1000, "melani": [1000, 1025, 1026], "awesom": 1000, "stuff": 1000, "randomizedpca": [1000, 1018, 1020, 1021, 1023, 1024, 1025], "boston": 1000, "mdbecker": 1000, "pydata_2013": 1000, "ninja": 1000, "thorough": 1000, "notch": 1000, "production": 1000, "greg": [1000, 1024, 1025, 1027, 1028], "lamp": 1000, "founder": 1000, "prototyp": 1000, "jurgen": 1000, "director": 1000, "commerc": 1000, "inventori": 1000, "bertin": 1000, "mahieux": 1000, "invalu": 1000, "vijai": [1000, 1021], "surrog": 1000, "traine": 1000, "impress": 1000, "traffic": 1000, "tenur": 1000, "matchmak": 1000, "weitzenfeld": 1000, "tweet": 1000, "ferenc": 1000, "huszar": 1000, "shop": 1000, "ourselv": 1000, "jeremi": [1000, 1023, 1024, 1025, 1026, 1029, 1030], "achin": 1000, "ceo": 1000, "marketplac": 1000, "frid": [1000, 1021], "radar": 1000, "partnership": 1000, "lebourgeoi": 1000, "charron": [1000, 1021, 1022, 1029, 1030, 1031], "cornerston": 1000, "sheep": 1000, "featureforg": 1000, "rafael": [1000, 1019, 1020, 1022, 1025], "carrascosa": [1000, 1022], "law": 1000, "semiconductor": 1000, "fab": [1000, 1028, 1029], "bleed": 1000, "chip": 1000, "smartphon": 1000, "automobil": 1000, "trent": [1000, 1024], "mcconaghi": 1000, "rapid": 1000, "immens": 1000, "thorsten": 1000, "kranz": 1000, "coma": 1000, "dss": 1000, "douetteau": 1000, "b2c": 1000, "retail": 1000, "palladium": 1000, "rammig": [1000, 1024], "peer": 1000, "lend": 1000, "billion": 1000, "gbp": 1000, "grate": 1000, "vlasio": [1000, 1025], "vasilei": [1000, 1025], "petfood": 1000, "cocoa": 1000, "worldwid": 1000, "toolset": 1000, "equip": 1000, "fitzk": 1000, "sr": 1000, "fondat": 1000, "s\u00e9bastien": [1000, 1024, 1026], "conort": 1000, "salmon": 1002, "nine": 1002, "sentiment": 1003, "cli": 1003, "doctest_mod": 1003, "hardest": 1004, "tightli": 1005, "knit": 1005, "x_fold": 1006, "array_split": 1006, "y_fold": 1006, "train_indic": 1006, "test_indic": 1006, "963": 1006, "922": 1006, "930": 1006, "96388889": 1006, "92222222": 1006, "9637883": 1006, "93036212": 1006, "96578289": 1006, "92708922": 1006, "96681476": 1006, "96362897": 1006, "93192644": 1006, "0077": 1006, "00375": 1006, "lfw_": 1007, "_lfw": 1007, "gerhard_schroed": 1007, "donald_rumsfeld": 1007, "tony_blair": 1007, "colin_powel": 1007, "george_w_bush": 1007, "estimated_param_": 1008, "iris_x": 1009, "iris_i": 1009, "iris_x_train": 1009, "iris_y_train": 1009, "iris_x_test": 1009, "iris_y_test": 1009, "pave": 1009, "paltri": 1009, "exabyt": 1009, "30349955": 1009, "63931533": 1009, "510": 1009, "53060544": 1009, "73698041": 1009, "13170937": 1009, "81458798": 1009, "84845219": 1009, "60648906": 1009, "51961675": 1009, "09517222": 1009, "5854": 1009, "5855": 1009, "occam": 1009, "razor": 1009, "best_alpha": [1009, 1018], "025118864315095794": 1009, "313": 1009, "508": 1009, "knew": 1010, "taxonomist": 1010, "face_compress": 1010, "x_approx": 1010, "images_approx": 1010, "18565811e": 1010, "19346747e": 1010, "43026679e": 1010, "text_analyt": 1011, "skeleton": [1011, 1021], "sklearn_tut_workspac": 1011, "cp": 1011, "work_directori": 1011, "tutorial_hom": 1011, "fetch_data": 1011, "lang": 1011, "newsweed": 1011, "netnew": 1011, "bydat": 1011, "twenty_train": 1011, "holder": 1011, "2257": 1011, "sd345": 1011, "collier": 1011, "laserjet": 1011, "iii": [1011, 1032], "hampton": 1011, "4gb": 1011, "count_vect": 1011, "x_train_count": 1011, "35788": 1011, "4690": 1011, "downscal": 1011, "tf_transform": 1011, "x_train_tf": 1011, "tfidf_transform": 1011, "x_train_tfidf": 1011, "na\u00efv": 1011, "docs_new": 1011, "opengl": 1011, "x_new_count": 1011, "x_new_tfidf": 1011, "text_clf": 1011, "twenty_test": 1011, "docs_test": 1011, "8348": 1011, "9101": [1011, 1026], "1502": 1011, "tfidf__use_idf": 1011, "searcher": 1011, "gs_clf": 1011, "workspac": 1011, "fear": 1011, "fire": 1011, "exercise_xx_script": 1011, "arg1": 1011, "arg2": 1011, "arg3": 1011, "mortem": 1011, "charngramanalyz": 1011, "exercise_01_language_train_model": 1011, "exercise_02_senti": 1011, "movie_review": 1011, "txt_sentoken": 1011, "cpickl": 1011, "subtleti": 1013, "subscrib": 1016, "gzip": 1018, "bzip2": 1018, "decompress": 1018, "auc_scor": [1018, 1020], "kernc": [1018, 1032, 1033], "led": 1018, "probabilisticpca": [1018, 1021], "hmm": [1018, 1019, 1020, 1021, 1023], "gaussianhmm": 1018, "multinomialhmm": 1018, "n_gram_rang": 1018, "alexi": [1018, 1021, 1022, 1025], "mignon": [1018, 1021, 1022, 1025], "subhodeep": [1018, 1019, 1020], "moitra": [1018, 1019, 1020], "yannick": [1018, 1020], "schwartz": [1018, 1020, 1032], "duckworth": 1018, "benediktsson": [1018, 1019, 1020], "marko": [1018, 1027, 1028, 1034], "burjek": 1018, "pinto": 1018, "abraham": [1018, 1019, 1024, 1028], "hoenig": 1018, "flyingimmidev": 1018, "francoi": [1018, 1031], "savard": 1018, "hann": 1018, "schulz": 1018, "welind": 1018, "companioni": 1018, "brandyn": 1018, "bussonni": [1018, 1030], "matthia": [1018, 1020, 1021, 1024, 1025, 1026, 1030, 1033], "pierr": [1018, 1026, 1027, 1029, 1031, 1033], "astolfi": 1018, "huiginn": 1018, "goodman": [1018, 1023], "ludwig": 1018, "schwardt": 1018, "hervieu": 1018, "sergio": [1018, 1020, 1021, 1030, 1033], "medina": [1018, 1020], "sheerman": 1018, "buguen": 1018, "seq_dataset": [1018, 1028], "weight_vector": [1018, 1028], "reuben": 1018, "costin": 1018, "_basehmm": 1018, "neighborsregressor": 1018, "gone": [1018, 1019], "vbgmm": [1018, 1022, 1024], "_pvalu": 1018, "charset": [1018, 1020], "test_fract": 1018, "train_fract": 1018, "198": 1018, "marek": 1018, "fcostin": 1018, "adrien": 1018, "gaidon": 1018, "joona": 1018, "sillanp\u00e4\u00e4": 1018, "mccarthi": [1018, 1026], "roi": [1018, 1032], "hyunjin": 1018, "ibay": 1018, "scheidegg": 1018, "clair": 1018, "revillet": 1018, "conrad": [1018, 1019, 1033], "meng": [1018, 1019, 1022, 1024, 1025], "xinfan": [1018, 1019, 1022], "udi": 1018, "weinsberg": 1018, "janso": 1018, "palafox": 1018, "overwrite_": 1018, "copy_": 1018, "buffer_mb": 1018, "sparse_encode_parallel": 1018, "accident": [1018, 1022, 1027], "basedictionarylearn": 1018, "sparsecodingmixin": 1018, "fast_svd": 1018, "arnold": [1018, 1019], "bala": [1018, 1021], "subrahmanyam": [1018, 1021], "varanasi": [1018, 1021], "draxu": 1018, "eickenberg": [1018, 1020, 1021, 1022, 1023], "bogdan": 1018, "trach": 1018, "f\u00e9lix": [1018, 1020, 1021, 1022, 1026], "antoin": [1018, 1020, 1021, 1022, 1025], "fortin": [1018, 1020, 1021, 1022], "manuel": [1018, 1022, 1026, 1027, 1030, 1031], "caicedo": 1018, "carvaj": 1018, "tiziano": 1018, "zito": [1018, 1031], "jean": [1018, 1021, 1022, 1023, 1024, 1025, 1031], "kossaifi": [1018, 1022, 1023], "thumbnail": 1018, "univariate_select": 1018, "mldata": [1018, 1026], "pietro": [1018, 1021], "berk": 1018, "macosx": 1018, "xarg": 1018, "bscikit": 1018, "cross_val": 1018, "bcross_val": 1018, "lurk": 1018, "l1_distanc": 1018, "387": 1018, "168": 1018, "andi": [1018, 1025], "amit": [1018, 1032, 1033], "salvator": [1018, 1032, 1033], "masecchia": 1018, "schut": 1018, "metaireau": [1018, 1021], "bryan": [1018, 1021, 1027, 1028, 1031], "silverthorn": 1018, "minwoo": 1018, "luca": [1018, 1028, 1029, 1030, 1031], "wiman": 1018, "schl\u00fcter": [1018, 1026], "malet": 1018, "miott": [1018, 1021], "feth": 1018, "arezki": 1018, "yamin": 1018, "notes_neighbor": 1018, "netbsd": 1018, "kamel": 1018, "ibn": 1018, "hassen": 1018, "derouich": 1018, "virgilefritsch": 1018, "example_gaussian_process_plot_gp_regress": 1018, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1018, "tast": 1018, "2x": 1018, "10x": 1018, "200x": 1018, "ann": [1018, 1030, 1032], "laur": 1018, "fouqu": 1018, "ronan": [1018, 1021, 1026], "amicel": [1018, 1021], "osendorf": [1018, 1019], "gmmhmm": [1018, 1019], "latex": 1018, "mlcomp": 1018, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1018, "pybrain": 1018, "rokem": [1018, 1024], "100x": [1018, 1021], "obsolet": [1018, 1034], "attrselect": 1018, "unmaintain": 1018, "lite": 1018, "filo": [1018, 1021], "mailhot": 1018, "huard": 1018, "dave": [1018, 1025, 1026, 1032], "morril": 1018, "schofield": 1018, "travi": [1018, 1026], "oliph": 1018, "pearu": 1018, "peterson": [1018, 1020], "0d": 1019, "marchman": [1019, 1020], "hrishikesh": [1019, 1020], "huilgolkar": [1019, 1020], "bastiaan": [1019, 1020], "diego": [1019, 1020], "molla": [1019, 1020], "cunha": [1019, 1020], "almeida": [1019, 1020, 1031], "rolando": [1019, 1020], "espinoza": [1019, 1020], "fuent": [1019, 1020], "formerli": [1019, 1022, 1024, 1025], "beauchamp": [1019, 1022], "longstand": [1019, 1025], "shaun": 1019, "jackman": 1019, "winterman": 1019, "seberg": 1019, "n_atom": 1019, "label_propag": 1019, "learn_rat": 1019, "basegradientboost": 1019, "mean_square_error": 1019, "gmm_": 1019, "eig_tol": 1019, "chunk_siz": 1019, "zero_one_scor": 1019, "aymer": 1019, "masurel": 1019, "syhw": [1019, 1020], "corei": [1019, 1026, 1027], "lynch": [1019, 1025], "shu": [1019, 1022, 1026], "tadej": [1019, 1020], "jane\u017e": [1019, 1020], "caje": 1019, "tiago": [1019, 1023], "nune": 1019, "cow": 1019, "anz": 1019, "jauvin": 1019, "jacqu": [1019, 1021], "kvam": [1019, 1021], "doug": [1019, 1020, 1030], "coleman": [1019, 1020], "dickerson": 1019, "approximateident": 1019, "veronda": 1019, "matti": [1019, 1022, 1023], "lyra": [1019, 1022, 1023], "mikhail": [1019, 1020, 1021, 1024, 1025, 1033], "korobov": [1019, 1020, 1021, 1024, 1025], "alejandro": [1019, 1024], "weinstein": 1019, "deil": [1019, 1029, 1030], "nizhibitski": 1019, "coelho": [1019, 1021, 1022, 1026], "miroslav": [1019, 1020, 1023], "batchkarov": [1019, 1023], "pavel": [1019, 1027], "bob": [1019, 1025], "dengemann": 1019, "emanuel": 1019, "x006": 1019, "justin": [1020, 1026, 1030], "stochastic_gradi": [1020, 1021, 1027], "crombach": 1020, "sheet": 1020, "jaccard_similarity_scor": [1020, 1022, 1027], "jochen": 1020, "wersd\u00f6rfer": 1020, "sinayev": 1020, "unpleas": 1020, "novic": 1020, "tini": [1020, 1033], "hyperlink": 1020, "luessi": 1020, "philipp": [1020, 1021, 1024, 1033], "gervai": [1020, 1021], "cleverless": 1020, "nosetest": 1020, "compute_import": 1020, "return_model": [1020, 1022], "itergrid": 1020, "tacitli": 1020, "charset_error": 1020, "precompute_gram": 1020, "2224": 1020, "jim": 1020, "holmstr\u00f6m": 1020, "steven": [1020, 1021, 1023, 1025, 1026, 1031, 1033], "gryze": [1020, 1023], "sergeyf": 1020, "ben": [1020, 1021, 1022, 1025, 1026, 1027, 1030], "speer": 1020, "federico": [1020, 1021, 1026, 1027, 1032], "vaggi": [1020, 1021], "raul": [1020, 1021], "garreta": [1020, 1021], "gei": 1020, "flaxman": [1020, 1022], "denton": 1020, "cockburn": 1020, "dougal": [1020, 1022, 1023, 1025, 1026, 1027, 1028], "sutherland": [1020, 1022, 1023, 1025, 1026, 1027, 1028], "ian": [1020, 1022, 1027, 1028, 1030, 1033, 1034], "ozsvald": 1020, "johann": [1020, 1021, 1026, 1028, 1029, 1032], "sch\u00f6nberger": [1020, 1021], "szabo": [1020, 1021], "roland": [1020, 1021], "imran": [1020, 1021, 1022], "haqu": [1020, 1021, 1022], "karayev": 1020, "jamestwebb": [1020, 1021], "abhijeet": 1020, "kolh": 1020, "velkov": 1020, "fazlul": 1020, "shahriar": 1020, "felix": [1020, 1025, 1026, 1028, 1030, 1031, 1032], "brockherd": 1020, "harikrishnan": 1020, "jack": [1020, 1023, 1031, 1032, 1033], "hale": [1020, 1032], "jakemick": 1020, "mcdermott": 1020, "zwinck": 1020, "vredevoogd": [1020, 1021], "pati": 1020, "ekman": [1020, 1024], "shubernetskii": 1020, "naoki": [1020, 1030], "orii": 1020, "seamu": 1020, "absher": 1020, "feldman": [1020, 1025, 1026, 1027, 1028], "stefano": 1020, "lattarini": 1020, "steve": [1020, 1022, 1026, 1031, 1033], "koch": [1020, 1026, 1027, 1029, 1030], "sturla": 1020, "molden": 1020, "jarosch": 1020, "nikolai": [1021, 1022, 1023, 1024, 1026, 1027, 1032], "mayorov": [1021, 1022, 1023, 1024], "msvc": 1021, "mingw": 1021, "resourcewarn": 1021, "calvin": [1021, 1022], "gile": [1021, 1022], "billing": [1021, 1022, 1023], "safe_realloc": 1021, "bradshaw": [1021, 1022, 1025], "pico": [1021, 1022], "restor": [1021, 1026, 1027, 1028, 1029, 1033], "raff": 1021, "__array__": [1021, 1028], "jeffrei": [1021, 1024], "blackburn": [1021, 1024], "danni": [1021, 1022, 1023], "sullivan": [1021, 1022, 1023], "wignal": [1021, 1022, 1028, 1029], "grid_tograph": 1021, "gracefulli": [1021, 1022], "gaussianprocess": 1021, "novak": 1021, "tulloch": [1021, 1022], "wardagglomer": 1021, "wardclust": 1021, "mean_l1_ratio": 1021, "phlypo": 1021, "312": 1021, "bommarito": [1021, 1022], "brook": [1021, 1022, 1030], "osborn": [1021, 1022], "eltermann": 1021, "bwignal": 1021, "ankit": [1021, 1028, 1030, 1032], "agraw": [1021, 1026, 1032, 1033], "carei": [1021, 1022, 1023, 1024, 1025], "ugurthemast": [1021, 1022], "schumach": [1021, 1022, 1023], "baptist": [1021, 1029], "lagard": 1021, "rajat": [1021, 1028], "khanduja": 1021, "pascual": 1021, "ignacio": 1021, "rossi": 1021, "s\u00e4ger": [1021, 1024], "ilambharathi": [1021, 1022], "kanniah": [1021, 1022], "sdenton4": 1021, "alyssa": [1021, 1025], "amo": 1021, "waterland": 1021, "murad": 1021, "maud": 1021, "karol": 1021, "pysniak": 1021, "cgohlk": [1021, 1022], "jacobsen": 1021, "collin": 1021, "kaushik94": 1021, "erwin": 1021, "marsi": 1021, "csytraci": 1021, "lk": 1021, "laurent": [1021, 1022, 1025, 1026, 1033, 1034], "direr": [1021, 1022, 1025, 1026], "shilt": 1021, "yoshiki": [1021, 1024], "v\u00e1zquez": 1021, "yung": [1021, 1024], "siang": 1021, "liau": 1021, "abhishek": [1021, 1022, 1028, 1032], "thakur": [1021, 1022], "rohit": [1021, 1022, 1026, 1027], "sivaprasad": [1021, 1022], "amormachin": 1021, "oscar": [1021, 1025], "carlsson": 1021, "nanta": 1021, "nardelli": 1021, "jess010": 1021, "kowalski87": 1021, "clegg": 1021, "ralf": [1021, 1024, 1025, 1033], "gommer": [1021, 1024, 1025, 1033], "rupesh": 1021, "srivastava": [1021, 1033], "ryan": [1021, 1024, 1026, 1027], "skipper": [1021, 1023, 1024], "seabold": [1021, 1023, 1024], "stefan": [1021, 1022, 1026, 1028], "walt": [1021, 1022, 1026], "riddel": [1021, 1023, 1025], "valentin": [1021, 1023, 1033, 1034], "haenel": 1021, "myer": [1021, 1025], "yoni": 1021, "meshulam": 1021, "yuri": [1021, 1023], "zaytsev": 1021, "adrinjalali": [1021, 1030], "ai8rahim": 1021, "alemagnani": 1021, "chalmerlow": 1021, "dziki": 1021, "dro\u017cd\u017c": 1021, "matrixorz": 1021, "popo": 1021, "samuela": 1021, "fran\u00e7oi": 1021, "boulogn": 1021, "ethan": [1021, 1024], "guilherm": 1021, "trein": 1021, "heuer": 1021, "ivicajov": 1021, "rouli": 1021, "eduardo": [1021, 1023, 1031, 1032], "ari\u00f1o": 1021, "rubia": 1021, "jell": 1021, "zijlstra": 1021, "eddi": 1021, "jansson": [1021, 1033], "ca\u00f1ardo": 1021, "alastuei": 1021, "joseph": [1021, 1022, 1023, 1024, 1030, 1032, 1033], "perla": 1021, "ricardo": [1021, 1031, 1032], "kenta": 1021, "sato": 1021, "medri": 1021, "luce": 1021, "pierron": 1021, "danielweitzenfeld": 1021, "thompson": [1021, 1033, 1034], "brett": [1021, 1023, 1024, 1025, 1026, 1033], "feurer": [1021, 1026], "earl": 1021, "hank": 1021, "orr\u00f9": 1021, "lunt": 1021, "kearn": 1021, "pawe\u0142": [1021, 1025, 1030, 1031], "mandera": 1021, "zambelli": 1021, "staubda": 1021, "dedupl": 1022, "heilman": [1022, 1023], "precompute_dist": [1022, 1029], "lshforest": [1022, 1025], "qiang": 1022, "luo": 1022, "clemen": 1022, "brunner": 1022, "matteo": [1022, 1024, 1032], "visconti": 1022, "oleggio": 1022, "castello": 1022, "linkage_tre": 1022, "jatin": [1022, 1024], "shah": [1022, 1023, 1024, 1030], "saurabh": [1022, 1023, 1024, 1025, 1026, 1030], "jha": [1022, 1028, 1032], "blanchard": [1022, 1023], "michal": [1022, 1025, 1031, 1032], "romaniuk": 1022, "gilmor": 1022, "stapl": 1022, "hedyati": 1022, "antoni": [1022, 1024, 1030, 1033], "parel": 1022, "herv\u00e9": 1022, "bredin": 1022, "hasil": 1022, "sharma": [1022, 1024, 1026, 1027, 1029, 1030, 1032], "ducktyp": 1022, "download_20newsgroup": 1022, "friend": 1022, "cathi": [1022, 1028], "deng": [1022, 1023, 1024], "dawson": 1022, "garret": 1022, "hanna": [1022, 1023, 1029], "wallach": [1022, 1023], "yan": [1022, 1030], "artem": [1022, 1025], "sobolev": 1022, "fit_ovr": 1022, "predict_ovr": 1022, "predict_proba_ovr": 1022, "fit_ovo": 1022, "predict_ovo": 1022, "fit_ecoc": 1022, "predict_ecoc": 1022, "lamond": 1022, "outweigh": 1022, "thresh": 1022, "akshai": [1022, 1025, 1030], "akshayah3": 1022, "aldrian": 1022, "obaja": 1022, "ander": [1022, 1028], "aagaard": 1022, "cranenburgh": 1022, "walker": 1022, "banilo": [1022, 1023], "barmalei": [1022, 1023], "benedikt": 1022, "koehler": 1022, "bhsu": 1022, "bori": [1022, 1030], "feld": 1022, "borja": 1022, "ayerdi": 1022, "boyuan": [1022, 1023, 1024], "brent": [1022, 1026, 1027], "pedersen": 1022, "celeo": 1022, "chebee7i": 1022, "stade": 1022, "schuldt": 1022, "christof": [1022, 1023], "angermuel": [1022, 1023], "daiki": 1022, "aminaka": 1022, "danfrankj": 1022, "dmitrij": 1022, "milajev": 1022, "floydsoft": 1022, "garrett": 1022, "gpassino": 1022, "gwulf": [1022, 1023], "hampu": 1022, "bengtsson": 1022, "harri": [1022, 1024, 1030, 1031], "mavroforaki": [1022, 1024], "helder": [1022, 1031, 1032], "herv": 1022, "hugu": 1022, "salamin": 1022, "ism": 1022, "dlabal": 1022, "javier": 1022, "l\u00f3pez": [1022, 1026, 1027, 1030], "pe\u00f1a": 1022, "jdcaballero": 1022, "jeff": [1022, 1024, 1031, 1032], "hammerbach": 1022, "helmu": 1022, "kaicheng": 1022, "markham": [1022, 1029, 1030], "lagacheri": 1022, "leepei": 1022, "loic": [1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033], "estev": [1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033], "luka": [1022, 1029], "michelbach": 1022, "krell": [1022, 1024], "ku": [1022, 1023], "mateusz": [1022, 1029, 1030], "susik": 1022, "mehdi": [1022, 1031], "cherti": 1022, "mlg": 1022, "montecchio": 1022, "okal": 1022, "billi": 1022, "\u00f3scar": [1022, 1023, 1024, 1025], "n\u00e1jera": [1022, 1023, 1024, 1025], "puggioni": 1022, "pratap": [1022, 1025, 1032], "vardhan": 1022, "pvnguyen": 1022, "queqichao": 1022, "rahiel": 1022, "kasim": 1022, "mason": 1022, "saket": [1022, 1023, 1030], "choudhari": [1022, 1023, 1032], "sam": [1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033], "nichol": 1022, "sethdandridg": 1022, "sinhrk": [1022, 1023], "snuderl": 1022, "ott": 1022, "tjoa": 1022, "swu": 1022, "zimmer": [1022, 1032], "tejesh95": 1022, "terrycojon": 1022, "delteil": 1022, "toma": 1022, "kazmar": 1022, "trevorstephen": [1022, 1024], "tttthomasssss": 1022, "tzu": 1022, "kuo": 1022, "ugurcaliskan": 1022, "vinayak": [1022, 1023, 1024, 1026, 1027, 1033], "mehta": [1022, 1023, 1024, 1026, 1027, 1028, 1029, 1033], "vjacheslav": 1022, "murashkin": 1022, "wadawson": 1022, "x0l": 1022, "6147": 1023, "presort": [1023, 1028], "5857": 1023, "mcculloh": [1023, 1024], "6258": 1023, "giorgio": [1023, 1024, 1025], "patrini": [1023, 1024, 1025], "joe": 1023, "jevnik": 1023, "labelkfold": [1023, 1024], "labelshufflesplit": [1023, 1024], "mcfee": [1023, 1024], "3659": 1023, "4738": 1023, "projectedgradientnmf": 1023, "nls_max_it": 1023, "erick": 1023, "moodi": 1023, "4025": 1023, "mean_shift_": 1023, "mean_shift": [1023, 1026], "martino": 1023, "sorbaro": 1023, "cori": 1023, "konstantin": [1023, 1024, 1025], "shmelkov": 1023, "backlink": 1023, "jaidev": 1023, "deshpand": [1023, 1024], "dictlearn": 1023, "kashif": 1023, "rasul": [1023, 1025, 1026], "galvez": 1023, "sonni": 1023, "hu": [1023, 1026, 1028], "santi": [1023, 1025, 1026], "villalba": [1023, 1026, 1030], "5186": 1023, "stolbunov": 1023, "booster": 1023, "graham": [1023, 1024], "clenaghan": [1023, 1024], "clyde": 1023, "subproblem": 1023, "forestclassifi": 1023, "ankur": 1023, "ankan": 1023, "henri": [1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033], "5431": 1023, "buddha": 1023, "prakash": [1023, 1025, 1031], "5182": 1023, "lamb": [1023, 1031], "5282": 1023, "5355": 1023, "5360": 1023, "4478": 1023, "5337": 1023, "4362": 1023, "5495": 1023, "elvi": [1023, 1024, 1025], "dohmatob": [1023, 1024, 1025], "data_min": 1023, "data_max": 1023, "data_rang": 1023, "_learntselectormixin": 1023, "gradientboost": 1023, "metatransfom": 1023, "load_lfw_pair": 1023, "wardagglom": 1023, "residues_": 1023, "indicator_matrix_": 1023, "adithya": 1023, "ganesh": 1023, "akitti": 1023, "alexei": 1023, "grigorev": 1023, "ali": [1023, 1026, 1027, 1030, 1031, 1033], "baharev": 1023, "ando": 1023, "saaba": 1023, "anish": [1023, 1024], "anthoni": [1023, 1025, 1026], "erling": 1023, "rouvinen": 1023, "rachez": [1023, 1024], "benjaminirv": 1023, "naul": [1023, 1024], "gohlk": 1023, "bourguignat": 1023, "cindi": [1023, 1031], "sridharan": 1023, "kronovet": 1023, "data1010": 1023, "dotson": 1023, "djipei": [1023, 1024], "dmitri": [1023, 1025, 1026, 1027, 1031], "spikhalskii": 1023, "donn": 1023, "duart": [1023, 1031, 1033], "caro": 1023, "larson": [1023, 1027, 1028, 1030, 1032], "fernando": [1023, 1030], "carrillo": 1023, "eckert": 1023, "zalkow": 1023, "ganiev": [1023, 1024, 1025], "ibraim": [1023, 1024, 1025], "giorgiop": 1023, "gryllo": [1023, 1026], "prokopi": [1023, 1026], "hsuan": 1023, "tien": 1023, "ishank": [1023, 1024, 1025], "gulati": [1023, 1024, 1025], "jeffrey04": [1023, 1024], "jfraj": 1023, "jiali": 1023, "mei": [1023, 1028], "kirkham": [1023, 1024, 1026], "wittenau": 1023, "loyal": 1023, "jungkook": 1023, "park": [1023, 1028, 1030, 1033], "kamalakerdadi": [1023, 1024], "kyler": 1023, "lilian": [1023, 1024], "besson": [1023, 1024], "tiao": [1023, 1024], "marktab": 1023, "spacek": 1023, "martinbpr": [1023, 1024], "martinosorb": 1023, "maryanmorel": [1023, 1024], "masafumi": 1023, "oyamada": 1023, "krump": 1023, "kolganov": 1023, "mbilling": 1023, "mhg": 1023, "patterson": 1023, "omer": 1023, "katz": [1023, 1030, 1031], "pauli": 1023, "virtanen": 1023, "fischer": [1023, 1024], "pianomania": 1023, "preston": [1023, 1024, 1025], "parri": [1023, 1024, 1025], "rohan": [1023, 1024, 1026, 1027, 1031], "ramanath": 1023, "bansod": [1023, 1024, 1025], "scls19fr": 1023, "saeger": [1023, 1024, 1025], "shivan": 1023, "sornarajah": 1023, "simonpl": 1023, "sseg": 1023, "hoover": [1023, 1024, 1025, 1027], "seguin": 1023, "theodor": 1023, "vasiloudi": 1023, "freita": [1023, 1025, 1026], "pereira": [1023, 1026, 1027], "timothi": [1023, 1031], "hopper": 1023, "tokoroten": 1023, "vstolbunov": 1023, "wangz10": 1023, "yucheng": 1023, "zhauniarovich": 1023, "zac": 1023, "stewart": [1023, 1028, 1031, 1033], "zhai_pro": 1023, "zichen": 1023, "7946": 1024, "8355": 1024, "9010": 1024, "8040": 1024, "9149": 1024, "aman": [1024, 1025, 1026, 1032, 1033], "dalmia": [1024, 1025, 1026], "nate": [1024, 1025, 1031], "guerin": [1024, 1025], "lebedev": [1024, 1025], "utilis": 1024, "6497": 1024, "7724": 1024, "bing": [1024, 1025], "explained_variance_ratio": 1024, "7632": 1024, "jpfrancoia": [1024, 1025], "7676": 1024, "moham": [1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032], "affan": 1024, "7756": 1024, "7786": 1024, "srivatsan": [1024, 1025, 1028], "7799": 1024, "7490": [1024, 1025], "6282": 1024, "7301": 1024, "6178": 1024, "7680": 1024, "n_iters_": 1024, "7553": 1024, "ekaterina": [1024, 1025, 1026, 1027, 1029], "krivich": [1024, 1025, 1027], "5874": 1024, "7593": 1024, "7594": 1024, "7660": 1024, "7750": 1024, "7732": 1024, "artsion": 1024, "lieu": [1024, 1025], "grid_scores_": [1024, 1030, 1031], "leaveonelabelout": 1024, "leaveplabelout": 1024, "plural": 1024, "mean_tim": 1024, "std_time": 1024, "3204": 1024, "5291": 1024, "sounder": 1024, "7295": 1024, "5299": 1024, "bravi": 1024, "fouchet": 1024, "calinski_harabaz_scor": [1024, 1026], "harabaz": 1024, "6586": 1024, "4294": 1024, "6667": 1024, "6954": 1024, "unveil": 1024, "yelit": 1024, "basebag": [1024, 1026], "staub": 1024, "5805": 1024, "5251": 1024, "imacul": 1024, "1000x": 1024, "arfa": 1024, "6691": 1024, "6913": 1024, "5762": 1024, "utkarsh": [1024, 1025, 1026, 1027], "upadhyai": [1024, 1025, 1026, 1027], "6846": 1024, "5929": 1024, "podshumok": [1024, 1025], "6173": 1024, "ryad": 1024, "zenin": 1024, "devashish": 1024, "asish": [1024, 1025], "dowl": 1024, "6697": 1024, "ori": 1024, "ziv": 1024, "sear": 1024, "merritt": 1024, "7325": 1024, "7239": 1024, "hong": [1024, 1026, 1030, 1031, 1032], "guangguo": 1024, "jensen": [1024, 1030], "7419": 1024, "gregori": [1024, 1028, 1029, 1030, 1031], "stupp": [1024, 1025], "bernardo": 1024, "stein": 1024, "sparse_func": [1024, 1030], "incr_mean_variance_axi": [1024, 1030], "7049": 1024, "7152": 1024, "load_boston": [1024, 1026, 1031], "7154": 1024, "manvendra": [1024, 1025], "singh": [1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "5540": 1024, "7248": 1024, "6764": 1024, "wenhua": 1024, "6817": 1024, "6902": 1024, "leonieborn": 1024, "5141": 1024, "4995": 1024, "5012": 1024, "_transform_select": 1024, "7194": 1024, "caio": [1024, 1026, 1028], "oliveira": [1024, 1026, 1028, 1032], "6182": 1024, "6121": 1024, "6472": 1024, "7350": 1024, "russel": [1024, 1025], "smith": [1024, 1025, 1026, 1027, 1028, 1030], "7159": 1024, "yichuan": [1024, 1025], "5460": 1024, "document_clust": 1024, "7353": 1024, "_search": 1024, "_check_param_grid": 1024, "xrang": 1024, "7323": 1024, "viacheslav": 1024, "kovalevskyi": 1024, "7101": 1024, "residual_metr": 1024, "6651": 1024, "reorgan": 1024, "7187": 1024, "7260": 1024, "sebasti\u00e1n": 1024, "vanrel": 1024, "leaveplabelsout": 1024, "6660": 1024, "unprefix": 1024, "7261": 1024, "aditya": [1024, 1026, 1027, 1028, 1032, 1033], "joshi": [1024, 1026, 1032], "loginov": 1024, "minyushkin": 1024, "rudi": 1024, "abadi": [1024, 1025], "saint": 1024, "alexfield": 1024, "alvaro": [1024, 1026], "ulloa": 1024, "alyssaq": 1024, "amlan": 1024, "kar": 1024, "giessel": 1024, "jackson": [1024, 1025, 1027], "murrai": [1024, 1025], "arafat": 1024, "archit": 1024, "asnt": 1024, "b0noi": 1024, "behzad": 1024, "tabibian": 1024, "kratzwald": 1024, "bhargav": 1024, "mangipudi": 1024, "blakeflei": 1024, "brandon": [1024, 1025, 1032, 1033], "carter": [1024, 1025, 1033], "camilo": 1024, "lamu": 1024, "carol": [1024, 1025], "Willing": [1024, 1025], "cass": 1024, "ceshin": 1024, "truong": 1024, "codevig": 1024, "shiebler": 1024, "hnyk": [1024, 1025], "elli": [1024, 1027], "nicholson": [1024, 1025, 1026], "thaler": 1024, "warshaw": 1024, "lasagna": 1024, "deborah": [1024, 1025], "definitelyuncertain": 1024, "didi": [1024, 1025, 1026, 1027], "zev": [1024, 1025, 1026, 1027], "dsquareindia": 1024, "edwinensa": 1024, "elia": 1024, "kuth": 1024, "fabio": 1024, "ticconi": 1024, "fisach": 1024, "donovan": 1024, "ghg": 1024, "giovanni": [1024, 1026], "cherubin": 1024, "lanzani": 1024, "glenn": 1024, "qian": [1024, 1029], "mohr": 1024, "govin": 1024, "vatsan": 1024, "reda": 1024, "gustav": 1024, "m\u00f6rtberg": 1024, "halwai": 1024, "harizo": [1024, 1025], "rajaona": [1024, 1025], "hashcode55": 1024, "hdmetor": 1024, "hobson": 1024, "lane": 1024, "bown": 1024, "igor": [1024, 1025, 1031], "andriushchenko": [1024, 1025], "inki": 1024, "hwang": 1024, "isaac": [1024, 1025, 1027, 1028], "sijaranamu": 1024, "iver": 1024, "jordal": 1024, "jackmartin": 1024, "fiedler": 1024, "routlei": 1024, "zike": 1024, "janna": 1024, "brettingen": 1024, "jarfa": 1024, "laska": 1024, "jblackburn": 1024, "levesqu": 1024, "hintz": 1024, "jeremynixon": 1024, "jeroen": 1024, "jessica": 1024, "jill": 1024, "j\u00eann": 1024, "vie": 1024, "jia": 1024, "jiyuan": 1024, "johannah": 1024, "boersma": 1024, "moeller": 1024, "striebel": [1024, 1025], "joncral": 1024, "jordi": 1024, "munoz": [1024, 1030], "jrfiedler": 1024, "juliankahnert": 1024, "juliathebrav": 1024, "kaichogami": 1024, "lyon": [1024, 1025], "kingjr": 1024, "kjell": 1024, "krishna": [1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033], "kalyan": 1024, "krishnakalyan3": 1024, "kvle": 1024, "putnam": 1024, "ldavid": 1024, "leig": 1024, "leightonzhang": 1024, "leland": [1024, 1025, 1026, 1028, 1029, 1034], "liang": [1024, 1029, 1030], "hsieh": 1024, "lizsz": 1024, "l\u00e9oni": 1024, "born": 1024, "maniteja": [1024, 1025, 1026], "nandana": [1024, 1025, 1026], "marco": [1024, 1026, 1027, 1031, 1032, 1033], "bao": [1024, 1032], "szepieniec": 1024, "madsen": [1024, 1026], "massil": 1024, "matheu": 1024, "duboi": [1024, 1026], "moroz": 1024, "scherer": 1024, "michiaki": 1024, "ariga": 1024, "moussa": 1024, "taifi": 1024, "mrandrewandrad": 1024, "mridul": 1024, "seth": 1024, "nadya": 1024, "naoya": [1024, 1025, 1026, 1027], "kanai": [1024, 1025, 1026], "nickledav": 1024, "nico": [1024, 1031], "ningchi": 1024, "nlathia": 1024, "okbalefthand": 1024, "okhlopkov": [1024, 1025], "pano": 1024, "lourida": 1024, "strickland": 1024, "perrin": 1024, "letelli": 1024, "pestrickland": 1024, "practicalswift": 1024, "qimu": 1024, "zheng": [1024, 1025, 1030], "rachit": [1024, 1030, 1033], "kansal": 1024, "ramana": [1024, 1025], "randi": 1024, "olson": 1024, "lutz": [1024, 1028, 1031], "schucker": 1024, "jain": [1024, 1025, 1026, 1030, 1032, 1033], "ruifeng": [1024, 1025, 1030], "r\u00e9my": 1024, "l\u00e9one": 1024, "saihttam": 1024, "saiw": 1024, "yeung": 1024, "shleifer": [1024, 1025], "sartaj": 1024, "sasank": 1024, "chilamkurthi": 1024, "seal": 1024, "shagun": 1024, "sodhani": 1024, "shanmuga": 1024, "shashank": [1024, 1030], "shekhar": 1024, "shawpan": 1024, "shengxiduan": 1024, "shota": 1024, "shuckle16": 1024, "smedbergm": 1024, "srvanrel": 1024, "leriqu": [1024, 1026], "taranjeet": 1024, "themrmax": [1024, 1025], "hallock": 1024, "moreau": [1024, 1025, 1026, 1027, 1028], "tkammi": 1024, "toastedcornflak": [1024, 1025], "tomdlt": 1024, "toshihiro": [1024, 1025, 1031], "kamishima": [1024, 1025], "tracer0tong": 1024, "hauck": 1024, "vo": [1024, 1032], "varun": [1024, 1025, 1026, 1032, 1033], "jewalikar": 1024, "vikram": [1024, 1033], "villu": 1024, "ruusmann": 1024, "walter": 1024, "waterponei": [1024, 1025], "wenjian": 1024, "welch": 1024, "wyseguy7": 1024, "xyguo": [1024, 1026], "yanlend": 1024, "yen": [1024, 1025], "yenchenlin": 1024, "yoav": 1024, "zivori": 1024, "10723": [1025, 1026], "9623": 1025, "undocu": 1025, "deleteri": 1025, "9677": 1025, "ashutosh": [1025, 1026, 1028, 1030], "correlation_model": 1025, "regression_model": 1025, "belatedli": 1025, "9717": 1025, "9693": 1025, "steingold": [1025, 1026], "9711": 1025, "goncalo": [1025, 1026], "rodrigu": [1025, 1026, 1031], "9641": 1025, "bourbeau": [1025, 1026, 1027], "9865": 1025, "sachin": [1025, 1026, 1032], "kelkar": [1025, 1026, 1028], "9922": 1025, "charli": [1025, 1026, 1034], "brummitt": [1025, 1026], "9945": 1025, "9830": 1025, "9600": 1025, "kerimov": [1025, 1026], "9593": 1025, "reiichiro": [1025, 1026], "nakano": [1025, 1026], "9604": 1025, "interim": 1025, "9558": 1025, "9847": 1025, "joan": [1025, 1026, 1027, 1028], "massich": [1025, 1026, 1027, 1028], "oli": 1025, "blum": 1025, "9697": 1025, "9750": 1025, "9788": 1025, "9815": 1025, "9802": 1025, "vrishank": [1025, 1026], "bhardwaj": [1025, 1026], "nagarjuna": [1025, 1026], "nathaniel": [1025, 1026, 1028], "diegodlh": [1025, 1026], "jkleint": [1025, 1026], "oliblum90": [1025, 1026], "pasbi": [1025, 1026], "lawson": [1025, 1026, 1027], "nielsenmarkus11": [1025, 1026], "excit": 1025, "cautiou": 1025, "min_impurity_split": 1025, "7823": [1025, 1026], "8446": 1025, "5279": 1025, "8363": 1025, "5295": 1025, "7388": 1025, "userguid": 1025, "7655": 1025, "karan": [1025, 1026, 1027], "desai": [1025, 1027, 1030, 1031, 1033], "7739": 1025, "gasquez": 1025, "8120": 1025, "neeraj": 1025, "gangwar": 1025, "7548": 1025, "9206": 1025, "7441": 1025, "6101": 1025, "8698": 1025, "7794": 1025, "herilalaina": [1025, 1026, 1028], "rakotoarison": [1025, 1026, 1028], "5036": 1025, "4939": 1025, "esuli": [1025, 1030], "n_skips_": 1025, "7914": 1025, "horrel": 1025, "8591": 1025, "hadrien": [1025, 1028], "7838": 1025, "8835": 1025, "8061": 1025, "cordier": 1025, "6288": 1025, "9145": 1025, "reddi": [1025, 1026, 1027, 1032], "chinthala": 1025, "7721": 1025, "crall": [1025, 1031], "7685": 1025, "tommi": [1025, 1026, 1027], "l\u00f6fstedt": 1025, "9277": 1025, "hongkahjun": 1025, "7089": 1025, "randomized_svd_low_rank": 1025, "9067": 1025, "6181": 1025, "wendling": 1025, "8065": 1025, "lejeun": 1025, "7567": 1025, "jay": 1025, "doepk": 1025, "7573": 1025, "romain": [1025, 1030], "brault": 1025, "5229": 1025, "7990": 1025, "8586": 1025, "7723": 1025, "8028": 1025, "booth": 1025, "8005": 1025, "7863": 1025, "7506": 1025, "5991": 1025, "8845": 1025, "8053": 1025, "8282": 1025, "8117": 1025, "9259": 1025, "8094": 1025, "8335": 1025, "poughon": 1025, "7880": 1025, "karnofski": 1025, "935": 1025, "8931": 1025, "attractador": [1025, 1026], "8002": 1025, "8549": 1025, "zerodivisionerror": [1025, 1028, 1034], "7501": 1025, "dominik": 1025, "krzeminski": 1025, "7970": 1025, "8006": 1025, "p\u00f6lsterl": [1025, 1028, 1031], "8936": 1025, "8672": 1025, "mike": 1025, "benfield": 1025, "broke": 1025, "8068": 1025, "5732": 1025, "ytrue": 1025, "ypred": 1025, "8087": 1025, "7983": 1025, "8512": 1025, "8251": 1025, "aivision2020": 1025, "5814": 1025, "7849": 1025, "jair": 1025, "montoya": 1025, "martinez": 1025, "randomizedlasso": 1025, "5359": 1025, "9302": 1025, "8160": 1025, "8224": 1025, "gedeck": 1025, "vathsala": [1025, 1026, 1027, 1028], "achar": [1025, 1026, 1027, 1028], "9022": 1025, "mehmet": [1025, 1031], "basbug": 1025, "9024": 1025, "8973": 1025, "paulo": [1025, 1031, 1033], "haddad": 1025, "unmeaning": 1025, "6573": 1025, "quazi": [1025, 1026], "marufur": 1025, "rahman": [1025, 1026, 1030], "9239": 1025, "andr": [1025, 1032], "ambrosio": 1025, "boechat": 1025, "early_exager": 1025, "assertionerror": 1025, "8992": 1025, "7954": 1025, "foreman": 1025, "9105": 1025, "9108": 1025, "8306": 1025, "7872": 1025, "_c_step": 1025, "3367": 1025, "steward": 1025, "8768": 1025, "detomaso": 1025, "6507": 1025, "jayzed82": 1025, "6126": 1025, "7814": 1025, "7702": 1025, "9219": 1025, "7771": 1025, "ang": 1025, "randomizedlogisticregress": 1025, "8259": 1025, "mandatorili": 1025, "7565": 1025, "8181": 1025, "basesearchcv": [1025, 1026], "8344": 1025, "eriksson": 1025, "7661": 1025, "8295": 1025, "batula": 1025, "dylan": [1025, 1028], "werner": [1025, 1030], "meier": 1025, "7365": 1025, "aleksandr": 1025, "sandrovskii": 1025, "5697": 1025, "stijn": 1025, "tonk": 1025, "6250": 1025, "8093": 1025, "bull": 1025, "9507": 1025, "7356": 1025, "dingwal": 1025, "_check_target": 1025, "8377": 1025, "5211": 1025, "rhinehart": 1025, "8159": 1025, "8198": 1025, "fetch_": 1025, "7944": 1025, "7825": 1025, "kathleen": 1025, "7376": 1025, "7331": 1025, "yangarbit": 1025, "__getstate__": [1025, 1033], "obstruct": 1025, "8316": 1025, "holger": 1025, "8010": 1025, "7986": 1025, "najera": 1025, "9289": 1025, "makedir": 1025, "9284": 1025, "sebastin": [1025, 1026], "alert": 1025, "lgtm": 1025, "9278": 1025, "heli": 1025, "8449": 1025, "9078": 1025, "purport": 1025, "sergul": [1025, 1026, 1029], "aydor": [1025, 1026, 1029], "8922": 1025, "8137": 1025, "8139": 1025, "8995": 1025, "2879": 1025, "7459": 1025, "7812": 1025, "9100": 1025, "8481": 1025, "8174": 1025, "tahar": 1025, "zanouda": 1025, "8854": 1025, "8874": 1025, "7998": 1025, "jiacheng": 1025, "argpartit": 1025, "frombuffer_empti": 1025, "rankdata": 1025, "safe_copi": 1025, "eig": 1025, "fast_dot": 1025, "pinvh": [1025, 1027], "graph_laplacian": 1025, "sparsetool": 1025, "connected_compon": 1025, "check_decision_proba_consist": 1025, "shubham": [1025, 1028], "9019": 1025, "baseensembl": [1025, 1028], "7464": 1025, "rishikesh": 1025, "taehoon": [1025, 1026], "aashil": 1025, "balakumaran": [1025, 1026], "manoharan": [1025, 1026], "petrov": [1025, 1026], "minghui": [1025, 1026], "jc": [1025, 1026], "alexandercbooth": 1025, "chkoar": 1025, "aarshai": [1025, 1026], "gilliam": 1025, "subramanyam": 1025, "clement": [1025, 1026, 1030], "joudet": [1025, 1026], "robl": 1025, "kati": 1025, "luangkot": 1025, "lacchia": 1025, "akshay0724": 1025, "omtcyfz": 1025, "rickiepark": 1025, "jbdelafoss": 1025, "vivek": [1025, 1026, 1027], "elliott": 1025, "ldirer": 1025, "sid": 1025, "kapur": 1025, "midina": 1025, "mikebenfield": 1025, "sourav": [1025, 1028], "aseem": 1025, "bansal": 1025, "aishwaryark": 1025, "howel": 1025, "dokato": 1025, "kathi": [1025, 1028], "ferria": 1025, "nikita": [1025, 1026, 1028, 1031, 1032, 1033], "basil": 1025, "beirouti": 1025, "possa": 1025, "bednar": 1025, "janin": 1025, "harper": 1025, "artsiom": 1025, "ligo": 1025, "rahn": [1025, 1028], "seanpwilliam": 1025, "julian": [1025, 1026], "kuhlmann": [1025, 1026], "aubert": 1025, "j\u00f6rn": 1025, "hee": [1025, 1028], "shivamgargsya": [1025, 1029, 1031], "kat": 1025, "hempstalk": 1025, "kaushik": [1025, 1032, 1033, 1034], "lakshmikanth": 1025, "kennedi": [1025, 1028], "yap": 1025, "kiril": [1025, 1026, 1028, 1030], "bobyrev": 1025, "imbert": [1025, 1027, 1030, 1032], "lera": 1025, "douillard": 1025, "mainak": 1025, "tobychees": [1025, 1026], "manraj": 1025, "marc": [1025, 1027, 1028, 1034], "meketon": 1025, "marcofalk": 1025, "gilch": 1025, "mehul": 1025, "ahuja": [1025, 1032, 1033], "goetz": [1025, 1026], "dezub": 1025, "baumgartn": 1025, "vibrantabhi19": 1025, "golubin": 1025, "milen": 1025, "paskov": 1025, "antonin": 1025, "carett": 1025, "morikko": 1025, "mrmjauh": 1025, "nalepa": 1025, "namiya": 1025, "narinek": [1025, 1026], "angu": [1025, 1026, 1032], "nicol": 1025, "vavrova": 1025, "nitish": 1025, "pandei": [1025, 1030], "daniil": 1025, "olegovich": 1025, "craze": 1025, "om": 1025, "parmind": 1025, "patrick": [1025, 1026, 1031, 1032], "carlson": 1025, "ganssl": 1025, "lorek": 1025, "pete": [1025, 1029, 1030], "bachant": 1025, "csizsek": 1025, "jong": 1025, "puneet": 1025, "mathur": [1025, 1027, 1028, 1033, 1034], "quentin": [1025, 1026, 1027, 1034], "hibon": 1025, "1kastner": 1025, "rameshwar": [1025, 1026], "bhaskaran": [1025, 1026], "rebecca": 1025, "bilbro": 1025, "remi": 1025, "rampin": 1025, "pratik": 1025, "agarw": [1025, 1026, 1028], "sailesh": [1025, 1026], "choyal": [1025, 1026], "samson": 1025, "samu\u00ebl": 1025, "weber": 1025, "sarah": [1025, 1027, 1030], "abhyudai": 1025, "sharan": [1025, 1026], "yalburgi": [1025, 1026], "willduan": 1025, "siddharth": [1025, 1029], "almer": 1025, "theofilo": 1025, "papapanagiot": 1025, "alison": 1025, "boucher": 1025, "folkman": 1025, "jung": [1025, 1029, 1033], "shenoi": 1025, "vilhelm": [1025, 1026], "ehrenheim": [1025, 1026], "alan": [1025, 1026, 1029, 1031, 1032], "yee": [1025, 1026], "warut": [1025, 1026], "vijitbenjaronk": [1025, 1026], "yuichi": 1025, "fujikawa": 1025, "affanv14": 1025, "andreh7": 1025, "bradi": 1025, "salz": 1025, "campustrampu": 1025, "agamemnon": [1025, 1026, 1027, 1028, 1030, 1031], "krasouli": [1025, 1026, 1027, 1028, 1030, 1031], "ditenberg": 1025, "elena": 1025, "sharova": 1025, "filipj8": [1025, 1026], "fukatani": 1025, "guiniol": 1025, "guoci": 1025, "hakaa1": [1025, 1026], "xhy": 1025, "jakirkham": [1025, 1026, 1027, 1033], "jaroslaw": 1025, "jeroko": 1025, "jmontoyam": 1025, "josephsalmon": [1025, 1026, 1027], "jschendel": [1025, 1026], "leereev": 1025, "hahn": [1025, 1026], "mathurinm": [1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033], "mehak": 1025, "sachdeva": 1025, "mlewis1729": 1025, "mlliou112": 1025, "mthorrel": [1025, 1028], "ndingwal": 1025, "nuff": 1025, "plagre": 1025, "pldtc325": 1025, "breno": [1025, 1026], "olsen": 1025, "alfano": 1025, "burn": [1025, 1026], "polmauri": 1025, "charlton": 1025, "austin": 1025, "chayant": 1025, "t15h": 1025, "chinmaya": 1025, "pancholi": 1025, "danielsen": 1025, "chung": [1025, 1026], "pravarmahajan": [1025, 1026], "dariu": [1025, 1026], "morawiec": [1025, 1026], "haberth\u00fcr": 1025, "heryanto": 1025, "kirkbi": [1025, 1026], "rashchedrin": 1025, "gertrud": 1025, "devansh": [1025, 1026], "dickson": 1025, "baxlei": 1025, "don86": 1025, "klarup": 1025, "elizabeth": [1025, 1027, 1030], "ferriss": 1025, "ellen": 1025, "egli": 1025, "chieh": [1025, 1026], "chou": [1025, 1026], "grzegorz": [1025, 1028], "szpak": [1025, 1028], "zxcvbniu": 1025, "icyblad": 1025, "ilya": 1025, "laughlin": 1025, "iv\u00e1n": [1025, 1031], "vall\u00e9": 1025, "aur\u00e9lien": [1025, 1026, 1027, 1031, 1032], "bellet": [1025, 1026, 1027], "mahapatra": 1025, "bundl": [1026, 1027], "indexerror": [1026, 1027], "11756": [1026, 1027], "14237": [1026, 1027], "schuder": [1026, 1027, 1028], "13903": [1026, 1027], "13124": [1026, 1027], "13772": [1026, 1027], "vya": [1026, 1027, 1028], "12949": 1026, "prabakaran": [1026, 1027, 1030, 1032, 1033], "kumaresshan": [1026, 1027, 1030], "12946": 1026, "tallott": 1026, "13276": 1026, "13005": 1026, "13312": 1026, "11295": 1026, "vacaliuc": [1026, 1027], "13046": 1026, "12360": 1026, "aakanksha": 1026, "13134": 1026, "sandro": [1026, 1033], "casagrand": [1026, 1027], "12881": 1026, "13165": 1026, "13221": 1026, "bertrandhaut": [1026, 1027], "raghunathan": [1026, 1027, 1028, 1029, 1030, 1031, 1032], "dowon": [1026, 1027], "aria": [1026, 1027, 1033], "fibins": [1026, 1027], "finn": [1026, 1027], "shea": [1026, 1027], "joaak": [1026, 1027], "m\u00e9hault": [1026, 1027], "kms15": [1026, 1027], "kossori": [1026, 1027], "aruku": [1026, 1027], "lakshya": [1026, 1027, 1028], "ib\u00e1\u00f1ez": [1026, 1027, 1030], "gorelli": [1026, 1027, 1031, 1033], "marcogorelli": [1026, 1027], "mferrari3": [1026, 1027], "micka\u00ebl": [1026, 1027], "schoentgen": [1026, 1027], "pavlo": [1026, 1027], "kalli": [1026, 1027], "glaser": [1026, 1027], "pierretallott": [1026, 1027, 1028], "kapoor": [1026, 1027], "sandrocasagrand": [1026, 1027], "tashai": [1026, 1027], "vishaal": [1026, 1027], "zhuyi": [1026, 1027], "ziji": [1026, 1027], "zj": [1026, 1027], "poh": [1026, 1027], "12704": 1026, "12701": 1026, "12685": 1026, "12699": 1026, "adanhawth": [1026, 1027], "stine": [1026, 1027], "feda": [1026, 1027], "curic": [1026, 1027], "jeremiedbb": [1026, 1027, 1028], "katrin": [1026, 1027], "leinweb": [1026, 1027], "muhammad": [1026, 1027, 1031], "hassaan": [1026, 1027], "rafiqu": [1026, 1027], "paczuski": [1026, 1027], "waterburi": [1026, 1027], "shivam": [1026, 1027, 1028], "kotwalia": [1026, 1027], "12159": 1026, "12105": 1026, "11912": 1026, "12304": 1026, "12339": 1026, "12246": 1026, "10811": 1026, "feldbauer": [1026, 1027, 1028, 1029, 1032], "12441": 1026, "12517": 1026, "12234": 1026, "12165": 1026, "12388": 1026, "connor": [1026, 1031], "tann": [1026, 1031], "12393": 1026, "12122": 1026, "sharedmem": 1026, "12518": 1026, "12481": 1026, "12612": 1026, "12211": 1026, "lisa": [1026, 1027, 1029, 1030, 1032, 1033], "hannel": [1026, 1027], "melissa": 1026, "ferrari": 1026, "12451": 1026, "12171": 1026, "12365": 1026, "_encod": 1026, "12514": 1026, "12522": 1026, "12471": 1026, "marzinotto": [1026, 1027], "12317": 1026, "12338": 1026, "bauk": [1026, 1027], "12625": 1026, "sklearn_site_joblib": 1026, "12350": 1026, "12467": 1026, "unvendor": 1026, "12345": 1026, "navarret": [1026, 1027, 1028], "benjastudio": [1026, 1027], "cheuk": [1026, 1027], "connossor": [1026, 1027], "levinson": [1026, 1027], "kieker": [1026, 1027], "kataev": [1026, 1027], "dillon": [1026, 1027, 1028], "gardner": [1026, 1027], "vukolov": [1026, 1027], "caselli": [1026, 1027], "gauravahlawat": [1026, 1027], "gustavo": [1026, 1027, 1032], "haroldfox": [1026, 1027], "jacklangerman": [1026, 1027], "jacopo": [1026, 1027], "notarstefano": [1026, 1027], "janvanrijn": [1026, 1027], "jdethuren": [1026, 1027], "koen": [1026, 1027], "kushal": [1026, 1027], "chauhan": [1026, 1027, 1033], "jie": [1026, 1027, 1030], "lili": [1026, 1027], "xiong": [1026, 1027, 1032], "liam": [1026, 1027], "melsyt": [1026, 1027], "nichola": [1026, 1027, 1029], "shebanov": [1026, 1027], "oleksandr": [1026, 1027, 1028, 1029, 1032], "pavlyk": [1026, 1027, 1028, 1029], "hausamann": [1026, 1027], "pulkit": [1026, 1027, 1029], "maloo": [1026, 1027], "batista": [1026, 1027, 1031], "radostin": [1026, 1027], "stoyanov": [1026, 1027], "ramil": [1026, 1027], "nugmanov": [1026, 1027], "rebekah": [1026, 1027, 1028], "roopam": [1026, 1027], "tiernei": [1026, 1027, 1028], "sylvainlan": [1026, 1027, 1028, 1029, 1030], "takingitcasu": [1026, 1027], "tulio": [1026, 1027], "xing": [1026, 1027], "zach": [1026, 1027, 1032], "mountain": 1026, "sorri": 1026, "basemultilayerperceptron": [1026, 1028], "11924": 1026, "macbook": 1026, "9354": 1026, "9372": 1026, "astel": 1026, "10933": 1026, "hansen": 1026, "10471": 1026, "gaurav": [1026, 1027, 1028, 1029, 1030, 1032], "dhingra": [1026, 1027, 1030], "8003": 1026, "jo\u00ebl": 1026, "billaud": 1026, "10059": 1026, "braun": 1026, "9612": 1026, "jonatan": 1026, "samoocha": 1026, "8129": 1026, "margeta": 1026, "k_means_elkan": 1026, "11353": 1026, "11901": 1026, "9875": 1026, "9012": 1026, "11315": 1026, "9041": 1026, "9858": 1026, "artiem": 1026, "krinitsyn": 1026, "9908": 1026, "8617": 1026, "maskani": [1026, 1028, 1029, 1030], "filali": 1026, "konstantino": 1026, "katriopla": 1026, "10774": 1026, "catalfo": 1026, "10795": 1026, "takeshi": [1026, 1031, 1032, 1033], "yoshizawa": 1026, "11082": 1026, "sadhana": 1026, "srinivasan": [1026, 1029], "9731": 1026, "10045": 1026, "fetch_mldata": 1026, "11466": 1026, "6374": 1026, "normalize_compon": [1026, 1028], "11585": 1026, "ivan": [1026, 1027, 1030, 1033], "panico": [1026, 1030], "11420": 1026, "6452": 1026, "walli": 1026, "gauz": 1026, "9492": 1026, "8484": 1026, "9886": 1026, "underflow": [1026, 1031], "10142": 1026, "5956": 1026, "_class_mean": 1026, "_class_cov": 1026, "10898": 1026, "nanxin": 1026, "9832": 1026, "11951": 1026, "r\u00fcdiger": [1026, 1027, 1029], "busch": [1026, 1027, 1029], "9707": 1026, "wan": 1026, "7071": 1026, "9157": 1026, "11176": 1026, "forsyth": 1026, "11542": 1026, "anna": 1026, "9524": 1026, "9723": 1026, "10908": 1026, "10899": 1026, "melderi": 1026, "10101": 1026, "10\u2079": 1026, "9147": 1026, "clae": 1026, "fredrik": 1026, "mannbi": 1026, "10441": 1026, "mayur": 1026, "kulkarni": 1026, "6689": 1026, "nihar": 1026, "sheth": 1026, "11293": 1026, "9656": 1026, "greenhal": 1026, "n_features_to_comput": 1026, "9222": 1026, "hoh": 1026, "9234": 1026, "andrewww": 1026, "8075": 1026, "11211": 1026, "9484": 1026, "dalla": 1026, "card": 1026, "9043": 1026, "10112": 1026, "logistic_regression_path": [1026, 1027], "11724": 1026, "9939": 1026, "westov": 1026, "10998": 1026, "vazelh": [1026, 1027, 1028], "10071": 1026, "10153": 1026, "d\u00f6pfert": 1026, "10095": 1026, "cv_valu": 1026, "10297": 1026, "mabel": [1026, 1030], "10581": 1026, "yacin": 1026, "mazari": 1026, "10687": 1026, "10836": 1026, "aishwarya": 1026, "10397": 1026, "10992": 1026, "11327": 1026, "11905": 1026, "9837": 1026, "10593": 1026, "10610": 1026, "8554": 1026, "9775": 1026, "10827": 1026, "osa": 1026, "8066": 1026, "10587": 1026, "3840": 1026, "niederb\u00fchl": 1026, "9521": 1026, "11124": 1026, "arya": 1026, "11160": 1026, "barkhorn": 1026, "11679": 1026, "pacha": 1026, "10845": 1026, "perez": [1026, 1033], "parra": 1026, "toledano": 1026, "10999": 1026, "memoryerror": [1026, 1030], "11135": 1026, "10377": 1026, "9786": 1026, "10093": 1026, "alexryndin": 1026, "9772": 1026, "9515": 1026, "liddel": 1026, "manh": 1026, "dao": 1026, "9851": 1026, "10280": 1026, "10336": 1026, "haoran": 1026, "basemixtur": [1026, 1027], "10740": 1026, "10869": 1026, "g\u00e9ron": 1026, "9686": 1026, "11310": 1026, "_fit_and_scor": 1026, "11576": 1026, "ronsin": [1026, 1027], "_run_search": 1026, "9599": 1026, "11006": 1026, "11557": 1026, "boucaud": 1026, "iid": 1026, "9085": 1026, "10677": 1026, "zhdanovich": 1026, "10982": 1026, "juliet": 1026, "lawton": 1026, "10928": 1026, "solutu": 1026, "immensu": 1026, "9257": 1026, "8190": 1026, "alcorn": 1026, "9681": 1026, "mottl": [1026, 1027], "10005": 1026, "10346": 1026, "tobia": [1026, 1031, 1033], "10887": 1026, "11136": 1026, "4394": 1026, "9579": 1026, "kober": 1026, "9655": 1026, "bjerr": 1026, "11556": 1026, "11774": 1026, "9456": 1026, "unexpectedli": 1026, "9304": 1026, "11144": [1026, 1027], "9151": 1026, "10521": 1026, "7668": 1026, "9647": 1026, "10195": 1026, "10192": 1026, "11272": 1026, "11467": 1026, "11505": 1026, "giusepp": [1026, 1027], "costa": [1026, 1031], "10210": 1026, "11520": 1026, "11011": 1026, "11005": 1026, "11308": 1026, "11206": 1026, "11306": 1026, "10437": 1026, "lucija": 1026, "gregov": 1026, "10452": 1026, "10181": 1026, "nirvan": [1026, 1030], "anjirbag": 1026, "9399": 1026, "10913": 1026, "rodrigo": 1026, "agundez": 1026, "10458": 1026, "9816": 1026, "newei": 1026, "11042": 1026, "11235": 1026, "active_features_": 1026, "feature_indices_": 1026, "n_values_": 1026, "9726": 1026, "10829": 1026, "gilberto": 1026, "olimpio": 1026, "10655": 1026, "python2": 1026, "10412": 1026, "jiongyan": 1026, "9497": 1026, "8361": 1026, "neo": 1026, "_criterion": 1026, "classificationcriterion": 1026, "regressioncriterion": 1026, "10325": 1026, "camil": 1026, "stap": 1026, "basedecisiontre": [1026, 1027, 1030], "10536": 1026, "ohayon": [1026, 1027, 1034], "11464": 1026, "stott": 1026, "10663": 1026, "10229": 1026, "11553": 1026, "10881": 1026, "sevin": 1026, "ridge_regress": [1026, 1027, 1033], "10306": 1026, "siebert": 1026, "11741": 1026, "11166": 1026, "pypy3": 1026, "v5": 1026, "11010": 1026, "lami": 1026, "11596": 1026, "marcu": 1026, "voss": 1026, "9569": 1026, "12462": 1026, "zachariah": 1026, "10474": 1026, "10500": 1026, "9701": 1026, "9378": 1026, "check_set_param": 1026, "7738": 1026, "alvin": 1026, "chiang": 1026, "8102": 1026, "ankita": 1026, "sinha": 1026, "check_methods_subset_invari": [1026, 1032], "10428": 1026, "check_sample_weights_pandas_seri": 1026, "11558": 1026, "211217613": 1026, "absolutelynowarranti": 1026, "richi": 1026, "halford": [1026, 1033], "adelr": 1026, "adityadaflapurkar": 1026, "aidan": 1026, "fitzgerald": 1026, "aishgrt1": 1026, "akash": 1026, "shivram": 1026, "lenail": [1026, 1030], "egg": 1026, "diaz": 1026, "amanda": [1026, 1029, 1030, 1031, 1032], "aniruddha": 1026, "annaayzenshtat": 1026, "antonio": [1026, 1028], "quinonez": 1026, "anubhav": 1026, "marwaha": 1026, "arik": 1026, "pamnani": 1026, "ozga": 1026, "arunava": 1026, "geron": [1026, 1031, 1032], "ayush": [1026, 1031], "bangda": 1026, "bastian": 1026, "venthur": 1026, "benn": 1026, "koonc": 1026, "cclauss": 1026, "chadi": 1026, "kamar": 1026, "holdgraf": 1026, "hirsch": 1026, "hogan": 1026, "cnx": 1026, "cwitt": 1026, "ferreira": [1026, 1031, 1032], "gomez": [1026, 1033], "klevebr": 1026, "shwed": 1026, "mohn": [1026, 1030], "danil": 1026, "baibak": [1026, 1027], "beach": 1026, "pickup": 1026, "derek": 1026, "niederhut": [1026, 1028], "dilutedsauc": 1026, "dlovel": 1026, "dor": 1026, "dougla": 1026, "duhaim": 1026, "tuzova": 1026, "eunji": 1026, "farahsae": 1026, "raimundo": 1026, "fenx": 1026, "frankhui": 1026, "franz": 1026, "wompner": 1026, "freija": 1026, "descamp": 1026, "frsi": 1026, "calvo": [1026, 1027], "georgi": [1026, 1029], "peev": [1026, 1029], "gkevinyen5418": 1026, "vermeil": 1026, "hongh": 1026, "hossein": [1026, 1027, 1028], "pourbozorg": [1026, 1027, 1028], "hristo": [1026, 1033], "hunan": 1026, "rostomyan": 1026, "iampat": 1026, "jaewon": 1026, "malcolm": 1026, "jami": 1026, "wolosonovich": 1026, "jeb": 1026, "bearer": 1026, "jinkun": 1026, "jjabl": 1026, "johnstott": 1026, "jotasi": 1026, "julietcl": 1026, "shenk": 1026, "karl": 1026, "kasper": 1026, "primdal": 1026, "lauritzen": 1026, "ksemb": 1026, "kuai": [1026, 1027], "kyeongpil": 1026, "kang": [1026, 1028], "kye": 1026, "kyledrogo": 1026, "l\u00e9o": 1026, "liutong": 1026, "lizao": 1026, "lkjcalc": 1026, "louib": [1026, 1027], "luciano": [1026, 1033], "luke": 1026, "persola": 1026, "markiwanchyshyn": 1026, "marsgui": 1026, "gubri": [1026, 1027], "koko": [1026, 1032, 1033], "copeland": [1026, 1027], "meghann": [1026, 1028], "minh": 1026, "jamaoui": [1026, 1027, 1030], "mohammad": [1026, 1027], "shahebaz": 1026, "muayyad": 1026, "alsadi": 1026, "nabarun": 1026, "pal": [1026, 1032], "narendran": 1026, "santhanam": 1026, "suh": 1026, "eng": 1026, "av": 1026, "nicolau": 1026, "werneck": 1026, "titov": [1026, 1028, 1031, 1032], "nilesh": 1026, "kevlani": 1026, "notmatthancock": [1026, 1028], "nzw": 1026, "oren": 1026, "milman": 1026, "osaid": 1026, "rehman": 1026, "nasir": 1026, "fernand": [1026, 1032, 1033], "olden": 1026, "pierreablin": 1026, "pietruh": 1026, "pinaki": 1026, "nath": 1026, "chowdhuri": [1026, 1032], "piotr": [1026, 1027], "szyma\u0144ski": [1026, 1027], "pradeep": [1026, 1027], "raamana": [1026, 1027], "pravar": 1026, "mahajan": [1026, 1028], "qingi": 1026, "rajendra": 1026, "arora": [1026, 1033], "rankylau": 1026, "kosobrodov": 1026, "rragundez": 1026, "sagnik": 1026, "bhattacharya": 1026, "radhakrishnan": 1026, "saqib": 1026, "nizam": 1026, "shamsi": 1026, "satish": 1026, "gigant": [1026, 1028, 1033], "flennerhag": 1026, "sebastien": 1026, "shalil": 1026, "awalei": 1026, "shangwu": [1026, 1027], "sharad": 1026, "vijalapuram": 1026, "shenhanc78": 1026, "rastogi": 1026, "siftikha": 1026, "sinclert": 1026, "p\u00e9rez": 1026, "solutusimmensu": 1026, "somya": 1026, "anand": [1026, 1030], "srajan": 1026, "paliw": 1026, "sriharsha": [1026, 1027], "hatwar": [1026, 1027], "mcdowel": 1026, "syonekura": 1026, "takanori": 1026, "hayashi": 1026, "tarcusx": 1026, "theriley106": 1026, "heavei": 1026, "augspurg": [1026, 1028], "trishnendu": 1026, "ghorai": 1026, "twosigmajab": 1026, "umar": [1026, 1027], "farouk": [1026, 1027], "urvang": [1026, 1028], "patel": [1026, 1028, 1029, 1030, 1032], "vadim": [1026, 1030, 1031], "markovtsev": 1026, "vinit": 1026, "vinod": 1026, "viraj": 1026, "mavani": 1026, "navkal": 1026, "vqean3": [1026, 1027], "vufg": 1026, "wallygauz": 1026, "wdevazelh": 1026, "barnett": 1026, "rosenfeld": 1026, "yime": 1026, "ymazari": 1026, "yufeng": 1026, "griffith": [1026, 1027], "z\u00e9": 1026, "vin\u00edciu": 1026, "zhenq": 1026, "zhiqe": 1026, "xiao": [1026, 1028, 1031, 1032, 1033, 1034], "couldn": [1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "12955": 1027, "klopfer": 1027, "14197": 1027, "14024": 1027, "nicolashug": 1027, "13974": 1027, "hoang": [1027, 1028], "fhoang7": 1027, "14393": 1027, "guillem": [1027, 1028, 1033], "subi": [1027, 1028, 1033], "14087": 1027, "14067": 1027, "stalei": [1027, 1028], "14092": 1027, "14053": 1027, "13947": 1027, "instanci": 1027, "13910": 1027, "13894": 1027, "myatt": [1027, 1028], "min_max_axi": 1027, "13741": 1027, "roddi": [1027, 1028], "macsween": [1027, 1028], "14309": 1027, "13864": 1027, "paresh": [1027, 1028], "13877": 1027, "_sag": 1027, "sag_solv": 1027, "3591": 1027, "13317": 1027, "13157": 1027, "13086": 1027, "cole": 1027, "13485": 1027, "assia": 1027, "benbihi": 1027, "13651": 1027, "reloc": 1027, "13486": 1027, "13427": 1027, "couvreur": [1027, 1028], "9069": 1027, "13835": 1027, "10727": 1027, "wood": 1027, "13250": 1027, "13241": 1027, "12143": 1027, "11650": 1027, "non_negative_factor": [1027, 1029, 1030, 1031, 1035], "12988": 1027, "8769": 1027, "11000": 1027, "thibault": 1027, "sejourn": 1027, "changedbehaviourwarn": 1027, "11526": 1027, "6848": 1027, "glemaitr": [1027, 1028, 1030], "11727": 1027, "13266": 1027, "13545": 1027, "sorro": 1027, "12807": 1027, "12513": 1027, "12543": 1027, "storch": 1027, "13260": 1027, "13283": 1027, "13524": 1027, "13174": 1027, "13496": 1027, "13620": 1027, "12436": 1027, "12983": 1027, "13251": 1027, "joshuakennethjon": 1027, "12715": 1027, "13164": 1027, "12834": 1027, "leastsquareserror": 1027, "update_terminal_region": 1027, "6463": 1027, "movelikeriv": 1027, "13193": 1027, "12599": 1027, "13779": 1027, "13780": 1027, "12916": 1027, "13641": 1027, "8478": 1027, "12177": 1027, "12583": 1027, "13601": 1027, "danylo": 1027, "densif": 1027, "13240": 1027, "bartosz": 1027, "13562": 1027, "11646": 1027, "11699": 1027, "make_dataset": 1027, "13336": 1027, "toleranbc": 1027, "11754": 1027, "13397": 1027, "fagan": 1027, "12174": 1027, "12972": 1027, "lucio": 1027, "fernandez": 1027, "arjona": 1027, "coeffeci": 1027, "13279": 1027, "13328": 1027, "13389": 1027, "basesgdclassifi": 1027, "13422": 1027, "cl\u00e9ment": [1027, 1031, 1033], "doumouro": 1027, "unhandl": 1027, "13363": 1027, "12821": 1027, "13350": 1027, "j\u00e9r\u00f4me": [1027, 1028, 1029], "dock\u00e8": [1027, 1028, 1029], "9907": 1027, "12232": 1027, "sangeeth": 1027, "11179": 1027, "13151": 1027, "12568": 1027, "8216": 1027, "romuald": 1027, "menuet": 1027, "12732": 1027, "12334": 1027, "13607": 1027, "12855": 1027, "pawel": 1027, "sendyk": 1027, "13628": 1027, "13447": 1027, "10580": 1027, "sandra": [1027, 1033], "mitrov": 1027, "13554": 1027, "celelibi": 1027, "13142": 1027, "11354": 1027, "12613": 1027, "12669": 1027, "torrella": [1027, 1028, 1034], "12861": 1027, "8773": 1027, "13366": 1027, "fournier": 1027, "10440": 1027, "12222": 1027, "10058": 1027, "chiotelli": 1027, "12279": 1027, "12582": 1027, "my_pipelin": 1027, "2568": 1027, "make_": 1027, "11364": 1027, "baze": 1027, "petrushev": 1027, "__len__": 1027, "13439": 1027, "12908": 1027, "drew": 1027, "13253": 1027, "12116": 1027, "12197": 1027, "12251": 1027, "float16": 1027, "13007": 1027, "raffaello": 1027, "baluyot": 1027, "13333": 1027, "13459": 1027, "hunter": 1027, "mcgushion": 1027, "8508": 1027, "6261": 1027, "vettigli": 1027, "justglow": 1027, "12300": 1027, "11458": 1027, "mitar": 1027, "milutinov": 1027, "12344": 1027, "13549": 1027, "warn_on_dtyp": 1027, "check_pairwise_arrai": 1027, "13382": 1027, "prathmesh": 1027, "saval": 1027, "11705": 1027, "11973": 1027, "our_rand_r": 1027, "madhura": [1027, 1029, 1030, 1033], "parikh": [1027, 1032, 1033, 1034], "13531": 1027, "check_fit_idempot": 1027, "alberto": [1027, 1031, 1032], "torr": 1027, "amourav": 1027, "assiaben": 1027, "micha\u0142owski": 1027, "brentfagan": 1027, "chenal": [1027, 1028, 1030], "choe": 1027, "drewmjohnston": 1027, "dror": 1027, "atariah": 1027, "esvhd": 1027, "falak": 1027, "gandenberg": 1027, "luqi": 1027, "jf": 1027, "kulbear": 1027, "leandro": [1027, 1031], "hermida": [1027, 1031], "luk": 1027, "manimaran": [1027, 1029, 1030, 1031, 1032], "gaido": 1027, "marinelm": 1027, "masstran": 1027, "roeschk": 1027, "aftab": 1027, "abdela": 1027, "ibraheem": 1027, "mwestt": 1027, "iijima": 1027, "oresti": 1027, "osman": [1027, 1033], "flanagan": [1027, 1028], "soriano": 1027, "peai": 1027, "pim": 1027, "haan": 1027, "raf": 1027, "rajdeep": 1027, "dua": 1027, "ra\u00fal": 1027, "garc\u00eda": [1027, 1028, 1033], "lekhwani": 1027, "varma": 1027, "shiyu": 1027, "duan": [1027, 1029], "smari": [1027, 1028, 1029], "st\u00e9phane": [1027, 1028, 1032, 1033], "surgan12": 1027, "thibsej": 1027, "xhan": 1027, "xinyuliu12": 1027, "zayd": 1027, "hammoudeh": 1027, "16397": [1028, 1029], "16500": 1028, "16505": 1028, "16076": 1028, "shack": [1028, 1029, 1030], "15930": 1028, "inder128": 1028, "15810": 1028, "15898": 1028, "gargsya": 1028, "15933": 1028, "15760": 1028, "15888": 1028, "15936": 1028, "dizietasahi": 1028, "15879": 1028, "bibhash": [1028, 1029], "chandra": [1028, 1029, 1032], "mitra": [1028, 1029, 1033], "15937": 1028, "blyston": [1028, 1029], "15863": 1028, "abstractmethod": 1028, "_check_x": 1028, "basenb": 1028, "15996": 1028, "brigitta": [1028, 1029, 1030, 1034], "sip\u0151cz": [1028, 1029, 1030, 1034], "15751": 1028, "tirth": [1028, 1029], "15868": 1028, "nikla": [1028, 1029], "smedemark": 1028, "marguli": 1028, "15797": 1028, "15947": 1028, "revamp": 1028, "14849": 1028, "_name_estim": 1028, "_gb": 1028, "facto": 1028, "_birch": 1028, "9250": 1028, "12927": 1028, "deprecationwarn": 1028, "interfer": 1028, "hinder": 1028, "15080": 1028, "14464": 1028, "13575": 1028, "10482": 1028, "13726": 1028, "shuzh": 1028, "9288": 1028, "15057": 1028, "korolev": 1028, "15120": 1028, "7943": 1028, "12303": 1028, "14510": 1028, "14890": 1028, "miguel": 1028, "cabrera": 1028, "14544": 1028, "15304": 1028, "jaim": 1028, "ferrando": 1028, "huerta": 1028, "12068": 1028, "12145": 1028, "13609": 1028, "camila": 1028, "williamson": 1028, "15661": 1028, "15160": 1028, "14259": 1028, "14764": 1028, "14740": 1028, "st\u00e9phan": 1028, "tulken": 1028, "14623": 1028, "sarra": 1028, "habchi": 1028, "15257": 1028, "willocx": 1028, "12650": 1028, "13960": 1028, "multiouput": 1028, "14908": 1028, "martina": [1028, 1030], "vila": [1028, 1030], "15382": 1028, "14933": 1028, "15138": 1028, "cusick": 1028, "14406": 1028, "14012": 1028, "faouzi": [1028, 1029], "13769": 1028, "14194": 1028, "least_absolute_devi": [1028, 1030, 1031], "13896": 1028, "13933": 1028, "14710": 1028, "categorical_crossentropi": [1028, 1032], "14869": 1028, "14682": 1028, "hancock": 1028, "5963": 1028, "pablo": [1028, 1031, 1032], "dubou": 1028, "14287": 1028, "15375": 1028, "14305": 1028, "14114": 1028, "15084": 1028, "14294": 1028, "14907": 1028, "14602": 1028, "chawla": 1028, "vectorizermixin": 1028, "14430": 1028, "strip_accents_unicod": 1028, "15100": 1028, "gradi": 1028, "overflowerror": 1028, "15463": 1028, "norvan": 1028, "sahin": 1028, "14520": 1028, "11635": 1028, "alec": 1028, "13704": 1028, "15557": 1028, "14378": 1028, "masashi": [1028, 1030], "shibata": 1028, "ashim": 1028, "bhattarai": 1028, "15010": 1028, "skip_comput": 1028, "13773": 1028, "14356": 1028, "15393": 1028, "venkatachalam": [1028, 1029, 1030, 1031, 1032], "14646": 1028, "14028": 1028, "15429": 1028, "14706": 1028, "14108": 1028, "14170": 1028, "14296": 1028, "13618": 1028, "13995": 1028, "14458": 1028, "14591": 1028, "14864": 1028, "15044": 1028, "15086": 1028, "15038": 1028, "15082": 1028, "13213": 1028, "14647": 1028, "linalgerror": 1028, "13393": 1028, "13707": 1028, "training_data_": 1028, "14357": 1028, "14900": 1028, "socastro": [1028, 1034], "9951": 1028, "14936": 1028, "15083": 1028, "12789": 1028, "15274": 1028, "13938": 1028, "15049": 1028, "toccac": 1028, "ptocca": 1028, "13231": 1028, "dong": 1028, "13467": 1028, "14595": 1028, "14865": 1028, "l\u00e9onard": [1028, 1033], "binet": [1028, 1033], "14732": 1028, "14417": 1028, "15625": 1028, "12258": 1028, "14898": 1028, "matcovici": 1028, "14593": 1028, "reboul": 1028, "14549": 1028, "14704": 1028, "15096": 1028, "14629": 1028, "15488": 1028, "15490": 1028, "12569": 1028, "bicker": 1028, "9597": 1028, "wenbo": [1028, 1030], "zhao": [1028, 1030, 1031, 1032, 1033], "14336": 1028, "dexter": 1028, "9274": 1028, "perri": 1028, "13806": 1028, "ana\u00ebl": 1028, "beaugnon": 1028, "15119": 1028, "15053": 1028, "13290": 1028, "13987": 1028, "_pairwis": [1028, 1030], "13925": 1028, "robson": 1028, "15524": 1028, "xun": [1028, 1030], "12557": 1028, "14286": 1028, "15099": 1028, "baselibsvm": 1028, "_sparse_fit": 1028, "14894": 1028, "danna": 1028, "naser": 1028, "12887": 1028, "15028": 1028, "guan": 1028, "14381": 1028, "11232": 1028, "sievert": 1028, "10815": 1028, "14035": 1028, "14475": 1028, "14538": 1028, "14872": 1028, "upcast": [1028, 1032], "15094": 1028, "choose_check_classifiers_label": 1028, "enforce_estimator_tags_i": 1028, "mock": 1028, "mockdatafram": 1028, "checkingclassifi": 1028, "newton_cg": 1028, "random_choice_csc": 1028, "fast_dict": 1028, "parallel_help": 1028, "14902": 1028, "14971": 1028, "nep": 1028, "14702": 1028, "13013": 1028, "13875": 1028, "14680": 1028, "check_classifier_multioutput": 1028, "check_regressor_multioutput": 1028, "13392": 1028, "rok": 1028, "mihevc": 1028, "check_transformer_data_not_an_arrai": 1028, "mro": [1028, 1029], "14884": 1028, "alphonsu": 1028, "abbi": [1028, 1029], "popa": [1028, 1029], "abdur": 1028, "rahmaan": 1028, "janhang": 1028, "abenbihi": 1028, "abhinav": [1028, 1031], "sagar": 1028, "jana": 1028, "lagat": 1028, "alessandro": [1028, 1030, 1033], "surac": 1028, "siqueira": 1028, "alexgoryainov": 1028, "itk": [1028, 1029, 1030], "alexshack": [1028, 1029, 1030], "akinkunl": 1028, "kaseorg": 1028, "maldonado": [1028, 1031], "angela": [1028, 1029, 1033], "ambroz": [1028, 1029], "anisha": 1028, "keshavan": 1028, "gutierrez": 1028, "anuja": 1028, "archana": [1028, 1030], "alva": 1028, "arnaudstiegl": 1028, "arpanchowdhri": 1028, "ashimb9": 1028, "ayomid": 1028, "bamidel": 1028, "baran": 1028, "buluttekin": 1028, "barrycg": 1028, "bill": [1028, 1029], "mill": 1028, "biswadip": 1028, "mandal": 1028, "blackd0t": 1028, "barklei": 1028, "c56poni": 1028, "camilaagw": 1028, "cartman_nabana": 1028, "catajara": 1028, "cgsavard": [1028, 1029], "vesteghem": 1028, "dakota": 1028, "grusak": 1028, "datenbergwerk": 1028, "dormagen": 1028, "deeplook": 1028, "drgfreeman": 1028, "cashman": 1028, "edvardlindelof": 1028, "ndirangu": [1028, 1032], "eunseop": 1028, "jeong": 1028, "fanni": 1028, "federicopisanu": 1028, "divo": 1028, "flaviomorelli": 1028, "francidona": 1028, "franco": 1028, "luqu": 1028, "freder": 1028, "haas": 1028, "g0g0gadget": 1028, "altai": 1028, "vale": 1028, "rio": [1028, 1030, 1031, 1032], "ganevgv": 1028, "gdex1": 1028, "getgaurav2": 1028, "gideon": 1028, "sonoiya": 1028, "gpapadok": [1028, 1032], "mogavero": 1028, "h4dr1en": 1028, "hadshirt": 1028, "hailei": [1028, 1029], "nguyen": [1028, 1029, 1032, 1033], "hannah": [1028, 1030, 1032], "bruce": [1028, 1029], "macdonald": [1028, 1029], "honglu": 1028, "ingrid": 1028, "spielman": 1028, "a16": [1028, 1029], "jaehong": 1028, "jai": [1028, 1032], "jeromedock": 1028, "jesper": 1028, "dramsch": 1028, "joanna": 1028, "ortiz": 1028, "kanika": 1028, "sabharw": 1028, "katarina": [1028, 1030], "slama": [1028, 1030], "kellycarmodi": 1028, "eth": 1028, "kensuk": 1028, "arai": 1028, "kesshi": [1028, 1029], "kevad": 1028, "lofti": [1028, 1029], "winata": [1028, 1030], "sheng": 1028, "dolmatov": 1028, "kirthi": 1028, "shankar": 1028, "sivamani": 1028, "katyal": 1028, "lakshmi": 1028, "krishnan": 1028, "lalliacqua": [1028, 1031], "lbfin": 1028, "loopym": 1028, "lostcoast": 1028, "huynh": [1028, 1030], "lrjball": [1028, 1029], "roeder": 1028, "maggiecheg": [1028, 1032], "maithreyi": 1028, "venkatesh": 1028, "maltimor": 1028, "maocx": 1028, "douriez": [1028, 1029], "oywa": 1028, "aladago": 1028, "mbillingr": 1028, "clare": 1028, "micah": 1028, "miguelbarao": 1028, "mina": [1028, 1029], "naghshhnejad": [1028, 1029], "motmoti": 1028, "mschaffenroth": 1028, "natasha": 1028, "nezar": 1028, "nidhin": 1028, "pattaniyil": 1028, "nishan": 1028, "mann": 1028, "nitya": 1028, "mandyam": 1028, "novaya": [1028, 1031], "nxorabl": 1028, "oleg": 1028, "stikhin": 1028, "omar": [1028, 1033, 1034], "saleem": 1028, "panpiort8": [1028, 1030], "paula": [1028, 1029], "poorna": [1028, 1030], "pspachtholz": [1028, 1029, 1030], "qdeffens": [1028, 1031], "garg": [1028, 1029], "rapha\u00ebl": 1028, "bournhonesqu": 1028, "reza": 1028, "gharibi": 1028, "payn": 1028, "rlm": 1028, "juergen": [1028, 1033], "sanjabi": 1028, "ruchitagard": 1028, "ruth": 1028, "waithera": 1028, "sackei": 1028, "samesh": [1028, 1029], "lakhotia": [1028, 1029], "sewook": 1028, "dare": 1028, "shreya": 1028, "simoncw": 1028, "smujjiga": 1028, "s\u00f6nke": 1028, "behrend": 1028, "soumirai": 1028, "steinfurt": [1028, 1030], "cowlei": 1028, "th0rwa": [1028, 1029], "theoptip": [1028, 1029], "theotheo": 1028, "thierno": 1028, "ibrahima": 1028, "diop": 1028, "schmitt": [1028, 1029], "tilen": 1028, "kusterl": 1028, "timsaur": 1028, "tola": 1028, "topisan": 1028, "ttang131": 1028, "veerlosar": 1028, "luzgin": 1028, "jeanselm": 1028, "lostanlen": 1028, "vnherdeiro": 1028, "wendi": 1028, "willdarnel": 1028, "wolframalpha": 1028, "xcjason": 1028, "martian": 1028, "xsat": 1028, "yinglr": 1028, "yokasr": 1028, "maxin": [1028, 1029], "yulia": 1028, "zamrii": 1028, "feng": [1028, 1030, 1031, 1032], "17959": 1029, "17848": 1029, "17742": 1029, "17995": 1029, "thomaz": 1029, "santana": [1029, 1032], "dsouza": [1029, 1030, 1031, 1032], "17433": 1029, "17985": 1029, "multinomialdevi": 1029, "logloss": [1029, 1033], "17694": 1029, "rempfler": 1029, "tsutomu": 1029, "kusanagi": [1029, 1031], "17357": 1029, "18016": 1029, "x_copi": 1029, "17914": 1029, "15730": 1029, "forrest": [1029, 1030], "17309": 1029, "swier": [1029, 1030], "heer": 1029, "17812": 1029, "bruno": [1029, 1030, 1031], "idl": 1029, "17210": 1029, "17235": 1029, "17204": 1029, "changed_onli": 1029, "17205": 1029, "15005": [1029, 1031], "slep009": [1029, 1031, 1032], "estimator_samples_": 1029, "16149": 1029, "11950": 1029, "11514": 1029, "16075": 1029, "16484": 1029, "agglomerativecluclust": 1029, "16257": 1029, "simona": [1029, 1030, 1031], "maggio": [1029, 1030, 1031], "16801": 1029, "rcwoolston": 1029, "16431": 1029, "14048": 1029, "15963": 1029, "16084": 1029, "15950": 1029, "stephani": 1029, "15980": 1029, "wconnel": 1029, "15709": 1029, "15707": 1029, "maciej": 1029, "mikulski": 1029, "16006": 1029, "rushabh": 1029, "vasani": 1029, "streamhandl": 1029, "logger": 1029, "handler": 1029, "16451": 1029, "16280": 1029, "16837": 1029, "wornbb": 1029, "15669": 1029, "chaitanya": 1029, "16224": 1029, "schwetlick": [1029, 1030], "gelavizh": 1029, "ahmadi": 1029, "marija": [1029, 1030], "vlajic": [1029, 1030], "wheeler": [1029, 1030], "16841": 1029, "16655": 1029, "16718": 1029, "miotto": 1029, "16981": 1029, "g\u00f3rski": [1029, 1030], "14696": 1029, "14516": 1029, "15582": 1029, "16069": 1029, "bail": 1029, "16183": 1029, "16182": 1029, "santhosh": 1029, "16437": 1029, "hwan": 1029, "cho": 1029, "16539": 1029, "deros": 1029, "16692": 1029, "16663": 1029, "15834": 1029, "santiago": 1029, "mola": 1029, "16103": 1029, "divyaprabha": 1029, "selectormixin": 1029, "16132": 1029, "trimeta": 1029, "15503": 1029, "15782": 1029, "plgreenliru": 1029, "16403": 1029, "narendra": 1029, "mukherje": 1029, "16508": 1029, "15864": 1029, "14300": 1029, "15436": 1029, "15652": 1029, "15179": 1029, "angelaambroz": 1029, "15773": 1029, "15655": 1029, "14848": 1029, "absgrad": 1029, "_newton_cg": 1029, "16266": 1029, "standard_coef_": 1029, "standard_intercept_": 1029, "average_coef_": 1029, "average_intercept_": 1029, "16261": 1029, "brandt": 1029, "16849": 1029, "14264": 1029, "17021": 1029, "16323": 1029, "16362": 1029, "16442": 1029, "parson": [1029, 1031], "rick": 1029, "mackenbach": 1029, "16993": 1029, "emit": 1029, "15622": 1029, "mors": 1029, "15918": 1029, "kubin": 1029, "fit_grid_point": 1029, "16401": 1029, "pratama": 1029, "sutiono": 1029, "15953": 1029, "15959": 1029, "16111": 1029, "16090": 1029, "jayaratn": [1029, 1030, 1033], "14075": 1029, "meyer89": 1029, "16117": 1029, "15785": 1029, "16245": 1029, "16585": 1029, "15762": 1029, "16466": 1029, "16632": 1029, "maura": 1029, "pintor": 1029, "battista": 1029, "biggio": 1029, "15946": 1029, "ngshya": 1029, "32767": 1029, "mersenn": 1029, "twister": 1029, "31bit": 1029, "63bit": 1029, "crude": 1029, "postprocessor": 1029, "lemir": 1029, "13511": 1029, "kennel": 1029, "11296": 1029, "15558": 1029, "15806": 1029, "16331": 1029, "batiss": 1029, "15926": 1029, "16021": 1029, "sparsearrai": 1029, "16728": 1029, "uint": 1029, "17032": 1029, "_safe_tag": 1029, "16950": 1029, "15380": 1029, "acitiv": 1029, "16726": 1029, "16112": 1029, "16622": 1029, "17061": 1029, "aleksandra": 1029, "kocot": 1029, "alonso": [1029, 1031], "allend": [1029, 1031], "ana": [1029, 1031], "casado": 1029, "ankit810": 1029, "arunav": 1029, "konwar": 1029, "maingret": 1029, "beier": 1029, "berni": 1029, "bharathi": 1029, "brigi": [1029, 1030], "castachick": 1029, "castor": 1029, "corri": 1029, "bartelheim": 1029, "dani\u00ebl": 1029, "gelder": 1029, "daphn": 1029, "breuer": 1029, "cort": [1029, 1030, 1033], "dbauer9": 1029, "borovikova": 1029, "eln": 1029, "emili": [1029, 1030], "leung": 1029, "evgeni": 1029, "chasnovski": 1029, "fabiana": 1029, "facundo": [1029, 1032], "ferr\u00edn": 1029, "franziska": 1029, "boenisch": 1029, "bolmier": [1029, 1030, 1034], "gholdman1": 1029, "gonthier": 1029, "hao": [1029, 1030, 1032, 1033], "chun": [1029, 1030, 1032, 1033, 1034], "haoyin": [1029, 1031, 1032], "h\u00e9lion": 1029, "bourboux": 1029, "himanshu": [1029, 1032], "hirofumi": [1029, 1030], "suzuki": [1029, 1030], "huangk10": 1029, "kemenad": 1029, "hye": 1029, "sung": 1029, "indecisiveus": [1029, 1030], "inderjeet": 1029, "jjmistri": 1029, "haitz": [1029, 1031, 1032], "legarreta": [1029, 1031, 1032], "gorro\u00f1o": [1029, 1031, 1032], "judithabk6": 1029, "jumon": 1029, "kathryn": 1029, "krishnachaitanya9": 1029, "gia": 1029, "thuan": 1029, "lkubin": 1029, "lopusz": 1029, "lucgiffon": 1029, "lucyleeow": 1029, "kemk": 1029, "magda": 1029, "zielinska": 1029, "mandi": [1029, 1032], "gu": [1029, 1030, 1032], "manish": 1029, "aradwad": 1029, "maren": [1029, 1030, 1031, 1032, 1033], "westermann": [1029, 1030, 1031, 1032, 1033], "mariana": 1029, "meirel": 1029, "mariel": 1029, "mc4229": 1029, "shoemak": 1029, "micha\u0142": 1029, "s\u0142apek": 1029, "mojca": 1029, "bertoncelj": 1029, "narendramukherje": 1029, "nicolasservel": 1029, "nkish": 1029, "noa": 1029, "tamir": [1029, 1032], "olicairn": 1029, "ur": 1029, "lenz": [1029, 1033], "delanou": 1029, "qizhi": 1029, "quang": 1029, "rachelcjordan": 1029, "raduspaimoc": 1029, "riccardo": 1029, "folloni": 1029, "ritchi": 1029, "rori": 1029, "hartong": 1029, "redden": 1029, "sambhav": 1029, "kothari": 1029, "santhoshbala18": 1029, "sarat": 1029, "addep": 1029, "scibol": 1029, "kie\u00dfl": 1029, "sergiodsr": 1029, "shiki": 1029, "shubh": 1029, "chatterje": 1029, "simonamaggio": [1029, 1030, 1031], "snowhit": 1029, "stareh": 1029, "marsh": 1029, "sunmi": 1029, "yoon": 1029, "talgatomarov": 1029, "tamirlan1": 1029, "nonner": 1029, "vink": [1029, 1031], "tiphain": 1029, "viard": 1029, "titu": 1029, "vachan": 1029, "vandana": 1029, "iyer": 1029, "waelbenamara": 1029, "wderos": 1029, "wenliwyan": 1029, "windber": 1029, "19579": 1030, "19646": 1030, "stopiter": 1030, "19922": 1030, "19732": 1030, "ishikawa": [1030, 1031], "19407": 1030, "ushtanit": [1030, 1031], "19982": 1030, "19939": 1030, "halvic": 1030, "19703": 1030, "sobkevich": 1030, "villaz\u00f3n": 1030, "terraza": 1030, "fonari": [1030, 1031], "19182": 1030, "yosuk": [1030, 1031], "kobayashi": [1030, 1031], "19721": 1030, "19659": 1030, "19211": 1030, "19847": 1030, "xiaoyu": 1030, "chai": [1030, 1033], "19308": 1030, "19234": 1030, "19727": 1030, "delong": [1030, 1031], "transfrom": 1030, "19888": 1030, "19924": 1030, "19271": 1030, "zhaowei": 1030, "19580": 1030, "brice": [1030, 1031], "adamson": 1030, "wil": 1030, "yegelwel": 1030, "css": 1030, "19417": 1030, "19179": 1030, "19126": 1030, "17448": 1030, "17107": 1030, "17546": 1030, "17856": 1030, "17984": 1030, "riedmann": 1030, "francesco": [1030, 1033], "casalegno": 1030, "18052": 1030, "sean": [1030, 1031, 1033], "stallei": 1030, "17937": 1030, "counts_": 1030, "init_size_": 1030, "17864": 1030, "17616": 1030, "18167": 1030, "18256": 1030, "jayratn": 1030, "16392": 1030, "17095": 1030, "18746": 1030, "18525": 1030, "norm_y_weight": 1030, "x_mean_": 1030, "y_mean_": 1030, "x_std_": 1030, "y_std_": 1030, "18768": 1030, "18302": 1030, "md5": 1030, "checksum": 1030, "14800": 1030, "17396": 1030, "jiaxiang": 1030, "17491": 1030, "18280": 1030, "17499": 1030, "17610": 1030, "11064": 1030, "17414": 1030, "18149": 1030, "17679": 1030, "18528": 1030, "villanova": [1030, 1031], "14446": 1030, "18394": 1030, "16985": 1030, "garbag": 1030, "18334": 1030, "multicor": [1030, 1031], "18341": 1030, "egor": 1030, "smirnov": 1030, "18410": 1030, "17702": 1030, "18326": 1030, "changedbehaviorwarn": 1030, "nonblasdotwarn": 1030, "17804": 1030, "17367": 1030, "15427": 1030, "gangesh": 1030, "gudmalwar": 1030, "erin": 1030, "6545": 1030, "17159": 1030, "15361": 1030, "17878": 1030, "17090": 1030, "_check_bounds_param": 1030, "12638": 1030, "lannuzel": 1030, "17526": 1030, "ayako": 1030, "yagi": 1030, "17612": 1030, "srimukh": 1030, "sripada": 1030, "16493": 1030, "darshan": 1030, "15636": 1030, "18987": 1030, "16619": 1030, "16906": 1030, "roei": 1030, "kahni": 1030, "18293": 1030, "16289": 1030, "kishimoto": 1030, "18639": 1030, "13003": 1030, "s\u00e1nchez": 1030, "18545": 1030, "laurenz": 1030, "reitsam": 1030, "17578": 1030, "knox": 1030, "6624": 1030, "marijn": 1030, "vliet": 1030, "18121": 1030, "18607": 1030, "fhaselbeck": 1030, "18622": 1030, "haesun": [1030, 1033], "10493": 1030, "17997": 1030, "maisonneuv": 1030, "square_dist": 1030, "17662": 1030, "18278": 1030, "17412": 1030, "16625": 1030, "10591": 1030, "karnowski": 1030, "plot_det_curv": [1030, 1031], "18176": 1030, "10708": 1030, "15007": 1030, "hathidara": 1030, "10711": 1030, "17192": 1030, "avi": [1030, 1031], "17225": 1030, "17569": 1030, "17651": 1030, "mato": 1030, "17777": 1030, "shubhanshu": 1030, "mishra": [1030, 1031], "17826": 1030, "decal": 1030, "willard": 1030, "17935": 1030, "cari": 1030, "goltermann": 1030, "18114": 1030, "18405": 1030, "yakov": 1030, "pchelintsev": 1030, "13900": 1030, "17478": 1030, "teon": 1030, "13204": 1030, "kosic": 1030, "18527": 1030, "18343": 1030, "devi": 1030, "sandeep": 1030, "18595": 1030, "18222": 1030, "18266": 1030, "subrat": 1030, "sahu": 1030, "15126": 1030, "17987": 1030, "17233": 1030, "zolisa": 1030, "bleki": 1030, "histgradientboost": 1030, "18124": 1030, "brocchini": 1030, "armstrong": 1030, "17427": 1030, "17038": 1030, "neighborsbas": [1030, 1033], "17148": 1030, "18691": 1030, "18370": 1030, "18612": 1030, "17603": 1030, "17604": 1030, "17606": 1030, "17608": 1030, "17609": 1030, "17633": 1030, "17661": 1030, "17932": 1030, "16352": 1030, "17759": 1030, "18269": 1030, "17876": 1030, "18429": 1030, "biernat": 1030, "17317": 1030, "17406": 1030, "wick": 1030, "18406": 1030, "17833": 1030, "yashika": 1030, "18510": 1030, "18447": 1030, "16066": 1030, "18682": 1030, "16935": 1030, "17193": 1030, "16335": 1030, "14982": 1030, "11682": 1030, "patric": [1030, 1031], "15763": 1030, "16530": 1030, "shuhua": 1030, "17386": 1030, "17187": 1030, "x_idx_sort": 1030, "17614": 1030, "check_methods_sample_order_invari": [1030, 1032], "17598": 1030, "ngo": 1030, "17992": 1030, "endian": 1030, "17644": 1030, "18508": 1030, "abo7atm": 1030, "spannbauer": 1030, "deodhar": 1030, "alexandracraciun": 1030, "amy12xx": 1030, "tiwari": 1030, "choraria": 1030, "subramaniyan": 1030, "kushwaha": 1030, "atsushi": [1030, 1031], "nukariya": [1030, 1031], "aura": 1030, "autoviz": 1030, "auto_viml": 1030, "avinash": 1030, "anak": 1030, "barankaraku": 1030, "barberogaston": 1030, "beatrizsmg": 1030, "mainy": 1030, "bossan": [1030, 1032, 1033, 1034], "pedigo": [1030, 1031], "bhavika": 1030, "devnani": 1030, "biprateep": 1030, "dei": 1030, "bmaisonn": 1030, "byron": 1030, "ceethinwa": [1030, 1031], "chaitanyamog": 1030, "clmbst": 1030, "coelhudo": 1030, "crispinlogan": [1030, 1033, 1034], "cristina": 1030, "mula": 1030, "darioka": [1030, 1032, 1033], "declan": 1030, "neill": 1030, "deeksha": 1030, "madan": 1030, "fiegel": [1030, 1031, 1033], "khoo": 1030, "eschibli": 1030, "fran": [1030, 1031, 1032], "larsson": [1030, 1031, 1032], "sheni": 1030, "genvalen": [1030, 1031, 1032, 1033], "kiragu": 1030, "gesa": 1030, "stupperich": 1030, "ghislain": 1030, "vaillant": 1030, "gim": 1030, "seng": 1030, "chevali": 1030, "bohl": [1030, 1032], "schole": 1030, "hitesh": 1030, "somani": 1030, "hoda1394": 1030, "moin": 1030, "hugorichard": 1030, "isuru": 1030, "wiryadi": 1030, "j0rd1smit": 1030, "jaehyun": 1030, "ahn": 1030, "tae": 1030, "hoctor": 1030, "vese": 1030, "jeevan": 1030, "jeroenpeterbo": 1030, "jhay": 1030, "jigna": 1030, "panchal": 1030, "jim0421": 1030, "joaquin": 1030, "gorb": 1030, "moya": 1030, "kartik": 1030, "chugh": 1030, "kaylani2": 1030, "kendrick": 1030, "cetina": 1030, "kenni": 1030, "isakov": 1030, "koki": 1030, "nishihara": 1030, "krum": [1030, 1032], "arnaudov": [1030, 1032], "oldja": 1030, "guitton": 1030, "mariam": 1030, "l\u00f6ning": 1030, "scheubrein": 1030, "megasari": 1030, "mathschi": 1030, "giudic": 1030, "milan": 1030, "straka": 1030, "muoki": 1030, "caleb": 1030, "haiat": 1030, "nadia": 1030, "tahiri": 1030, "ph": 1030, "hamada": 1030, "neil": 1030, "botelho": 1030, "nil": 1030, "noelano": 1030, "oj_lappi": 1030, "oleh": [1030, 1032], "kozynet": [1030, 1032], "pankaj": 1030, "jindal": 1030, "pardeep": 1030, "parthiv": 1030, "chigurupati": 1030, "pgithub": 1030, "probinette4": 1030, "pwalchessen": 1030, "rachel": [1030, 1033], "fischoff": 1030, "toshniw": 1030, "rafei": 1030, "iqbal": 1030, "rahul": 1030, "jakhar": 1030, "rachum": 1030, "ramyanp": [1030, 1031], "rauwuckl": 1030, "ravi": [1030, 1033], "kiran": 1030, "boggavarapu": 1030, "rishi": 1030, "advani": 1030, "rithvik": 1030, "romijnd": 1030, "tavenard": 1030, "rubi": 1030, "werman": 1030, "ryotaro": 1030, "tsukada": 1030, "sadak": 1030, "khandelw": 1030, "ezebunandu": 1030, "kimbinyi": 1030, "shail": 1030, "keller": 1030, "shao": [1030, 1031, 1032], "shooter23": [1030, 1031], "soledad": 1030, "galli": 1030, "subrat93": 1030, "sunitha": 1030, "selvan": 1030, "kusanagi2": 1030, "terenc": [1030, 1031], "honl": [1030, 1031], "thij": [1030, 1033, 1034], "thomas9292": 1030, "thorben": 1030, "tijanajovanov": 1030, "timo": 1030, "tnwei": 1030, "ufmay": 1030, "umberto": 1030, "lupo": 1030, "vika": [1030, 1032], "viniciu": [1030, 1031], "fuck": [1030, 1031], "violeta": 1030, "watchtheblur": 1030, "willpeppo": 1030, "xethan": 1030, "qianm": 1030, "yue": 1030, "yutaro": 1030, "ikeda": 1030, "zacchari": 1030, "ramzi": 1030, "zoj613": 1030, "21271": 1031, "21833": 1031, "siavash": 1031, "rezazadeh": 1031, "19210": 1031, "21295": 1031, "22050": 1031, "21991": 1031, "19869": 1031, "21481": [1031, 1032], "andr\u00e9": [1031, 1032], "babino": [1031, 1032], "disconnect": 1031, "21915": 1031, "21694": 1031, "minkowskidist": 1031, "minknowski": 1031, "cdist": 1031, "21741": 1031, "21871": 1031, "21845": 1031, "21517": 1031, "21917": 1031, "21552": 1031, "escap": [1031, 1033], "21493": 1031, "21199": 1031, "20638": 1031, "bohn\u00e9": 1031, "21179": 1031, "21195": 1031, "21130": 1031, "20761": 1031, "21251": 1031, "min_idf": 1031, "max_idf": 1031, "20752": 1031, "alek": [1031, 1032], "lefebvr": [1031, 1032], "21340": 1031, "21093": 1031, "21351": 1031, "cve": 1031, "28975": 1031, "21336": 1031, "_check_sample_weight": 1031, "only_non_neg": 1031, "20880": 1031, "andr\u00e1": [1031, 1032, 1033], "if_delegate_has_method": [1031, 1032], "21145": 1031, "zahlii": 1031, "21389": 1031, "20002": 1031, "19310": 1031, "least_squar": 1031, "19733": 1031, "lad": 1031, "absolute_loss": 1031, "20165": 1031, "18444": 1031, "18010": 1031, "threadsaf": 1031, "18736": 1031, "17443": 1031, "19641": 1031, "20087": 1031, "fauchereau": 1031, "19002": 1031, "19052": 1031, "yusuk": 1031, "nagasaka": 1031, "17622": 1031, "19024": 1031, "franki": 1031, "robertson": 1031, "20117": 1031, "natchiappan": [1031, 1032], "19883": 1031, "20597": 1031, "20899": 1031, "20200": 1031, "fit_": 1031, "partial_fit_": 1031, "19297": 1031, "20560": 1031, "18393": 1031, "bittarello": 1031, "19263": 1031, "19244": 1031, "18459": 1031, "nd": 1031, "18898": 1031, "ora": 1031, "phongpanagnam": 1031, "21080": 1031, "ledoit_wolf_shrinkag": 1031, "20416": 1031, "defoi": 1031, "20583": 1031, "19365": 1031, "ateif": 1031, "sara": 1031, "19669": 1031, "importlib": 1031, "pyoxid": 1031, "20297": 1031, "20209": 1031, "19011": 1031, "20729": 1031, "12069": 1031, "19046": 1031, "surya": [1031, 1032], "18433": 1031, "19198": 1031, "19159": 1031, "beno\u00eet": 1031, "mal\u00e9zieux": 1031, "19908": 1031, "20512": 1031, "20960": 1031, "cgroup": [1031, 1032], "quota": [1031, 1032], "20477": 1031, "19799": 1031, "19564": 1031, "19836": 1031, "19162": 1031, "10096": 1031, "fenil": 1031, "suchak": 1031, "20159": 1031, "murata": [1031, 1032], "20534": 1031, "19296": 1031, "19035": 1031, "19520": 1031, "18964": 1031, "19401": 1031, "relova": 1031, "17169": 1031, "dmytro": 1031, "lituiev": 1031, "20380": 1031, "pulido": 1031, "felip": [1031, 1032, 1033, 1034], "bidu": [1031, 1032], "rutter": 1031, "20515": 1031, "carsten": 1031, "allefeld": 1031, "19568": 1031, "shyam": 1031, "20207": 1031, "tomohiro": 1031, "endo": 1031, "20161": 1031, "shuhei": 1031, "kayawari": 1031, "arka204": [1031, 1033], "20431": 1031, "pfaffel": 1031, "19428": 1031, "hamoumi": 1031, "19411": 1031, "20959": 1031, "20554": 1031, "xiangyin": 1031, "kong": 1031, "9978": 1031, "10027": 1031, "16449": 1031, "20231": 1031, "naka": 1031, "19571": 1031, "20155": 1031, "oura": [1031, 1032, 1033], "19004": 1031, "midvidi": 1031, "19055": 1031, "19172": 1031, "19426": 1031, "19499": 1031, "strubel": 1031, "19616": 1031, "19391": 1031, "19390": 1031, "linearmodel": 1031, "17743": 1031, "17772": 1031, "17746": 1031, "17785": 1031, "17750": 1031, "17769": 1031, "20683": 1031, "19491": 1031, "19472": 1031, "shortest_path": 1031, "20531": 1031, "19415": 1031, "17036": 1031, "20326": 1031, "uttam": 1031, "9843": 1031, "19643": 1031, "attard": 1031, "19784": 1031, "18328": 1031, "20312": 1031, "divyanshu": 1031, "deoli": 1031, "18543": 1031, "20552": 1031, "19278": 1031, "20030": 1031, "tingshan": 1031, "18649": 1031, "rodion": 1031, "martynov": 1031, "20619": 1031, "baseshufflesplit": 1031, "20056": 1031, "pabloduque0": 1031, "prematur": 1031, "20904": 1031, "tomasz": 1031, "jakubek": [1031, 1032], "18925": 1031, "poznik": [1031, 1032, 1033], "18842": 1031, "19473": 1031, "jiefangxuanyan": 1031, "20072": 1031, "20842": 1031, "mart\u00edn": [1031, 1032], "19631": 1031, "19790": 1031, "flynn": [1031, 1033], "18368": 1031, "19483": 1031, "20526": 1031, "19069": 1031, "19041": 1031, "20250": 1031, "20652": 1031, "19934": 1031, "gleb": [1031, 1033, 1034], "levitskii": 1031, "19734": 1031, "robinson": 1031, "19752": 1031, "zhehao": [1031, 1032, 1033, 1034], "19527": 1031, "19788": 1031, "19356": 1031, "makoeppel": 1031, "19879": 1031, "19906": 1031, "20727": 1031, "20961": 1031, "n_input_features_": 1031, "20240": 1031, "20843": 1031, "18959": 1031, "wstate": 1031, "20023": 1031, "19336": 1031, "20272": 1031, "19459": 1031, "bezuidenhout": 1031, "clifford": 1031, "akai": 1031, "nettei": 1031, "19948": 1031, "20657": 1031, "19766": 1031, "20385": 1031, "_weighted_percentil": 1031, "huberlossfunct": 1031, "20528": 1031, "_safe_index": 1031, "20673": 1031, "is_scalar_nan": 1031, "assert_warn": 1031, "assert_warns_messag": 1031, "20521": 1031, "abdulelah": 1031, "mesfer": 1031, "adrian": [1031, 1032, 1033], "garcia": 1031, "badaracco": 1031, "sad\u0142ocha": 1031, "rubial": 1031, "alessia": 1031, "marcolini": 1031, "alihan": 1031, "zihna": 1031, "alin": 1031, "amol": 1031, "deshmukh": 1031, "pessoa": 1031, "anavelyz": 1031, "ashish": 1031, "ashvith": 1031, "shetti": 1031, "baam": [1031, 1032], "baptbillard": 1031, "bmalezieux": 1031, "bumblebe": 1031, "caherrera": 1031, "meli": [1031, 1032, 1033], "chrissobel": 1031, "yeh": 1031, "chuliang": 1031, "cliffordemmanuel": 1031, "conner": 1031, "shen": 1031, "dimitri": [1031, 1032, 1033, 1034], "papadopoulo": [1031, 1032, 1033, 1034], "orfano": [1031, 1032, 1033, 1034], "dmallia17": 1031, "ds_ana": 1031, "jardim": 1031, "edwinwenink": 1031, "eleni": 1031, "markou": 1031, "ericellwang": [1031, 1032], "ezri": 1031, "mudd": 1031, "fato": 1031, "morina": 1031, "hafner": 1031, "flyingdutchman23": 1031, "uwha": [1031, 1032], "bereng": 1031, "frederick": 1031, "frellwan": 1031, "vicent": [1031, 1032, 1033], "geroldcsend": 1031, "glen": 1031, "gl\u00f2ria": [1031, 1033], "mu\u00f1oz": [1031, 1033], "gregorystrubel": 1031, "groceryheist": 1031, "guiweb": 1031, "haidar": [1031, 1032], "almubarak": [1031, 1032], "moritz": [1031, 1033], "g\u00fcnther": 1031, "mirza": 1031, "harutaka": 1031, "kawamura": 1031, "hassan": 1031, "alsawadi": 1031, "geovan": [1031, 1032], "gome": [1031, 1032], "lima": [1031, 1032], "ilic": 1031, "ikko": 1031, "ashimin": 1031, "isaack": 1031, "mungui": 1031, "ishaan": 1031, "bhat": [1031, 1033], "ishan": [1031, 1032], "iwhalv": 1031, "preiss": 1031, "budarz": 1031, "jannik": 1031, "jennif": 1031, "jianzhu": 1031, "guo": 1031, "jnboehm": 1031, "johanwork": 1031, "paton": 1031, "n\u00e1pole": 1031, "julio": 1031, "julyrashchenko": 1031, "jvm": 1031, "kadatatlu": 1031, "kishor": 1031, "karen": 1031, "palacio": 1031, "kmatt10": 1031, "kobaski": 1031, "kot271828": 1031, "kunj": 1031, "kurumeyuta": 1031, "kxytim": 1031, "lacrosse91": 1031, "laveen": 1031, "bagai": 1031, "leonardo": 1031, "rocco": [1031, 1032, 1033], "uieda": 1031, "leopoldo": 1031, "corona": 1031, "lsturtew": 1031, "lucca": 1031, "quadro": 1031, "ly648499246": 1031, "mabu": 1031, "manaileng": 1031, "mariangela": 1031, "marielaraj": 1031, "hirzel": 1031, "mateo": 1031, "nore\u00f1a": 1031, "mathi": 1031, "batoul": 1031, "calcot": 1031, "prieur": 1031, "\u00f6zer": 1031, "miao": 1031, "cai": 1031, "karbownik": 1031, "michalkrawczyk": [1031, 1032], "mitzi": [1031, 1032], "mlondschien": 1031, "haseeb": [1031, 1032], "khoual": 1031, "jarir": 1031, "kanji": 1031, "nadim": 1031, "kawwa": 1031, "nanshan": 1031, "naozin555": 1031, "fultz": 1031, "nic": 1031, "annau": 1031, "stefani": [1031, 1033], "nigel": 1031, "bosch": 1031, "nodar": 1031, "okroshiashvili": 1031, "ogbonna": 1031, "chibuik": 1031, "ogordon100": 1031, "phongpanangam": 1031, "duqu": 1031, "ibieta": 1031, "jimenez": [1031, 1032], "lacouth": 1031, "olszewski": 1031, "dye": 1031, "pierreattard": [1031, 1032], "yve": 1031, "borgn": 1031, "pranayanchuri": 1031, "princ": 1031, "canuma": 1031, "putschblo": 1031, "ranjanikrishnan": 1031, "rene": 1031, "corneil": 1031, "ricardojnf": 1031, "richardscottoz": 1031, "sandi": 1031, "khosasi": 1031, "benhur": 1031, "flore": 1031, "shinehid": 1031, "shinnar": 1031, "tootoonian": 1031, "solosil": 1031, "kolawol": 1031, "stagg": 1031, "swpeas": 1031, "tfifi": 1031, "caswel": 1031, "timotheemathieu": 1031, "wolodzko": 1031, "tliu68": 1031, "uhmann": 1031, "tom1092": 1031, "tom\u00e1": [1031, 1032], "moreyra": 1031, "tommaso": 1031, "noto": 1031, "tsuga": 1031, "vang": 1031, "gkiasta": 1031, "vil\u00e9m": 1031, "zouhar": 1031, "vlasovet": 1031, "waijean": 1031, "whidou": 1031, "xiaoyuchai": 1031, "yasmeen": 1031, "alsaedi": 1031, "yoch": 1031, "yusukenagasaka": 1031, "yzhenman": 1031, "zeyusun": 1031, "zhaoweiwang": 1031, "msvcp140": 1032, "dll": 1032, "24631": 1032, "24446": 1032, "10805": 1032, "mathia": 1032, "23471": 1032, "24015": 1032, "23990": 1032, "23833": 1032, "24017": 1032, "sorski": [1032, 1033], "23395": 1032, "23636": 1032, "22063": 1032, "22059": 1032, "kurz": [1032, 1033], "23608": 1032, "23548": 1032, "24087": 1032, "23273": 1032, "23194": 1032, "23198": 1032, "lise": 1032, "kleiber": 1032, "23358": 1032, "23264": 1032, "feature_names_in": 1032, "23299": 1032, "23214": 1032, "collot": [1032, 1033], "baak": 1032, "23370": 1032, "23410": 1032, "compute_sample_weight": 1032, "23115": 1032, "22868": 1032, "multiindex": 1032, "22410": 1032, "23271": 1032, "21987": 1032, "22064": 1032, "22065": 1032, "22288": 1032, "22320": 1032, "21219": 1032, "21542": 1032, "23098": 1032, "22318": 1032, "23036": 1032, "binary_crossentropi": 1032, "23040": 1032, "23046": 1032, "22856": 1032, "21032": 1032, "18170": 1032, "21038": 1032, "14975": 1032, "22526": 1032, "23095": 1032, "silk": 1032, "20031": 1032, "krawczyk": 1032, "21148": 1032, "22255": 1032, "21881": 1032, "vassard": 1032, "22217": 1032, "21735": 1032, "22154": 1032, "22537": 1032, "iofal": 1032, "arisa": [1032, 1033], "22775": 1032, "22913": 1032, "randomgeek78": 1032, "22493": 1032, "19680": 1032, "thibaut": 1032, "22119": 1032, "22016": 1032, "22015": 1032, "19747": 1032, "attalla": 1032, "22498": 1032, "21482": 1032, "pujalt": 1032, "22412": 1032, "16605": 1032, "21901": 1032, "rileran": 1032, "23113": 1032, "ilion": 1032, "beyst": 1032, "21425": 1032, "stefanini": 1032, "16948": 1032, "patricio": 1032, "cerda": 1032, "22002": 1032, "21109": 1032, "inner_stats_": 1032, "iter_offset_": 1032, "18975": 1032, "22111": 1032, "22181": 1032, "21334": 1032, "21705": 1032, "stanlei": [1032, 1033], "21432": 1032, "22806": 1032, "jihan": 1032, "benni": 1032, "21713": 1032, "haya": 1032, "21567": 1032, "maggi": 1032, "chege": 1032, "22300": 1032, "15948": 1032, "sysuresh": 1032, "22553": 1032, "19490": 1032, "ferrin": 1032, "22120": 1032, "15984": 1032, "okon": 1032, "22696": 1032, "22486": 1032, "21800": 1032, "20567": 1032, "22159": 1032, "20811": 1032, "21814": 1032, "16748": 1032, "siqi": 1032, "22215": 1032, "23047": 1032, "22695": 1032, "22697": 1032, "21762": 1032, "22106": 1032, "gijsber": 1032, "21632": 1032, "genesi": [1032, 1034], "valencia": [1032, 1034], "22566": 1032, "22908": 1032, "23097": 1032, "23079": 1032, "20803": 1032, "23023": 1032, "21573": 1032, "21832": 1032, "20145": 1032, "22356": 1032, "18482": 1032, "gameiro": 1032, "kharsa": 1032, "22370": 1032, "17819": 1032, "22235": 1032, "21837": 1032, "wagner": 1032, "22199": 1032, "aidar": 1032, "shakerimoff": 1032, "tenavi": 1032, "nakamura": 1032, "22223": 1032, "marcom": 1032, "21617": 1032, "ritter": [1032, 1033], "21114": 1032, "21078": 1032, "21448": 1032, "16061": 1032, "19438": 1032, "18310": 1032, "elfner": 1032, "22249": 1032, "22137": 1032, "22694": 1032, "22808": 1032, "22950": 1032, "21086": 1032, "22206": 1032, "21808": 1032, "22548": 1032, "22062": 1032, "trujillo": [1032, 1033], "22148": 1032, "22240": 1032, "9087": 1032, "22525": 1032, "19689": 1032, "21606": 1032, "21341": 1032, "preservs": 1032, "21767": 1032, "21724": 1032, "yar": 1032, "khine": 1032, "phyo": 1032, "21998": 1032, "22891": 1032, "22899": 1032, "23256": 1032, "19794": 1032, "21534": 1032, "22254": 1032, "21805": 1032, "jeann": 1032, "dionisi": 1032, "22685": 1032, "n_neighbour": 1032, "18832": 1032, "23033": 1032, "21565": 1032, "17266": 1032, "22118": 1032, "ohad": 1032, "22284": 1032, "19158": 1032, "nicki": 1032, "skaft": 1032, "20753": 1032, "22108": 1032, "22635": 1032, "19085": 1032, "22866": 1032, "21576": 1032, "emil": 1032, "dugnat": 1032, "21873": 1032, "21177": 1032, "20408": 1032, "ceballo": 1032, "22058": 1032, "23034": 1032, "22203": 1032, "21026": 1032, "21880": 1032, "mrinal": 1032, "tyagi": 1032, "22982": 1032, "22508": 1032, "comb": 1032, "22604": 1032, "22212": 1032, "21430": 1032, "desislava": 1032, "vasileva": 1032, "22687": 1032, "22150": 1032, "22248": 1032, "20860": 1032, "shubhraneel": 1032, "21888": 1032, "21954": 1032, "22953": 1032, "16018": 1032, "21445": 1032, "21988": 1032, "get_output_feature_nam": 1032, "21569": 1032, "21079": 1032, "20653": 1032, "21434": 1032, "19916": 1032, "22735": 1032, "compute_inverse_transform": 1032, "21701": 1032, "22114": 1032, "21330": 1032, "21408": 1032, "22149": 1032, "21436": 1032, "22191": 1032, "22476": 1032, "21278": 1032, "21316": 1032, "clickabl": 1032, "21298": 1032, "22237": 1032, "check_scalar": 1032, "22218": 1032, "validationerror": 1032, "check_requires_y_non": 1032, "22578": 1032, "arcidiacono": [1032, 1033], "22595": 1032, "21310": 1032, "22027": 1032, "lanterni": 1032, "23077": 1032, "22188": 1032, "22830": 1032, "2357juan": [1032, 1033], "adamgonzo": 1032, "adijohar": 1032, "kumawat": 1032, "raghuwanshi": 1032, "duron": 1032, "ahmadjubair33": 1032, "aj": 1032, "druck": 1032, "peixinho": 1032, "arroyo": 1032, "alexanmv": 1032, "almeidayoel": 1032, "amar": [1032, 1033, 1034], "amrcod": 1032, "griva": [1032, 1033], "andrii": 1032, "herrou": 1032, "ducout": 1032, "arth": 1032, "arthurmello": 1032, "arturoamor": 1032, "atharva": 1032, "patil": 1032, "aufarkari": 1032, "avm19": [1032, 1033], "ayan": 1032, "bardiya": [1032, 1033], "behrouz": 1032, "ben3940": 1032, "bijil": 1032, "subhash": 1032, "bmreinig": 1032, "brenden": 1032, "kadota": 1032, "cdrig": 1032, "chalmer": 1032, "chitteti": 1032, "srinath": [1032, 1033], "chloe": 1032, "agath": 1032, "azencott": 1032, "christopherlim98": 1032, "weidemann": 1032, "combsccod": 1032, "daniela": [1032, 1033], "darren": [1032, 1033], "eargl": 1032, "gilbertson": [1032, 1033], "dea": [1032, 1033, 1034], "mar\u00eda": [1032, 1033, 1034], "denni": 1032, "osei": 1032, "dessyvv": 1032, "dev514": 1032, "diwakar": 1032, "ries": 1032, "drskd": 1032, "emiko": 1032, "sano": 1032, "emmanouil": 1032, "gionanidi": 1032, "ermolaevpa": [1032, 1033], "estefania": 1032, "barreto": 1032, "ojeda": 1032, "eyast": 1032, "fatima": 1032, "gasmi": 1032, "luna": 1032, "glushchenkov": 1032, "fkaren27": 1032, "fpgawesom": 1032, "ftorres16": [1032, 1033], "gabor": 1032, "berei": 1032, "kertesz": 1032, "gauthier": 1032, "giancarlo": 1032, "glennfrutiz": 1032, "guillermo": 1032, "fern\u00e1ndez": 1032, "hansin": [1032, 1033], "henrymooresc": [1032, 1033], "hideaki": 1032, "imamura": 1032, "hind": 1032, "hmasdev": 1032, "hvassard": 1032, "aki": [1032, 1033], "iasoon": 1032, "ingela": 1032, "cowton": 1032, "jalexand3r": 1032, "jauhar": 1032, "jaya": 1032, "kommireddi": 1032, "je": 1032, "jelfner": 1032, "jenni": 1032, "jirka": 1032, "borovec": 1032, "cipri\u00e1n": 1032, "loayza": 1032, "chazalon": 1032, "mess": 1032, "jovan": [1032, 1033], "stojanov": [1032, 1033], "jschuerz": 1032, "katotten": 1032, "ken4git": 1032, "doucet": 1032, "kimayoung": 1032, "koushik": 1032, "kranthi": 1032, "sedamaki": 1032, "krumetoft": 1032, "lesne": 1032, "casino": [1032, 1033], "logan": [1032, 1033], "lucieclair": 1032, "luiz": 1032, "magali": 1032, "mandjev": 1032, "wurp": [1032, 1033], "boerner": 1032, "wimld": 1032, "martel": 1032, "corentin": 1032, "mat\u00eda": 1032, "matjansen": 1032, "francia": 1032, "megabyt": 1032, "mehrdad": 1032, "moradizadeh": 1032, "melemo2": 1032, "micky774": [1032, 1033], "milana2": 1032, "millawel": 1032, "miwojc": 1032, "mizuki": 1032, "mlant": 1032, "mohit": 1032, "moonkyung94": 1032, "mpoemsl": 1032, "mrinaltyagi": 1032, "leu": 1032, "msabati": 1032, "nadirhan": 1032, "\u015fahin": 1032, "naipawat": [1032, 1033], "poolsawat": [1032, 1033], "nartayxd": 1032, "nastegiano": 1032, "nathansquan": 1032, "detlefsen": 1032, "niket": 1032, "nikhil": 1032, "suresh": 1032, "kondratyev": 1032, "husak": 1032, "partev": [1032, 1033], "pelennor": 1032, "piet": [1032, 1033], "br\u00f6mmel": [1032, 1033], "pinki": 1032, "poloso": 1032, "pramod": 1032, "anantharam": 1032, "puhuk": [1032, 1033], "purna": 1032, "mansingh": 1032, "quadv": 1032, "rahil": [1032, 1033, 1034], "boy": 1032, "raz": 1032, "hoshia": 1032, "rishabh": 1032, "barnowski": [1032, 1033], "rsnegrin": 1032, "yadav": 1032, "sakinaouisrani": 1032, "sanjai": 1032, "marreddi": 1032, "seel": 1032, "sele": [1032, 1033], "seyedsaman": 1032, "emami": 1032, "shandeng123": 1032, "sharmadharmp": 1032, "shaymernaturalint": 1032, "shuangchi": [1032, 1033], "siavrez": 1032, "slishak": 1032, "spikebh": 1032, "sply88": 1032, "kailasa": [1032, 1033], "sultan": 1032, "orazbayev": 1032, "sumit": 1032, "saha": 1032, "sven": [1032, 1033], "eschlbeck": 1032, "stehl": [1032, 1033], "swapnil": 1032, "teunp": 1032, "ferr\u00e9": 1032, "hjortkj\u00e6r": 1032, "thiruvenkadam": 1032, "toastedyeast": [1032, 1033], "mctiernan": [1032, 1033], "udit": 1032, "ugo": 1032, "marchand": 1032, "vera": [1032, 1033], "komey": [1032, 1033], "victoireloui": 1032, "vishwakarma": 1032, "vikrant": 1032, "khedkar": 1032, "chernyi": 1032, "weijiadu": 1032, "yuan": [1032, 1033], "yiyangq": 1032, "yosshi999": 1032, "yuki": 1032, "koyama": 1032, "zeel": 1032, "zempleni": 1032, "zhenfish": 1032, "\u8d75\u4e30": 1032, "25747": 1033, "base_estimator__": 1033, "25477": 1033, "25563": 1033, "25570": 1033, "25664": 1033, "25774": 1033, "25500": 1033, "25589": 1033, "25704": 1033, "min_sample_split": 1033, "25744": 1033, "25619": 1033, "25638": 1033, "25354": 1033, "25174": 1033, "25089": 1033, "25129": 1033, "25363": 1033, "25188": 1033, "25295": 1033, "spec": [1033, 1034], "25312": 1033, "backslash": 1033, "25511": 1033, "25172": 1033, "25341": 1033, "25094": 1033, "25250": 1033, "25370": 1033, "23101": 1033, "24873": 1033, "25694": 1033, "25274": 1033, "25296": 1033, "25147": 1033, "23619": 1033, "24354": 1033, "safiuddin": 1033, "khaja": 1033, "gsiisg": 1033, "23935": 1033, "22527": 1033, "_sgd_fast": 1033, "_plain_sgd": 1033, "oversc": 1033, "23798": 1033, "24543": 1033, "24465": 1033, "23734": 1033, "24699": 1033, "23865": 1033, "simd": 1033, "primit": 1033, "23446": 1033, "23197": 1033, "23604": 1033, "23585": 1033, "24556": 1033, "maladi\u00e8r": [1033, 1034], "24617": 1033, "sim4n6": 1033, "24688": 1033, "22054": 1033, "roic": 1033, "24264": 1033, "maladier": 1033, "14736": 1033, "hunt": 1033, "zhan": 1033, "20802": 1033, "pokorni": 1033, "22965": 1033, "22968": 1033, "23038": 1033, "23210": 1033, "24258": 1033, "23470": 1033, "21938": 1033, "23127": 1033, "19075": 1033, "ramo": 1033, "carre\u00f1o": 1033, "24951": 1033, "22268": 1033, "mohamedbsh": 1033, "23905": 1033, "11860": 1033, "ablin": 1033, "24528": 1033, "23726": 1033, "24421": 1033, "kshitij": [1033, 1034], "22554": 1033, "24218": 1033, "molin": 1033, "21020": 1033, "24856": 1033, "22014": 1033, "23252": 1033, "24538": 1033, "24889": 1033, "24146": 1033, "peretti": 1033, "nestor": 1033, "navarro": 1033, "nati": 1033, "tomatti": 1033, "24855": 1033, "24849": 1033, "20415": 1033, "24283": 1033, "24894": 1033, "23819": [1033, 1034], "edoardo": 1033, "abati": 1033, "24747": 1033, "24245": 1033, "24405": 1033, "salman": [1033, 1034], "16695": 1033, "vitor": 1033, "rosa": 1033, "18298": 1033, "25077": 1033, "24317": 1033, "24350": 1033, "24755": 1033, "levitski": [1033, 1034], "24637": 1033, "24767": 1033, "23275": 1033, "maxwelllzh": 1033, "24433": 1033, "yogendrasingh": 1033, "23637": 1033, "23877": 1033, "10168": 1033, "\u0142ukasz": 1033, "borchmann": 1033, "12285": 1033, "miltenberg": 1033, "13042": 1033, "parizi": 1033, "18094": 1033, "22562": 1033, "24714": 1033, "23834": 1033, "24051": 1033, "22518": 1033, "18020": 1033, "24338": 1033, "23442": 1033, "atukorala": 1033, "22710": 1033, "conroi": 1033, "trinh": 1033, "23461": 1033, "24365": 1033, "24630": 1033, "rushil": 1033, "24084": 1033, "iinfo": 1033, "24141": 1033, "24539": 1033, "23977": 1033, "23683": 1033, "andrei": 1033, "melnik": 1033, "16747": 1033, "18805": 1033, "hongshaoyang": 1033, "22269": 1033, "23139": 1033, "24645": 1033, "10468": 1033, "ruben": 1033, "22993": 1033, "24750": 1033, "rudresh": 1033, "veerkhar": 1033, "23874": 1033, "24075": 1033, "22665": 1033, "24683": 1033, "24058": 1033, "perdok": 1033, "20331": 1033, "23993": 1033, "22629": 1033, "24412": 1033, "22898": 1033, "23480": 1033, "21469": 1033, "lapack_svd_driv": 1033, "20617": 1033, "25067": 1033, "14862": 1033, "24512": 1033, "24667": 1033, "25080": 1033, "24523": 1033, "mia": 1033, "bajic": 1033, "3llobo": 1033, "kania": 1033, "anulekh": 1033, "admir": 1033, "demiraj": 1033, "adoublet": 1033, "ahmedbgh": 1033, "aiko": 1033, "akshita": 1033, "prasanth": 1033, "ala": 1033, "miola": 1033, "lebel": 1033, "buzenet": [1033, 1034], "kassa": 1033, "bera": 1033, "maennel": 1033, "aniket": 1033, "shirsat": 1033, "anthony22": 1033, "apostolo": 1033, "tsetogl": 1033, "aravindh": 1033, "artur": 1033, "hermano": 1033, "ashah002": 1033, "ashwin": [1033, 1034], "azaria": 1033, "gebremichael": 1033, "b0rxington": 1033, "badr": 1033, "moufad": 1033, "bart\u0142omiej": 1033, "go\u0144da": 1033, "bdegraaff": 1033, "berkecanrizai": 1033, "bernd": 1033, "fritzk": 1033, "bhoomika": 1033, "biswaroop": 1033, "cannon": 1033, "bsh": 1033, "ceh": 1033, "chalulu": 1033, "changyao": 1033, "zablit": 1033, "veenhui": 1033, "christianwaldmann": 1033, "christin": 1033, "verrier": 1033, "dangonite57": 1033, "danielgaerb": 1033, "davidblnc": 1033, "dayn": 1033, "khant": 1033, "dhanshre": 1033, "diadochokinet": 1033, "diederikwp": 1033, "litsidi": 1033, "drewhogg": 1033, "oc": 1033, "dwight": 1033, "lindquist": 1033, "eden": 1033, "brekk": 1033, "edern": 1033, "eleanor": 1033, "eliaschiavon": 1033, "emir": 1033, "fabrizio": 1033, "damicelli": 1033, "fcharra": 1033, "siola": [1033, 1034], "tuveri": 1033, "franck": 1033, "charra": 1033, "geevarghes": 1033, "georgiamaydai": 1033, "gianr": 1033, "lazz": 1033, "guitar": 1033, "gunesbayir": 1033, "harshit5674": 1033, "hasan": 1033, "yaman": 1033, "vrigazov": 1033, "htsedebenham": 1033, "humahn": 1033, "ido": 1033, "iglesi": 1033, "iliya": 1033, "zhechev": 1033, "iren": 1033, "ivanllt": 1033, "sedykh": 1033, "mcivor": 1033, "janfidor": 1033, "jiten": 1033, "sidhpura": 1033, "jkarolczak": 1033, "jo\u00e3o": 1033, "johnathanpi": 1033, "koumenti": 1033, "panga": [1033, 1034], "johnthagen": 1033, "fleme": 1033, "choo": [1033, 1034], "yun": [1033, 1034], "keat": [1033, 1034], "juanfe88": 1033, "juliaschoepp": 1033, "jygerardi": 1033, "ka00ri": 1033, "kanishk": 1033, "sachdev": 1033, "kanissh": 1033, "kendal": 1033, "kento": 1033, "nozawa": 1033, "eliasi": 1033, "kluge": 1033, "lieret": 1033, "kirandevraj": 1033, "kraig": 1033, "vamsi": 1033, "kapadni": 1033, "lingyi1110": 1033, "mantovani": 1033, "maascha": 1033, "madinak": 1033, "maksym": 1033, "mansi": 1033, "kostelac": [1033, 1034], "marvin": [1033, 1034], "krawutschk": [1033, 1034], "masanori": 1033, "kanazu": 1033, "haberland": 1033, "mauroantonioserrano": 1033, "maxi": 1033, "marufo": 1033, "maximesaur": 1033, "smolskii": 1033, "bou": 1033, "mehgarg": 1033, "mehmetcanakbai": 1033, "baji\u0107": 1033, "flak": 1033, "hornstein": 1033, "ruiter": 1033, "paradi": 1033, "iljin": 1033, "misa": 1033, "ogura": 1033, "wilksch": 1033, "mrastgoo": 1033, "naois": 1033, "holohan": 1033, "nass": 1033, "jacobi": 1033, "nawazish": 1033, "alam": 1033, "nguy\u1ec5n": 1033, "v\u0103n": 1033, "di\u1ec5n": 1033, "fanelli": 1033, "nihal": 1033, "thukarama": 1033, "jare": 1033, "nima10khodaveisi": 1033, "nima": 1033, "sarajpoor": 1033, "nitinramvelraj": 1033, "nnlnr": 1033, "npach": 1033, "nwanna": 1033, "nymark": 1033, "kho": 1033, "holman": 1033, "oll": 1033, "lukowski": 1033, "hassoun": 1033, "tamer": 1033, "ouss1508": 1033, "oyindamola": 1033, "olatunji": 1033, "pab": 1033, "pandata": 1033, "soar": 1033, "petar": 1033, "mlinari\u0107": 1033, "pooja": 1033, "subramaniam": 1033, "priyam": 1033, "kakati": 1033, "freeland": 1033, "keerti": 1033, "rafal": 1033, "wojdyla": 1033, "raghuv": 1033, "makhija": 1033, "rehan": 1033, "guha": 1033, "klima": 1033, "crockett": 1033, "homm": 1033, "roman4oo": 1033, "rowan": 1033, "mankoo": 1033, "sabri": 1033, "monaf": 1033, "safikh": 1033, "salahuddin": 1033, "yojana": 1033, "menes": 1033, "ephrem": 1033, "sangam": 1033, "sangamswadik": 1033, "sanjai_3": 1033, "sarahremu": 1033, "sashka": 1033, "savkomax": 1033, "gustafson": 1033, "sec65": 1033, "seljak": 1033, "shadi": 1033, "gewili": 1033, "shellyfung": 1033, "shinsuk": 1033, "mori": 1033, "shiva": 1033, "shoaib": 1033, "khan": 1033, "shogo": 1033, "hida": 1033, "shrankhla": 1033, "sonniv": 1033, "sortofamudkip": 1033, "stanislav": 1033, "modrak": 1033, "stellalin7": 1033, "vaerenbergh": 1033, "schmerler": 1033, "tabea": 1033, "kossen": 1033, "thedevpanda": 1033, "syd": 1033, "sre": 1033, "weezel": [1033, 1034], "bonald": 1033, "germer": 1033, "ion": 1033, "timofei": 1033, "kornev": 1033, "pitter": 1033, "tomiock": 1033, "mathew": 1033, "tspeng": 1033, "egashira": 1033, "rey": 1033, "puerta": 1033, "vishal": 1033, "vyom": 1033, "pathak": 1033, "wattai": 1033, "wchathura": 1033, "wen": 1033, "x110": 1033, "xuniu": 1033, "yanhong": 1033, "ef": 1033, "yusuf": 1033, "raji": 1033, "adil": 1033, "khwaja": 1033, "zeeshan": 1033, "lone": 1033, "25196": 1034, "24871": 1034, "25752": 1034, "25438": 1034, "yotam": 1034, "avidar": 1034, "constantini": 1034, "26337": 1034, "25120": 1034, "25294": 1034, "25308": 1034, "25291": 1034, "25367": 1034, "25402": 1034, "25044": 1034, "smt": 1034, "26082": 1034, "24027": 1034, "25815": 1034, "24568": 1034, "26121": 1034, "25805": 1034, "26385": 1034, "26657": 1034, "binesh": 1034, "bannerje": 1034, "25251": 1034, "26503": 1034, "26286": 1034, "26323": 1034, "26033": 1034, "26108": 1034, "barth\u00e9lemi": 1034, "graphical_lasso_path": 1034, "26433": 1034, "26386": 1034, "26551": 1034, "dataaset": 1034, "consistenli": 1034, "26579": 1034, "25784": 1034, "25490": 1034, "25956": 1034, "22409": 1034, "25177": 1034, "24882": 1034, "25186": 1034, "breve": 1034, "26318": 1034, "25506": 1034, "25601": 1034, "fidor": 1034, "25931": 1034, "25629": 1034, "26242": 1034, "toplak": 1034, "sckit": 1034, "25297": 1034, "24230": 1034, "25102": 1034, "25973": 1034, "25232": 1034, "26454": 1034, "25209": 1034, "26644": 1034, "lemo": 1034, "21809": 1034, "25732": 1034, "26207": 1034, "25587": 1034, "25697": 1034, "25214": 1034, "26653": 1034, "25531": 1034, "17388": 1034, "24769": 1034, "25713": 1034, "18723": 1034, "sahil": 1034, "24677": 1034, "24668": 1034, "dberenbaum": 1034, "25987": 1034, "26019": 1034, "25432": 1034, "25672": 1034, "lene": 1034, "preuss": 1034, "25299": 1034, "omarmanzoor": 1034, "26194": 1034, "26264": 1034, "barata": 1034, "onggo": 1034, "23099": 1034, "overriden": 1034, "25659": 1034, "26333": 1034, "24140": 1034, "24076": 1034, "kulsinskidist": 1034, "25417": 1034, "24083": 1034, "25443": 1034, "feature_union": 1034, "25093": 1034, "25220": 1034, "26325": 1034, "25334": 1034, "25677": 1034, "20524": 1034, "niuk": 1034, "23731": 1034, "24145": 1034, "22506": 1034, "24935": 1034, "seladu": 1034, "25257": 1034, "26424": 1034, "25190": 1034, "correcli": 1034, "26400": 1034, "26566": 1034, "26093": 1034, "23595": 1034, "26376": 1034, "25387": 1034, "26289": 1034, "25813": 1034, "26106": 1034, "25814": 1034, "check_transformers_unfitted_stateless": 1034, "25733": 1034, "19664": 1034, "environmenterror": 1034, "ioerror": 1034, "windowserror": 1034, "26466": 1034, "26464": 1035, "outliermixin": 1035, "26506": 1035, "26634": 1035, "landeau": 1035, "vigni": 1035}, "objects": {"sklearn": [[398, 0, 0, "-", "base"], [398, 0, 0, "-", "calibration"], [398, 0, 0, "-", "cluster"], [398, 0, 0, "-", "compose"], [457, 4, 1, "", "config_context"], [398, 0, 0, "-", "covariance"], [398, 0, 0, "-", "cross_decomposition"], [398, 0, 0, "-", "datasets"], [398, 0, 0, "-", "decomposition"], [398, 0, 0, "-", "discriminant_analysis"], [398, 0, 0, "-", "dummy"], [398, 0, 0, "-", "ensemble"], [398, 0, 0, "-", "exceptions"], [398, 0, 0, "-", "experimental"], [398, 0, 0, "-", "feature_extraction"], [398, 0, 0, "-", "feature_selection"], [398, 0, 0, "-", "gaussian_process"], [615, 4, 1, "", "get_config"], [398, 0, 0, "-", "impute"], [398, 0, 0, "-", "inspection"], [398, 0, 0, "-", "isotonic"], [398, 0, 0, "-", "kernel_approximation"], [398, 0, 0, "-", "kernel_ridge"], [398, 0, 0, "-", "linear_model"], [398, 0, 0, "-", "manifold"], [398, 0, 0, "-", "metrics"], [398, 0, 0, "-", "mixture"], [398, 0, 0, "-", "model_selection"], [398, 0, 0, "-", "multiclass"], [398, 0, 0, "-", "multioutput"], [398, 0, 0, "-", "naive_bayes"], [398, 0, 0, "-", "neighbors"], [398, 0, 0, "-", "neural_network"], [398, 0, 0, "-", "pipeline"], [398, 0, 0, "-", "preprocessing"], [398, 0, 0, "-", "random_projection"], [398, 0, 0, "-", "semi_supervised"], [886, 4, 1, "", "set_config"], [887, 4, 1, "", "show_versions"], [398, 0, 0, "-", "svm"], [398, 0, 0, "-", "tree"], [398, 0, 0, "-", "utils"]], "sklearn.base": [[413, 1, 1, "", "BaseEstimator"], [414, 1, 1, "", "BiclusterMixin"], [415, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [416, 1, 1, "", "ClassifierMixin"], [417, 1, 1, "", "ClusterMixin"], [418, 1, 1, "", "DensityMixin"], [419, 1, 1, "", "MetaEstimatorMixin"], [420, 1, 1, "", "OneToOneFeatureMixin"], [421, 1, 1, "", "RegressorMixin"], [422, 1, 1, "", "TransformerMixin"], [423, 4, 1, "", "clone"], [424, 4, 1, "", "is_classifier"], [425, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[413, 2, 1, "", "get_metadata_routing"], [413, 2, 1, "", "get_params"], [413, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[414, 3, 1, "", "biclusters_"], [414, 2, 1, "", "get_indices"], [414, 2, 1, "", "get_shape"], [414, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[415, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[416, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[417, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[418, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[420, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[421, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[422, 2, 1, "", "fit_transform"], [422, 2, 1, "", "set_output"]], "sklearn.calibration": [[426, 1, 1, "", "CalibratedClassifierCV"], [427, 1, 1, "", "CalibrationDisplay"], [428, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[426, 2, 1, "", "fit"], [426, 2, 1, "", "get_metadata_routing"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "predict"], [426, 2, 1, "", "predict_proba"], [426, 2, 1, "", "score"], [426, 2, 1, "", "set_fit_request"], [426, 2, 1, "", "set_params"], [426, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[427, 2, 1, "", "from_estimator"], [427, 2, 1, "", "from_predictions"], [427, 2, 1, "", "plot"]], "sklearn.cluster": [[429, 1, 1, "", "AffinityPropagation"], [430, 1, 1, "", "AgglomerativeClustering"], [431, 1, 1, "", "Birch"], [432, 1, 1, "", "BisectingKMeans"], [433, 1, 1, "", "DBSCAN"], [434, 1, 1, "", "FeatureAgglomeration"], [435, 1, 1, "", "HDBSCAN"], [436, 1, 1, "", "KMeans"], [437, 1, 1, "", "MeanShift"], [438, 1, 1, "", "MiniBatchKMeans"], [439, 1, 1, "", "OPTICS"], [440, 1, 1, "", "SpectralBiclustering"], [441, 1, 1, "", "SpectralClustering"], [442, 1, 1, "", "SpectralCoclustering"], [443, 4, 1, "", "affinity_propagation"], [444, 4, 1, "", "cluster_optics_dbscan"], [445, 4, 1, "", "cluster_optics_xi"], [446, 4, 1, "", "compute_optics_graph"], [410, 4, 1, "", "dbscan"], [447, 4, 1, "", "estimate_bandwidth"], [448, 4, 1, "", "k_means"], [449, 4, 1, "", "kmeans_plusplus"], [450, 4, 1, "", "mean_shift"], [451, 4, 1, "", "spectral_clustering"], [452, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[429, 2, 1, "", "fit"], [429, 2, 1, "", "fit_predict"], [429, 2, 1, "", "get_metadata_routing"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "predict"], [429, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[430, 2, 1, "", "fit"], [430, 2, 1, "", "fit_predict"], [430, 2, 1, "", "get_metadata_routing"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[431, 2, 1, "", "fit"], [431, 2, 1, "", "fit_predict"], [431, 2, 1, "", "fit_transform"], [431, 2, 1, "", "get_feature_names_out"], [431, 2, 1, "", "get_metadata_routing"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "partial_fit"], [431, 2, 1, "", "predict"], [431, 2, 1, "", "set_output"], [431, 2, 1, "", "set_params"], [431, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[432, 2, 1, "", "fit"], [432, 2, 1, "", "fit_predict"], [432, 2, 1, "", "fit_transform"], [432, 2, 1, "", "get_feature_names_out"], [432, 2, 1, "", "get_metadata_routing"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "predict"], [432, 2, 1, "", "score"], [432, 2, 1, "", "set_fit_request"], [432, 2, 1, "", "set_output"], [432, 2, 1, "", "set_params"], [432, 2, 1, "", "set_predict_request"], [432, 2, 1, "", "set_score_request"], [432, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_predict"], [433, 2, 1, "", "get_metadata_routing"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "set_fit_request"], [433, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[434, 2, 1, "", "fit"], [434, 3, 1, "", "fit_predict"], [434, 2, 1, "", "fit_transform"], [434, 2, 1, "", "get_feature_names_out"], [434, 2, 1, "", "get_metadata_routing"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "inverse_transform"], [434, 2, 1, "", "set_output"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[435, 2, 1, "", "dbscan_clustering"], [435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_predict"], [435, 2, 1, "", "get_metadata_routing"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[436, 2, 1, "", "fit"], [436, 2, 1, "", "fit_predict"], [436, 2, 1, "", "fit_transform"], [436, 2, 1, "", "get_feature_names_out"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "predict"], [436, 2, 1, "", "score"], [436, 2, 1, "", "set_fit_request"], [436, 2, 1, "", "set_output"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "set_predict_request"], [436, 2, 1, "", "set_score_request"], [436, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "fit_predict"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "predict"], [437, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "fit_transform"], [438, 2, 1, "", "get_feature_names_out"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "partial_fit"], [438, 2, 1, "", "predict"], [438, 2, 1, "", "score"], [438, 2, 1, "", "set_fit_request"], [438, 2, 1, "", "set_output"], [438, 2, 1, "", "set_params"], [438, 2, 1, "", "set_partial_fit_request"], [438, 2, 1, "", "set_predict_request"], [438, 2, 1, "", "set_score_request"], [438, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[440, 3, 1, "", "biclusters_"], [440, 2, 1, "", "fit"], [440, 2, 1, "", "get_indices"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "get_shape"], [440, 2, 1, "", "get_submatrix"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[442, 3, 1, "", "biclusters_"], [442, 2, 1, "", "fit"], [442, 2, 1, "", "get_indices"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "get_shape"], [442, 2, 1, "", "get_submatrix"], [442, 2, 1, "", "set_params"]], "sklearn.compose": [[453, 1, 1, "", "ColumnTransformer"], [454, 1, 1, "", "TransformedTargetRegressor"], [455, 4, 1, "", "make_column_selector"], [456, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_transform"], [453, 2, 1, "", "get_feature_names_out"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 3, 1, "", "named_transformers_"], [453, 2, 1, "", "set_output"], [453, 2, 1, "", "set_params"], [453, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[454, 2, 1, "", "fit"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 3, 1, "", "n_features_in_"], [454, 2, 1, "", "predict"], [454, 2, 1, "", "score"], [454, 2, 1, "", "set_params"], [454, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[458, 1, 1, "", "EllipticEnvelope"], [459, 1, 1, "", "EmpiricalCovariance"], [460, 1, 1, "", "GraphicalLasso"], [461, 1, 1, "", "GraphicalLassoCV"], [462, 1, 1, "", "LedoitWolf"], [463, 1, 1, "", "MinCovDet"], [464, 1, 1, "", "OAS"], [465, 1, 1, "", "ShrunkCovariance"], [466, 4, 1, "", "empirical_covariance"], [467, 4, 1, "", "graphical_lasso"], [468, 4, 1, "", "ledoit_wolf"], [469, 4, 1, "", "ledoit_wolf_shrinkage"], [412, 4, 1, "", "oas"], [470, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[458, 2, 1, "", "correct_covariance"], [458, 2, 1, "", "decision_function"], [458, 2, 1, "", "error_norm"], [458, 2, 1, "", "fit"], [458, 2, 1, "", "fit_predict"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "get_precision"], [458, 2, 1, "", "mahalanobis"], [458, 2, 1, "", "predict"], [458, 2, 1, "", "reweight_covariance"], [458, 2, 1, "", "score"], [458, 2, 1, "", "score_samples"], [458, 2, 1, "", "set_params"], [458, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[459, 2, 1, "", "error_norm"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "get_metadata_routing"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "get_precision"], [459, 2, 1, "", "mahalanobis"], [459, 2, 1, "", "score"], [459, 2, 1, "", "set_params"], [459, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[460, 2, 1, "", "error_norm"], [460, 2, 1, "", "fit"], [460, 2, 1, "", "get_metadata_routing"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "get_precision"], [460, 2, 1, "", "mahalanobis"], [460, 2, 1, "", "score"], [460, 2, 1, "", "set_params"], [460, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[461, 2, 1, "", "error_norm"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "get_metadata_routing"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "get_precision"], [461, 2, 1, "", "mahalanobis"], [461, 2, 1, "", "score"], [461, 2, 1, "", "set_params"], [461, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[462, 2, 1, "", "error_norm"], [462, 2, 1, "", "fit"], [462, 2, 1, "", "get_metadata_routing"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "get_precision"], [462, 2, 1, "", "mahalanobis"], [462, 2, 1, "", "score"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[463, 2, 1, "", "correct_covariance"], [463, 2, 1, "", "error_norm"], [463, 2, 1, "", "fit"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 2, 1, "", "get_precision"], [463, 2, 1, "", "mahalanobis"], [463, 2, 1, "", "reweight_covariance"], [463, 2, 1, "", "score"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[464, 2, 1, "", "error_norm"], [464, 2, 1, "", "fit"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 2, 1, "", "get_precision"], [464, 2, 1, "", "mahalanobis"], [464, 2, 1, "", "score"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[465, 2, 1, "", "error_norm"], [465, 2, 1, "", "fit"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "get_precision"], [465, 2, 1, "", "mahalanobis"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[471, 1, 1, "", "CCA"], [472, 1, 1, "", "PLSCanonical"], [473, 1, 1, "", "PLSRegression"], [474, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[471, 2, 1, "", "fit"], [471, 2, 1, "", "fit_transform"], [471, 2, 1, "", "get_feature_names_out"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "inverse_transform"], [471, 2, 1, "", "predict"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_output"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_predict_request"], [471, 2, 1, "", "set_score_request"], [471, 2, 1, "", "set_transform_request"], [471, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[472, 2, 1, "", "fit"], [472, 2, 1, "", "fit_transform"], [472, 2, 1, "", "get_feature_names_out"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "inverse_transform"], [472, 2, 1, "", "predict"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_output"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_predict_request"], [472, 2, 1, "", "set_score_request"], [472, 2, 1, "", "set_transform_request"], [472, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[473, 2, 1, "", "fit"], [473, 2, 1, "", "fit_transform"], [473, 2, 1, "", "get_feature_names_out"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "inverse_transform"], [473, 2, 1, "", "predict"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_output"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_predict_request"], [473, 2, 1, "", "set_score_request"], [473, 2, 1, "", "set_transform_request"], [473, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[474, 2, 1, "", "fit"], [474, 2, 1, "", "fit_transform"], [474, 2, 1, "", "get_feature_names_out"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "set_output"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "transform"]], "sklearn.datasets": [[475, 4, 1, "", "clear_data_home"], [476, 4, 1, "", "dump_svmlight_file"], [477, 4, 1, "", "fetch_20newsgroups"], [478, 4, 1, "", "fetch_20newsgroups_vectorized"], [479, 4, 1, "", "fetch_california_housing"], [480, 4, 1, "", "fetch_covtype"], [481, 4, 1, "", "fetch_kddcup99"], [482, 4, 1, "", "fetch_lfw_pairs"], [483, 4, 1, "", "fetch_lfw_people"], [484, 4, 1, "", "fetch_olivetti_faces"], [485, 4, 1, "", "fetch_openml"], [486, 4, 1, "", "fetch_rcv1"], [487, 4, 1, "", "fetch_species_distributions"], [488, 4, 1, "", "get_data_home"], [489, 4, 1, "", "load_breast_cancer"], [490, 4, 1, "", "load_diabetes"], [491, 4, 1, "", "load_digits"], [492, 4, 1, "", "load_files"], [493, 4, 1, "", "load_iris"], [494, 4, 1, "", "load_linnerud"], [495, 4, 1, "", "load_sample_image"], [496, 4, 1, "", "load_sample_images"], [497, 4, 1, "", "load_svmlight_file"], [498, 4, 1, "", "load_svmlight_files"], [499, 4, 1, "", "load_wine"], [500, 4, 1, "", "make_biclusters"], [501, 4, 1, "", "make_blobs"], [502, 4, 1, "", "make_checkerboard"], [503, 4, 1, "", "make_circles"], [504, 4, 1, "", "make_classification"], [505, 4, 1, "", "make_friedman1"], [506, 4, 1, "", "make_friedman2"], [507, 4, 1, "", "make_friedman3"], [508, 4, 1, "", "make_gaussian_quantiles"], [509, 4, 1, "", "make_hastie_10_2"], [510, 4, 1, "", "make_low_rank_matrix"], [511, 4, 1, "", "make_moons"], [512, 4, 1, "", "make_multilabel_classification"], [513, 4, 1, "", "make_regression"], [514, 4, 1, "", "make_s_curve"], [515, 4, 1, "", "make_sparse_coded_signal"], [516, 4, 1, "", "make_sparse_spd_matrix"], [517, 4, 1, "", "make_sparse_uncorrelated"], [518, 4, 1, "", "make_spd_matrix"], [519, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[520, 1, 1, "", "DictionaryLearning"], [521, 1, 1, "", "FactorAnalysis"], [522, 1, 1, "", "FastICA"], [523, 1, 1, "", "IncrementalPCA"], [524, 1, 1, "", "KernelPCA"], [525, 1, 1, "", "LatentDirichletAllocation"], [526, 1, 1, "", "MiniBatchDictionaryLearning"], [527, 1, 1, "", "MiniBatchNMF"], [528, 1, 1, "", "MiniBatchSparsePCA"], [529, 1, 1, "", "NMF"], [530, 1, 1, "", "PCA"], [531, 1, 1, "", "SparseCoder"], [532, 1, 1, "", "SparsePCA"], [533, 1, 1, "", "TruncatedSVD"], [534, 4, 1, "", "dict_learning"], [535, 4, 1, "", "dict_learning_online"], [411, 4, 1, "", "fastica"], [536, 4, 1, "", "non_negative_factorization"], [537, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_metadata_routing"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_covariance"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_metadata_routing"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "get_precision"], [521, 2, 1, "", "score"], [521, 2, 1, "", "score_samples"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[522, 2, 1, "", "fit"], [522, 2, 1, "", "fit_transform"], [522, 2, 1, "", "get_feature_names_out"], [522, 2, 1, "", "get_metadata_routing"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "inverse_transform"], [522, 2, 1, "", "set_inverse_transform_request"], [522, 2, 1, "", "set_output"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "set_transform_request"], [522, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[523, 2, 1, "", "fit"], [523, 2, 1, "", "fit_transform"], [523, 2, 1, "", "get_covariance"], [523, 2, 1, "", "get_feature_names_out"], [523, 2, 1, "", "get_metadata_routing"], [523, 2, 1, "", "get_params"], [523, 2, 1, "", "get_precision"], [523, 2, 1, "", "inverse_transform"], [523, 2, 1, "", "partial_fit"], [523, 2, 1, "", "set_output"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "set_partial_fit_request"], [523, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_metadata_routing"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "inverse_transform"], [524, 2, 1, "", "set_output"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[525, 2, 1, "", "fit"], [525, 2, 1, "", "fit_transform"], [525, 2, 1, "", "get_feature_names_out"], [525, 2, 1, "", "get_metadata_routing"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "partial_fit"], [525, 2, 1, "", "perplexity"], [525, 2, 1, "", "score"], [525, 2, 1, "", "set_output"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "fit_transform"], [526, 2, 1, "", "get_feature_names_out"], [526, 2, 1, "", "get_metadata_routing"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "partial_fit"], [526, 2, 1, "", "set_output"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_metadata_routing"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "inverse_transform"], [527, 2, 1, "", "partial_fit"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "set_partial_fit_request"], [527, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_transform"], [528, 2, 1, "", "get_feature_names_out"], [528, 2, 1, "", "get_metadata_routing"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "inverse_transform"], [528, 2, 1, "", "set_output"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "inverse_transform"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_covariance"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "get_precision"], [530, 2, 1, "", "inverse_transform"], [530, 2, 1, "", "score"], [530, 2, 1, "", "score_samples"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 3, 1, "", "n_components_"], [531, 3, 1, "", "n_features_in_"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[538, 1, 1, "", "LinearDiscriminantAnalysis"], [539, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[538, 2, 1, "", "decision_function"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "predict_log_proba"], [538, 2, 1, "", "predict_proba"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "set_score_request"], [538, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[539, 2, 1, "", "decision_function"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "predict_log_proba"], [539, 2, 1, "", "predict_proba"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[540, 1, 1, "", "DummyClassifier"], [541, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "predict_log_proba"], [540, 2, 1, "", "predict_proba"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_fit_request"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_fit_request"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "set_predict_request"], [541, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[542, 1, 1, "", "AdaBoostClassifier"], [543, 1, 1, "", "AdaBoostRegressor"], [544, 1, 1, "", "BaggingClassifier"], [545, 1, 1, "", "BaggingRegressor"], [546, 1, 1, "", "ExtraTreesClassifier"], [547, 1, 1, "", "ExtraTreesRegressor"], [548, 1, 1, "", "GradientBoostingClassifier"], [549, 1, 1, "", "GradientBoostingRegressor"], [550, 1, 1, "", "HistGradientBoostingClassifier"], [551, 1, 1, "", "HistGradientBoostingRegressor"], [552, 1, 1, "", "IsolationForest"], [553, 1, 1, "", "RandomForestClassifier"], [554, 1, 1, "", "RandomForestRegressor"], [555, 1, 1, "", "RandomTreesEmbedding"], [556, 1, 1, "", "StackingClassifier"], [557, 1, 1, "", "StackingRegressor"], [558, 1, 1, "", "VotingClassifier"], [559, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[542, 3, 1, "", "base_estimator_"], [542, 2, 1, "", "decision_function"], [542, 3, 1, "", "feature_importances_"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "predict_log_proba"], [542, 2, 1, "", "predict_proba"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_fit_request"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "set_score_request"], [542, 2, 1, "", "staged_decision_function"], [542, 2, 1, "", "staged_predict"], [542, 2, 1, "", "staged_predict_proba"], [542, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[543, 3, 1, "", "base_estimator_"], [543, 3, 1, "", "feature_importances_"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_fit_request"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "set_score_request"], [543, 2, 1, "", "staged_predict"], [543, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[544, 3, 1, "", "base_estimator_"], [544, 2, 1, "", "decision_function"], [544, 3, 1, "", "estimators_samples_"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_log_proba"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_fit_request"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[545, 3, 1, "", "base_estimator_"], [545, 3, 1, "", "estimators_samples_"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_fit_request"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[546, 2, 1, "", "apply"], [546, 3, 1, "", "base_estimator_"], [546, 2, 1, "", "decision_path"], [546, 3, 1, "", "feature_importances_"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "predict_log_proba"], [546, 2, 1, "", "predict_proba"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_fit_request"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[547, 2, 1, "", "apply"], [547, 3, 1, "", "base_estimator_"], [547, 2, 1, "", "decision_path"], [547, 3, 1, "", "feature_importances_"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_fit_request"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[548, 2, 1, "", "apply"], [548, 3, 1, "", "base_estimator_"], [548, 2, 1, "", "decision_function"], [548, 3, 1, "", "feature_importances_"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_log_proba"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_fit_request"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"], [548, 2, 1, "", "staged_decision_function"], [548, 2, 1, "", "staged_predict"], [548, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[549, 2, 1, "", "apply"], [549, 3, 1, "", "base_estimator_"], [549, 3, 1, "", "feature_importances_"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"], [549, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[550, 2, 1, "", "decision_function"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 3, 1, "", "n_iter_"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"], [550, 2, 1, "", "staged_decision_function"], [550, 2, 1, "", "staged_predict"], [550, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 3, 1, "", "n_iter_"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"], [551, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[552, 3, 1, "", "base_estimator_"], [552, 2, 1, "", "decision_function"], [552, 3, 1, "", "estimators_samples_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_predict"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score_samples"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[553, 2, 1, "", "apply"], [553, 3, 1, "", "base_estimator_"], [553, 2, 1, "", "decision_path"], [553, 3, 1, "", "feature_importances_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[554, 2, 1, "", "apply"], [554, 3, 1, "", "base_estimator_"], [554, 2, 1, "", "decision_path"], [554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[555, 2, 1, "", "apply"], [555, 3, 1, "", "base_estimator_"], [555, 2, 1, "", "decision_path"], [555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "fit_transform"], [555, 2, 1, "", "get_feature_names_out"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_output"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[556, 2, 1, "", "decision_function"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "fit_transform"], [556, 2, 1, "", "get_feature_names_out"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 3, 1, "", "n_features_in_"], [556, 3, 1, "", "named_estimators"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_output"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"], [556, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[557, 2, 1, "", "fit"], [557, 2, 1, "", "fit_transform"], [557, 2, 1, "", "get_feature_names_out"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 3, 1, "", "n_features_in_"], [557, 3, 1, "", "named_estimators"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_output"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[558, 2, 1, "", "fit"], [558, 2, 1, "", "fit_transform"], [558, 2, 1, "", "get_feature_names_out"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 3, 1, "", "n_features_in_"], [558, 3, 1, "", "named_estimators"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_output"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[559, 2, 1, "", "fit"], [559, 2, 1, "", "fit_transform"], [559, 2, 1, "", "get_feature_names_out"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 3, 1, "", "n_features_in_"], [559, 3, 1, "", "named_estimators"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_output"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "transform"]], "sklearn.exceptions": [[560, 1, 1, "", "ConvergenceWarning"], [561, 1, 1, "", "DataConversionWarning"], [562, 1, 1, "", "DataDimensionalityWarning"], [563, 1, 1, "", "EfficiencyWarning"], [564, 1, 1, "", "FitFailedWarning"], [565, 1, 1, "", "InconsistentVersionWarning"], [566, 1, 1, "", "NotFittedError"], [567, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[560, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[561, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[562, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[563, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[564, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[565, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[566, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[567, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[568, 0, 0, "-", "enable_halving_search_cv"], [569, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[570, 1, 1, "", "DictVectorizer"], [571, 1, 1, "", "FeatureHasher"], [398, 0, 0, "-", "image"], [398, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "inverse_transform"], [570, 2, 1, "", "restrict"], [570, 2, 1, "", "set_inverse_transform_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_transform_request"], [571, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[572, 1, 1, "", "PatchExtractor"], [573, 4, 1, "", "extract_patches_2d"], [574, 4, 1, "", "grid_to_graph"], [575, 4, 1, "", "img_to_graph"], [576, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[577, 1, 1, "", "CountVectorizer"], [578, 1, 1, "", "HashingVectorizer"], [579, 1, 1, "", "TfidfTransformer"], [580, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[577, 2, 1, "", "build_analyzer"], [577, 2, 1, "", "build_preprocessor"], [577, 2, 1, "", "build_tokenizer"], [577, 2, 1, "", "decode"], [577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_metadata_routing"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_stop_words"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "set_fit_request"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "set_transform_request"], [577, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[578, 2, 1, "", "build_analyzer"], [578, 2, 1, "", "build_preprocessor"], [578, 2, 1, "", "build_tokenizer"], [578, 2, 1, "", "decode"], [578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_metadata_routing"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "get_stop_words"], [578, 2, 1, "", "partial_fit"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_metadata_routing"], [579, 2, 1, "", "get_params"], [579, 3, 1, "", "idf_"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "set_transform_request"], [579, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[580, 2, 1, "", "build_analyzer"], [580, 2, 1, "", "build_preprocessor"], [580, 2, 1, "", "build_tokenizer"], [580, 2, 1, "", "decode"], [580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_metadata_routing"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_stop_words"], [580, 3, 1, "", "idf_"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "set_fit_request"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "set_transform_request"], [580, 2, 1, "", "transform"]], "sklearn.feature_selection": [[581, 1, 1, "", "GenericUnivariateSelect"], [582, 1, 1, "", "RFE"], [583, 1, 1, "", "RFECV"], [584, 1, 1, "", "SelectFdr"], [585, 1, 1, "", "SelectFpr"], [586, 1, 1, "", "SelectFromModel"], [587, 1, 1, "", "SelectFwe"], [588, 1, 1, "", "SelectKBest"], [589, 1, 1, "", "SelectPercentile"], [590, 1, 1, "", "SelectorMixin"], [591, 1, 1, "", "SequentialFeatureSelector"], [592, 1, 1, "", "VarianceThreshold"], [593, 4, 1, "", "chi2"], [594, 4, 1, "", "f_classif"], [595, 4, 1, "", "f_regression"], [596, 4, 1, "", "mutual_info_classif"], [597, 4, 1, "", "mutual_info_regression"], [598, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "get_support"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[582, 3, 1, "", "classes_"], [582, 2, 1, "", "decision_function"], [582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "get_support"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "predict"], [582, 2, 1, "", "predict_log_proba"], [582, 2, 1, "", "predict_proba"], [582, 2, 1, "", "score"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[583, 3, 1, "", "classes_"], [583, 2, 1, "", "decision_function"], [583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "get_support"], [583, 2, 1, "", "inverse_transform"], [583, 2, 1, "", "predict"], [583, 2, 1, "", "predict_log_proba"], [583, 2, 1, "", "predict_proba"], [583, 2, 1, "", "score"], [583, 2, 1, "", "set_fit_request"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "get_support"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_support"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_support"], [586, 2, 1, "", "inverse_transform"], [586, 3, 1, "", "n_features_in_"], [586, 2, 1, "", "partial_fit"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 3, 1, "", "threshold_"], [586, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_support"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_support"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_support"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_support"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[599, 1, 1, "", "GaussianProcessClassifier"], [600, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "kernel_"], [599, 2, 1, "", "log_marginal_likelihood"], [599, 2, 1, "", "predict"], [599, 2, 1, "", "predict_proba"], [599, 2, 1, "", "score"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "log_marginal_likelihood"], [600, 2, 1, "", "predict"], [600, 2, 1, "", "sample_y"], [600, 2, 1, "", "score"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "set_predict_request"], [600, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[601, 1, 1, "", "CompoundKernel"], [602, 1, 1, "", "ConstantKernel"], [603, 1, 1, "", "DotProduct"], [604, 1, 1, "", "ExpSineSquared"], [605, 1, 1, "", "Exponentiation"], [606, 1, 1, "", "Hyperparameter"], [607, 1, 1, "", "Kernel"], [608, 1, 1, "", "Matern"], [609, 1, 1, "", "PairwiseKernel"], [610, 1, 1, "", "Product"], [611, 1, 1, "", "RBF"], [612, 1, 1, "", "RationalQuadratic"], [613, 1, 1, "", "Sum"], [614, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[601, 2, 1, "", "__call__"], [601, 3, 1, "", "bounds"], [601, 2, 1, "", "clone_with_theta"], [601, 2, 1, "", "diag"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "hyperparameters"], [601, 2, 1, "", "is_stationary"], [601, 3, 1, "", "n_dims"], [601, 3, 1, "", "requires_vector_input"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[602, 2, 1, "", "__call__"], [602, 3, 1, "", "bounds"], [602, 2, 1, "", "clone_with_theta"], [602, 2, 1, "", "diag"], [602, 2, 1, "", "get_params"], [602, 3, 1, "", "hyperparameters"], [602, 2, 1, "", "is_stationary"], [602, 3, 1, "", "n_dims"], [602, 3, 1, "", "requires_vector_input"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[603, 2, 1, "", "__call__"], [603, 3, 1, "", "bounds"], [603, 2, 1, "", "clone_with_theta"], [603, 2, 1, "", "diag"], [603, 2, 1, "", "get_params"], [603, 3, 1, "", "hyperparameters"], [603, 2, 1, "", "is_stationary"], [603, 3, 1, "", "n_dims"], [603, 3, 1, "", "requires_vector_input"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[604, 2, 1, "", "__call__"], [604, 3, 1, "", "bounds"], [604, 2, 1, "", "clone_with_theta"], [604, 2, 1, "", "diag"], [604, 2, 1, "", "get_params"], [604, 3, 1, "", "hyperparameter_length_scale"], [604, 3, 1, "", "hyperparameters"], [604, 2, 1, "", "is_stationary"], [604, 3, 1, "", "n_dims"], [604, 3, 1, "", "requires_vector_input"], [604, 2, 1, "", "set_params"], [604, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[605, 2, 1, "", "__call__"], [605, 3, 1, "", "bounds"], [605, 2, 1, "", "clone_with_theta"], [605, 2, 1, "", "diag"], [605, 2, 1, "", "get_params"], [605, 3, 1, "", "hyperparameters"], [605, 2, 1, "", "is_stationary"], [605, 3, 1, "", "n_dims"], [605, 3, 1, "", "requires_vector_input"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[606, 2, 1, "", "__call__"], [606, 5, 1, "", "bounds"], [606, 2, 1, "", "count"], [606, 5, 1, "", "fixed"], [606, 2, 1, "", "index"], [606, 5, 1, "", "n_elements"], [606, 5, 1, "", "name"], [606, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[607, 2, 1, "", "__call__"], [607, 3, 1, "", "bounds"], [607, 2, 1, "", "clone_with_theta"], [607, 2, 1, "", "diag"], [607, 2, 1, "", "get_params"], [607, 3, 1, "", "hyperparameters"], [607, 2, 1, "", "is_stationary"], [607, 3, 1, "", "n_dims"], [607, 3, 1, "", "requires_vector_input"], [607, 2, 1, "", "set_params"], [607, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[608, 2, 1, "", "__call__"], [608, 3, 1, "", "bounds"], [608, 2, 1, "", "clone_with_theta"], [608, 2, 1, "", "diag"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "hyperparameters"], [608, 2, 1, "", "is_stationary"], [608, 3, 1, "", "n_dims"], [608, 3, 1, "", "requires_vector_input"], [608, 2, 1, "", "set_params"], [608, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[609, 2, 1, "", "__call__"], [609, 3, 1, "", "bounds"], [609, 2, 1, "", "clone_with_theta"], [609, 2, 1, "", "diag"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "hyperparameters"], [609, 2, 1, "", "is_stationary"], [609, 3, 1, "", "n_dims"], [609, 3, 1, "", "requires_vector_input"], [609, 2, 1, "", "set_params"], [609, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.impute": [[616, 1, 1, "", "IterativeImputer"], [617, 1, 1, "", "KNNImputer"], [618, 1, 1, "", "MissingIndicator"], [619, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "fit_transform"], [616, 2, 1, "", "get_feature_names_out"], [616, 2, 1, "", "get_metadata_routing"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "set_output"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[617, 2, 1, "", "fit"], [617, 2, 1, "", "fit_transform"], [617, 2, 1, "", "get_feature_names_out"], [617, 2, 1, "", "get_metadata_routing"], [617, 2, 1, "", "get_params"], [617, 2, 1, "", "set_output"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "fit_transform"], [618, 2, 1, "", "get_feature_names_out"], [618, 2, 1, "", "get_metadata_routing"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "set_output"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "fit_transform"], [619, 2, 1, "", "get_feature_names_out"], [619, 2, 1, "", "get_metadata_routing"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "inverse_transform"], [619, 2, 1, "", "set_output"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "transform"]], "sklearn.inspection": [[620, 1, 1, "", "DecisionBoundaryDisplay"], [621, 1, 1, "", "PartialDependenceDisplay"], [622, 4, 1, "", "partial_dependence"], [623, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[620, 2, 1, "", "from_estimator"], [620, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[621, 2, 1, "", "from_estimator"], [621, 2, 1, "", "plot"]], "sklearn.isotonic": [[624, 1, 1, "", "IsotonicRegression"], [625, 4, 1, "", "check_increasing"], [626, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "fit_transform"], [624, 2, 1, "", "get_feature_names_out"], [624, 2, 1, "", "get_metadata_routing"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_fit_request"], [624, 2, 1, "", "set_output"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "set_predict_request"], [624, 2, 1, "", "set_score_request"], [624, 2, 1, "", "set_transform_request"], [624, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[627, 1, 1, "", "AdditiveChi2Sampler"], [628, 1, 1, "", "Nystroem"], [629, 1, 1, "", "PolynomialCountSketch"], [630, 1, 1, "", "RBFSampler"], [631, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[632, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_fit_request"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[633, 1, 1, "", "ARDRegression"], [634, 1, 1, "", "BayesianRidge"], [635, 1, 1, "", "ElasticNet"], [636, 1, 1, "", "ElasticNetCV"], [637, 1, 1, "", "GammaRegressor"], [638, 1, 1, "", "HuberRegressor"], [639, 1, 1, "", "Lars"], [640, 1, 1, "", "LarsCV"], [641, 1, 1, "", "Lasso"], [642, 1, 1, "", "LassoCV"], [643, 1, 1, "", "LassoLars"], [644, 1, 1, "", "LassoLarsCV"], [645, 1, 1, "", "LassoLarsIC"], [646, 1, 1, "", "LinearRegression"], [647, 1, 1, "", "LogisticRegression"], [648, 1, 1, "", "LogisticRegressionCV"], [649, 1, 1, "", "MultiTaskElasticNet"], [650, 1, 1, "", "MultiTaskElasticNetCV"], [651, 1, 1, "", "MultiTaskLasso"], [652, 1, 1, "", "MultiTaskLassoCV"], [653, 1, 1, "", "OrthogonalMatchingPursuit"], [654, 1, 1, "", "OrthogonalMatchingPursuitCV"], [655, 1, 1, "", "PassiveAggressiveClassifier"], [656, 4, 1, "", "PassiveAggressiveRegressor"], [657, 1, 1, "", "Perceptron"], [658, 1, 1, "", "PoissonRegressor"], [659, 1, 1, "", "QuantileRegressor"], [660, 1, 1, "", "RANSACRegressor"], [661, 1, 1, "", "Ridge"], [662, 1, 1, "", "RidgeCV"], [663, 1, 1, "", "RidgeClassifier"], [664, 1, 1, "", "RidgeClassifierCV"], [665, 1, 1, "", "SGDClassifier"], [666, 1, 1, "", "SGDOneClassSVM"], [667, 1, 1, "", "SGDRegressor"], [668, 1, 1, "", "TheilSenRegressor"], [669, 1, 1, "", "TweedieRegressor"], [670, 4, 1, "", "enet_path"], [671, 4, 1, "", "lars_path"], [672, 4, 1, "", "lars_path_gram"], [673, 4, 1, "", "lasso_path"], [674, 4, 1, "", "orthogonal_mp"], [675, 4, 1, "", "orthogonal_mp_gram"], [676, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "set_predict_request"], [633, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_fit_request"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "set_predict_request"], [634, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "path"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_fit_request"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "set_score_request"], [635, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "path"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_fit_request"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_fit_request"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_fit_request"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "path"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_score_request"], [641, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "path"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[647, 2, 1, "", "decision_function"], [647, 2, 1, "", "densify"], [647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "predict_log_proba"], [647, 2, 1, "", "predict_proba"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"], [647, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[648, 2, 1, "", "decision_function"], [648, 2, 1, "", "densify"], [648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "predict_log_proba"], [648, 2, 1, "", "predict_proba"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"], [648, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "path"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"], [649, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "path"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"], [651, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[655, 2, 1, "", "decision_function"], [655, 2, 1, "", "densify"], [655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "partial_fit"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_partial_fit_request"], [655, 2, 1, "", "set_score_request"], [655, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[657, 2, 1, "", "decision_function"], [657, 2, 1, "", "densify"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "partial_fit"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_partial_fit_request"], [657, 2, 1, "", "set_score_request"], [657, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[663, 3, 1, "", "classes_"], [663, 2, 1, "", "decision_function"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[664, 3, 1, "", "classes_"], [664, 2, 1, "", "decision_function"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[665, 2, 1, "", "decision_function"], [665, 2, 1, "", "densify"], [665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "partial_fit"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "predict_log_proba"], [665, 2, 1, "", "predict_proba"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_partial_fit_request"], [665, 2, 1, "", "set_score_request"], [665, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "fit_predict"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "partial_fit"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score_samples"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_partial_fit_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[677, 1, 1, "", "Isomap"], [678, 1, 1, "", "LocallyLinearEmbedding"], [679, 1, 1, "", "MDS"], [680, 1, 1, "", "SpectralEmbedding"], [681, 1, 1, "", "TSNE"], [682, 4, 1, "", "locally_linear_embedding"], [683, 4, 1, "", "smacof"], [684, 4, 1, "", "spectral_embedding"], [685, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "fit_transform"], [677, 2, 1, "", "get_feature_names_out"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "reconstruction_error"], [677, 2, 1, "", "set_output"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "fit_transform"], [678, 2, 1, "", "get_feature_names_out"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "set_output"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "fit_transform"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "fit_transform"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[681, 2, 1, "", "fit"], [681, 2, 1, "", "fit_transform"], [681, 2, 1, "", "get_feature_names_out"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "set_output"], [681, 2, 1, "", "set_params"]], "sklearn.metrics": [[686, 1, 1, "", "ConfusionMatrixDisplay"], [687, 1, 1, "", "DetCurveDisplay"], [688, 1, 1, "", "DistanceMetric"], [689, 1, 1, "", "PrecisionRecallDisplay"], [690, 1, 1, "", "PredictionErrorDisplay"], [691, 1, 1, "", "RocCurveDisplay"], [692, 4, 1, "", "accuracy_score"], [693, 4, 1, "", "adjusted_mutual_info_score"], [694, 4, 1, "", "adjusted_rand_score"], [695, 4, 1, "", "auc"], [696, 4, 1, "", "average_precision_score"], [697, 4, 1, "", "balanced_accuracy_score"], [698, 4, 1, "", "brier_score_loss"], [699, 4, 1, "", "calinski_harabasz_score"], [700, 4, 1, "", "check_scoring"], [701, 4, 1, "", "class_likelihood_ratios"], [702, 4, 1, "", "classification_report"], [398, 0, 0, "-", "cluster"], [705, 4, 1, "", "cohen_kappa_score"], [706, 4, 1, "", "completeness_score"], [707, 4, 1, "", "confusion_matrix"], [708, 4, 1, "", "consensus_score"], [709, 4, 1, "", "coverage_error"], [710, 4, 1, "", "d2_absolute_error_score"], [711, 4, 1, "", "d2_pinball_score"], [712, 4, 1, "", "d2_tweedie_score"], [713, 4, 1, "", "davies_bouldin_score"], [714, 4, 1, "", "dcg_score"], [715, 4, 1, "", "det_curve"], [716, 4, 1, "", "explained_variance_score"], [717, 4, 1, "", "f1_score"], [718, 4, 1, "", "fbeta_score"], [719, 4, 1, "", "fowlkes_mallows_score"], [720, 4, 1, "", "get_scorer"], [721, 4, 1, "", "get_scorer_names"], [722, 4, 1, "", "hamming_loss"], [723, 4, 1, "", "hinge_loss"], [724, 4, 1, "", "homogeneity_completeness_v_measure"], [725, 4, 1, "", "homogeneity_score"], [726, 4, 1, "", "jaccard_score"], [727, 4, 1, "", "label_ranking_average_precision_score"], [728, 4, 1, "", "label_ranking_loss"], [729, 4, 1, "", "log_loss"], [730, 4, 1, "", "make_scorer"], [731, 4, 1, "", "matthews_corrcoef"], [732, 4, 1, "", "max_error"], [733, 4, 1, "", "mean_absolute_error"], [734, 4, 1, "", "mean_absolute_percentage_error"], [735, 4, 1, "", "mean_gamma_deviance"], [736, 4, 1, "", "mean_pinball_loss"], [737, 4, 1, "", "mean_poisson_deviance"], [738, 4, 1, "", "mean_squared_error"], [739, 4, 1, "", "mean_squared_log_error"], [740, 4, 1, "", "mean_tweedie_deviance"], [741, 4, 1, "", "median_absolute_error"], [742, 4, 1, "", "multilabel_confusion_matrix"], [743, 4, 1, "", "mutual_info_score"], [744, 4, 1, "", "ndcg_score"], [745, 4, 1, "", "normalized_mutual_info_score"], [398, 0, 0, "-", "pairwise"], [766, 4, 1, "", "pairwise_distances"], [767, 4, 1, "", "pairwise_distances_argmin"], [768, 4, 1, "", "pairwise_distances_argmin_min"], [769, 4, 1, "", "pairwise_distances_chunked"], [770, 4, 1, "", "precision_recall_curve"], [771, 4, 1, "", "precision_recall_fscore_support"], [772, 4, 1, "", "precision_score"], [773, 4, 1, "", "r2_score"], [774, 4, 1, "", "rand_score"], [775, 4, 1, "", "recall_score"], [776, 4, 1, "", "roc_auc_score"], [777, 4, 1, "", "roc_curve"], [778, 4, 1, "", "silhouette_samples"], [779, 4, 1, "", "silhouette_score"], [780, 4, 1, "", "top_k_accuracy_score"], [781, 4, 1, "", "v_measure_score"], [782, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[686, 2, 1, "", "from_estimator"], [686, 2, 1, "", "from_predictions"], [686, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[687, 2, 1, "", "from_estimator"], [687, 2, 1, "", "from_predictions"], [687, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[688, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[689, 2, 1, "", "from_estimator"], [689, 2, 1, "", "from_predictions"], [689, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[690, 2, 1, "", "from_estimator"], [690, 2, 1, "", "from_predictions"], [690, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[691, 2, 1, "", "from_estimator"], [691, 2, 1, "", "from_predictions"], [691, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[703, 4, 1, "", "contingency_matrix"], [704, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[746, 4, 1, "", "additive_chi2_kernel"], [747, 4, 1, "", "chi2_kernel"], [748, 4, 1, "", "cosine_distances"], [749, 4, 1, "", "cosine_similarity"], [750, 4, 1, "", "distance_metrics"], [751, 4, 1, "", "euclidean_distances"], [752, 4, 1, "", "haversine_distances"], [753, 4, 1, "", "kernel_metrics"], [754, 4, 1, "", "laplacian_kernel"], [755, 4, 1, "", "linear_kernel"], [756, 4, 1, "", "manhattan_distances"], [757, 4, 1, "", "nan_euclidean_distances"], [758, 4, 1, "", "paired_cosine_distances"], [759, 4, 1, "", "paired_distances"], [760, 4, 1, "", "paired_euclidean_distances"], [761, 4, 1, "", "paired_manhattan_distances"], [762, 4, 1, "", "pairwise_kernels"], [763, 4, 1, "", "polynomial_kernel"], [764, 4, 1, "", "rbf_kernel"], [765, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[783, 1, 1, "", "BayesianGaussianMixture"], [784, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[783, 2, 1, "", "fit"], [783, 2, 1, "", "fit_predict"], [783, 2, 1, "", "get_metadata_routing"], [783, 2, 1, "", "get_params"], [783, 2, 1, "", "predict"], [783, 2, 1, "", "predict_proba"], [783, 2, 1, "", "sample"], [783, 2, 1, "", "score"], [783, 2, 1, "", "score_samples"], [783, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[784, 2, 1, "", "aic"], [784, 2, 1, "", "bic"], [784, 2, 1, "", "fit"], [784, 2, 1, "", "fit_predict"], [784, 2, 1, "", "get_metadata_routing"], [784, 2, 1, "", "get_params"], [784, 2, 1, "", "predict"], [784, 2, 1, "", "predict_proba"], [784, 2, 1, "", "sample"], [784, 2, 1, "", "score"], [784, 2, 1, "", "score_samples"], [784, 2, 1, "", "set_params"]], "sklearn.model_selection": [[785, 1, 1, "", "GridSearchCV"], [786, 1, 1, "", "GroupKFold"], [787, 1, 1, "", "GroupShuffleSplit"], [788, 1, 1, "", "HalvingGridSearchCV"], [789, 1, 1, "", "HalvingRandomSearchCV"], [790, 1, 1, "", "KFold"], [791, 1, 1, "", "LearningCurveDisplay"], [792, 1, 1, "", "LeaveOneGroupOut"], [793, 1, 1, "", "LeaveOneOut"], [794, 1, 1, "", "LeavePGroupsOut"], [795, 1, 1, "", "LeavePOut"], [796, 1, 1, "", "ParameterGrid"], [797, 1, 1, "", "ParameterSampler"], [798, 1, 1, "", "PredefinedSplit"], [799, 1, 1, "", "RandomizedSearchCV"], [800, 1, 1, "", "RepeatedKFold"], [801, 1, 1, "", "RepeatedStratifiedKFold"], [802, 1, 1, "", "ShuffleSplit"], [803, 1, 1, "", "StratifiedGroupKFold"], [804, 1, 1, "", "StratifiedKFold"], [805, 1, 1, "", "StratifiedShuffleSplit"], [806, 1, 1, "", "TimeSeriesSplit"], [807, 1, 1, "", "ValidationCurveDisplay"], [808, 4, 1, "", "check_cv"], [809, 4, 1, "", "cross_val_predict"], [810, 4, 1, "", "cross_val_score"], [811, 4, 1, "", "cross_validate"], [812, 4, 1, "", "learning_curve"], [813, 4, 1, "", "permutation_test_score"], [814, 4, 1, "", "train_test_split"], [815, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[785, 3, 1, "", "classes_"], [785, 2, 1, "", "decision_function"], [785, 2, 1, "", "fit"], [785, 2, 1, "", "get_metadata_routing"], [785, 2, 1, "", "get_params"], [785, 2, 1, "", "inverse_transform"], [785, 3, 1, "", "n_features_in_"], [785, 2, 1, "", "predict"], [785, 2, 1, "", "predict_log_proba"], [785, 2, 1, "", "predict_proba"], [785, 2, 1, "", "score"], [785, 2, 1, "", "score_samples"], [785, 2, 1, "", "set_fit_request"], [785, 2, 1, "", "set_params"], [785, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[786, 2, 1, "", "get_metadata_routing"], [786, 2, 1, "", "get_n_splits"], [786, 2, 1, "", "set_split_request"], [786, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[787, 2, 1, "", "get_metadata_routing"], [787, 2, 1, "", "get_n_splits"], [787, 2, 1, "", "set_split_request"], [787, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[788, 3, 1, "", "classes_"], [788, 2, 1, "", "decision_function"], [788, 2, 1, "", "fit"], [788, 2, 1, "", "get_metadata_routing"], [788, 2, 1, "", "get_params"], [788, 2, 1, "", "inverse_transform"], [788, 3, 1, "", "n_features_in_"], [788, 2, 1, "", "predict"], [788, 2, 1, "", "predict_log_proba"], [788, 2, 1, "", "predict_proba"], [788, 2, 1, "", "score"], [788, 2, 1, "", "score_samples"], [788, 2, 1, "", "set_fit_request"], [788, 2, 1, "", "set_params"], [788, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[789, 3, 1, "", "classes_"], [789, 2, 1, "", "decision_function"], [789, 2, 1, "", "fit"], [789, 2, 1, "", "get_metadata_routing"], [789, 2, 1, "", "get_params"], [789, 2, 1, "", "inverse_transform"], [789, 3, 1, "", "n_features_in_"], [789, 2, 1, "", "predict"], [789, 2, 1, "", "predict_log_proba"], [789, 2, 1, "", "predict_proba"], [789, 2, 1, "", "score"], [789, 2, 1, "", "score_samples"], [789, 2, 1, "", "set_fit_request"], [789, 2, 1, "", "set_params"], [789, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[790, 2, 1, "", "get_metadata_routing"], [790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[791, 2, 1, "", "from_estimator"], [791, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[792, 2, 1, "", "get_metadata_routing"], [792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "set_split_request"], [792, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[793, 2, 1, "", "get_metadata_routing"], [793, 2, 1, "", "get_n_splits"], [793, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_n_splits"], [794, 2, 1, "", "set_split_request"], [794, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[799, 3, 1, "", "classes_"], [799, 2, 1, "", "decision_function"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "inverse_transform"], [799, 3, 1, "", "n_features_in_"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_log_proba"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "score"], [799, 2, 1, "", "score_samples"], [799, 2, 1, "", "set_fit_request"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_n_splits"], [800, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "set_split_request"], [803, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[807, 2, 1, "", "from_estimator"], [807, 2, 1, "", "plot"]], "sklearn.multiclass": [[816, 1, 1, "", "OneVsOneClassifier"], [817, 1, 1, "", "OneVsRestClassifier"], [818, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[816, 2, 1, "", "decision_function"], [816, 2, 1, "", "fit"], [816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_params"], [816, 3, 1, "", "n_classes_"], [816, 2, 1, "", "partial_fit"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"], [816, 2, 1, "", "set_partial_fit_request"], [816, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[817, 2, 1, "", "decision_function"], [817, 2, 1, "", "fit"], [817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_params"], [817, 3, 1, "", "multilabel_"], [817, 3, 1, "", "n_classes_"], [817, 2, 1, "", "partial_fit"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "predict_proba"], [817, 2, 1, "", "score"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "set_partial_fit_request"], [817, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"], [818, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[819, 1, 1, "", "ClassifierChain"], [820, 1, 1, "", "MultiOutputClassifier"], [821, 1, 1, "", "MultiOutputRegressor"], [822, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[819, 2, 1, "", "decision_function"], [819, 2, 1, "", "fit"], [819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "predict"], [819, 2, 1, "", "predict_proba"], [819, 2, 1, "", "score"], [819, 2, 1, "", "set_params"], [819, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "partial_fit"], [820, 2, 1, "", "predict"], [820, 2, 1, "", "predict_proba"], [820, 2, 1, "", "score"], [820, 2, 1, "", "set_fit_request"], [820, 2, 1, "", "set_params"], [820, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "partial_fit"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_fit_request"], [821, 2, 1, "", "set_params"], [821, 2, 1, "", "set_partial_fit_request"], [821, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[823, 1, 1, "", "BernoulliNB"], [824, 1, 1, "", "CategoricalNB"], [825, 1, 1, "", "ComplementNB"], [826, 1, 1, "", "GaussianNB"], [827, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "partial_fit"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_joint_log_proba"], [823, 2, 1, "", "predict_log_proba"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_fit_request"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "set_partial_fit_request"], [823, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "partial_fit"], [824, 2, 1, "", "predict"], [824, 2, 1, "", "predict_joint_log_proba"], [824, 2, 1, "", "predict_log_proba"], [824, 2, 1, "", "predict_proba"], [824, 2, 1, "", "score"], [824, 2, 1, "", "set_fit_request"], [824, 2, 1, "", "set_params"], [824, 2, 1, "", "set_partial_fit_request"], [824, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "partial_fit"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "predict_joint_log_proba"], [825, 2, 1, "", "predict_log_proba"], [825, 2, 1, "", "predict_proba"], [825, 2, 1, "", "score"], [825, 2, 1, "", "set_fit_request"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "set_partial_fit_request"], [825, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "partial_fit"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "predict_joint_log_proba"], [826, 2, 1, "", "predict_log_proba"], [826, 2, 1, "", "predict_proba"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_fit_request"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_partial_fit_request"], [826, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "partial_fit"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "predict_joint_log_proba"], [827, 2, 1, "", "predict_log_proba"], [827, 2, 1, "", "predict_proba"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_fit_request"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_partial_fit_request"], [827, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[828, 1, 1, "", "BallTree"], [829, 1, 1, "", "KDTree"], [830, 1, 1, "", "KNeighborsClassifier"], [831, 1, 1, "", "KNeighborsRegressor"], [832, 1, 1, "", "KNeighborsTransformer"], [833, 1, 1, "", "KernelDensity"], [834, 1, 1, "", "LocalOutlierFactor"], [835, 1, 1, "", "NearestCentroid"], [836, 1, 1, "", "NearestNeighbors"], [837, 1, 1, "", "NeighborhoodComponentsAnalysis"], [838, 1, 1, "", "RadiusNeighborsClassifier"], [839, 1, 1, "", "RadiusNeighborsRegressor"], [840, 1, 1, "", "RadiusNeighborsTransformer"], [841, 4, 1, "", "kneighbors_graph"], [842, 4, 1, "", "radius_neighbors_graph"], [843, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[828, 2, 1, "", "get_arrays"], [828, 2, 1, "", "get_n_calls"], [828, 2, 1, "", "get_tree_stats"], [828, 2, 1, "", "kernel_density"], [828, 2, 1, "", "query"], [828, 2, 1, "", "query_radius"], [828, 2, 1, "", "reset_n_calls"], [828, 2, 1, "", "two_point_correlation"], [828, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KDTree": [[829, 2, 1, "", "get_arrays"], [829, 2, 1, "", "get_n_calls"], [829, 2, 1, "", "get_tree_stats"], [829, 2, 1, "", "kernel_density"], [829, 2, 1, "", "query"], [829, 2, 1, "", "query_radius"], [829, 2, 1, "", "reset_n_calls"], [829, 2, 1, "", "two_point_correlation"], [829, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KNeighborsClassifier": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "kneighbors"], [830, 2, 1, "", "kneighbors_graph"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "kneighbors"], [831, 2, 1, "", "kneighbors_graph"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "fit_transform"], [832, 2, 1, "", "get_feature_names_out"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "kneighbors"], [832, 2, 1, "", "kneighbors_graph"], [832, 2, 1, "", "set_output"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "sample"], [833, 2, 1, "", "score"], [833, 2, 1, "", "score_samples"], [833, 2, 1, "", "set_fit_request"], [833, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[834, 2, 1, "", "decision_function"], [834, 2, 1, "", "fit"], [834, 2, 1, "", "fit_predict"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "kneighbors"], [834, 2, 1, "", "kneighbors_graph"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "score_samples"], [834, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "kneighbors"], [836, 2, 1, "", "kneighbors_graph"], [836, 2, 1, "", "radius_neighbors"], [836, 2, 1, "", "radius_neighbors_graph"], [836, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "fit_transform"], [837, 2, 1, "", "get_feature_names_out"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "set_output"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "radius_neighbors"], [838, 2, 1, "", "radius_neighbors_graph"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "radius_neighbors"], [839, 2, 1, "", "radius_neighbors_graph"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_feature_names_out"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "radius_neighbors"], [840, 2, 1, "", "radius_neighbors_graph"], [840, 2, 1, "", "set_output"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.neural_network": [[844, 1, 1, "", "BernoulliRBM"], [845, 1, 1, "", "MLPClassifier"], [846, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "gibbs"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "score_samples"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_log_proba"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[847, 1, 1, "", "FeatureUnion"], [848, 1, 1, "", "Pipeline"], [849, 4, 1, "", "make_pipeline"], [850, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[847, 3, 1, "", "feature_names_in_"], [847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_feature_names_out"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 3, 1, "", "n_features_in_"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[848, 3, 1, "", "classes_"], [848, 2, 1, "", "decision_function"], [848, 3, 1, "", "feature_names_in_"], [848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_predict"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "inverse_transform"], [848, 3, 1, "", "n_features_in_"], [848, 3, 1, "", "named_steps"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "predict_log_proba"], [848, 2, 1, "", "predict_proba"], [848, 2, 1, "", "score"], [848, 2, 1, "", "score_samples"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_score_request"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing": [[851, 1, 1, "", "Binarizer"], [852, 1, 1, "", "FunctionTransformer"], [853, 1, 1, "", "KBinsDiscretizer"], [854, 1, 1, "", "KernelCenterer"], [855, 1, 1, "", "LabelBinarizer"], [856, 1, 1, "", "LabelEncoder"], [857, 1, 1, "", "MaxAbsScaler"], [858, 1, 1, "", "MinMaxScaler"], [859, 1, 1, "", "MultiLabelBinarizer"], [860, 1, 1, "", "Normalizer"], [861, 1, 1, "", "OneHotEncoder"], [862, 1, 1, "", "OrdinalEncoder"], [863, 1, 1, "", "PolynomialFeatures"], [864, 1, 1, "", "PowerTransformer"], [865, 1, 1, "", "QuantileTransformer"], [866, 1, 1, "", "RobustScaler"], [867, 1, 1, "", "SplineTransformer"], [868, 1, 1, "", "StandardScaler"], [869, 1, 1, "", "TargetEncoder"], [870, 4, 1, "", "add_dummy_feature"], [871, 4, 1, "", "binarize"], [872, 4, 1, "", "label_binarize"], [873, 4, 1, "", "maxabs_scale"], [874, 4, 1, "", "minmax_scale"], [875, 4, 1, "", "normalize"], [876, 4, 1, "", "power_transform"], [877, 4, 1, "", "quantile_transform"], [878, 4, 1, "", "robust_scale"], [879, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_transform_request"], [851, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "inverse_transform"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "inverse_transform"], [853, 2, 1, "", "set_fit_request"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "set_fit_request"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_transform_request"], [854, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "inverse_transform"], [855, 2, 1, "", "set_inverse_transform_request"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "inverse_transform"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "partial_fit"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "inverse_transform"], [858, 2, 1, "", "partial_fit"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "set_transform_request"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 3, 1, "", "infrequent_categories_"], [861, 2, 1, "", "inverse_transform"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 3, 1, "", "infrequent_categories_"], [862, 2, 1, "", "inverse_transform"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 3, 1, "", "powers_"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "inverse_transform"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "set_fit_request"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "partial_fit"], [868, 2, 1, "", "set_fit_request"], [868, 2, 1, "", "set_inverse_transform_request"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_partial_fit_request"], [868, 2, 1, "", "set_transform_request"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 3, 1, "", "infrequent_categories_"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.random_projection": [[880, 1, 1, "", "GaussianRandomProjection"], [881, 1, 1, "", "SparseRandomProjection"], [882, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[883, 1, 1, "", "LabelPropagation"], [884, 1, 1, "", "LabelSpreading"], [885, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "predict"], [883, 2, 1, "", "predict_proba"], [883, 2, 1, "", "score"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "predict"], [884, 2, 1, "", "predict_proba"], [884, 2, 1, "", "score"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[885, 2, 1, "", "decision_function"], [885, 2, 1, "", "fit"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "predict"], [885, 2, 1, "", "predict_log_proba"], [885, 2, 1, "", "predict_proba"], [885, 2, 1, "", "score"], [885, 2, 1, "", "set_params"]], "sklearn.svm": [[888, 1, 1, "", "LinearSVC"], [889, 1, 1, "", "LinearSVR"], [890, 1, 1, "", "NuSVC"], [891, 1, 1, "", "NuSVR"], [892, 1, 1, "", "OneClassSVM"], [893, 1, 1, "", "SVC"], [894, 1, 1, "", "SVR"], [895, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[888, 2, 1, "", "decision_function"], [888, 2, 1, "", "densify"], [888, 2, 1, "", "fit"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "predict"], [888, 2, 1, "", "score"], [888, 2, 1, "", "set_fit_request"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "set_score_request"], [888, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "predict"], [889, 2, 1, "", "score"], [889, 2, 1, "", "set_fit_request"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[890, 3, 1, "", "coef_"], [890, 2, 1, "", "decision_function"], [890, 2, 1, "", "fit"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 3, 1, "", "n_support_"], [890, 2, 1, "", "predict"], [890, 2, 1, "", "predict_log_proba"], [890, 2, 1, "", "predict_proba"], [890, 3, 1, "", "probA_"], [890, 3, 1, "", "probB_"], [890, 2, 1, "", "score"], [890, 2, 1, "", "set_fit_request"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[891, 3, 1, "", "coef_"], [891, 2, 1, "", "fit"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 3, 1, "", "n_support_"], [891, 2, 1, "", "predict"], [891, 2, 1, "", "score"], [891, 2, 1, "", "set_fit_request"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[892, 3, 1, "", "coef_"], [892, 2, 1, "", "decision_function"], [892, 2, 1, "", "fit"], [892, 2, 1, "", "fit_predict"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 3, 1, "", "n_support_"], [892, 2, 1, "", "predict"], [892, 2, 1, "", "score_samples"], [892, 2, 1, "", "set_fit_request"], [892, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[893, 3, 1, "", "coef_"], [893, 2, 1, "", "decision_function"], [893, 2, 1, "", "fit"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 3, 1, "", "n_support_"], [893, 2, 1, "", "predict"], [893, 2, 1, "", "predict_log_proba"], [893, 2, 1, "", "predict_proba"], [893, 3, 1, "", "probA_"], [893, 3, 1, "", "probB_"], [893, 2, 1, "", "score"], [893, 2, 1, "", "set_fit_request"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[894, 3, 1, "", "coef_"], [894, 2, 1, "", "fit"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 3, 1, "", "n_support_"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_fit_request"], [894, 2, 1, "", "set_params"], [894, 2, 1, "", "set_score_request"]], "sklearn.tree": [[896, 1, 1, "", "DecisionTreeClassifier"], [897, 1, 1, "", "DecisionTreeRegressor"], [898, 1, 1, "", "ExtraTreeClassifier"], [899, 1, 1, "", "ExtraTreeRegressor"], [900, 4, 1, "", "export_graphviz"], [901, 4, 1, "", "export_text"], [902, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[896, 2, 1, "", "apply"], [896, 2, 1, "", "cost_complexity_pruning_path"], [896, 2, 1, "", "decision_path"], [896, 3, 1, "", "feature_importances_"], [896, 2, 1, "", "fit"], [896, 2, 1, "", "get_depth"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_n_leaves"], [896, 2, 1, "", "get_params"], [896, 2, 1, "", "predict"], [896, 2, 1, "", "predict_log_proba"], [896, 2, 1, "", "predict_proba"], [896, 2, 1, "", "score"], [896, 2, 1, "", "set_fit_request"], [896, 2, 1, "", "set_params"], [896, 2, 1, "", "set_predict_proba_request"], [896, 2, 1, "", "set_predict_request"], [896, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[897, 2, 1, "", "apply"], [897, 2, 1, "", "cost_complexity_pruning_path"], [897, 2, 1, "", "decision_path"], [897, 3, 1, "", "feature_importances_"], [897, 2, 1, "", "fit"], [897, 2, 1, "", "get_depth"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_n_leaves"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "predict"], [897, 2, 1, "", "score"], [897, 2, 1, "", "set_fit_request"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "set_predict_request"], [897, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[898, 2, 1, "", "apply"], [898, 2, 1, "", "cost_complexity_pruning_path"], [898, 2, 1, "", "decision_path"], [898, 3, 1, "", "feature_importances_"], [898, 2, 1, "", "fit"], [898, 2, 1, "", "get_depth"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_n_leaves"], [898, 2, 1, "", "get_params"], [898, 2, 1, "", "predict"], [898, 2, 1, "", "predict_log_proba"], [898, 2, 1, "", "predict_proba"], [898, 2, 1, "", "score"], [898, 2, 1, "", "set_fit_request"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "set_predict_proba_request"], [898, 2, 1, "", "set_predict_request"], [898, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[899, 2, 1, "", "apply"], [899, 2, 1, "", "cost_complexity_pruning_path"], [899, 2, 1, "", "decision_path"], [899, 3, 1, "", "feature_importances_"], [899, 2, 1, "", "fit"], [899, 2, 1, "", "get_depth"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_n_leaves"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_fit_request"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_predict_request"], [899, 2, 1, "", "set_score_request"]], "sklearn.utils": [[903, 1, 1, "", "Bunch"], [904, 4, 1, "", "_safe_indexing"], [906, 4, 1, "", "as_float_array"], [907, 4, 1, "", "assert_all_finite"], [908, 4, 1, "", "check_X_y"], [909, 4, 1, "", "check_array"], [910, 4, 1, "", "check_consistent_length"], [911, 4, 1, "", "check_random_state"], [912, 4, 1, "", "check_scalar"], [915, 4, 1, "", "deprecated"], [921, 4, 1, "", "estimator_html_repr"], [928, 4, 1, "", "gen_batches"], [929, 4, 1, "", "gen_even_slices"], [931, 4, 1, "", "indexable"], [941, 4, 1, "", "murmurhash3_32"], [944, 4, 1, "", "parallel_backend"], [946, 4, 1, "", "register_parallel_backend"], [947, 4, 1, "", "resample"], [948, 4, 1, "", "safe_mask"], [949, 4, 1, "", "safe_sqr"], [950, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[903, 2, 1, "", "clear"], [903, 2, 1, "", "copy"], [903, 2, 1, "", "fromkeys"], [903, 2, 1, "", "get"], [903, 2, 1, "", "items"], [903, 2, 1, "", "keys"], [903, 2, 1, "", "pop"], [903, 2, 1, "", "popitem"], [903, 2, 1, "", "setdefault"], [903, 2, 1, "", "update"], [903, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[905, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[913, 4, 1, "", "compute_class_weight"], [914, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[916, 4, 1, "", "all_displays"], [917, 4, 1, "", "all_estimators"], [918, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[919, 4, 1, "", "check_estimator"], [920, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[922, 4, 1, "", "density"], [923, 4, 1, "", "fast_logdet"], [924, 4, 1, "", "randomized_range_finder"], [925, 4, 1, "", "randomized_svd"], [926, 4, 1, "", "safe_sparse_dot"], [927, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[930, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[932, 4, 1, "", "MetadataRequest"], [933, 4, 1, "", "MetadataRouter"], [934, 4, 1, "", "MethodMapping"], [935, 4, 1, "", "get_routing_for_object"], [936, 4, 1, "", "process_routing"]], "sklearn.utils.metaestimators": [[937, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[938, 4, 1, "", "is_multilabel"], [939, 4, 1, "", "type_of_target"], [940, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[942, 1, 1, "", "Parallel"], [943, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[942, 2, 1, "", "dispatch_next"], [942, 2, 1, "", "dispatch_one_batch"], [942, 2, 1, "", "format"], [942, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[945, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[951, 4, 1, "", "incr_mean_variance_axis"], [952, 4, 1, "", "inplace_column_scale"], [953, 4, 1, "", "inplace_csr_column_scale"], [954, 4, 1, "", "inplace_row_scale"], [955, 4, 1, "", "inplace_swap_column"], [956, 4, 1, "", "inplace_swap_row"], [957, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[958, 4, 1, "", "inplace_csr_row_normalize_l1"], [959, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[960, 4, 1, "", "check_is_fitted"], [961, 4, 1, "", "check_memory"], [962, 4, 1, "", "check_symmetric"], [963, 4, 1, "", "column_or_1d"], [964, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 384], "u": 0, "histori": [0, 1016], "govern": [0, 387], "author": [0, 1018], "contributor": [0, 372, 373, 387, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "experi": [0, 37, 372, 387], "team": [0, 372, 387], "commun": [0, 373, 387], "emeritu": 0, "core": [0, 8, 361, 372, 377, 379, 384, 387, 407, 978], "develop": [0, 234, 371, 374, 375, 376, 377, 380, 381, 382, 965, 1013, 1034], "cite": 0, "scikit": [0, 234, 254, 311, 312, 313, 314, 315, 316, 358, 359, 371, 374, 375, 377, 378, 384, 387, 389, 994, 996, 997, 1000, 1002, 1003, 1008, 1011, 1014], "learn": [0, 5, 12, 50, 95, 98, 149, 165, 167, 168, 169, 174, 218, 219, 220, 221, 233, 234, 254, 261, 289, 296, 311, 312, 313, 314, 315, 316, 319, 320, 321, 358, 359, 361, 369, 371, 373, 374, 375, 377, 378, 384, 387, 389, 398, 404, 406, 971, 973, 981, 989, 994, 996, 997, 998, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1014], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 86, 100, 104, 231, 373, 375, 384, 398, 988, 993, 996], "infrastructur": 0, "support": [0, 25, 120, 165, 192, 307, 311, 312, 313, 314, 316, 326, 329, 338, 384, 389, 395, 397, 398, 406, 991, 992, 999, 1009, 1024], "exampl": [3, 6, 9, 53, 59, 75, 88, 102, 126, 157, 165, 194, 195, 336, 340, 361, 367, 368, 378, 384, 388, 390, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 416, 419, 421, 422, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 449, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 471, 472, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 491, 493, 495, 499, 500, 501, 502, 503, 504, 508, 509, 511, 512, 513, 514, 515, 516, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 570, 571, 573, 576, 577, 578, 579, 580, 582, 583, 586, 588, 589, 591, 593, 594, 595, 596, 597, 599, 600, 602, 603, 604, 606, 607, 608, 611, 612, 614, 616, 617, 619, 620, 621, 622, 623, 624, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 641, 642, 644, 645, 646, 647, 648, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 677, 678, 679, 680, 681, 682, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 706, 707, 708, 715, 717, 722, 725, 726, 729, 730, 733, 736, 737, 738, 740, 741, 743, 745, 766, 767, 770, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 819, 821, 823, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 841, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 874, 877, 881, 882, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 902, 903, 911, 920, 922, 929, 933, 934, 935, 936, 937, 950, 960, 965, 968, 970, 971, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 1002, 1008, 1009, 1010, 1015, 1018], "base": [3, 4, 85, 117, 118, 147, 165, 182, 233, 311, 312, 314, 316, 373, 398, 399, 403, 406, 408, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 972, 984, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035], "real": [3, 9, 75, 109, 165, 368], "world": [3, 75, 165, 368], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 58, 62, 70, 85, 88, 89, 90, 91, 92, 95, 104, 116, 119, 120, 130, 136, 137, 150, 152, 154, 155, 157, 159, 165, 167, 168, 169, 177, 180, 182, 187, 198, 200, 207, 216, 219, 220, 227, 232, 238, 257, 265, 266, 308, 323, 324, 328, 344, 350, 365, 366, 367, 368, 369, 370, 378, 384, 398, 409, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 1002, 1008, 1009, 1011, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "time": [4, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 116, 121, 134, 140, 148, 160, 164, 172, 175, 192, 217, 225, 232, 233, 242, 251, 275, 278, 293, 299, 309, 317, 325, 342, 344, 347, 354, 403], "relat": [4, 8, 367, 373, 984, 996, 1025], "featur": [4, 51, 54, 74, 100, 115, 117, 118, 120, 124, 127, 128, 141, 143, 145, 146, 147, 165, 170, 171, 174, 177, 192, 195, 216, 232, 238, 260, 298, 302, 303, 306, 307, 311, 313, 314, 334, 344, 345, 359, 361, 373, 377, 390, 398, 400, 406, 407, 408, 966, 984, 986, 993, 1010, 1011, 1021, 1022, 1023, 1024, 1025], "engin": [4, 170, 996, 1000], "data": [4, 7, 9, 12, 17, 20, 24, 26, 38, 47, 49, 50, 55, 57, 58, 63, 64, 66, 67, 70, 75, 78, 80, 82, 85, 86, 96, 97, 100, 101, 102, 103, 109, 111, 117, 118, 124, 126, 130, 143, 146, 147, 155, 156, 158, 163, 167, 170, 171, 174, 178, 184, 191, 192, 228, 233, 237, 240, 249, 254, 256, 260, 265, 266, 268, 269, 272, 286, 291, 298, 301, 305, 306, 307, 319, 331, 334, 338, 345, 346, 355, 359, 361, 368, 378, 384, 386, 399, 400, 402, 403, 408, 409, 986, 990, 1000, 1002, 1005, 1008, 1010, 1011], "explor": 4, "bike": [4, 169], "share": [4, 169], "demand": 4, "cross": [4, 84, 85, 136, 137, 146, 165, 187, 254, 255, 257, 258, 262, 264, 269, 308, 334, 355, 398, 402, 403, 965, 972, 1006], "valid": [4, 136, 137, 146, 187, 231, 254, 255, 257, 258, 262, 264, 269, 274, 334, 355, 359, 375, 382, 398, 403, 960, 961, 962, 963, 964, 965, 971, 972, 979, 1006], "gradient": [4, 116, 120, 121, 122, 123, 124, 125, 169, 198, 206, 212, 311, 312, 314, 316, 406, 972, 990], "boost": [4, 116, 120, 121, 122, 123, 124, 125, 169, 198, 311, 312, 314, 316, 406], "naiv": [4, 24, 25, 398, 978], "linear": [4, 25, 33, 34, 123, 150, 165, 168, 176, 177, 194, 198, 201, 204, 219, 220, 232, 312, 330, 337, 338, 359, 382, 384, 398, 970, 972, 973, 974, 986, 1009], "regress": [4, 73, 75, 85, 86, 111, 123, 124, 133, 150, 155, 156, 157, 158, 177, 178, 181, 187, 189, 190, 191, 194, 196, 198, 200, 213, 215, 216, 230, 233, 291, 338, 351, 352, 369, 398, 400, 406, 409, 967, 969, 972, 976, 977, 979, 980, 990, 991, 992, 1009], "step": [4, 239, 385, 400], "categori": [4, 315, 986], "trigonometr": 4, "period": [4, 199], "spline": [4, 199, 314, 986], "qualit": 4, "analysi": [4, 33, 34, 60, 95, 101, 103, 106, 123, 169, 182, 244, 261, 262, 269, 287, 288, 289, 344, 398, 402, 404, 970, 979, 993, 1010, 1011], "impact": [4, 61, 1033, 1034, 1035], "model": [4, 7, 11, 57, 75, 85, 96, 103, 109, 116, 117, 118, 120, 124, 126, 146, 147, 150, 155, 165, 168, 169, 170, 174, 176, 177, 182, 186, 187, 192, 198, 201, 216, 228, 233, 238, 243, 245, 249, 250, 252, 258, 259, 261, 266, 286, 291, 298, 306, 312, 314, 338, 344, 359, 375, 384, 385, 387, 393, 394, 398, 403, 965, 971, 972, 975, 976, 978, 980, 981, 1002, 1006, 1009, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "predict": [4, 10, 24, 86, 111, 123, 133, 151, 167, 178, 198, 233, 237, 255, 266, 319, 359, 384, 385, 402, 403, 409, 976, 987, 1002, 1009], "pairwis": [4, 259, 398, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 974], "interact": [4, 169, 316, 406, 1009], "polynomi": [4, 174, 177, 178, 199, 968, 972, 974, 986, 1009], "non": [4, 14, 95, 123, 193, 198, 219, 264, 330, 337, 338, 404, 972, 986], "kernel": [4, 5, 100, 150, 155, 156, 158, 159, 165, 173, 174, 232, 233, 283, 284, 292, 313, 327, 330, 335, 338, 398, 404, 405, 409, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 968, 969, 974, 986, 991, 1009], "conclud": [4, 109, 223], "remark": [4, 57, 109, 223, 231], "imag": [5, 47, 50, 53, 66, 98, 367, 398, 407, 572, 573, 574, 575, 576], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 127, 128, 130, 185, 201, 212, 214, 259, 263, 268, 302, 338, 344, 345, 355, 361, 374, 378, 379, 381, 384, 403, 404, 406, 407, 408, 413, 416, 419, 421, 422, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 449, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 471, 472, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 491, 493, 495, 499, 500, 501, 502, 503, 504, 508, 509, 511, 512, 513, 514, 515, 516, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 570, 571, 573, 576, 577, 578, 579, 580, 582, 583, 586, 588, 589, 591, 593, 594, 595, 596, 597, 599, 600, 602, 603, 604, 606, 607, 608, 611, 612, 614, 616, 617, 619, 620, 621, 622, 623, 624, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 641, 642, 644, 645, 646, 647, 648, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 677, 678, 679, 680, 681, 682, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 706, 707, 708, 715, 717, 722, 725, 726, 729, 730, 733, 736, 737, 738, 740, 741, 743, 745, 766, 767, 770, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 819, 821, 823, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 841, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 874, 877, 881, 882, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 902, 903, 911, 920, 922, 929, 933, 934, 935, 936, 937, 950, 960, 970, 972, 973, 976, 980, 990, 991, 992, 1000, 1009, 1011, 1028], "pca": [5, 58, 73, 95, 96, 99, 100, 101, 102, 103, 104, 306, 404, 530, 993, 1010], "refer": [5, 11, 25, 27, 80, 81, 98, 113, 170, 174, 182, 186, 259, 264, 265, 292, 367, 368, 370, 396, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 965, 966, 968, 969, 970, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992], "load": [5, 7, 17, 50, 58, 116, 118, 120, 124, 136, 147, 170, 191, 216, 220, 228, 232, 240, 260, 268, 269, 306, 307, 331, 334, 344, 345, 346, 366, 367, 378, 384, 407, 1002, 1010, 1011], "via": [5, 53, 186, 187, 216, 406, 968], "openml": [5, 307, 311, 367], "basi": [5, 159, 409, 968, 972, 1009], "reconstruct": [5, 13, 98], "test": [5, 78, 142, 262, 265, 272, 344, 349, 371, 373, 375, 381, 382, 403, 1002, 1009, 1011], "face": [6, 50, 95, 236, 368, 1000, 1007], "recognit": [6, 368, 370, 1007], "eigenfac": [6, 95, 1007], "svm": [6, 139, 143, 144, 174, 212, 232, 314, 324, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 398, 888, 889, 890, 891, 892, 893, 894, 895, 972, 982, 990, 1009, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "complex": [7, 229, 239, 258, 261, 321, 349, 359, 399, 972, 973, 979, 980, 990, 991, 992], "influenc": [7, 10, 359], "benchmark": [7, 10, 58, 344], "choos": [7, 965, 1002, 1004, 1006], "paramet": [7, 78, 123, 257, 313, 331, 339, 373, 375, 385, 386, 398, 400, 406, 965, 972, 976, 991, 1002, 1006, 1011], "run": [7, 58, 263], "code": [7, 95, 105, 373, 375, 378, 379, 381, 404, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "plot": [7, 8, 10, 20, 24, 30, 34, 38, 41, 47, 49, 50, 57, 63, 64, 66, 67, 78, 82, 85, 91, 92, 96, 97, 101, 109, 111, 116, 119, 124, 126, 130, 131, 132, 133, 136, 146, 163, 169, 177, 178, 182, 190, 191, 192, 202, 203, 207, 220, 228, 232, 237, 238, 240, 249, 255, 256, 261, 263, 266, 268, 272, 274, 286, 298, 307, 311, 313, 314, 319, 328, 329, 334, 344, 350, 380, 398, 971, 983, 1015], "result": [7, 8, 20, 38, 47, 49, 50, 57, 58, 63, 64, 67, 78, 80, 82, 96, 97, 109, 111, 116, 130, 133, 163, 174, 182, 203, 233, 237, 263, 272, 286, 307, 338, 345, 355, 965], "conclus": [7, 150, 182, 187, 308], "out": [8, 122, 361, 381, 403, 407, 965, 972, 978], "classif": [8, 26, 29, 30, 32, 33, 70, 91, 138, 151, 152, 153, 154, 158, 165, 214, 235, 262, 265, 266, 269, 282, 290, 298, 311, 318, 323, 344, 369, 398, 406, 409, 972, 976, 977, 979, 980, 990, 991, 992, 1009, 1011], "text": [8, 165, 229, 260, 323, 343, 344, 345, 346, 368, 398, 407, 577, 578, 579, 580, 1011], "document": [8, 19, 165, 313, 314, 343, 344, 345, 373, 996, 997, 999, 1014, 1018, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "reuter": 8, "routin": [8, 360, 382], "main": [8, 198], "outlier": [9, 180, 215, 227, 237, 285, 286, 301, 398, 972, 982, 986], "detect": [9, 227, 237, 256, 285, 286, 976, 982, 991], "set": [9, 75, 78, 102, 130, 163, 266, 331, 349, 384, 403, 972, 1002, 1008, 1009, 1011], "first": [9, 37, 373], "second": [9, 37], "latenc": [10, 359], "helper": [10, 159, 220, 382], "function": [10, 34, 159, 188, 202, 203, 208, 220, 237, 254, 272, 313, 334, 346, 382, 398, 403, 406, 409, 968, 972, 976, 991, 1009], "bulk": [10, 359], "atom": [10, 359], "speed": [10, 379], "variou": [10, 52, 205, 224], "regressor": [10, 111, 123, 177, 308, 311, 314, 398, 406], "n_featur": 10, "throughput": [10, 359], "speci": [11, 292], "distribut": [11, 216, 219, 292, 305, 389, 973, 986], "visual": [12, 58, 106, 228, 233, 240, 254, 297, 312, 331, 398, 399, 400, 976, 1015], "stock": [12, 1007], "market": [12, 1007], "structur": [12, 39, 47, 67, 158, 321, 353, 1007], "retriev": [12, 311], "from": [12, 98, 147, 170, 307, 311, 360, 367, 371, 384, 398, 407, 972, 976, 1002, 1009, 1010, 1011, 1028], "internet": 12, "graph": [12, 311, 382, 384, 399, 407, 930], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 95, 165, 315, 345, 369, 396, 398, 399, 404, 410, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 703, 704, 976, 1010, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "affin": [12, 38, 399, 974], "propag": [12, 38, 319, 320, 321, 399, 989], "embed": [12, 52, 219, 220, 231, 289, 406, 973], "2d": [12, 52, 97, 104, 169], "space": [12, 100, 400, 965, 973], "compress": [13, 53, 359, 408], "sens": [13, 408], "tomographi": 13, "l1": [13, 182, 189, 191, 214, 339, 408], "prior": [13, 159, 244], "lasso": [13, 182, 183, 184, 185, 186, 187, 192, 312, 641, 972], "topic": 14, "extract": [14, 74, 98, 216, 260, 345, 359, 361, 398, 407, 1011], "neg": [14, 95, 193, 404, 972], "matrix": [14, 17, 158, 179, 253, 398, 399, 404, 976, 991], "factor": [14, 95, 103, 106, 285, 286, 404, 982], "latent": [14, 85, 404], "dirichlet": [14, 404, 975], "alloc": [14, 404], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 63, 64, 67, 68, 76, 78, 83, 87, 93, 107, 116, 134, 140, 148, 160, 164, 172, 175, 191, 203, 217, 225, 242, 251, 272, 275, 278, 293, 299, 309, 317, 325, 342, 347, 354, 358, 359, 399, 400, 403, 983], "libsvm": [16, 367], "gui": 16, "wikipedia": 17, "princip": [17, 86, 101, 404, 993, 1010], "eigenvector": 17, "download": [17, 130, 163, 367], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 389, 407, 1011], "adjac": 17, "singular": [17, 404], "vector": [17, 25, 53, 165, 326, 329, 338, 344, 346, 368, 398, 407, 991, 1009, 1010], "random": [17, 95, 114, 116, 128, 129, 170, 171, 231, 240, 265, 267, 355, 375, 382, 398, 403, 404, 406, 945, 965, 972, 988, 993], "svd": [17, 95, 404], "central": 17, "score": [17, 85, 116, 121, 136, 146, 163, 177, 249, 258, 265, 266, 334, 390, 399, 403, 971, 976, 991, 1006], "biclust": [18, 19, 20, 165, 369, 396, 398], "spectral": [19, 20, 21, 66, 219, 396, 399, 973], "co": [19, 21, 396], "algorithm": [19, 20, 21, 38, 44, 49, 55, 63, 64, 65, 219, 227, 379, 384, 970, 972, 975, 977, 979, 980, 984, 992, 1009], "A": [20, 21, 47, 58, 63, 198, 314, 372, 379, 393, 403, 1005, 1008], "demo": [20, 21, 38, 47, 49, 55, 58, 63, 65], "gener": [20, 24, 34, 38, 47, 49, 55, 57, 63, 64, 66, 67, 78, 80, 82, 91, 92, 96, 97, 98, 117, 126, 143, 146, 150, 156, 157, 159, 165, 176, 177, 178, 182, 192, 198, 200, 233, 249, 256, 272, 286, 291, 298, 312, 319, 338, 355, 369, 373, 386, 398, 404, 406, 972, 986, 997, 1006], "sampl": [20, 38, 55, 63, 78, 96, 97, 143, 179, 211, 233, 260, 272, 291, 312, 338, 341, 367, 382, 386, 398, 399, 406, 972], "fit": [20, 26, 57, 96, 103, 117, 118, 121, 123, 124, 155, 177, 178, 179, 192, 195, 200, 204, 266, 286, 291, 308, 338, 355, 375, 385, 390, 406, 978, 982, 1002], "spectralbiclust": [20, 440], "calibr": [23, 24, 25, 26, 27, 123, 165, 198, 397, 398, 426, 427, 428, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "probabl": [24, 25, 26, 30, 132, 153, 397, 398, 406, 991], "classifi": [24, 25, 27, 31, 133, 181, 239, 256, 277, 311, 324, 328, 331, 344, 353, 397, 398, 406, 970, 979, 1009, 1011], "synthet": [24, 75, 177, 182, 256, 308, 378], "gaussian": [24, 25, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 243, 244, 245, 248, 249, 250, 301, 398, 409, 975, 978, 986, 988], "bay": [24, 25, 398, 978], "curv": [25, 27, 178, 233, 240, 250, 256, 261, 266, 268, 274, 397, 971], "summari": [25, 187, 345, 346, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "3": [26, 181, 1011, 1026, 1027, 1032, 1034], "class": [26, 37, 110, 112, 132, 181, 207, 212, 262, 266, 268, 314, 330, 333, 386, 398, 403, 406, 407, 975, 976, 979, 982, 990, 991, 1018, 1019], "compar": [26, 42, 44, 62, 78, 85, 116, 121, 129, 143, 174, 177, 184, 200, 205, 227, 233, 259, 267, 287, 296, 301, 307, 384], "comparison": [27, 31, 43, 64, 80, 104, 120, 142, 150, 219, 220, 233, 259, 270, 346, 399, 409, 972], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 58, 89, 137, 138, 220, 298, 319, 320, 370, 1008], "normal": [33, 174, 198, 301, 305, 398, 860, 875, 976, 986], "ledoit": [33, 79, 401], "wolf": [33, 79, 401], "oa": [33, 78, 79, 412, 464], "discrimin": [33, 34, 398, 970], "quadrat": [34, 409, 970], "covari": [34, 77, 78, 80, 81, 82, 165, 246, 398, 401, 412, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 970, 1026, 1030, 1031, 1032, 1034], "ellipsoid": [34, 245], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 262, 306, 313, 315, 319, 345, 359, 373, 374, 399, 403, 407, 1011], "evalu": [37, 58, 61, 81, 198, 237, 260, 263, 298, 307, 345, 385, 394, 396, 399, 403, 406, 965, 971, 976, 1011], "defin": [37, 47, 58, 67, 219, 237, 254, 256, 257, 346, 976], "list": [37, 999], "metric": [37, 40, 123, 263, 398, 399, 403, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 965, 973, 974, 976, 979, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "fix": [37, 377, 1018, 1021, 1022, 1023, 1024, 1025, 1031], "ground": [37, 177], "truth": [37, 177], "label": [37, 266, 319, 320, 321, 368, 369, 399, 403, 406, 976, 987, 989], "grow": 37, "number": [37, 60, 120, 146, 271, 359, 375, 965, 966, 975], "vari": [37, 295, 322, 399], "agglom": [39, 40, 52, 1010], "without": [39, 121, 287, 344], "differ": [40, 44, 62, 78, 159, 169, 301, 304, 307, 328, 375, 384, 390, 399, 972, 1009], "hierarch": [41, 47, 62, 67, 399, 1010], "dendrogram": 41, "birch": [42, 399, 431], "minibatchkmean": [42, 64, 95, 438], "bisect": [43, 399], "k": [43, 45, 48, 57, 58, 59, 61, 64, 67, 85, 306, 345, 399, 403, 976, 979, 986, 1009, 1010], "mean": [43, 45, 48, 57, 58, 59, 61, 63, 64, 117, 118, 163, 170, 345, 399, 976, 986, 1010], "regular": [43, 78, 125, 168, 191, 202, 203, 295, 339, 972, 980], "toi": [44, 62, 227, 370], "segment": [46, 66], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 259], "ward": [47, 67, 399, 1010], "an": [47, 59, 163, 179, 187, 237, 289, 311, 315, 384, 407, 965, 982, 1002, 1008, 1009], "color": 48, "quantiz": [48, 53, 1010], "dbscan": [49, 399, 410, 433], "onlin": [50, 205, 314, 315, 990], "dictionari": [50, 95, 98, 105, 404], "part": [50, 408], "agglomer": [51, 54, 993, 1010], "origin": [53, 100, 265, 289, 301], "encod": [53, 120, 307, 308, 986, 987], "strategi": [53, 257, 296, 304, 361, 398, 399, 976], "memori": [53, 359, 379, 381, 399], "footprint": 53, "v": [54, 67, 78, 79, 81, 86, 100, 146, 169, 170, 180, 190, 216, 262, 268, 272, 273, 349, 399, 966, 986, 1002], "univari": [54, 85, 143, 334, 408, 966], "select": [54, 60, 72, 103, 136, 141, 143, 146, 147, 165, 186, 187, 192, 249, 252, 334, 384, 390, 394, 398, 403, 408, 965, 972, 975, 1006, 1024], "hdbscan": [55, 399, 435], "scale": [55, 168, 219, 222, 306, 339, 361, 407, 879, 973, 982, 986, 993], "invari": [55, 262], "multi": [55, 110, 129, 169, 192, 207, 222, 236, 263, 266, 295, 352, 379, 398, 972, 973, 976, 980, 991, 992], "hyperparamet": [55, 155, 156, 260, 267, 606], "robust": [55, 80, 81, 177, 201, 204, 355, 398, 401, 965, 972], "min_cluster_s": 55, "min_sampl": 55, "dbscan_clust": 55, "induct": 56, "demonstr": [57, 263, 304, 319], "assumpt": 57, "possibl": [57, 378], "solut": 57, "final": [57, 150], "handwritten": [58, 220, 370], "our": [58, 254, 257, 373], "reduc": [58, 359], "initi": [59, 61, 247, 975], "silhouett": [60, 399], "kmean": [60, 64, 312, 436], "empir": [61, 81, 231, 401], "linkag": [62, 399], "method": [62, 74, 85, 108, 150, 165, 219, 221, 247, 276, 386, 398, 399, 406, 968, 975, 982, 983, 1010], "shift": [63, 399], "meanshift": [63, 437], "establish": [64, 174], "pariti": 64, "between": [64, 270], "optic": [65, 370, 399, 439], "four": 66, "circl": 66, "two": [66, 112, 184, 238, 259], "unstructur": 67, "we": 67, "ar": [67, 314, 384], "nearest": [67, 165, 279, 280, 281, 282, 287, 290, 291, 311, 398, 966, 979, 1009], "neighbor": [67, 165, 219, 279, 280, 281, 282, 287, 291, 306, 311, 398, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 966, 973, 979, 1009, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "10": [67, 1018], "pipelin": [69, 70, 72, 73, 130, 144, 165, 168, 229, 234, 239, 260, 307, 334, 375, 384, 385, 398, 400, 408, 847, 848, 849, 850, 993, 1007, 1011, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "composit": [69, 165, 398, 400, 965], "estim": [69, 77, 78, 79, 80, 81, 82, 113, 120, 122, 129, 156, 163, 165, 177, 201, 204, 229, 234, 236, 237, 248, 267, 283, 284, 292, 311, 312, 313, 316, 355, 375, 384, 385, 386, 395, 398, 400, 401, 403, 405, 406, 409, 965, 966, 970, 972, 975, 976, 991, 996, 1004, 1006, 1008, 1019, 1026, 1027, 1028], "column": [70, 71, 239], "transform": [70, 71, 72, 75, 85, 115, 128, 239, 313, 314, 315, 365, 384, 385, 400, 402, 403, 979, 986, 987, 988, 1010], "heterogen": [70, 400], "sourc": [70, 96, 371], "20": [70, 344, 368, 1011, 1026], "newsgroup": [70, 344, 368, 1011], "creat": [70, 101, 103, 228, 266, 308, 334, 384], "mix": 71, "type": [71, 244, 375, 386, 399, 1002], "dimension": [72, 219, 222, 239, 288, 306, 345, 970, 973, 979, 993, 1009], "reduct": [72, 219, 223, 239, 288, 306, 345, 970, 979, 993], "gridsearchcv": [72, 136, 263, 406, 785], "illustr": [72, 154, 159, 289, 409], "cach": [72, 281, 400], "within": 72, "chain": [73, 239, 277, 385, 400], "logist": [73, 181, 188, 189, 190, 191, 213, 214, 972, 1009], "concaten": 74, "multipl": [74, 239, 263, 355, 380, 403, 965, 966, 976, 1026, 1027], "effect": [75, 167, 224, 301, 306, 322, 349, 979], "target": [75, 157, 216, 307, 308, 384, 386, 400, 402, 977, 986, 987], "shrinkag": [78, 401, 406, 970, 1009], "ledoitwolf": [78, 462], "max": [78, 976], "likelihood": [78, 177, 178, 262, 976, 981], "approach": [78, 187, 259], "mahalanobi": [80, 979], "distanc": [80, 398, 979], "relev": [80, 182, 972], "minimum": [81, 401], "determin": [81, 182, 401, 972, 976], "spars": [82, 95, 105, 168, 182, 184, 213, 311, 344, 345, 382, 401, 404, 408, 986, 988, 990], "invers": [82, 401, 988], "decomposit": [84, 85, 94, 95, 113, 165, 369, 398, 402, 404, 411, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 1010, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "variabl": [85, 167, 168, 360, 384, 398, 1009], "canon": [85, 402], "symmetr": 85, "pl": 85, "scatter": 85, "multivari": [85, 966], "respons": [85, 387], "pls2": 85, "pls1": 85, "cca": [85, 471], "mode": [85, 359, 371], "b": 85, "deflat": 85, "compon": [86, 95, 101, 287, 288, 289, 404, 975, 979, 993, 1010], "partial": [86, 167, 169, 238, 983], "least": [86, 123, 187, 193, 196, 972], "squar": [86, 123, 159, 193, 196, 409, 968, 972, 974, 976], "The": [86, 89, 90, 167, 168, 198, 224, 231, 257, 266, 368, 377, 403, 407, 975, 976, 988, 1009, 1010], "one": [86, 120, 238, 972, 976], "power": [86, 198], "iri": [90, 102, 104, 119, 152, 207, 324, 328, 350, 370, 409, 1008], "randomli": [91, 92], "multilabel": [92, 235, 369, 382, 398, 976, 977, 1002], "prepar": [95, 109, 111, 174, 219, 268, 269, 306, 331, 377], "nmf": [95, 315, 404, 529], "independ": [95, 404, 1010], "fastica": [95, 96, 97, 411, 522], "minibatchsparsepca": [95, 404, 528], "center": [95, 986], "fa": [95, 103], "posit": [95, 314], "blind": 96, "separ": [96, 210, 332, 333], "ica": [96, 404, 1010], "point": [97, 289], "cloud": 97, "distort": 98, "displai": [98, 203, 228, 229, 239, 316, 381, 1015, 1034], "patch": [98, 407], "noisi": [98, 157], "them": [98, 372], "increment": [99, 361, 404], "kernelpca": [100, 524], "figur": 101, "probabilist": [103, 151, 404, 409], "lda": [104, 404, 970], "precomput": [105, 179, 311, 404], "rotat": 106, "pattern": 106, "ensembl": [108, 115, 119, 165, 315, 398, 406, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "discret": [109, 126, 158, 302, 303, 986], "versu": [109, 113, 212, 264, 324, 359], "adaboost": [109, 110, 111, 112, 406], "baselin": [109, 174, 198], "samm": 109, "r": 109, "decis": [110, 111, 119, 126, 131, 165, 232, 324, 348, 349, 350, 351, 352, 353, 384, 387, 398, 992], "tree": [110, 111, 115, 117, 118, 119, 128, 165, 170, 198, 311, 316, 348, 349, 350, 351, 352, 353, 384, 398, 406, 408, 896, 897, 898, 899, 900, 901, 902, 979, 984, 992, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "train": [111, 124, 126, 133, 146, 228, 233, 238, 240, 249, 272, 298, 307, 308, 313, 322, 331, 344, 349, 350, 353, 368, 403, 979, 989, 1002, 1009, 1011], "decisiontre": 111, "singl": [113, 130, 216, 228, 369, 399, 966], "bag": [113, 122, 344, 406, 407, 965, 1011], "bia": 113, "varianc": [113, 196, 408, 976, 986], "oob": 114, "error": [114, 123, 136, 177, 256, 272, 381, 389, 972, 976], "forest": [114, 116, 117, 118, 129, 170, 171, 240, 368, 406, 982], "histogram": [116, 312, 314, 316, 405, 406], "import": [117, 118, 124, 147, 170, 171, 232, 306, 311, 406, 984], "decreas": [117, 118, 170], "impur": [117, 118, 170, 349, 984], "permut": [117, 170, 171, 265, 311, 403, 984], "pixel": 118, "parallel": [118, 360, 371, 379, 399, 406, 942, 943, 965], "mdi": [118, 170], "surfac": [119, 232, 350], "categor": [120, 307, 313, 384, 406, 978, 986], "am": 120, "hous": [120, 368], "drop": 120, "hot": 120, "ordin": 120, "nativ": [120, 307, 311, 313], "limit": [120, 150, 359, 389, 393, 407], "split": [120, 313, 355, 403], "earli": [121, 206], "stop": [121, 206, 407, 990], "interv": 123, "quantil": [123, 200, 314, 315, 972], "confid": 123, "tune": [123, 257, 260, 313, 965, 1011], "hyper": [123, 257, 313, 398, 965], "preprocess": [124, 130, 165, 168, 169, 237, 239, 300, 346, 355, 384, 398, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 986, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "devianc": [124, 976], "isolationforest": [126, 552], "boundari": [126, 131, 324], "path": [126, 185, 191, 203, 353, 389], "length": [126, 389], "monoton": [127, 406], "constraint": [127, 316, 399, 406], "name": [127, 314, 384], "specifi": [127, 384, 965], "hash": [128, 382, 407], "total": [128, 349, 406], "output": [129, 236, 301, 316, 352, 992, 1009], "meta": [129, 313, 406], "combin": [130, 228], "predictor": 130, "stack": [130, 311, 406], "make": [130, 133, 163, 373, 377, 387], "measur": [130, 262, 399, 976], "votingclassifi": [131, 132, 406, 558], "calcul": 132, "individu": [133, 169, 313, 983], "vote": [133, 406], "tutori": [135, 165, 995, 1003, 1005, 1011], "exercis": [135, 136, 137, 138, 139, 165, 1006, 1009, 1011], "diabet": [136, 238, 370, 1009], "appli": 136, "line": [136, 153], "show": [136, 268], "std": [136, 177], "bonu": 136, "how": [136, 355, 373, 379, 384], "much": 136, "can": [136, 384], "you": [136, 384], "trust": 136, "alpha": [136, 349], "f": [142, 976], "mutual": [142, 399], "inform": [142, 163, 186, 187, 377, 399, 965, 972], "anova": [144, 334], "recurs": [145, 146, 408], "elimin": [145, 146, 408, 965], "sequenti": [147, 408], "coeffici": [147, 168, 177, 202, 203, 399, 976], "discuss": [147, 372], "process": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 168, 355, 387, 398, 409, 975, 1005], "machin": [149, 165, 167, 168, 169, 298, 326, 381, 398, 981, 991, 1002, 1009], "ridg": [150, 178, 180, 196, 202, 203, 233, 308, 398, 409, 661, 969, 972], "simpl": [150, 234, 284, 379, 1008], "gpc": [151, 152, 153, 154, 409], "iso": [153, 266], "xor": [154, 409], "gpr": [155, 156, 409], "mauna": [155, 409], "loa": [155, 409], "co2": [155, 409], "build": [155, 163, 371, 373, 381, 1011], "design": 155, "proper": 155, "extrapol": 155, "interpret": [155, 168, 237, 404, 406], "nois": [156, 157, 178, 409], "level": [156, 360, 399, 406, 409], "optimis": 156, "basic": [157, 216, 385, 401, 409], "introductori": 157, "free": 157, "sequenc": [158, 384], "similar": [158, 974, 976], "under": [158, 384, 1013, 1034], "posterior": 159, "cookbook": 159, "radial": [159, 409, 968, 1009], "ration": [159, 409], "quadradt": 159, "exp": [159, 409], "sine": [159, 250, 409], "dot": [159, 409], "product": [159, 216, 381, 384, 409, 610], "mat\u00e9rn": [159, 409], "miss": [161, 162, 163, 165, 311, 406, 966, 986, 992], "valu": [161, 162, 163, 165, 224, 234, 311, 373, 404, 406, 966, 976, 984, 986, 992], "imput": [161, 162, 163, 165, 311, 398, 616, 617, 618, 619, 966, 986, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "variant": 162, "iterativeimput": [162, 616, 966], "befor": [163, 377], "replac": 163, "0": [163, 311, 312, 313, 314, 992, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "knn": [163, 311], "iter": [163, 271, 403, 965], "releas": [165, 310, 311, 312, 313, 314, 315, 316, 377, 389, 1016, 1024], "highlight": [165, 310, 311, 312, 313, 314, 315, 316, 1018, 1021, 1022, 1025, 1026], "mixtur": [165, 243, 244, 245, 248, 249, 250, 398, 783, 784, 975, 1026, 1027, 1031, 1032], "inspect": [165, 166, 388, 398, 620, 621, 622, 623, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "approxim": [165, 173, 174, 232, 279, 313, 398, 401, 968], "manifold": [165, 218, 219, 220, 221, 369, 398, 677, 678, 679, 680, 681, 682, 683, 684, 685, 973, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "miscellan": [165, 226, 398, 1026, 1027, 1028, 1029, 1030, 1031, 1034], "multioutput": [165, 276, 398, 819, 820, 821, 822, 977, 1026, 1027, 1028, 1029, 1030, 1033, 1034], "neural": [165, 169, 294, 398, 980, 981], "network": [165, 169, 294, 398, 980, 981], "semi": [165, 318, 319, 323, 324, 398, 989], "supervis": [165, 318, 319, 323, 324, 398, 980, 989, 998, 1009], "work": [165, 343, 359, 372, 384, 1011], "failur": [167, 965], "infer": [167, 975], "causal": [167, 168], "simul": 167, "hourli": 167, "wage": [167, 168], "descript": 167, "incom": 167, "fulli": 167, "observ": [167, 1009, 1010], "lesson": [167, 168], "common": [168, 355, 386, 395, 407, 976], "pitfal": [168, 355], "matter": 168, "check": [168, 261, 311, 381, 395, 1026, 1027, 1028], "problem": [168, 404, 991, 992, 1002, 1007, 1009, 1010], "correl": [168, 171, 402, 976, 984], "numer": [168, 360, 375], "wrong": [168, 384], "depend": [169, 234, 238, 371, 983, 1018, 1031, 1032], "condit": [169, 313, 983], "expect": [169, 313, 975, 983], "preprocessor": 169, "1": [169, 195, 314, 315, 316, 384, 1011, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "wai": [169, 373, 384], "layer": [169, 295, 980], "perceptron": [169, 295, 657, 972, 980], "ic": [169, 983], "pdp": 169, "3d": 169, "represent": [169, 229, 312, 359, 407, 1010], "accuraci": [170, 232, 344, 349, 976], "": [170, 306, 308, 376, 384, 406, 976], "multicollinear": 171, "breast": [171, 370], "cancer": [171, 370], "handl": [171, 966], "scalabl": [174, 261, 312], "partit": 174, "bayesian": [177, 178, 244, 259, 398, 972, 975], "recov": 177, "weight": [177, 179, 211, 297, 312, 341, 390, 406, 407], "true": [177, 178], "margin": [177, 178, 210, 332, 336], "log": [177, 178, 976], "expans": 177, "sinusoid": 178, "cubic": 178, "l": 178, "elast": [179, 183, 972], "net": [179, 183, 972], "gram": [179, 991], "huberregressor": [180, 638], "strong": 180, "signal": [182, 404, 1010], "automat": [182, 385, 972], "ard": [182, 972], "elasticnet": [182, 312, 635], "dens": 184, "implement": [184, 384, 399, 407, 976, 979, 990, 991], "lar": [185, 639, 972], "criteria": [186, 384, 972, 992], "aic": 187, "bic": [187, 249], "criterion": [187, 313, 965, 990], "coordin": 187, "descent": [187, 206, 212, 972, 990], "angl": [187, 972], "penalti": [189, 209, 339], "sparsiti": [189, 195, 407, 1009], "multinomi": [190, 214, 972, 978], "One": [190, 212, 268, 314, 330, 403, 982, 990], "rest": [190, 268], "joint": 192, "task": [192, 398, 972, 996], "seri": [192, 403], "onli": [195, 215, 1029, 1031], "2": [195, 316, 1011, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "ordinari": [196, 972], "orthogon": [197, 972], "match": [197, 972], "pursuit": [197, 972], "poisson": [198, 216, 312, 313, 976], "loss": [198, 208, 312, 315, 406, 976], "french": 198, "motor": 198, "third": [198, 234, 389], "parti": [198, 234, 389], "liabil": 198, "claim": [198, 216], "constant": [198, 966], "rank": [198, 398, 976], "takeawai": 198, "interpol": 199, "quantileregressor": [200, 659], "linearregress": [200, 646], "ransac": [201, 972], "l2": [202, 339], "solver": [205, 404, 972], "stochast": [206, 212, 219, 296, 972, 973, 981, 990], "sgd": [207, 208, 209, 210, 211, 972, 990], "convex": 208, "maximum": [210, 332, 981], "hyperplan": [210, 332, 333], "multiclass": [213, 268, 311, 382, 397, 398, 816, 817, 818, 938, 939, 940, 976, 977, 1002, 1009, 1027, 1030, 1031, 1032], "20newgroup": 213, "mnist": [214, 297], "theil": [215, 972], "sen": [215, 972], "y": [215, 384, 402, 987, 989], "direct": 215, "x": 215, "tweedi": [216, 976], "insur": 216, "definit": [216, 298, 983, 1028], "frequenc": [216, 1011], "sever": [216, 221], "gamma": [216, 976], "pure": 216, "premium": 216, "tweedieregressor": [216, 669], "local": [219, 220, 285, 286, 973, 982], "isomap": [219, 220, 677, 973], "multidimension": 219, "t": [219, 224, 973], "techniqu": 220, "sphere": 221, "swiss": 223, "roll": [223, 375], "And": [223, 387], "hole": 223, "sne": [224, 973], "perplex": 224, "shape": [224, 1002], "anomali": 227, "object": [228, 254, 375, 384, 965, 976, 1008, 1015], "confusionmatrixdisplai": [228, 686], "roccurvedisplai": [228, 691], "precisionrecalldisplai": [228, 689], "compact": 229, "rich": [229, 312], "html": 229, "isoton": [230, 397, 398, 624, 625, 626, 967, 1026, 1027, 1028, 1030, 1032, 1033], "johnson": [231, 988], "lindenstrauss": [231, 988], "bound": 231, "theoret": [231, 972], "explicit": 232, "map": [232, 305, 986], "rbf": [232, 330, 331, 409, 611, 974, 991, 1009], "python": [232, 360, 379, 393, 991, 995, 996, 1024], "packag": [232, 996, 1030], "svr": [233, 338, 894, 991], "construct": [233, 400], "look": [233, 338], "metadata": [234, 344, 390], "rout": [234, 390], "router": 234, "consum": 234, "deprec": [234, 373, 398, 915, 1028], "default": [234, 286, 373], "chang": [234, 373, 387, 1000, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "complet": [236, 399], "advanc": [238, 390], "With": [238, 1011], "togeth": [238, 268, 1007, 1010], "grid": [239, 257, 259, 267, 270, 965, 1006, 1011], "search": [239, 257, 259, 267, 270, 385, 965, 1006, 1011], "over": 239, "roc": [240, 256, 268, 269, 311, 976], "api": [240, 241, 311, 314, 316, 360, 375, 380, 386, 390, 395, 398, 409, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028], "svc": [240, 339, 893, 991], "introduc": 241, "set_output": [241, 316, 375], "concentr": 244, "variat": [244, 975], "gmm": [246, 247], "densiti": [248, 283, 284, 292, 405, 922, 991], "best": [249, 374, 384], "confus": [253, 399, 976], "behavior": 254, "indic": 254, "mani": [254, 316, 360, 384], "cv": [254, 355], "tradeoff": [256, 976], "det": [256, 976], "custom": [257, 327, 407, 986], "refit": [257, 1002], "balanc": [258, 976], "statist": [259, 996, 1005, 1008], "frequentist": 259, "practic": [259, 355, 374, 378, 972, 973, 980, 990, 991, 992], "equival": 259, "all": [259, 268, 315, 389, 1007, 1033, 1034, 1035], "take": 259, "home": 259, "messag": 259, "ratio": [262, 976], "pre": [262, 355, 385], "post": [262, 349], "respect": 262, "preval": 262, "cross_val_scor": [263, 810], "nest": [264, 400, 1006], "see": [264, 400], "also": [264, 377, 400], "signific": 265, "precis": [266, 976], "recal": [266, 976], "In": 266, "binari": [266, 972, 976], "averag": [266, 268, 399, 406, 976], "micro": [266, 268], "each": [266, 271, 344, 965], "f1": 266, "receiv": [268, 269, 976], "oper": [268, 269, 372, 382, 409, 976], "characterist": [268, 269, 976], "specif": [268, 371, 375, 393, 965, 996, 997], "ovr": 268, "macro": 268, "ovo": 268, "success": [270, 271, 313, 965], "halv": [270, 271, 313, 965], "candid": [271, 965], "amount": [271, 965], "resourc": [271, 360, 373, 965, 995, 999], "underfit": 273, "overfit": 273, "tsne": [279, 681], "1d": 284, "novelti": [285, 982, 991], "lof": [285, 286], "neighborhood": [287, 288, 289, 979], "centroid": [290, 979], "mlpclassifi": [296, 845], "mlp": 297, "restrict": [298, 981], "boltzmann": [298, 981], "scaler": 301, "standardscal": [301, 868], "minmaxscal": [301, 858], "maxabsscal": [301, 857], "robustscal": [301, 866], "powertransform": [301, 864], "quantiletransform": [301, 865], "uniform": [301, 986], "kbinsdiscret": [302, 304, 853], "continu": [302, 373], "rescal": 306, "other": [307, 367, 384, 996, 1018], "intern": 308, "22": [311, 1028], "new": [311, 313, 314, 316, 373, 384, 995, 1018, 1019, 1021, 1022, 1023, 1024, 1025], "prune": [311, 349, 992], "datafram": [311, 384], "compat": [311, 373, 375, 395], "auc": [311, 695], "now": [311, 314, 1028], "23": [312, 1029], "stabil": 312, "improv": [312, 313, 314, 315, 316, 372, 373, 1021, 1022], "24": [313, 1030], "histgradientboost": 313, "self": [313, 322, 989], "sequentialfeatureselector": [313, 591], "polynomialcountsketch": [313, 629], "decisiontreeregressor": [313, 897], "keyword": [314, 1029, 1031], "argument": [314, 375, 1029, 1031], "more": [314, 368, 384, 393, 980], "flexibl": [314, 966], "stabl": 314, "histgradientboostingregressor": [315, 551], "get_feature_names_out": 315, "avail": [315, 965, 1014, 1015], "group": [315, 403, 1000, 1010], "infrequ": [315, 986], "onehotencod": [315, 861], "minibatchnmf": [315, 527], "version": [315, 367, 371, 377, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "bisectingkmean": [315, 432], "divid": 315, "panda": [316, 378, 384], "enhanc": [316, 387, 996, 1021, 1022, 1023, 1024, 1025], "faster": [316, 406], "parser": [316, 367], "fetch_openml": [316, 485], "experiment": [316, 377, 395, 398, 568, 569, 1034], "arrai": [316, 382, 395, 1002], "lineardiscriminantanalysi": [316, 538], "effici": [316, 382], "most": 319, "uncertain": 319, "activ": 320, "threshold": 322, "linearsvc": [329, 888], "unbalanc": [333, 991], "some": 334, "plai": 334, "percentil": 334, "case": [339, 972, 976], "tie": 340, "break": 340, "word": [344, 407, 1011], "strip": 344, "quantifi": [345, 976], "qualiti": [345, 976], "tfidfvector": [345, 346, 580], "lsa": 345, "top": [345, 976], "term": [345, 386, 407], "per": 345, "hashingvector": [345, 407, 578], "featurehash": [346, 571], "dictvector": [346, 570], "special": 346, "purpos": [346, 997], "cost": [349, 992], "leav": [349, 403, 972], "understand": 353, "recommend": [355, 368, 996], "inconsist": 355, "leakag": 355, "dure": 355, "avoid": [355, 400], "control": [355, 406, 980], "none": 355, "randomst": 355, "instanc": [355, 361], "repeat": [355, 400, 403], "call": [355, 372], "splitter": [355, 398], "subtleti": 355, "get": [355, 384, 385], "reproduc": [355, 378], "across": 355, "execut": [355, 384], "configur": [359, 360], "overhead": 359, "input": [359, 375, 395, 399, 986], "tip": [359, 374, 381, 965, 973, 980, 990, 991, 992], "trick": [359, 379, 381, 407], "algebra": [359, 382], "librari": [359, 360], "reshap": [359, 1008], "link": [359, 367, 976], "manag": [360, 389], "higher": 360, "joblib": [360, 379], "lower": 360, "openmp": [360, 374], "numpi": [360, 378], "scipi": 360, "oversubscript": 360, "spawn": 360, "too": 360, "thread": 360, "switch": 360, "environ": 360, "sklearn_assume_finit": 360, "sklearn_working_memori": 360, "sklearn_se": 360, "sklearn_tests_global_random_se": 360, "sklearn_skip_network_test": 360, "sklearn_run_float32_test": 360, "sklearn_enable_debug_cython_direct": 360, "sklearn_build_enable_debug_symbol": 360, "sklearn_pairwise_dist_chunk_s": 360, "computation": 361, "bigger": 361, "stream": 361, "note": [361, 400, 403, 972], "tabl": [362, 384], "Of": 362, "content": [362, 384, 1002], "util": [366, 378, 382, 398, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1011, 1015, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "svmlight": 367, "format": [367, 378, 384, 393, 977], "org": [367, 377, 1000], "repositori": 367, "arff": 367, "extern": [367, 995, 1002, 1018, 1027], "olivetti": 368, "usag": [368, 379, 384, 390, 395, 397, 400, 406, 407, 972], "convert": 368, "filter": 368, "realist": 368, "consider": [368, 972], "wild": 368, "covertyp": 368, "rcv1": 368, "kddcup": 368, "99": 368, "california": 368, "plant": 370, "linnerrud": 370, "wine": 370, "wisconsin": 370, "diagnost": 370, "instal": [371, 389], "nightli": 371, "runtim": 371, "tag": [371, 373, 375], "edit": 371, "platform": [371, 381, 389], "instruct": 371, "window": [371, 389], "maco": 371, "compil": [371, 379], "conda": 371, "forg": 371, "homebrew": 371, "linux": [371, 384, 389], "system": 371, "freebsd": 371, "altern": [371, 965], "bug": [372, 373, 377, 999, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "triag": 372, "issu": [372, 373], "curat": 372, "fruit": 372, "pr": [372, 377], "help": [372, 373, 384], "review": [372, 373, 381, 1011], "member": 372, "close": 372, "tough": 372, "typic": 372, "workflow": [372, 373], "contribut": [373, 384], "submit": 373, "report": [373, 378, 976], "request": [373, 377, 381, 384], "good": [373, 378], "video": [373, 995], "git": 373, "pull": [373, 377, 381, 384], "checklist": [373, 377], "integr": 373, "ci": 373, "stall": 373, "unclaim": 373, "easi": 373, "want": 373, "github": 373, "action": 373, "coverag": [373, 381, 976], "write": 373, "matplotlib": 373, "monitor": 373, "tracker": [373, 999], "maintain": [373, 377, 387, 393], "backward": 373, "guidelin": [373, 375], "read": 373, "exist": 373, "cython": [374, 379, 381], "convent": [374, 1002], "knowledg": 374, "eas": 374, "instanti": 375, "attribut": [375, 386, 965], "option": 375, "univers": 375, "your": [375, 378, 976], "own": [375, 384, 976], "templat": 375, "baseestim": [375, 413], "mixin": 375, "get_param": 375, "set_param": 375, "init": 375, "clone": [375, 423], "assert": 375, "guid": [376, 1013], "major": [377, 406, 1026, 1027], "minor": 377, "known": [377, 1026, 1027], "merg": 377, "web": 377, "site": 377, "craft": 378, "minim": [378, 992, 1031, 1032], "provid": 378, "fail": 378, "comment": 378, "boil": 378, "down": 378, "script": 378, "someth": 378, "small": 378, "do": [378, 384], "NOT": 378, "unless": 378, "i": [378, 384, 403, 1000], "extrem": [378, 406], "necessari": 378, "markdown": 378, "make_regress": [378, 513], "make_classif": [378, 504], "make_blob": [378, 501], "optim": [379, 398, 965, 973], "c": 379, "profil": 379, "extens": [379, 389], "yep": 379, "gperftool": 379, "debugg": 379, "gdb": 379, "gprof": 379, "valgrind": [379, 381], "callgrind": 379, "kcachegrind": 379, "warm": 379, "restart": 379, "overview": [380, 399, 982], "ax": 380, "saniti": 381, "preserv": 381, "fold": [381, 403], "unfold": 381, "outdat": 381, "diff": 381, "remot": 381, "track": 381, "branch": 381, "pytest": 381, "alias": 381, "flag": 381, "standard": [381, 986], "repli": 381, "debug": 381, "arm64": 381, "x86_64": 381, "tool": [382, 384], "matric": [382, 986], "warn": [382, 398], "except": [382, 398, 560, 561, 562, 563, 564, 565, 566, 567, 1030, 1034], "dispatch": 383, "frequent": 384, "ask": 384, "question": [384, 999], "what": 384, "lot": 384, "peopl": [384, 1018, 1019, 1020, 1021], "pronounc": 384, "why": [384, 406], "pypi": 384, "deep": 384, "reinforc": 384, "Will": 384, "add": 384, "graphic": [384, 981], "did": 384, "remov": [384, 408, 986, 1018], "hmm": 384, "gpu": 384, "need": 384, "doe": 384, "directli": 384, "plan": 384, "so": 384, "my": 384, "ani": 384, "attent": 384, "inclus": 384, "includ": 384, "should": 384, "save": 384, "export": 384, "deploi": 384, "bunch": [384, 903], "usabl": 384, "deal": 384, "string": 384, "sometim": 384, "crash": 384, "freez": 384, "n_job": 384, "osx": [384, 389], "job": 384, "than": 384, "random_st": 384, "entir": 384, "start": 385, "processor": 385, "next": 385, "glossari": 386, "element": 386, "concept": [386, 972], "properti": 386, "role": 387, "technic": 387, "committe": 387, "propos": 387, "slep": 387, "latest": 389, "appl": 389, "silicon": 389, "m1": 389, "hardwar": 389, "alpin": 389, "arch": 389, "debian": 389, "ubuntu": 389, "fedora": 389, "netbsd": 389, "macport": 389, "mac": 389, "anaconda": 389, "enthought": 389, "deploy": 389, "intel": 389, "winpython": 389, "troubleshoot": 389, "caus": 389, "unweight": 390, "interfac": [390, 398], "persist": 393, "serial": 393, "secur": 393, "skop": 393, "interoper": [393, 996], "pytorch": 395, "mathemat": [396, 399, 406, 968, 970, 972, 979, 980, 983, 990, 991, 992], "formul": [396, 399, 406, 970, 972, 979, 980, 990, 991, 992], "sigmoid": [397, 974], "sklearn": [398, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "compos": [398, 453, 454, 455, 456, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "cross_decomposit": [398, 471, 472, 473, 474, 1028, 1030, 1032], "loader": 398, "discriminant_analysi": [398, 538, 539, 1026, 1027, 1030, 1032, 1033, 1034], "dummi": [398, 540, 541, 976, 1026, 1027, 1028, 1031, 1032], "feature_extract": [398, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "feature_select": [398, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "gaussian_process": [398, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "kernel_approxim": [398, 627, 628, 629, 630, 631, 1028, 1030, 1031, 1032, 1033], "kernel_ridg": [398, 632], "linear_model": [398, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "classic": [398, 975], "glm": 398, "model_select": [398, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "naive_bay": [398, 823, 824, 825, 826, 827, 1026, 1028, 1029, 1030, 1031, 1033, 1034], "neural_network": [398, 844, 845, 846, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "random_project": [398, 880, 881, 882, 1032], "semi_supervis": [398, 883, 884, 885, 1028, 1029, 1030, 1034], "recent": 398, "low": [399, 406, 408], "mini": [399, 404], "batch": [399, 404], "assign": 399, "featureagglomer": [399, 434], "hierarchi": 399, "ad": 399, "connect": [399, 407, 1010], "consumpt": 399, "larg": [399, 407], "size": [399, 406], "reachabl": 399, "rand": 399, "index": [399, 931], "advantag": 399, "drawback": 399, "homogen": 399, "fowlk": 399, "mallow": 399, "calinski": 399, "harabasz": 399, "davi": 399, "bouldin": 399, "conting": 399, "pair": 399, "access": 400, "featureunion": [400, 847], "columntransform": [400, 453], "shrunk": 401, "oracl": 401, "plscanon": [402, 472], "plssvd": [402, 474], "plsregress": [402, 473], "held": 403, "cross_valid": [403, 811], "obtain": 403, "d": [403, 979], "loo": 403, "p": [403, 1000], "lpo": 403, "shuffl": [403, 950], "stratif": 403, "stratifi": 403, "stratifiedgroupkfold": [403, 803], "predefin": [403, 976], "decompos": 404, "exact": 404, "sparsepca": [404, 532], "kpca": 404, "choic": [404, 975, 979], "truncat": 404, "semant": 404, "nnmf": 404, "frobeniu": 404, "norm": 404, "beta": 404, "diverg": 404, "addit": [406, 968], "weak": 406, "learner": 406, "rate": 406, "subsampl": 406, "hard": 406, "soft": 406, "dict": 407, "detail": [407, 968, 972, 990, 991], "tf": 407, "idf": 407, "decod": 407, "applic": [407, 1010], "corpu": 407, "selectfrommodel": [408, 586], "recoveri": 408, "biclustermixin": 414, "classnameprefixfeaturesoutmixin": 415, "classifiermixin": 416, "clustermixin": 417, "densitymixin": 418, "metaestimatormixin": 419, "onetoonefeaturemixin": 420, "regressormixin": 421, "transformermixin": 422, "is_classifi": 424, "is_regressor": 425, "calibratedclassifiercv": 426, "calibrationdisplai": 427, "from_estim": [427, 620, 621, 686, 687, 689, 690, 691, 791, 807], "calibration_curv": 428, "affinitypropag": 429, "agglomerativeclust": 430, "spectralclust": 441, "spectralcoclust": 442, "affinity_propag": 443, "cluster_optics_dbscan": 444, "cluster_optics_xi": 445, "compute_optics_graph": 446, "estimate_bandwidth": 447, "k_mean": 448, "kmeans_plusplu": 449, "mean_shift": 450, "spectral_clust": 451, "ward_tre": 452, "transformedtargetregressor": 454, "make_column_selector": 455, "make_column_transform": 456, "config_context": 457, "ellipticenvelop": 458, "empiricalcovari": 459, "graphicallasso": 460, "graphicallassocv": 461, "mincovdet": 463, "shrunkcovari": 465, "empirical_covari": 466, "graphical_lasso": 467, "ledoit_wolf": 468, "ledoit_wolf_shrinkag": 469, "shrunk_covari": 470, "clear_data_hom": 475, "dump_svmlight_fil": 476, "fetch_20newsgroup": 477, "fetch_20newsgroups_vector": 478, "fetch_california_h": 479, "fetch_covtyp": 480, "fetch_kddcup99": 481, "fetch_lfw_pair": 482, "fetch_lfw_peopl": 483, "fetch_olivetti_fac": 484, "fetch_rcv1": 486, "fetch_species_distribut": 487, "get_data_hom": 488, "load_breast_canc": 489, "load_diabet": 490, "load_digit": 491, "load_fil": 492, "load_iri": 493, "load_linnerud": 494, "load_sample_imag": [495, 496], "load_svmlight_fil": [497, 498], "load_win": 499, "make_biclust": 500, "make_checkerboard": 502, "make_circl": 503, "make_friedman1": 505, "make_friedman2": 506, "make_friedman3": 507, "make_gaussian_quantil": 508, "make_hastie_10_2": 509, "make_low_rank_matrix": 510, "make_moon": 511, "make_multilabel_classif": 512, "make_s_curv": 514, "make_sparse_coded_sign": 515, "make_sparse_spd_matrix": 516, "make_sparse_uncorrel": 517, "make_spd_matrix": 518, "make_swiss_rol": 519, "dictionarylearn": 520, "factoranalysi": 521, "incrementalpca": 523, "latentdirichletalloc": 525, "minibatchdictionarylearn": 526, "sparsecod": 531, "truncatedsvd": 533, "dict_learn": 534, "dict_learning_onlin": 535, "non_negative_factor": 536, "sparse_encod": 537, "quadraticdiscriminantanalysi": 539, "dummyclassifi": 540, "dummyregressor": 541, "adaboostclassifi": 542, "adaboostregressor": 543, "baggingclassifi": 544, "baggingregressor": 545, "extratreesclassifi": 546, "extratreesregressor": 547, "gradientboostingclassifi": 548, "gradientboostingregressor": 549, "histgradientboostingclassifi": 550, "randomforestclassifi": 553, "randomforestregressor": 554, "randomtreesembed": 555, "stackingclassifi": 556, "stackingregressor": 557, "votingregressor": 559, "convergencewarn": 560, "dataconversionwarn": 561, "datadimensionalitywarn": 562, "efficiencywarn": 563, "fitfailedwarn": 564, "inconsistentversionwarn": 565, "notfittederror": 566, "undefinedmetricwarn": 567, "enable_halving_search_cv": 568, "enable_iterative_imput": 569, "patchextractor": 572, "extract_patches_2d": 573, "grid_to_graph": 574, "img_to_graph": 575, "reconstruct_from_patches_2d": 576, "countvector": 577, "tfidftransform": 579, "genericunivariateselect": 581, "rfe": 582, "rfecv": 583, "selectfdr": 584, "selectfpr": 585, "selectfw": 587, "selectkbest": 588, "selectpercentil": 589, "selectormixin": 590, "variancethreshold": 592, "chi2": 593, "f_classif": 594, "f_regress": 595, "mutual_info_classif": 596, "mutual_info_regress": 597, "r_regress": 598, "gaussianprocessclassifi": 599, "gaussianprocessregressor": 600, "compoundkernel": 601, "constantkernel": 602, "dotproduct": 603, "expsinesquar": 604, "exponenti": 605, "matern": 608, "pairwisekernel": 609, "rationalquadrat": 612, "sum": 613, "whitekernel": 614, "get_config": 615, "knnimput": 617, "missingind": 618, "simpleimput": 619, "decisionboundarydisplai": 620, "partialdependencedisplai": 621, "partial_depend": 622, "permutation_import": 623, "isotonicregress": 624, "check_increas": 625, "isotonic_regress": 626, "additivechi2sampl": 627, "nystroem": [628, 968], "rbfsampler": 630, "skewedchi2sampl": 631, "kernelridg": 632, "ardregress": 633, "bayesianridg": 634, "elasticnetcv": 636, "gammaregressor": 637, "larscv": 640, "lassocv": 642, "lassolar": 643, "lassolarscv": 644, "lassolars": 645, "logisticregress": 647, "logisticregressioncv": 648, "multitaskelasticnet": 649, "multitaskelasticnetcv": 650, "multitasklasso": 651, "multitasklassocv": 652, "orthogonalmatchingpursuit": 653, "orthogonalmatchingpursuitcv": 654, "passiveaggressiveclassifi": 655, "passiveaggressiveregressor": 656, "poissonregressor": 658, "ransacregressor": 660, "ridgecv": 662, "ridgeclassifi": 663, "ridgeclassifiercv": 664, "sgdclassifi": 665, "sgdoneclasssvm": 666, "sgdregressor": 667, "theilsenregressor": 668, "enet_path": 670, "lars_path": 671, "lars_path_gram": 672, "lasso_path": 673, "orthogonal_mp": 674, "orthogonal_mp_gram": 675, "ridge_regress": 676, "locallylinearembed": 678, "md": [679, 973], "spectralembed": 680, "locally_linear_embed": 682, "smacof": 683, "spectral_embed": 684, "trustworthi": 685, "from_predict": [686, 689, 690, 691], "detcurvedisplai": 687, "distancemetr": 688, "predictionerrordisplai": 690, "accuracy_scor": 692, "adjusted_mutual_info_scor": 693, "adjusted_rand_scor": 694, "average_precision_scor": 696, "balanced_accuracy_scor": 697, "brier_score_loss": 698, "calinski_harabasz_scor": 699, "check_scor": 700, "class_likelihood_ratio": 701, "classification_report": 702, "contingency_matrix": 703, "pair_confusion_matrix": 704, "cohen_kappa_scor": 705, "completeness_scor": 706, "confusion_matrix": 707, "consensus_scor": 708, "coverage_error": 709, "d2_absolute_error_scor": 710, "d2_pinball_scor": 711, "d2_tweedie_scor": 712, "davies_bouldin_scor": 713, "dcg_score": 714, "det_curv": 715, "explained_variance_scor": 716, "f1_score": 717, "fbeta_scor": 718, "fowlkes_mallows_scor": 719, "get_scor": 720, "get_scorer_nam": 721, "hamming_loss": 722, "hinge_loss": 723, "homogeneity_completeness_v_measur": 724, "homogeneity_scor": 725, "jaccard_scor": 726, "label_ranking_average_precision_scor": 727, "label_ranking_loss": 728, "log_loss": 729, "make_scor": 730, "matthews_corrcoef": 731, "max_error": 732, "mean_absolute_error": 733, "mean_absolute_percentage_error": 734, "mean_gamma_devi": 735, "mean_pinball_loss": 736, "mean_poisson_devi": 737, "mean_squared_error": 738, "mean_squared_log_error": 739, "mean_tweedie_devi": 740, "median_absolute_error": 741, "multilabel_confusion_matrix": 742, "mutual_info_scor": 743, "ndcg_score": 744, "normalized_mutual_info_scor": 745, "additive_chi2_kernel": 746, "chi2_kernel": 747, "cosine_dist": 748, "cosine_similar": 749, "distance_metr": 750, "euclidean_dist": 751, "haversine_dist": 752, "kernel_metr": 753, "laplacian_kernel": 754, "linear_kernel": 755, "manhattan_dist": 756, "nan_euclidean_dist": 757, "paired_cosine_dist": 758, "paired_dist": 759, "paired_euclidean_dist": 760, "paired_manhattan_dist": 761, "pairwise_kernel": 762, "polynomial_kernel": 763, "rbf_kernel": 764, "sigmoid_kernel": 765, "pairwise_dist": 766, "pairwise_distances_argmin": 767, "pairwise_distances_argmin_min": 768, "pairwise_distances_chunk": 769, "precision_recall_curv": 770, "precision_recall_fscore_support": 771, "precision_scor": 772, "r2_score": 773, "rand_scor": 774, "recall_scor": 775, "roc_auc_scor": 776, "roc_curv": 777, "silhouette_sampl": 778, "silhouette_scor": 779, "top_k_accuracy_scor": 780, "v_measure_scor": 781, "zero_one_loss": 782, "bayesiangaussianmixtur": [783, 975], "gaussianmixtur": [784, 975], "groupkfold": 786, "groupshufflesplit": 787, "halvinggridsearchcv": 788, "halvingrandomsearchcv": 789, "kfold": 790, "learningcurvedisplai": 791, "leaveonegroupout": 792, "leaveoneout": 793, "leavepgroupsout": 794, "leavepout": 795, "parametergrid": 796, "parametersampl": 797, "predefinedsplit": 798, "randomizedsearchcv": 799, "repeatedkfold": 800, "repeatedstratifiedkfold": 801, "shufflesplit": 802, "stratifiedkfold": 804, "stratifiedshufflesplit": 805, "timeseriessplit": 806, "validationcurvedisplai": 807, "check_cv": 808, "cross_val_predict": 809, "learning_curv": 812, "permutation_test_scor": 813, "train_test_split": 814, "validation_curv": 815, "onevsoneclassifi": [816, 977], "onevsrestclassifi": [817, 977], "outputcodeclassifi": [818, 977], "classifierchain": [819, 977], "multioutputclassifi": [820, 977], "multioutputregressor": [821, 977], "regressorchain": [822, 977], "bernoullinb": 823, "categoricalnb": 824, "complementnb": 825, "gaussiannb": 826, "multinomialnb": 827, "balltre": [828, 979], "kdtree": [829, 979], "kneighborsclassifi": 830, "kneighborsregressor": 831, "kneighborstransform": 832, "kerneldens": 833, "localoutlierfactor": 834, "nearestcentroid": 835, "nearestneighbor": 836, "neighborhoodcomponentsanalysi": 837, "radiusneighborsclassifi": 838, "radiusneighborsregressor": 839, "radiusneighborstransform": 840, "kneighbors_graph": 841, "radius_neighbors_graph": 842, "sort_graph_by_row_valu": 843, "bernoullirbm": 844, "mlpregressor": 846, "make_pipelin": 849, "make_union": 850, "binar": [851, 871, 986, 987], "functiontransform": 852, "kernelcenter": 854, "labelbinar": [855, 987], "labelencod": 856, "multilabelbinar": [859, 987], "ordinalencod": 862, "polynomialfeatur": 863, "splinetransform": 867, "targetencod": 869, "add_dummy_featur": 870, "label_binar": 872, "maxabs_scal": 873, "minmax_scal": 874, "power_transform": 876, "quantile_transform": 877, "robust_scal": 878, "gaussianrandomproject": 880, "sparserandomproject": 881, "johnson_lindenstrauss_min_dim": 882, "labelpropag": 883, "labelspread": 884, "selftrainingclassifi": 885, "set_config": 886, "show_vers": 887, "linearsvr": 889, "nusvc": 890, "nusvr": 891, "oneclasssvm": 892, "l1_min_c": 895, "decisiontreeclassifi": 896, "extratreeclassifi": 898, "extratreeregressor": 899, "export_graphviz": 900, "export_text": 901, "plot_tre": 902, "_safe_index": 904, "arrayfunc": 905, "min_po": 905, "as_float_arrai": 906, "assert_all_finit": 907, "check_x_i": 908, "check_arrai": 909, "check_consistent_length": 910, "check_random_st": 911, "check_scalar": 912, "class_weight": [913, 914], "compute_class_weight": 913, "compute_sample_weight": 914, "discoveri": [916, 917, 918], "all_displai": 916, "all_estim": 917, "all_funct": 918, "estimator_check": [919, 920], "check_estim": 919, "parametrize_with_check": 920, "estimator_html_repr": 921, "extmath": [922, 923, 924, 925, 926, 927], "fast_logdet": 923, "randomized_range_find": 924, "randomized_svd": 925, "safe_sparse_dot": 926, "weighted_mod": 927, "gen_batch": 928, "gen_even_slic": 929, "single_source_shortest_path_length": 930, "metadata_rout": [932, 933, 934, 935, 936], "metadatarequest": 932, "metadatarout": 933, "methodmap": 934, "get_routing_for_object": 935, "process_rout": 936, "metaestim": 937, "available_if": 937, "is_multilabel": 938, "type_of_target": 939, "unique_label": 940, "murmurhash3_32": 941, "delai": 943, "parallel_backend": 944, "sample_without_replac": 945, "register_parallel_backend": 946, "resampl": 947, "safe_mask": 948, "safe_sqr": 949, "sparsefunc": [951, 952, 953, 954, 955, 956, 957, 1027], "incr_mean_variance_axi": 951, "inplace_column_scal": 952, "inplace_csr_column_scal": 953, "inplace_row_scal": 954, "inplace_swap_column": 955, "inplace_swap_row": 956, "mean_variance_axi": 957, "sparsefuncs_fast": [958, 959], "inplace_csr_row_normalize_l1": 958, "inplace_csr_row_normalize_l2": 959, "check_is_fit": 960, "check_memori": 961, "check_symmetr": 962, "column_or_1d": 963, "has_fit_paramet": 964, "exhaust": 965, "min_resourc": 965, "aggress": [965, 972], "analyz": 965, "cv_results_": 965, "brute": [965, 979], "forc": [965, 979], "keep": 966, "mark": 966, "nan": 966, "chi": [968, 974], "skew": 968, "tensor": 968, "sketch": 968, "qda": 970, "omp": 972, "liblinear": 972, "passiv": 972, "scenario": 972, "trade": 972, "off": 972, "which": 972, "consensu": 972, "median": [972, 976], "huber": 972, "extend": 972, "introduct": [973, 1002], "modifi": 973, "hessian": 973, "eigenmap": 973, "tangent": 973, "align": 973, "nonmetr": 973, "barn": 973, "hut": 973, "cosin": 974, "laplacian": 974, "pro": 975, "con": 975, "maxim": 975, "rule": 976, "cohen": 976, "kappa": 976, "ham": 976, "jaccard": 976, "hing": 976, "matthew": 976, "zero": 976, "brier": 976, "discount": 976, "cumul": 976, "gain": 976, "r\u00b2": 976, "absolut": 976, "logarithm": 976, "percentag": 976, "explain": 976, "pinbal": 976, "d\u00b2": 976, "complement": 978, "bernoulli": [978, 981], "unsupervis": [979, 981, 993, 1010, 1012], "find": 979, "ball": 979, "leaf_siz": 979, "shrunken": 979, "warm_start": 980, "parametr": 981, "up": 982, "ellipt": 982, "envelop": 982, "isol": 982, "outlin": 984, "mislead": 984, "strongli": 984, "rang": 986, "whiten": 986, "bin": 986, "lemma": 988, "unlabel": 989, "entri": 989, "id3": 992, "c4": 992, "5": [992, 1018], "c5": 992, "cart": 992, "welcom": 994, "talk": 995, "scientif": [995, 1005], "framework": 996, "domain": 996, "translat": 996, "roadmap": 997, "thi": 997, "statement": 997, "2018": 997, "architectur": 997, "goal": 997, "subpackag": 997, "mail": 999, "user": [999, 1013], "gitter": 999, "who": 1000, "j": 1000, "morgan": 1000, "spotifi": 1000, "inria": 1000, "betawork": 1000, "hug": 1000, "evernot": 1000, "t\u00e9l\u00e9com": 1000, "paristech": 1000, "book": 1000, "com": 1000, "aweb": 1000, "yhat": 1000, "rangespan": 1000, "birchbox": 1000, "bestofmedia": 1000, "phimeca": 1000, "howaboutw": 1000, "peerindex": 1000, "datarobot": 1000, "okcupid": 1000, "love": 1000, "publica": 1000, "machinali": 1000, "solido": 1000, "infonea": 1000, "dataiku": 1000, "otto": 1000, "zopa": 1000, "mar": 1000, "bnp": 1000, "pariba": 1000, "cardif": 1000, "section": 1002, "cast": 1002, "updat": [1002, 1028], "right": 1004, "put": 1007, "open": 1007, "ship": 1008, "would": 1008, "high": 1009, "solv": [1009, 1010], "vocabulari": 1009, "curs": 1009, "iris": 1009, "same": 1009, "seek": 1010, "constrain": 1010, "inverse_transform": 1010, "setup": 1011, "token": 1011, "occurr": 1011, "languag": 1011, "identif": 1011, "sentiment": 1011, "movi": 1011, "cli": 1011, "where": 1011, "here": 1011, "12": 1018, "changelog": [1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "11": 1018, "9": 1018, "8": 1018, "7": 1018, "6": [1018, 1024], "modul": [1018, 1026, 1027, 1033, 1034, 1035], "misc": 1018, "4": [1018, 1026, 1035], "earlier": 1018, "13": 1019, "14": 1020, "15": 1021, "16": 1022, "17": 1023, "18": 1024, "last": 1024, "19": 1025, "21": 1027, "legend": [1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "post1": 1028, "websit": 1028, "clear": 1028, "public": 1028, "futurewarn": 1028, "enforc": [1029, 1031]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1018, "authors"], [1018, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [387, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [165, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [109, "concluding-remarks"], [223, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [81, "references"], [113, "references"], [174, "references"], [182, "references"], [186, null], [259, null], [292, "references"], [368, null], [368, null], [368, null], [370, null], [370, null], [370, null], [370, null], [370, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [407, null], [409, "references"], [966, "references"], [966, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [983, null], [986, null], [986, null], [989, null], [989, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [124, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [187, "conclusion"], [308, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [78, "plot-results"], [96, "plot-results"], [97, "plot-results"], [116, "plot-results"], [286, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [359, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [331, "visualization"], [398, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [68, "computation-times"], [76, "computation-times"], [83, "computation-times"], [87, "computation-times"], [93, "computation-times"], [107, "computation-times"], [134, "computation-times"], [140, "computation-times"], [148, "computation-times"], [160, "computation-times"], [164, "computation-times"], [172, "computation-times"], [175, "computation-times"], [217, "computation-times"], [225, "computation-times"], [242, "computation-times"], [251, "computation-times"], [275, "computation-times"], [278, "computation-times"], [293, "computation-times"], [299, "computation-times"], [309, "computation-times"], [317, "computation-times"], [325, "computation-times"], [342, "computation-times"], [347, "computation-times"], [354, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [165, "biclustering"], [369, "biclustering"], [396, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[20, "generate-sample-data"], [38, "generate-sample-data"], [55, "generate-sample-data"], [63, "generate-sample-data"], [78, "generate-sample-data"], [96, "generate-sample-data"], [97, "generate-sample-data"], [143, "generate-sample-data"], [233, "generate-sample-data"], [272, "generate-sample-data"], [291, "generate-sample-data"], [338, "generate-sample-data"]], "Fitting SpectralBiclustering": [[20, "fitting-spectralbiclustering"]], "Plotting results": [[20, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [165, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [177, "generate-synthetic-dataset"], [177, "id1"], [182, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [187, "dataset"], [265, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [397, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [978, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [346, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [158, "classification"], [165, "classification"], [406, "classification"], [406, "id18"], [972, "classification"], [979, "id4"], [980, "classification"], [990, "classification"], [991, "classification"], [992, "classification"], [1009, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"]], "Clustering": [[36, "clustering"], [165, "clustering"], [399, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [63, "plot-result"], [67, "plot-result"], [67, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [67, "generate-data"], [80, "generate-data"], [192, "generate-data"], [298, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [67, "compute-clustering"], [67, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [57, "data-generation"], [126, "data-generation"], [146, "data-generation"], [156, "data-generation"], [249, "data-generation"], [319, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [82, "plot-the-results"], [133, "plot-the-results"], [163, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [993, "feature-agglomeration"], [1010, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[55, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[55, "scale-invariance"]], "Multi-Scale Clustering": [[55, "multi-scale-clustering"]], "Hyperparameter Robustness": [[55, "hyperparameter-robustness"]], "min_cluster_size": [[55, "min-cluster-size"]], "min_samples": [[55, "min-samples"]], "dbscan_clustering": [[55, "dbscan-clustering"]], "Inductive Clustering": [[56, "inductive-clustering"]], "Demonstration of k-means assumptions": [[57, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[57, "fit-models-and-plot-results"]], "Possible solutions": [[57, "possible-solutions"]], "Final remarks": [[57, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[58, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[58, "load-the-dataset"]], "Define our evaluation benchmark": [[58, "define-our-evaluation-benchmark"]], "Run the benchmark": [[58, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[58, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[59, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[60, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[61, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[62, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[63, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[63, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[64, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[64, "generate-the-data"], [66, "generate-the-data"], [82, "generate-the-data"]], "Compute clustering with KMeans": [[64, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[64, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[64, "establishing-parity-between-clusters"]], "Plotting the results": [[64, "plotting-the-results"], [109, "plotting-the-results"], [111, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[65, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[66, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[66, "plotting-four-circles"]], "Plotting two circles": [[66, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[67, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[67, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[69, "pipelines-and-composite-estimators"], [165, "pipelines-and-composite-estimators"], [400, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[70, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[70, "newsgroups-dataset"]], "Creating transformers": [[70, "creating-transformers"]], "Classification pipeline": [[70, "classification-pipeline"]], "Column Transformer with Mixed Types": [[71, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[72, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[72, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[72, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[73, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[74, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[75, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[75, "synthetic-example"]], "Real-world data set": [[75, "real-world-data-set"]], "Covariance estimation": [[77, "covariance-estimation"], [165, "covariance-estimation"], [401, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[78, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[78, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[78, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[79, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[80, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[80, null], [170, null], [264, null], [265, null], [367, null], [368, null], [396, null], [396, null], [396, null], [397, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [401, null], [401, null], [401, null], [401, null], [403, null], [403, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [407, null], [408, null], [965, null], [965, null], [968, null], [969, null], [970, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [973, null], [973, null], [973, null], [973, null], [973, null], [973, null], [973, null], [973, null], [974, null], [974, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [977, null], [977, null], [977, null], [978, null], [978, null], [978, null], [979, null], [979, null], [979, null], [980, null], [981, null], [982, null], [982, null], [982, null], [982, null], [984, null], [986, null], [986, null], [988, null], [988, null], [988, null], [990, null], [990, null], [991, null], [992, null], [992, null]], "Comparison of results": [[80, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[81, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[81, "minimum-covariance-determinant-estimator"]], "Evaluation": [[81, "evaluation"], [298, "evaluation"]], "Sparse inverse covariance estimation": [[82, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[82, "estimate-the-covariance"]], "Cross decomposition": [[84, "cross-decomposition"], [165, "cross-decomposition"], [402, "cross-decomposition"]], "Compare cross decomposition methods": [[85, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[85, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[85, "canonical-symmetric-pls"]], "Transform data": [[85, "transform-data"]], "Scatter plot of scores": [[85, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[85, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[85, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[85, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[86, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[86, "the-data"]], "Projection on one component and predictive power": [[86, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[88, "dataset-examples"], [165, "dataset-examples"]], "The Digit Dataset": [[89, "the-digit-dataset"]], "The Iris Dataset": [[90, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[91, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[92, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[94, "decomposition"], [95, "decomposition"], [165, "decomposition"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [219, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[99, "incremental-pca"], [404, "incremental-pca"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [404, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Ensemble methods": [[108, "ensemble-methods"], [165, "ensemble-methods"], [406, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[109, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[109, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[109, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[110, "multi-class-adaboosted-decision-trees"]], "Decision Tree Regression with AdaBoost": [[111, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[111, "preparing-the-data"], [174, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[111, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[112, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[113, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[114, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[115, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[116, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[116, "load-dataset"]], "Compute score and computation times": [[116, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[117, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[117, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[117, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[117, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[118, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[118, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[118, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[119, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[120, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[120, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[120, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[120, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[120, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[120, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[120, "model-comparison"]], "Limiting the number of splits": [[120, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[121, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[121, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[121, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[122, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[123, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[123, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[123, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[123, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[123, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[124, "gradient-boosting-regression"]], "Data preprocessing": [[124, "data-preprocessing"]], "Fit regression model": [[124, "fit-regression-model"], [291, "fit-regression-model"], [338, "fit-regression-model"]], "Plot training deviance": [[124, "plot-training-deviance"]], "Plot feature importance": [[124, "plot-feature-importance"]], "Gradient Boosting regularization": [[125, "gradient-boosting-regularization"]], "IsolationForest example": [[126, "isolationforest-example"]], "Training of the model": [[126, "training-of-the-model"]], "Plot discrete decision boundary": [[126, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[126, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[127, "monotonic-constraints"], [406, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[127, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[128, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[129, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[130, "combine-predictors-using-stacking"]], "Download the dataset": [[130, "download-the-dataset"]], "Make pipeline to preprocess the data": [[130, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[130, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[130, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[131, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[132, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[133, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[133, "training-classifiers"]], "Making predictions": [[133, "making-predictions"]], "Tutorial exercises": [[135, "tutorial-exercises"], [165, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[136, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[136, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[136, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[136, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[137, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[138, "digits-classification-exercise"]], "SVM Exercise": [[139, "svm-exercise"]], "Feature Selection": [[141, "feature-selection"], [165, "feature-selection"]], "Comparison of F-test and mutual information": [[142, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[143, "univariate-feature-selection"]], "Univariate feature selection": [[143, "id1"], [408, "univariate-feature-selection"]], "Compare with SVMs": [[143, "compare-with-svms"]], "Pipeline ANOVA SVM": [[144, "pipeline-anova-svm"]], "Recursive feature elimination": [[145, "recursive-feature-elimination"], [408, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[146, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[146, "model-training-and-selection"], [249, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[146, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[147, "model-based-and-sequential-feature-selection"]], "Loading the data": [[147, "loading-the-data"]], "Feature importance from coefficients": [[147, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[147, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[147, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[147, "discussion"]], "Gaussian Process for Machine Learning": [[149, "gaussian-process-for-machine-learning"], [165, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[150, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[150, "generating-a-dataset"]], "Limitations of a simple linear model": [[150, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[150, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[150, "kernel-ridge"]], "Gaussian process regression": [[150, "gaussian-process-regression"]], "Final conclusion": [[150, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[151, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[152, "gaussian-process-classification-gpc-on-iris-dataset"], [409, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[153, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[154, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[155, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[155, "build-the-dataset"]], "Design the proper kernel": [[155, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[155, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[155, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[156, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[156, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[157, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[157, "dataset-generation"], [200, "dataset-generation"]], "Example with noise-free target": [[157, "example-with-noise-free-target"]], "Example with noisy targets": [[157, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[158, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[158, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[158, "regression"], [406, "regression"], [406, "id17"], [972, "regression"], [980, "regression"], [990, "regression"], [991, "regression"], [992, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[159, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[159, "helper-function"]], "Dataset and Gaussian process generation": [[159, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[159, "kernel-cookbook"]], "Radial Basis Function kernel": [[159, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[159, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[159, "exp-sine-squared-kernel"], [409, "exp-sine-squared-kernel"]], "Dot-product kernel": [[159, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[159, "matern-kernel"], [409, "matern-kernel"]], "Missing Value Imputation": [[161, "missing-value-imputation"], [165, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[162, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[163, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[163, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[163, "impute-the-missing-data-and-score"]], "Missing information": [[163, "missing-information"]], "Estimate the score": [[163, "estimate-the-score"]], "Replace missing values by 0": [[163, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[163, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[163, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[163, "iterative-imputation-of-the-missing-values"]], "Examples": [[165, "examples"], [361, "examples"], [368, null], [368, "examples"], [403, null], [403, null], [408, null], [408, null], [989, null], [989, null], [993, null], [993, null], [993, null], [1018, "examples"]], "Release Highlights": [[165, "release-highlights"], [310, "release-highlights"]], "Decision Trees": [[165, "decision-trees"], [348, "decision-trees"], [992, "decision-trees"]], "Gaussian Mixture Models": [[165, "gaussian-mixture-models"], [243, "gaussian-mixture-models"]], "Generalized Linear Models": [[165, "generalized-linear-models"], [176, "generalized-linear-models"], [972, "generalized-linear-models"]], "Inspection": [[165, "inspection"], [166, "inspection"], [388, "inspection"]], "Kernel Approximation": [[165, "kernel-approximation"], [173, "kernel-approximation"], [968, "kernel-approximation"]], "Manifold learning": [[165, "manifold-learning"], [218, "manifold-learning"], [973, "manifold-learning"]], "Miscellaneous": [[165, "miscellaneous"], [226, "miscellaneous"], [398, "miscellaneous"], [1026, "miscellaneous"], [1026, "id40"], [1027, "miscellaneous"], [1028, "miscellaneous"], [1029, "miscellaneous"], [1029, "id13"], [1030, "miscellaneous"], [1031, "miscellaneous"], [1034, "miscellaneous"]], "Model Selection": [[165, "model-selection"], [252, "model-selection"]], "Multioutput methods": [[165, "multioutput-methods"], [276, "multioutput-methods"]], "Nearest Neighbors": [[165, "nearest-neighbors"], [280, "nearest-neighbors"], [979, "nearest-neighbors"]], "Neural Networks": [[165, "neural-networks"], [294, "neural-networks"]], "Preprocessing": [[165, "preprocessing"], [300, "preprocessing"]], "Semi Supervised Classification": [[165, "semi-supervised-classification"], [318, "semi-supervised-classification"]], "Support Vector Machines": [[165, "support-vector-machines"], [326, "support-vector-machines"], [991, "support-vector-machines"]], "Working with text documents": [[165, "working-with-text-documents"], [343, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[167, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[167, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[167, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[167, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[167, "income-prediction-with-partial-observations"]], "Lessons learned": [[167, "lessons-learned"], [168, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[168, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[168, "the-dataset-wages"]], "The machine-learning pipeline": [[168, "the-machine-learning-pipeline"]], "Processing the dataset": [[168, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[168, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[168, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[168, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[168, "preprocessing-numerical-variables"]], "Linear models with regularization": [[168, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[168, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[168, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[169, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[169, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[169, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[169, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[169, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[169, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[169, "multi-layer-perceptron"]], "Gradient boosting": [[169, "gradient-boosting"]], "Analysis of the plots": [[169, "analysis-of-the-plots"]], "ICE vs. PDP": [[169, "ice-vs-pdp"]], "2D interaction plots": [[169, "d-interaction-plots"]], "3D representation": [[169, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[170, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[170, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[170, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[170, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[171, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[171, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[171, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[174, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[174, "partitioning-the-data"]], "Feature normalization": [[174, "feature-normalization"]], "Establishing a baseline model": [[174, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[174, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[174, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[174, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[177, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[177, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[177, "fit-the-regressors"], [177, "id2"]], "Plot the true and estimated coefficients": [[177, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[177, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[177, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[177, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[178, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[178, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[178, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[178, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[179, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[180, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[181, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[182, "l1-based-models-for-sparse-signals"]], "Lasso": [[182, "lasso"], [972, "lasso"]], "Automatic Relevance Determination (ARD)": [[182, "automatic-relevance-determination-ard"]], "ElasticNet": [[182, "elasticnet"]], "Plot and analysis of the results": [[182, "plot-and-analysis-of-the-results"]], "Conclusions": [[182, "conclusions"]], "Lasso and Elastic Net": [[183, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[184, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[184, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[184, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[185, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[186, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[187, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[187, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[187, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[187, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[187, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[187, "summary-of-cross-validation-approach"]], "Logistic function": [[188, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[189, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[190, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[191, "regularization-path-of-l1-logistic-regression"]], "Load data": [[191, "load-data"]], "Compute regularization path": [[191, "compute-regularization-path"]], "Plot regularization path": [[191, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[192, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[192, "fit-models"]], "Plot support and time series": [[192, "plot-support-and-time-series"]], "Non-negative least squares": [[193, "non-negative-least-squares"]], "Linear Regression Example": [[194, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[195, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[196, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[197, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[198, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[198, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[198, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[198, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[198, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[198, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[198, "evaluation-of-the-ranking-power"]], "Main takeaways": [[198, "main-takeaways"]], "Polynomial and Spline interpolation": [[199, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[199, "periodic-splines"]], "Quantile regression": [[200, "quantile-regression"]], "Fitting a QuantileRegressor": [[200, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[200, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[201, "robust-linear-model-estimation-using-ransac"]], "Plot Ridge coefficients as a function of the L2 regularization": [[202, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Plot Ridge coefficients as a function of the regularization": [[203, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[203, "compute-paths"]], "Display results": [[203, "display-results"]], "Robust linear estimator fitting": [[204, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[205, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[206, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[207, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[208, "sgd-convex-loss-functions"]], "SGD: Penalties": [[209, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[210, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[211, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[212, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[213, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[214, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[215, "theil-sen-regression"]], "Outliers only in the y direction": [[215, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[215, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[216, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[216, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[216, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[216, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[216, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[219, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[219, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[219, "locally-linear-embeddings"]], "Isomap Embedding": [[219, "isomap-embedding"]], "Multidimensional scaling": [[219, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[219, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[219, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[220, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[220, "load-digits-dataset"]], "Helper function to plot embedding": [[220, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[220, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[221, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[222, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[223, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[223, "swiss-roll"]], "Swiss-Hole": [[223, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[224, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[227, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[228, "visualizations-with-display-objects"]], "Load Data and train model": [[228, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[228, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[228, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[228, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[228, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[229, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[229, "compact-text-representation"]], "Rich HTML representation": [[229, "rich-html-representation"]], "Isotonic Regression": [[230, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[231, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[231, "theoretical-bounds"]], "Empirical validation": [[231, "empirical-validation"]], "Remarks": [[231, "remarks"]], "Explicit feature map approximation for RBF kernels": [[232, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[232, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[232, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[232, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[233, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[233, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[233, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[233, "look-at-the-results"], [338, "look-at-the-results"]], "Visualize training and prediction times": [[233, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[233, "visualize-the-learning-curves"]], "Metadata Routing": [[234, "metadata-routing"], [390, "id1"]], "Estimators": [[234, "estimators"], [355, "estimators"], [355, "id2"], [375, "estimators"], [398, "estimators"]], "Router and Consumer": [[234, "router-and-consumer"]], "Simple Pipeline": [[234, "simple-pipeline"]], "Deprecation / Default Value Change": [[234, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[234, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[235, "multilabel-classification"], [977, "multilabel-classification"]], "Face completion with a multi-output estimators": [[236, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[237, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[237, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[237, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[237, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[238, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[238, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[238, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[238, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[238, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[239, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[239, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[239, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[239, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[239, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[239, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[240, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[240, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[240, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[240, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[241, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[244, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[245, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[246, "gmm-covariances"]], "GMM Initialization Methods": [[247, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[248, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[249, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[249, "plot-the-bic-scores"]], "Plot the best model": [[249, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[250, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[253, "confusion-matrix"], [976, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[254, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[254, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[254, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[254, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[255, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[256, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[256, "generate-synthetic-data"]], "Define the classifiers": [[256, "define-the-classifiers"]], "Plot ROC and DET curves": [[256, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[257, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[257, "the-dataset"]], "Define our grid-search strategy": [[257, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[257, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[258, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[259, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[259, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[259, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[259, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[259, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[259, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[259, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[260, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[260, "data-loading"]], "Pipeline with hyperparameter tuning": [[260, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[261, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[261, "learning-curve"]], "Complexity analysis": [[261, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[262, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[262, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[262, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[262, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[263, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[263, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[263, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[264, "nested-versus-non-nested-cross-validation"]], "See Also:": [[264, null], [400, null]], "Test with permutations the significance of a classification score": [[265, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[265, "permutation-test-score"], [403, "permutation-test-score"]], "Original data": [[265, "original-data"], [301, "original-data"]], "Random data": [[265, "random-data"]], "Precision-Recall": [[266, "precision-recall"]], "In binary classification settings": [[266, "in-binary-classification-settings"]], "Dataset and model": [[266, "dataset-and-model"]], "Plot the Precision-Recall curve": [[266, "plot-the-precision-recall-curve"]], "In multi-label settings": [[266, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[266, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[266, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[266, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[266, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[267, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[268, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[268, "load-and-prepare-data"], [269, "load-and-prepare-data"], [306, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[268, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[268, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[268, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[268, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[268, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[268, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[268, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[268, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[269, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[269, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[270, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[271, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[271, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[272, "train-error-vs-test-error"]], "Compute train and test errors": [[272, "compute-train-and-test-errors"]], "Plot results functions": [[272, "plot-results-functions"]], "Underfitting vs. Overfitting": [[273, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[274, "plotting-validation-curves"]], "Classifier Chain": [[277, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[279, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[281, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[282, "nearest-neighbors-classification"], [979, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[283, "kernel-density-estimation"], [405, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[284, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[285, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[286, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[286, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[286, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[287, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[288, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[289, "neighborhood-components-analysis-illustration"]], "Original points": [[289, "original-points"]], "Learning an embedding": [[289, "learning-an-embedding"]], "Nearest Centroid Classification": [[290, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[291, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[292, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[295, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[296, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[297, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[298, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[298, "models-definition"]], "Training": [[298, "training"], [979, "training"]], "Plotting": [[298, "plotting"], [398, "plotting"], [398, "id7"], [398, "id9"]], "Compare the effect of different scalers on data with outliers": [[301, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[301, "standardscaler"]], "MinMaxScaler": [[301, "minmaxscaler"]], "MaxAbsScaler": [[301, "maxabsscaler"]], "RobustScaler": [[301, "robustscaler"]], "PowerTransformer": [[301, "powertransformer"]], "QuantileTransformer (uniform output)": [[301, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[301, "quantiletransformer-gaussian-output"]], "Normalizer": [[301, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[302, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[303, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[304, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[305, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[306, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[306, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[306, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[306, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[307, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[307, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[307, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[307, "native-categorical-feature-support"]], "Plotting the Results": [[307, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[308, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[308, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[308, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[311, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[311, "new-plotting-api"]], "Stacking Classifier and Regressor": [[311, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[311, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[311, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[311, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[311, "knn-based-imputation"]], "Tree pruning": [[311, "tree-pruning"]], "Retrieve dataframes from OpenML": [[311, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[311, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[311, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[312, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[312, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[312, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[312, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[312, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[312, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[313, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[313, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[313, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[313, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[313, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[313, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[313, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[313, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[313, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[313, "new-documentation-improvements"], [314, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[314, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[314, "keyword-and-positional-arguments"]], "Spline Transformers": [[314, "spline-transformers"]], "Quantile Regressor": [[314, "quantile-regressor"]], "Feature Names Support": [[314, "feature-names-support"]], "A more flexible plotting API": [[314, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[314, "online-one-class-svm"], [990, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[314, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[315, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[315, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[315, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[315, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[315, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[315, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[315, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[316, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[316, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[316, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[316, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[316, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[316, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[316, "improved-efficiency-of-many-estimators"]], "Label Propagation digits: Demonstrating performance": [[319, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[319, "semi-supervised-learning"], [989, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[319, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[320, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[321, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[322, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[323, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[324, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[327, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[328, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[329, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[330, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[331, "rbf-svm-parameters"]], "Load and prepare data set": [[331, "load-and-prepare-data-set"]], "Train classifiers": [[331, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[332, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[333, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[334, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[334, "load-some-data-to-play-with"]], "Create the pipeline": [[334, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[334, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[335, "svm-kernels"]], "SVM Margins Example": [[336, "svm-margins-example"]], "Non-linear SVM": [[337, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[338, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[339, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[339, "l1-penalty-case"]], "L2-penalty case": [[339, "l2-penalty-case"]], "SVM Tie Breaking Example": [[340, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[341, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[344, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[344, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[344, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[344, "model-without-metadata-stripping"]], "Model with metadata stripping": [[344, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[344, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[344, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[345, "clustering-text-documents-using-k-means"]], "Loading text data": [[345, "loading-text-data"]], "Quantifying the quality of clustering results": [[345, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[345, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[345, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[345, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[345, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[345, "top-terms-per-cluster"]], "HashingVectorizer": [[345, "hashingvectorizer"]], "Clustering evaluation summary": [[345, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[346, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[346, "load-data"]], "Define preprocessing functions": [[346, "define-preprocessing-functions"]], "DictVectorizer": [[346, "dictvectorizer"]], "FeatureHasher": [[346, "featurehasher"]], "Comparison with special purpose text vectorizers": [[346, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[346, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[349, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[349, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[349, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[350, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[351, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[352, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[353, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[353, "train-tree-classifier"]], "Tree structure": [[353, "tree-structure"]], "Decision path": [[353, "decision-path"]], "Common pitfalls and recommended practices": [[355, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[355, "inconsistent-preprocessing"]], "Data leakage": [[355, "data-leakage"]], "Data leakage during pre-processing": [[355, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[355, "how-to-avoid-data-leakage"]], "Controlling randomness": [[355, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[355, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[355, "cv-splitters"], [355, "id3"]], "Common pitfalls and subtleties": [[355, "common-pitfalls-and-subtleties"]], "General recommendations": [[355, "general-recommendations"]], "Getting reproducible results across multiple executions": [[355, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[355, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[358, "computing-with-scikit-learn"]], "Computational Performance": [[359, "computational-performance"]], "Bulk versus Atomic mode": [[359, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[359, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[359, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[359, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[359, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[359, "feature-extraction-latency"]], "Prediction Throughput": [[359, "prediction-throughput"]], "Tips and Tricks": [[359, "tips-and-tricks"]], "Linear algebra libraries": [[359, "linear-algebra-libraries"]], "Limiting Working Memory": [[359, "limiting-working-memory"]], "Model Compression": [[359, "model-compression"]], "Model Reshaping": [[359, "model-reshaping"]], "Links": [[359, "links"]], "Parallelism, resource management, and configuration": [[360, "parallelism-resource-management-and-configuration"]], "Parallelism": [[360, "parallelism"], [965, "parallelism"]], "Higher-level parallelism with joblib": [[360, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[360, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[360, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[360, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[360, "configuration-switches"]], "Python API": [[360, "python-api"]], "Environment variables": [[360, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[360, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[360, "sklearn-working-memory"]], "SKLEARN_SEED": [[360, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[360, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[360, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[360, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[360, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[360, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[360, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[361, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[361, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[361, "streaming-instances"]], "Extracting features": [[361, "extracting-features"]], "Incremental learning": [[361, "incremental-learning"]], "Notes": [[361, "notes"], [400, "notes"], [972, "notes"]], "Table Of Contents": [[362, "table-of-contents"]], "Dataset transformations": [[365, "dataset-transformations"]], "Dataset loading utilities": [[366, "dataset-loading-utilities"], [378, "dataset-loading-utilities"]], "Loading other datasets": [[367, "loading-other-datasets"]], "Sample images": [[367, "sample-images"]], "Examples:": [[367, null], [388, null], [396, null], [396, null], [397, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [399, null], [400, null], [400, null], [400, null], [400, null], [400, null], [401, null], [401, null], [401, null], [401, null], [401, null], [401, null], [402, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [405, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [408, null], [408, null], [408, null], [408, null], [965, null], [965, null], [965, null], [968, null], [968, null], [970, null], [970, null], [970, null], [971, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [973, null], [975, null], [975, null], [975, null], [975, null], [976, null], [976, null], [976, null], [976, null], [976, null], [977, null], [979, null], [979, null], [979, null], [979, null], [979, null], [980, null], [980, null], [981, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [983, null], [984, null], [986, null], [986, null], [986, null], [990, null], [990, null], [991, null], [991, null], [991, null], [991, null], [991, null], [991, null], [992, null], [992, null], [992, null], [992, null], [1015, null]], "Datasets in svmlight / libsvm format": [[367, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[367, null]], "Downloading datasets from the openml.org repository": [[367, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[367, "dataset-versions"]], "ARFF parser": [[367, "arff-parser"]], "Loading from external datasets": [[367, "loading-from-external-datasets"], [1002, null]], "Real world datasets": [[368, "real-world-datasets"]], "The Olivetti faces dataset": [[368, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[368, "the-20-newsgroups-text-dataset"]], "Usage": [[368, "usage"], [368, "id2"], [397, "usage"], [400, "usage"], [400, "id1"], [406, "usage"], [406, "id26"], [406, "id32"], [406, "id33"], [406, "id35"], [972, "usage"]], "Converting text to vectors": [[368, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[368, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[368, null]], "Recommendation": [[368, null]], "The Labeled Faces in the Wild face recognition dataset": [[368, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[368, "forest-covertypes"]], "RCV1 dataset": [[368, "rcv1-dataset"]], "Kddcup 99 dataset": [[368, "kddcup-99-dataset"]], "California Housing dataset": [[368, "california-housing-dataset"]], "Generated datasets": [[369, "generated-datasets"]], "Generators for classification and clustering": [[369, "generators-for-classification-and-clustering"]], "Single label": [[369, "single-label"]], "Multilabel": [[369, "multilabel"]], "Generators for regression": [[369, "generators-for-regression"]], "Generators for manifold learning": [[369, "generators-for-manifold-learning"]], "Generators for decomposition": [[369, "generators-for-decomposition"]], "Toy datasets": [[370, "toy-datasets"]], "Iris plants dataset": [[370, "iris-plants-dataset"]], "Diabetes dataset": [[370, "diabetes-dataset"], [1009, null]], "Optical recognition of handwritten digits dataset": [[370, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[370, "linnerrud-dataset"]], "Wine recognition dataset": [[370, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[370, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[371, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[371, "installing-nightly-builds"]], "Building from source": [[371, "building-from-source"]], "Dependencies": [[371, "dependencies"]], "Runtime dependencies": [[371, "runtime-dependencies"]], "Build dependencies": [[371, "build-dependencies"]], "Test dependencies": [[371, "test-dependencies"]], "Building a specific version from a tag": [[371, "building-a-specific-version-from-a-tag"]], "Editable mode": [[371, "editable-mode"]], "Platform-specific instructions": [[371, "platform-specific-instructions"]], "Windows": [[371, "windows"]], "macOS": [[371, "macos"]], "macOS compilers from conda-forge": [[371, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[371, "macos-compilers-from-homebrew"]], "Linux": [[371, "linux"]], "Linux compilers from the system": [[371, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[371, "linux-compilers-from-conda-forge"]], "FreeBSD": [[371, "freebsd"]], "Alternative compilers": [[371, "alternative-compilers"]], "Parallel builds": [[371, "parallel-builds"]], "Bug triaging and issue curation": [[372, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[372, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[372, null]], "Working on PRs to help review": [[372, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[372, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[372, null]], "A typical workflow for triaging issues": [[372, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[373, "contributing"], [384, "contributing"]], "Our community, our values": [[373, null]], "Ways to contribute": [[373, "ways-to-contribute"]], "Contributing to related projects": [[373, null]], "Submitting a bug report or a feature request": [[373, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[373, "how-to-make-a-good-bug-report"]], "Contributing code": [[373, "contributing-code"]], "Video resources": [[373, "video-resources"]], "How to contribute": [[373, "how-to-contribute"]], "Learning git:": [[373, null]], "Pull request checklist": [[373, "pull-request-checklist"]], "Continuous Integration (CI)": [[373, "continuous-integration-ci"]], "Stalled pull requests": [[373, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[373, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[373, "issues-for-new-contributors"]], "good first issue tag": [[373, null]], "Easy tag": [[373, null]], "help wanted tag": [[373, null]], "Documentation": [[373, "documentation"], [1018, "documentation"]], "Building the documentation": [[373, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[373, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[373, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[373, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[373, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[373, "monitoring-performance"]], "Issue Tracker Tags": [[373, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[373, "maintaining-backwards-compatibility"]], "Deprecation": [[373, "deprecation"]], "Change the default value of a parameter": [[373, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[373, "code-review-guidelines"]], "Communication Guidelines": [[373, "communication-guidelines"]], "Reading the existing code base": [[373, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[374, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[374, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[374, "tips-to-ease-development"]], "Tips for performance": [[374, "tips-for-performance"]], "Using OpenMP": [[374, "using-openmp"]], "Developing scikit-learn estimators": [[375, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[375, "apis-of-scikit-learn-objects"]], "Different objects": [[375, "different-objects"]], "Instantiation": [[375, "instantiation"]], "Fitting": [[375, "fitting"]], "Estimated Attributes": [[375, "estimated-attributes"]], "Optional Arguments": [[375, "optional-arguments"]], "Universal attributes": [[375, "universal-attributes"]], "Rolling your own estimator": [[375, "rolling-your-own-estimator"]], "Project template:": [[375, null]], "BaseEstimator and mixins:": [[375, null]], "get_params and set_params": [[375, "get-params-and-set-params"]], "Parameters and init": [[375, "parameters-and-init"]], "Cloning": [[375, "cloning"]], "Pipeline compatibility": [[375, "pipeline-compatibility"]], "Estimator types": [[375, "estimator-types"]], "Specific models": [[375, "specific-models"]], "Estimator Tags": [[375, "estimator-tags"]], "Developer API for set_output": [[375, "developer-api-for-set-output"]], "Coding guidelines": [[375, "coding-guidelines"]], "Input validation": [[375, "input-validation"]], "Random Numbers": [[375, "random-numbers"]], "Numerical assertions in tests": [[375, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[376, "developer-s-guide"]], "Maintainer / core-developer information": [[377, "maintainer-core-developer-information"]], "Releasing": [[377, "releasing"]], "Before a release": [[377, "before-a-release"]], "Preparing a release PR": [[377, "preparing-a-release-pr"]], "Major version release": [[377, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[377, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[377, "making-a-release"]], "Release checklist": [[377, "release-checklist"]], "Merging Pull Requests": [[377, "merging-pull-requests"]], "The scikit-learn.org web site": [[377, "the-scikit-learn-org-web-site"]], "Experimental features": [[377, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[378, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[378, "good-practices"]], "Provide a failing code example with minimal comments": [[378, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[378, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[378, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[378, "use-markdown-formatting"]], "Synthetic dataset": [[378, "synthetic-dataset"]], "NumPy": [[378, "numpy"]], "Pandas": [[378, "pandas"]], "make_regression": [[378, "make-regression"]], "make_classification": [[378, "make-classification"]], "make_blobs": [[378, "make-blobs"]], "How to optimize for speed": [[379, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[379, "python-cython-or-c-c"]], "Profiling Python code": [[379, "profiling-python-code"]], "Memory usage profiling": [[379, "memory-usage-profiling"]], "Using Cython": [[379, "using-cython"]], "Profiling compiled extensions": [[379, "profiling-compiled-extensions"]], "Using yep and gperftools": [[379, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[379, "using-a-debugger-gdb"]], "Using gprof": [[379, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[379, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[379, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[379, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[379, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[380, "developing-with-the-plotting-api"]], "Plotting API Overview": [[380, "plotting-api-overview"]], "Plotting with Multiple Axes": [[380, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[381, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[381, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[381, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[381, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[381, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[381, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[381, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[381, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[381, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[382, "utilities-for-developers"]], "Validation Tools": [[382, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[382, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[382, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[382, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[382, "graph-routines"]], "Testing Functions": [[382, "testing-functions"]], "Multiclass and multilabel utility function": [[382, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[382, "helper-functions"]], "Hash Functions": [[382, "hash-functions"]], "Warnings and Exceptions": [[382, "warnings-and-exceptions"]], "Dispatching": [[383, "dispatching"]], "Frequently Asked Questions": [[384, "frequently-asked-questions"]], "Table of Contents": [[384, "table-of-contents"]], "About the project": [[384, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[384, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[384, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[384, "why-scikit"]], "Do you support PyPy?": [[384, "do-you-support-pypy"]], "Implementation decisions": [[384, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[384, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[384, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[384, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[384, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[384, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[384, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[384, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[384, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[384, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[384, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[384, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[384, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[384, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[384, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[384, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[384, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[384, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[384, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[384, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[384, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[384, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[385, "getting-started"]], "Fitting and predicting: estimator basics": [[385, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[385, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[385, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[385, "model-evaluation"]], "Automatic parameter searches": [[385, "automatic-parameter-searches"]], "Next steps": [[385, "next-steps"]], "Glossary of Common Terms and API Elements": [[386, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[386, "general-concepts"]], "Class APIs and Estimator Types": [[386, "class-apis-and-estimator-types"]], "Target Types": [[386, "target-types"]], "Methods": [[386, "methods"]], "Parameters": [[386, "parameters"], [406, "parameters"]], "Attributes": [[386, "attributes"]], "Data and sample properties": [[386, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[387, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[387, "roles-and-responsibilities"]], "Contributors": [[387, "contributors"]], "Core Contributors": [[387, "core-contributors"]], "Communication team": [[387, "communication-team"]], "Maintainers": [[387, "maintainers"]], "Technical Committee": [[387, "technical-committee"]], "Decision Making Process": [[387, "decision-making-process"]], "Governance Model Changes": [[387, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[387, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[389, "installing-scikit-learn"]], "Installing the latest release": [[389, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[389, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[389, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[389, "alpine-linux"]], "Arch Linux": [[389, "arch-linux"]], "Debian/Ubuntu": [[389, "debian-ubuntu"]], "Fedora": [[389, "fedora"]], "NetBSD": [[389, "netbsd"]], "MacPorts for Mac OSX": [[389, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[389, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[389, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[389, "winpython-for-windows"]], "Troubleshooting": [[389, "troubleshooting"]], "Error caused by file path length limit on Windows": [[389, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[390, "usage-examples"]], "Weighted scoring and fitting": [[390, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[390, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[390, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[390, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[390, "api-interface"]], "Model persistence": [[393, "model-persistence"]], "Python specific serialization": [[393, "python-specific-serialization"]], "Security & maintainability limitations": [[393, "security-maintainability-limitations"]], "A more secure format: skops": [[393, "a-more-secure-format-skops"]], "Interoperable formats": [[393, "interoperable-formats"]], "Model selection and evaluation": [[394, "model-selection-and-evaluation"]], "Array API support (experimental)": [[395, "array-api-support-experimental"]], "Example usage": [[395, "example-usage"]], "PyTorch Support": [[395, "pytorch-support"]], "Estimators with support for Array API-compatible inputs": [[395, "estimators-with-support-for-array-api-compatible-inputs"]], "Common estimator checks": [[395, "common-estimator-checks"]], "Spectral Co-Clustering": [[396, "spectral-co-clustering"]], "Mathematical formulation": [[396, "mathematical-formulation"], [396, "id3"], [399, "mathematical-formulation"], [399, "id16"], [399, "id23"], [399, "id33"], [399, "id37"], [406, "mathematical-formulation"], [972, "mathematical-formulation"], [979, "mathematical-formulation"], [980, "mathematical-formulation"], [990, "mathematical-formulation"], [991, "mathematical-formulation"], [992, "mathematical-formulation"]], "Spectral Biclustering": [[396, "spectral-biclustering"]], "Biclustering evaluation": [[396, "biclustering-evaluation"]], "Probability calibration": [[397, "probability-calibration"]], "Calibrating a classifier": [[397, "calibrating-a-classifier"]], "Sigmoid": [[397, "sigmoid"]], "Isotonic": [[397, "isotonic"]], "Multiclass support": [[397, "multiclass-support"]], "API Reference": [[398, "api-reference"]], "sklearn.base: Base classes and utility functions": [[398, "module-sklearn.base"]], "Base classes": [[398, "base-classes"]], "Functions": [[398, "functions"], [398, "id1"]], "sklearn.calibration: Probability Calibration": [[398, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[398, "module-sklearn.cluster"]], "Classes": [[398, "classes"]], "sklearn.compose: Composite Estimators": [[398, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[398, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[398, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[398, "module-sklearn.datasets"]], "Loaders": [[398, "loaders"]], "Samples generator": [[398, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[398, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[398, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[398, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[398, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[398, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[398, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[398, "module-sklearn.feature_extraction"]], "From images": [[398, "module-sklearn.feature_extraction.image"]], "From text": [[398, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[398, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[398, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[398, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[398, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[398, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[398, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[398, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[398, "module-sklearn.linear_model"]], "Linear classifiers": [[398, "linear-classifiers"]], "Classical linear regressors": [[398, "classical-linear-regressors"]], "Regressors with variable selection": [[398, "regressors-with-variable-selection"]], "Bayesian regressors": [[398, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[398, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[398, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[398, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[398, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[398, "sklearn-metrics-metrics"]], "Model Selection Interface": [[398, "model-selection-interface"]], "Classification metrics": [[398, "classification-metrics"], [976, "classification-metrics"]], "Regression metrics": [[398, "regression-metrics"], [976, "regression-metrics"]], "Multilabel ranking metrics": [[398, "multilabel-ranking-metrics"], [976, "multilabel-ranking-metrics"]], "Clustering metrics": [[398, "clustering-metrics"], [976, "clustering-metrics"]], "Biclustering metrics": [[398, "biclustering-metrics"]], "Distance metrics": [[398, "distance-metrics"]], "Pairwise metrics": [[398, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[398, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[398, "module-sklearn.model_selection"]], "Splitter Classes": [[398, "splitter-classes"]], "Splitter Functions": [[398, "splitter-functions"]], "Hyper-parameter optimizers": [[398, "hyper-parameter-optimizers"]], "Model validation": [[398, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[398, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[398, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[398, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[398, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[398, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[398, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[398, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[398, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[398, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[398, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[398, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[398, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[398, "module-sklearn.utils"]], "Recently deprecated": [[398, "recently-deprecated"]], "Input data": [[399, null]], "Overview of clustering methods": [[399, "overview-of-clustering-methods"]], "K-means": [[399, "k-means"]], "Low-level parallelism": [[399, "low-level-parallelism"], [406, "low-level-parallelism"]], "Mini Batch K-Means": [[399, "mini-batch-k-means"]], "Affinity Propagation": [[399, "affinity-propagation"]], "Mean Shift": [[399, "mean-shift"]], "Spectral clustering": [[399, "spectral-clustering"]], "Different label assignment strategies": [[399, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[399, "spectral-clustering-graphs"]], "Hierarchical clustering": [[399, "hierarchical-clustering"]], "FeatureAgglomeration": [[399, null]], "Different linkage type: Ward, complete, average, and single linkage": [[399, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[399, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[399, "adding-connectivity-constraints"]], "Varying the metric": [[399, "varying-the-metric"]], "Bisecting K-Means": [[399, "bisecting-k-means"]], "DBSCAN": [[399, "dbscan"]], "Implementation": [[399, null], [979, "implementation"]], "Memory consumption for large sample sizes": [[399, null]], "HDBSCAN": [[399, "hdbscan"]], "Mutual Reachability Graph": [[399, "mutual-reachability-graph"]], "Hierarchical Clustering": [[399, "id11"]], "OPTICS": [[399, "optics"]], "Comparison with DBSCAN": [[399, null]], "Computational Complexity": [[399, null]], "BIRCH": [[399, "birch"]], "Clustering performance evaluation": [[399, "clustering-performance-evaluation"]], "Rand index": [[399, "rand-index"]], "Advantages": [[399, "advantages"], [399, "id14"], [399, "id21"], [399, "id25"], [399, "id28"], [399, "id31"], [399, "id35"], [399, "id39"]], "Drawbacks": [[399, "drawbacks"], [399, "id15"], [399, "id22"], [399, "id26"], [399, "id29"], [399, "id32"], [399, "id36"], [399, "id40"]], "Mutual Information based scores": [[399, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[399, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[399, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[399, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[399, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[399, "davies-bouldin-index"]], "Contingency Matrix": [[399, "contingency-matrix"]], "Pair Confusion Matrix": [[399, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[400, "pipeline-chaining-estimators"]], "Construction": [[400, "construction"]], "Accessing steps": [[400, "accessing-steps"]], "Nested parameters": [[400, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[400, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[400, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[400, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[400, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[400, "visualizing-composite-estimators"]], "Empirical covariance": [[401, "empirical-covariance"]], "Shrunk Covariance": [[401, "shrunk-covariance"]], "Basic shrinkage": [[401, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[401, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[401, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[401, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[401, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[401, "minimum-covariance-determinant"]], "PLSCanonical": [[402, "plscanonical"]], "Transforming data": [[402, "transforming-data"]], "Predicting the targets Y": [[402, "predicting-the-targets-y"]], "PLSSVD": [[402, "plssvd"]], "PLSRegression": [[402, "plsregression"]], "Canonical Correlation Analysis": [[402, "canonical-correlation-analysis"]], "Reference:": [[402, null]], "Cross-validation: evaluating estimator performance": [[403, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[403, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[403, null]], "The cross_validate function and multiple metric evaluation": [[403, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[403, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[403, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[403, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[403, "k-fold"]], "Repeated K-Fold": [[403, "repeated-k-fold"]], "Leave One Out (LOO)": [[403, "leave-one-out-loo"]], "Leave P Out (LPO)": [[403, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[403, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[403, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[403, "stratified-k-fold"]], "Stratified Shuffle Split": [[403, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[403, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[403, "group-k-fold"]], "StratifiedGroupKFold": [[403, "stratifiedgroupkfold"]], "Leave One Group Out": [[403, "leave-one-group-out"]], "Leave P Groups Out": [[403, "leave-p-groups-out"]], "Group Shuffle Split": [[403, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[403, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[403, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[403, "cross-validation-of-time-series-data"]], "Time Series Split": [[403, "time-series-split"]], "A note on shuffling": [[403, "a-note-on-shuffling"]], "Cross validation and model selection": [[403, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[404, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[404, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[404, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[404, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[404, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[404, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[404, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[404, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[404, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[404, "dictionary-learning"]], "Generic dictionary learning": [[404, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[404, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[404, null]], "Factor Analysis": [[404, "factor-analysis"]], "Independent component analysis (ICA)": [[404, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[404, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[404, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[404, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[404, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[404, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[405, "density-estimation"]], "Density Estimation: Histograms": [[405, "density-estimation-histograms"]], "Bagging meta-estimator": [[406, "bagging-meta-estimator"]], "Forests of randomized trees": [[406, "forests-of-randomized-trees"]], "Random Forests": [[406, "random-forests"]], "Extremely Randomized Trees": [[406, "extremely-randomized-trees"]], "Parallelization": [[406, "parallelization"]], "Feature importance evaluation": [[406, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[406, "totally-random-trees-embedding"]], "AdaBoost": [[406, "adaboost"]], "Gradient Tree Boosting": [[406, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[406, "fitting-additional-weak-learners"]], "Controlling the tree size": [[406, "controlling-the-tree-size"]], "Loss Functions": [[406, "loss-functions"]], "Shrinkage via learning rate": [[406, "shrinkage-via-learning-rate"]], "Subsampling": [[406, "subsampling"]], "Interpretation with feature importance": [[406, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[406, "histogram-based-gradient-boosting"]], "Missing values support": [[406, "missing-values-support"]], "Sample weight support": [[406, "sample-weight-support"]], "Categorical Features Support": [[406, "categorical-features-support"]], "Interaction constraints": [[406, "interaction-constraints"]], "Why it\u2019s faster": [[406, "why-it-s-faster"]], "Voting Classifier": [[406, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[406, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[406, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[406, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[406, "voting-regressor"]], "Stacked generalization": [[406, "stacked-generalization"]], "Feature extraction": [[407, "feature-extraction"]], "Loading features from dicts": [[407, "loading-features-from-dicts"]], "Feature hashing": [[407, "feature-hashing"]], "Implementation details": [[407, "implementation-details"], [990, "implementation-details"], [991, "implementation-details"]], "Text feature extraction": [[407, "text-feature-extraction"]], "The Bag of Words representation": [[407, "the-bag-of-words-representation"]], "Sparsity": [[407, "sparsity"], [1009, "sparsity"]], "Common Vectorizer usage": [[407, "common-vectorizer-usage"]], "Using stop words": [[407, "using-stop-words"]], "Tf\u2013idf term weighting": [[407, "tfidf-term-weighting"]], "Decoding text files": [[407, "decoding-text-files"]], "Applications and examples": [[407, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[407, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[407, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[407, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[407, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[407, "image-feature-extraction"]], "Patch extraction": [[407, "patch-extraction"]], "Connectivity graph of an image": [[407, "connectivity-graph-of-an-image"]], "Feature selection": [[408, "feature-selection"]], "Removing features with low variance": [[408, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[408, null]], "Feature selection using SelectFromModel": [[408, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[408, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[408, "compressive-sensing"]], "Tree-based feature selection": [[408, "tree-based-feature-selection"]], "Sequential Feature Selection": [[408, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[408, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[409, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[409, "gaussian-process-regression-gpr"]], "GPR examples": [[409, "gpr-examples"]], "GPR with noise-level estimation": [[409, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[409, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[409, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[409, "gaussian-process-classification-gpc"]], "GPC examples": [[409, "gpc-examples"]], "Probabilistic predictions with GPC": [[409, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[409, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[409, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[409, "gaussian-process-kernel-api"]], "Basic kernels": [[409, "basic-kernels"]], "Kernel operators": [[409, "kernel-operators"]], "Radial basis function (RBF) kernel": [[409, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[409, "rational-quadratic-kernel"]], "Dot-Product kernel": [[409, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[410, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[411, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[412, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[413, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[413, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[414, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[415, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[416, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[416, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[417, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[418, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[419, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[419, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[420, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.RegressorMixin": [[421, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[421, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[422, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[422, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[423, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[424, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[425, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[426, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[426, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[427, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[427, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[428, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[429, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[429, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[430, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[430, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[431, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[431, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[432, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[432, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[433, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[433, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[434, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[434, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[435, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[435, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[436, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[436, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[437, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[437, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[438, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[438, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[439, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[439, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[440, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[440, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[441, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[441, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[442, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[442, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[443, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[443, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[444, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[444, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[445, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[446, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[447, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[447, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[448, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[449, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[449, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[450, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[451, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[451, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[452, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[453, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[453, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[454, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[454, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[455, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[455, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[456, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[456, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[457, "sklearn-config-context"]], "Examples using sklearn.config_context": [[457, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[458, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[458, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[459, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[459, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[460, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[461, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[461, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[462, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[462, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[463, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[463, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[464, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[464, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[465, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[465, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[466, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[466, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[467, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[468, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[468, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[469, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[470, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[471, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[471, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[472, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[472, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[473, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[473, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[474, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[475, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[476, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[476, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[477, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[477, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[478, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[478, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[479, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[479, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[480, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[480, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[481, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[481, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[482, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[483, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[483, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[484, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[484, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[485, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[485, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[486, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[487, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[487, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[488, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[488, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[489, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[489, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[490, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[490, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[491, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[491, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[492, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[493, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[493, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[494, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[495, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[495, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[496, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[497, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[498, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[499, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[499, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[500, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[500, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[501, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[501, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[502, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[502, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[503, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[503, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[504, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[504, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[505, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[506, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[507, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[508, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[508, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[509, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[509, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[510, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[511, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[511, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[512, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[512, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[513, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[513, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[514, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[514, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[515, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[515, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[516, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[516, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[517, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[518, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[519, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[519, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[520, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[521, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[521, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[522, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[522, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[523, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[523, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[524, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[524, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[525, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[525, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[526, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[526, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[527, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[527, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[528, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[528, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[529, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[529, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[530, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[530, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[531, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[531, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[532, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[533, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[533, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[534, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[535, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[536, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[537, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[538, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[538, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[539, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[539, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[540, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[540, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[541, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[541, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[542, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[542, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[543, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[543, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[544, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[545, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[545, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[546, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[546, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[547, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[547, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[548, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[548, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[549, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[549, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[550, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[550, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[551, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[551, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[552, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[552, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[553, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[553, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[554, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[554, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[555, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[555, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[556, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[556, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[557, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[557, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[558, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[558, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[559, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[559, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[560, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[560, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[561, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[562, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[563, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[564, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[565, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[566, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[567, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[568, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[569, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[570, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[570, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[571, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[571, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[572, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[573, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[573, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[574, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[575, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[576, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[576, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[577, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[577, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[578, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[578, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[579, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[579, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[580, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[580, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[581, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[582, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[582, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[583, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[583, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[584, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[585, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[586, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[586, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[587, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[588, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[588, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[589, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[589, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[590, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[591, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[591, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[592, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[593, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[593, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[594, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[594, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[595, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[595, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[596, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[596, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[597, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[597, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[598, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[599, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[599, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[600, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[600, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[601, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[602, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[602, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[603, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[603, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[604, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[604, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[605, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[606, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[606, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[607, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[607, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[608, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[608, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[609, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[610, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[611, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[611, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[612, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[612, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[613, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[614, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[614, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[615, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[616, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[616, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[617, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[617, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[618, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[619, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[619, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[620, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[620, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[620, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[621, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[621, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[621, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[622, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[622, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[623, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[623, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[624, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[624, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[625, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[626, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[627, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[628, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[628, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[629, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[629, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[630, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[630, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[631, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[632, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[632, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[633, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[633, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[634, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[634, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[635, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[635, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[636, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[636, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[637, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[637, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[638, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[638, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[639, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[640, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[641, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[641, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[642, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[642, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[643, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[644, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[644, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[645, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[645, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[646, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[646, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[647, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[647, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[648, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[648, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[649, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[650, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[651, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[651, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[652, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[653, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[653, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[654, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[654, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[655, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[655, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[656, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[657, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[657, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[658, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[658, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[659, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[659, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[660, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[660, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[661, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[661, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[662, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[662, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[663, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[663, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[664, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[665, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[665, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[666, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[666, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[667, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[667, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[668, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[668, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[669, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[669, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[670, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[670, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[671, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[671, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[672, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[673, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[673, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[674, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[675, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[676, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[677, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[677, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[678, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[678, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[679, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[679, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[680, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[680, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[681, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[681, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[682, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[682, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[683, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[684, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[685, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[686, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[686, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[686, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[686, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[687, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[687, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[688, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[689, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[689, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[689, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[689, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[690, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[690, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[690, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[690, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[691, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[691, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[691, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[691, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[692, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[692, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[693, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[693, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[694, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[694, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[695, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[695, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[696, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[696, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[697, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[698, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[698, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[699, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[700, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[701, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[701, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[702, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[702, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[703, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[704, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[705, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[706, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[706, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[707, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[707, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[708, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[708, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[709, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[710, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[711, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[712, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[713, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[714, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[715, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[715, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[716, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[717, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[717, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[718, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[719, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[720, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[721, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[722, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[722, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[723, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[724, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[725, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[725, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[726, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[726, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[727, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[728, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[729, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[729, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[730, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[730, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[731, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[732, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[733, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[733, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[734, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[735, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[736, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[736, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[737, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[737, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[738, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[738, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[739, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[740, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[740, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[741, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[741, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[742, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[743, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[743, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[744, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[745, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[745, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[746, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[747, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[748, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[749, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[750, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[751, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[752, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[753, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[754, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[755, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[756, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[757, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[758, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[759, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[760, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[761, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[762, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[763, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[764, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[765, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[766, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[766, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[767, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[767, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[768, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[769, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[770, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[770, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[771, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[772, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[772, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[773, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[773, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[774, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[774, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[775, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[775, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[776, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[776, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[777, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[777, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[778, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[778, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[779, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[779, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[780, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[781, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[781, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[782, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[782, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[783, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[783, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[784, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[784, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[785, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[785, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[786, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[786, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[787, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[787, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[788, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[788, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[789, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[789, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[790, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[790, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[791, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[791, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[791, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[792, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[793, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[794, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[795, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[796, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[797, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[798, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[799, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[799, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[800, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[800, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[801, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[801, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[802, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[802, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[803, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[803, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[804, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[804, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[805, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[805, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[806, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[806, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[807, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[807, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[808, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[809, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[809, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[810, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[810, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[811, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[811, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[812, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[812, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[813, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[813, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[814, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[814, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[815, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[815, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[816, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[817, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[817, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[818, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[819, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[819, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[820, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[821, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[821, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[822, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[823, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[823, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[824, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[825, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[825, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[826, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[826, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[827, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[827, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[828, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[829, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[830, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[830, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[831, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[831, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[832, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[832, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[833, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[833, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[834, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[834, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[835, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[835, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[836, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[836, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[837, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[837, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[838, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[839, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[840, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[841, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[841, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[842, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[843, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[844, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[844, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[845, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[845, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[846, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[846, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[847, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[847, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[848, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[848, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[849, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[849, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[850, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[851, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[852, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[852, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[853, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[853, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[854, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[855, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[855, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[856, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[857, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[857, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[858, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[858, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[859, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[860, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[860, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[861, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[861, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[862, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[862, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[863, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[863, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[864, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[864, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[865, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[865, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[866, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[866, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[867, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[867, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[868, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[868, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[869, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[869, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[870, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[871, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[872, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[872, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[873, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[874, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[874, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[875, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[876, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[877, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[877, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[878, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[879, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[880, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[881, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[881, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[882, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[882, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[883, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[884, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[884, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[885, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[885, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[886, "sklearn-set-config"]], "Examples using sklearn.set_config": [[886, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[887, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[888, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[888, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[889, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[890, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[890, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[891, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[891, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[892, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[892, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[893, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[893, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[894, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[894, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[895, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[895, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[896, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[896, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[897, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[897, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[898, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[899, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[900, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[901, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[902, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[902, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[903, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[903, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[904, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[905, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[906, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[907, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[908, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[909, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[910, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[911, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[911, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[912, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[913, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[914, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[915, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[916, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[917, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[918, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[919, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[920, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[920, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[921, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[922, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[922, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[923, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[924, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[925, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[926, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[927, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[928, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[929, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[929, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[930, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[931, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[932, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[933, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[933, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[934, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[934, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[935, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[935, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[936, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[936, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[937, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[937, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[938, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[939, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[940, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[941, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[942, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[943, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[944, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[945, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[946, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[947, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[948, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[949, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[950, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[950, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[951, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[952, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[953, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[954, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[955, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[956, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[957, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[958, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[959, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[960, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[960, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[961, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[962, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[963, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[964, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[965, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[965, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[965, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[965, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[965, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[965, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[965, "choosing-a-resource"]], "Exhausting the available resources": [[965, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[965, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[965, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[965, "tips-for-parameter-search"]], "Specifying an objective metric": [[965, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[965, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[965, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[965, "model-selection-development-and-evaluation"]], "Robustness to failure": [[965, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[965, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[965, "model-specific-cross-validation"]], "Information Criterion": [[965, "information-criterion"]], "Out of Bag Estimates": [[965, "out-of-bag-estimates"]], "Imputation of missing values": [[966, "imputation-of-missing-values"], [986, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[966, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[966, "univariate-feature-imputation"]], "Multivariate feature imputation": [[966, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[966, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[966, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[966, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[966, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[966, "marking-imputed-values"]], "Estimators that handle NaN values": [[966, "estimators-that-handle-nan-values"]], "Isotonic regression": [[967, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[968, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[968, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[968, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[968, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[968, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[968, "mathematical-details"]], "Kernel ridge regression": [[969, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[970, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[970, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[970, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[970, "qda"]], "LDA": [[970, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[970, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[970, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[970, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[971, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[971, "validation-curve"]], "Learning curve": [[971, "learning-curve"]], "Linear Models": [[972, "linear-models"]], "Ordinary Least Squares": [[972, "ordinary-least-squares"]], "Non-Negative Least Squares": [[972, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[972, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[972, "ridge-regression-and-classification"]], "Ridge Complexity": [[972, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[972, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[972, "setting-regularization-parameter"]], "Using cross-validation": [[972, "using-cross-validation"]], "Information-criteria based model selection": [[972, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[972, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[972, "multi-task-lasso"]], "Elastic-Net": [[972, "elastic-net"]], "Multi-task Elastic-Net": [[972, "multi-task-elastic-net"]], "Least Angle Regression": [[972, "least-angle-regression"]], "LARS Lasso": [[972, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[972, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[972, "bayesian-regression"]], "Bayesian Ridge Regression": [[972, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[972, "automatic-relevance-determination-ard"]], "Logistic regression": [[972, "logistic-regression"]], "Binary Case": [[972, "binary-case"]], "Multinomial Case": [[972, "multinomial-case"]], "Solvers": [[972, "solvers"]], "Differences from liblinear:": [[972, "liblinear-differences"]], "Practical considerations": [[972, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[972, "stochastic-gradient-descent-sgd"]], "Perceptron": [[972, "perceptron"]], "Passive Aggressive Algorithms": [[972, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[972, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[972, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[972, null]], "RANSAC: RANdom SAmple Consensus": [[972, "ransac-random-sample-consensus"]], "Details of the algorithm": [[972, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[972, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[972, "theoretical-considerations"]], "Huber Regression": [[972, "huber-regression"]], "Quantile Regression": [[972, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[972, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[973, "introduction"]], "Isomap": [[973, "isomap"]], "Complexity": [[973, "complexity"], [973, "id3"], [973, "id4"], [973, "id5"], [973, "id7"], [973, "id8"], [979, "complexity"], [980, "complexity"], [990, "complexity"], [991, "complexity"], [992, "complexity"]], "Locally Linear Embedding": [[973, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[973, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[973, "hessian-eigenmapping"]], "Spectral Embedding": [[973, "spectral-embedding"]], "Local Tangent Space Alignment": [[973, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[973, "multi-dimensional-scaling-mds"]], "Metric MDS": [[973, "metric-mds"]], "Nonmetric MDS": [[973, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[973, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[973, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[973, "barnes-hut-t-sne"]], "Tips on practical use": [[973, "tips-on-practical-use"], [992, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[974, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[974, "cosine-similarity"]], "Linear kernel": [[974, "linear-kernel"], [1009, "linear-kernel"]], "Polynomial kernel": [[974, "polynomial-kernel"], [1009, "polynomial-kernel"]], "Sigmoid kernel": [[974, "sigmoid-kernel"]], "RBF kernel": [[974, "rbf-kernel"]], "Laplacian kernel": [[974, "laplacian-kernel"]], "Chi-squared kernel": [[974, "chi-squared-kernel"]], "Gaussian mixture models": [[975, "gaussian-mixture-models"]], "Gaussian Mixture": [[975, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[975, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[975, "pros"], [975, "id2"]], "Cons": [[975, "cons"], [975, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[975, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[975, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[975, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[975, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[975, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[975, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[975, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[976, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[976, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[976, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[976, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[976, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[976, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[976, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[976, "accuracy-score"]], "Example:": [[976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [988, null], [1009, null]], "Top-k accuracy score": [[976, "top-k-accuracy-score"]], "Balanced accuracy score": [[976, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[976, "cohen-s-kappa"]], "Classification report": [[976, "classification-report"]], "Hamming loss": [[976, "hamming-loss"]], "Precision, recall and F-measures": [[976, "precision-recall-and-f-measures"]], "Binary classification": [[976, "binary-classification"]], "Multiclass and multilabel classification": [[976, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[976, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[976, "hinge-loss"]], "Log loss": [[976, "log-loss"]], "Matthews correlation coefficient": [[976, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[976, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[976, "receiver-operating-characteristic-roc"]], "Binary case": [[976, "binary-case"]], "Multi-class case": [[976, "multi-class-case"]], "Multi-label case": [[976, "multi-label-case"]], "Detection error tradeoff (DET)": [[976, "detection-error-tradeoff-det"]], "Zero one loss": [[976, "zero-one-loss"]], "Brier score loss": [[976, "brier-score-loss"]], "Class likelihood ratios": [[976, "class-likelihood-ratios"]], "Coverage error": [[976, "coverage-error"]], "Label ranking average precision": [[976, "label-ranking-average-precision"]], "Ranking loss": [[976, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[976, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[976, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[976, "mean-absolute-error"]], "Mean squared error": [[976, "mean-squared-error"]], "Mean squared logarithmic error": [[976, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[976, "mean-absolute-percentage-error"]], "Median absolute error": [[976, "median-absolute-error"]], "Max error": [[976, "max-error"]], "Explained variance score": [[976, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[976, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[976, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[976, "pinball-loss"]], "D\u00b2 score": [[976, "d2-score"]], "D\u00b2 Tweedie score": [[976, "d2-tweedie-score"]], "D\u00b2 pinball score": [[976, "d2-pinball-score"]], "D\u00b2 absolute error score": [[976, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[976, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[976, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[977, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[977, "multiclass-classification"], [1009, null]], "Target format": [[977, "target-format"], [977, "id5"], [977, "id8"], [977, "id10"]], "OneVsRestClassifier": [[977, "onevsrestclassifier"]], "OneVsOneClassifier": [[977, "onevsoneclassifier"]], "OutputCodeClassifier": [[977, "outputcodeclassifier"]], "MultiOutputClassifier": [[977, "multioutputclassifier"]], "ClassifierChain": [[977, "classifierchain"]], "Multiclass-multioutput classification": [[977, "multiclass-multioutput-classification"]], "Multioutput regression": [[977, "multioutput-regression"]], "MultiOutputRegressor": [[977, "multioutputregressor"]], "RegressorChain": [[977, "regressorchain"]], "Naive Bayes": [[978, "naive-bayes"]], "Multinomial Naive Bayes": [[978, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[978, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[978, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[978, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[978, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[979, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[979, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[979, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[979, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[979, "nearest-neighbor-algorithms"]], "Brute Force": [[979, "brute-force"]], "K-D Tree": [[979, "k-d-tree"]], "Ball Tree": [[979, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[979, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[979, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[979, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[979, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[979, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[979, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[979, "neighborhood-components-analysis"]], "Dimensionality reduction": [[979, "dimensionality-reduction"]], "Mahalanobis distance": [[979, "mahalanobis-distance"]], "Transform": [[979, "transform"]], "Neural network models (supervised)": [[980, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[980, "multi-layer-perceptron"]], "Regularization": [[980, "regularization"]], "Algorithms": [[980, "algorithms"]], "Tips on Practical Use": [[980, "tips-on-practical-use"], [990, "tips-on-practical-use"], [991, "tips-on-practical-use"]], "More control with warm_start": [[980, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[981, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[981, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[981, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[981, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[981, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[982, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[982, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[982, "novelty-detection"]], "Scaling up the One-Class SVM": [[982, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[982, "id1"]], "Fitting an elliptic envelope": [[982, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[982, "isolation-forest"]], "Local Outlier Factor": [[982, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[982, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[983, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[983, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[983, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[983, "mathematical-definition"]], "Computation methods": [[983, "computation-methods"]], "Permutation feature importance": [[984, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[984, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[984, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[984, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[986, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[986, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[986, "scaling-features-to-a-range"]], "Scaling sparse data": [[986, "scaling-sparse-data"]], "Scaling data with outliers": [[986, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[986, null]], "Centering kernel matrices": [[986, "centering-kernel-matrices"]], "Non-linear transformation": [[986, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[986, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[986, "mapping-to-a-gaussian-distribution"]], "Normalization": [[986, "normalization"]], "Sparse input": [[986, null], [986, null]], "Encoding categorical features": [[986, "encoding-categorical-features"]], "Infrequent categories": [[986, "infrequent-categories"]], "Target Encoder": [[986, "target-encoder"]], "Discretization": [[986, "discretization"]], "K-bins discretization": [[986, "k-bins-discretization"]], "Feature binarization": [[986, "feature-binarization"]], "Generating polynomial features": [[986, "generating-polynomial-features"]], "Polynomial features": [[986, "polynomial-features"]], "Spline transformer": [[986, "spline-transformer"]], "Custom transformers": [[986, "custom-transformers"]], "Transforming the prediction target (y)": [[987, "transforming-the-prediction-target-y"]], "Label binarization": [[987, "label-binarization"]], "LabelBinarizer": [[987, "labelbinarizer"]], "MultiLabelBinarizer": [[987, "multilabelbinarizer"]], "Label encoding": [[987, "label-encoding"]], "Random Projection": [[988, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[988, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[988, "gaussian-random-projection"]], "Sparse random projection": [[988, "sparse-random-projection"]], "Inverse Transform": [[988, "inverse-transform"]], "Unlabeled entries in y": [[989, null]], "Self Training": [[989, "self-training"]], "Label Propagation": [[989, "label-propagation"]], "Stochastic Gradient Descent": [[990, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[990, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[990, "stopping-criterion"]], "SGD": [[990, "id5"]], "Multi-class classification": [[991, "multi-class-classification"]], "Scores and probabilities": [[991, "scores-and-probabilities"]], "Unbalanced problems": [[991, "unbalanced-problems"]], "Density estimation, novelty detection": [[991, "density-estimation-novelty-detection"]], "Kernel functions": [[991, "kernel-functions"]], "Parameters of the RBF Kernel": [[991, "parameters-of-the-rbf-kernel"]], "Using Python functions as kernels": [[991, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[991, "using-the-gram-matrix"]], "SVC": [[991, "svc"]], "SVR": [[991, "svr"]], "Multi-output problems": [[992, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[992, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[992, "classification-criteria"]], "Regression criteria": [[992, "regression-criteria"]], "Missing Values Support": [[992, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[992, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[993, "unsupervised-dimensionality-reduction"]], "Pipelining": [[993, null], [1007, "pipelining"]], "PCA: principal component analysis": [[993, "pca-principal-component-analysis"]], "Random projections": [[993, "random-projections"]], "Feature scaling": [[993, null]], "Welcome to scikit-learn": [[994, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[995, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[995, "new-to-scientific-python"]], "External Tutorials": [[995, "external-tutorials"]], "Videos": [[995, "videos"]], "Related Projects": [[996, "related-projects"]], "Interoperability and framework enhancements": [[996, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[996, "other-estimators-and-tasks"]], "Statistical learning with Python": [[996, "statistical-learning-with-python"]], "Recommendation Engine packages": [[996, "recommendation-engine-packages"]], "Domain specific packages": [[996, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[996, "translations-of-scikit-learn-documentation"]], "Roadmap": [[997, "id1"]], "Purpose of this document": [[997, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[997, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[997, "architectural-general-goals"]], "Subpackage-specific goals": [[997, "subpackage-specific-goals"]], "Supervised learning": [[998, "supervised-learning"]], "Support": [[999, "support"]], "Mailing List": [[999, "mailing-list"]], "User questions": [[999, "user-questions"]], "Bug tracker": [[999, "bug-tracker"]], "Gitter": [[999, "gitter"]], "Documentation resources": [[999, "documentation-resources"]], "Who is using scikit-learn?": [[1000, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1000, "id1"]], "Spotify": [[1000, "id2"]], "Inria": [[1000, "id3"]], "betaworks": [[1000, "id4"]], "Hugging Face": [[1000, "id5"]], "Evernote": [[1000, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1000, "id7"]], "Booking.com": [[1000, "id8"]], "AWeber": [[1000, "id9"]], "Yhat": [[1000, "id10"]], "Rangespan": [[1000, "id11"]], "Birchbox": [[1000, "id12"]], "Bestofmedia Group": [[1000, "id13"]], "Change.org": [[1000, "id14"]], "PHIMECA Engineering": [[1000, "id15"]], "HowAboutWe": [[1000, "id16"]], "PeerIndex": [[1000, "id17"]], "DataRobot": [[1000, "id18"]], "OkCupid": [[1000, "id19"]], "Lovely": [[1000, "id20"]], "Data Publica": [[1000, "id21"]], "Machinalis": [[1000, "id22"]], "solido": [[1000, "id23"]], "INFONEA": [[1000, "id24"]], "Dataiku": [[1000, "id25"]], "Otto Group": [[1000, "id26"]], "Zopa": [[1000, "id27"]], "MARS": [[1000, "id28"]], "BNP Paribas Cardif": [[1000, "id29"]], "An introduction to machine learning with scikit-learn": [[1002, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1002, null]], "Machine learning: the problem setting": [[1002, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1002, null], [1009, null]], "Loading an example dataset": [[1002, "loading-an-example-dataset"]], "Shape of the data arrays": [[1002, null]], "Learning and predicting": [[1002, "learning-and-predicting"]], "Choosing the parameters of the model": [[1002, null]], "Conventions": [[1002, "conventions"]], "Type casting": [[1002, "type-casting"]], "Refitting and updating parameters": [[1002, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1002, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1003, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1004, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1005, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1005, null]], "Model selection: choosing estimators and their parameters": [[1006, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1006, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1006, "cross-validation-generators"]], "Exercise": [[1006, null], [1006, null], [1009, null], [1009, null]], "Grid-search and cross-validated estimators": [[1006, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1006, "grid-search"]], "Nested cross-validation": [[1006, null]], "Cross-validated estimators": [[1006, "cross-validated-estimators"]], "Putting it all together": [[1007, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1007, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1007, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1008, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1008, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1008, null]], "An example of reshaping data would be the digits dataset": [[1008, null]], "Estimators objects": [[1008, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1009, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1009, null]], "Vocabulary: classification and regression": [[1009, null]], "Nearest neighbor and the curse of dimensionality": [[1009, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1009, null]], "k-Nearest neighbors classifier": [[1009, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1009, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1009, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1009, "linear-regression"]], "Shrinkage": [[1009, "shrinkage"]], "Different algorithms for the same problem": [[1009, null]], "Shrinkage and sparsity with logistic regression": [[1009, null]], "Support vector machines (SVMs)": [[1009, "support-vector-machines-svms"]], "Linear SVMs": [[1009, "linear-svms"]], "Using kernels": [[1009, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1009, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1009, null]], "Unsupervised learning: seeking representations of the data": [[1010, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1010, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1010, null]], "K-means clustering": [[1010, "k-means-clustering"]], "Application example: vector quantization": [[1010, null]], "Hierarchical agglomerative clustering: Ward": [[1010, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1010, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1010, null]], "Decompositions: from a signal to components and loadings": [[1010, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1010, null]], "Principal component analysis: PCA": [[1010, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1010, "independent-component-analysis-ica"]], "Working With Text Data": [[1011, "working-with-text-data"]], "Tutorial setup": [[1011, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1011, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1011, "extracting-features-from-text-files"]], "Bags of words": [[1011, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1011, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1011, "from-occurrences-to-frequencies"]], "Training a classifier": [[1011, "training-a-classifier"]], "Building a pipeline": [[1011, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1011, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1011, "parameter-tuning-using-grid-search"]], "Exercises": [[1011, "exercises"]], "Exercise 1: Language identification": [[1011, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1011, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1011, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1011, "where-to-from-here"]], "Unsupervised learning": [[1012, "unsupervised-learning"]], "User Guide": [[1013, "user-guide"]], "Under Development": [[1013, "under-development"]], "Available documentation for Scikit-learn": [[1014, "available-documentation-for-scikit-learn"]], "Visualizations": [[1015, "visualizations"]], "Available Plotting Utilities": [[1015, "available-plotting-utilities"]], "Display Objects": [[1015, "display-objects"]], "Release History": [[1016, "release-history"]], "Version 0.12.1": [[1018, "version-0-12-1"]], "Changelog": [[1018, "changelog"], [1018, "id1"], [1018, "id3"], [1018, "id6"], [1018, "id9"], [1018, "id12"], [1018, "id14"], [1018, "id16"], [1018, "id18"], [1018, "id19"], [1019, "changelog"], [1019, "id1"], [1020, "changelog"], [1021, "changelog"], [1022, "changelog"], [1022, "id1"], [1023, "changelog"], [1023, "id1"], [1024, "changelog"], [1024, "id1"], [1024, "id2"], [1025, "changelog"], [1025, "id1"], [1026, "changelog"], [1026, "id1"], [1026, "id5"], [1026, "id10"], [1026, "id23"], [1027, "changelog"], [1027, "id1"], [1027, "id2"], [1027, "id7"], [1028, "changelog"], [1028, "id1"], [1028, "id4"], [1029, "changelog"], [1029, "id1"], [1029, "id4"], [1030, "changelog"], [1030, "id1"], [1030, "id4"], [1031, "changelog"], [1031, "id1"], [1031, "id7"], [1032, "changelog"], [1032, "id1"], [1032, "id7"], [1033, "changelog"], [1033, "id1"], [1033, "id9"], [1034, "changelog"], [1035, "changelog"]], "People": [[1018, "people"], [1018, "id2"], [1018, "id5"], [1018, "id8"], [1018, "id11"], [1018, "id13"], [1018, "id15"], [1018, "id17"], [1019, "people"], [1019, "id2"], [1020, "people"], [1021, "people"]], "Version 0.12": [[1018, "version-0-12"]], "API changes summary": [[1018, "api-changes-summary"], [1018, "id4"], [1018, "id7"], [1018, "id10"], [1019, "api-changes-summary"], [1020, "api-changes-summary"], [1021, "api-changes-summary"], [1022, "api-changes-summary"], [1023, "api-changes-summary"], [1024, "api-changes-summary"], [1024, "id5"], [1025, "api-changes-summary"]], "Version 0.11": [[1018, "version-0-11"]], "Highlights": [[1018, "highlights"], [1021, "highlights"], [1022, "highlights"], [1025, "highlights"], [1026, "highlights"]], "Other changes": [[1018, "other-changes"]], "Version 0.10": [[1018, "version-0-10"]], "Version 0.9": [[1018, "version-0-9"]], "Version 0.8": [[1018, "version-0-8"]], "Version 0.7": [[1018, "version-0-7"]], "Version 0.6": [[1018, "version-0-6"]], "Version 0.5": [[1018, "version-0-5"]], "New classes": [[1018, "new-classes"]], "Fixes": [[1018, "fixes"]], "External dependencies": [[1018, "external-dependencies"]], "Removed modules": [[1018, "removed-modules"]], "Misc": [[1018, "misc"]], "Version 0.4": [[1018, "version-0-4"]], "Earlier versions": [[1018, "earlier-versions"]], "Version 0.13.1": [[1019, "version-0-13-1"]], "Version 0.13": [[1019, "version-0-13"]], "New Estimator Classes": [[1019, "new-estimator-classes"]], "Version 0.14": [[1020, "version-0-14"]], "Version 0.15.2": [[1021, "version-0-15-2"]], "Bug fixes": [[1021, "bug-fixes"], [1021, "id1"], [1021, "id2"], [1022, "bug-fixes"], [1022, "id2"], [1023, "bug-fixes"], [1023, "id2"], [1024, "bug-fixes"], [1024, "id4"], [1025, "bug-fixes"], [1025, "id3"]], "Version 0.15.1": [[1021, "version-0-15-1"]], "Version 0.15": [[1021, "version-0-15"]], "New features": [[1021, "new-features"], [1022, "new-features"], [1023, "new-features"], [1024, "new-features"], [1025, "new-features"]], "Enhancements": [[1021, "enhancements"], [1022, "enhancements"], [1023, "enhancements"], [1024, "enhancements"], [1024, "id3"], [1025, "enhancements"], [1025, "id2"]], "Documentation improvements": [[1021, "documentation-improvements"], [1022, "documentation-improvements"]], "Version 0.16.1": [[1022, "version-0-16-1"]], "Version 0.16": [[1022, "version-0-16"]], "Code Contributors": [[1022, "code-contributors"], [1023, "code-contributors"], [1024, "code-contributors"], [1024, "id6"]], "Version 0.17.1": [[1023, "version-0-17-1"]], "Version 0.17": [[1023, "version-0-17"]], "Version 0.18.2": [[1024, "version-0-18-2"]], "Last release with Python 2.6 support": [[1024, null], [1024, null]], "Version 0.18.1": [[1024, "version-0-18-1"]], "Version 0.18": [[1024, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1024, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1025, "version-0-19-2"]], "Related changes": [[1025, "related-changes"]], "Version 0.19.1": [[1025, "version-0-19-1"]], "API changes": [[1025, "api-changes"]], "Code and Documentation Contributors": [[1025, "code-and-documentation-contributors"], [1025, "id9"], [1026, "code-and-documentation-contributors"], [1026, "id8"], [1026, "id21"], [1026, "id41"], [1027, "code-and-documentation-contributors"], [1028, "code-and-documentation-contributors"], [1029, "code-and-documentation-contributors"], [1030, "code-and-documentation-contributors"], [1031, "code-and-documentation-contributors"], [1032, "code-and-documentation-contributors"], [1033, "code-and-documentation-contributors"], [1034, "code-and-documentation-contributors"], [1035, "code-and-documentation-contributors"]], "Version 0.19": [[1025, "version-0-19"]], "Changed models": [[1025, "changed-models"], [1026, "changed-models"], [1026, "id9"], [1026, "id22"], [1027, "changed-models"], [1027, "id6"], [1028, "changed-models"], [1029, "changed-models"], [1029, "id3"], [1030, "changed-models"], [1031, "changed-models"], [1032, "changed-models"], [1032, "id6"], [1033, "changed-models"], [1033, "id7"], [1034, "changed-models"], [1035, "changed-models"]], "Version 0.20.4": [[1026, "version-0-20-4"]], "sklearn.cluster": [[1026, "sklearn-cluster"], [1026, "id2"], [1026, "id11"], [1026, "id24"], [1027, "sklearn-cluster"], [1027, "id8"], [1028, "sklearn-cluster"], [1028, "id5"], [1029, "sklearn-cluster"], [1029, "id2"], [1029, "id5"], [1030, "sklearn-cluster"], [1031, "sklearn-cluster"], [1031, "id2"], [1031, "id9"], [1032, "sklearn-cluster"], [1032, "id8"], [1033, "sklearn-cluster"], [1033, "id12"], [1034, "sklearn-cluster"]], "sklearn.compose": [[1026, "sklearn-compose"], [1026, "id3"], [1026, "id6"], [1026, "id12"], [1026, "id25"], [1027, "sklearn-compose"], [1027, "id9"], [1028, "sklearn-compose"], [1029, "sklearn-compose"], [1030, "sklearn-compose"], [1030, "id5"], [1031, "sklearn-compose"], [1032, "sklearn-compose"], [1033, "sklearn-compose"], [1034, "sklearn-compose"]], "sklearn.decomposition": [[1026, "sklearn-decomposition"], [1026, "id4"], [1026, "id14"], [1026, "id28"], [1027, "sklearn-decomposition"], [1027, "id11"], [1028, "sklearn-decomposition"], [1029, "sklearn-decomposition"], [1029, "id6"], [1030, "sklearn-decomposition"], [1030, "id7"], [1031, "sklearn-decomposition"], [1031, "id11"], [1032, "sklearn-decomposition"], [1032, "id10"], [1033, "sklearn-decomposition"], [1033, "id14"], [1034, "sklearn-decomposition"], [1035, "sklearn-decomposition"]], "sklearn.model_selection": [[1026, "sklearn-model-selection"], [1026, "id35"], [1027, "sklearn-model-selection"], [1028, "sklearn-model-selection"], [1028, "id9"], [1028, "id13"], [1029, "sklearn-model-selection"], [1030, "sklearn-model-selection"], [1030, "id12"], [1031, "sklearn-model-selection"], [1032, "sklearn-model-selection"], [1033, "sklearn-model-selection"], [1033, "id20"], [1034, "sklearn-model-selection"]], "sklearn.neighbors": [[1026, "sklearn-neighbors"], [1026, "id7"], [1026, "id18"], [1026, "id36"], [1027, "sklearn-neighbors"], [1027, "id5"], [1027, "id17"], [1028, "sklearn-neighbors"], [1028, "id11"], [1030, "sklearn-neighbors"], [1031, "sklearn-neighbors"], [1031, "id5"], [1031, "id18"], [1032, "sklearn-neighbors"], [1033, "sklearn-neighbors"], [1034, "sklearn-neighbors"]], "Version 0.20.3": [[1026, "version-0-20-3"]], "sklearn.covariance": [[1026, "sklearn-covariance"], [1026, "id26"], [1030, "sklearn-covariance"], [1031, "sklearn-covariance"], [1032, "sklearn-covariance"], [1034, "sklearn-covariance"]], "sklearn.datasets": [[1026, "sklearn-datasets"], [1026, "id13"], [1026, "id27"], [1027, "sklearn-datasets"], [1027, "id10"], [1028, "sklearn-datasets"], [1029, "sklearn-datasets"], [1030, "sklearn-datasets"], [1031, "sklearn-datasets"], [1031, "id10"], [1032, "sklearn-datasets"], [1032, "id9"], [1033, "sklearn-datasets"], [1033, "id13"], [1034, "sklearn-datasets"]], "sklearn.feature_extraction": [[1026, "sklearn-feature-extraction"], [1026, "id15"], [1026, "id30"], [1027, "sklearn-feature-extraction"], [1028, "sklearn-feature-extraction"], [1029, "sklearn-feature-extraction"], [1029, "id8"], [1030, "sklearn-feature-extraction"], [1031, "sklearn-feature-extraction"], [1031, "id13"], [1032, "sklearn-feature-extraction"], [1033, "sklearn-feature-extraction"], [1034, "sklearn-feature-extraction"]], "sklearn.impute": [[1026, "sklearn-impute"], [1026, "id31"], [1027, "sklearn-impute"], [1027, "id13"], [1028, "sklearn-impute"], [1028, "id6"], [1029, "sklearn-impute"], [1030, "sklearn-impute"], [1031, "sklearn-impute"], [1032, "sklearn-impute"], [1032, "id12"], [1033, "sklearn-impute"], [1034, "sklearn-impute"]], "sklearn.linear_model": [[1026, "sklearn-linear-model"], [1026, "id16"], [1026, "id32"], [1027, "sklearn-linear-model"], [1027, "id15"], [1028, "sklearn-linear-model"], [1029, "sklearn-linear-model"], [1029, "id9"], [1030, "sklearn-linear-model"], [1030, "id10"], [1031, "sklearn-linear-model"], [1031, "id4"], [1031, "id15"], [1032, "sklearn-linear-model"], [1032, "id13"], [1033, "sklearn-linear-model"], [1033, "id18"], [1034, "sklearn-linear-model"]], "sklearn.preprocessing": [[1026, "sklearn-preprocessing"], [1026, "id19"], [1026, "id37"], [1027, "sklearn-preprocessing"], [1027, "id18"], [1028, "sklearn-preprocessing"], [1028, "id12"], [1029, "sklearn-preprocessing"], [1030, "sklearn-preprocessing"], [1030, "id14"], [1031, "sklearn-preprocessing"], [1031, "id20"], [1032, "sklearn-preprocessing"], [1032, "id4"], [1032, "id16"], [1033, "sklearn-preprocessing"], [1033, "id4"], [1033, "id22"], [1034, "sklearn-preprocessing"]], "sklearn.svm": [[1026, "sklearn-svm"], [1026, "id38"], [1027, "sklearn-svm"], [1028, "sklearn-svm"], [1029, "sklearn-svm"], [1030, "sklearn-svm"], [1031, "sklearn-svm"], [1031, "id21"], [1032, "sklearn-svm"], [1033, "sklearn-svm"], [1034, "sklearn-svm"]], "Version 0.20.2": [[1026, "version-0-20-2"]], "sklearn.metrics": [[1026, "sklearn-metrics"], [1026, "id17"], [1026, "id33"], [1027, "sklearn-metrics"], [1027, "id4"], [1027, "id16"], [1028, "sklearn-metrics"], [1028, "id2"], [1028, "id8"], [1029, "sklearn-metrics"], [1029, "id10"], [1030, "sklearn-metrics"], [1030, "id2"], [1030, "id11"], [1031, "sklearn-metrics"], [1031, "id17"], [1032, "sklearn-metrics"], [1032, "id3"], [1032, "id15"], [1033, "sklearn-metrics"], [1034, "sklearn-metrics"]], "sklearn.utils": [[1026, "sklearn-utils"], [1026, "id20"], [1026, "id39"], [1027, "sklearn-utils"], [1028, "sklearn-utils"], [1028, "id14"], [1029, "sklearn-utils"], [1029, "id12"], [1030, "sklearn-utils"], [1030, "id17"], [1031, "sklearn-utils"], [1031, "id6"], [1031, "id23"], [1032, "sklearn-utils"], [1032, "id18"], [1033, "sklearn-utils"], [1033, "id6"], [1033, "id24"], [1034, "sklearn-utils"]], "Version 0.20.1": [[1026, "version-0-20-1"]], "sklearn.ensemble": [[1026, "sklearn-ensemble"], [1026, "id29"], [1027, "sklearn-ensemble"], [1027, "id12"], [1028, "sklearn-ensemble"], [1029, "sklearn-ensemble"], [1029, "id7"], [1030, "sklearn-ensemble"], [1030, "id8"], [1031, "sklearn-ensemble"], [1031, "id3"], [1031, "id12"], [1032, "sklearn-ensemble"], [1033, "sklearn-ensemble"], [1033, "id3"], [1033, "id15"], [1034, "sklearn-ensemble"]], "sklearn.mixture": [[1026, "sklearn-mixture"], [1026, "id34"], [1027, "sklearn-mixture"], [1031, "sklearn-mixture"], [1032, "sklearn-mixture"]], "Version 0.20.0": [[1026, "version-0-20-0"]], "Known Major Bugs": [[1026, "known-major-bugs"], [1027, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1026, "sklearn-discriminant-analysis"], [1027, "sklearn-discriminant-analysis"], [1030, "sklearn-discriminant-analysis"], [1032, "sklearn-discriminant-analysis"], [1033, "sklearn-discriminant-analysis"], [1034, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1026, "sklearn-dummy"], [1027, "sklearn-dummy"], [1028, "sklearn-dummy"], [1031, "sklearn-dummy"], [1032, "sklearn-dummy"]], "sklearn.feature_selection": [[1026, "sklearn-feature-selection"], [1028, "sklearn-feature-selection"], [1029, "sklearn-feature-selection"], [1030, "sklearn-feature-selection"], [1031, "sklearn-feature-selection"], [1031, "id14"], [1032, "sklearn-feature-selection"], [1032, "id2"], [1032, "id11"], [1033, "sklearn-feature-selection"], [1033, "id16"], [1034, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1026, "sklearn-gaussian-process"], [1028, "sklearn-gaussian-process"], [1029, "sklearn-gaussian-process"], [1030, "sklearn-gaussian-process"], [1030, "id9"], [1031, "sklearn-gaussian-process"], [1032, "sklearn-gaussian-process"], [1033, "sklearn-gaussian-process"], [1034, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1026, "sklearn-isotonic"], [1027, "sklearn-isotonic"], [1028, "sklearn-isotonic"], [1030, "sklearn-isotonic"], [1032, "sklearn-isotonic"], [1033, "sklearn-isotonic"]], "sklearn.manifold": [[1026, "sklearn-manifold"], [1027, "sklearn-manifold"], [1028, "sklearn-manifold"], [1029, "sklearn-manifold"], [1030, "sklearn-manifold"], [1031, "sklearn-manifold"], [1031, "id16"], [1032, "sklearn-manifold"], [1032, "id14"], [1033, "sklearn-manifold"], [1033, "id19"], [1034, "sklearn-manifold"]], "sklearn.multioutput": [[1026, "sklearn-multioutput"], [1027, "sklearn-multioutput"], [1028, "sklearn-multioutput"], [1029, "sklearn-multioutput"], [1030, "sklearn-multioutput"], [1030, "id13"], [1033, "sklearn-multioutput"], [1034, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1026, "sklearn-naive-bayes"], [1028, "sklearn-naive-bayes"], [1028, "id10"], [1029, "sklearn-naive-bayes"], [1030, "sklearn-naive-bayes"], [1031, "sklearn-naive-bayes"], [1033, "sklearn-naive-bayes"], [1034, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1026, "sklearn-neural-network"], [1027, "sklearn-neural-network"], [1028, "sklearn-neural-network"], [1029, "sklearn-neural-network"], [1030, "sklearn-neural-network"], [1031, "sklearn-neural-network"], [1032, "sklearn-neural-network"], [1033, "sklearn-neural-network"], [1033, "id21"], [1034, "sklearn-neural-network"]], "sklearn.pipeline": [[1026, "sklearn-pipeline"], [1027, "sklearn-pipeline"], [1028, "sklearn-pipeline"], [1029, "sklearn-pipeline"], [1030, "sklearn-pipeline"], [1031, "sklearn-pipeline"], [1031, "id19"], [1032, "sklearn-pipeline"], [1033, "sklearn-pipeline"], [1034, "sklearn-pipeline"]], "sklearn.tree": [[1026, "sklearn-tree"], [1027, "sklearn-tree"], [1027, "id19"], [1028, "sklearn-tree"], [1029, "sklearn-tree"], [1030, "sklearn-tree"], [1030, "id16"], [1031, "sklearn-tree"], [1031, "id22"], [1032, "sklearn-tree"], [1032, "id5"], [1032, "id17"], [1033, "sklearn-tree"], [1033, "id5"], [1033, "id23"], [1034, "sklearn-tree"]], "Multiple modules": [[1026, "multiple-modules"], [1027, "multiple-modules"]], "Changes to estimator checks": [[1026, "changes-to-estimator-checks"], [1027, "changes-to-estimator-checks"], [1028, "changes-to-estimator-checks"]], "Version 0.21.3": [[1027, "version-0-21-3"]], "Legend for changelogs": [[1027, "legend-for-changelogs"], [1028, "legend-for-changelogs"], [1029, "legend-for-changelogs"], [1030, "legend-for-changelogs"], [1031, "legend-for-changelogs"], [1032, "legend-for-changelogs"], [1033, "legend-for-changelogs"], [1034, "legend-for-changelogs"], [1035, "legend-for-changelogs"]], "sklearn.inspection": [[1027, "sklearn-inspection"], [1027, "id3"], [1027, "id14"], [1028, "sklearn-inspection"], [1028, "id7"], [1029, "sklearn-inspection"], [1029, "id11"], [1030, "sklearn-inspection"], [1031, "sklearn-inspection"], [1032, "sklearn-inspection"], [1033, "sklearn-inspection"], [1033, "id17"], [1034, "sklearn-inspection"]], "Version 0.21.2": [[1027, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1027, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1027, "version-0-21-1"]], "Version 0.21.0": [[1027, "version-0-21-0"]], "sklearn.base": [[1027, "sklearn-base"], [1028, "sklearn-base"], [1030, "sklearn-base"], [1031, "sklearn-base"], [1032, "sklearn-base"], [1033, "sklearn-base"], [1033, "id2"], [1033, "id10"], [1034, "sklearn-base"], [1035, "sklearn-base"]], "sklearn.calibration": [[1027, "sklearn-calibration"], [1028, "sklearn-calibration"], [1030, "sklearn-calibration"], [1031, "sklearn-calibration"], [1031, "id8"], [1032, "sklearn-calibration"], [1033, "sklearn-calibration"], [1033, "id11"], [1034, "sklearn-calibration"]], "sklearn.externals": [[1027, "sklearn-externals"]], "sklearn.multiclass": [[1027, "sklearn-multiclass"], [1030, "sklearn-multiclass"], [1031, "sklearn-multiclass"], [1032, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1028, "version-0-22-2-post1"]], "Version 0.22.1": [[1028, "version-0-22-1"]], "sklearn.semi_supervised": [[1028, "sklearn-semi-supervised"], [1029, "sklearn-semi-supervised"], [1030, "sklearn-semi-supervised"], [1030, "id3"], [1030, "id15"], [1034, "sklearn-semi-supervised"]], "Version 0.22.0": [[1028, "version-0-22-0"]], "Website update": [[1028, "website-update"]], "Clear definition of the public API": [[1028, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1028, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1028, "sklearn-cross-decomposition"], [1030, "sklearn-cross-decomposition"], [1030, "id6"], [1032, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1028, "sklearn-kernel-approximation"], [1030, "sklearn-kernel-approximation"], [1031, "sklearn-kernel-approximation"], [1032, "sklearn-kernel-approximation"], [1033, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1029, "version-0-23-2"]], "Version 0.23.1": [[1029, "version-0-23-1"]], "Version 0.23.0": [[1029, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1029, "enforcing-keyword-only-arguments"], [1031, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1030, "version-0-24-2"]], "feature_extraction": [[1030, "feature-extraction"]], "Version 0.24.1": [[1030, "version-0-24-1"]], "Packaging": [[1030, "packaging"]], "Version 0.24.0": [[1030, "version-0-24-0"]], "sklearn.exceptions": [[1030, "sklearn-exceptions"], [1034, "sklearn-exceptions"]], "Version 1.0.2": [[1031, "version-1-0-2"]], "Version 1.0.1": [[1031, "version-1-0-1"]], "Fixed models": [[1031, "fixed-models"]], "Version 1.0.0": [[1031, "version-1-0-0"]], "Minimal dependencies": [[1031, "minimal-dependencies"], [1032, "minimal-dependencies"]], "Version 1.1.3": [[1032, "version-1-1-3"]], "Version 1.1.2": [[1032, "version-1-1-2"]], "Version 1.1.1": [[1032, "version-1-1-1"]], "Version 1.1.0": [[1032, "version-1-1-0"]], "sklearn.random_projection": [[1032, "sklearn-random-projection"]], "Version 1.2.2": [[1033, "version-1-2-2"]], "Version 1.2.1": [[1033, "version-1-2-1"]], "Changes impacting all modules": [[1033, "changes-impacting-all-modules"], [1033, "id8"], [1034, "changes-impacting-all-modules"], [1035, "changes-impacting-all-modules"]], "Version 1.2.0": [[1033, "version-1-2-0"]], "Version 1.3.0": [[1034, "version-1-3-0"]], "Changed displays": [[1034, "changed-displays"]], "Experimental / Under Development": [[1034, "experimental-under-development"]], "sklearn": [[1034, "sklearn"]], "Version 1.4.0": [[1035, "version-1-4-0"]]}, "indexentries": {"1d": [[386, "term-1d"]], "1d array": [[386, "term-1d-array"]], "2d": [[386, "term-2d"]], "2d array": [[386, "term-2d-array"]], "api": [[386, "term-API"]], "cv splitter": [[386, "term-CV-splitter"]], "slep": [[386, "term-SLEP"]], "sleps": [[386, "term-SLEPs"]], "x": [[386, "term-X"]], "xt": [[386, "term-Xt"]], "y": [[386, "term-Y"], [386, "term-y"]], "_estimator_type": [[386, "term-_estimator_type"]], "array-like": [[386, "term-array-like"]], "attribute": [[386, "term-attribute"]], "attributes": [[386, "term-attributes"]], "backwards compatibility": [[386, "term-backwards-compatibility"]], "binary": [[386, "term-binary"]], "callable": [[386, "term-callable"]], "categorical feature": [[386, "term-categorical-feature"]], "class_weight": [[386, "term-class_weight"]], "classes_": [[386, "term-classes_"]], "classifier": [[386, "term-classifier"]], "classifiers": [[386, "term-classifiers"]], "clone": [[386, "term-clone"]], "cloned": [[386, "term-cloned"]], "clusterer": [[386, "term-clusterer"]], "clusterers": [[386, "term-clusterers"]], "coef_": [[386, "term-coef_"]], "common tests": [[386, "term-common-tests"]], "components_": [[386, "term-components_"]], "continuous": [[386, "term-continuous"]], "continuous multi-output": [[386, "term-continuous-multi-output"]], "continuous multioutput": [[386, "term-continuous-multioutput"]], "cross-validation estimator": [[386, "term-cross-validation-estimator"]], "cross-validation generator": [[386, "term-cross-validation-generator"]], "cross-validation splitter": [[386, "term-cross-validation-splitter"]], "cv": [[386, "term-cv"]], "data leakage": [[386, "term-data-leakage"]], "data type": [[386, "term-data-type"]], "decision_function": [[386, "term-decision_function"]], "density estimator": [[386, "term-density-estimator"]], "deprecation": [[386, "term-deprecation"]], "dimensionality": [[386, "term-dimensionality"]], "docstring": [[386, "term-docstring"]], "double underscore": [[386, "term-double-underscore"]], "double underscore notation": [[386, "term-double-underscore-notation"]], "dtype": [[386, "term-dtype"]], "duck typing": [[386, "term-duck-typing"]], "early stopping": [[386, "term-early-stopping"]], "embedding_": [[386, "term-embedding_"]], "estimator": [[386, "term-estimator"]], "estimator instance": [[386, "term-estimator-instance"]], "estimator tags": [[386, "term-estimator-tags"]], "estimators": [[386, "term-estimators"]], "evaluation metric": [[386, "term-evaluation-metric"]], "evaluation metrics": [[386, "term-evaluation-metrics"]], "examples": [[386, "term-examples"]], "experimental": [[386, "term-experimental"]], "feature": [[386, "term-feature"]], "feature extractor": [[386, "term-feature-extractor"]], "feature extractors": [[386, "term-feature-extractors"]], "feature vector": [[386, "term-feature-vector"]], "feature_importances_": [[386, "term-feature_importances_"]], "features": [[386, "term-features"]], "fit": [[386, "term-fit"]], "fit_predict": [[386, "term-fit_predict"]], "fit_transform": [[386, "term-fit_transform"]], "fitted": [[386, "term-fitted"]], "fitting": [[386, "term-fitting"]], "function": [[386, "term-function"]], "gallery": [[386, "term-gallery"]], "get_feature_names_out": [[386, "term-get_feature_names_out"]], "get_n_splits": [[386, "term-get_n_splits"]], "get_params": [[386, "term-get_params"]], "groups": [[386, "term-groups"]], "hyper-parameter": [[386, "term-hyper-parameter"]], "hyperparameter": [[386, "term-hyperparameter"]], "imputation": [[386, "term-imputation"]], "impute": [[386, "term-impute"]], "indexable": [[386, "term-indexable"]], "induction": [[386, "term-induction"]], "inductive": [[386, "term-inductive"]], "joblib": [[386, "term-joblib"]], "kernel": [[386, "term-kernel"]], "label indicator matrix": [[386, "term-label-indicator-matrix"]], "labels_": [[386, "term-labels_"]], "leakage": [[386, "term-leakage"]], "max_iter": [[386, "term-max_iter"]], "memmapping": [[386, "term-memmapping"]], "memory": [[386, "term-memory"]], "memory map": [[386, "term-memory-map"]], "memory mapping": [[386, "term-memory-mapping"]], "meta-estimator": [[386, "term-meta-estimator"]], "meta-estimators": [[386, "term-meta-estimators"]], "metaestimator": [[386, "term-metaestimator"]], "metaestimators": [[386, "term-metaestimators"]], "metric": [[386, "term-metric"]], "missing values": [[386, "term-missing-values"]], "multi-class": [[386, "term-multi-class"]], "multi-class multi-output": [[386, "term-multi-class-multi-output"]], "multi-label": [[386, "term-multi-label"]], "multi-output": [[386, "term-multi-output"]], "multi-output continuous": [[386, "term-multi-output-continuous"]], "multi-output multi-class": [[386, "term-multi-output-multi-class"]], "multiclass": [[386, "term-multiclass"]], "multiclass multioutput": [[386, "term-multiclass-multioutput"]], "multilabel": [[386, "term-multilabel"]], "multilabel indicator matrices": [[386, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[386, "term-multilabel-indicator-matrix"]], "multioutput": [[386, "term-multioutput"]], "multioutput continuous": [[386, "term-multioutput-continuous"]], "multioutput multiclass": [[386, "term-multioutput-multiclass"]], "n_components": [[386, "term-n_components"]], "n_features": [[386, "term-n_features"]], "n_iter_": [[386, "term-n_iter_"]], "n_iter_no_change": [[386, "term-n_iter_no_change"]], "n_jobs": [[386, "term-n_jobs"]], "n_outputs": [[386, "term-n_outputs"]], "n_samples": [[386, "term-n_samples"]], "n_targets": [[386, "term-n_targets"]], "narrative docs": [[386, "term-narrative-docs"]], "narrative documentation": [[386, "term-narrative-documentation"]], "np": [[386, "term-np"]], "online learning": [[386, "term-online-learning"]], "out-of-core": [[386, "term-out-of-core"]], "outlier detector": [[386, "term-outlier-detector"]], "outlier detectors": [[386, "term-outlier-detectors"]], "outputs": [[386, "term-outputs"]], "pair": [[386, "term-pair"]], "pairwise metric": [[386, "term-pairwise-metric"]], "pairwise metrics": [[386, "term-pairwise-metrics"]], "param": [[386, "term-param"]], "parameter": [[386, "term-parameter"]], "parameters": [[386, "term-parameters"]], "params": [[386, "term-params"]], "partial_fit": [[386, "term-partial_fit"]], "pd": [[386, "term-pd"]], "pos_label": [[386, "term-pos_label"]], "precomputed": [[386, "term-precomputed"]], "predict": [[386, "term-predict"]], "predict_log_proba": [[386, "term-predict_log_proba"]], "predict_proba": [[386, "term-predict_proba"]], "predictor": [[386, "term-predictor"]], "predictors": [[386, "term-predictors"]], "random_state": [[386, "term-random_state"]], "rectangular": [[386, "term-rectangular"]], "regressor": [[386, "term-regressor"]], "regressors": [[386, "term-regressors"]], "sample": [[386, "term-sample"]], "sample properties": [[386, "term-sample-properties"]], "sample property": [[386, "term-sample-property"]], "sample_weight": [[386, "term-sample_weight"]], "samples": [[386, "term-samples"]], "scikit-learn enhancement proposals": [[386, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[386, "term-scikit-learn-contrib"]], "score": [[386, "term-score"]], "score_samples": [[386, "term-score_samples"]], "scorer": [[386, "term-scorer"]], "scoring": [[386, "term-scoring"]], "semi-supervised": [[386, "term-semi-supervised"]], "semi-supervised learning": [[386, "term-semi-supervised-learning"]], "semisupervised": [[386, "term-semisupervised"]], "set_params": [[386, "term-set_params"]], "sparse graph": [[386, "term-sparse-graph"]], "sparse matrix": [[386, "term-sparse-matrix"]], "split": [[386, "term-split"]], "stateless": [[386, "term-stateless"]], "supervised": [[386, "term-supervised"]], "supervised learning": [[386, "term-supervised-learning"]], "target": [[386, "term-target"]], "targets": [[386, "term-targets"]], "transduction": [[386, "term-transduction"]], "transductive": [[386, "term-transductive"]], "transform": [[386, "term-transform"]], "transformer": [[386, "term-transformer"]], "transformers": [[386, "term-transformers"]], "unlabeled": [[386, "term-unlabeled"]], "unlabeled data": [[386, "term-unlabeled-data"]], "unsupervised": [[386, "term-unsupervised"]], "unsupervised learning": [[386, "term-unsupervised-learning"]], "vectorizer": [[386, "term-vectorizer"]], "vectorizers": [[386, "term-vectorizers"]], "verbose": [[386, "term-verbose"]], "warm_start": [[386, "term-warm_start"]], "module": [[398, "module-sklearn.base"], [398, "module-sklearn.calibration"], [398, "module-sklearn.cluster"], [398, "module-sklearn.compose"], [398, "module-sklearn.covariance"], [398, "module-sklearn.cross_decomposition"], [398, "module-sklearn.datasets"], [398, "module-sklearn.decomposition"], [398, "module-sklearn.discriminant_analysis"], [398, "module-sklearn.dummy"], [398, "module-sklearn.ensemble"], [398, "module-sklearn.exceptions"], [398, "module-sklearn.experimental"], [398, "module-sklearn.feature_extraction"], [398, "module-sklearn.feature_extraction.image"], [398, "module-sklearn.feature_extraction.text"], [398, "module-sklearn.feature_selection"], [398, "module-sklearn.gaussian_process"], [398, "module-sklearn.impute"], [398, "module-sklearn.inspection"], [398, "module-sklearn.isotonic"], [398, "module-sklearn.kernel_approximation"], [398, "module-sklearn.kernel_ridge"], [398, "module-sklearn.linear_model"], [398, "module-sklearn.manifold"], [398, "module-sklearn.metrics"], [398, "module-sklearn.metrics.cluster"], [398, "module-sklearn.metrics.pairwise"], [398, "module-sklearn.mixture"], [398, "module-sklearn.model_selection"], [398, "module-sklearn.multiclass"], [398, "module-sklearn.multioutput"], [398, "module-sklearn.naive_bayes"], [398, "module-sklearn.neighbors"], [398, "module-sklearn.neural_network"], [398, "module-sklearn.pipeline"], [398, "module-sklearn.preprocessing"], [398, "module-sklearn.random_projection"], [398, "module-sklearn.semi_supervised"], [398, "module-sklearn.svm"], [398, "module-sklearn.tree"], [398, "module-sklearn.utils"], [568, "module-sklearn.experimental.enable_halving_search_cv"], [569, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[398, "module-sklearn.base"]], "sklearn.calibration": [[398, "module-sklearn.calibration"]], "sklearn.cluster": [[398, "module-sklearn.cluster"]], "sklearn.compose": [[398, "module-sklearn.compose"]], "sklearn.covariance": [[398, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[398, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[398, "module-sklearn.datasets"]], "sklearn.decomposition": [[398, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[398, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[398, "module-sklearn.dummy"]], "sklearn.ensemble": [[398, "module-sklearn.ensemble"]], "sklearn.exceptions": [[398, "module-sklearn.exceptions"]], "sklearn.experimental": [[398, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[398, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[398, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[398, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[398, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[398, "module-sklearn.gaussian_process"]], "sklearn.impute": [[398, "module-sklearn.impute"]], "sklearn.inspection": [[398, "module-sklearn.inspection"]], "sklearn.isotonic": [[398, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[398, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[398, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[398, "module-sklearn.linear_model"]], "sklearn.manifold": [[398, "module-sklearn.manifold"]], "sklearn.metrics": [[398, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[398, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[398, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[398, "module-sklearn.mixture"]], "sklearn.model_selection": [[398, "module-sklearn.model_selection"]], "sklearn.multiclass": [[398, "module-sklearn.multiclass"]], "sklearn.multioutput": [[398, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[398, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[398, "module-sklearn.neighbors"]], "sklearn.neural_network": [[398, "module-sklearn.neural_network"]], "sklearn.pipeline": [[398, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[398, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[398, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[398, "module-sklearn.semi_supervised"]], "sklearn.svm": [[398, "module-sklearn.svm"]], "sklearn.tree": [[398, "module-sklearn.tree"]], "sklearn.utils": [[398, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[410, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[411, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[412, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[413, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[413, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[413, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[413, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[414, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[414, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[414, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[414, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[414, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[415, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[415, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[416, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[416, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[417, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[417, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[418, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[418, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[419, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[420, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[420, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[421, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[421, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[422, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[422, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[422, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[423, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[424, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[425, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[426, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[426, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[427, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[427, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[427, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[427, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[428, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[429, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[429, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[429, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[429, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[429, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[429, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[429, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[430, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[430, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[430, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[430, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[430, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[430, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[431, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[431, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[432, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[432, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[433, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[433, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[433, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[433, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[433, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[433, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[433, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[434, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[434, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[434, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[435, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[435, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[435, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[435, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[435, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[435, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[435, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[436, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[436, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[437, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[437, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[437, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[437, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[437, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[437, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[437, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[438, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[438, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[439, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[439, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[439, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[439, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[439, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[439, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[440, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[440, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[440, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[440, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[440, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[440, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[440, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[440, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[440, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[441, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[441, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[441, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[441, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[441, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[441, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[442, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[442, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[442, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[442, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[442, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[442, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[442, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[442, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[442, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[443, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[444, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[445, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[446, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[447, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[448, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[449, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[450, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[451, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[452, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[453, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[453, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[453, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[453, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[453, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[453, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[453, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[453, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[453, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[453, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[454, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[454, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[454, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[454, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[454, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[454, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[454, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[454, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[454, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[455, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[456, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[457, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[458, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[458, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[459, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[459, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[460, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[460, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[461, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[461, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[462, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[462, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[463, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[463, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[464, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[464, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[465, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[465, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[466, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[467, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[468, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[469, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[470, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[471, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[471, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[472, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[472, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[473, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[473, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[474, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[474, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[474, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[474, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[474, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[474, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[474, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[474, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[474, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[475, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[476, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[477, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[478, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[479, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[480, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[481, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[482, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[483, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[484, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[485, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[488, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[489, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[490, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[491, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[492, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[493, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[494, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[495, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[496, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[497, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[520, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[520, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[520, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[520, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[520, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[520, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[520, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[520, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[520, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[521, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[521, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[522, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[522, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[523, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[523, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[524, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[524, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[525, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[525, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[526, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[527, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[527, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[528, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[528, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[529, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[529, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[530, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[530, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[531, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[531, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[531, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[531, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[531, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[531, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[531, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[531, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[531, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[531, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[531, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[532, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[532, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[533, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[533, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[534, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[535, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[536, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[537, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[538, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[539, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[540, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[540, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[541, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[541, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[542, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[542, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[542, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[542, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[543, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[543, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[543, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[543, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[544, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[544, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[544, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[544, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[545, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[545, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[545, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[545, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[545, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[545, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[545, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[545, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[545, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[545, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[545, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[546, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[546, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[546, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[546, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[547, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[547, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[547, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[547, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[548, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[548, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[548, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[548, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[549, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[549, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[549, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[549, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[550, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[551, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[552, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[552, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[552, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[552, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[553, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[553, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[553, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[554, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[554, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[554, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[555, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[555, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[555, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[555, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[556, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[556, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[556, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[556, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[557, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[557, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[557, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[557, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[558, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[558, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[558, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[559, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[559, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[559, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[560, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[560, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[561, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[561, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[562, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[562, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[563, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[563, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[564, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[564, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[565, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[565, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[566, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[566, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[567, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[567, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[568, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[569, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[570, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[570, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[571, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[571, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[571, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[571, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[571, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[571, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[571, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[571, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[571, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[572, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[572, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[572, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[572, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[572, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[572, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[572, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[572, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[573, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[574, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[575, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[576, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[577, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[577, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[578, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[578, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[579, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[579, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[580, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[581, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[581, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[582, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[582, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[582, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[583, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[583, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[583, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[584, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[584, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[585, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[585, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[586, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[586, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[586, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[586, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[587, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[587, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[588, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[588, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[589, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[589, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[590, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[590, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[590, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[590, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[590, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[590, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[590, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[591, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[592, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[593, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[594, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[595, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[596, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[597, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[598, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[599, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[600, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[601, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[602, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[603, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[603, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[603, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[603, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[603, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[603, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[603, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[603, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[603, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[603, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[603, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[603, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[604, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[605, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[605, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[606, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[607, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[607, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[607, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[607, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[607, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[607, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[607, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[607, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[607, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[607, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[607, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[607, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[608, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[608, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[608, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[608, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[608, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[608, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[608, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[608, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[608, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[608, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[608, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[608, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[609, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[610, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[610, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[610, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[610, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[610, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[610, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[610, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[610, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[610, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[610, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[610, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[611, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[611, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[611, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[611, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[611, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[611, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[611, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[611, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[611, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[611, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[611, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[612, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[613, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[613, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[613, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[613, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[613, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[613, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[613, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[613, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[613, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[613, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[613, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[614, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[615, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[616, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[616, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[616, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[616, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[616, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[616, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[616, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[616, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[616, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[617, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[617, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[617, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[617, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[617, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[617, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[617, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[617, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[617, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[618, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[618, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[618, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[618, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[618, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[618, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[618, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[618, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[618, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[619, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[619, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[620, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[620, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[620, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[621, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[621, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[621, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[622, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[623, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[624, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[624, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[625, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[626, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[627, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[628, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[628, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[628, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[628, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[628, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[628, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[628, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[628, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[628, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[629, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[630, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[630, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[630, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[630, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[630, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[630, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[630, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[630, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[630, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[631, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[632, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[632, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[632, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[632, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[632, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[632, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[632, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[632, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[632, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[633, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[633, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[633, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[633, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[633, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[633, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[633, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[633, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[633, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[634, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[634, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[635, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[635, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[635, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[635, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[635, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[635, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[635, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[635, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[635, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[635, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[635, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[636, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[636, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[636, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[636, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[636, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[636, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[636, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[636, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[636, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[636, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[637, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[637, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[637, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[637, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[637, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[637, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[637, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[637, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[637, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[638, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[638, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[638, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[638, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[638, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[638, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[638, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[638, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[638, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[639, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[639, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[639, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[639, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[639, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[639, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[639, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[639, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[639, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[640, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[640, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[640, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[640, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[640, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[640, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[640, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[640, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[640, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[641, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[641, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[641, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[641, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[641, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[641, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[641, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[641, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[641, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[641, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[641, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[642, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[642, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[642, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[642, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[642, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[642, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[642, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[642, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[642, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[642, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[643, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[643, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[643, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[643, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[643, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[643, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[643, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[643, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[643, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[644, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[644, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[644, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[644, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[644, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[644, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[644, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[644, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[644, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[645, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[645, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[645, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[645, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[645, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[645, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[645, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[645, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[645, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[646, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[646, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[646, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[646, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[646, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[646, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[646, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[646, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[646, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[647, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[647, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[648, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[648, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[649, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[649, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[649, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[650, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[651, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[651, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[651, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[651, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[651, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[651, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[651, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[651, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[651, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[651, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[651, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[652, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[653, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[653, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[653, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[653, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[653, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[653, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[653, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[653, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[654, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[654, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[654, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[654, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[654, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[654, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[654, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[655, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[656, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[657, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[657, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[658, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[658, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[658, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[658, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[658, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[658, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[658, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[658, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[658, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[659, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[659, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[659, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[659, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[659, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[659, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[659, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[659, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[659, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[660, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[660, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[660, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[660, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[660, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[660, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[660, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[660, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[661, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[661, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[661, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[661, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[661, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[661, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[661, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[661, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[661, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[662, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[662, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[662, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[662, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[662, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[662, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[662, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[662, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[663, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[663, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[663, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[664, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[664, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[665, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[665, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[666, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[666, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[667, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[668, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[668, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[668, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[668, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[668, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[668, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[668, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[668, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[669, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[669, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[669, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[669, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[669, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[669, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[669, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[669, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[670, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[671, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[672, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[673, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[674, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[675, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[676, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[677, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[677, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[678, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[678, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[678, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[678, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[678, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[678, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[678, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[678, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[678, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[679, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[679, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[679, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[679, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[679, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[679, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[679, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[680, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[680, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[680, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[680, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[680, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[680, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[681, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[681, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[681, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[681, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[681, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[681, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[681, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[681, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[682, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[683, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[684, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[685, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[686, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[686, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[686, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[686, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[687, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[687, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[687, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[687, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[688, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric method)": [[688, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[689, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[689, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[689, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[689, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[690, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[690, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[690, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[690, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[691, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[691, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[691, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[691, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[692, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[693, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[694, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[695, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[696, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[697, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[698, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[699, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[700, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[701, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[702, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[703, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[704, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[707, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[709, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[715, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[720, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[721, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[722, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[723, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[724, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[728, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[729, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[730, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[731, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[732, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[733, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[734, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[735, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[736, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[737, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[738, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[739, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[740, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[741, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[742, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[743, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[744, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[745, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[766, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[767, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[768, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[769, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[770, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[771, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[772, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[773, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[774, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[775, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[776, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[777, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[778, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[779, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[780, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[781, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[782, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[783, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[783, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[784, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[784, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[785, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[785, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[785, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[785, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[786, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[786, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[786, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[786, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[786, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[787, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[787, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[787, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[787, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[787, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[788, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[788, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[788, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[788, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[789, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[789, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[790, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[790, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[790, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[790, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[791, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[791, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[791, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[792, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[792, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[792, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[792, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[792, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[793, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[793, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[793, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[793, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[794, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[794, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[794, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[794, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[794, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[795, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[795, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[795, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[795, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[796, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[797, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[798, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[798, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[798, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[798, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[799, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[799, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[799, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[799, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[800, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[800, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[800, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[800, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[801, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[801, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[801, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[801, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[802, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[802, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[802, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[802, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[803, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[803, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[803, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[803, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[803, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[804, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[804, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[804, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[804, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[805, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[805, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[805, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[805, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[806, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[806, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[806, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[806, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[807, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[807, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[807, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[808, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[809, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[810, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[811, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[812, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[813, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[814, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[815, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[816, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[816, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[816, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[817, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[817, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[817, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[817, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[818, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[818, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[818, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[818, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[818, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[818, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[818, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[818, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[819, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[819, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[820, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[820, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[821, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[821, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[822, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[822, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[822, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[822, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[822, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[822, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[822, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[822, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[823, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[823, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[824, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[824, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[825, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[825, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[826, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[826, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[827, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[827, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[828, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.balltree method)": [[828, "sklearn.neighbors.BallTree.valid_metrics"]], "kdtree (class in sklearn.neighbors)": [[829, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.kdtree method)": [[829, "sklearn.neighbors.KDTree.valid_metrics"]], "kneighborsclassifier (class in sklearn.neighbors)": [[830, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[830, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[831, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[831, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[832, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[832, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[833, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[833, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[833, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[833, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[833, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[833, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[833, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[833, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[833, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[834, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[834, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[835, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[835, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[835, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[835, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[835, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[835, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[835, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[835, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[836, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[836, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[836, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[836, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[836, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[836, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[836, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[836, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[836, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[837, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[838, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[839, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[840, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[841, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[842, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[843, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[844, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[844, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[845, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[845, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[846, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[846, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[846, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[846, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[846, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[846, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[846, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[846, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[846, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[847, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[847, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[847, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[847, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[847, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[847, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[847, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[847, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[847, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[847, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[847, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[848, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[848, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[848, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[848, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[848, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[848, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[849, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[850, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[851, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[852, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[852, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[853, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[854, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[854, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[855, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[856, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[856, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[856, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[856, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[856, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[856, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[856, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[856, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[857, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[858, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[859, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[859, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[859, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[859, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[859, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[859, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[859, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[859, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[860, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[860, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[861, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[861, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[862, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[862, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[863, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[863, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[863, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[863, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[863, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[863, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[863, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[863, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[863, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[864, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[865, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[866, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[867, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[868, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[869, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[869, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[869, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[869, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[869, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[869, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[869, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[869, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[869, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[870, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[871, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[872, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[873, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[874, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[875, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[876, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[877, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[878, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[879, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[880, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[880, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[881, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[881, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[882, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[883, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[883, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[883, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[883, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[883, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[883, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[883, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[883, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[883, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[884, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[884, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[884, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[884, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[884, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[884, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[884, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[884, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[884, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[885, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[886, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[887, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[888, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[888, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[889, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[889, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[889, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[889, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[889, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[889, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[889, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[889, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[889, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[890, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[890, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[890, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[890, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[890, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[890, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[891, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[891, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[891, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[891, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[891, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[891, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[891, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[891, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[891, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[891, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[891, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[892, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[892, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[892, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[892, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[893, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[893, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[893, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[893, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[893, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[893, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[894, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[894, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[894, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[894, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[894, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[894, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[894, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[894, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[894, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[894, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[894, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[895, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[896, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[896, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[896, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[897, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[897, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[897, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[898, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[898, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[898, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[899, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[899, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[899, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[900, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[901, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[902, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[903, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[903, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[904, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[905, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[906, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[907, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[908, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[909, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[910, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[911, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[912, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[913, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[914, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[915, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[916, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[917, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[918, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[919, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[920, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[921, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[922, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[923, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[924, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[925, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[926, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[927, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[928, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[929, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[930, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[931, "sklearn.utils.indexable"]], "metadatarequest() (in module sklearn.utils.metadata_routing)": [[932, "sklearn.utils.metadata_routing.MetadataRequest"]], "metadatarouter() (in module sklearn.utils.metadata_routing)": [[933, "sklearn.utils.metadata_routing.MetadataRouter"]], "methodmapping() (in module sklearn.utils.metadata_routing)": [[934, "sklearn.utils.metadata_routing.MethodMapping"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[935, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[936, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[937, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[938, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[939, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[940, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[941, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[942, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[942, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[942, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[942, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[942, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[943, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[944, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[945, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[946, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[947, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[948, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[949, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[950, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[951, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[952, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[953, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[954, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[955, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[956, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[957, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[958, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[959, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[960, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[961, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[962, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[963, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[964, "sklearn.utils.validation.has_fit_parameter"]]}})